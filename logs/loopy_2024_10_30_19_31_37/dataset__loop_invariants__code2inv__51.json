{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/51.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c != 4) ==> unknown();\nloop invariant (c == 4) ==> !unknown();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4; c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c >= 0;\nloop invariant c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 || c == 4;\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 || c == 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant (c == 0 || c == 1);\nloop invariant (c == 0 || c == 1 || c == 4);\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 0 ==> c <= 1;\nloop invariant c == 1 ==> c <= 2;\nloop invariant c == 2 ==> c <= 3;\nloop invariant c == 3 ==> c <= 4;\nloop invariant c == 4 ==> c == 0;\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 0 ==> c <= 1;\nloop invariant c == 1 ==> c <= 2;\nloop invariant c == 2 ==> c <= 3;\nloop invariant c == 3 ==> c <= 4;\nloop invariant c == 4 ==> c == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant c == 1 || c == 4;\nloop invariant 0 <= c <= 5;\nloop invariant c == 1 || c == 4;\nloop invariant 0 <= c <= 5;\nloop invariant c == 1 || c == 4;\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 0 ==> unknown();\nloop invariant c == 1 ==> unknown() ==> (c != 4);\nloop invariant c == 2 ==> unknown() ==> (c != 4);\nloop invariant c == 3 ==> unknown() ==> (c != 4);\nloop invariant c == 4 ==> unknown() ==> (c == 4);\nloop invariant c == 1 ==> !unknown();\nloop invariant c == 2 ==> !unknown();\nloop invariant c == 3 ==> !unknown();\nloop invariant c == 4 ==> !unknown();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 ==> c <= 4;\nloop invariant unknown() ==> c <= 4;\nloop invariant !unknown() ==> c <= 4;\nloop invariant c == 4 ==> c == 4;\nloop invariant c != 4 ==> c < 4;\nloop invariant c != 4 ==> c <= 3;\nloop invariant c != 4 ==> c <= 2;\nloop invariant c != 4 ==> c <= 1;\nloop invariant c != 4 ==> c <= 0;\nloop invariant c != 4 ==> c == -1;\nloop invariant c != 4 ==> c == -2;\nloop invariant c != 4 ==> c == -3;\nloop invariant c != 4 ==> c == -4;\nloop invariant c != 4 ==> c == -5;\nloop invariant c != 4 ==> c == -6;\nloop invariant c != 4 ==> c == -7;\nloop invariant c != 4 ==> c == -8;\nloop invariant c != 4 ==> c == -9;\nloop invariant c != 4 ==> c == -10;\nloop invariant c != 4 ==> c == -11;\nloop invariant c != 4 ==> c == -12;\nloop invariant c != 4 ==> c == -13;\nloop invariant c != 4 ==> c == -14;\nloop invariant c != 4 ==> c == -15;\nloop invariant c != 4 ==> c == -16;\nloop invariant c != 4 ==> c == -17;\nloop invariant c != 4 ==> c == -18;\nloop invariant c != 4 ==> c == -19;\nloop invariant c != 4 ==> c == -20;\nloop invariant c != 4 ==> c == -21;\nloop invariant c != 4 ==> c == -22;\nloop invariant c != 4 ==> c == -23;\nloop invariant c != 4 ==> c == -24;\nloop invariant c != 4 ==> c == -25;\nloop invariant c != 4 ==> c == -26;\nloop invariant c != 4 ==> c == -27;\nloop invariant c != 4 ==> c == -28;\nloop invariant c != 4 ==> c == -29;\nloop invariant c != 4 ==> c == -30;\nloop invariant c != 4 ==> c == -31;\nloop invariant c != 4 ==> c == -32;\nloop invariant c != 4 ==> c == -33;\nloop invariant c != 4 ==> c == -34;\nloop invariant c != 4 ==> c == -35;\nloop invariant c != 4 ==> c == -36;\nloop invariant c != 4 ==> c == -37;\nloop invariant c != 4 ==> c == -38;\nloop invariant c != 4 ==> c == -39;\nloop invariant c != 4 ==> c == -40;\nloop invariant c != 4 ==> c == -41;\nloop invariant c != 4 ==> c == -42;\nloop invariant c != 4 ==> c == -43;\nloop invariant c != 4 ==> c == -44;\nloop invariant c != 4 ==> c == -45;\nloop invariant c != 4 ==> c == -46;\nloop invariant c != 4 ==> c == -47;\nloop invariant c != 4 ==> c == -48;\nloop invariant c != 4 ==> c == -49;\nloop invariant c != 4 ==> c == -50;\nloop invariant c != 4 ==> c == -51;\nloop invariant c != 4 ==> c == -52;\nloop invariant c != 4 ==> c == -53;\nloop invariant c != 4 ==> c == -54;\nloop invariant c != 4 ==> c == -55;\nloop invariant c != 4 ==> c == -56;\nloop invariant c != 4 ==> c == -57;\nloop invariant c != 4 ==> c == -58;\nloop invariant c != 4 ==> c == -59;\nloop invariant c != 4 ==> c == -60;\nloop invariant c != 4 ==> c == -61;\nloop invariant c != 4 ==> c == -62;\nloop invariant c != 4 ==> c == -63;\nloop invariant c != 4 ==> c == -64;\nloop invariant c != 4 ==> c == -65;\nloop invariant c != 4 ==> c == -66;\nloop invariant c != 4 ==> c == -67;\nloop invariant c != 4 ==> c == -68;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> ((c == 4) && (c <= 4));\nloop invariant (c != 4) ==> ((c >= 0) && (c < 4));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> !unknown() ==> c == 1;\nloop invariant c == 4 ==> !unknown() ==> c == 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c != 4) ==> unknown();\nloop invariant (c == 4) ==> !unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4; c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c >= 0;\nloop invariant c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: c >= 0;\nloop invariant i3: c <= 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 || c == 4;\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 || c == 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: c != 4 || c == 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant (c == 0 || c == 1);\nloop invariant (c == 0 || c == 1 || c == 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 0 ==> c <= 1;\nloop invariant c == 1 ==> c <= 2;\nloop invariant c == 2 ==> c <= 3;\nloop invariant c == 3 ==> c <= 4;\nloop invariant c == 4 ==> c == 0;\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 0 ==> c <= 1;\nloop invariant c == 1 ==> c <= 2;\nloop invariant c == 2 ==> c <= 3;\nloop invariant c == 3 ==> c <= 4;\nloop invariant c == 4 ==> c == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 4;\nloop invariant i3: c == 0 ==> c <= 1;\nloop invariant i4: c == 1 ==> c <= 2;\nloop invariant i5: c == 2 ==> c <= 3;\nloop invariant i6: c == 3 ==> c <= 4;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant c == 1 || c == 4;\nloop invariant 0 <= c <= 5;\nloop invariant c == 1 || c == 4;\nloop invariant 0 <= c <= 5;\nloop invariant c == 1 || c == 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 0 ==> unknown();\nloop invariant c == 1 ==> unknown() ==> (c != 4);\nloop invariant c == 2 ==> unknown() ==> (c != 4);\nloop invariant c == 3 ==> unknown() ==> (c != 4);\nloop invariant c == 4 ==> unknown() ==> (c == 4);\nloop invariant c == 1 ==> !unknown();\nloop invariant c == 2 ==> !unknown();\nloop invariant c == 3 ==> !unknown();\nloop invariant c == 4 ==> !unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: c >= 0;\nloop invariant i3: c <= 4;\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 73,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 ==> c <= 4;\nloop invariant unknown() ==> c <= 4;\nloop invariant !unknown() ==> c <= 4;\nloop invariant c == 4 ==> c == 4;\nloop invariant c != 4 ==> c < 4;\nloop invariant c != 4 ==> c <= 3;\nloop invariant c != 4 ==> c <= 2;\nloop invariant c != 4 ==> c <= 1;\nloop invariant c != 4 ==> c <= 0;\nloop invariant c != 4 ==> c == -1;\nloop invariant c != 4 ==> c == -2;\nloop invariant c != 4 ==> c == -3;\nloop invariant c != 4 ==> c == -4;\nloop invariant c != 4 ==> c == -5;\nloop invariant c != 4 ==> c == -6;\nloop invariant c != 4 ==> c == -7;\nloop invariant c != 4 ==> c == -8;\nloop invariant c != 4 ==> c == -9;\nloop invariant c != 4 ==> c == -10;\nloop invariant c != 4 ==> c == -11;\nloop invariant c != 4 ==> c == -12;\nloop invariant c != 4 ==> c == -13;\nloop invariant c != 4 ==> c == -14;\nloop invariant c != 4 ==> c == -15;\nloop invariant c != 4 ==> c == -16;\nloop invariant c != 4 ==> c == -17;\nloop invariant c != 4 ==> c == -18;\nloop invariant c != 4 ==> c == -19;\nloop invariant c != 4 ==> c == -20;\nloop invariant c != 4 ==> c == -21;\nloop invariant c != 4 ==> c == -22;\nloop invariant c != 4 ==> c == -23;\nloop invariant c != 4 ==> c == -24;\nloop invariant c != 4 ==> c == -25;\nloop invariant c != 4 ==> c == -26;\nloop invariant c != 4 ==> c == -27;\nloop invariant c != 4 ==> c == -28;\nloop invariant c != 4 ==> c == -29;\nloop invariant c != 4 ==> c == -30;\nloop invariant c != 4 ==> c == -31;\nloop invariant c != 4 ==> c == -32;\nloop invariant c != 4 ==> c == -33;\nloop invariant c != 4 ==> c == -34;\nloop invariant c != 4 ==> c == -35;\nloop invariant c != 4 ==> c == -36;\nloop invariant c != 4 ==> c == -37;\nloop invariant c != 4 ==> c == -38;\nloop invariant c != 4 ==> c == -39;\nloop invariant c != 4 ==> c == -40;\nloop invariant c != 4 ==> c == -41;\nloop invariant c != 4 ==> c == -42;\nloop invariant c != 4 ==> c == -43;\nloop invariant c != 4 ==> c == -44;\nloop invariant c != 4 ==> c == -45;\nloop invariant c != 4 ==> c == -46;\nloop invariant c != 4 ==> c == -47;\nloop invariant c != 4 ==> c == -48;\nloop invariant c != 4 ==> c == -49;\nloop invariant c != 4 ==> c == -50;\nloop invariant c != 4 ==> c == -51;\nloop invariant c != 4 ==> c == -52;\nloop invariant c != 4 ==> c == -53;\nloop invariant c != 4 ==> c == -54;\nloop invariant c != 4 ==> c == -55;\nloop invariant c != 4 ==> c == -56;\nloop invariant c != 4 ==> c == -57;\nloop invariant c != 4 ==> c == -58;\nloop invariant c != 4 ==> c == -59;\nloop invariant c != 4 ==> c == -60;\nloop invariant c != 4 ==> c == -61;\nloop invariant c != 4 ==> c == -62;\nloop invariant c != 4 ==> c == -63;\nloop invariant c != 4 ==> c == -64;\nloop invariant c != 4 ==> c == -65;\nloop invariant c != 4 ==> c == -66;\nloop invariant c != 4 ==> c == -67;\nloop invariant c != 4 ==> c == -68;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: c != 4 ==> c <= 4;\n\n\nloop invariant i5: c == 4 ==> c == 4;\nloop invariant i6: c != 4 ==> c < 4;\nloop invariant i7: c != 4 ==> c <= 3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> ((c == 4) && (c <= 4));\nloop invariant (c != 4) ==> ((c >= 0) && (c < 4));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: (c == 4) ==> ((c == 4) && (c <= 4));\nloop invariant i3: (c != 4) ==> ((c >= 0) && (c < 4));\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> !unknown() ==> c == 1;\nloop invariant c == 4 ==> !unknown() ==> c == 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: (c != 4) ==> unknown();\nloop invariant i3: (c == 4) ==> !unknown();\nloop invariant i4: 0 <= c <= 4; c <= 4;\nloop invariant i5: c >= 0;\nloop invariant i6: c <= 4;\nloop invariant i7: c != 4 || c == 4;\nloop invariant i8: 0 <= c;\nloop invariant i9: (c == 0 || c == 1);\nloop invariant i10: (c == 0 || c == 1 || c == 4);\nloop invariant i11: c == 0 ==> c <= 1;\nloop invariant i12: c == 1 ==> c <= 2;\nloop invariant i13: c == 2 ==> c <= 3;\nloop invariant i14: c == 3 ==> c <= 4;\nloop invariant i15: c == 4 ==> c == 0;\nloop invariant i16: 0 <= c <= 5;\nloop invariant i17: c == 1 || c == 4;\nloop invariant i18: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i19: c == 0 ==> unknown();\nloop invariant i20: c == 1 ==> unknown() ==> (c != 4);\nloop invariant i21: c == 2 ==> unknown() ==> (c != 4);\nloop invariant i22: c == 3 ==> unknown() ==> (c != 4);\nloop invariant i23: c == 4 ==> unknown() ==> (c == 4);\nloop invariant i24: c == 1 ==> !unknown();\nloop invariant i25: c == 2 ==> !unknown();\nloop invariant i26: c == 3 ==> !unknown();\nloop invariant i27: c == 4 ==> !unknown();\nloop invariant i28: c != 4 ==> c <= 4;\nloop invariant i29: unknown() ==> c <= 4;\nloop invariant i30: !unknown() ==> c <= 4;\nloop invariant i31: c == 4 ==> c == 4;\nloop invariant i32: c != 4 ==> c < 4;\nloop invariant i33: c != 4 ==> c <= 3;\nloop invariant i34: c != 4 ==> c <= 2;\nloop invariant i35: c != 4 ==> c <= 1;\nloop invariant i36: c != 4 ==> c <= 0;\nloop invariant i37: c != 4 ==> c == -1;\nloop invariant i38: c != 4 ==> c == -2;\nloop invariant i39: c != 4 ==> c == -3;\nloop invariant i40: c != 4 ==> c == -4;\nloop invariant i41: c != 4 ==> c == -5;\nloop invariant i42: c != 4 ==> c == -6;\nloop invariant i43: c != 4 ==> c == -7;\nloop invariant i44: c != 4 ==> c == -8;\nloop invariant i45: c != 4 ==> c == -9;\nloop invariant i46: c != 4 ==> c == -10;\nloop invariant i47: c != 4 ==> c == -11;\nloop invariant i48: c != 4 ==> c == -12;\nloop invariant i49: c != 4 ==> c == -13;\nloop invariant i50: c != 4 ==> c == -14;\nloop invariant i51: c != 4 ==> c == -15;\nloop invariant i52: c != 4 ==> c == -16;\nloop invariant i53: c != 4 ==> c == -17;\nloop invariant i54: c != 4 ==> c == -18;\nloop invariant i55: c != 4 ==> c == -19;\nloop invariant i56: c != 4 ==> c == -20;\nloop invariant i57: c != 4 ==> c == -21;\nloop invariant i58: c != 4 ==> c == -22;\nloop invariant i59: c != 4 ==> c == -23;\nloop invariant i60: c != 4 ==> c == -24;\nloop invariant i61: c != 4 ==> c == -25;\nloop invariant i62: c != 4 ==> c == -26;\nloop invariant i63: c != 4 ==> c == -27;\nloop invariant i64: c != 4 ==> c == -28;\nloop invariant i65: c != 4 ==> c == -29;\nloop invariant i66: c != 4 ==> c == -30;\nloop invariant i67: c != 4 ==> c == -31;\nloop invariant i68: c != 4 ==> c == -32;\nloop invariant i69: c != 4 ==> c == -33;\nloop invariant i70: c != 4 ==> c == -34;\nloop invariant i71: c != 4 ==> c == -35;\nloop invariant i72: c != 4 ==> c == -36;\nloop invariant i73: c != 4 ==> c == -37;\nloop invariant i74: c != 4 ==> c == -38;\nloop invariant i75: c != 4 ==> c == -39;\nloop invariant i76: c != 4 ==> c == -40;\nloop invariant i77: c != 4 ==> c == -41;\nloop invariant i78: c != 4 ==> c == -42;\nloop invariant i79: c != 4 ==> c == -43;\nloop invariant i80: c != 4 ==> c == -44;\nloop invariant i81: c != 4 ==> c == -45;\nloop invariant i82: c != 4 ==> c == -46;\nloop invariant i83: c != 4 ==> c == -47;\nloop invariant i84: c != 4 ==> c == -48;\nloop invariant i85: c != 4 ==> c == -49;\nloop invariant i86: c != 4 ==> c == -50;\nloop invariant i87: c != 4 ==> c == -51;\nloop invariant i88: c != 4 ==> c == -52;\nloop invariant i89: c != 4 ==> c == -53;\nloop invariant i90: c != 4 ==> c == -54;\nloop invariant i91: c != 4 ==> c == -55;\nloop invariant i92: c != 4 ==> c == -56;\nloop invariant i93: c != 4 ==> c == -57;\nloop invariant i94: c != 4 ==> c == -58;\nloop invariant i95: c != 4 ==> c == -59;\nloop invariant i96: c != 4 ==> c == -60;\nloop invariant i97: c != 4 ==> c == -61;\nloop invariant i98: c != 4 ==> c == -62;\nloop invariant i99: c != 4 ==> c == -63;\nloop invariant i100: c != 4 ==> c == -64;\nloop invariant i101: c != 4 ==> c == -65;\nloop invariant i102: c != 4 ==> c == -66;\nloop invariant i103: c != 4 ==> c == -67;\nloop invariant i104: c != 4 ==> c == -68;\nloop invariant i105: (c == 4) ==> ((c == 4) && (c <= 4));\nloop invariant i106: (c != 4) ==> ((c >= 0) && (c < 4));\nloop invariant i107: c != 4 ==> unknown() ==> c == 4;\nloop invariant i108: c != 4 ==> !unknown() ==> c == 1;\nloop invariant i109: c == 4 ==> !unknown() ==> c == 4;\nloop invariant i110: c == 4 ==> unknown() ==> c != 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 95,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\nloop invariant i5: c >= 0;\nloop invariant i6: c <= 4;\nloop invariant i7: c != 4 || c == 4;\nloop invariant i8: 0 <= c;\n\n\nloop invariant i11: c == 0 ==> c <= 1;\nloop invariant i12: c == 1 ==> c <= 2;\nloop invariant i13: c == 2 ==> c <= 3;\nloop invariant i14: c == 3 ==> c <= 4;\n\nloop invariant i16: 0 <= c <= 5;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i28: c != 4 ==> c <= 4;\n\n\nloop invariant i31: c == 4 ==> c == 4;\nloop invariant i32: c != 4 ==> c < 4;\nloop invariant i33: c != 4 ==> c <= 3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i105: (c == 4) ==> ((c == 4) && (c <= 4));\nloop invariant i106: (c != 4) ==> ((c >= 0) && (c < 4));\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 44,
        "success_count": 40,
        "failure_count": 4,
        "success_rate": 0.9090909090909091
    }
}