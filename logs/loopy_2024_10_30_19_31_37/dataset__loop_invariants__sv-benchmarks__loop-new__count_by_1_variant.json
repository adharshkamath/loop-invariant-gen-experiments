{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i + 1 == LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT ==> i != LARGE_INT;\nloop invariant i <= LARGE_INT ==> i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i - 1) <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> i >= 1;\nloop invariant (i - 1) < LARGE_INT ==> (i - 1) >= 0;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0);\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant i < (LARGE_INT + 1);\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < (LARGE_INT + 1);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant i <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT ==> i == LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT ==> i == LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i == (LARGE_INT - 1);\nloop invariant i < LARGE_INT ==> i <= (LARGE_INT - 1);\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i == LARGE_INT - 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant (large_int >= 0) ==> (i <= (large_int + 1));\nloop invariant (large_int >= 0) ==> (i >= (0 - 1));\nloop invariant (large_int >= 0) ==> (i == (0 + 1));\nloop invariant (large_int >= 0) ==> (i == (large_int + 1));\nloop invariant (large_int >= 0) ==> (i == (large_int + 2));\nloop invariant (large_int >= 0) ==> (i == (large_int + 3));\nloop invariant (large_int >= 0) ==> (i == (large_int + 4));\nloop invariant (large_int >= 0) ==> (i == (large_int + 5));\nloop invariant (large_int >= 0) ==> (i == (large_int + 6));\nloop invariant (large_int >= 0) ==> (i == (large_int + 7));\nloop invariant (large_int >= 0) ==> (i == (large_int + 8));\nloop invariant (large_int >= 0) ==> (i == (large_int + 9));\nloop invariant (large_int >= 0) ==> (i == (large_int + 10));\nloop invariant (large_int >= 0) ==> (i == (large_int + 11));\nloop invariant (large_int >= 0) ==> (i == (large_int + 12));\nloop invariant (large_int >= 0) ==> (i == (large_int + 13));\nloop invariant (large_int >= 0) ==> (i == (large_int + 14));\nloop invariant (large_int >= 0) ==> (i == (large_int + 15));\nloop invariant (large_int >= 0) ==> (i == (large_int + 16));\nloop invariant (large_int >= 0) ==> (i == (large_int + 17));\nloop invariant (large_int >= 0) ==> (i == (large_int + 18));\nloop invariant (large_int >= 0) ==> (i == (large_int + 19));\nloop invariant (large_int >= 0) ==> (i == (large_int + 20));\nloop invariant (large_int >= 0) ==> (i == (large_int + 21));\nloop invariant (large_int >= 0) ==> (i == (large_int + 22));\nloop invariant (large_int >= 0) ==> (i == (large_int + 23));\nloop invariant (large_int >= 0) ==> (i == (large_int + 24));\nloop invariant (large_int >= 0) ==> (i == (large_int + 25));\nloop invariant (large_int >= 0) ==> (i == (large_int + 26));\nloop invariant (large_int >= 0) ==> (i == (large_int + 27));\nloop invariant (large_int >= 0) ==> (i == (large_int + 28));\nloop invariant (large_int >= 0) ==> (i == (large_int + 29));\nloop invariant (large_int >= 0) ==> (i == (large_int + 30));\nloop invariant (large_int >= 0) ==> (i == (large_int + 31));\nloop invariant (large_int >= 0) ==> (i == (large_int + 32));\nloop invariant (large_int >= 0) ==> (i == (large_int + 33));\nloop invariant (large_int >= 0) ==> (i == (large_int + 34));\nloop invariant (large_int >= 0) ==> (i == (large_int + 35));\nloop invariant (large_int >= 0) ==> (i == (large_int + 36));\nloop invariant (large_int >= 0) ==> (i == (large_int + 37));\nloop invariant (large_int >= 0) ==> (i == (large_int + 38));\nloop invariant (large_int >= 0) ==> (i == (large_int + 39));\nloop invariant (large_int >= 0) ==> (i == (large_int + 40));\nloop invariant (large_int >= 0) ==> (i == (large_int + 41));\nloop invariant (large_int >= 0) ==> (i == (large_int + 42));\nloop invariant (large_int >= 0) ==> (i == (large_int + 43));\nloop invariant (large_int >= 0) ==> (i == (large_int + 44));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant i == 0;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i == i - 1;\nloop invariant i == 0 ==> i == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i + 1 == LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT ==> i != LARGE_INT;\nloop invariant i <= LARGE_INT ==> i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\nloop invariant i3: i <= LARGE_INT ==> i >= 0;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i - 1) <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> i >= 1;\nloop invariant (i - 1) < LARGE_INT ==> (i - 1) >= 0;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0);\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: (i - 1) < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i3: (i - 1) < LARGE_INT ==> (i - 1) <= LARGE_INT;\n\n\n\nloop invariant i7: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i8: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i9: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i10: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i11: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i12: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i13: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i14: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i15: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i16: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i17: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i18: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i19: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant i < (LARGE_INT + 1);\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i < (LARGE_INT + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: i < (LARGE_INT + 1);\nloop invariant i4: 0 <= i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant i <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: i <= i;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i <= LARGE_INT ==> i == LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i < LARGE_INT;\nloop invariant i <= LARGE_INT ==> i == LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\n\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i == (LARGE_INT - 1);\nloop invariant i < LARGE_INT ==> i <= (LARGE_INT - 1);\nloop invariant i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i < LARGE_INT ==> i < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\n\nloop invariant i4: i < LARGE_INT ==> i <= (LARGE_INT - 1);\nloop invariant i5: i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i6: i < LARGE_INT ==> i < LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i < LARGE_INT ==> i == LARGE_INT - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\n\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 47,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= LARGE_INT;\nloop invariant (large_int >= 0) ==> (i <= (large_int + 1));\nloop invariant (large_int >= 0) ==> (i >= (0 - 1));\nloop invariant (large_int >= 0) ==> (i == (0 + 1));\nloop invariant (large_int >= 0) ==> (i == (large_int + 1));\nloop invariant (large_int >= 0) ==> (i == (large_int + 2));\nloop invariant (large_int >= 0) ==> (i == (large_int + 3));\nloop invariant (large_int >= 0) ==> (i == (large_int + 4));\nloop invariant (large_int >= 0) ==> (i == (large_int + 5));\nloop invariant (large_int >= 0) ==> (i == (large_int + 6));\nloop invariant (large_int >= 0) ==> (i == (large_int + 7));\nloop invariant (large_int >= 0) ==> (i == (large_int + 8));\nloop invariant (large_int >= 0) ==> (i == (large_int + 9));\nloop invariant (large_int >= 0) ==> (i == (large_int + 10));\nloop invariant (large_int >= 0) ==> (i == (large_int + 11));\nloop invariant (large_int >= 0) ==> (i == (large_int + 12));\nloop invariant (large_int >= 0) ==> (i == (large_int + 13));\nloop invariant (large_int >= 0) ==> (i == (large_int + 14));\nloop invariant (large_int >= 0) ==> (i == (large_int + 15));\nloop invariant (large_int >= 0) ==> (i == (large_int + 16));\nloop invariant (large_int >= 0) ==> (i == (large_int + 17));\nloop invariant (large_int >= 0) ==> (i == (large_int + 18));\nloop invariant (large_int >= 0) ==> (i == (large_int + 19));\nloop invariant (large_int >= 0) ==> (i == (large_int + 20));\nloop invariant (large_int >= 0) ==> (i == (large_int + 21));\nloop invariant (large_int >= 0) ==> (i == (large_int + 22));\nloop invariant (large_int >= 0) ==> (i == (large_int + 23));\nloop invariant (large_int >= 0) ==> (i == (large_int + 24));\nloop invariant (large_int >= 0) ==> (i == (large_int + 25));\nloop invariant (large_int >= 0) ==> (i == (large_int + 26));\nloop invariant (large_int >= 0) ==> (i == (large_int + 27));\nloop invariant (large_int >= 0) ==> (i == (large_int + 28));\nloop invariant (large_int >= 0) ==> (i == (large_int + 29));\nloop invariant (large_int >= 0) ==> (i == (large_int + 30));\nloop invariant (large_int >= 0) ==> (i == (large_int + 31));\nloop invariant (large_int >= 0) ==> (i == (large_int + 32));\nloop invariant (large_int >= 0) ==> (i == (large_int + 33));\nloop invariant (large_int >= 0) ==> (i == (large_int + 34));\nloop invariant (large_int >= 0) ==> (i == (large_int + 35));\nloop invariant (large_int >= 0) ==> (i == (large_int + 36));\nloop invariant (large_int >= 0) ==> (i == (large_int + 37));\nloop invariant (large_int >= 0) ==> (i == (large_int + 38));\nloop invariant (large_int >= 0) ==> (i == (large_int + 39));\nloop invariant (large_int >= 0) ==> (i == (large_int + 40));\nloop invariant (large_int >= 0) ==> (i == (large_int + 41));\nloop invariant (large_int >= 0) ==> (i == (large_int + 42));\nloop invariant (large_int >= 0) ==> (i == (large_int + 43));\nloop invariant (large_int >= 0) ==> (i == (large_int + 44));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i == 0;\nloop invariant i <= LARGE_INT;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\n\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: i >= 0;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= LARGE_INT;\nloop invariant i < LARGE_INT ==> i == i - 1;\nloop invariant i == 0 ==> i == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\n\nloop invariant i4: i == 0 ==> i == 0;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 47: unbound logic variable large_int. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: i <= LARGE_INT;\nloop invariant i3: i + 1 == LARGE_INT;\nloop invariant i4: i <= LARGE_INT ==> i != LARGE_INT;\nloop invariant i5: i <= LARGE_INT ==> i >= 0;\nloop invariant i6: (i - 1) < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i7: (i - 1) < LARGE_INT ==> (i - 1) <= LARGE_INT;\nloop invariant i8: (i - 1) < LARGE_INT ==> i >= 1;\nloop invariant i9: (i - 1) < LARGE_INT ==> (i - 1) >= 0;\nloop invariant i10: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i11: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i12: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i13: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i14: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i15: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i16: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i17: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i18: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i19: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i20: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i21: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i22: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i23: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i24: i >= 0;\nloop invariant i25: i < (LARGE_INT + 1);\nloop invariant i26: i <= i;\nloop invariant i27: i <= LARGE_INT ==> i == LARGE_INT;\nloop invariant i28: 0 <= i;\nloop invariant i29: i < LARGE_INT;\nloop invariant i30: i < LARGE_INT ==> i == (LARGE_INT - 1);\nloop invariant i31: i < LARGE_INT ==> i <= (LARGE_INT - 1);\nloop invariant i32: i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i33: i < LARGE_INT ==> i < LARGE_INT;\nloop invariant i34: i < LARGE_INT ==> i + 1 == LARGE_INT;\nloop invariant i35: i < LARGE_INT ==> i == LARGE_INT - 1;\nloop invariant i36: (large_int >= 0) ==> (i <= (large_int + 1));\nloop invariant i37: (large_int >= 0) ==> (i >= (0 - 1));\nloop invariant i38: (large_int >= 0) ==> (i == (0 + 1));\nloop invariant i39: (large_int >= 0) ==> (i == (large_int + 1));\nloop invariant i40: (large_int >= 0) ==> (i == (large_int + 2));\nloop invariant i41: (large_int >= 0) ==> (i == (large_int + 3));\nloop invariant i42: (large_int >= 0) ==> (i == (large_int + 4));\nloop invariant i43: (large_int >= 0) ==> (i == (large_int + 5));\nloop invariant i44: (large_int >= 0) ==> (i == (large_int + 6));\nloop invariant i45: (large_int >= 0) ==> (i == (large_int + 7));\nloop invariant i46: (large_int >= 0) ==> (i == (large_int + 8));\nloop invariant i47: (large_int >= 0) ==> (i == (large_int + 9));\nloop invariant i48: (large_int >= 0) ==> (i == (large_int + 10));\nloop invariant i49: (large_int >= 0) ==> (i == (large_int + 11));\nloop invariant i50: (large_int >= 0) ==> (i == (large_int + 12));\nloop invariant i51: (large_int >= 0) ==> (i == (large_int + 13));\nloop invariant i52: (large_int >= 0) ==> (i == (large_int + 14));\nloop invariant i53: (large_int >= 0) ==> (i == (large_int + 15));\nloop invariant i54: (large_int >= 0) ==> (i == (large_int + 16));\nloop invariant i55: (large_int >= 0) ==> (i == (large_int + 17));\nloop invariant i56: (large_int >= 0) ==> (i == (large_int + 18));\nloop invariant i57: (large_int >= 0) ==> (i == (large_int + 19));\nloop invariant i58: (large_int >= 0) ==> (i == (large_int + 20));\nloop invariant i59: (large_int >= 0) ==> (i == (large_int + 21));\nloop invariant i60: (large_int >= 0) ==> (i == (large_int + 22));\nloop invariant i61: (large_int >= 0) ==> (i == (large_int + 23));\nloop invariant i62: (large_int >= 0) ==> (i == (large_int + 24));\nloop invariant i63: (large_int >= 0) ==> (i == (large_int + 25));\nloop invariant i64: (large_int >= 0) ==> (i == (large_int + 26));\nloop invariant i65: (large_int >= 0) ==> (i == (large_int + 27));\nloop invariant i66: (large_int >= 0) ==> (i == (large_int + 28));\nloop invariant i67: (large_int >= 0) ==> (i == (large_int + 29));\nloop invariant i68: (large_int >= 0) ==> (i == (large_int + 30));\nloop invariant i69: (large_int >= 0) ==> (i == (large_int + 31));\nloop invariant i70: (large_int >= 0) ==> (i == (large_int + 32));\nloop invariant i71: (large_int >= 0) ==> (i == (large_int + 33));\nloop invariant i72: (large_int >= 0) ==> (i == (large_int + 34));\nloop invariant i73: (large_int >= 0) ==> (i == (large_int + 35));\nloop invariant i74: (large_int >= 0) ==> (i == (large_int + 36));\nloop invariant i75: (large_int >= 0) ==> (i == (large_int + 37));\nloop invariant i76: (large_int >= 0) ==> (i == (large_int + 38));\nloop invariant i77: (large_int >= 0) ==> (i == (large_int + 39));\nloop invariant i78: (large_int >= 0) ==> (i == (large_int + 40));\nloop invariant i79: (large_int >= 0) ==> (i == (large_int + 41));\nloop invariant i80: (large_int >= 0) ==> (i == (large_int + 42));\nloop invariant i81: (large_int >= 0) ==> (i == (large_int + 43));\nloop invariant i82: (large_int >= 0) ==> (i == (large_int + 44));\nloop invariant i83: i == 0;\nloop invariant i84: i < LARGE_INT ==> i == i - 1;\nloop invariant i85: i == 0 ==> i == 0;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 60,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: i <= LARGE_INT;\n\n\nloop invariant i5: i <= LARGE_INT ==> i >= 0;\nloop invariant i6: (i - 1) < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i7: (i - 1) < LARGE_INT ==> (i - 1) <= LARGE_INT;\n\n\n\nloop invariant i11: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i12: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i13: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i14: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i15: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i16: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i17: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i18: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i19: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i20: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i21: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i - 1) <= LARGE_INT;\nloop invariant i22: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0);\nloop invariant i23: (i - 1) < LARGE_INT ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> (i >= 1 && (i - 1) >= 0) ==> i <= LARGE_INT;\nloop invariant i24: i >= 0;\nloop invariant i25: i < (LARGE_INT + 1);\nloop invariant i26: i <= i;\n\nloop invariant i28: 0 <= i;\n\n\nloop invariant i31: i < LARGE_INT ==> i <= (LARGE_INT - 1);\nloop invariant i32: i < LARGE_INT ==> i <= LARGE_INT;\nloop invariant i33: i < LARGE_INT ==> i < LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i85: i == 0 ==> i == 0;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c"
        ],
        "skipped": [],
        "total": 117,
        "success_count": 102,
        "failure_count": 15,
        "success_rate": 0.8717948717948718
    }
}