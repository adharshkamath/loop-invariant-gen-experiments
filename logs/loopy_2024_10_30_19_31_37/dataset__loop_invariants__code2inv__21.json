{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/21.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant z1 >= 1 && z1 < z2 && z2 < z3;\nloop invariant x <= m && m <= n;\nloop invariant x >= 1;\nloop invariant m >= 1;\nloop invariant n >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant m <= x <= n;\nloop invariant m <= 1;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 < x <= n;\nloop invariant m <= x < n;\nloop invariant unknown() ==> x >= n;\nloop invariant x >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant n > 1 ==> unknown() ==> m < n;\nloop invariant n <= 1 ==> unknown() ==> m <= n;\nloop invariant !unknown() ==> m == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m == x ==> unknown() == 1;\nloop invariant m != x ==> unknown() == 0;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m <= x <= n;\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant 1 <= x <= m;\nloop invariant x < n;\n*/\n```",
            "```\n/*@\nloop invariant ( ( n > 1 ) ==> ( m < n ) );\nloop invariant ( ( x < n ) ==> ( m <= x ) );\nloop invariant ( ( m >= 1 ) ==> ( m <= x ) );\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant x >= m;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n; loop invariant m <= x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant n > 1; loop invariant m < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x <= n;\nloop invariant (unknown() ==> m < n);\nloop invariant (unknown() ==> m >= 1);\nloop invariant (unknown() ==> x >= m);\nloop invariant (unknown() ==> (x == m ==> m < n));\nloop invariant (unknown() ==> (x == m ==> m >= 1));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> n > 1)));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> n > 1)));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x > 1 && x < n ==> n > 1));\nloop invariant (unknown() ==> (x > 1 && x < n ==> (x < n ==> n > 1)));\nloop invariant (unknown() ==> (x > 1 && x < n ==> (x > 1 ==> n > 1)));\nloop invariant (unknown() ==> (x > 1 && x < n ==> (x < n ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x > 1 && x < n ==> (x > 1 ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m >= 1;\nloop invariant n >= 1;\nloop invariant m <= n;\nloop invariant n >= 1 ==> m < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 < x <= n;\nloop invariant m <= x;\nloop invariant if (n > 1) ==> m < n;\nloop invariant if (n <= 1) ==> m <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant z1 >= 1 && z1 < z2 && z2 < z3;\nloop invariant x <= m && m <= n;\nloop invariant x >= 1;\nloop invariant m >= 1;\nloop invariant n >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: x >= 1;\nloop invariant i4: m >= 1;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant m <= x <= n;\nloop invariant m <= 1;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n\nloop invariant i5: m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 < x <= n;\nloop invariant m <= x < n;\nloop invariant unknown() ==> x >= n;\nloop invariant x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\nloop invariant i4: x >= 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant x <= n;\nloop invariant n > 1 ==> unknown() ==> m < n;\nloop invariant n <= 1 ==> unknown() ==> m <= n;\nloop invariant !unknown() ==> m == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: m >= 1;\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m == x ==> unknown() == 1;\nloop invariant m != x ==> unknown() == 0;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m <= x <= n;\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\nloop invariant m == n ==> (x == n);\nloop invariant m != 1 ==> (x != 1);\nloop invariant m != n ==> (x != n);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m <= x <= n ==> (x <= n);\nloop invariant m >= 1 ==> (x >= 1);\nloop invariant m == 1 ==> (x == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\n\nloop invariant i5: m >= 1;\n\n\n\nloop invariant i9: m == n ==> (x == n);\nloop invariant i10: m != 1 ==> (x != 1);\n\nloop invariant i12: m <= x <= n ==> (x <= n);\nloop invariant i13: m >= 1 ==> (x >= 1);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant 1 <= x <= m;\nloop invariant x < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant ( ( n > 1 ) ==> ( m < n ) );\nloop invariant ( ( x < n ) ==> ( m <= x ) );\nloop invariant ( ( m >= 1 ) ==> ( m <= x ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: ( ( n > 1 ) ==> ( m < n ) );\nloop invariant i2: ( ( x < n ) ==> ( m <= x ) );\nloop invariant i3: ( ( m >= 1 ) ==> ( m <= x ) );\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: x >= m;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\nloop invariant n > 0;\nloop invariant n >= m;\nloop invariant n >= 1;\nloop invariant x >= 1;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: 1 <= m <= x;\nloop invariant i3: m >= 1;\nloop invariant i4: m <= x;\n\nloop invariant i6: m > 0;\n\n\n\nloop invariant i10: x >= 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n; loop invariant m <= x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant n > 1; loop invariant m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 26,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= x <= n;\nloop invariant (unknown() ==> m < n);\nloop invariant (unknown() ==> m >= 1);\nloop invariant (unknown() ==> x >= m);\nloop invariant (unknown() ==> (x == m ==> m < n));\nloop invariant (unknown() ==> (x == m ==> m >= 1));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> n > 1)));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> n > 1)));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x > 1 && x < n ==> n > 1));\nloop invariant (unknown() ==> (x > 1 && x < n ==> (x < n ==> n > 1)));\nloop invariant (unknown() ==> (x > 1 && x < n ==> (x > 1 ==> n > 1)));\nloop invariant (unknown() ==> (x > 1 && x < n ==> (x < n ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x > 1 && x < n ==> (x > 1 ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m >= 1;\nloop invariant n >= 1;\nloop invariant m <= n;\nloop invariant n >= 1 ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: x >= m;\nloop invariant i3: m >= 1;\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 < x <= n;\nloop invariant m <= x;\nloop invariant if (n > 1) ==> m < n;\nloop invariant if (n <= 1) ==> m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 29: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: z1 >= 1 && z1 < z2 && z2 < z3;\nloop invariant i2: x <= m && m <= n;\nloop invariant i3: x >= 1;\nloop invariant i4: m >= 1;\nloop invariant i5: n >= 1;\nloop invariant i6: 0 <= m <= n;\nloop invariant i7: m <= x <= n;\nloop invariant i8: m <= 1;\nloop invariant i9: x <= n;\nloop invariant i10: m <= x;\nloop invariant i11: 0 < x <= n;\nloop invariant i12: m <= x < n;\nloop invariant i13: unknown() ==> x >= n;\nloop invariant i14: 0 <= x <= n;\nloop invariant i15: 0 <= m <= x;\nloop invariant i16: m <= n;\nloop invariant i17: n > 1 ==> unknown() ==> m < n;\nloop invariant i18: n <= 1 ==> unknown() ==> m <= n;\nloop invariant i19: !unknown() ==> m == n;\nloop invariant i20: m == x ==> unknown() == 1;\nloop invariant i21: m != x ==> unknown() == 0;\nloop invariant i22: m == 1 ==> (x == 1);\nloop invariant i23: m == n ==> (x == n);\nloop invariant i24: m != 1 ==> (x != 1);\nloop invariant i25: m != n ==> (x != n);\nloop invariant i26: m <= x <= n ==> (x <= n);\nloop invariant i27: m >= 1 ==> (x >= 1);\nloop invariant i28: 1 <= x <= m;\nloop invariant i29: x < n;\nloop invariant i30: ( ( n > 1 ) ==> ( m < n ) );\nloop invariant i31: ( ( x < n ) ==> ( m <= x ) );\nloop invariant i32: ( ( m >= 1 ) ==> ( m <= x ) );\nloop invariant i33: x >= m;\nloop invariant i34: 1 <= x <= n;\nloop invariant i35: 1 <= m <= x;\nloop invariant i36: m > 0;\nloop invariant i37: n > 0;\nloop invariant i38: n >= m;\nloop invariant i39: 0 <= m <= n; loop invariant m <= x <= n; loop invariant m <= n; loop invariant x <= n; loop invariant n > 1; loop invariant m < n;\nloop invariant i40: 0 <= n;\nloop invariant i41: (unknown() ==> m < n);\nloop invariant i42: (unknown() ==> m >= 1);\nloop invariant i43: (unknown() ==> x >= m);\nloop invariant i44: (unknown() ==> (x == m ==> m < n));\nloop invariant i45: (unknown() ==> (x == m ==> m >= 1));\nloop invariant i46: (unknown() ==> (x == m ==> (m < n ==> n > 1)));\nloop invariant i47: (unknown() ==> (x == m ==> (m >= 1 ==> n > 1)));\nloop invariant i48: (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant i49: (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant i50: (unknown() ==> (x > 1 && x < n ==> n > 1));\nloop invariant i51: (unknown() ==> (x > 1 && x < n ==> (x < n ==> n > 1)));\nloop invariant i52: (unknown() ==> (x > 1 && x < n ==> (x > 1 ==> n > 1)));\nloop invariant i53: (unknown() ==> (x > 1 && x < n ==> (x < n ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant i54: (unknown() ==> (x > 1 && x < n ==> (x > 1 ==> (n > 1 ==> (x > 1 && x < n)))));\nloop invariant i55: (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant i56: (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant i57: (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant i58: (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant i59: (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant i60: (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant i61: (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant i62: (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant i63: (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant i64: (unknown() ==> (x == m ==> (m >= 1 ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> n > 1))));\nloop invariant i65: (unknown() ==> (x == m ==> (m < n ==> (n > 1 ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n) ==> (x > 1 && x < n)))));\nloop invariant i66: n >= 1 ==> m < n;\nloop invariant i67: if (n > 1) ==> m < n;\nloop invariant i68: if (n <= 1) ==> m <= n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 47,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: x >= 1;\nloop invariant i4: m >= 1;\n\n\n\n\n\nloop invariant i10: m <= x;\n\n\n\n\nloop invariant i15: 0 <= m <= x;\n\n\n\n\n\n\n\nloop invariant i23: m == n ==> (x == n);\nloop invariant i24: m != 1 ==> (x != 1);\n\nloop invariant i26: m <= x <= n ==> (x <= n);\nloop invariant i27: m >= 1 ==> (x >= 1);\n\n\nloop invariant i30: ( ( n > 1 ) ==> ( m < n ) );\nloop invariant i31: ( ( x < n ) ==> ( m <= x ) );\nloop invariant i32: ( ( m >= 1 ) ==> ( m <= x ) );\nloop invariant i33: x >= m;\n\nloop invariant i35: 1 <= m <= x;\nloop invariant i36: m > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c"
        ],
        "skipped": [],
        "total": 18,
        "success_count": 16,
        "failure_count": 2,
        "success_rate": 0.8888888888888888
    }
}