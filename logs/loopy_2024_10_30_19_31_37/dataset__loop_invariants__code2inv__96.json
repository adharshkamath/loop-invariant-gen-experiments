{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/96.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y;\nloop invariant j >= (y + 1) * i / 2;\nloop invariant y >= (y + 1) * i / 2;\nloop invariant y >= 1;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= x + 1;\nloop invariant 0 <= j <= y * (i + 1);\nloop invariant y >= 1;\nloop invariant y <= 1;\nloop invariant y == 1 ==> j == i;\nloop invariant y != 1 ==> j != i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant i == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j;\nloop invariant j >= 1;\nloop invariant j >= i;\nloop invariant y == 1 ==> i == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= i * (i + 1) / 2;\nloop invariant y == 1;\nloop invariant (i == x ==> j == i * (i + 1) / 2);\nloop invariant (i != x ==> j != i * (i + 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y;\nloop invariant y == 1 ==> i == j;\nloop invariant y != 1 ==> i != j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= i * y;\nloop invariant y != 1 ==> i == j;\nloop invariant y == 1 ==> j == y * i;\nloop invariant y != 1 ==> y == 1 + (i - 1) * (y - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= i <= x + 1;\nloop invariant 0 <= j <= x * (x + 1) / 2;\nloop invariant i == y;\nloop invariant j == y * (y - 1) / 2 + y * i;\n*/\n```",
            "```\n/*@\nloop invariant i == j; loop invariant i <= x; loop invariant y != 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x * y;\nloop invariant y >= 1;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= x * y;\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= x + 1;\nloop invariant 0 <= j <= x + 1;\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y == (j - i + 1);\nloop invariant (y - 1) * y / 2 <= j <= (y - 1) * y / 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y;\nloop invariant i <= j;\nloop invariant y >= 1;\nloop invariant x >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y * (x + 1) / 2;\nloop invariant y >= 1;\nloop invariant (i != j) ==> (y != 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 1 <= j <= (x + 1);\nloop invariant j == (i + 1) * y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= x + 1;\nloop invariant 0 <= j <= x + 1;\nloop invariant 1 <= y <= x + 1;\nloop invariant i + j == x + y;\nloop invariant (i == x && j == x + 1) || (i < x && j < x + 1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y;\nloop invariant j >= (y + 1) * i / 2;\nloop invariant y >= (y + 1) * i / 2;\nloop invariant y >= 1;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\nloop invariant y <= (x - 1) * (x - 2) / 2;\nloop invariant y >= (x - 1) * (x - 2) / 2;\nloop invariant y <= (y - 1) * (y - 2) / 2;\nloop invariant y >= (y - 1) * (y - 2) / 2;\nloop invariant y <= (j - 1) * (j - 2) / 2;\nloop invariant y >= (j - 1) * (j - 2) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: j >= (y + 1) * i / 2;\n\nloop invariant i5: y >= 1;\n\n\n\n\n\nloop invariant i11: y >= (y - 1) * (y - 2) / 2;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= x + 1;\nloop invariant 0 <= j <= y * (i + 1);\nloop invariant y >= 1;\nloop invariant y <= 1;\nloop invariant y == 1 ==> j == i;\nloop invariant y != 1 ==> j != i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\nloop invariant i2: 0 <= j <= y * (i + 1);\nloop invariant i3: y >= 1;\nloop invariant i4: y <= 1;\nloop invariant i5: y == 1 ==> j == i;\nloop invariant i6: y != 1 ==> j != i;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: y >= 1;\nloop invariant i4: y <= 2;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j;\nloop invariant j >= 1;\nloop invariant j >= i;\nloop invariant y == 1 ==> i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\n\n\nloop invariant i5: y == 1 ==> i == j;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= i * (i + 1) / 2;\nloop invariant y == 1;\nloop invariant (i == x ==> j == i * (i + 1) / 2);\nloop invariant (i != x ==> j != i * (i + 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: y == 1;\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y;\nloop invariant y == 1 ==> i == j;\nloop invariant y != 1 ==> i != j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: y == 1 ==> i == j;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= i * y;\nloop invariant y != 1 ==> i == j;\nloop invariant y == 1 ==> j == y * i;\nloop invariant y != 1 ==> y == 1 + (i - 1) * (y - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\n\nloop invariant i4: y == 1 ==> j == y * i;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= i <= x + 1;\nloop invariant 0 <= j <= x * (x + 1) / 2;\nloop invariant i == y;\nloop invariant j == y * (y - 1) / 2 + y * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\n\n\nloop invariant i5: j == y * (y - 1) / 2 + y * i;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i == j; loop invariant i <= x; loop invariant y != 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: i == j; loop invariant i <= x; loop invariant y != 1;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x * y;\nloop invariant y >= 1;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= x * y;\nloop invariant y > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: y >= 1;\nloop invariant i4: i <= j;\n\n\nloop invariant i7: y > 0;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= x + 1;\nloop invariant 0 <= j <= x + 1;\nloop invariant y >= 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y == (j - i + 1);\nloop invariant (y - 1) * y / 2 <= j <= (y - 1) * y / 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: y >= 1;\nloop invariant i4: i >= 0;\nloop invariant i5: j >= 0;\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y;\nloop invariant i <= j;\nloop invariant y >= 1;\nloop invariant x >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: i <= j;\nloop invariant i4: y >= 1;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y * (x + 1) / 2;\nloop invariant y >= 1;\nloop invariant (i != j) ==> (y != 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: y >= 1;\nloop invariant i4: (i != j) ==> (y != 1);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 1 <= j <= (x + 1);\nloop invariant j == (i + 1) * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= x + 1;\nloop invariant 0 <= j <= x + 1;\nloop invariant 1 <= y <= x + 1;\nloop invariant i + j == x + y;\nloop invariant (i == x && j == x + 1) || (i < x && j < x + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= x is preserved but not established.\nloop invariant 0 <= j <= y is partially proven to be inductive.\nloop invariant j >= (y + 1) * i / 2 is partially proven to be inductive.\nloop invariant y >= (y + 1) * i / 2 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= (j - 1) * (j - 2) / 2 is partially proven to be inductive.\nloop invariant y >= (j - 1) * (j - 2) / 2 is partially proven to be inductive.\nloop invariant y <= (x - 1) * (x - 2) / 2 is preserved but not established.\nloop invariant y >= (x - 1) * (x - 2) / 2 is preserved but not established.\nloop invariant y <= (y - 1) * (y - 2) / 2 is preserved but not established.\nloop invariant y >= (y - 1) * (y - 2) / 2 is partially proven to be inductive.\nloop invariant 1 <= i <= x + 1 is partially proven to be inductive.\nloop invariant 0 <= j <= y * (i + 1) is partially proven to be inductive.\nloop invariant y <= 1 is partially proven to be inductive.\nloop invariant y == 1 ==> j == i is partially proven to be inductive.\nloop invariant y != 1 ==> j != i is partially proven to be inductive.\nloop invariant 0 <= j <= x is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant 0 <= j is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant y == 1 ==> i == j is partially proven to be inductive.\nloop invariant 0 <= j <= i * (i + 1) / 2 is partially proven to be inductive.\nloop invariant y == 1 is partially proven to be inductive.\nloop invariant (i == x ==> j == i * (i + 1) / 2) is partially proven to be inductive.\nloop invariant (i != x ==> j != i * (i + 1) / 2) is partially proven to be inductive.\nloop invariant y != 1 ==> i != j is partially proven to be inductive.\nloop invariant 0 <= j <= i * y is partially proven to be inductive.\nloop invariant y != 1 ==> i == j is partially proven to be inductive.\nloop invariant y == 1 ==> j == y * i is partially proven to be inductive.\nloop invariant y != 1 ==> y == 1 + (i - 1) * (y - 1) is partially proven to be inductive.\nloop invariant 0 <= x <= i is partially proven to be inductive.\nloop invariant 0 <= i <= x + 1 is partially proven to be inductive.\nloop invariant 0 <= j <= x * (x + 1) / 2 is partially proven to be inductive.\nloop invariant i == y is partially proven to be inductive.\nloop invariant j == y * (y - 1) / 2 + y * i is partially proven to be inductive.\nloop invariant i == j; loop invariant i <= x; loop invariant y != 1 is partially proven to be inductive.\nloop invariant 0 <= j <= x * y is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant i <= x is partially proven to be inductive.\nloop invariant j <= x * y is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant 0 <= j <= x + 1 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant y == (j - i + 1) is partially proven to be inductive.\nloop invariant (y - 1) * y / 2 <= j <= (y - 1) * y / 1 is partially proven to be inductive.\nloop invariant x >= i is partially proven to be inductive.\nloop invariant 0 <= j <= y * (x + 1) / 2 is partially proven to be inductive.\nloop invariant (i != j) ==> (y != 1) is partially proven to be inductive.\nloop invariant 1 <= j <= (x + 1) is partially proven to be inductive.\nloop invariant j == (i + 1) * y is partially proven to be inductive.\nloop invariant 1 <= y <= x + 1 is partially proven to be inductive.\nloop invariant i + j == x + y is partially proven to be inductive.\nloop invariant (i == x && j == x + 1) || (i < x && j < x + 1) is partially proven to be inductive.\nAssertion y != 1: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= x;\nloop invariant i2: 0 <= j <= y;\nloop invariant i3: j >= (y + 1) * i / 2;\nloop invariant i4: y >= (y + 1) * i / 2;\nloop invariant i5: y >= 1;\nloop invariant i6: y <= (j - 1) * (j - 2) / 2;\nloop invariant i7: y >= (j - 1) * (j - 2) / 2;\nloop invariant i8: y <= (x - 1) * (x - 2) / 2;\nloop invariant i9: y >= (x - 1) * (x - 2) / 2;\nloop invariant i10: y <= (y - 1) * (y - 2) / 2;\nloop invariant i11: y >= (y - 1) * (y - 2) / 2;\nloop invariant i12: 1 <= i <= x + 1;\nloop invariant i13: 0 <= j <= y * (i + 1);\nloop invariant i14: y <= 1;\nloop invariant i15: y == 1 ==> j == i;\nloop invariant i16: y != 1 ==> j != i;\nloop invariant i17: 0 <= j <= x;\nloop invariant i18: y <= 2;\nloop invariant i19: i == j;\nloop invariant i20: 0 <= j;\nloop invariant i21: j >= 1;\nloop invariant i22: j >= i;\nloop invariant i23: y == 1 ==> i == j;\nloop invariant i24: 0 <= j <= i * (i + 1) / 2;\nloop invariant i25: y == 1;\nloop invariant i26: (i == x ==> j == i * (i + 1) / 2);\nloop invariant i27: (i != x ==> j != i * (i + 1) / 2);\nloop invariant i28: y != 1 ==> i != j;\nloop invariant i29: 0 <= j <= i * y;\nloop invariant i30: y != 1 ==> i == j;\nloop invariant i31: y == 1 ==> j == y * i;\nloop invariant i32: y != 1 ==> y == 1 + (i - 1) * (y - 1);\nloop invariant i33: 0 <= x <= i;\nloop invariant i34: 0 <= i <= x + 1;\nloop invariant i35: 0 <= j <= x * (x + 1) / 2;\nloop invariant i36: i == y;\nloop invariant i37: j == y * (y - 1) / 2 + y * i;\nloop invariant i38: i == j; loop invariant i <= x; loop invariant y != 1;\nloop invariant i39: 0 <= j <= x * y;\nloop invariant i40: i <= j;\nloop invariant i41: i <= x;\nloop invariant i42: j <= x * y;\nloop invariant i43: y > 0;\nloop invariant i44: 0 <= j <= x + 1;\nloop invariant i45: i >= 0;\nloop invariant i46: j >= 0;\nloop invariant i47: y == (j - i + 1);\nloop invariant i48: (y - 1) * y / 2 <= j <= (y - 1) * y / 1;\nloop invariant i49: x >= i;\nloop invariant i50: 0 <= j <= y * (x + 1) / 2;\nloop invariant i51: (i != j) ==> (y != 1);\nloop invariant i52: 1 <= j <= (x + 1);\nloop invariant i53: j == (i + 1) * y;\nloop invariant i54: 1 <= y <= x + 1;\nloop invariant i55: i + j == x + y;\nloop invariant i56: (i == x && j == x + 1) || (i < x && j < x + 1);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\nloop invariant i2: 0 <= j <= y;\nloop invariant i3: j >= (y + 1) * i / 2;\nloop invariant i4: y >= (y + 1) * i / 2;\nloop invariant i5: y >= 1;\nloop invariant i6: y <= (j - 1) * (j - 2) / 2;\nloop invariant i7: y >= (j - 1) * (j - 2) / 2;\n\n\n\nloop invariant i11: y >= (y - 1) * (y - 2) / 2;\n\nloop invariant i13: 0 <= j <= y * (i + 1);\nloop invariant i14: y <= 1;\nloop invariant i15: y == 1 ==> j == i;\nloop invariant i16: y != 1 ==> j != i;\n\nloop invariant i18: y <= 2;\nloop invariant i19: i == j;\nloop invariant i20: 0 <= j;\n\nloop invariant i22: j >= i;\nloop invariant i23: y == 1 ==> i == j;\nloop invariant i24: 0 <= j <= i * (i + 1) / 2;\nloop invariant i25: y == 1;\nloop invariant i26: (i == x ==> j == i * (i + 1) / 2);\n\nloop invariant i28: y != 1 ==> i != j;\nloop invariant i29: 0 <= j <= i * y;\nloop invariant i30: y != 1 ==> i == j;\nloop invariant i31: y == 1 ==> j == y * i;\nloop invariant i32: y != 1 ==> y == 1 + (i - 1) * (y - 1);\n\n\nloop invariant i35: 0 <= j <= x * (x + 1) / 2;\n\nloop invariant i37: j == y * (y - 1) / 2 + y * i;\nloop invariant i38: i == j; loop invariant i <= x; loop invariant y != 1;\nloop invariant i39: 0 <= j <= x * y;\nloop invariant i40: i <= j;\nloop invariant i41: i <= x;\nloop invariant i42: j <= x * y;\nloop invariant i43: y > 0;\nloop invariant i44: 0 <= j <= x + 1;\nloop invariant i45: i >= 0;\nloop invariant i46: j >= 0;\nloop invariant i47: y == (j - i + 1);\nloop invariant i48: (y - 1) * y / 2 <= j <= (y - 1) * y / 1;\nloop invariant i49: x >= i;\nloop invariant i50: 0 <= j <= y * (x + 1) / 2;\nloop invariant i51: (i != j) ==> (y != 1);\nloop invariant i52: 1 <= j <= (x + 1);\nloop invariant i53: j == (i + 1) * y;\nloop invariant i54: 1 <= y <= x + 1;\nloop invariant i55: i + j == x + y;\nloop invariant i56: (i == x && j == x + 1) || (i < x && j < x + 1);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 82,
        "success_count": 72,
        "failure_count": 10,
        "success_rate": 0.8780487804878049
    }
}