{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  while (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= j <= n;\nloop invariant 1 <= k <= n;\nloop invariant j >= k;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n > 0;\nloop invariant (j > 0 && n > 0) ==> (j >= k);\nloop invariant (j > 0 && n > 0) ==> (j >= 0);\nloop invariant (j > 0 && n > 0) ==> (k >= 0);\nloop invariant (j > 0 && n > 0) ==> (n > 0);\nloop invariant (j == 0) ==> (k == 0);\n*/\n```",
            "```\n/*@\nloop invariant j + k == n;\nloop invariant n >= j >= 0;\nloop invariant n >= k >= 0;\nloop invariant j > 0 ==> k > 0;\nloop invariant j == 0 ==> k == 0;\nloop invariant j == 0 ==> n == k;\n*/\n```",
            "```\n/*@\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= n;\nloop invariant 1 <= k <= n;\nloop invariant j >= k;\nloop invariant n > 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n > 0;\nloop invariant (j==n && k==n) ==> (j==0 && k==0);\nloop invariant (j==n && k==n) ==> (n==0);\nloop invariant (j==0 && k==0) ==> (j==n && k==n);\nloop invariant (n==0) ==> (j==n && k==n);\nloop invariant (j==n && k==n) ==> (j==k);\nloop invariant (j==0 && k==0) ==> (j==k);\nloop invariant (n==0) ==> (j==k);\nloop invariant (j==k) ==> (j==n && k==n);\nloop invariant (j==k) ==> (j==0 && k==0);\nloop invariant (j==k) ==> (n==0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j + k = n;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n >= 0;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant (j==n) ==> (k==0);\nloop invariant (j==n) ==> (j==k);\nloop invariant (j==n) ==> (j==n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n > 0;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant n > 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant j <= k;\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (n == 0) ==> (j == 0);\nloop invariant (n == 0) ==> (k == 0);\nloop invariant (n > 0) ==> (j > 0);\nloop invariant (n > 0) ==> (k > 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\n*/\n```",
            "```\n/*@\nloop invariant j >= 0;\nloop invariant n >= 1;\nloop invariant k >= 0;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant k >= j;\nloop invariant j >= 0 ==> j - 1 >= 0;\nloop invariant k >= 0 ==> k - 1 >= 0;\nloop invariant j >= 0 ==> j - 1 <= n;\nloop invariant k >= 0 ==> k - 1 <= n;\nloop invariant j >= 0 ==> k >= j;\nloop invariant j >= 0 ==> k - 1 >= j - 1;\n*/\n```",
            "```\n/*@\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n >= 0;\nloop invariant n >= j;\nloop invariant n >= k;\nloop invariant j >= n - k;\nloop invariant k >= n - j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant j >= 0 ==> j == 0;\nloop invariant k >= 0 ==> k == 0;\nloop invariant n >= 0 ==> n == 0;\nloop invariant n >= j ==> n == j;\nloop invariant n >= k ==> n == k;\nloop invariant j >= n - k ==> j == n - k;\nloop invariant k >= n - j ==> k == n - j;\nloop invariant j <= n ==> j == n;\nloop invariant k <= n ==> k == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n && 0 <= k <= n && 0 <= n <= 100000; loop invariant j >= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= j;\nloop invariant n > 0;\nloop invariant n > j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j >= k;\nloop invariant n >= j && n >= k;\nloop invariant n >= 0;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j == k;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant j == n;\nloop invariant k == n;\nloop invariant j == n && k == n;\nloop invariant j == n ==> k == n;\nloop invariant k == 0 ==> j == 0;\nloop invariant k == 0 ==> j == n ==> k == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j >= k;\nloop invariant n > 0;\nloop invariant j == (n - k);\nloop invariant (j == 0) ==> (k == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= n; loop invariant 1 <= k <= n; loop invariant j >= k; loop invariant n > 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= n;\nloop invariant 1 <= k <= n;\nloop invariant j >= k;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n > 0;\nloop invariant (j > 0 && n > 0) ==> (j >= k);\nloop invariant (j > 0 && n > 0) ==> (j >= 0);\nloop invariant (j > 0 && n > 0) ==> (k >= 0);\nloop invariant (j > 0 && n > 0) ==> (n > 0);\nloop invariant (j == 0) ==> (k == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\n\n\nloop invariant i3: j >= k;\nloop invariant i4: j >= 0;\n\nloop invariant i6: n > 0;\nloop invariant i7: (j > 0 && n > 0) ==> (j >= k);\nloop invariant i8: (j > 0 && n > 0) ==> (j >= 0);\n\nloop invariant i10: (j > 0 && n > 0) ==> (n > 0);\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant j + k == n;\nloop invariant n >= j >= 0;\nloop invariant n >= k >= 0;\nloop invariant j > 0 ==> k > 0;\nloop invariant j == 0 ==> k == 0;\nloop invariant j == 0 ==> n == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\n\nloop invariant i2: n >= j >= 0;\n\n\n\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant j >= k;\nloop invariant k >= 0;\nloop invariant j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: j >= k;\n\nloop invariant i3: j >= 0;\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= n;\nloop invariant 1 <= k <= n;\nloop invariant j >= k;\nloop invariant n > 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\nloop invariant j * k >= 0;\nloop invariant j * k <= n * (n - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\n\n\nloop invariant i3: j >= k;\nloop invariant i4: n > 0;\n\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n > 0;\nloop invariant (j==n && k==n) ==> (j==0 && k==0);\nloop invariant (j==n && k==n) ==> (n==0);\nloop invariant (j==0 && k==0) ==> (j==n && k==n);\nloop invariant (n==0) ==> (j==n && k==n);\nloop invariant (j==n && k==n) ==> (j==k);\nloop invariant (j==0 && k==0) ==> (j==k);\nloop invariant (n==0) ==> (j==k);\nloop invariant (j==k) ==> (j==n && k==n);\nloop invariant (j==k) ==> (j==0 && k==0);\nloop invariant (j==k) ==> (n==0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\n\nloop invariant i3: j >= 0;\n\nloop invariant i5: n > 0;\n\n\n\nloop invariant i9: (n==0) ==> (j==n && k==n);\nloop invariant i10: (j==n && k==n) ==> (j==k);\nloop invariant i11: (j==0 && k==0) ==> (j==k);\nloop invariant i12: (n==0) ==> (j==k);\n\n\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j + k = n;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n >= 0;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant (j==n) ==> (k==0);\nloop invariant (j==n) ==> (j==k);\nloop invariant (j==n) ==> (j==n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\n\n\nloop invariant i4: j >= 0;\n\nloop invariant i6: n >= 0;\nloop invariant i7: j <= n;\nloop invariant i8: k <= n;\n\nloop invariant i10: (j==n) ==> (j==k);\nloop invariant i11: (j==n) ==> (j==n);\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n > 0;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\nloop invariant j >= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\n\nloop invariant i3: j <= n;\nloop invariant i4: k <= n;\nloop invariant i5: j >= 0;\n\nloop invariant i7: n > 0;\nloop invariant i8: j >= k;\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant n > 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant j <= k;\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (n == 0) ==> (j == 0);\nloop invariant (n == 0) ==> (k == 0);\nloop invariant (n > 0) ==> (j > 0);\nloop invariant (n > 0) ==> (k > 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\nloop invariant (j == 0) ==> (n == 0);\nloop invariant (k == 0) ==> (n == 0);\nloop invariant (j == 0) ==> (k == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\nloop invariant i2: 0 <= k <= n;\nloop invariant i3: n > 0;\nloop invariant i4: j >= 0;\nloop invariant i5: k >= 0;\nloop invariant i6: j <= k;\n\nloop invariant i8: (n == 0) ==> (j == 0);\nloop invariant i9: (n == 0) ==> (k == 0);\n\n\n\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant j >= 0;\nloop invariant n >= 1;\nloop invariant k >= 0;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant k >= j;\nloop invariant j >= 0 ==> j - 1 >= 0;\nloop invariant k >= 0 ==> k - 1 >= 0;\nloop invariant j >= 0 ==> j - 1 <= n;\nloop invariant k >= 0 ==> k - 1 <= n;\nloop invariant j >= 0 ==> k >= j;\nloop invariant j >= 0 ==> k - 1 >= j - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: j >= 0;\nloop invariant i2: n >= 1;\nloop invariant i3: k >= 0;\nloop invariant i4: j <= n;\nloop invariant i5: k <= n;\nloop invariant i6: k >= j;\n\n\nloop invariant i9: j >= 0 ==> j - 1 <= n;\nloop invariant i10: k >= 0 ==> k - 1 <= n;\nloop invariant i11: j >= 0 ==> k >= j;\nloop invariant i12: j >= 0 ==> k - 1 >= j - 1;\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant n >= 0;\nloop invariant n >= j;\nloop invariant n >= k;\nloop invariant j >= n - k;\nloop invariant k >= n - j;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant j >= 0 ==> j == 0;\nloop invariant k >= 0 ==> k == 0;\nloop invariant n >= 0 ==> n == 0;\nloop invariant n >= j ==> n == j;\nloop invariant n >= k ==> n == k;\nloop invariant j >= n - k ==> j == n - k;\nloop invariant k >= n - j ==> k == n - j;\nloop invariant j <= n ==> j == n;\nloop invariant k <= n ==> k == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: j >= 0;\n\nloop invariant i3: n >= 0;\nloop invariant i4: n >= j;\nloop invariant i5: n >= k;\n\n\nloop invariant i8: j <= n;\nloop invariant i9: k <= n;\n\n\n\n\n\n\n\n\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n && 0 <= k <= n && 0 <= n <= 100000; loop invariant j >= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= j;\nloop invariant n > 0;\nloop invariant n > j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\n\nloop invariant i3: n > 0;\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j >= k;\nloop invariant n >= j && n >= k;\nloop invariant n >= 0;\nloop invariant k >= 0;\nloop invariant j >= 0;\nloop invariant j == k;\nloop invariant j == 0;\nloop invariant k == 0;\nloop invariant j == n;\nloop invariant k == n;\nloop invariant j == n && k == n;\nloop invariant j == n ==> k == n;\nloop invariant k == 0 ==> j == 0;\nloop invariant k == 0 ==> j == n ==> k == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\nloop invariant i2: 0 <= k <= n;\nloop invariant i3: j >= k;\nloop invariant i4: n >= j && n >= k;\nloop invariant i5: n >= 0;\nloop invariant i6: k >= 0;\nloop invariant i7: j >= 0;\nloop invariant i8: j == k;\n\n\n\n\n\nloop invariant i14: j == n ==> k == n;\nloop invariant i15: k == 0 ==> j == 0;\nloop invariant i16: k == 0 ==> j == n ==> k == n;\nloop invariant i17: j == n ==> k == 0 ==> j == n && k == n;\nloop invariant i18: j == n ==> k == 0 ==> j == n && k == n ==> k == 0;\nloop invariant i19: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n;\nloop invariant i20: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i21: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i22: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i23: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i24: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i25: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i26: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i27: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i28: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i29: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i30: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i31: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i32: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant j >= k;\nloop invariant n > 0;\nloop invariant j == (n - k);\nloop invariant (j == 0) ==> (k == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 0 <= j <= n;\n\nloop invariant i3: j >= k;\nloop invariant i4: n > 0;\n\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= n; loop invariant 1 <= k <= n; loop invariant j >= k; loop invariant n > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 48: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\nloop invariant i1: 1 <= j <= n;\nloop invariant i2: 1 <= k <= n;\nloop invariant i3: j >= k;\nloop invariant i4: j >= 0;\nloop invariant i5: k >= 0;\nloop invariant i6: n > 0;\nloop invariant i7: (j > 0 && n > 0) ==> (j >= k);\nloop invariant i8: (j > 0 && n > 0) ==> (j >= 0);\nloop invariant i9: (j > 0 && n > 0) ==> (k >= 0);\nloop invariant i10: (j > 0 && n > 0) ==> (n > 0);\nloop invariant i11: (j == 0) ==> (k == 0);\nloop invariant i12: j + k == n;\nloop invariant i13: n >= j >= 0;\nloop invariant i14: n >= k >= 0;\nloop invariant i15: j > 0 ==> k > 0;\nloop invariant i16: j == 0 ==> k == 0;\nloop invariant i17: j == 0 ==> n == k;\nloop invariant i18: j * k <= n * (n - 1) / 2;\nloop invariant i19: j * k >= 0;\nloop invariant i20: 0 <= j <= n;\nloop invariant i21: 0 <= k <= n;\nloop invariant i22: (j==n && k==n) ==> (j==0 && k==0);\nloop invariant i23: (j==n && k==n) ==> (n==0);\nloop invariant i24: (j==0 && k==0) ==> (j==n && k==n);\nloop invariant i25: (n==0) ==> (j==n && k==n);\nloop invariant i26: (j==n && k==n) ==> (j==k);\nloop invariant i27: (j==0 && k==0) ==> (j==k);\nloop invariant i28: (n==0) ==> (j==k);\nloop invariant i29: (j==k) ==> (j==n && k==n);\nloop invariant i30: (j==k) ==> (j==0 && k==0);\nloop invariant i31: (j==k) ==> (n==0);\nloop invariant i32: j + k = n;\nloop invariant i33: n >= 0;\nloop invariant i34: j <= n;\nloop invariant i35: k <= n;\nloop invariant i36: (j==n) ==> (k==0);\nloop invariant i37: (j==n) ==> (j==k);\nloop invariant i38: (j==n) ==> (j==n);\nloop invariant i39: j <= k;\nloop invariant i40: (n == 0) ==> (j == 0);\nloop invariant i41: (n == 0) ==> (k == 0);\nloop invariant i42: (n > 0) ==> (j > 0);\nloop invariant i43: (n > 0) ==> (k > 0);\nloop invariant i44: (j == 0) ==> (n == 0);\nloop invariant i45: (k == 0) ==> (n == 0);\nloop invariant i46: n >= 1;\nloop invariant i47: k >= j;\nloop invariant i48: j >= 0 ==> j - 1 >= 0;\nloop invariant i49: k >= 0 ==> k - 1 >= 0;\nloop invariant i50: j >= 0 ==> j - 1 <= n;\nloop invariant i51: k >= 0 ==> k - 1 <= n;\nloop invariant i52: j >= 0 ==> k >= j;\nloop invariant i53: j >= 0 ==> k - 1 >= j - 1;\nloop invariant i54: n >= j;\nloop invariant i55: n >= k;\nloop invariant i56: j >= n - k;\nloop invariant i57: k >= n - j;\nloop invariant i58: j >= 0 ==> j == 0;\nloop invariant i59: k >= 0 ==> k == 0;\nloop invariant i60: n >= 0 ==> n == 0;\nloop invariant i61: n >= j ==> n == j;\nloop invariant i62: n >= k ==> n == k;\nloop invariant i63: j >= n - k ==> j == n - k;\nloop invariant i64: k >= n - j ==> k == n - j;\nloop invariant i65: j <= n ==> j == n;\nloop invariant i66: k <= n ==> k == n;\nloop invariant i67: 0 <= j <= n && 0 <= k <= n && 0 <= n <= 100000; loop invariant j >= k;\nloop invariant i68: 0 <= k <= j;\nloop invariant i69: n > j;\nloop invariant i70: n >= j && n >= k;\nloop invariant i71: j == k;\nloop invariant i72: j == 0;\nloop invariant i73: k == 0;\nloop invariant i74: j == n;\nloop invariant i75: k == n;\nloop invariant i76: j == n && k == n;\nloop invariant i77: j == n ==> k == n;\nloop invariant i78: k == 0 ==> j == 0;\nloop invariant i79: k == 0 ==> j == n ==> k == n;\nloop invariant i80: j == n ==> k == 0 ==> j == n && k == n;\nloop invariant i81: j == n ==> k == 0 ==> j == n && k == n ==> k == 0;\nloop invariant i82: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n;\nloop invariant i83: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i84: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i85: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i86: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i87: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i88: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i89: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i90: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i91: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i92: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i93: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i94: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i95: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i96: j == (n - k);\nloop invariant i97: 1 <= j <= n; loop invariant 1 <= k <= n; loop invariant j >= k; loop invariant n > 0;\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 29,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  /*@\n\n\nloop invariant i3: j >= k;\nloop invariant i4: j >= 0;\nloop invariant i5: k >= 0;\nloop invariant i6: n > 0;\nloop invariant i7: (j > 0 && n > 0) ==> (j >= k);\nloop invariant i8: (j > 0 && n > 0) ==> (j >= 0);\nloop invariant i9: (j > 0 && n > 0) ==> (k >= 0);\nloop invariant i10: (j > 0 && n > 0) ==> (n > 0);\nloop invariant i11: (j == 0) ==> (k == 0);\n\nloop invariant i13: n >= j >= 0;\nloop invariant i14: n >= k >= 0;\nloop invariant i15: j > 0 ==> k > 0;\nloop invariant i16: j == 0 ==> k == 0;\n\n\nloop invariant i19: j * k >= 0;\nloop invariant i20: 0 <= j <= n;\nloop invariant i21: 0 <= k <= n;\n\n\n\nloop invariant i25: (n==0) ==> (j==n && k==n);\nloop invariant i26: (j==n && k==n) ==> (j==k);\nloop invariant i27: (j==0 && k==0) ==> (j==k);\nloop invariant i28: (n==0) ==> (j==k);\n\n\n\n\nloop invariant i33: n >= 0;\nloop invariant i34: j <= n;\nloop invariant i35: k <= n;\n\nloop invariant i37: (j==n) ==> (j==k);\nloop invariant i38: (j==n) ==> (j==n);\nloop invariant i39: j <= k;\nloop invariant i40: (n == 0) ==> (j == 0);\nloop invariant i41: (n == 0) ==> (k == 0);\n\n\n\n\nloop invariant i46: n >= 1;\nloop invariant i47: k >= j;\n\n\nloop invariant i50: j >= 0 ==> j - 1 <= n;\nloop invariant i51: k >= 0 ==> k - 1 <= n;\nloop invariant i52: j >= 0 ==> k >= j;\nloop invariant i53: j >= 0 ==> k - 1 >= j - 1;\nloop invariant i54: n >= j;\nloop invariant i55: n >= k;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i68: 0 <= k <= j;\n\nloop invariant i70: n >= j && n >= k;\nloop invariant i71: j == k;\n\n\n\n\n\nloop invariant i77: j == n ==> k == n;\nloop invariant i78: k == 0 ==> j == 0;\nloop invariant i79: k == 0 ==> j == n ==> k == n;\nloop invariant i80: j == n ==> k == 0 ==> j == n && k == n;\nloop invariant i81: j == n ==> k == 0 ==> j == n && k == n ==> k == 0;\nloop invariant i82: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n;\nloop invariant i83: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i84: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i85: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i86: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i87: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i88: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i89: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i90: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i91: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i92: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i93: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\nloop invariant i94: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n;\nloop invariant i95: j == n ==> k == 0 ==> j == n && k == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0 ==> j == n ==> k == 0;\n\n\n*/\nwhile (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c"
        ],
        "skipped": [],
        "total": 140,
        "success_count": 123,
        "failure_count": 17,
        "success_rate": 0.8785714285714286
    }
}