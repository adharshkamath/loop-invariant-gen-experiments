{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops/sum04-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2*SIZE; loop invariant sn == i*a; loop invariant 1 <= i <= SIZE;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE; loop invariant sn == (a * i) - a; loop invariant i == SIZE; loop invariant sn == (SIZE * a) || sn == 0; loop invariant true;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn == i * a - a;\nloop invariant i <= SIZE;\nloop invariant sn == a * (SIZE - i + 1);\nloop invariant sn == (SIZE - i + 1) * a;\nloop invariant sn == (SIZE - i + 1) * a;\nloop invariant sn == (SIZE * a);\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == i*a;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant SIZE*a == 16;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn = (i-1) * a;\nloop invariant i = (SIZE + 1) - i;\nloop invariant sn = (SIZE * a) - sn;\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn = (i-1) * a;\nloop invariant i = (SIZE + 1) - i;\nloop invariant sn = (SIZE * a) - sn;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant 1 <= i;\nloop invariant i <= SIZE;\nloop invariant 0 <= sn;\nloop invariant sn <= SIZE * a;\nloop invariant sn <= i * a;\nloop invariant sn <= (i - 1) * a;\nloop invariant sn <= (i + 1) * a;\nloop invariant sn <= (i - 2) * a;\nloop invariant sn <= (i + 2) * a;\nloop invariant sn <= (i - 3) * a;\nloop invariant sn <= (i + 3) * a;\nloop invariant sn <= (i - 4) * a;\nloop invariant sn <= (i + 4) * a;\nloop invariant sn <= (i - 5) * a;\nloop invariant sn <= (i + 5) * a;\nloop invariant sn <= (i - 6) * a;\nloop invariant sn <= (i + 6) * a;\nloop invariant sn <= (i - 7) * a;\nloop invariant sn <= (i + 7) * a;\nloop invariant sn <= (i - 8) * a;\nloop invariant sn <= (i + 8) * a;\nloop invariant sn <= (i - 9) * a;\nloop invariant sn <= (i + 9) * a;\nloop invariant sn <= (i - 10) * a;\nloop invariant sn <= (i + 10) * a;\nloop invariant sn <= (i - 11) * a;\nloop invariant sn <= (i + 11) * a;\nloop invariant sn <= (i - 12) * a;\nloop invariant sn <= (i + 12) * a;\nloop invariant sn <= (i - 13) * a;\nloop invariant sn <= (i + 13) * a;\nloop invariant sn <= (i - 14) * a;\nloop invariant sn <= (i + 14) * a;\nloop invariant sn <= (i - 15) * a;\nloop invariant sn <= (i + 15) * a;\nloop invariant sn <= (i - 16) * a;\nloop invariant sn <= (i + 16) * a;\nloop invariant sn <= (i - 17) * a;\nloop invariant sn <= (i + 17) * a;\nloop invariant sn <= (i - 18) * a;\nloop invariant sn <= (i + 18) * a;\nloop invariant sn <= (i - 19) * a;\nloop invariant sn <= (i + 19) * a;\nloop invariant sn <= (i - 20) * a;\nloop invariant sn <= (i + 20) * a;\nloop invariant sn <= (i - 21) * a;\nloop invariant sn <= (i + 21) * a;\nloop invariant sn <= (i - 22) * a;\nloop invariant sn <= (i + 22) * a;\nloop invariant sn <= (i - 23) * a;\nloop invariant sn <= (i + 23) * a;\nloop invariant sn <= (i - 24) * a;\nloop invariant sn <= (i + 24) * a;\nloop invariant sn <= (i - 25) * a;\nloop invariant sn <= (i + 25) * a;\nloop invariant sn <= (i - 26) * a;\nloop invariant sn <= (i + 26) * a;\nloop invariant sn <= (i - 27) * a;\nloop invariant sn <= (i + 27) * a;\nloop invariant sn <= (i - 28) * a;\nloop invariant sn <= (i + 28) * a;\nloop invariant sn <= (i - 29) * a;\nloop invariant sn <= (i + 29) * a;\nloop invariant sn <= (i - 30) * a;\nloop invariant sn <= (i + 30) * a;\nloop invariant sn <= (i - 31) * a;\nloop invariant sn <= (i + 31) * a;\nloop invariant sn <= (i - 32) * a;\nloop invariant sn <= (i + 32) * a;\nloop invariant sn <= (i - 33) * a;\nloop invariant sn <= (i + 33) * a;\nloop invariant sn <= (i - 34) * a;\nloop invariant sn <= (i + 34) * a;\nloop invariant sn <= (i - 35) * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant a == 2;\nloop invariant SIZE == 8;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= SIZE * 2;\nloop invariant sn == SIZE * a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant ( i <= SIZE ) && ( i >= 1 );\nloop invariant ( sn == ( ( i - 1 ) * a ) );\nloop invariant ( sn >= 0 );\nloop invariant ( sn <= ( SIZE * a ) );\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn == ((i - 1) * a);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * (i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 2 <= sn <= 16;\nloop invariant sn >= 0;\nloop invariant sn <= 8 * 2;\nloop invariant sn == 2 * i;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn == 2 * (i - 1);\nloop invariant sn + 2 == sn + a;\nloop invariant sn + 2 == i * a;\nloop invariant sn + 2 == i * 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2*SIZE; loop invariant sn == i*a; loop invariant 1 <= i <= SIZE;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 0 <= sn <= 2*SIZE; loop invariant sn == i*a; loop invariant 1 <= i <= SIZE;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE; loop invariant sn == (a * i) - a; loop invariant i == SIZE; loop invariant sn == (SIZE * a) || sn == 0; loop invariant true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn == i * a - a;\nloop invariant i <= SIZE;\nloop invariant sn == a * (SIZE - i + 1);\nloop invariant sn == (SIZE - i + 1) * a;\nloop invariant sn == (SIZE - i + 1) * a;\nloop invariant sn == (SIZE * a);\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\nloop invariant sn == SIZE * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == i * a - a;\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE;\nloop invariant 0 <= sn <= SIZE*a;\nloop invariant sn == i*a;\nloop invariant a == 2;\nloop invariant SIZE == 8;\nloop invariant SIZE*a == 16;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\nloop invariant i4: a == 2;\nloop invariant i5: SIZE == 8;\nloop invariant i6: SIZE*a == 16;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn = (i-1) * a;\nloop invariant i = (SIZE + 1) - i;\nloop invariant sn = (SIZE * a) - sn;\nloop invariant 0 <= i <= SIZE;\nloop invariant sn >= 0;\nloop invariant sn = (i-1) * a;\nloop invariant i = (SIZE + 1) - i;\nloop invariant sn = (SIZE * a) - sn;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\nloop invariant (a >= 0 ==> sn >= 0);\nloop invariant (a < 0 ==> sn <= 0);\nloop invariant (i == SIZE ==> sn == SIZE * a);\nloop invariant (i < SIZE ==> sn < SIZE * a);\nloop invariant (i > SIZE ==> sn > SIZE * a);\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i > 0 ==> sn > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: (a >= 0 ==> sn >= 0);\nloop invariant i9: (a < 0 ==> sn <= 0);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 39,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant 1 <= i;\nloop invariant i <= SIZE;\nloop invariant 0 <= sn;\nloop invariant sn <= SIZE * a;\nloop invariant sn <= i * a;\nloop invariant sn <= (i - 1) * a;\nloop invariant sn <= (i + 1) * a;\nloop invariant sn <= (i - 2) * a;\nloop invariant sn <= (i + 2) * a;\nloop invariant sn <= (i - 3) * a;\nloop invariant sn <= (i + 3) * a;\nloop invariant sn <= (i - 4) * a;\nloop invariant sn <= (i + 4) * a;\nloop invariant sn <= (i - 5) * a;\nloop invariant sn <= (i + 5) * a;\nloop invariant sn <= (i - 6) * a;\nloop invariant sn <= (i + 6) * a;\nloop invariant sn <= (i - 7) * a;\nloop invariant sn <= (i + 7) * a;\nloop invariant sn <= (i - 8) * a;\nloop invariant sn <= (i + 8) * a;\nloop invariant sn <= (i - 9) * a;\nloop invariant sn <= (i + 9) * a;\nloop invariant sn <= (i - 10) * a;\nloop invariant sn <= (i + 10) * a;\nloop invariant sn <= (i - 11) * a;\nloop invariant sn <= (i + 11) * a;\nloop invariant sn <= (i - 12) * a;\nloop invariant sn <= (i + 12) * a;\nloop invariant sn <= (i - 13) * a;\nloop invariant sn <= (i + 13) * a;\nloop invariant sn <= (i - 14) * a;\nloop invariant sn <= (i + 14) * a;\nloop invariant sn <= (i - 15) * a;\nloop invariant sn <= (i + 15) * a;\nloop invariant sn <= (i - 16) * a;\nloop invariant sn <= (i + 16) * a;\nloop invariant sn <= (i - 17) * a;\nloop invariant sn <= (i + 17) * a;\nloop invariant sn <= (i - 18) * a;\nloop invariant sn <= (i + 18) * a;\nloop invariant sn <= (i - 19) * a;\nloop invariant sn <= (i + 19) * a;\nloop invariant sn <= (i - 20) * a;\nloop invariant sn <= (i + 20) * a;\nloop invariant sn <= (i - 21) * a;\nloop invariant sn <= (i + 21) * a;\nloop invariant sn <= (i - 22) * a;\nloop invariant sn <= (i + 22) * a;\nloop invariant sn <= (i - 23) * a;\nloop invariant sn <= (i + 23) * a;\nloop invariant sn <= (i - 24) * a;\nloop invariant sn <= (i + 24) * a;\nloop invariant sn <= (i - 25) * a;\nloop invariant sn <= (i + 25) * a;\nloop invariant sn <= (i - 26) * a;\nloop invariant sn <= (i + 26) * a;\nloop invariant sn <= (i - 27) * a;\nloop invariant sn <= (i + 27) * a;\nloop invariant sn <= (i - 28) * a;\nloop invariant sn <= (i + 28) * a;\nloop invariant sn <= (i - 29) * a;\nloop invariant sn <= (i + 29) * a;\nloop invariant sn <= (i - 30) * a;\nloop invariant sn <= (i + 30) * a;\nloop invariant sn <= (i - 31) * a;\nloop invariant sn <= (i + 31) * a;\nloop invariant sn <= (i - 32) * a;\nloop invariant sn <= (i + 32) * a;\nloop invariant sn <= (i - 33) * a;\nloop invariant sn <= (i + 33) * a;\nloop invariant sn <= (i - 34) * a;\nloop invariant sn <= (i + 34) * a;\nloop invariant sn <= (i - 35) * a;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\nloop invariant i4: 1 <= i;\n\nloop invariant i6: 0 <= sn;\nloop invariant i7: sn <= SIZE * a;\nloop invariant i8: sn <= i * a;\nloop invariant i9: sn <= (i - 1) * a;\nloop invariant i10: sn <= (i + 1) * a;\n\nloop invariant i12: sn <= (i + 2) * a;\n\nloop invariant i14: sn <= (i + 3) * a;\n\nloop invariant i16: sn <= (i + 4) * a;\n\nloop invariant i18: sn <= (i + 5) * a;\n\nloop invariant i20: sn <= (i + 6) * a;\n\nloop invariant i22: sn <= (i + 7) * a;\n\nloop invariant i24: sn <= (i + 8) * a;\n\nloop invariant i26: sn <= (i + 9) * a;\n\nloop invariant i28: sn <= (i + 10) * a;\n\nloop invariant i30: sn <= (i + 11) * a;\n\nloop invariant i32: sn <= (i + 12) * a;\n\nloop invariant i34: sn <= (i + 13) * a;\n\nloop invariant i36: sn <= (i + 14) * a;\n\nloop invariant i38: sn <= (i + 15) * a;\n\nloop invariant i40: sn <= (i + 16) * a;\n\nloop invariant i42: sn <= (i + 17) * a;\n\nloop invariant i44: sn <= (i + 18) * a;\n\nloop invariant i46: sn <= (i + 19) * a;\n\nloop invariant i48: sn <= (i + 20) * a;\n\nloop invariant i50: sn <= (i + 21) * a;\n\nloop invariant i52: sn <= (i + 22) * a;\n\nloop invariant i54: sn <= (i + 23) * a;\n\nloop invariant i56: sn <= (i + 24) * a;\n\nloop invariant i58: sn <= (i + 25) * a;\n\nloop invariant i60: sn <= (i + 26) * a;\n\nloop invariant i62: sn <= (i + 27) * a;\n\nloop invariant i64: sn <= (i + 28) * a;\n\nloop invariant i66: sn <= (i + 29) * a;\n\nloop invariant i68: sn <= (i + 30) * a;\n\nloop invariant i70: sn <= (i + 31) * a;\n\nloop invariant i72: sn <= (i + 32) * a;\n\nloop invariant i74: sn <= (i + 33) * a;\n\nloop invariant i76: sn <= (i + 34) * a;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == i * a;\nloop invariant a == 2;\nloop invariant SIZE == 8;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\nloop invariant i3: a == 2;\nloop invariant i4: SIZE == 8;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= SIZE * 2;\nloop invariant sn == SIZE * a || sn == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( i <= SIZE ) && ( i >= 1 );\nloop invariant ( sn == ( ( i - 1 ) * a ) );\nloop invariant ( sn >= 0 );\nloop invariant ( sn <= ( SIZE * a ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: ( sn == ( ( i - 1 ) * a ) );\nloop invariant i3: ( sn >= 0 );\nloop invariant i4: ( sn <= ( SIZE * a ) );\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= SIZE + 1;\nloop invariant sn >= 0;\nloop invariant sn == ((i - 1) * a);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == ((i - 1) * a);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= SIZE;\nloop invariant sn == a * (i - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn == a * (i - 1);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 2 <= sn <= 16;\nloop invariant sn >= 0;\nloop invariant sn <= 8 * 2;\nloop invariant sn == 2 * i;\nloop invariant i >= 1;\nloop invariant i <= 8;\nloop invariant sn == 2 * (i - 1);\nloop invariant sn + 2 == sn + a;\nloop invariant sn + 2 == i * a;\nloop invariant sn + 2 == i * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= 8 * 2;\n\nloop invariant i5: i >= 1;\n\nloop invariant i7: sn == 2 * (i - 1);\nloop invariant i8: sn + 2 == sn + a;\nloop invariant i9: sn + 2 == i * a;\nloop invariant i10: sn + 2 == i * 2;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 189: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: i1;\nloop invariant i2: i2;\nloop invariant i3: i3;\nloop invariant i4: i4;\nloop invariant i5: i5;\nloop invariant i6: i6;\nloop invariant i7: i7;\nloop invariant i8: i8;\nloop invariant i9: i9;\nloop invariant i10: i10;\nloop invariant i11: i11;\nloop invariant i12: i12;\nloop invariant i13: i13;\nloop invariant i14: i14;\nloop invariant i15: i15;\nloop invariant i16: i16;\nloop invariant i17: i17;\nloop invariant i18: i18;\nloop invariant i19: i19;\nloop invariant i20: i20;\nloop invariant i21: i21;\nloop invariant i22: i22;\nloop invariant i23: i23;\nloop invariant i24: i24;\nloop invariant i25: i25;\nloop invariant i26: i26;\nloop invariant i27: i27;\nloop invariant i28: i28;\nloop invariant i29: i29;\nloop invariant i30: i30;\nloop invariant i31: i31;\nloop invariant i32: i32;\nloop invariant i33: i33;\nloop invariant i34: i34;\nloop invariant i35: i35;\nloop invariant i36: i36;\nloop invariant i37: i37;\nloop invariant i38: i38;\nloop invariant i39: i39;\nloop invariant i40: i40;\nloop invariant i41: i41;\nloop invariant i42: i42;\nloop invariant i43: i43;\nloop invariant i44: i44;\nloop invariant i45: i45;\nloop invariant i46: i46;\nloop invariant i47: i47;\nloop invariant i48: i48;\nloop invariant i49: i49;\nloop invariant i50: i50;\nloop invariant i51: i51;\nloop invariant i52: i52;\nloop invariant i53: i53;\nloop invariant i54: i54;\nloop invariant i55: i55;\nloop invariant i56: i56;\nloop invariant i57: i57;\nloop invariant i58: i58;\nloop invariant i59: i59;\nloop invariant i60: i60;\nloop invariant i61: i61;\nloop invariant i62: i62;\nloop invariant i63: i63;\nloop invariant i64: i64;\nloop invariant i65: i65;\nloop invariant i66: i66;\nloop invariant i67: i67;\nloop invariant i68: i68;\nloop invariant i69: i69;\nloop invariant i70: i70;\nloop invariant i71: i71;\nloop invariant i72: i72;\nloop invariant i73: i73;\nloop invariant i74: i74;\nloop invariant i75: i75;\nloop invariant i76: i76;\nloop invariant i77: i77;\nloop invariant i78: i78;\nloop invariant i79: i79;\nloop invariant i80: i80;\nloop invariant i81: i81;\nloop invariant i82: i82;\nloop invariant i83: i83;\nloop invariant i84: i84;\nloop invariant i85: i85;\nloop invariant i86: i86;\nloop invariant i87: i87;\nloop invariant i88: i88;\nloop invariant i89: i89;\nloop invariant i90: i90;\nloop invariant i91: i91;\nloop invariant i92: i92;\nloop invariant i93: i93;\nloop invariant i94: i94;\nloop invariant i95: i95;\nloop invariant i96: i96;\nloop invariant i97: i97;\nloop invariant i98: i98;\nloop invariant i99: i99;\nloop invariant i100: i100;\nloop invariant i101: i101;\nloop invariant i102: i102;\nloop invariant i103: i103;\nloop invariant i104: i104;\nloop invariant i105: i105;\nloop invariant i106: i106;\nloop invariant i107: i107;\nloop invariant i108: i108;\nloop invariant i109: i109;\nloop invariant i110: i110;\nloop invariant i111: i111;\nloop invariant i112: i112;\nloop invariant i113: i113;\nloop invariant i114: i114;\nloop invariant i115: i115;\nloop invariant i116: i116;\nloop invariant i117: i117;\nloop invariant i118: i118;\nloop invariant i119: i119;\nloop invariant i120: i120;\nloop invariant i121: i121;\nloop invariant i122: i122;\nloop invariant i123: i123;\nloop invariant i124: i124;\nloop invariant i125: i125;\nloop invariant i126: i126;\nloop invariant i127: i127;\nloop invariant i128: i128;\nloop invariant i129: i129;\nloop invariant i130: i130;\nloop invariant i131: i131;\nloop invariant i132: i132;\nloop invariant i133: i133;\nloop invariant i134: i134;\nloop invariant i135: i135;\nloop invariant i136: i136;\nloop invariant i137: i137;\nloop invariant i138: i138;\nloop invariant i139: i139;\nloop invariant i140: i140;\nloop invariant i141: i141;\nloop invariant i142: i142;\nloop invariant i143: i143;\nloop invariant i144: i144;\nloop invariant i145: i145;\nloop invariant i146: i146;\nloop invariant i147: i147;\nloop invariant i148: i148;\nloop invariant i149: i149;\nloop invariant i150: i150;\nloop invariant i151: i151;\nloop invariant i152: i152;\nloop invariant i153: i153;\nloop invariant i154: i154;\nloop invariant i155: i155;\nloop invariant i156: i156;\nloop invariant i157: i157;\nloop invariant i158: i158;\nloop invariant i159: 0 <= sn <= 2*SIZE; loop invariant sn == i*a; loop invariant 1 <= i <= SIZE;\nloop invariant i160: 0 <= i <= SIZE; loop invariant sn == (a * i) - a; loop invariant i == SIZE; loop invariant sn == (SIZE * a) || sn == 0; loop invariant true;\nloop invariant i161: 1 <= i <= SIZE + 1;\nloop invariant i162: sn >= 0;\nloop invariant i163: sn == i * a - a;\nloop invariant i164: i <= SIZE;\nloop invariant i165: sn == a * (SIZE - i + 1);\nloop invariant i166: sn == (SIZE - i + 1) * a;\nloop invariant i167: sn == (SIZE * a);\nloop invariant i168: sn == SIZE * a;\nloop invariant i169: 1 <= i <= SIZE;\nloop invariant i170: 0 <= sn <= SIZE*a;\nloop invariant i171: sn == i*a;\nloop invariant i172: a == 2;\nloop invariant i173: SIZE == 8;\nloop invariant i174: SIZE*a == 16;\nloop invariant i175: 0 <= i <= SIZE;\nloop invariant i176: sn = (i-1) * a;\nloop invariant i177: i = (SIZE + 1) - i;\nloop invariant i178: sn = (SIZE * a) - sn;\nloop invariant i179: sn == i * a;\nloop invariant i180: (i == SIZE ==> sn == SIZE * a);\nloop invariant i181: (i < SIZE ==> sn < SIZE * a);\nloop invariant i182: (i > SIZE ==> sn > SIZE * a);\nloop invariant i183: (i == 0 ==> sn == 0);\nloop invariant i184: (i > 0 ==> sn > 0);\nloop invariant i185: (a >= 0 ==> sn >= 0);\nloop invariant i186: (a < 0 ==> sn <= 0);\nloop invariant i187: 1 <= i;\nloop invariant i188: 0 <= sn;\nloop invariant i189: sn <= SIZE * a;\nloop invariant i190: sn <= i * a;\nloop invariant i191: sn <= (i - 1) * a;\nloop invariant i192: sn <= (i + 1) * a;\nloop invariant i193: sn <= (i - 2) * a;\nloop invariant i194: sn <= (i + 2) * a;\nloop invariant i195: sn <= (i - 3) * a;\nloop invariant i196: sn <= (i + 3) * a;\nloop invariant i197: sn <= (i - 4) * a;\nloop invariant i198: sn <= (i + 4) * a;\nloop invariant i199: sn <= (i - 5) * a;\nloop invariant i200: sn <= (i + 5) * a;\nloop invariant i201: sn <= (i - 6) * a;\nloop invariant i202: sn <= (i + 6) * a;\nloop invariant i203: sn <= (i - 7) * a;\nloop invariant i204: sn <= (i + 7) * a;\nloop invariant i205: sn <= (i - 8) * a;\nloop invariant i206: sn <= (i + 8) * a;\nloop invariant i207: sn <= (i - 9) * a;\nloop invariant i208: sn <= (i + 9) * a;\nloop invariant i209: sn <= (i - 10) * a;\nloop invariant i210: sn <= (i + 10) * a;\nloop invariant i211: sn <= (i - 11) * a;\nloop invariant i212: sn <= (i + 11) * a;\nloop invariant i213: sn <= (i - 12) * a;\nloop invariant i214: sn <= (i + 12) * a;\nloop invariant i215: sn <= (i - 13) * a;\nloop invariant i216: sn <= (i + 13) * a;\nloop invariant i217: sn <= (i - 14) * a;\nloop invariant i218: sn <= (i + 14) * a;\nloop invariant i219: sn <= (i - 15) * a;\nloop invariant i220: sn <= (i + 15) * a;\nloop invariant i221: sn <= (i - 16) * a;\nloop invariant i222: sn <= (i + 16) * a;\nloop invariant i223: sn <= (i - 17) * a;\nloop invariant i224: sn <= (i + 17) * a;\nloop invariant i225: sn <= (i - 18) * a;\nloop invariant i226: sn <= (i + 18) * a;\nloop invariant i227: sn <= (i - 19) * a;\nloop invariant i228: sn <= (i + 19) * a;\nloop invariant i229: sn <= (i - 20) * a;\nloop invariant i230: sn <= (i + 20) * a;\nloop invariant i231: sn <= (i - 21) * a;\nloop invariant i232: sn <= (i + 21) * a;\nloop invariant i233: sn <= (i - 22) * a;\nloop invariant i234: sn <= (i + 22) * a;\nloop invariant i235: sn <= (i - 23) * a;\nloop invariant i236: sn <= (i + 23) * a;\nloop invariant i237: sn <= (i - 24) * a;\nloop invariant i238: sn <= (i + 24) * a;\nloop invariant i239: sn <= (i - 25) * a;\nloop invariant i240: sn <= (i + 25) * a;\nloop invariant i241: sn <= (i - 26) * a;\nloop invariant i242: sn <= (i + 26) * a;\nloop invariant i243: sn <= (i - 27) * a;\nloop invariant i244: sn <= (i + 27) * a;\nloop invariant i245: sn <= (i - 28) * a;\nloop invariant i246: sn <= (i + 28) * a;\nloop invariant i247: sn <= (i - 29) * a;\nloop invariant i248: sn <= (i + 29) * a;\nloop invariant i249: sn <= (i - 30) * a;\nloop invariant i250: sn <= (i + 30) * a;\nloop invariant i251: sn <= (i - 31) * a;\nloop invariant i252: sn <= (i + 31) * a;\nloop invariant i253: sn <= (i - 32) * a;\nloop invariant i254: sn <= (i + 32) * a;\nloop invariant i255: sn <= (i - 33) * a;\nloop invariant i256: sn <= (i + 33) * a;\nloop invariant i257: sn <= (i - 34) * a;\nloop invariant i258: sn <= (i + 34) * a;\nloop invariant i259: sn <= (i - 35) * a;\nloop invariant i260: 0 <= sn <= SIZE * 2;\nloop invariant i261: sn == SIZE * a || sn == 0;\nloop invariant i262: ( i <= SIZE ) && ( i >= 1 );\nloop invariant i263: ( sn == ( ( i - 1 ) * a ) );\nloop invariant i264: ( sn >= 0 );\nloop invariant i265: ( sn <= ( SIZE * a ) );\nloop invariant i266: sn == ((i - 1) * a);\nloop invariant i267: sn == a * (i - 1);\nloop invariant i268: 2 <= sn <= 16;\nloop invariant i269: sn <= 8 * 2;\nloop invariant i270: sn == 2 * i;\nloop invariant i271: i >= 1;\nloop invariant i272: i <= 8;\nloop invariant i273: sn == 2 * (i - 1);\nloop invariant i274: sn + 2 == sn + a;\nloop invariant i275: sn + 2 == i * a;\nloop invariant i276: sn + 2 == i * 2;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 164,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i159: 0 <= sn <= 2*SIZE; loop invariant sn == i*a; loop invariant 1 <= i <= SIZE;\n\nloop invariant i161: 1 <= i <= SIZE + 1;\nloop invariant i162: sn >= 0;\nloop invariant i163: sn == i * a - a;\nloop invariant i164: i <= SIZE;\nloop invariant i165: sn == a * (SIZE - i + 1);\nloop invariant i166: sn == (SIZE - i + 1) * a;\nloop invariant i167: sn == (SIZE * a);\nloop invariant i168: sn == SIZE * a;\nloop invariant i169: 1 <= i <= SIZE;\nloop invariant i170: 0 <= sn <= SIZE*a;\nloop invariant i171: sn == i*a;\nloop invariant i172: a == 2;\nloop invariant i173: SIZE == 8;\nloop invariant i174: SIZE*a == 16;\nloop invariant i175: 0 <= i <= SIZE;\n\n\n\nloop invariant i179: sn == i * a;\nloop invariant i180: (i == SIZE ==> sn == SIZE * a);\nloop invariant i181: (i < SIZE ==> sn < SIZE * a);\nloop invariant i182: (i > SIZE ==> sn > SIZE * a);\nloop invariant i183: (i == 0 ==> sn == 0);\nloop invariant i184: (i > 0 ==> sn > 0);\nloop invariant i185: (a >= 0 ==> sn >= 0);\nloop invariant i186: (a < 0 ==> sn <= 0);\nloop invariant i187: 1 <= i;\nloop invariant i188: 0 <= sn;\nloop invariant i189: sn <= SIZE * a;\nloop invariant i190: sn <= i * a;\nloop invariant i191: sn <= (i - 1) * a;\nloop invariant i192: sn <= (i + 1) * a;\nloop invariant i193: sn <= (i - 2) * a;\nloop invariant i194: sn <= (i + 2) * a;\nloop invariant i195: sn <= (i - 3) * a;\nloop invariant i196: sn <= (i + 3) * a;\nloop invariant i197: sn <= (i - 4) * a;\nloop invariant i198: sn <= (i + 4) * a;\nloop invariant i199: sn <= (i - 5) * a;\nloop invariant i200: sn <= (i + 5) * a;\nloop invariant i201: sn <= (i - 6) * a;\nloop invariant i202: sn <= (i + 6) * a;\nloop invariant i203: sn <= (i - 7) * a;\nloop invariant i204: sn <= (i + 7) * a;\nloop invariant i205: sn <= (i - 8) * a;\nloop invariant i206: sn <= (i + 8) * a;\nloop invariant i207: sn <= (i - 9) * a;\nloop invariant i208: sn <= (i + 9) * a;\nloop invariant i209: sn <= (i - 10) * a;\nloop invariant i210: sn <= (i + 10) * a;\nloop invariant i211: sn <= (i - 11) * a;\nloop invariant i212: sn <= (i + 11) * a;\nloop invariant i213: sn <= (i - 12) * a;\nloop invariant i214: sn <= (i + 12) * a;\nloop invariant i215: sn <= (i - 13) * a;\nloop invariant i216: sn <= (i + 13) * a;\nloop invariant i217: sn <= (i - 14) * a;\nloop invariant i218: sn <= (i + 14) * a;\nloop invariant i219: sn <= (i - 15) * a;\nloop invariant i220: sn <= (i + 15) * a;\nloop invariant i221: sn <= (i - 16) * a;\nloop invariant i222: sn <= (i + 16) * a;\nloop invariant i223: sn <= (i - 17) * a;\nloop invariant i224: sn <= (i + 17) * a;\nloop invariant i225: sn <= (i - 18) * a;\nloop invariant i226: sn <= (i + 18) * a;\nloop invariant i227: sn <= (i - 19) * a;\nloop invariant i228: sn <= (i + 19) * a;\nloop invariant i229: sn <= (i - 20) * a;\nloop invariant i230: sn <= (i + 20) * a;\nloop invariant i231: sn <= (i - 21) * a;\nloop invariant i232: sn <= (i + 21) * a;\nloop invariant i233: sn <= (i - 22) * a;\nloop invariant i234: sn <= (i + 22) * a;\nloop invariant i235: sn <= (i - 23) * a;\nloop invariant i236: sn <= (i + 23) * a;\nloop invariant i237: sn <= (i - 24) * a;\nloop invariant i238: sn <= (i + 24) * a;\nloop invariant i239: sn <= (i - 25) * a;\nloop invariant i240: sn <= (i + 25) * a;\nloop invariant i241: sn <= (i - 26) * a;\nloop invariant i242: sn <= (i + 26) * a;\nloop invariant i243: sn <= (i - 27) * a;\nloop invariant i244: sn <= (i + 27) * a;\nloop invariant i245: sn <= (i - 28) * a;\nloop invariant i246: sn <= (i + 28) * a;\nloop invariant i247: sn <= (i - 29) * a;\nloop invariant i248: sn <= (i + 29) * a;\nloop invariant i249: sn <= (i - 30) * a;\nloop invariant i250: sn <= (i + 30) * a;\nloop invariant i251: sn <= (i - 31) * a;\nloop invariant i252: sn <= (i + 31) * a;\nloop invariant i253: sn <= (i - 32) * a;\nloop invariant i254: sn <= (i + 32) * a;\nloop invariant i255: sn <= (i - 33) * a;\nloop invariant i256: sn <= (i + 33) * a;\nloop invariant i257: sn <= (i - 34) * a;\nloop invariant i258: sn <= (i + 34) * a;\nloop invariant i259: sn <= (i - 35) * a;\nloop invariant i260: 0 <= sn <= SIZE * 2;\nloop invariant i261: sn == SIZE * a || sn == 0;\nloop invariant i262: ( i <= SIZE ) && ( i >= 1 );\nloop invariant i263: ( sn == ( ( i - 1 ) * a ) );\nloop invariant i264: ( sn >= 0 );\nloop invariant i265: ( sn <= ( SIZE * a ) );\nloop invariant i266: sn == ((i - 1) * a);\nloop invariant i267: sn == a * (i - 1);\nloop invariant i268: 2 <= sn <= 16;\nloop invariant i269: sn <= 8 * 2;\nloop invariant i270: sn == 2 * i;\nloop invariant i271: i >= 1;\nloop invariant i272: i <= 8;\nloop invariant i273: sn == 2 * (i - 1);\nloop invariant i274: sn + 2 == sn + a;\nloop invariant i275: sn + 2 == i * a;\nloop invariant i276: sn + 2 == i * 2;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv3.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sum_natnum.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt3.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt4.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt5.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt6.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt7.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt8.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt9.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/count_up_down-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum04-2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_9.c"
        ],
        "skipped": [],
        "total": 193,
        "success_count": 173,
        "failure_count": 20,
        "success_rate": 0.8963730569948186
    }
}