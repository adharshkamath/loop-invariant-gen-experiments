{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/78.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant (i < y) ==> (i >= 0);\nloop invariant (i < y) ==> (i <= y);\nloop invariant (i < y) ==> (i < y);\nloop invariant (i < y) ==> (i == i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y; loop invariant 0 <= x; loop invariant 0 <= y; loop invariant x >= y; loop invariant y >= 0; loop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant i <= y ==> x >= (y - i) + y;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i >= y;\nloop invariant 0 <= i < y;\nloop invariant i >= y;\nloop invariant 0 <= i < y;\nloop invariant i >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant (i < y ==> (i <= x));\nloop invariant (i < y ==> (i >= 0));\nloop invariant (i >= y ==> (i == y));\nloop invariant (i >= y ==> (i >= 0));\nloop invariant (i >= y ==> (i == y ==> (i == y)));\nloop invariant (i >= y ==> (i == y ==> (i == y ==> (i == y))));\nloop invariant (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y)))));\nloop invariant (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y ==> (i == y))))));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant i < y;\nloop invariant i == y;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i * (i - 1) / 2;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= i;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant (y >= 1 ==> 0 <= i < y);\nloop invariant (y >= 1 ==> i < y);\nloop invariant (y >= 1 ==> i >= 0);\nloop invariant (y >= 1 ==> (0 <= i) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (i < y) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 100000;\nloop invariant x >= (1 + (i - 1) * i / 2);\nloop invariant y >= i;\nloop invariant x >= y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\nloop invariant i <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i <= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant (i < y) ==> (i >= 0);\nloop invariant (i < y) ==> (i <= y);\nloop invariant (i < y) ==> (i < y);\nloop invariant (i < y) ==> (i == i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: (i < y) ==> (i >= 0);\nloop invariant i3: (i < y) ==> (i <= y);\nloop invariant i4: (i < y) ==> (i < y);\nloop invariant i5: (i < y) ==> (i == i);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y; loop invariant 0 <= x; loop invariant 0 <= y; loop invariant x >= y; loop invariant y >= 0; loop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y; loop invariant 0 <= x; loop invariant 0 <= y; loop invariant x >= y; loop invariant y >= 0; loop invariant i >= 0;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant i <= y ==> x >= (y - i) + y;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i <= y;\n\nloop invariant i4: x >= 0;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i >= y;\nloop invariant 0 <= i < y;\nloop invariant i >= y;\nloop invariant 0 <= i < y;\nloop invariant i >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant (i < y ==> (i <= x));\nloop invariant (i < y ==> (i >= 0));\nloop invariant (i >= y ==> (i == y));\nloop invariant (i >= y ==> (i >= 0));\nloop invariant (i >= y ==> (i == y ==> (i == y)));\nloop invariant (i >= y ==> (i == y ==> (i == y ==> (i == y))));\nloop invariant (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y)))));\nloop invariant (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y ==> (i == y))))));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= y;\nloop invariant i3: x >= i;\nloop invariant i4: (i < y ==> (i <= x));\nloop invariant i5: (i < y ==> (i >= 0));\nloop invariant i6: (i >= y ==> (i == y));\nloop invariant i7: (i >= y ==> (i >= 0));\nloop invariant i8: (i >= y ==> (i == y ==> (i == y)));\nloop invariant i9: (i >= y ==> (i == y ==> (i == y ==> (i == y))));\nloop invariant i10: (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y)))));\nloop invariant i11: (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y ==> (i == y))))));\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant i < y;\nloop invariant i == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i <= y;\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i * (i - 1) / 2;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= i;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= y;\nloop invariant i3: x >= y;\n\nloop invariant i5: y >= 0;\nloop invariant i6: x >= 0;\nloop invariant i7: y >= i;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= y;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i <= y;\nloop invariant i3: x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= i;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= i;\nloop invariant i3: y >= 0;\nloop invariant i4: i >= 0;\nloop invariant i5: i <= y;\nloop invariant i6: x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant (y >= 1 ==> 0 <= i < y);\nloop invariant (y >= 1 ==> i < y);\nloop invariant (y >= 1 ==> i >= 0);\nloop invariant (y >= 1 ==> (0 <= i) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (i < y) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= y;\n\n\nloop invariant i7: (y >= 1 ==> i >= 0);\n\nloop invariant i9: (y >= 1 ==> (i < y) ==> (0 <= i) && (i < y) && (i >= 0));\n\n\nloop invariant i12: (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant i13: (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant i14: (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 100000;\nloop invariant x >= (1 + (i - 1) * i / 2);\nloop invariant y >= i;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\n\n\nloop invariant i3: y >= i;\nloop invariant i4: x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= y is partially proven to be inductive.\nloop invariant i <= y is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant (i < y) ==> (i >= 0) is partially proven to be inductive.\nloop invariant (i < y) ==> (i <= y) is partially proven to be inductive.\nloop invariant (i < y) ==> (i < y) is partially proven to be inductive.\nloop invariant (i < y) ==> (i == i) is partially proven to be inductive.\nloop invariant 0 <= i <= y; loop invariant 0 <= x; loop invariant 0 <= y; loop invariant x >= y; loop invariant y >= 0; loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= y ==> x >= (y - i) + y is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant i >= y is preserved but not established.\nloop invariant 0 <= i < y is preserved but not established.\nloop invariant x >= i is partially proven to be inductive.\nloop invariant (i < y ==> (i <= x)) is partially proven to be inductive.\nloop invariant (i < y ==> (i >= 0)) is partially proven to be inductive.\nloop invariant (i >= y ==> (i == y)) is partially proven to be inductive.\nloop invariant (i >= y ==> (i >= 0)) is partially proven to be inductive.\nloop invariant (i >= y ==> (i == y ==> (i == y))) is partially proven to be inductive.\nloop invariant (i >= y ==> (i == y ==> (i == y ==> (i == y)))) is partially proven to be inductive.\nloop invariant (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y))))) is partially proven to be inductive.\nloop invariant (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y ==> (i == y)))))) is partially proven to be inductive.\nloop invariant i < y is partially proven to be inductive.\nloop invariant i == y is partially proven to be inductive.\nloop invariant x >= i * (i - 1) / 2 is partially proven to be inductive.\nloop invariant y >= i is partially proven to be inductive.\nloop invariant (y >= 1 ==> 0 <= i < y) is partially proven to be inductive.\nloop invariant (y >= 1 ==> i < y) is partially proven to be inductive.\nloop invariant (y >= 1 ==> i >= 0) is partially proven to be inductive.\nloop invariant (y >= 1 ==> (0 <= i) ==> (0 <= i) && (i < y) && (i >= 0)) is partially proven to be inductive.\nloop invariant (y >= 1 ==> (i < y) ==> (0 <= i) && (i < y) && (i >= 0)) is partially proven to be inductive.\nloop invariant (y >= 1 ==> (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0)) is partially proven to be inductive.\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0)) is partially proven to be inductive.\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0)) is partially proven to be inductive.\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y)) is partially proven to be inductive.\nloop invariant (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i)) is partially proven to be inductive.\nloop invariant 0 <= i <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (i - 1) * i / 2) is partially proven to be inductive.\nAssertion 0 <= i: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i <= y;\nloop invariant i3: i >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= y;\nloop invariant i6: (i < y) ==> (i >= 0);\nloop invariant i7: (i < y) ==> (i <= y);\nloop invariant i8: (i < y) ==> (i < y);\nloop invariant i9: (i < y) ==> (i == i);\nloop invariant i10: 0 <= i <= y; loop invariant 0 <= x; loop invariant 0 <= y; loop invariant x >= y; loop invariant y >= 0; loop invariant i >= 0;\nloop invariant i11: i <= y ==> x >= (y - i) + y;\nloop invariant i12: x >= 0;\nloop invariant i13: i >= y;\nloop invariant i14: 0 <= i < y;\nloop invariant i15: x >= i;\nloop invariant i16: (i < y ==> (i <= x));\nloop invariant i17: (i < y ==> (i >= 0));\nloop invariant i18: (i >= y ==> (i == y));\nloop invariant i19: (i >= y ==> (i >= 0));\nloop invariant i20: (i >= y ==> (i == y ==> (i == y)));\nloop invariant i21: (i >= y ==> (i == y ==> (i == y ==> (i == y))));\nloop invariant i22: (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y)))));\nloop invariant i23: (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y ==> (i == y))))));\nloop invariant i24: i < y;\nloop invariant i25: i == y;\nloop invariant i26: x >= i * (i - 1) / 2;\nloop invariant i27: y >= i;\nloop invariant i28: (y >= 1 ==> 0 <= i < y);\nloop invariant i29: (y >= 1 ==> i < y);\nloop invariant i30: (y >= 1 ==> i >= 0);\nloop invariant i31: (y >= 1 ==> (0 <= i) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant i32: (y >= 1 ==> (i < y) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant i33: (y >= 1 ==> (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant i34: (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant i35: (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant i36: (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant i37: (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\nloop invariant i38: 0 <= i <= 100000;\nloop invariant i39: x >= (1 + (i - 1) * i / 2);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i <= y;\nloop invariant i3: i >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= y;\nloop invariant i6: (i < y) ==> (i >= 0);\nloop invariant i7: (i < y) ==> (i <= y);\nloop invariant i8: (i < y) ==> (i < y);\nloop invariant i9: (i < y) ==> (i == i);\nloop invariant i10: 0 <= i <= y; loop invariant 0 <= x; loop invariant 0 <= y; loop invariant x >= y; loop invariant y >= 0; loop invariant i >= 0;\n\nloop invariant i12: x >= 0;\n\n\nloop invariant i15: x >= i;\nloop invariant i16: (i < y ==> (i <= x));\nloop invariant i17: (i < y ==> (i >= 0));\nloop invariant i18: (i >= y ==> (i == y));\nloop invariant i19: (i >= y ==> (i >= 0));\nloop invariant i20: (i >= y ==> (i == y ==> (i == y)));\nloop invariant i21: (i >= y ==> (i == y ==> (i == y ==> (i == y))));\nloop invariant i22: (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y)))));\nloop invariant i23: (i >= y ==> (i == y ==> (i == y ==> (i == y ==> (i == y ==> (i == y))))));\n\n\n\nloop invariant i27: y >= i;\n\n\nloop invariant i30: (y >= 1 ==> i >= 0);\n\nloop invariant i32: (y >= 1 ==> (i < y) ==> (0 <= i) && (i < y) && (i >= 0));\n\n\nloop invariant i35: (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y) && (i >= 0));\nloop invariant i36: (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i) && (i < y));\nloop invariant i37: (y >= 1 ==> (0 <= i) && (i < y) && (i >= 0) ==> (0 <= i));\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c"
        ],
        "skipped": [],
        "total": 65,
        "success_count": 56,
        "failure_count": 9,
        "success_rate": 0.8615384615384616
    }
}