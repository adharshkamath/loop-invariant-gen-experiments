{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/59.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c >= 1);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c != n ==> (c == 1);\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c == n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c == n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c >= 1;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n - 1;\nloop invariant v1 is trivially true;\nloop invariant v2 is trivially true;\nloop invariant v3 is trivially true;\nloop invariant unknown is trivially true;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c != n) ==> (c < n);\nloop invariant unknown ==> c == n;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= c <= n;\nloop invariant 1 <= n;\nloop invariant (c == 0) ==> (n > 0);\nloop invariant (c == 1) ==> (c <= n);\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant if (c == n), then c == 1;\nloop invariant if (c != n), then c <= n;\nloop invariant if (c == n), then c != 0;\nloop invariant if (c != n), then c >= 0;\nloop invariant if (c != n), then c != 1;\nloop invariant if (c != n), then c != n;\nloop invariant if (c == n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\n*/\n```",
            "```\n/*@\nloop invariant ( c + 1 <= n || c == n ) ;\nloop invariant ( c <= n ) ;\nloop invariant ( c == n || c < n ) ;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c != n ==> (c <= n);\nloop invariant c != n ==> (c >= 1);\nloop invariant c != n ==> (c >= 1);\nloop invariant c == n ==> (c == 1);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c >= 1;\nloop invariant c >= n;\nloop invariant c >= n + 1;\nloop invariant c >= n + 2;\nloop invariant c >= n + 3;\nloop invariant c >= n + 4;\nloop invariant c >= n + 5;\nloop invariant c >= n + 6;\nloop invariant c >= n + 7;\nloop invariant c >= n + 8;\nloop invariant c >= n + 9;\nloop invariant c >= n + 10;\nloop invariant c >= n + 11;\nloop invariant c >= n + 12;\nloop invariant c >= n + 13;\nloop invariant c >= n + 14;\nloop invariant c >= n + 15;\nloop invariant c >= n + 16;\nloop invariant c >= n + 17;\nloop invariant c >= n + 18;\nloop invariant c >= n + 19;\nloop invariant c >= n + 20;\nloop invariant c >= n + 21;\nloop invariant c >= n + 22;\nloop invariant c >= n + 23;\nloop invariant c >= n + 24;\nloop invariant c >= n + 25;\nloop invariant c >= n + 26;\nloop invariant c >= n + 27;\nloop invariant c >= n + 28;\nloop invariant c >= n + 29;\nloop invariant c >= n + 30;\nloop invariant c >= n + 31;\nloop invariant c >= n + 32;\nloop invariant c >= n + 33;\nloop invariant c >= n + 34;\nloop invariant c >= n + 35;\nloop invariant c >= n + 36;\nloop invariant c >= n + 37;\nloop invariant c >= n + 38;\nloop invariant c >= n + 39;\nloop invariant c >= n + 40;\nloop invariant c >= n + 41;\nloop invariant c >= n + 42;\nloop invariant c >= n + 43;\nloop invariant c >= n + 44;\nloop invariant c >= n + 45;\nloop invariant c >= n + 46;\nloop invariant c >= n + 47;\nloop invariant c >= n + 48;\nloop invariant c >= n + 49;\nloop invariant c >= n + 50;\nloop invariant c >= n + 51;\nloop invariant c >= n + 52;\nloop invariant c >= n + 53;\nloop invariant c >= n + 54;\nloop invariant c >= n + 55;\nloop invariant c >= n + 56;\nloop invariant c >= n + 57;\nloop invariant c >= n + 58;\nloop invariant c >= n + 59;\nloop invariant c >= n + 60;\nloop invariant c >= n + 61;\nloop invariant c >= n + 62;\nloop invariant c >= n + 63;\nloop invariant c >= n + 64;\nloop invariant c >= n + 65;\nloop invariant c >= n + 66;\nloop invariant c >= n + 67;\nloop invariant c >= n + 68;\nloop invariant c >= n + 69;\nloop invariant c >= n + 70;\nloop invariant c >= n + 71;\nloop invariant c >= n + 72;\nloop invariant c >= n + 73;\nloop invariant c >= n + 74;\nloop invariant c >= n + 75;\nloop invariant c >= n + 76;\nloop invariant c >= n + 77;\nloop invariant c >= n + 78;\nloop invariant c >= n + 79;\nloop invariant c >= n + 80;\nloop invariant c >= n + 81;\nloop invariant c >= n + 82;\nloop invariant c >= n + 83;\nloop invariant c >= n + 84;\nloop invariant c >= n + 85;\nloop invariant c >= n + 86;\nloop invariant c >= n + 87;\nloop invariant c >= n + 88;\nloop invariant c >= n + 89;\nloop invariant c >= n + 90;\nloop invariant c >= n + 91;\nloop invariant c >= n + 92;\nloop invariant c >= n + 93;\nloop invariant c >= n + 94;\nloop invariant c >= n + 95;\nloop invariant c >= n + 96;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n >= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c >= 1);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c == 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c <= n - 1);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c == n) ==> (c < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c == n) ==> (c >= 1);\nloop invariant i3: (c != n) ==> (c >= 0);\nloop invariant i4: (c == n) ==> (c <= n);\nloop invariant i5: (c != n) ==> (c <= n - 1);\nloop invariant i6: (c == n) ==> (c > 0);\n\n\nloop invariant i9: (c != n) ==> (c < n);\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c != n ==> (c == 1);\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\nloop invariant i4: c == n ==> c == n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c == n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\nloop invariant (c != n) ==> (c == c);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: (c == n) ==> (c == n);\n\nloop invariant i4: (c != n) ==> (c >= 0);\nloop invariant i5: (c != n) ==> (c == c);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c >= 1;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n - 1;\nloop invariant v1 is trivially true;\nloop invariant v2 is trivially true;\nloop invariant v3 is trivially true;\nloop invariant unknown is trivially true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c <= n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c != n) ==> (c < n);\nloop invariant unknown ==> c == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= c <= n;\nloop invariant 1 <= n;\nloop invariant (c == 0) ==> (n > 0);\nloop invariant (c == 1) ==> (c <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\nloop invariant i5: 0 <= c <= n;\nloop invariant i6: 1 <= n;\nloop invariant i7: (c == 0) ==> (n > 0);\nloop invariant i8: (c == 1) ==> (c <= n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant if (c == n), then c == 1;\nloop invariant if (c != n), then c <= n;\nloop invariant if (c == n), then c != 0;\nloop invariant if (c != n), then c >= 0;\nloop invariant if (c != n), then c != 1;\nloop invariant if (c != n), then c != n;\nloop invariant if (c == n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\nloop invariant if (c != n), then c != n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( c + 1 <= n || c == n ) ;\nloop invariant ( c <= n ) ;\nloop invariant ( c == n || c < n ) ;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: ( c + 1 <= n || c == n ) ;\nloop invariant i2: ( c <= n ) ;\nloop invariant i3: ( c == n || c < n ) ;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c != n ==> (c <= n);\nloop invariant c != n ==> (c >= 1);\nloop invariant c != n ==> (c >= 1);\nloop invariant c == n ==> (c == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 102,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c <= 2 * n;\nloop invariant c >= 0;\nloop invariant c >= 1;\nloop invariant c >= n;\nloop invariant c >= n + 1;\nloop invariant c >= n + 2;\nloop invariant c >= n + 3;\nloop invariant c >= n + 4;\nloop invariant c >= n + 5;\nloop invariant c >= n + 6;\nloop invariant c >= n + 7;\nloop invariant c >= n + 8;\nloop invariant c >= n + 9;\nloop invariant c >= n + 10;\nloop invariant c >= n + 11;\nloop invariant c >= n + 12;\nloop invariant c >= n + 13;\nloop invariant c >= n + 14;\nloop invariant c >= n + 15;\nloop invariant c >= n + 16;\nloop invariant c >= n + 17;\nloop invariant c >= n + 18;\nloop invariant c >= n + 19;\nloop invariant c >= n + 20;\nloop invariant c >= n + 21;\nloop invariant c >= n + 22;\nloop invariant c >= n + 23;\nloop invariant c >= n + 24;\nloop invariant c >= n + 25;\nloop invariant c >= n + 26;\nloop invariant c >= n + 27;\nloop invariant c >= n + 28;\nloop invariant c >= n + 29;\nloop invariant c >= n + 30;\nloop invariant c >= n + 31;\nloop invariant c >= n + 32;\nloop invariant c >= n + 33;\nloop invariant c >= n + 34;\nloop invariant c >= n + 35;\nloop invariant c >= n + 36;\nloop invariant c >= n + 37;\nloop invariant c >= n + 38;\nloop invariant c >= n + 39;\nloop invariant c >= n + 40;\nloop invariant c >= n + 41;\nloop invariant c >= n + 42;\nloop invariant c >= n + 43;\nloop invariant c >= n + 44;\nloop invariant c >= n + 45;\nloop invariant c >= n + 46;\nloop invariant c >= n + 47;\nloop invariant c >= n + 48;\nloop invariant c >= n + 49;\nloop invariant c >= n + 50;\nloop invariant c >= n + 51;\nloop invariant c >= n + 52;\nloop invariant c >= n + 53;\nloop invariant c >= n + 54;\nloop invariant c >= n + 55;\nloop invariant c >= n + 56;\nloop invariant c >= n + 57;\nloop invariant c >= n + 58;\nloop invariant c >= n + 59;\nloop invariant c >= n + 60;\nloop invariant c >= n + 61;\nloop invariant c >= n + 62;\nloop invariant c >= n + 63;\nloop invariant c >= n + 64;\nloop invariant c >= n + 65;\nloop invariant c >= n + 66;\nloop invariant c >= n + 67;\nloop invariant c >= n + 68;\nloop invariant c >= n + 69;\nloop invariant c >= n + 70;\nloop invariant c >= n + 71;\nloop invariant c >= n + 72;\nloop invariant c >= n + 73;\nloop invariant c >= n + 74;\nloop invariant c >= n + 75;\nloop invariant c >= n + 76;\nloop invariant c >= n + 77;\nloop invariant c >= n + 78;\nloop invariant c >= n + 79;\nloop invariant c >= n + 80;\nloop invariant c >= n + 81;\nloop invariant c >= n + 82;\nloop invariant c >= n + 83;\nloop invariant c >= n + 84;\nloop invariant c >= n + 85;\nloop invariant c >= n + 86;\nloop invariant c >= n + 87;\nloop invariant c >= n + 88;\nloop invariant c >= n + 89;\nloop invariant c >= n + 90;\nloop invariant c >= n + 91;\nloop invariant c >= n + 92;\nloop invariant c >= n + 93;\nloop invariant c >= n + 94;\nloop invariant c >= n + 95;\nloop invariant c >= n + 96;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\nloop invariant i4: c >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: n >= 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 43: unexpected token 'is'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c == n) ==> (c >= 1);\nloop invariant i3: (c != n) ==> (c >= 0);\nloop invariant i4: (c == n) ==> (c <= n);\nloop invariant i5: (c != n) ==> (c <= n - 1);\nloop invariant i6: (c == n) ==> (c > 0);\nloop invariant i7: (c != n) ==> (c > 0);\nloop invariant i8: (c == n) ==> (c < n);\nloop invariant i9: (c != n) ==> (c < n);\nloop invariant i10: (c == n) ==> (c == 1);\nloop invariant i11: (c != n) ==> (c == 0);\nloop invariant i12: c != n ==> (c == 1);\nloop invariant i13: c != n ==> c <= n;\nloop invariant i14: c == n ==> c == n;\nloop invariant i15: 1 <= c <= n;\nloop invariant i16: c <= n;\nloop invariant i17: (c == n) ==> (c == n);\nloop invariant i18: (c != n) ==> (c <= n);\nloop invariant i19: (c != n) ==> (c == c);\nloop invariant i20: c == n ==> c == 1;\nloop invariant i21: c != n ==> c >= 1;\nloop invariant i22: c != n ==> c <= n - 1;\nloop invariant i23: v1 is trivially true;\nloop invariant i24: v2 is trivially true;\nloop invariant i25: v3 is trivially true;\nloop invariant i26: unknown is trivially true;\nloop invariant i27: 0 <= c;\nloop invariant i28: c <= n + 1;\nloop invariant i29: unknown ==> c == n;\nloop invariant i30: i1;\nloop invariant i31: i2;\nloop invariant i32: 0 <= y <= 100000;\nloop invariant i33: x >= (1 + (y - 1) * y / 2);\nloop invariant i34: 1 <= n;\nloop invariant i35: (c == 0) ==> (n > 0);\nloop invariant i36: (c == 1) ==> (c <= n);\nloop invariant i37: c >= 0;\nloop invariant i38: if (c == n), then c == 1;\nloop invariant i39: if (c != n), then c <= n;\nloop invariant i40: if (c == n), then c != 0;\nloop invariant i41: if (c != n), then c >= 0;\nloop invariant i42: if (c != n), then c != 1;\nloop invariant i43: if (c != n), then c != n;\nloop invariant i44: if (c == n), then c != n;\nloop invariant i45: ( c + 1 <= n || c == n ) ;\nloop invariant i46: ( c <= n ) ;\nloop invariant i47: ( c == n || c < n ) ;\nloop invariant i48: c != n ==> c < n;\nloop invariant i49: c >= 1;\nloop invariant i50: c != n ==> (c <= n);\nloop invariant i51: c != n ==> (c >= 1);\nloop invariant i52: c == n ==> (c == 1);\nloop invariant i53: c <= 2 * n;\nloop invariant i54: c >= n;\nloop invariant i55: c >= n + 1;\nloop invariant i56: c >= n + 2;\nloop invariant i57: c >= n + 3;\nloop invariant i58: c >= n + 4;\nloop invariant i59: c >= n + 5;\nloop invariant i60: c >= n + 6;\nloop invariant i61: c >= n + 7;\nloop invariant i62: c >= n + 8;\nloop invariant i63: c >= n + 9;\nloop invariant i64: c >= n + 10;\nloop invariant i65: c >= n + 11;\nloop invariant i66: c >= n + 12;\nloop invariant i67: c >= n + 13;\nloop invariant i68: c >= n + 14;\nloop invariant i69: c >= n + 15;\nloop invariant i70: c >= n + 16;\nloop invariant i71: c >= n + 17;\nloop invariant i72: c >= n + 18;\nloop invariant i73: c >= n + 19;\nloop invariant i74: c >= n + 20;\nloop invariant i75: c >= n + 21;\nloop invariant i76: c >= n + 22;\nloop invariant i77: c >= n + 23;\nloop invariant i78: c >= n + 24;\nloop invariant i79: c >= n + 25;\nloop invariant i80: c >= n + 26;\nloop invariant i81: c >= n + 27;\nloop invariant i82: c >= n + 28;\nloop invariant i83: c >= n + 29;\nloop invariant i84: c >= n + 30;\nloop invariant i85: c >= n + 31;\nloop invariant i86: c >= n + 32;\nloop invariant i87: c >= n + 33;\nloop invariant i88: c >= n + 34;\nloop invariant i89: c >= n + 35;\nloop invariant i90: c >= n + 36;\nloop invariant i91: c >= n + 37;\nloop invariant i92: c >= n + 38;\nloop invariant i93: c >= n + 39;\nloop invariant i94: c >= n + 40;\nloop invariant i95: c >= n + 41;\nloop invariant i96: c >= n + 42;\nloop invariant i97: c >= n + 43;\nloop invariant i98: c >= n + 44;\nloop invariant i99: c >= n + 45;\nloop invariant i100: c >= n + 46;\nloop invariant i101: c >= n + 47;\nloop invariant i102: c >= n + 48;\nloop invariant i103: c >= n + 49;\nloop invariant i104: c >= n + 50;\nloop invariant i105: c >= n + 51;\nloop invariant i106: c >= n + 52;\nloop invariant i107: c >= n + 53;\nloop invariant i108: c >= n + 54;\nloop invariant i109: c >= n + 55;\nloop invariant i110: c >= n + 56;\nloop invariant i111: c >= n + 57;\nloop invariant i112: c >= n + 58;\nloop invariant i113: c >= n + 59;\nloop invariant i114: c >= n + 60;\nloop invariant i115: c >= n + 61;\nloop invariant i116: c >= n + 62;\nloop invariant i117: c >= n + 63;\nloop invariant i118: c >= n + 64;\nloop invariant i119: c >= n + 65;\nloop invariant i120: c >= n + 66;\nloop invariant i121: c >= n + 67;\nloop invariant i122: c >= n + 68;\nloop invariant i123: c >= n + 69;\nloop invariant i124: c >= n + 70;\nloop invariant i125: c >= n + 71;\nloop invariant i126: c >= n + 72;\nloop invariant i127: c >= n + 73;\nloop invariant i128: c >= n + 74;\nloop invariant i129: c >= n + 75;\nloop invariant i130: c >= n + 76;\nloop invariant i131: c >= n + 77;\nloop invariant i132: c >= n + 78;\nloop invariant i133: c >= n + 79;\nloop invariant i134: c >= n + 80;\nloop invariant i135: c >= n + 81;\nloop invariant i136: c >= n + 82;\nloop invariant i137: c >= n + 83;\nloop invariant i138: c >= n + 84;\nloop invariant i139: c >= n + 85;\nloop invariant i140: c >= n + 86;\nloop invariant i141: c >= n + 87;\nloop invariant i142: c >= n + 88;\nloop invariant i143: c >= n + 89;\nloop invariant i144: c >= n + 90;\nloop invariant i145: c >= n + 91;\nloop invariant i146: c >= n + 92;\nloop invariant i147: c >= n + 93;\nloop invariant i148: c >= n + 94;\nloop invariant i149: c >= n + 95;\nloop invariant i150: c >= n + 96;\nloop invariant i151: n >= 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 124,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c == n) ==> (c >= 1);\nloop invariant i3: (c != n) ==> (c >= 0);\nloop invariant i4: (c == n) ==> (c <= n);\nloop invariant i5: (c != n) ==> (c <= n - 1);\nloop invariant i6: (c == n) ==> (c > 0);\n\n\nloop invariant i9: (c != n) ==> (c < n);\n\n\n\nloop invariant i13: c != n ==> c <= n;\nloop invariant i14: c == n ==> c == n;\n\nloop invariant i16: c <= n;\nloop invariant i17: (c == n) ==> (c == n);\nloop invariant i18: (c != n) ==> (c <= n);\nloop invariant i19: (c != n) ==> (c == c);\n\n\nloop invariant i22: c != n ==> c <= n - 1;\n\n\n\n\nloop invariant i27: 0 <= c;\nloop invariant i28: c <= n + 1;\n\n\n\n\n\nloop invariant i34: 1 <= n;\nloop invariant i35: (c == 0) ==> (n > 0);\nloop invariant i36: (c == 1) ==> (c <= n);\nloop invariant i37: c >= 0;\n\n\n\n\n\n\n\nloop invariant i45: ( c + 1 <= n || c == n ) ;\nloop invariant i46: ( c <= n ) ;\nloop invariant i47: ( c == n || c < n ) ;\nloop invariant i48: c != n ==> c < n;\n\nloop invariant i50: c != n ==> (c <= n);\n\n\nloop invariant i53: c <= 2 * n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i151: n >= 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 52,
        "success_count": 48,
        "failure_count": 4,
        "success_rate": 0.9230769230769231
    }
}