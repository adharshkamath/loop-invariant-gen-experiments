{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  while (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x == y;\nloop invariant x >= unknown_int();\nloop invariant y >= unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant y >= x;\nloop invariant x <= y;\nloop invariant y == x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= INT_MAX;\nloop invariant x <= INT_MAX;\nloop invariant unknown_int() == x;\nloop invariant unknown_int() == y;\nloop invariant unknown_bool() == (x == y);\nloop invariant unknown_bool() == (x <= y);\nloop invariant unknown_bool() == (x >= y);\nloop invariant x == y ==> unknown_bool();\nloop invariant unknown_bool() ==> (x == y);\nloop invariant unknown_bool() ==> (x <= y);\nloop invariant unknown_bool() ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (x <= y);\nloop invariant unknown_bool() ==> (x == y) ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y == x);\nloop invariant unknown_bool() ==> (x == y) ==> (y >= x);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x);\nloop invariant unknown_bool() ==> (x == y) ==> (y >= x) ==> (y <= x);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x <= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x <= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x <= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x <= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y);\n*/\n```",
            "```\n/*@\nloop invariant y >= x;\nloop invariant x >= y;\nloop invariant x == y ==> x >= 0 && x <= INT_MAX;\nloop invariant x == y ==> y >= 0 && y <= INT_MAX;\nloop invariant x == y ==> x >= y;\nloop invariant x == y ==> y >= x;\nloop invariant x == y ==> x == y;\nloop invariant x == y ==> y == x;\nloop invariant x == y ==> x == y && y == x;\nloop invariant x == y ==> x == y && y == x && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\n*/\n```",
            "```\n/*@\nloop invariant y >= x;loop invariant y >= y - 1;loop invariant x <= x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant x <= y;\nloop invariant x == (y - 1);\nloop invariant y == (x + 1);\nloop invariant x == y - 1 ==> (x == y - 1);\nloop invariant y == x + 1 ==> (y == x + 1);\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= y - 1;\nloop invariant y >= x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 1;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2 ^ 31 - 1;\nloop invariant 1 <= y <= 2 ^ 31 - 1;\nloop invariant x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x == y;\nloop invariant unknown_bool() ==> x == y;\nloop invariant unknown_bool() ==> 0 <= x;\nloop invariant unknown_bool() ==> 0 <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x <= y;\nloop invariant y - x <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x == y;\nloop invariant x == y + (iteration count);\nloop invariant iteration count <= (INT_MAX - 1);\nloop invariant unknown_bool() ==> (iteration count == 0);\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x == y;\nloop invariant x == y + (iteration count);\nloop invariant iteration count <= (INT_MAX - 1);\nloop invariant unknown_bool() ==> (iteration count == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x; loop invariant 1 <= y; loop invariant y >= x; loop invariant x == y ==> y >= x; loop invariant x == y ==> y <= x; loop invariant x == y ==> y == x; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant x == y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x == y;\nloop invariant x >= unknown_int();\nloop invariant y >= unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\nloop invariant i1: x == y;\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\n\nloop invariant i2: x >= y;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 31,
                "annotations": "```\n/*@\nloop invariant y >= x;\nloop invariant x <= y;\nloop invariant y == x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= INT_MAX;\nloop invariant x <= INT_MAX;\nloop invariant unknown_int() == x;\nloop invariant unknown_int() == y;\nloop invariant unknown_bool() == (x == y);\nloop invariant unknown_bool() == (x <= y);\nloop invariant unknown_bool() == (x >= y);\nloop invariant x == y ==> unknown_bool();\nloop invariant unknown_bool() ==> (x == y);\nloop invariant unknown_bool() ==> (x <= y);\nloop invariant unknown_bool() ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (x <= y);\nloop invariant unknown_bool() ==> (x == y) ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y == x);\nloop invariant unknown_bool() ==> (x == y) ==> (y >= x);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x);\nloop invariant unknown_bool() ==> (x == y) ==> (y >= x) ==> (y <= x);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x <= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x <= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x <= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x <= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y);\nloop invariant unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\nloop invariant i1: y >= x;\nloop invariant i2: x <= y;\nloop invariant i3: y == x;\n\n\nloop invariant i6: y <= INT_MAX;\nloop invariant i7: x <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y >= x;\nloop invariant x >= y;\nloop invariant x == y ==> x >= 0 && x <= INT_MAX;\nloop invariant x == y ==> y >= 0 && y <= INT_MAX;\nloop invariant x == y ==> x >= y;\nloop invariant x == y ==> y >= x;\nloop invariant x == y ==> x == y;\nloop invariant x == y ==> y == x;\nloop invariant x == y ==> x == y && y == x;\nloop invariant x == y ==> x == y && y == x && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\nloop invariant i1: y >= x;\nloop invariant i2: x >= y;\n\n\nloop invariant i5: x == y ==> x >= y;\nloop invariant i6: x == y ==> y >= x;\nloop invariant i7: x == y ==> x == y;\nloop invariant i8: x == y ==> y == x;\nloop invariant i9: x == y ==> x == y && y == x;\nloop invariant i10: x == y ==> x == y && y == x && x == y;\nloop invariant i11: x == y ==> x == y && y == x && x == y && x == y;\nloop invariant i12: x == y ==> x == y && y == x && x == y && x == y && x == y;\nloop invariant i13: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y;\nloop invariant i14: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y;\nloop invariant i15: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i16: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i17: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i18: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i19: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i20: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i21: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i22: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i23: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i24: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i25: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i26: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y >= x;loop invariant y >= y - 1;loop invariant x <= x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\nloop invariant i1: y >= x;loop invariant y >= y - 1;loop invariant x <= x + 1;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant x <= y;\nloop invariant x == (y - 1);\nloop invariant y == (x + 1);\nloop invariant x == y - 1 ==> (x == y - 1);\nloop invariant y == x + 1 ==> (y == x + 1);\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\nloop invariant x == y - 1 ==> x == y - 1;\nloop invariant y == x + 1 ==> y == x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\n\n\nloop invariant i3: x <= y;\n\n\nloop invariant i6: x == y - 1 ==> (x == y - 1);\nloop invariant i7: y == x + 1 ==> (y == x + 1);\nloop invariant i8: x == y - 1 ==> x == y - 1;\nloop invariant i9: y == x + 1 ==> y == x + 1;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= y - 1;\nloop invariant y >= x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\n\nloop invariant i2: x >= y - 1;\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= 1;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2 ^ 31 - 1;\nloop invariant 1 <= y <= 2 ^ 31 - 1;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\n\n\nloop invariant i3: x == y;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x == y;\nloop invariant unknown_bool() ==> x == y;\nloop invariant unknown_bool() ==> 0 <= x;\nloop invariant unknown_bool() ==> 0 <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\n\n\nloop invariant i3: x == y;\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x <= y;\nloop invariant y - x <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\nloop invariant i1: x <= y;\nloop invariant i2: y - x <= 1;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x == y;\nloop invariant x == y + (iteration count);\nloop invariant iteration count <= (INT_MAX - 1);\nloop invariant unknown_bool() ==> (iteration count == 0);\nloop invariant 0 <= x <= INT_MAX;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x == y;\nloop invariant x == y + (iteration count);\nloop invariant iteration count <= (INT_MAX - 1);\nloop invariant unknown_bool() ==> (iteration count == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\n\n\nloop invariant i3: x == y;\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x; loop invariant 1 <= y; loop invariant y >= x; loop invariant x == y ==> y >= x; loop invariant x == y ==> y <= x; loop invariant x == y ==> y == x; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\n\n\nloop invariant i3: x == y;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= unknown_int();\nloop invariant i3: y >= unknown_int();\nloop invariant i4: 0 <= y <= x;\nloop invariant i5: x >= y;\nloop invariant i6: y >= x;\nloop invariant i7: x <= y;\nloop invariant i8: y == x;\nloop invariant i9: y >= 0;\nloop invariant i10: x >= 0;\nloop invariant i11: y <= INT_MAX;\nloop invariant i12: x <= INT_MAX;\nloop invariant i13: unknown_int() == x;\nloop invariant i14: unknown_int() == y;\nloop invariant i15: unknown_bool() == (x == y);\nloop invariant i16: unknown_bool() == (x <= y);\nloop invariant i17: unknown_bool() == (x >= y);\nloop invariant i18: x == y ==> unknown_bool();\nloop invariant i19: unknown_bool() ==> (x == y);\nloop invariant i20: unknown_bool() ==> (x <= y);\nloop invariant i21: unknown_bool() ==> (x >= y);\nloop invariant i22: unknown_bool() ==> (x == y) ==> (x <= y);\nloop invariant i23: unknown_bool() ==> (x == y) ==> (x >= y);\nloop invariant i24: unknown_bool() ==> (x == y) ==> (y == x);\nloop invariant i25: unknown_bool() ==> (x == y) ==> (y >= x);\nloop invariant i26: unknown_bool() ==> (x == y) ==> (y <= x);\nloop invariant i27: unknown_bool() ==> (x == y) ==> (y >= x) ==> (y <= x);\nloop invariant i28: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x);\nloop invariant i29: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x);\nloop invariant i30: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x <= y);\nloop invariant i31: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y);\nloop invariant i32: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y);\nloop invariant i33: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x <= y);\nloop invariant i34: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y);\nloop invariant i35: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y);\nloop invariant i36: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x <= y);\nloop invariant i37: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y);\nloop invariant i38: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y);\nloop invariant i39: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x <= y);\nloop invariant i40: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y);\nloop invariant i41: unknown_bool() ==> (x == y) ==> (y <= x) ==> (y >= x) ==> (y == x) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y) ==> (x >= y) ==> (x == y);\nloop invariant i42: x == y ==> x >= 0 && x <= INT_MAX;\nloop invariant i43: x == y ==> y >= 0 && y <= INT_MAX;\nloop invariant i44: x == y ==> x >= y;\nloop invariant i45: x == y ==> y >= x;\nloop invariant i46: x == y ==> x == y;\nloop invariant i47: x == y ==> y == x;\nloop invariant i48: x == y ==> x == y && y == x;\nloop invariant i49: x == y ==> x == y && y == x && x == y;\nloop invariant i50: x == y ==> x == y && y == x && x == y && x == y;\nloop invariant i51: x == y ==> x == y && y == x && x == y && x == y && x == y;\nloop invariant i52: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y;\nloop invariant i53: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y;\nloop invariant i54: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i55: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i56: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i57: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i58: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i59: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i60: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i61: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i62: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i63: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i64: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i65: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i66: y >= x;loop invariant y >= y - 1;loop invariant x <= x + 1;\nloop invariant i67: 0 <= x <= 2147483647;\nloop invariant i68: 0 <= y <= 2147483647;\nloop invariant i69: x == (y - 1);\nloop invariant i70: y == (x + 1);\nloop invariant i71: x == y - 1 ==> (x == y - 1);\nloop invariant i72: y == x + 1 ==> (y == x + 1);\nloop invariant i73: x == y - 1 ==> x == y - 1;\nloop invariant i74: y == x + 1 ==> y == x + 1;\nloop invariant i75: 0 <= x <= y;\nloop invariant i76: x >= y - 1;\nloop invariant i77: y >= x + 1;\nloop invariant i78: 0 <= y <= 100000;\nloop invariant i79: x >= (1 + (y - 1) * y / 2);\nloop invariant i80: x >= 1;\nloop invariant i81: 1 <= x <= 2 ^ 31 - 1;\nloop invariant i82: 1 <= y <= 2 ^ 31 - 1;\nloop invariant i83: 0 <= x;\nloop invariant i84: 0 <= y;\nloop invariant i85: unknown_bool() ==> x == y;\nloop invariant i86: unknown_bool() ==> 0 <= x;\nloop invariant i87: unknown_bool() ==> 0 <= y;\nloop invariant i88: y - x <= 1;\nloop invariant i89: 0 <= x <= INT_MAX;\nloop invariant i90: 0 <= y <= INT_MAX;\nloop invariant i91: x == y + (iteration count);\nloop invariant i92: iteration count <= (INT_MAX - 1);\nloop invariant i93: unknown_bool() ==> (iteration count == 0);\nloop invariant i94: 1 <= x; loop invariant 1 <= y; loop invariant y >= x; loop invariant x == y ==> y >= x; loop invariant x == y ==> y <= x; loop invariant x == y ==> y == x; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y; loop invariant x == y ==> x == y;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 52,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  /*@\nloop invariant i1: x == y;\n\n\n\nloop invariant i5: x >= y;\nloop invariant i6: y >= x;\nloop invariant i7: x <= y;\nloop invariant i8: y == x;\n\n\nloop invariant i11: y <= INT_MAX;\nloop invariant i12: x <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i44: x == y ==> x >= y;\nloop invariant i45: x == y ==> y >= x;\nloop invariant i46: x == y ==> x == y;\nloop invariant i47: x == y ==> y == x;\nloop invariant i48: x == y ==> x == y && y == x;\nloop invariant i49: x == y ==> x == y && y == x && x == y;\nloop invariant i50: x == y ==> x == y && y == x && x == y && x == y;\nloop invariant i51: x == y ==> x == y && y == x && x == y && x == y && x == y;\nloop invariant i52: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y;\nloop invariant i53: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y;\nloop invariant i54: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i55: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i56: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i57: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i58: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i59: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i60: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i61: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i62: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i63: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i64: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i65: x == y ==> x == y && y == x && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y && x == y;\nloop invariant i66: y >= x;loop invariant y >= y - 1;loop invariant x <= x + 1;\n\n\n\n\nloop invariant i71: x == y - 1 ==> (x == y - 1);\nloop invariant i72: y == x + 1 ==> (y == x + 1);\nloop invariant i73: x == y - 1 ==> x == y - 1;\nloop invariant i74: y == x + 1 ==> y == x + 1;\n\nloop invariant i76: x >= y - 1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i88: y - x <= 1;\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c"
        ],
        "skipped": [],
        "total": 149,
        "success_count": 132,
        "failure_count": 17,
        "success_rate": 0.8859060402684564
    }
}