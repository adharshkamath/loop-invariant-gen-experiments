{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/93.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  while ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x <= 3 * n;\nloop invariant y <= 3 * n;\nloop invariant (2 * i) + 1 <= (x + y);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == 3 * i;\nloop invariant x + y == 3 * n;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 2 * n;\nloop invariant 0 <= y <= 2 * n;\nloop invariant (x + y) <= (3 * n);\nloop invariant ((x + y) == (3 * i));\nloop invariant (x == (i + y));\nloop invariant (y == (i + x));\nloop invariant (x + y) == (3 * i);\nloop invariant x + y == 3 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y == 3 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= n;\nloop invariant x + y == (2 * i);\nloop invariant x + y == (3 * n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= n;\nloop invariant (x + y) <= (2*n);\nloop invariant (x + y) >= (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2 * n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant (x + y) >= (n + y);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant (x + y) % 3 == 0;\nloop invariant (x + y) / 3 == n;\nloop invariant (x >= 2 * i);\nloop invariant (y >= i);\nloop invariant (x + y) == (i + 1) * (x / (i + 1));\nloop invariant (x + y) == (i + 1) * (y / (i + 1));\nloop invariant (x + y) == (i + 1) * (x / (i + 1)) + (i + 1) * (y / (i + 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (3 * i) <= (x + y);\nloop invariant (3 * (i + 1)) >= (x + y);\nloop invariant (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y == 3 * n;\nloop invariant (x + y) == (3 * n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= (2 * n);\nloop invariant ((x + y) == (3 * n));\nloop invariant (i == 0 ==> (x == 0 && y == 0));\nloop invariant (i == n ==> (x == (2 * n) && y == (2 * n)));\nloop invariant (unknown() ==> (x == (i + 1) && y == (2 * i)));\nloop invariant (!unknown() ==> (x == (2 * i) && y == (i + 1)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= (2 * n);\nloop invariant (x + y) == (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3*n;\nloop invariant 0 <= y <= 3*n;\nloop invariant x + y == 3*i;\nloop invariant x <= y;\nloop invariant x <= 3*n - i;\nloop invariant y <= 3*n - i;\nloop invariant x == 2*i + unknown();\nloop invariant y == i + 3*unknown();\n*/\n```",
            "```\n/*@\nloop invariant i == 0 ==> x == 0 ==> y == 0;\nloop invariant i >= 0 ==> x >= 0 ==> y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= (3 * n);\nloop invariant (x + y) == (3 * i);\nloop invariant (x % 3) == (y % 3);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x <= 3 * n;\nloop invariant y <= 3 * n;\nloop invariant (2 * i) + 1 <= (x + y);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\nloop invariant (2 * i) + 1 <= (y + x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y == 3 * i;\nloop invariant x + y == 3 * n;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\nloop invariant x + y == 3 * n * (n + 1) / 2;\nloop invariant x + y == 3 * i * (i + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x + y == 3 * i;\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 2 * n;\nloop invariant 0 <= y <= 2 * n;\nloop invariant (x + y) <= (3 * n);\nloop invariant ((x + y) == (3 * i));\nloop invariant (x == (i + y));\nloop invariant (y == (i + x));\nloop invariant (x + y) == (3 * i);\nloop invariant x + y == 3 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: (x + y) <= (3 * n);\nloop invariant i5: ((x + y) == (3 * i));\n\n\nloop invariant i8: (x + y) == (3 * i);\nloop invariant i9: x + y == 3 * i;\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y == 3 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= x <= 3 * n;\nloop invariant i3: 0 <= y <= 3 * n;\nloop invariant i4: x + y == 3 * i;\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= n;\nloop invariant x + y == (2 * i);\nloop invariant x + y == (3 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 2*n;\nloop invariant 0 <= y <= n;\nloop invariant (x + y) <= (2*n);\nloop invariant (x + y) >= (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\nloop invariant (x + y) == (3*n);\nloop invariant (x + y) == (2*n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2 * n;\nloop invariant 0 <= x <= 3 * n;\nloop invariant (x + y) >= (n + y);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\nloop invariant (x + y) >= (n + 3 * n);\nloop invariant (x + y) <= (n + 3 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant (x + y) % 3 == 0;\nloop invariant (x + y) / 3 == n;\nloop invariant (x >= 2 * i);\nloop invariant (y >= i);\nloop invariant (x + y) == (i + 1) * (x / (i + 1));\nloop invariant (x + y) == (i + 1) * (y / (i + 1));\nloop invariant (x + y) == (i + 1) * (x / (i + 1)) + (i + 1) * (y / (i + 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= x;\nloop invariant i3: 0 <= y;\nloop invariant i4: (x + y) % 3 == 0;\n\n\nloop invariant i7: (y >= i);\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (3 * i) <= (x + y);\nloop invariant (3 * (i + 1)) >= (x + y);\nloop invariant (x + y) <= (3 * n);\nloop invariant (x + y) >= (3 * i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: (3 * i) <= (x + y);\nloop invariant i5: (3 * (i + 1)) >= (x + y);\n\nloop invariant i7: (x + y) >= (3 * i);\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * n;\nloop invariant 0 <= y <= 3 * n;\nloop invariant x + y == 3 * n;\nloop invariant (x + y) == (3 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= (2 * n);\nloop invariant ((x + y) == (3 * n));\nloop invariant (i == 0 ==> (x == 0 && y == 0));\nloop invariant (i == n ==> (x == (2 * n) && y == (2 * n)));\nloop invariant (unknown() ==> (x == (i + 1) && y == (2 * i)));\nloop invariant (!unknown() ==> (x == (2 * i) && y == (i + 1)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\nloop invariant i5: (i == 0 ==> (x == 0 && y == 0));\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= (2 * n);\nloop invariant (x + y) == (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\nloop invariant (x + y) <= (3 * i);\nloop invariant (x + y) >= (3 * i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: (x + y) == (3 * i);\nloop invariant i5: (x + y) >= (3 * i);\nloop invariant i6: (x + y) <= (3 * i);\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 3*n;\nloop invariant 0 <= y <= 3*n;\nloop invariant x + y == 3*i;\nloop invariant x <= y;\nloop invariant x <= 3*n - i;\nloop invariant y <= 3*n - i;\nloop invariant x == 2*i + unknown();\nloop invariant y == i + 3*unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= x <= 3*n;\nloop invariant i3: 0 <= y <= 3*n;\nloop invariant i4: x + y == 3*i;\n\n\n\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i == 0 ==> x == 0 ==> y == 0;\nloop invariant i >= 0 ==> x >= 0 ==> y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\n\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= x <= (2 * n);\nloop invariant 0 <= y <= (3 * n);\nloop invariant (x + y) == (3 * i);\nloop invariant (x % 3) == (y % 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\n\n\n\nloop invariant i4: (x + y) == (3 * i);\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 73: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: x <= 3 * n;\nloop invariant i3: y <= 3 * n;\nloop invariant i4: (2 * i) + 1 <= (x + y);\nloop invariant i5: (2 * i) + 1 <= (y + x);\nloop invariant i6: i >= 0;\nloop invariant i7: i <= n;\nloop invariant i8: x >= 0;\nloop invariant i9: y >= 0;\nloop invariant i10: x + y == 3 * i;\nloop invariant i11: x + y == 3 * n;\nloop invariant i12: x + y == 3 * i * (i + 1) / 2;\nloop invariant i13: x + y == 3 * n * (n + 1) / 2;\nloop invariant i14: 0 <= x <= 2 * n;\nloop invariant i15: 0 <= y <= 2 * n;\nloop invariant i16: (x + y) <= (3 * n);\nloop invariant i17: ((x + y) == (3 * i));\nloop invariant i18: (x == (i + y));\nloop invariant i19: (y == (i + x));\nloop invariant i20: (x + y) == (3 * i);\nloop invariant i21: 0 <= x <= 3 * n;\nloop invariant i22: 0 <= y <= 3 * n;\nloop invariant i23: 0 <= x <= (2 * n);\nloop invariant i24: 0 <= y <= n;\nloop invariant i25: x + y == (2 * i);\nloop invariant i26: x + y == (3 * n);\nloop invariant i27: 0 <= x <= 2*n;\nloop invariant i28: (x + y) <= (2*n);\nloop invariant i29: (x + y) >= (2*n);\nloop invariant i30: (x + y) == (3*n);\nloop invariant i31: (x + y) == (2*n);\nloop invariant i32: (x + y) >= (n + y);\nloop invariant i33: (x + y) <= (n + 3 * n);\nloop invariant i34: (x + y) >= (n + 3 * n);\nloop invariant i35: 0 <= x;\nloop invariant i36: 0 <= y;\nloop invariant i37: (x + y) % 3 == 0;\nloop invariant i38: (x + y) / 3 == n;\nloop invariant i39: (x >= 2 * i);\nloop invariant i40: (y >= i);\nloop invariant i41: (x + y) == (i + 1) * (x / (i + 1));\nloop invariant i42: (x + y) == (i + 1) * (y / (i + 1));\nloop invariant i43: (x + y) == (i + 1) * (x / (i + 1)) + (i + 1) * (y / (i + 1));\nloop invariant i44: (3 * i) <= (x + y);\nloop invariant i45: (3 * (i + 1)) >= (x + y);\nloop invariant i46: (x + y) >= (3 * i);\nloop invariant i47: (x + y) == (3 * n);\nloop invariant i48: 0 <= y <= (2 * n);\nloop invariant i49: ((x + y) == (3 * n));\nloop invariant i50: (i == 0 ==> (x == 0 && y == 0));\nloop invariant i51: (i == n ==> (x == (2 * n) && y == (2 * n)));\nloop invariant i52: (unknown() ==> (x == (i + 1) && y == (2 * i)));\nloop invariant i53: (!unknown() ==> (x == (2 * i) && y == (i + 1)));\nloop invariant i54: (x + y) <= (3 * i);\nloop invariant i55: 0 <= x <= 3*n;\nloop invariant i56: 0 <= y <= 3*n;\nloop invariant i57: x + y == 3*i;\nloop invariant i58: x <= y;\nloop invariant i59: x <= 3*n - i;\nloop invariant i60: y <= 3*n - i;\nloop invariant i61: x == 2*i + unknown();\nloop invariant i62: y == i + 3*unknown();\nloop invariant i63: i == 0 ==> x == 0 ==> y == 0;\nloop invariant i64: i >= 0 ==> x >= 0 ==> y >= 0;\nloop invariant i65: 1 <= i <= n;\nloop invariant i66: 0 <= y <= (3 * n);\nloop invariant i67: (x % 3) == (y % 3);\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: x <= 3 * n;\nloop invariant i3: y <= 3 * n;\n\n\nloop invariant i6: i >= 0;\nloop invariant i7: i <= n;\nloop invariant i8: x >= 0;\nloop invariant i9: y >= 0;\nloop invariant i10: x + y == 3 * i;\n\n\n\nloop invariant i14: 0 <= x <= 2 * n;\n\nloop invariant i16: (x + y) <= (3 * n);\nloop invariant i17: ((x + y) == (3 * i));\n\n\nloop invariant i20: (x + y) == (3 * i);\nloop invariant i21: 0 <= x <= 3 * n;\nloop invariant i22: 0 <= y <= 3 * n;\nloop invariant i23: 0 <= x <= (2 * n);\n\n\n\nloop invariant i27: 0 <= x <= 2*n;\n\n\n\n\n\nloop invariant i33: (x + y) <= (n + 3 * n);\n\nloop invariant i35: 0 <= x;\nloop invariant i36: 0 <= y;\nloop invariant i37: (x + y) % 3 == 0;\n\n\nloop invariant i40: (y >= i);\n\n\n\nloop invariant i44: (3 * i) <= (x + y);\nloop invariant i45: (3 * (i + 1)) >= (x + y);\nloop invariant i46: (x + y) >= (3 * i);\n\n\n\nloop invariant i50: (i == 0 ==> (x == 0 && y == 0));\n\n\n\nloop invariant i54: (x + y) <= (3 * i);\nloop invariant i55: 0 <= x <= 3*n;\nloop invariant i56: 0 <= y <= 3*n;\nloop invariant i57: x + y == 3*i;\n\nloop invariant i59: x <= 3*n - i;\n\n\n\nloop invariant i63: i == 0 ==> x == 0 ==> y == 0;\nloop invariant i64: i >= 0 ==> x >= 0 ==> y >= 0;\n\nloop invariant i66: 0 <= y <= (3 * n);\n\n*/\nwhile ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 79,
        "success_count": 69,
        "failure_count": 10,
        "success_rate": 0.8734177215189873
    }
}