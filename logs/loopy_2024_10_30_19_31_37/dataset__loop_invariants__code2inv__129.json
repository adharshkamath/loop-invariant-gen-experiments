{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/129.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  while ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x < y;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant 0 <= x < y;\nloop invariant y >= 1;\nloop invariant x >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant (x % 2) == 0;\nloop invariant (y % 2) == 0;\nloop invariant x == (1 << (y - 1));\nloop invariant (x >= 1);\nloop invariant (y > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 20;\nloop invariant x is even;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2^sizeof(int);\nloop invariant x >= 1;\nloop invariant y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x; loop invariant x <= y; loop invariant x >= 1; loop invariant x < y;\n*/\n```",
            "```\n/*@\nloop invariant y > x;\nloop invariant z1 == x;\nloop invariant z2 == y;\nloop invariant z3 == 1;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant z1 >= 1;\nloop invariant z2 >= 0;\nloop invariant z3 >= 1;\nloop invariant z1 <= x;\nloop invariant z2 <= y;\nloop invariant z3 <= 1;\nloop invariant z1 == x * z3;\nloop invariant z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x;\nloop invariant z2 == y * z3 ==> z2 == y;\nloop invariant z3 == 1 ==> z1 == x;\nloop invariant z3 == 1 ==> z2 == y;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x < y ==> x >= 1;\nloop invariant x < y ==> x mod 2 == 0;\nloop invariant x < y ==> x >= 2^(floor(log2(x)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant y >= 1;\nloop invariant x >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= y;\nloop invariant y <= 1;\nloop invariant x <= 2 * (y - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x == 1;\nloop invariant x == 2 * x';\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= x / 2 + 1;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x < y;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant 0 <= x < y;\nloop invariant y >= 1;\nloop invariant x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\n\nloop invariant i3: x >= 1;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant (x % 2) == 0;\nloop invariant (y % 2) == 0;\nloop invariant x == (1 << (y - 1));\nloop invariant (x >= 1);\nloop invariant (y > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\n\n\n\nloop invariant i5: (x >= 1);\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 20;\nloop invariant x is even;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2^sizeof(int);\nloop invariant x >= 1;\nloop invariant y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\nloop invariant i2: x >= 1;\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x; loop invariant x <= y; loop invariant x >= 1; loop invariant x < y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 <= x; loop invariant x <= y; loop invariant x >= 1; loop invariant x < y;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y > x;\nloop invariant z1 == x;\nloop invariant z2 == y;\nloop invariant z3 == 1;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant z1 >= 1;\nloop invariant z2 >= 0;\nloop invariant z3 >= 1;\nloop invariant z1 <= x;\nloop invariant z2 <= y;\nloop invariant z3 <= 1;\nloop invariant z1 == x * z3;\nloop invariant z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x;\nloop invariant z2 == y * z3 ==> z2 == y;\nloop invariant z3 == 1 ==> z1 == x;\nloop invariant z3 == 1 ==> z2 == y;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\nloop invariant z3 == 1 ==> z2 == y * z3;\nloop invariant z1 == x * z3 ==> z1 == x * z3;\nloop invariant z2 == y * z3 ==> z2 == y * z3;\nloop invariant z3 == 1 ==> z1 == x * z3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\n\n\n\nloop invariant i5: x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: z1 == x * z3 ==> z1 == x * z3;\nloop invariant i22: z2 == y * z3 ==> z2 == y * z3;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x < y ==> x >= 1;\nloop invariant x < y ==> x mod 2 == 0;\nloop invariant x < y ==> x >= 2^(floor(log2(x)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant x < y ==> x >= 2^(floor(log2(y)));\nloop invariant x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant x < y ==> x > 2^(floor(log2(x)) - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\nloop invariant i2: x < y ==> x >= 1;\n\n\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant y >= 1;\nloop invariant x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\n\nloop invariant i3: x >= 1;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= y;\nloop invariant y <= 1;\nloop invariant x <= 2 * (y - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 <= x;\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\nloop invariant i2: x >= 1;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\nloop invariant i2: x >= 1;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x == 1;\nloop invariant x == 2 * x';\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: x == 1;\nloop invariant i4: x == 2 * x';\nloop invariant i5: x >= y;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= x / 2 + 1;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y >= x / 2 + 1;\nloop invariant x >= 1 + (y - 1) * y / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\n\nloop invariant i2: x >= 1;\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "No CSV output dump found from Frama-C",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 <= x < y;\nloop invariant i2: y >= 1;\nloop invariant i3: x >= 1;\nloop invariant i4: 0 <= x <= y;\nloop invariant i5: (x % 2) == 0;\nloop invariant i6: (y % 2) == 0;\nloop invariant i7: x == (1 << (y - 1));\nloop invariant i8: (x >= 1);\nloop invariant i9: (y > 0);\nloop invariant i10: 0 <= x;\nloop invariant i11: x <= 20;\nloop invariant i12: x is even;\nloop invariant i13: 0 <= x <= 2^sizeof(int);\nloop invariant i14: y >= x;\nloop invariant i15: 0 <= x; loop invariant x <= y; loop invariant x >= 1; loop invariant x < y;\nloop invariant i16: y > x;\nloop invariant i17: z1 == x;\nloop invariant i18: z2 == y;\nloop invariant i19: z3 == 1;\nloop invariant i20: y >= 0;\nloop invariant i21: z1 >= 1;\nloop invariant i22: z2 >= 0;\nloop invariant i23: z3 >= 1;\nloop invariant i24: z1 <= x;\nloop invariant i25: z2 <= y;\nloop invariant i26: z3 <= 1;\nloop invariant i27: z1 == x * z3;\nloop invariant i28: z2 == y * z3;\nloop invariant i29: z1 == x * z3 ==> z1 == x;\nloop invariant i30: z2 == y * z3 ==> z2 == y;\nloop invariant i31: z3 == 1 ==> z1 == x;\nloop invariant i32: z3 == 1 ==> z2 == y;\nloop invariant i33: z3 == 1 ==> z1 == x * z3;\nloop invariant i34: z3 == 1 ==> z2 == y * z3;\nloop invariant i35: z1 == x * z3 ==> z1 == x * z3;\nloop invariant i36: z2 == y * z3 ==> z2 == y * z3;\nloop invariant i37: x < y ==> x >= 1;\nloop invariant i38: x < y ==> x mod 2 == 0;\nloop invariant i39: x < y ==> x >= 2^(floor(log2(x)));\nloop invariant i40: x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant i41: x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant i42: x < y ==> x >= 2^(floor(log2(y)));\nloop invariant i43: 1 <= x <= y;\nloop invariant i44: x <= y;\nloop invariant i45: y <= 1;\nloop invariant i46: x <= 2 * (y - 1);\nloop invariant i47: 0 <= y <= 100000;\nloop invariant i48: x >= (1 + (y - 1) * y / 2);\nloop invariant i49: x == 1;\nloop invariant i50: x == 2 * x';\nloop invariant i51: x >= y;\nloop invariant i52: x >= 1 + (y - 1) * y / 2;\nloop invariant i53: y >= x / 2 + 1;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: 0 <= x < y;\nloop invariant i2: y >= 1;\nloop invariant i3: x >= 1;\nloop invariant i4: 0 <= x <= y;\nloop invariant i5: (x % 2) == 0;\nloop invariant i6: (y % 2) == 0;\nloop invariant i7: x == (1 << (y - 1));\nloop invariant i8: (x >= 1);\nloop invariant i9: (y > 0);\nloop invariant i10: 0 <= x;\nloop invariant i11: x <= 20;\nloop invariant i12: x is even;\nloop invariant i13: 0 <= x <= 2^sizeof(int);\nloop invariant i14: y >= x;\nloop invariant i15: 0 <= x; loop invariant x <= y; loop invariant x >= 1; loop invariant x < y;\nloop invariant i16: y > x;\nloop invariant i17: z1 == x;\nloop invariant i18: z2 == y;\nloop invariant i19: z3 == 1;\nloop invariant i20: y >= 0;\nloop invariant i21: z1 >= 1;\nloop invariant i22: z2 >= 0;\nloop invariant i23: z3 >= 1;\nloop invariant i24: z1 <= x;\nloop invariant i25: z2 <= y;\nloop invariant i26: z3 <= 1;\nloop invariant i27: z1 == x * z3;\nloop invariant i28: z2 == y * z3;\nloop invariant i29: z1 == x * z3 ==> z1 == x;\nloop invariant i30: z2 == y * z3 ==> z2 == y;\nloop invariant i31: z3 == 1 ==> z1 == x;\nloop invariant i32: z3 == 1 ==> z2 == y;\nloop invariant i33: z3 == 1 ==> z1 == x * z3;\nloop invariant i34: z3 == 1 ==> z2 == y * z3;\nloop invariant i35: z1 == x * z3 ==> z1 == x * z3;\nloop invariant i36: z2 == y * z3 ==> z2 == y * z3;\nloop invariant i37: x < y ==> x >= 1;\nloop invariant i38: x < y ==> x mod 2 == 0;\nloop invariant i39: x < y ==> x >= 2^(floor(log2(x)));\nloop invariant i40: x < y ==> x < 2^(floor(log2(y)) + 1);\nloop invariant i41: x < y ==> x > 2^(floor(log2(x)) - 1);\nloop invariant i42: x < y ==> x >= 2^(floor(log2(y)));\nloop invariant i43: 1 <= x <= y;\nloop invariant i44: x <= y;\nloop invariant i45: y <= 1;\nloop invariant i46: x <= 2 * (y - 1);\nloop invariant i47: 0 <= y <= 100000;\nloop invariant i48: x >= (1 + (y - 1) * y / 2);\nloop invariant i49: x == 1;\nloop invariant i50: x == 2 * x';\nloop invariant i51: x >= y;\nloop invariant i52: x >= 1 + (y - 1) * y / 2;\nloop invariant i53: y >= x / 2 + 1;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 6,
        "success_count": 6,
        "failure_count": 0,
        "success_rate": 1.0
    }
}