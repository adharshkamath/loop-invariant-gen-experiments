{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  while (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= y;\nloop invariant x >= (x + y) * (x + y - 1) / 2;\nloop invariant x >= y;\nloop invariant x >= -y;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x < 0 ==> y >= 0;\nloop invariant x < 0 ==> y >= 1;\nloop invariant x < 0 ==> y == x + y;\nloop invariant x < 0 ==> y == x + y + 1;\nloop invariant x < 0 ==> x + y == y + x;\nloop invariant x < 0 ==> x + y == x + y + 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 0;\nloop invariant -x <= y <= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y);\nloop invariant 1 <= x <= 0;\nloop invariant -x <= y <= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10) ==> (x >= 11);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10) ==> (x >= 11) ==> (x >= 12);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x && x < 0;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 ==> (x <= 0);\nloop invariant 2 ==> (y >= 0);\nloop invariant 3 ==> (((y - 1) * y / 2) <= x);\nloop invariant 4 ==> ((x + y) <= 0);\nloop invariant 5 ==> ((x + y) >= x);\nloop invariant 6 ==> (y >= 1);\nloop invariant 7 ==> (x >= -y);\nloop invariant 8 ==> (x >= -y);\nloop invariant 9 ==> (x >= -y);\nloop invariant 10 ==> (x >= -y);\nloop invariant 11 ==> (x >= -y);\nloop invariant 12 ==> (x >= -y);\nloop invariant 13 ==> (x >= -y);\nloop invariant 14 ==> (x >= -y);\nloop invariant 15 ==> (x >= -y);\nloop invariant 16 ==> (x >= -y);\nloop invariant 17 ==> (x >= -y);\nloop invariant 18 ==> (x >= -y);\nloop invariant 19 ==> (x >= -y);\nloop invariant 20 ==> (x >= -y);\nloop invariant 21 ==> (x >= -y);\nloop invariant 22 ==> (x >= -y);\nloop invariant 23 ==> (x >= -y);\nloop invariant 24 ==> (x >= -y);\nloop invariant 25 ==> (x >= -y);\nloop invariant 26 ==> (x >= -y);\nloop invariant 27 ==> (x >= -y);\nloop invariant 28 ==> (x >= -y);\nloop invariant 29 ==> (x >= -y);\nloop invariant 30 ==> (x >= -y);\nloop invariant 31 ==> (x >= -y);\nloop invariant 32 ==> (x >= -y);\nloop invariant 33 ==> (x >= -y);\nloop invariant 34 ==> (x >= -y);\nloop invariant 35 ==> (x >= -y);\nloop invariant 36 ==> (x >= -y);\nloop invariant 37 ==> (x >= -y);\nloop invariant 38 ==> (x >= -y);\nloop invariant 39 ==> (x >= -y);\nloop invariant 40 ==> (x >= -y);\nloop invariant 41 ==> (x >= -y);\nloop invariant 42 ==> (x >= -y);\nloop invariant 43 ==> (x >= -y);\nloop invariant 44 ==> (x >= -y);\nloop invariant 45 ==> (x >= -y);\nloop invariant 46 ==> (x >= -y);\nloop invariant 47 ==> (x >= -y);\nloop invariant 48 ==> (x >= -y);\nloop invariant 49 ==> (x >= -y);\nloop invariant 50 ==> (x >= -y);\nloop invariant 51 ==> (x >= -y);\nloop invariant 52 ==> (x >= -y);\nloop invariant 53 ==> (x >= -y);\nloop invariant 54 ==> (x >= -y);\nloop invariant 55 ==> (x >= -y);\nloop invariant 56 ==> (x >= -y);\nloop invariant 57 ==> (x >= -y);\nloop invariant 58 ==> (x >= -y);\nloop invariant 59 ==> (x >= -y);\nloop invariant 60 ==> (x >= -y);\nloop invariant 61 ==> (x >= -y);\nloop invariant 62 ==> (x >= -y);\nloop invariant 63 ==> (x >= -y);\nloop invariant 64 ==> (x >= -y);\nloop invariant 65 ==> (x >= -y);\nloop invariant 66 ==> (x >= -y);\nloop invariant 67 ==> (x >= -y);\nloop invariant 68 ==> (x >= -y);\nloop invariant 69 ==> (x >= -y);\nloop invariant 70 ==> (x >= -y);\nloop invariant 71 ==> (x >= -y);\nloop invariant 72 ==> (x >= -y);\nloop invariant 73 ==> (x >= -y);\nloop invariant 74 ==> (x >= -y);\nloop invariant 75 ==> (x >= -y);\nloop invariant 76 ==> (x >= -y);\nloop invariant 77 ==> (x >= -y);\nloop invariant 78 ==> (x >= -y);\nloop invariant 79 ==> (x >= -y);\nloop invariant 80 ==> (x >= -y);\nloop invariant 81 ==> (x >= -y);\nloop invariant 82 ==> (x >= -y);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y; y <= -x-1; x <= -y-y;\n*/\n```",
            "```\n/*@\nloop invariant 0 < x < 0;\nloop invariant 0 < y < 0;\nloop invariant x <= 0 ==> y <= 0;\nloop invariant x <= 0 ==> y >= 0 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant y <= 1;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x <= 0;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 0;\nloop invariant x >= 0;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant y <= 1;\nloop invariant x >= 0;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 0;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y <= 0;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0 ==> x <= y;\nloop invariant x >= 0 ==> x == y ==> y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant 0 <= y < 0;\nloop invariant x + y >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= y;\nloop invariant x >= (x + y) * (x + y - 1) / 2;\nloop invariant x >= y;\nloop invariant x >= -y;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x < 0 ==> y >= 0;\nloop invariant x < 0 ==> y >= 1;\nloop invariant x < 0 ==> y == x + y;\nloop invariant x < 0 ==> y == x + y + 1;\nloop invariant x < 0 ==> x + y == y + x;\nloop invariant x < 0 ==> x + y == x + y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: x < 0 ==> x + y == y + x;\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 0;\nloop invariant -x <= y <= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y);\nloop invariant 1 <= x <= 0;\nloop invariant -x <= y <= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10) ==> (x >= 11);\nloop invariant y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10) ==> (x >= 11) ==> (x >= 12);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0);\nloop invariant i6: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1);\nloop invariant i7: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2);\nloop invariant i8: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3);\nloop invariant i9: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4);\nloop invariant i10: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5);\nloop invariant i11: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6);\nloop invariant i12: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7);\nloop invariant i13: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8);\nloop invariant i14: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9);\nloop invariant i15: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10);\nloop invariant i16: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10) ==> (x >= 11);\nloop invariant i17: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10) ==> (x >= 11) ==> (x >= 12);\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x && x < 0;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\nloop invariant 1 <= y && y <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 77,
                "annotations": "```\n/*@\nloop invariant 1 ==> (x <= 0);\nloop invariant 2 ==> (y >= 0);\nloop invariant 3 ==> (((y - 1) * y / 2) <= x);\nloop invariant 4 ==> ((x + y) <= 0);\nloop invariant 5 ==> ((x + y) >= x);\nloop invariant 6 ==> (y >= 1);\nloop invariant 7 ==> (x >= -y);\nloop invariant 8 ==> (x >= -y);\nloop invariant 9 ==> (x >= -y);\nloop invariant 10 ==> (x >= -y);\nloop invariant 11 ==> (x >= -y);\nloop invariant 12 ==> (x >= -y);\nloop invariant 13 ==> (x >= -y);\nloop invariant 14 ==> (x >= -y);\nloop invariant 15 ==> (x >= -y);\nloop invariant 16 ==> (x >= -y);\nloop invariant 17 ==> (x >= -y);\nloop invariant 18 ==> (x >= -y);\nloop invariant 19 ==> (x >= -y);\nloop invariant 20 ==> (x >= -y);\nloop invariant 21 ==> (x >= -y);\nloop invariant 22 ==> (x >= -y);\nloop invariant 23 ==> (x >= -y);\nloop invariant 24 ==> (x >= -y);\nloop invariant 25 ==> (x >= -y);\nloop invariant 26 ==> (x >= -y);\nloop invariant 27 ==> (x >= -y);\nloop invariant 28 ==> (x >= -y);\nloop invariant 29 ==> (x >= -y);\nloop invariant 30 ==> (x >= -y);\nloop invariant 31 ==> (x >= -y);\nloop invariant 32 ==> (x >= -y);\nloop invariant 33 ==> (x >= -y);\nloop invariant 34 ==> (x >= -y);\nloop invariant 35 ==> (x >= -y);\nloop invariant 36 ==> (x >= -y);\nloop invariant 37 ==> (x >= -y);\nloop invariant 38 ==> (x >= -y);\nloop invariant 39 ==> (x >= -y);\nloop invariant 40 ==> (x >= -y);\nloop invariant 41 ==> (x >= -y);\nloop invariant 42 ==> (x >= -y);\nloop invariant 43 ==> (x >= -y);\nloop invariant 44 ==> (x >= -y);\nloop invariant 45 ==> (x >= -y);\nloop invariant 46 ==> (x >= -y);\nloop invariant 47 ==> (x >= -y);\nloop invariant 48 ==> (x >= -y);\nloop invariant 49 ==> (x >= -y);\nloop invariant 50 ==> (x >= -y);\nloop invariant 51 ==> (x >= -y);\nloop invariant 52 ==> (x >= -y);\nloop invariant 53 ==> (x >= -y);\nloop invariant 54 ==> (x >= -y);\nloop invariant 55 ==> (x >= -y);\nloop invariant 56 ==> (x >= -y);\nloop invariant 57 ==> (x >= -y);\nloop invariant 58 ==> (x >= -y);\nloop invariant 59 ==> (x >= -y);\nloop invariant 60 ==> (x >= -y);\nloop invariant 61 ==> (x >= -y);\nloop invariant 62 ==> (x >= -y);\nloop invariant 63 ==> (x >= -y);\nloop invariant 64 ==> (x >= -y);\nloop invariant 65 ==> (x >= -y);\nloop invariant 66 ==> (x >= -y);\nloop invariant 67 ==> (x >= -y);\nloop invariant 68 ==> (x >= -y);\nloop invariant 69 ==> (x >= -y);\nloop invariant 70 ==> (x >= -y);\nloop invariant 71 ==> (x >= -y);\nloop invariant 72 ==> (x >= -y);\nloop invariant 73 ==> (x >= -y);\nloop invariant 74 ==> (x >= -y);\nloop invariant 75 ==> (x >= -y);\nloop invariant 76 ==> (x >= -y);\nloop invariant 77 ==> (x >= -y);\nloop invariant 78 ==> (x >= -y);\nloop invariant 79 ==> (x >= -y);\nloop invariant 80 ==> (x >= -y);\nloop invariant 81 ==> (x >= -y);\nloop invariant 82 ==> (x >= -y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0 ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: x >= (1 + (y - 1) * y / 2) ==> x >= 0;\n\nloop invariant i7: y >= 0 ==> y >= 0;\nloop invariant i8: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y; y <= -x-1; x <= -y-y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 < x < 0;\nloop invariant 0 < y < 0;\nloop invariant x <= 0 ==> y <= 0;\nloop invariant x <= 0 ==> y >= 0 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant y <= 1;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x <= 0;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y <= x;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant y <= 0;\nloop invariant x >= 0;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant y <= 1;\nloop invariant x >= 0;\nloop invariant y >= 1;\nloop invariant x <= y;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 0;\nloop invariant y >= 1;\nloop invariant x >= 1;\nloop invariant y <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0 ==> x <= y;\nloop invariant x >= 0 ==> x == y ==> y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\nloop invariant i2: x >= 0 ==> x <= y;\nloop invariant i3: x >= 0 ==> x == y ==> y >= x;\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant 0 <= y < 0;\nloop invariant x + y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 138: unexpected token 'y'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\nloop invariant i1: 1 <= y;\nloop invariant i2: x >= (x + y) * (x + y - 1) / 2;\nloop invariant i3: x >= y;\nloop invariant i4: x >= -y;\nloop invariant i5: x >= (y - 1) * y / 2;\nloop invariant i6: y >= 0;\nloop invariant i7: 0 <= x <= 1;\nloop invariant i8: x >= 0;\nloop invariant i9: x < 0 ==> y >= 0;\nloop invariant i10: x < 0 ==> y >= 1;\nloop invariant i11: x < 0 ==> y == x + y;\nloop invariant i12: x < 0 ==> y == x + y + 1;\nloop invariant i13: x < 0 ==> x + y == y + x;\nloop invariant i14: x < 0 ==> x + y == x + y + 1;\nloop invariant i15: 0 <= y <= 100000;\nloop invariant i16: x >= (1 + (y - 1) * y / 2);\nloop invariant i17: 1 <= x <= 0;\nloop invariant i18: -x <= y <= 0;\nloop invariant i19: y >= 0 ==> x >= 0;\nloop invariant i20: y >= 0 ==> x >= 0 ==> (x >= y);\nloop invariant i21: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0);\nloop invariant i22: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1);\nloop invariant i23: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2);\nloop invariant i24: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3);\nloop invariant i25: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4);\nloop invariant i26: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5);\nloop invariant i27: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6);\nloop invariant i28: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7);\nloop invariant i29: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8);\nloop invariant i30: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9);\nloop invariant i31: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10);\nloop invariant i32: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10) ==> (x >= 11);\nloop invariant i33: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10) ==> (x >= 11) ==> (x >= 12);\nloop invariant i34: 1 <= x && x < 0;\nloop invariant i35: 1 <= y && y <= 1;\nloop invariant i36: 1 ==> (x <= 0);\nloop invariant i37: 2 ==> (y >= 0);\nloop invariant i38: 3 ==> (((y - 1) * y / 2) <= x);\nloop invariant i39: 4 ==> ((x + y) <= 0);\nloop invariant i40: 5 ==> ((x + y) >= x);\nloop invariant i41: 6 ==> (y >= 1);\nloop invariant i42: 7 ==> (x >= -y);\nloop invariant i43: 8 ==> (x >= -y);\nloop invariant i44: 9 ==> (x >= -y);\nloop invariant i45: 10 ==> (x >= -y);\nloop invariant i46: 11 ==> (x >= -y);\nloop invariant i47: 12 ==> (x >= -y);\nloop invariant i48: 13 ==> (x >= -y);\nloop invariant i49: 14 ==> (x >= -y);\nloop invariant i50: 15 ==> (x >= -y);\nloop invariant i51: 16 ==> (x >= -y);\nloop invariant i52: 17 ==> (x >= -y);\nloop invariant i53: 18 ==> (x >= -y);\nloop invariant i54: 19 ==> (x >= -y);\nloop invariant i55: 20 ==> (x >= -y);\nloop invariant i56: 21 ==> (x >= -y);\nloop invariant i57: 22 ==> (x >= -y);\nloop invariant i58: 23 ==> (x >= -y);\nloop invariant i59: 24 ==> (x >= -y);\nloop invariant i60: 25 ==> (x >= -y);\nloop invariant i61: 26 ==> (x >= -y);\nloop invariant i62: 27 ==> (x >= -y);\nloop invariant i63: 28 ==> (x >= -y);\nloop invariant i64: 29 ==> (x >= -y);\nloop invariant i65: 30 ==> (x >= -y);\nloop invariant i66: 31 ==> (x >= -y);\nloop invariant i67: 32 ==> (x >= -y);\nloop invariant i68: 33 ==> (x >= -y);\nloop invariant i69: 34 ==> (x >= -y);\nloop invariant i70: 35 ==> (x >= -y);\nloop invariant i71: 36 ==> (x >= -y);\nloop invariant i72: 37 ==> (x >= -y);\nloop invariant i73: 38 ==> (x >= -y);\nloop invariant i74: 39 ==> (x >= -y);\nloop invariant i75: 40 ==> (x >= -y);\nloop invariant i76: 41 ==> (x >= -y);\nloop invariant i77: 42 ==> (x >= -y);\nloop invariant i78: 43 ==> (x >= -y);\nloop invariant i79: 44 ==> (x >= -y);\nloop invariant i80: 45 ==> (x >= -y);\nloop invariant i81: 46 ==> (x >= -y);\nloop invariant i82: 47 ==> (x >= -y);\nloop invariant i83: 48 ==> (x >= -y);\nloop invariant i84: 49 ==> (x >= -y);\nloop invariant i85: 50 ==> (x >= -y);\nloop invariant i86: 51 ==> (x >= -y);\nloop invariant i87: 52 ==> (x >= -y);\nloop invariant i88: 53 ==> (x >= -y);\nloop invariant i89: 54 ==> (x >= -y);\nloop invariant i90: 55 ==> (x >= -y);\nloop invariant i91: 56 ==> (x >= -y);\nloop invariant i92: 57 ==> (x >= -y);\nloop invariant i93: 58 ==> (x >= -y);\nloop invariant i94: 59 ==> (x >= -y);\nloop invariant i95: 60 ==> (x >= -y);\nloop invariant i96: 61 ==> (x >= -y);\nloop invariant i97: 62 ==> (x >= -y);\nloop invariant i98: 63 ==> (x >= -y);\nloop invariant i99: 64 ==> (x >= -y);\nloop invariant i100: 65 ==> (x >= -y);\nloop invariant i101: 66 ==> (x >= -y);\nloop invariant i102: 67 ==> (x >= -y);\nloop invariant i103: 68 ==> (x >= -y);\nloop invariant i104: 69 ==> (x >= -y);\nloop invariant i105: 70 ==> (x >= -y);\nloop invariant i106: 71 ==> (x >= -y);\nloop invariant i107: 72 ==> (x >= -y);\nloop invariant i108: 73 ==> (x >= -y);\nloop invariant i109: 74 ==> (x >= -y);\nloop invariant i110: 75 ==> (x >= -y);\nloop invariant i111: 76 ==> (x >= -y);\nloop invariant i112: 77 ==> (x >= -y);\nloop invariant i113: 78 ==> (x >= -y);\nloop invariant i114: 79 ==> (x >= -y);\nloop invariant i115: 80 ==> (x >= -y);\nloop invariant i116: 81 ==> (x >= -y);\nloop invariant i117: 82 ==> (x >= -y);\nloop invariant i118: 1 <= y <= 100000;\nloop invariant i119: x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant i120: y >= 0 ==> y >= 0;\nloop invariant i121: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i122: y >= 0 ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i123: 0 <= y; y <= -x-1; x <= -y-y;\nloop invariant i124: 0 < x < 0;\nloop invariant i125: 0 < y < 0;\nloop invariant i126: x <= 0 ==> y <= 0;\nloop invariant i127: x <= 0 ==> y >= 0 ==> x >= 0;\nloop invariant i128: 0 <= y;\nloop invariant i129: x <= y;\nloop invariant i130: y <= 1;\nloop invariant i131: x <= 0;\nloop invariant i132: y >= 1;\nloop invariant i133: x >= 1;\nloop invariant i134: y <= x;\nloop invariant i135: y <= 0;\nloop invariant i136: x >= 0 ==> x <= y;\nloop invariant i137: x >= 0 ==> x == y ==> y >= x;\nloop invariant i138: 0 <= x < 0;\nloop invariant i139: 0 <= y < 0;\nloop invariant i140: x + y >= 0;\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 92,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: x < 0 ==> x + y == y + x;\n\n\n\n\n\n\n\nloop invariant i21: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0);\nloop invariant i22: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1);\nloop invariant i23: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2);\nloop invariant i24: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3);\nloop invariant i25: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4);\nloop invariant i26: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5);\nloop invariant i27: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6);\nloop invariant i28: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7);\nloop invariant i29: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8);\nloop invariant i30: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9);\nloop invariant i31: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10);\nloop invariant i32: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10) ==> (x >= 11);\nloop invariant i33: y >= 0 ==> x >= 0 ==> (x >= y) ==> (x >= 0) ==> (x >= 1) ==> (x >= 2) ==> (x >= 3) ==> (x >= 4) ==> (x >= 5) ==> (x >= 6) ==> (x >= 7) ==> (x >= 8) ==> (x >= 9) ==> (x >= 10) ==> (x >= 11) ==> (x >= 12);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i119: x >= (1 + (y - 1) * y / 2) ==> x >= 0;\nloop invariant i120: y >= 0 ==> y >= 0;\nloop invariant i121: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * y / 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i136: x >= 0 ==> x <= y;\nloop invariant i137: x >= 0 ==> x == y ==> y >= x;\n\n\n\n*/\nwhile (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c"
        ],
        "skipped": [],
        "total": 150,
        "success_count": 133,
        "failure_count": 17,
        "success_rate": 0.8866666666666667
    }
}