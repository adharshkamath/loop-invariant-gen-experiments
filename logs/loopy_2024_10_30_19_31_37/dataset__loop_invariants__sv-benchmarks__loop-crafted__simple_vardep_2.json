{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  while (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i = k / 3;\nloop invariant j = 2 * k / 3;\nloop invariant k == 3*i && j == 2*i ==> k < 0x0fffffff;\nloop invariant k == 3*i && j == 2*i ==> i <= 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j <= 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 2147483647;\nloop invariant 0 <= i <= 1073741823;\nloop invariant 0 <= j <= 2147483647;\nloop invariant (k == 3*i);\nloop invariant (j == 2*i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff / 3;\nloop invariant 0 <= j <= 0x0fffffff / 2;\nloop invariant k == 3 * i;\nloop invariant j == 2 * i;\nloop invariant (i + j) == (k / 3) * (k / 3 + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k < 0x0fffffff;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant i >= 0 ==> k == 3*i;\nloop invariant j == 2*i ==> k == 3*i;\nloop invariant k < 0x0fffffff ==> k == 3*i;\nloop invariant j == 2*i ==> j >= 0;\nloop invariant k == 3*i ==> k >= 0;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> k < 0x0fffffff;\nloop invariant j >= 0 ==> k < 0x0fffffff;\nloop invariant k >= 0 ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> j >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff / 3;\nloop invariant 0 <= j <= 0x0fffffff / 2;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant i <= k / 3;\nloop invariant (j == 2*i) ==> (j <= k / 3 * 2);\nloop invariant (j == 2*i) ==> (j >= k / 3 * 2);\nloop invariant (j == 2*i) ==> (j < k / 3 * 2);\nloop invariant (j == 2*i) ==> (j > k / 3 * 2);\nloop invariant (j == 2*i) ==> (j == k / 3 * 2);\nloop invariant (j == 2*i) ==> (i <= k / 3);\nloop invariant (j == 2*i) ==> (i < k / 3);\nloop invariant (j == 2*i) ==> (i >= k / 3);\nloop invariant (j == 2*i) ==> (i > k / 3);\nloop invariant (j == 2*i) ==> (i == k / 3);\nloop invariant (j == 2*i) ==> (i <= k / 3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i <= j / 2;\nloop invariant i <= k / 3;\nloop invariant j <= k / 2;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff / 3;\nloop invariant 0 <= j <= 0x0fffffff * 2 / 3;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff / 3;\nloop invariant 0 <= j <= 0x0fffffff / 3 * 2;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == 3 * i;\nloop invariant j == 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= k/3;\nloop invariant 0 <= j <= 2*i;\nloop invariant k == 3*i && j == 2*i;\nloop invariant k == 3*i ==> k >= 3*i;\nloop invariant k == 3*i ==> k <= 3*i;\nloop invariant j == 2*i ==> j >= 2*i;\nloop invariant j == 2*i ==> j <= 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= (k / 3 + 1);\nloop invariant i * 3 <= k <= (i + 1) * 3;\nloop invariant j = (2 * i);\nloop invariant 0 <= j <= (2 * (k / 3 + 1));\nloop invariant i <= j <= (k / 3 + 1);\nloop invariant k >= (i + 1) * 3;\nloop invariant k <= (j + 2) * (j / 2);\nloop invariant k >= (j + 1) * (j / 2 + 1);\nloop invariant k == (i + 1) * 3 ==> i * 3 <= k <= (i + 1) * 3;\nloop invariant k == (j + 2) * (j / 2) ==> j <= k <= (j + 1) * (j / 2 + 1);\nloop invariant k == (j + 1) * (j / 2 + 1) ==> j <= k <= (j + 2) * (j / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0xffffffff;\nloop invariant 0 <= j <= 0xffffffff;\nloop invariant 0 <= k <= 0xffffffff;\nloop invariant i <= j;\nloop invariant j <= 2*i;\nloop invariant k <= 3*i;\nloop invariant k <= 0x0fffffff;\nloop invariant k == 3*i ==> j == 2*i;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i = k / 3;\nloop invariant j = 2 * k / 3;\nloop invariant k == 3*i && j == 2*i ==> k < 0x0fffffff;\nloop invariant k == 3*i && j == 2*i ==> i <= 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j <= 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> k >= 3;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i >= 1;\nloop invariant k == 3*i && j == 2*i ==> j >= 2;\nloop invariant k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\n\n\n\nloop invariant i5: k == 3*i && j == 2*i ==> i <= 0x0fffffff/3;\nloop invariant i6: k == 3*i && j == 2*i ==> j <= 2*0x0fffffff/3;\n\n\n\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant 0 <= j <= 2*k/3;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant j == k - i;\nloop invariant i <= k/3;\nloop invariant k == 3*i;\nloop invariant i == k/3;\nloop invariant k == 3*i;\nloop invariant 0 <= i <= k/3;\nloop invariant j == 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x0fffffff;\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: 0 <= i <= k/3;\nloop invariant i5: j == 2*i;\nloop invariant i6: k == 3*i;\nloop invariant i7: 0 <= j <= 2*k/3;\nloop invariant i8: i == k/3;\nloop invariant i9: j == k - i;\nloop invariant i10: i <= k/3;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 2147483647;\nloop invariant 0 <= i <= 1073741823;\nloop invariant 0 <= j <= 2147483647;\nloop invariant (k == 3*i);\nloop invariant (j == 2*i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 2147483647;\nloop invariant i2: 0 <= i <= 1073741823;\nloop invariant i3: 0 <= j <= 2147483647;\nloop invariant i4: (k == 3*i);\nloop invariant i5: (j == 2*i);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x0fffffff;\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: k == 3*i;\nloop invariant i5: j == 2*i;\nloop invariant i6: k == 3*i ==> k == 3*i;\nloop invariant i7: j == 2*i ==> j == 2*i;\nloop invariant i8: 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant i9: 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant i10: 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff / 3;\nloop invariant 0 <= j <= 0x0fffffff / 2;\nloop invariant k == 3 * i;\nloop invariant j == 2 * i;\nloop invariant (i + j) == (k / 3) * (k / 3 + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: 0 <= i <= 0x0fffffff / 3;\n\nloop invariant i4: k == 3 * i;\nloop invariant i5: j == 2 * i;\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k < 0x0fffffff;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant i >= 0 ==> k == 3*i;\nloop invariant j == 2*i ==> k == 3*i;\nloop invariant k < 0x0fffffff ==> k == 3*i;\nloop invariant j == 2*i ==> j >= 0;\nloop invariant k == 3*i ==> k >= 0;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> k < 0x0fffffff;\nloop invariant j >= 0 ==> k < 0x0fffffff;\nloop invariant k >= 0 ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> j >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant i >= 0 ==> i >= 0;\nloop invariant j >= 0 ==> j >= 0;\nloop invariant k >= 0 ==> k >= 0;\nloop invariant k < 0x0fffffff ==> k < 0x0fffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: k >= 0;\n\nloop invariant i5: j == 2*i;\nloop invariant i6: k == 3*i;\nloop invariant i7: i >= 0 ==> k == 3*i;\nloop invariant i8: j == 2*i ==> k == 3*i;\nloop invariant i9: k < 0x0fffffff ==> k == 3*i;\nloop invariant i10: j == 2*i ==> j >= 0;\nloop invariant i11: k == 3*i ==> k >= 0;\nloop invariant i12: i >= 0 ==> i >= 0;\nloop invariant i13: j >= 0 ==> j >= 0;\nloop invariant i14: k >= 0 ==> k >= 0;\nloop invariant i15: k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant i16: j == 2*i ==> j == 2*i;\nloop invariant i17: k == 3*i ==> k == 3*i;\n\n\n\nloop invariant i21: i >= 0 ==> j >= 0;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff / 3;\nloop invariant 0 <= j <= 0x0fffffff / 2;\nloop invariant j == 2*i;\nloop invariant k == 3*i;\nloop invariant i <= k / 3;\nloop invariant (j == 2*i) ==> (j <= k / 3 * 2);\nloop invariant (j == 2*i) ==> (j >= k / 3 * 2);\nloop invariant (j == 2*i) ==> (j < k / 3 * 2);\nloop invariant (j == 2*i) ==> (j > k / 3 * 2);\nloop invariant (j == 2*i) ==> (j == k / 3 * 2);\nloop invariant (j == 2*i) ==> (i <= k / 3);\nloop invariant (j == 2*i) ==> (i < k / 3);\nloop invariant (j == 2*i) ==> (i >= k / 3);\nloop invariant (j == 2*i) ==> (i > k / 3);\nloop invariant (j == 2*i) ==> (i == k / 3);\nloop invariant (j == 2*i) ==> (i <= k / 3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: 0 <= i <= 0x0fffffff / 3;\n\nloop invariant i4: j == 2*i;\nloop invariant i5: k == 3*i;\nloop invariant i6: i <= k / 3;\nloop invariant i7: (j == 2*i) ==> (j <= k / 3 * 2);\nloop invariant i8: (j == 2*i) ==> (j >= k / 3 * 2);\n\n\nloop invariant i11: (j == 2*i) ==> (j == k / 3 * 2);\nloop invariant i12: (j == 2*i) ==> (i <= k / 3);\n\nloop invariant i14: (j == 2*i) ==> (i >= k / 3);\n\nloop invariant i16: (j == 2*i) ==> (i == k / 3);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i <= j / 2;\nloop invariant i <= k / 3;\nloop invariant j <= k / 2;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x0fffffff;\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: i <= j / 2;\nloop invariant i5: i <= k / 3;\n\nloop invariant i7: k == 3*i;\nloop invariant i8: j == 2*i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff / 3;\nloop invariant 0 <= j <= 0x0fffffff * 2 / 3;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: 0 <= i <= 0x0fffffff / 3;\nloop invariant i3: 0 <= j <= 0x0fffffff * 2 / 3;\nloop invariant i4: k == 3*i;\nloop invariant i5: j == 2*i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x0fffffff;\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff / 3;\nloop invariant 0 <= j <= 0x0fffffff / 3 * 2;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == 3 * i;\nloop invariant j == 2 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff / 3;\nloop invariant i2: 0 <= j <= 0x0fffffff / 3 * 2;\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: k == 3 * i;\nloop invariant i5: j == 2 * i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= k/3;\nloop invariant 0 <= j <= 2*i;\nloop invariant k == 3*i && j == 2*i;\nloop invariant k == 3*i ==> k >= 3*i;\nloop invariant k == 3*i ==> k <= 3*i;\nloop invariant j == 2*i ==> j >= 2*i;\nloop invariant j == 2*i ==> j <= 2*i;\nloop invariant k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: 0 <= i <= k/3;\nloop invariant i3: 0 <= j <= 2*i;\nloop invariant i4: k == 3*i && j == 2*i;\nloop invariant i5: k == 3*i ==> k >= 3*i;\nloop invariant i6: k == 3*i ==> k <= 3*i;\nloop invariant i7: j == 2*i ==> j >= 2*i;\nloop invariant i8: j == 2*i ==> j <= 2*i;\nloop invariant i9: k == 3*i ==> k == 3*i;\nloop invariant i10: j == 2*i ==> j == 2*i;\nloop invariant i11: k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i12: j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i13: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i14: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i15: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i16: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i17: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i18: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i19: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i20: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i21: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i22: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i23: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i24: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i25: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i26: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i27: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i28: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i29: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\nloop invariant i <= k/3;\nloop invariant j <= 2*i;\nloop invariant k == 3*i;\nloop invariant j == 2*i;\nloop invariant k == 3*j/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: i <= k/3;\nloop invariant i5: j <= 2*i;\nloop invariant i6: k == 3*i;\nloop invariant i7: j == 2*i;\nloop invariant i8: k == 3*j/2;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= (k / 3 + 1);\nloop invariant i * 3 <= k <= (i + 1) * 3;\nloop invariant j = (2 * i);\nloop invariant 0 <= j <= (2 * (k / 3 + 1));\nloop invariant i <= j <= (k / 3 + 1);\nloop invariant k >= (i + 1) * 3;\nloop invariant k <= (j + 2) * (j / 2);\nloop invariant k >= (j + 1) * (j / 2 + 1);\nloop invariant k == (i + 1) * 3 ==> i * 3 <= k <= (i + 1) * 3;\nloop invariant k == (j + 2) * (j / 2) ==> j <= k <= (j + 1) * (j / 2 + 1);\nloop invariant k == (j + 1) * (j / 2 + 1) ==> j <= k <= (j + 2) * (j / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: 0 <= i <= (k / 3 + 1);\nloop invariant i3: i * 3 <= k <= (i + 1) * 3;\n\nloop invariant i5: 0 <= j <= (2 * (k / 3 + 1));\n\n\nloop invariant i8: k <= (j + 2) * (j / 2);\n\nloop invariant i10: k == (i + 1) * 3 ==> i * 3 <= k <= (i + 1) * 3;\nloop invariant i11: k == (j + 2) * (j / 2) ==> j <= k <= (j + 1) * (j / 2 + 1);\nloop invariant i12: k == (j + 1) * (j / 2 + 1) ==> j <= k <= (j + 2) * (j / 2);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0xffffffff;\nloop invariant 0 <= j <= 0xffffffff;\nloop invariant 0 <= k <= 0xffffffff;\nloop invariant i <= j;\nloop invariant j <= 2*i;\nloop invariant k <= 3*i;\nloop invariant k <= 0x0fffffff;\nloop invariant k == 3*i ==> j == 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0xffffffff;\nloop invariant i2: 0 <= j <= 0xffffffff;\nloop invariant i3: 0 <= k <= 0xffffffff;\nloop invariant i4: i <= j;\nloop invariant i5: j <= 2*i;\nloop invariant i6: k <= 3*i;\nloop invariant i7: k <= 0x0fffffff;\nloop invariant i8: k == 3*i ==> j == 2*i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: i = k / 3;\nloop invariant i3: j = 2 * k / 3;\nloop invariant i4: k == 3*i && j == 2*i ==> k < 0x0fffffff;\nloop invariant i5: k == 3*i && j == 2*i ==> i <= 0x0fffffff/3;\nloop invariant i6: k == 3*i && j == 2*i ==> j <= 2*0x0fffffff/3;\nloop invariant i7: k == 3*i && j == 2*i ==> k >= 3;\nloop invariant i8: k == 3*i && j == 2*i ==> j >= 2;\nloop invariant i9: k == 3*i && j == 2*i ==> i >= 1;\nloop invariant i10: k == 3*i && j == 2*i ==> i < 0x0fffffff/3;\nloop invariant i11: k == 3*i && j == 2*i ==> j < 2*0x0fffffff/3;\nloop invariant i12: 0 <= i <= 0x0fffffff;\nloop invariant i13: 0 <= j <= 0x0fffffff;\nloop invariant i14: 0 <= i <= k/3;\nloop invariant i15: j == 2*i;\nloop invariant i16: k == 3*i;\nloop invariant i17: 0 <= j <= 2*k/3;\nloop invariant i18: i == k/3;\nloop invariant i19: j == k - i;\nloop invariant i20: i <= k/3;\nloop invariant i21: 0 <= k <= 2147483647;\nloop invariant i22: 0 <= i <= 1073741823;\nloop invariant i23: 0 <= j <= 2147483647;\nloop invariant i24: (k == 3*i);\nloop invariant i25: (j == 2*i);\nloop invariant i26: k == 3*i ==> k == 3*i;\nloop invariant i27: j == 2*i ==> j == 2*i;\nloop invariant i28: 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant i29: 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant i30: 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant i31: 0 <= i <= 0x0fffffff / 3;\nloop invariant i32: 0 <= j <= 0x0fffffff / 2;\nloop invariant i33: k == 3 * i;\nloop invariant i34: j == 2 * i;\nloop invariant i35: (i + j) == (k / 3) * (k / 3 + 1) / 2;\nloop invariant i36: i >= 0;\nloop invariant i37: j >= 0;\nloop invariant i38: k >= 0;\nloop invariant i39: k < 0x0fffffff;\nloop invariant i40: i >= 0 ==> k == 3*i;\nloop invariant i41: j == 2*i ==> k == 3*i;\nloop invariant i42: k < 0x0fffffff ==> k == 3*i;\nloop invariant i43: j == 2*i ==> j >= 0;\nloop invariant i44: k == 3*i ==> k >= 0;\nloop invariant i45: i >= 0 ==> i >= 0;\nloop invariant i46: j >= 0 ==> j >= 0;\nloop invariant i47: k >= 0 ==> k >= 0;\nloop invariant i48: k < 0x0fffffff ==> k < 0x0fffffff;\nloop invariant i49: i >= 0 ==> k < 0x0fffffff;\nloop invariant i50: j >= 0 ==> k < 0x0fffffff;\nloop invariant i51: k >= 0 ==> k < 0x0fffffff;\nloop invariant i52: i >= 0 ==> j >= 0;\nloop invariant i53: i <= k / 3;\nloop invariant i54: (j == 2*i) ==> (j <= k / 3 * 2);\nloop invariant i55: (j == 2*i) ==> (j >= k / 3 * 2);\nloop invariant i56: (j == 2*i) ==> (j < k / 3 * 2);\nloop invariant i57: (j == 2*i) ==> (j > k / 3 * 2);\nloop invariant i58: (j == 2*i) ==> (j == k / 3 * 2);\nloop invariant i59: (j == 2*i) ==> (i <= k / 3);\nloop invariant i60: (j == 2*i) ==> (i < k / 3);\nloop invariant i61: (j == 2*i) ==> (i >= k / 3);\nloop invariant i62: (j == 2*i) ==> (i > k / 3);\nloop invariant i63: (j == 2*i) ==> (i == k / 3);\nloop invariant i64: i <= j / 2;\nloop invariant i65: j <= k / 2;\nloop invariant i66: 0 <= j <= 0x0fffffff * 2 / 3;\nloop invariant i67: (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant i68: 0 <= j <= 0x0fffffff / 3 * 2;\nloop invariant i69: 0 <= j <= 2*i;\nloop invariant i70: k == 3*i && j == 2*i;\nloop invariant i71: k == 3*i ==> k >= 3*i;\nloop invariant i72: k == 3*i ==> k <= 3*i;\nloop invariant i73: j == 2*i ==> j >= 2*i;\nloop invariant i74: j == 2*i ==> j <= 2*i;\nloop invariant i75: k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i76: j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i77: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i78: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i79: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i80: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i81: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i82: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i83: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i84: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i85: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i86: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i87: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i88: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i89: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i90: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i91: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i92: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i93: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i94: j <= 2*i;\nloop invariant i95: k == 3*j/2;\nloop invariant i96: 0 <= i <= (k / 3 + 1);\nloop invariant i97: i * 3 <= k <= (i + 1) * 3;\nloop invariant i98: j = (2 * i);\nloop invariant i99: 0 <= j <= (2 * (k / 3 + 1));\nloop invariant i100: i <= j <= (k / 3 + 1);\nloop invariant i101: k >= (i + 1) * 3;\nloop invariant i102: k <= (j + 2) * (j / 2);\nloop invariant i103: k >= (j + 1) * (j / 2 + 1);\nloop invariant i104: k == (i + 1) * 3 ==> i * 3 <= k <= (i + 1) * 3;\nloop invariant i105: k == (j + 2) * (j / 2) ==> j <= k <= (j + 1) * (j / 2 + 1);\nloop invariant i106: k == (j + 1) * (j / 2 + 1) ==> j <= k <= (j + 2) * (j / 2);\nloop invariant i107: 0 <= i <= 0xffffffff;\nloop invariant i108: 0 <= j <= 0xffffffff;\nloop invariant i109: 0 <= k <= 0xffffffff;\nloop invariant i110: i <= j;\nloop invariant i111: k <= 3*i;\nloop invariant i112: k <= 0x0fffffff;\nloop invariant i113: k == 3*i ==> j == 2*i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
        "combined_annotation_num_solver_calls": 24,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\n\n\n\nloop invariant i5: k == 3*i && j == 2*i ==> i <= 0x0fffffff/3;\nloop invariant i6: k == 3*i && j == 2*i ==> j <= 2*0x0fffffff/3;\n\n\n\n\n\nloop invariant i12: 0 <= i <= 0x0fffffff;\nloop invariant i13: 0 <= j <= 0x0fffffff;\nloop invariant i14: 0 <= i <= k/3;\nloop invariant i15: j == 2*i;\nloop invariant i16: k == 3*i;\nloop invariant i17: 0 <= j <= 2*k/3;\nloop invariant i18: i == k/3;\nloop invariant i19: j == k - i;\nloop invariant i20: i <= k/3;\nloop invariant i21: 0 <= k <= 2147483647;\nloop invariant i22: 0 <= i <= 1073741823;\nloop invariant i23: 0 <= j <= 2147483647;\nloop invariant i24: (k == 3*i);\nloop invariant i25: (j == 2*i);\nloop invariant i26: k == 3*i ==> k == 3*i;\nloop invariant i27: j == 2*i ==> j == 2*i;\nloop invariant i28: 0 <= i <= 0x0fffffff ==> 0 <= i <= 0x0fffffff;\nloop invariant i29: 0 <= j <= 0x0fffffff ==> 0 <= j <= 0x0fffffff;\nloop invariant i30: 0 <= k <= 0x0fffffff ==> 0 <= k <= 0x0fffffff;\nloop invariant i31: 0 <= i <= 0x0fffffff / 3;\n\nloop invariant i33: k == 3 * i;\nloop invariant i34: j == 2 * i;\n\nloop invariant i36: i >= 0;\nloop invariant i37: j >= 0;\nloop invariant i38: k >= 0;\n\nloop invariant i40: i >= 0 ==> k == 3*i;\nloop invariant i41: j == 2*i ==> k == 3*i;\nloop invariant i42: k < 0x0fffffff ==> k == 3*i;\nloop invariant i43: j == 2*i ==> j >= 0;\nloop invariant i44: k == 3*i ==> k >= 0;\nloop invariant i45: i >= 0 ==> i >= 0;\nloop invariant i46: j >= 0 ==> j >= 0;\nloop invariant i47: k >= 0 ==> k >= 0;\nloop invariant i48: k < 0x0fffffff ==> k < 0x0fffffff;\n\n\n\nloop invariant i52: i >= 0 ==> j >= 0;\nloop invariant i53: i <= k / 3;\nloop invariant i54: (j == 2*i) ==> (j <= k / 3 * 2);\nloop invariant i55: (j == 2*i) ==> (j >= k / 3 * 2);\n\n\nloop invariant i58: (j == 2*i) ==> (j == k / 3 * 2);\nloop invariant i59: (j == 2*i) ==> (i <= k / 3);\n\nloop invariant i61: (j == 2*i) ==> (i >= k / 3);\n\nloop invariant i63: (j == 2*i) ==> (i == k / 3);\nloop invariant i64: i <= j / 2;\n\nloop invariant i66: 0 <= j <= 0x0fffffff * 2 / 3;\nloop invariant i67: (i <= j <= k) ==> (k == 3*i) && (j == 2*i);\nloop invariant i68: 0 <= j <= 0x0fffffff / 3 * 2;\nloop invariant i69: 0 <= j <= 2*i;\nloop invariant i70: k == 3*i && j == 2*i;\nloop invariant i71: k == 3*i ==> k >= 3*i;\nloop invariant i72: k == 3*i ==> k <= 3*i;\nloop invariant i73: j == 2*i ==> j >= 2*i;\nloop invariant i74: j == 2*i ==> j <= 2*i;\nloop invariant i75: k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i76: j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i77: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i78: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i79: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i80: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i81: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i82: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i83: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i84: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i85: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i86: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i87: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i88: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i89: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i90: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i91: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i92: j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i ==> j == 2*i;\nloop invariant i93: k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i ==> k == 3*i;\nloop invariant i94: j <= 2*i;\nloop invariant i95: k == 3*j/2;\nloop invariant i96: 0 <= i <= (k / 3 + 1);\nloop invariant i97: i * 3 <= k <= (i + 1) * 3;\n\nloop invariant i99: 0 <= j <= (2 * (k / 3 + 1));\n\n\nloop invariant i102: k <= (j + 2) * (j / 2);\n\nloop invariant i104: k == (i + 1) * 3 ==> i * 3 <= k <= (i + 1) * 3;\nloop invariant i105: k == (j + 2) * (j / 2) ==> j <= k <= (j + 1) * (j / 2 + 1);\nloop invariant i106: k == (j + 1) * (j / 2 + 1) ==> j <= k <= (j + 2) * (j / 2);\nloop invariant i107: 0 <= i <= 0xffffffff;\nloop invariant i108: 0 <= j <= 0xffffffff;\nloop invariant i109: 0 <= k <= 0xffffffff;\nloop invariant i110: i <= j;\nloop invariant i111: k <= 3*i;\nloop invariant i112: k <= 0x0fffffff;\nloop invariant i113: k == 3*i ==> j == 2*i;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n\n  }\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 97,
        "success_count": 87,
        "failure_count": 10,
        "success_rate": 0.8969072164948454
    }
}