{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/39.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    while (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == n ==> unknown();\nloop invariant c < n ==> c == 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c < n ==> c == 1;\nloop invariant c < n ==> c < 1;\nloop invariant c < n ==> c == 1 ==> c == 1;\nloop invariant c < n ==> c < 1 ==> c == 1;\nloop invariant c < n ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c >= 1;\nloop invariant c == n ==> c == n;\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c >= 1;\nloop invariant c == n ==> c == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> unknown() ==> c <= n;\nloop invariant c == n ==> !unknown() ==> c <= n;\nloop invariant c != n ==> unknown() ==> c < n;\nloop invariant c != n ==> !unknown() ==> c <= n;\nloop invariant c == n ==> unknown() ==> c <= n;\nloop invariant c == n ==> !unknown() ==> c == n;\nloop invariant c != n ==> unknown() ==> c < n;\nloop invariant c != n ==> !unknown() ==> c <= n;\nloop invariant c == n ==> unknown() ==> c <= n;\nloop invariant c == n ==> !unknown() ==> c == n;\nloop invariant c != n ==> unknown() ==> c < n;\nloop invariant c != n ==> !unknown() ==> c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c - n <= 1;\nloop invariant c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c - n <= 1;\nloop invariant c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c - n <= 1;\nloop invariant c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c - n <= 1;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == n ==> unknown() == false;\nloop invariant c == n ==> c - 1 < n;\nloop invariant c < n ==> unknown() == true;\nloop invariant c < n ==> c <= n;\nloop invariant c < n ==> c >= 1;\nloop invariant c < n ==> c <= n - 1;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c >= 1 ==> c - 1 < n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n; c <= n ==> c == n ==> c == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n ==> n == c);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n || c < n;\nloop invariant c == n || c < n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (c == n ==> n >= 0);\nloop invariant (c < n ==> n > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c <= n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != n ==> c == c + 1;\nloop invariant c == 1 ==> c == c + 1;\nloop invariant c == n ==> c == c + 1;\nloop invariant c != n ==> c == c * 2;\nloop invariant c == 1 ==> c == c * 2;\nloop invariant c == n ==> c == c * 2;\nloop invariant c != n ==> c == c * 2 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1;\nloop invariant c == n ==> c == c * 2 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\nloop invariant i3: c == 1 ==> c == 1;\nloop invariant i4: c == c + 1 ==> c == 1;\nloop invariant i5: c == n ==> c == n;\nloop invariant i6: c == n ==> c <= n;\nloop invariant i7: c == n ==> c == 1 ==> c == 1;\nloop invariant i8: c == n ==> c == c + 1 ==> c == 1;\nloop invariant i9: c == n ==> c == n ==> c == n;\nloop invariant i10: c == n ==> c == n ==> c <= n;\nloop invariant i11: c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i12: c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i13: c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i14: c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i15: c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i16: c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i17: c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i18: c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i19: c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i20: c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i21: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i22: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i23: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i24: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i25: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i26: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i27: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i28: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i29: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i30: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i31: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i32: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i33: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i34: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i35: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i36: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i37: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == n ==> unknown();\nloop invariant c < n ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c < n ==> c == 1;\nloop invariant c < n ==> c < 1;\nloop invariant c < n ==> c == 1 ==> c == 1;\nloop invariant c < n ==> c < 1 ==> c == 1;\nloop invariant c < n ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\n\nloop invariant i5: c < n ==> c == 1 ==> c == 1;\n\nloop invariant i7: c < n ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i8: c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i9: c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i10: c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c >= 1;\nloop invariant c == n ==> c == n;\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c >= 1;\nloop invariant c == n ==> c == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: c == n ==> c <= n;\nloop invariant i3: c == n ==> c >= 1;\nloop invariant i4: c == n ==> c == n;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> unknown() ==> c <= n;\nloop invariant c == n ==> !unknown() ==> c <= n;\nloop invariant c != n ==> unknown() ==> c < n;\nloop invariant c != n ==> !unknown() ==> c <= n;\nloop invariant c == n ==> unknown() ==> c <= n;\nloop invariant c == n ==> !unknown() ==> c == n;\nloop invariant c != n ==> unknown() ==> c < n;\nloop invariant c != n ==> !unknown() ==> c <= n;\nloop invariant c == n ==> unknown() ==> c <= n;\nloop invariant c == n ==> !unknown() ==> c == n;\nloop invariant c != n ==> unknown() ==> c < n;\nloop invariant c != n ==> !unknown() ==> c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c - n <= 1;\nloop invariant c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c - n <= 1;\nloop invariant c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c - n <= 1;\nloop invariant c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c - n <= 1;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == n ==> unknown() == false;\nloop invariant c == n ==> c - 1 < n;\nloop invariant c < n ==> unknown() == true;\nloop invariant c < n ==> c <= n;\nloop invariant c < n ==> c >= 1;\nloop invariant c < n ==> c <= n - 1;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c >= 1 ==> c - 1 < n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\nloop invariant c >= 1 ==> c - 1 >= 0;\nloop invariant c >= 1 ==> c - 1 <= n - 1;\nloop invariant c >= 1 ==> c - 1 <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\nloop invariant i3: c == n ==> c - 1 < n;\n\nloop invariant i5: c < n ==> c <= n;\n\nloop invariant i7: c < n ==> c <= n - 1;\n\n\nloop invariant i10: c >= 1 ==> c - 1 >= 0;\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n; c <= n ==> c == n ==> c == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n ==> n == c);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\nloop invariant i2: (c == n ==> n == c);\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n || c < n;\nloop invariant c == n || c < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (c == n ==> n >= 0);\nloop invariant (c < n ==> n > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\nloop invariant i2: (c == n ==> n >= 0);\nloop invariant i3: (c < n ==> n > 0);\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 26,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c <= n;\nloop invariant c == 1 ==> c == 1;\nloop invariant c != n ==> c == c + 1;\nloop invariant c == 1 ==> c == c + 1;\nloop invariant c == n ==> c == c + 1;\nloop invariant c != n ==> c == c * 2;\nloop invariant c == 1 ==> c == c * 2;\nloop invariant c == n ==> c == c * 2;\nloop invariant c != n ==> c == c * 2 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1;\nloop invariant c == n ==> c == c * 2 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\nloop invariant i4: c == 1 ==> c == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 53: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: c <= n;\nloop invariant i3: c == 1 ==> c == 1;\nloop invariant i4: c == c + 1 ==> c == 1;\nloop invariant i5: c == n ==> c == n;\nloop invariant i6: c == n ==> c <= n;\nloop invariant i7: c == n ==> c == 1 ==> c == 1;\nloop invariant i8: c == n ==> c == c + 1 ==> c == 1;\nloop invariant i9: c == n ==> c == n ==> c == n;\nloop invariant i10: c == n ==> c == n ==> c <= n;\nloop invariant i11: c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i12: c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i13: c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i14: c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i15: c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i16: c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i17: c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i18: c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i19: c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i20: c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i21: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i22: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i23: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i24: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i25: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i26: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i27: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i28: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i29: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i30: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i31: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i32: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i33: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i34: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i35: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i36: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i37: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i38: 1 <= c <= n;\nloop invariant i39: c == n ==> unknown();\nloop invariant i40: c < n ==> c == 1;\nloop invariant i41: c < n ==> c < 1;\nloop invariant i42: c < n ==> c == 1 ==> c == 1;\nloop invariant i43: c < n ==> c < 1 ==> c == 1;\nloop invariant i44: c < n ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i45: c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i46: c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i47: c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i48: c == n ==> c >= 1;\nloop invariant i49: c == n ==> unknown() ==> c <= n;\nloop invariant i50: c == n ==> !unknown() ==> c <= n;\nloop invariant i51: c != n ==> unknown() ==> c < n;\nloop invariant i52: c != n ==> !unknown() ==> c <= n;\nloop invariant i53: c == n ==> !unknown() ==> c == n;\nloop invariant i54: 0 <= c - n <= 1;\nloop invariant i55: c == n ==> unknown() == false;\nloop invariant i56: c == n ==> c - 1 < n;\nloop invariant i57: c < n ==> unknown() == true;\nloop invariant i58: c < n ==> c <= n;\nloop invariant i59: c < n ==> c >= 1;\nloop invariant i60: c < n ==> c <= n - 1;\nloop invariant i61: c >= 1 ==> c <= n;\nloop invariant i62: c >= 1 ==> c - 1 < n;\nloop invariant i63: c >= 1 ==> c - 1 >= 0;\nloop invariant i64: c >= 1 ==> c - 1 <= n - 1;\nloop invariant i65: c >= 1 ==> c - 1 <= n;\nloop invariant i66: 0 <= c <= n; c <= n ==> c == n ==> c == n;\nloop invariant i67: (c == n ==> n == c);\nloop invariant i68: c == n || c < n;\nloop invariant i69: (c == n ==> n >= 0);\nloop invariant i70: (c < n ==> n > 0);\nloop invariant i71: c == n ==> c == 1;\nloop invariant i72: c != n ==> c <= n;\nloop invariant i73: c != n ==> c == c + 1;\nloop invariant i74: c == 1 ==> c == c + 1;\nloop invariant i75: c == n ==> c == c + 1;\nloop invariant i76: c != n ==> c == c * 2;\nloop invariant i77: c == 1 ==> c == c * 2;\nloop invariant i78: c == n ==> c == c * 2;\nloop invariant i79: c != n ==> c == c * 2 + 1;\nloop invariant i80: c == 1 ==> c == c * 2 + 1;\nloop invariant i81: c == n ==> c == c * 2 + 1;\nloop invariant i82: c != n ==> c == c * 2 + 1 + 1;\nloop invariant i83: c == 1 ==> c == c * 2 + 1 + 1;\nloop invariant i84: c == n ==> c == c * 2 + 1 + 1;\nloop invariant i85: c != n ==> c == c * 2 + 1 + 1 + 1;\nloop invariant i86: c == 1 ==> c == c * 2 + 1 + 1 + 1;\nloop invariant i87: c == n ==> c == c * 2 + 1 + 1 + 1;\nloop invariant i88: c != n ==> c == c * 2 + 1 + 1 + 1 + 1;\nloop invariant i89: c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1;\nloop invariant i90: c == n ==> c == c * 2 + 1 + 1 + 1 + 1;\nloop invariant i91: c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1;\nloop invariant i92: c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1;\nloop invariant i93: c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1;\nloop invariant i94: c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i95: c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i96: c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i97: c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i98: c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i99: c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i100: c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i101: c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i102: c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i103: c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i104: c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i105: c == n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i106: c != n ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\nloop invariant i107: c == 1 ==> c == c * 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 39,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: c <= n;\nloop invariant i3: c == 1 ==> c == 1;\nloop invariant i4: c == c + 1 ==> c == 1;\nloop invariant i5: c == n ==> c == n;\nloop invariant i6: c == n ==> c <= n;\nloop invariant i7: c == n ==> c == 1 ==> c == 1;\nloop invariant i8: c == n ==> c == c + 1 ==> c == 1;\nloop invariant i9: c == n ==> c == n ==> c == n;\nloop invariant i10: c == n ==> c == n ==> c <= n;\nloop invariant i11: c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i12: c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i13: c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i14: c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i15: c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i16: c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i17: c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i18: c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i19: c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i20: c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i21: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i22: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i23: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i24: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i25: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i26: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i27: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i28: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i29: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i30: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i31: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i32: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i33: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\nloop invariant i34: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c <= n;\nloop invariant i35: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i36: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == c + 1 ==> c == 1;\nloop invariant i37: c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n ==> c == n;\n\n\n\n\nloop invariant i42: c < n ==> c == 1 ==> c == 1;\n\nloop invariant i44: c < n ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i45: c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i46: c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i47: c < n ==> c < 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i48: c == n ==> c >= 1;\n\n\n\n\n\n\n\nloop invariant i56: c == n ==> c - 1 < n;\n\nloop invariant i58: c < n ==> c <= n;\n\nloop invariant i60: c < n ==> c <= n - 1;\nloop invariant i61: c >= 1 ==> c <= n;\nloop invariant i62: c >= 1 ==> c - 1 < n;\nloop invariant i63: c >= 1 ==> c - 1 >= 0;\nloop invariant i64: c >= 1 ==> c - 1 <= n - 1;\nloop invariant i65: c >= 1 ==> c - 1 <= n;\n\nloop invariant i67: (c == n ==> n == c);\nloop invariant i68: c == n || c < n;\nloop invariant i69: (c == n ==> n >= 0);\nloop invariant i70: (c < n ==> n > 0);\n\nloop invariant i72: c != n ==> c <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 30,
        "success_count": 26,
        "failure_count": 4,
        "success_rate": 0.8666666666666667
    }
}