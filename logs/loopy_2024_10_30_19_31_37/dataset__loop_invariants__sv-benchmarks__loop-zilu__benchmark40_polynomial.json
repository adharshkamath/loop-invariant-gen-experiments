{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  while (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x*y >= 0;\nloop invariant (x >= y) ==> (x*y >= 0);\nloop invariant (x < y) ==> (x*y <= 0);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x*y >= 0;\nloop invariant (x==0 ==> y>=0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>=0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= INT_MAX / 2;\nloop invariant 0 <= y <= INT_MAX / 2;\nloop invariant x * y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant x*y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 3;\nloop invariant 1 <= y <= 3;\nloop invariant x*y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x <= x + (y - y0) * (y0 - y) / (y0 - y + 1);\nloop invariant y0 <= y <= y + (y0 - y + 1) * (y - y0) / (y - y0 + 1);\nloop invariant x >= x0;\nloop invariant y >= y0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant x*y>=0 ==> x*y>=0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x*y >= 0;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> x >= 2;\nloop invariant x >= 1 ==> y >= 2;\nloop invariant x >= 1 ==> x >= 3;\nloop invariant x >= 1 ==> y >= 3;\nloop invariant x >= 1 ==> x >= 4;\nloop invariant x >= 1 ==> y >= 4;\nloop invariant x >= 1 ==> x >= 5;\nloop invariant x >= 1 ==> y >= 5;\nloop invariant x >= 1 ==> x >= 6;\nloop invariant x >= 1 ==> y >= 6;\nloop invariant x >= 1 ==> x >= 7;\nloop invariant x >= 1 ==> y >= 7;\nloop invariant x >= 1 ==> x >= 8;\nloop invariant x >= 1 ==> y >= 8;\nloop invariant x >= 1 ==> x >= 9;\nloop invariant x >= 1 ==> y >= 9;\nloop invariant x >= 1 ==> x >= 10;\nloop invariant x >= 1 ==> y >= 10;\nloop invariant x >= 1 ==> x >= 11;\nloop invariant x >= 1 ==> y >= 11;\nloop invariant x >= 1 ==> x >= 12;\nloop invariant x >= 1 ==> y >= 12;\nloop invariant x >= 1 ==> x >= 13;\nloop invariant x >= 1 ==> y >= 13;\nloop invariant x >= 1 ==> x >= 14;\nloop invariant x >= 1 ==> y >= 14;\nloop invariant x >= 1 ==> x >= 15;\nloop invariant x >= 1 ==> y >= 15;\nloop invariant x >= 1 ==> x >= 16;\nloop invariant x >= 1 ==> y >= 16;\nloop invariant x >= 1 ==> x >= 17;\nloop invariant x >= 1 ==> y >= 17;\nloop invariant x >= 1 ==> x >= 18;\nloop invariant x >= 1 ==> y >= 18;\nloop invariant x >= 1 ==> x >= 19;\nloop invariant x >= 1 ==> y >= 19;\nloop invariant x >= 1 ==> x >= 20;\nloop invariant x >= 1 ==> y >= 20;\nloop invariant x >= 1 ==> x >= 21;\nloop invariant x >= 1 ==> y >= 21;\nloop invariant x >= 1 ==> x >= 22;\nloop invariant x >= 1 ==> y >= 22;\nloop invariant x >= 1 ==> x >= 23;\nloop invariant x >= 1 ==> y >= 23;\nloop invariant x >= 1 ==> x >= 24;\nloop invariant x >= 1 ==> y >= 24;\nloop invariant x >= 1 ==> x >= 25;\nloop invariant x >= 1 ==> y >= 25;\nloop invariant x >= 1 ==> x >= 26;\nloop invariant x >= 1 ==> y >= 26;\nloop invariant x >= 1 ==> x >= 27;\nloop invariant x >= 1 ==> y >= 27;\nloop invariant x >= 1 ==> x >= 28;\nloop invariant x >= 1 ==> y >= 28;\nloop invariant x >= 1 ==> x >= 29;\nloop invariant x >= 1 ==> y >= 29;\nloop invariant x >= 1 ==> x >= 30;\nloop invariant x >= 1 ==> y >= 30;\nloop invariant x >= 1 ==> x >= 31;\nloop invariant x >= 1 ==> y >= 31;\nloop invariant x >= 1 ==> x >= 32;\nloop invariant x >= 1 ==> y >= 32;\nloop invariant x >= 1 ==> x >= 33;\nloop invariant x >= 1 ==> y >= 33;\nloop invariant x >= 1 ==> x >= 34;\nloop invariant x >= 1 ==> y >= 34;\nloop invariant x >= 1 ==> x >= 35;\nloop invariant x >= 1 ==> y >= 35;\nloop invariant x >= 1 ==> x >= 36;\nloop invariant x >= 1 ==> y >= 36;\nloop invariant x >= 1 ==> x >= 37;\nloop invariant x >= 1 ==> y >= 37;\nloop invariant x >= 1 ==> x >= 38;\nloop invariant x >= 1 ==> y >= 38;\nloop invariant x >= 1 ==> x >= 39;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant x >= y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant x*y >= 0;\nloop invariant (x >= y) ==> (x*y >= 0);\nloop invariant (x < y) ==> (x*y <= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\nloop invariant i3: x*y >= 0;\nloop invariant i4: (x >= y) ==> (x*y >= 0);\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x*y >= 0;\nloop invariant (x==0 ==> y>=0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>=0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\nloop invariant (x>0 ==> y>0);\nloop invariant (x<0 ==> y<=0);\nloop invariant (x==0 ==> x==0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\nloop invariant i3: x*y >= 0;\n\n\nloop invariant i6: (x<0 ==> y<=0);\nloop invariant i7: (x==0 ==> x==0);\nloop invariant i8: (x>0 ==> y>=0);\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: x*y >= 0 ==> x*y >= 0;\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= INT_MAX / 2;\nloop invariant 0 <= y <= INT_MAX / 2;\nloop invariant x * y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\nloop invariant i3: x * y >= 0;\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant x*y >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\nloop invariant i3: x*y >= 0;\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 3;\nloop invariant 1 <= y <= 3;\nloop invariant x*y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\nloop invariant i3: x*y >= 0;\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x <= x + (y - y0) * (y0 - y) / (y0 - y + 1);\nloop invariant y0 <= y <= y + (y0 - y + 1) * (y - y0) / (y - y0 + 1);\nloop invariant x >= x0;\nloop invariant y >= y0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant x*y>=0 ==> x*y>=0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\nloop invariant i3: x*y>=0 ==> x*y>=0;\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x*y >= 0;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> x >= 2;\nloop invariant x >= 1 ==> y >= 2;\nloop invariant x >= 1 ==> x >= 3;\nloop invariant x >= 1 ==> y >= 3;\nloop invariant x >= 1 ==> x >= 4;\nloop invariant x >= 1 ==> y >= 4;\nloop invariant x >= 1 ==> x >= 5;\nloop invariant x >= 1 ==> y >= 5;\nloop invariant x >= 1 ==> x >= 6;\nloop invariant x >= 1 ==> y >= 6;\nloop invariant x >= 1 ==> x >= 7;\nloop invariant x >= 1 ==> y >= 7;\nloop invariant x >= 1 ==> x >= 8;\nloop invariant x >= 1 ==> y >= 8;\nloop invariant x >= 1 ==> x >= 9;\nloop invariant x >= 1 ==> y >= 9;\nloop invariant x >= 1 ==> x >= 10;\nloop invariant x >= 1 ==> y >= 10;\nloop invariant x >= 1 ==> x >= 11;\nloop invariant x >= 1 ==> y >= 11;\nloop invariant x >= 1 ==> x >= 12;\nloop invariant x >= 1 ==> y >= 12;\nloop invariant x >= 1 ==> x >= 13;\nloop invariant x >= 1 ==> y >= 13;\nloop invariant x >= 1 ==> x >= 14;\nloop invariant x >= 1 ==> y >= 14;\nloop invariant x >= 1 ==> x >= 15;\nloop invariant x >= 1 ==> y >= 15;\nloop invariant x >= 1 ==> x >= 16;\nloop invariant x >= 1 ==> y >= 16;\nloop invariant x >= 1 ==> x >= 17;\nloop invariant x >= 1 ==> y >= 17;\nloop invariant x >= 1 ==> x >= 18;\nloop invariant x >= 1 ==> y >= 18;\nloop invariant x >= 1 ==> x >= 19;\nloop invariant x >= 1 ==> y >= 19;\nloop invariant x >= 1 ==> x >= 20;\nloop invariant x >= 1 ==> y >= 20;\nloop invariant x >= 1 ==> x >= 21;\nloop invariant x >= 1 ==> y >= 21;\nloop invariant x >= 1 ==> x >= 22;\nloop invariant x >= 1 ==> y >= 22;\nloop invariant x >= 1 ==> x >= 23;\nloop invariant x >= 1 ==> y >= 23;\nloop invariant x >= 1 ==> x >= 24;\nloop invariant x >= 1 ==> y >= 24;\nloop invariant x >= 1 ==> x >= 25;\nloop invariant x >= 1 ==> y >= 25;\nloop invariant x >= 1 ==> x >= 26;\nloop invariant x >= 1 ==> y >= 26;\nloop invariant x >= 1 ==> x >= 27;\nloop invariant x >= 1 ==> y >= 27;\nloop invariant x >= 1 ==> x >= 28;\nloop invariant x >= 1 ==> y >= 28;\nloop invariant x >= 1 ==> x >= 29;\nloop invariant x >= 1 ==> y >= 29;\nloop invariant x >= 1 ==> x >= 30;\nloop invariant x >= 1 ==> y >= 30;\nloop invariant x >= 1 ==> x >= 31;\nloop invariant x >= 1 ==> y >= 31;\nloop invariant x >= 1 ==> x >= 32;\nloop invariant x >= 1 ==> y >= 32;\nloop invariant x >= 1 ==> x >= 33;\nloop invariant x >= 1 ==> y >= 33;\nloop invariant x >= 1 ==> x >= 34;\nloop invariant x >= 1 ==> y >= 34;\nloop invariant x >= 1 ==> x >= 35;\nloop invariant x >= 1 ==> y >= 35;\nloop invariant x >= 1 ==> x >= 36;\nloop invariant x >= 1 ==> y >= 36;\nloop invariant x >= 1 ==> x >= 37;\nloop invariant x >= 1 ==> y >= 37;\nloop invariant x >= 1 ==> x >= 38;\nloop invariant x >= 1 ==> y >= 38;\nloop invariant x >= 1 ==> x >= 39;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\nloop invariant i3: x*y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\nloop invariant x*y >= 0 ==> x <= 0;\nloop invariant x*y >= 0 ==> y <= 0;\nloop invariant x >= 0 ==> x*y >= 0;\nloop invariant y >= 0 ==> x*y >= 0;\nloop invariant x <= 0 ==> x*y >= 0;\nloop invariant y <= 0 ==> x*y >= 0;\nloop invariant x*y >= 0 ==> x >= 0;\nloop invariant x*y >= 0 ==> y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\nloop invariant i1: x >= 0 ==> x*y >= 0;\nloop invariant i2: y >= 0 ==> x*y >= 0;\nloop invariant i3: x <= 0 ==> x*y >= 0;\nloop invariant i4: y <= 0 ==> x*y >= 0;\nloop invariant i5: x*y >= 0 ==> x*y >= 0;\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\nloop invariant i3: x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant i4: x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 48: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 100000;\nloop invariant i2: 0 <= y <= 100000;\nloop invariant i3: x*y >= 0;\nloop invariant i4: (x >= y) ==> (x*y >= 0);\nloop invariant i5: (x < y) ==> (x*y <= 0);\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: (x==0 ==> y>=0);\nloop invariant i9: (x>0 ==> y>0);\nloop invariant i10: (x<0 ==> y<=0);\nloop invariant i11: (x==0 ==> x==0);\nloop invariant i12: (x>0 ==> y>=0);\nloop invariant i13: 0 <= x;\nloop invariant i14: 0 <= y;\nloop invariant i15: x*y >= 0 ==> x >= 0;\nloop invariant i16: x*y >= 0 ==> y >= 0;\nloop invariant i17: x*y >= 0 ==> x*y >= 0;\nloop invariant i18: x >= (1 + (y - 1) * y / 2);\nloop invariant i19: 0 <= x <= INT_MAX / 2;\nloop invariant i20: 0 <= y <= INT_MAX / 2;\nloop invariant i21: x * y >= 0;\nloop invariant i22: 0 <= x <= 2147483647;\nloop invariant i23: 0 <= y <= 2147483647;\nloop invariant i24: 1 <= x <= 3;\nloop invariant i25: 1 <= y <= 3;\nloop invariant i26: x <= x + (y - y0) * (y0 - y) / (y0 - y + 1);\nloop invariant i27: y0 <= y <= y + (y0 - y + 1) * (y - y0) / (y - y0 + 1);\nloop invariant i28: x >= x0;\nloop invariant i29: y >= y0;\nloop invariant i30: 0 <= x <= unknown_int();\nloop invariant i31: 0 <= y <= unknown_int();\nloop invariant i32: x*y>=0 ==> x*y>=0;\nloop invariant i33: x >= 1 ==> y >= 1;\nloop invariant i34: x >= 1 ==> x >= 2;\nloop invariant i35: x >= 1 ==> y >= 2;\nloop invariant i36: x >= 1 ==> x >= 3;\nloop invariant i37: x >= 1 ==> y >= 3;\nloop invariant i38: x >= 1 ==> x >= 4;\nloop invariant i39: x >= 1 ==> y >= 4;\nloop invariant i40: x >= 1 ==> x >= 5;\nloop invariant i41: x >= 1 ==> y >= 5;\nloop invariant i42: x >= 1 ==> x >= 6;\nloop invariant i43: x >= 1 ==> y >= 6;\nloop invariant i44: x >= 1 ==> x >= 7;\nloop invariant i45: x >= 1 ==> y >= 7;\nloop invariant i46: x >= 1 ==> x >= 8;\nloop invariant i47: x >= 1 ==> y >= 8;\nloop invariant i48: x >= 1 ==> x >= 9;\nloop invariant i49: x >= 1 ==> y >= 9;\nloop invariant i50: x >= 1 ==> x >= 10;\nloop invariant i51: x >= 1 ==> y >= 10;\nloop invariant i52: x >= 1 ==> x >= 11;\nloop invariant i53: x >= 1 ==> y >= 11;\nloop invariant i54: x >= 1 ==> x >= 12;\nloop invariant i55: x >= 1 ==> y >= 12;\nloop invariant i56: x >= 1 ==> x >= 13;\nloop invariant i57: x >= 1 ==> y >= 13;\nloop invariant i58: x >= 1 ==> x >= 14;\nloop invariant i59: x >= 1 ==> y >= 14;\nloop invariant i60: x >= 1 ==> x >= 15;\nloop invariant i61: x >= 1 ==> y >= 15;\nloop invariant i62: x >= 1 ==> x >= 16;\nloop invariant i63: x >= 1 ==> y >= 16;\nloop invariant i64: x >= 1 ==> x >= 17;\nloop invariant i65: x >= 1 ==> y >= 17;\nloop invariant i66: x >= 1 ==> x >= 18;\nloop invariant i67: x >= 1 ==> y >= 18;\nloop invariant i68: x >= 1 ==> x >= 19;\nloop invariant i69: x >= 1 ==> y >= 19;\nloop invariant i70: x >= 1 ==> x >= 20;\nloop invariant i71: x >= 1 ==> y >= 20;\nloop invariant i72: x >= 1 ==> x >= 21;\nloop invariant i73: x >= 1 ==> y >= 21;\nloop invariant i74: x >= 1 ==> x >= 22;\nloop invariant i75: x >= 1 ==> y >= 22;\nloop invariant i76: x >= 1 ==> x >= 23;\nloop invariant i77: x >= 1 ==> y >= 23;\nloop invariant i78: x >= 1 ==> x >= 24;\nloop invariant i79: x >= 1 ==> y >= 24;\nloop invariant i80: x >= 1 ==> x >= 25;\nloop invariant i81: x >= 1 ==> y >= 25;\nloop invariant i82: x >= 1 ==> x >= 26;\nloop invariant i83: x >= 1 ==> y >= 26;\nloop invariant i84: x >= 1 ==> x >= 27;\nloop invariant i85: x >= 1 ==> y >= 27;\nloop invariant i86: x >= 1 ==> x >= 28;\nloop invariant i87: x >= 1 ==> y >= 28;\nloop invariant i88: x >= 1 ==> x >= 29;\nloop invariant i89: x >= 1 ==> y >= 29;\nloop invariant i90: x >= 1 ==> x >= 30;\nloop invariant i91: x >= 1 ==> y >= 30;\nloop invariant i92: x >= 1 ==> x >= 31;\nloop invariant i93: x >= 1 ==> y >= 31;\nloop invariant i94: x >= 1 ==> x >= 32;\nloop invariant i95: x >= 1 ==> y >= 32;\nloop invariant i96: x >= 1 ==> x >= 33;\nloop invariant i97: x >= 1 ==> y >= 33;\nloop invariant i98: x >= 1 ==> x >= 34;\nloop invariant i99: x >= 1 ==> y >= 34;\nloop invariant i100: x >= 1 ==> x >= 35;\nloop invariant i101: x >= 1 ==> y >= 35;\nloop invariant i102: x >= 1 ==> x >= 36;\nloop invariant i103: x >= 1 ==> y >= 36;\nloop invariant i104: x >= 1 ==> x >= 37;\nloop invariant i105: x >= 1 ==> y >= 37;\nloop invariant i106: x >= 1 ==> x >= 38;\nloop invariant i107: x >= 1 ==> y >= 38;\nloop invariant i108: x >= 1 ==> x >= 39;\nloop invariant i109: x >= 0 ==> x*y >= 0;\nloop invariant i110: y >= 0 ==> x*y >= 0;\nloop invariant i111: x <= 0 ==> x*y >= 0;\nloop invariant i112: y <= 0 ==> x*y >= 0;\nloop invariant i113: x*y >= 0 ==> x <= 0;\nloop invariant i114: x*y >= 0 ==> y <= 0;\nloop invariant i115: x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant i116: x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\nloop invariant i117: 0 <= x <= 1;\nloop invariant i118: 0 <= y <= 1;\nloop invariant i119: x >= y;\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\nloop invariant i3: x*y >= 0;\nloop invariant i4: (x >= y) ==> (x*y >= 0);\n\n\n\n\n\nloop invariant i10: (x<0 ==> y<=0);\nloop invariant i11: (x==0 ==> x==0);\nloop invariant i12: (x>0 ==> y>=0);\n\n\n\n\nloop invariant i17: x*y >= 0 ==> x*y >= 0;\n\n\n\nloop invariant i21: x * y >= 0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i32: x*y>=0 ==> x*y>=0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i109: x >= 0 ==> x*y >= 0;\nloop invariant i110: y >= 0 ==> x*y >= 0;\nloop invariant i111: x <= 0 ==> x*y >= 0;\nloop invariant i112: y <= 0 ==> x*y >= 0;\n\n\nloop invariant i115: x*y >= 0 ==> (x == 0 || y == 0) ==> x*y == 0;\nloop invariant i116: x*y >= 0 ==> (x != 0 && y != 0) ==> x*y > 0;\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c"
        ],
        "skipped": [],
        "total": 159,
        "success_count": 142,
        "failure_count": 17,
        "success_rate": 0.8930817610062893
    }
}