{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  while(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant 0 <= y <= 2^32 - 1;\nloop invariant x % 3 == x % 3;\nloop invariant (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 0) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 0) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant 0 <= y <= 1;\nloop invariant x % 3 != 1 ==> x % 3 == 0;\nloop invariant x % 3 != 2 ==> x % 3 == 0;\nloop invariant x % 3 == 2 ==> x % 3 == 0;\nloop invariant x % 3 == 1 ==> x % 3 == 0;\nloop invariant x % 3 == 1 ==> y == 0;\nloop invariant x % 3 == 2 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4294967295;\nloop invariant 0 <= y <= 1;\nloop invariant (x % 3 == 0 ==> x == 0);\nloop invariant (x % 3 == 1 ==> x % 2 == 1);\nloop invariant (x % 3 == 2 ==> x % 2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 3 * 10^9;\nloop invariant 0 <= y <= 1;\nloop invariant x % 3 != 1 ==> x % 3 == 0 || x % 3 == 2;\nloop invariant x % 3 == 1 ==> x % 3 == 1;\nloop invariant x % 3 == 2 ==> x % 3 == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant 0 <= y <= 2;\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 1 <= y <= 2;\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant unknown_int() ==> y == 0;\nloop invariant x % 3 != 0 ==> y == 1;\nloop invariant unknown_int() ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant x % 3 != 1;\nloop invariant x % 3 != 2;\nloop invariant x % 3 != 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2;\nloop invariant y <= x;\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x % 3 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4294967295; loop invariant 0 <= y <= 2; loop invariant x % 3 == 2 ==> y == 0; loop invariant x % 3 == 0 ==> y == 0; loop invariant x % 3 == 1 ==> y == 0; loop invariant x % 3 == 2 ==> x >= 2; loop invariant x % 3 == 0 ==> x >= 0; loop invariant x % 3 == 1 ==> x >= 1; loop invariant x % 3 == 2 ==> x <= 4294967293; loop invariant x % 3 == 0 ==> x <= 4294967295; loop invariant x % 3 == 1 ==> x <= 4294967294; loop invariant y == 0 ==> x % 3 != 1; loop invariant y == 0 ==> x % 3 != 2; loop invariant y == 0 ==> x % 3 != 0; loop invariant y == 1 ==> x % 3 == 1; loop invariant y == 1 ==> x % 3 == 2; loop invariant y == 1 ==> x % 3 == 0;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2*y + 4;\nloop invariant 0 <= y <= 2*(x - 1) / 3;\nloop invariant x % 3 != 1;\nloop invariant x % 3 != 2;\nloop invariant x % 3 != 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> y == 0;\nloop invariant x % 3 == 1 ==> y == 0;\nloop invariant x % 3 == 1 ==> (y >= 0);\nloop invariant x % 3 == 2 ==> y == 0;\nloop invariant x % 3 == 2 ==> (y >= 0);\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> (y >= 1);\nloop invariant x % 3 == 1 || x % 3 == 2 || x % 3 == 0;\nloop invariant (x % 3 != 1 && x % 3 != 2 && x % 3 != 0) || (y >= 1);\nloop invariant (x % 3 != 1 && x % 3 != 2 && x % 3 != 0) || (y == 0);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y >= 0);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 0);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 1);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 0);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y >= 0);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 1);\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant 0 <= y <= 2^32 - 1;\nloop invariant x % 3 == x % 3;\nloop invariant (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 0) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 0) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\n\nloop invariant i3: x % 3 == x % 3;\nloop invariant i4: (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i5: (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i6: (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i7: (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i8: (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i9: (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i10: (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i11: (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i12: (x % 3 == 2) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i13: (x % 3 == 0) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i14: (x % 3 == 0) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i15: (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i16: (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i17: (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i18: (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i19: (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i20: (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i21: (x % 3 == 2) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i22: (x % 3 == 0) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i23: (x % 3 == 0) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i24: (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i25: (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i26: (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i27: (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i28: (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant 0 <= y <= 1;\nloop invariant x % 3 != 1 ==> x % 3 == 0;\nloop invariant x % 3 != 2 ==> x % 3 == 0;\nloop invariant x % 3 == 2 ==> x % 3 == 0;\nloop invariant x % 3 == 1 ==> x % 3 == 0;\nloop invariant x % 3 == 1 ==> y == 0;\nloop invariant x % 3 == 2 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\nloop invariant i2: 0 <= y <= 1;\n\n\n\n\n\n\n\n\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4294967295;\nloop invariant 0 <= y <= 1;\nloop invariant (x % 3 == 0 ==> x == 0);\nloop invariant (x % 3 == 1 ==> x % 2 == 1);\nloop invariant (x % 3 == 2 ==> x % 2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\nloop invariant i1: 0 <= x <= 4294967295;\nloop invariant i2: 0 <= y <= 1;\n\n\n\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 3 * 10^9;\nloop invariant 0 <= y <= 1;\nloop invariant x % 3 != 1 ==> x % 3 == 0 || x % 3 == 2;\nloop invariant x % 3 == 1 ==> x % 3 == 1;\nloop invariant x % 3 == 2 ==> x % 3 == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\nloop invariant i2: 0 <= y <= 1;\nloop invariant i3: x % 3 != 1 ==> x % 3 == 0 || x % 3 == 2;\nloop invariant i4: x % 3 == 1 ==> x % 3 == 1;\nloop invariant i5: x % 3 == 2 ==> x % 3 == 2;\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant 0 <= y <= 2;\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\nloop invariant (x % 3 == 0) ==>(y == 0);\nloop invariant (x % 3 == 1) ==>(y == 0);\nloop invariant (x % 3 == 2) ==>(y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\nloop invariant i1: 0 <= x <= UINT_MAX;\nloop invariant i2: 0 <= y <= 2;\n\n\n\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 1 <= y <= 2;\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\n\n\n\n\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant unknown_int() ==> y == 0;\nloop invariant x % 3 != 0 ==> y == 1;\nloop invariant unknown_int() ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\nloop invariant i1: 0 <= x;\n\n\nloop invariant i4: x % 3 != 0 ==> y == 1;\n\n\n\nloop invariant i8: x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant i9: x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant i10: x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant i11: x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant x % 3 != 1;\nloop invariant x % 3 != 2;\nloop invariant x % 3 != 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> y == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\nloop invariant i1: 0 <= y;\nloop invariant i2: x >= 0;\n\n\n\n\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2;\nloop invariant y <= x;\nloop invariant (x % 3 == 0) ==> (y == 0);\nloop invariant (x % 3 == 1) ==> (y == 0);\nloop invariant (x % 3 == 2) ==> (y == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant (x % 3 == 0) ==> (x % 3 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\nloop invariant i2: 0 <= y <= 2;\n\n\n\n\nloop invariant i7: (x % 3 == 0) ==> (x % 3 == 0);\n\n\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x % 3 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\nloop invariant i2: y >= 0;\nloop invariant i3: y <= 100000;\n\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4294967295; loop invariant 0 <= y <= 2; loop invariant x % 3 == 2 ==> y == 0; loop invariant x % 3 == 0 ==> y == 0; loop invariant x % 3 == 1 ==> y == 0; loop invariant x % 3 == 2 ==> x >= 2; loop invariant x % 3 == 0 ==> x >= 0; loop invariant x % 3 == 1 ==> x >= 1; loop invariant x % 3 == 2 ==> x <= 4294967293; loop invariant x % 3 == 0 ==> x <= 4294967295; loop invariant x % 3 == 1 ==> x <= 4294967294; loop invariant y == 0 ==> x % 3 != 1; loop invariant y == 0 ==> x % 3 != 2; loop invariant y == 0 ==> x % 3 != 0; loop invariant y == 1 ==> x % 3 == 1; loop invariant y == 1 ==> x % 3 == 2; loop invariant y == 1 ==> x % 3 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\nloop invariant i1: 0 <= x <= 4294967295; loop invariant 0 <= y <= 2; loop invariant x % 3 == 2 ==> y == 0; loop invariant x % 3 == 0 ==> y == 0; loop invariant x % 3 == 1 ==> y == 0; loop invariant x % 3 == 2 ==> x >= 2; loop invariant x % 3 == 0 ==> x >= 0; loop invariant x % 3 == 1 ==> x >= 1; loop invariant x % 3 == 2 ==> x <= 4294967293; loop invariant x % 3 == 0 ==> x <= 4294967295; loop invariant x % 3 == 1 ==> x <= 4294967294; loop invariant y == 0 ==> x % 3 != 1; loop invariant y == 0 ==> x % 3 != 2; loop invariant y == 0 ==> x % 3 != 0; loop invariant y == 1 ==> x % 3 == 1; loop invariant y == 1 ==> x % 3 == 2; loop invariant y == 1 ==> x % 3 == 0;\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\n\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2*y + 4;\nloop invariant 0 <= y <= 2*(x - 1) / 3;\nloop invariant x % 3 != 1;\nloop invariant x % 3 != 2;\nloop invariant x % 3 != 0 ==> y == 1;\nloop invariant x % 3 != 0 ==> y == 0;\nloop invariant x % 3 == 1 ==> y == 0;\nloop invariant x % 3 == 1 ==> (y >= 0);\nloop invariant x % 3 == 2 ==> y == 0;\nloop invariant x % 3 == 2 ==> (y >= 0);\nloop invariant x % 3 == 0 ==> y == 0;\nloop invariant x % 3 == 0 ==> (y >= 1);\nloop invariant x % 3 == 1 || x % 3 == 2 || x % 3 == 0;\nloop invariant (x % 3 != 1 && x % 3 != 2 && x % 3 != 0) || (y >= 1);\nloop invariant (x % 3 != 1 && x % 3 != 2 && x % 3 != 0) || (y == 0);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y >= 0);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 0);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 1);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 0);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y >= 0);\nloop invariant (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\n\n\n\nloop invariant i5: x % 3 != 0 ==> y == 1;\n\n\nloop invariant i8: x % 3 == 1 ==> (y >= 0);\n\nloop invariant i10: x % 3 == 2 ==> (y >= 0);\n\n\nloop invariant i13: x % 3 == 1 || x % 3 == 2 || x % 3 == 0;\n\n\nloop invariant i16: (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y >= 0);\nloop invariant i17: (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 0);\nloop invariant i18: (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 1);\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 70: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\nloop invariant i1: 0 <= x <= 2^32 - 1;\nloop invariant i2: 0 <= y <= 2^32 - 1;\nloop invariant i3: x % 3 == x % 3;\nloop invariant i4: (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i5: (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i6: (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i7: (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i8: (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i9: (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i10: (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i11: (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i12: (x % 3 == 2) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i13: (x % 3 == 0) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i14: (x % 3 == 0) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i15: (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i16: (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i17: (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i18: (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i19: (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i20: (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i21: (x % 3 == 2) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i22: (x % 3 == 0) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i23: (x % 3 == 0) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i24: (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i25: (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i26: (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i27: (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i28: (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i29: 0 <= y <= 1;\nloop invariant i30: x % 3 != 1 ==> x % 3 == 0;\nloop invariant i31: x % 3 != 2 ==> x % 3 == 0;\nloop invariant i32: x % 3 == 2 ==> x % 3 == 0;\nloop invariant i33: x % 3 == 1 ==> x % 3 == 0;\nloop invariant i34: x % 3 == 1 ==> y == 0;\nloop invariant i35: x % 3 == 2 ==> y == 0;\nloop invariant i36: x % 3 == 0 ==> y == 1;\nloop invariant i37: x % 3 == 0 ==> y == 0;\nloop invariant i38: 0 <= x <= 4294967295;\nloop invariant i39: (x % 3 == 0 ==> x == 0);\nloop invariant i40: (x % 3 == 1 ==> x % 2 == 1);\nloop invariant i41: (x % 3 == 2 ==> x % 2 == 0);\nloop invariant i42: 1 <= x <= 3 * 10^9;\nloop invariant i43: x % 3 != 1 ==> x % 3 == 0 || x % 3 == 2;\nloop invariant i44: x % 3 == 1 ==> x % 3 == 1;\nloop invariant i45: x % 3 == 2 ==> x % 3 == 2;\nloop invariant i46: 0 <= x <= UINT_MAX;\nloop invariant i47: 0 <= y <= 2;\nloop invariant i48: (x % 3 == 0) ==>(y == 0);\nloop invariant i49: (x % 3 == 1) ==>(y == 0);\nloop invariant i50: (x % 3 == 2) ==>(y == 0);\nloop invariant i51: 0 <= x <= 4;\nloop invariant i52: 1 <= y <= 2;\nloop invariant i53: (x % 3 == 0) ==> (y == 0);\nloop invariant i54: (x % 3 == 1) ==> (y == 0);\nloop invariant i55: (x % 3 == 2) ==> (y == 0);\nloop invariant i56: 0 <= x;\nloop invariant i57: unknown_int() ==> y == 0;\nloop invariant i58: x % 3 != 0 ==> y == 1;\nloop invariant i59: unknown_int() ==> y == 1;\nloop invariant i60: x % 3 != 0 ==> x % 3 == 1 ==> y == 0;\nloop invariant i61: x % 3 != 0 ==> x % 3 == 2 ==> y == 0;\nloop invariant i62: x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant i63: x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant i64: x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant i65: x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant i66: 0 <= y;\nloop invariant i67: x >= 0;\nloop invariant i68: x % 3 != 1;\nloop invariant i69: x % 3 != 2;\nloop invariant i70: x % 3 != 0 ==> y == 0;\nloop invariant i71: 0 <= x <= 2147483647;\nloop invariant i72: y <= x;\nloop invariant i73: (x % 3 == 1) ==> (x % 3 == 0);\nloop invariant i74: (x % 3 == 2) ==> (x % 3 == 0);\nloop invariant i75: 0 <= x <= 100000;\nloop invariant i76: y >= 0;\nloop invariant i77: y <= 100000;\nloop invariant i78: x % 3 == 0;\nloop invariant i79: 0 <= x <= 4294967295; loop invariant 0 <= y <= 2; loop invariant x % 3 == 2 ==> y == 0; loop invariant x % 3 == 0 ==> y == 0; loop invariant x % 3 == 1 ==> y == 0; loop invariant x % 3 == 2 ==> x >= 2; loop invariant x % 3 == 0 ==> x >= 0; loop invariant x % 3 == 1 ==> x >= 1; loop invariant x % 3 == 2 ==> x <= 4294967293; loop invariant x % 3 == 0 ==> x <= 4294967295; loop invariant x % 3 == 1 ==> x <= 4294967294; loop invariant y == 0 ==> x % 3 != 1; loop invariant y == 0 ==> x % 3 != 2; loop invariant y == 0 ==> x % 3 != 0; loop invariant y == 1 ==> x % 3 == 1; loop invariant y == 1 ==> x % 3 == 2; loop invariant y == 1 ==> x % 3 == 0;\nloop invariant i80: i1;\nloop invariant i81: i2;\nloop invariant i82: 0 <= x <= 2*y + 4;\nloop invariant i83: 0 <= y <= 2*(x - 1) / 3;\nloop invariant i84: x % 3 == 1 ==> (y >= 0);\nloop invariant i85: x % 3 == 2 ==> (y >= 0);\nloop invariant i86: x % 3 == 0 ==> (y >= 1);\nloop invariant i87: x % 3 == 1 || x % 3 == 2 || x % 3 == 0;\nloop invariant i88: (x % 3 != 1 && x % 3 != 2 && x % 3 != 0) || (y >= 1);\nloop invariant i89: (x % 3 != 1 && x % 3 != 2 && x % 3 != 0) || (y == 0);\nloop invariant i90: (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y >= 0);\nloop invariant i91: (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 0);\nloop invariant i92: (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 1);\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 19,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  /*@\n\n\nloop invariant i3: x % 3 == x % 3;\nloop invariant i4: (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i5: (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i6: (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i7: (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i8: (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i9: (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i10: (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i11: (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i12: (x % 3 == 2) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i13: (x % 3 == 0) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i14: (x % 3 == 0) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i15: (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i16: (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i17: (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i18: (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i19: (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i20: (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i21: (x % 3 == 2) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i22: (x % 3 == 0) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i23: (x % 3 == 0) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i24: (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i25: (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i26: (x % 3 == 1) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2) ==> (x % 3 == 2);\nloop invariant i27: (x % 3 == 1) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0) ==> (x % 3 == 0);\nloop invariant i28: (x % 3 == 2) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1) ==> (x % 3 == 1);\nloop invariant i29: 0 <= y <= 1;\n\n\n\n\n\n\nloop invariant i36: x % 3 == 0 ==> y == 1;\n\nloop invariant i38: 0 <= x <= 4294967295;\n\n\n\n\nloop invariant i43: x % 3 != 1 ==> x % 3 == 0 || x % 3 == 2;\nloop invariant i44: x % 3 == 1 ==> x % 3 == 1;\nloop invariant i45: x % 3 == 2 ==> x % 3 == 2;\nloop invariant i46: 0 <= x <= UINT_MAX;\nloop invariant i47: 0 <= y <= 2;\n\n\n\n\nloop invariant i52: 1 <= y <= 2;\n\n\n\nloop invariant i56: 0 <= x;\n\nloop invariant i58: x % 3 != 0 ==> y == 1;\n\n\n\nloop invariant i62: x % 3 != 0 ==> x % 3 == 0 ==> y == 1;\nloop invariant i63: x % 3 != 0 ==> x % 3 == 1 ==> y == 1;\nloop invariant i64: x % 3 != 0 ==> x % 3 == 2 ==> y == 1;\nloop invariant i65: x % 3 != 0 ==> x % 3 == 0 ==> y == 0;\nloop invariant i66: 0 <= y;\nloop invariant i67: x >= 0;\n\n\n\n\n\n\n\n\nloop invariant i76: y >= 0;\nloop invariant i77: y <= 100000;\n\nloop invariant i79: 0 <= x <= 4294967295; loop invariant 0 <= y <= 2; loop invariant x % 3 == 2 ==> y == 0; loop invariant x % 3 == 0 ==> y == 0; loop invariant x % 3 == 1 ==> y == 0; loop invariant x % 3 == 2 ==> x >= 2; loop invariant x % 3 == 0 ==> x >= 0; loop invariant x % 3 == 1 ==> x >= 1; loop invariant x % 3 == 2 ==> x <= 4294967293; loop invariant x % 3 == 0 ==> x <= 4294967295; loop invariant x % 3 == 1 ==> x <= 4294967294; loop invariant y == 0 ==> x % 3 != 1; loop invariant y == 0 ==> x % 3 != 2; loop invariant y == 0 ==> x % 3 != 0; loop invariant y == 1 ==> x % 3 == 1; loop invariant y == 1 ==> x % 3 == 2; loop invariant y == 1 ==> x % 3 == 0;\n\n\nloop invariant i82: 0 <= x <= 2*y + 4;\nloop invariant i83: 0 <= y <= 2*(x - 1) / 3;\nloop invariant i84: x % 3 == 1 ==> (y >= 0);\nloop invariant i85: x % 3 == 2 ==> (y >= 0);\nloop invariant i86: x % 3 == 0 ==> (y >= 1);\nloop invariant i87: x % 3 == 1 || x % 3 == 2 || x % 3 == 0;\nloop invariant i88: (x % 3 != 1 && x % 3 != 2 && x % 3 != 0) || (y >= 1);\nloop invariant i89: (x % 3 != 1 && x % 3 != 2 && x % 3 != 0) || (y == 0);\nloop invariant i90: (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y >= 0);\nloop invariant i91: (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 0);\nloop invariant i92: (x % 3 == 1 || x % 3 == 2 || x % 3 == 0) || (y == 1);\n*/\nwhile(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 98,
        "success_count": 88,
        "failure_count": 10,
        "success_rate": 0.8979591836734694
    }
}