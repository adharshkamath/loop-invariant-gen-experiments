{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT * 2;\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= j + k;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant k >= 0;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= LARGE_INT - 1;\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= LARGE_INT - 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i == 1 ==> j == 1;\nloop invariant i == 1 ==> k == 1;\nloop invariant i == LARGE_INT - 1 ==> j == LARGE_INT - 1;\nloop invariant i == LARGE_INT - 1 ==> k == 0;\nloop invariant i == j ==> k == 0;\nloop invariant i == j + 1 ==> k == 1;\nloop invariant i + k == 2 ==> j == LARGE_INT - 1;\nloop invariant i + k == 2 ==> k == 0;\nloop invariant i + k == 2 ==> j == LARGE_INT - 2;\nloop invariant i + k == 1 ==> j == LARGE_INT - 2;\nloop invariant i + k == 1 ==> k == 1;\nloop invariant i + k == 1 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j - i * k <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant j >= i;\nloop invariant k >= 0;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant 0 <= k && k <= 1;\nloop invariant 1 <= j && j <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= i + k && k <= 1;\nloop invariant i >= 1;\nloop invariant j - i >= 0;\nloop invariant j - i <= k + 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i <= LARGE_INT;\nloop invariant j >= i;\nloop invariant j <= i + k;\nloop invariant i + k <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1;\nloop invariant j >= 1 + i * k;\nloop invariant 0 <= k && k <= 1;\nloop invariant 1 <= i && i <= LARGE_INT - 1;\nloop invariant 1 <= j && j <= LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant i < LARGE_INT ==> i + k < LARGE_INT;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + i;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT && 1 <= j && k >= 0 && k <= 1;\nloop invariant i = j + k * (LARGE_INT - i) / (LARGE_INT - 1);\nloop invariant k == LARGE_INT - i;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant j >= i * k;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= k <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j && j <= LARGE_INT + k;\nloop invariant 1 <= i && i <= LARGE_INT;\nloop invariant 0 <= k && k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant j <= LARGE_INT + k;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= k && k <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= i + k <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= LARGE_INT - 1;\nloop invariant 0 <= k <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant i == 1 + LARGE_INT * (1 - k);\nloop invariant i + k >= 1 && i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT * 2;\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\nloop invariant i4: i + k >= 1;\nloop invariant i5: i + k <= 2;\nloop invariant i6: i >= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= j + k;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant k >= 0;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k <= 1;\nloop invariant k >= 0;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant j >= 1;\nloop invariant j <= j + k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\nloop invariant i4: 1 <= i + k && i + k <= 2;\nloop invariant i5: i >= 1;\n\n\n\nloop invariant i9: k <= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= LARGE_INT - 1;\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant j >= 1;\nloop invariant j <= LARGE_INT - 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i == 1 ==> j == 1;\nloop invariant i == 1 ==> k == 1;\nloop invariant i == LARGE_INT - 1 ==> j == LARGE_INT - 1;\nloop invariant i == LARGE_INT - 1 ==> k == 0;\nloop invariant i == j ==> k == 0;\nloop invariant i == j + 1 ==> k == 1;\nloop invariant i + k == 2 ==> j == LARGE_INT - 1;\nloop invariant i + k == 2 ==> k == 0;\nloop invariant i + k == 2 ==> j == LARGE_INT - 2;\nloop invariant i + k == 1 ==> j == LARGE_INT - 2;\nloop invariant i + k == 1 ==> k == 1;\nloop invariant i + k == 1 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i + k == 0 ==> k == 1;\nloop invariant i + k == 0 ==> j == LARGE_INT - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\nloop invariant i4: i >= 1;\nloop invariant i5: i + k >= 1;\nloop invariant i6: i + k <= 2;\n\nloop invariant i8: j <= LARGE_INT - 1;\n\nloop invariant i10: k <= 1;\nloop invariant i11: i == 1 ==> j == 1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i23: i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i24: i + k == 0 ==> k == 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 1 <= i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k <= LARGE_INT;\nloop invariant i <= LARGE_INT;\nloop invariant j <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 1 <= i <= LARGE_INT;\n\n\nloop invariant i4: 1 <= i + k <= 2;\nloop invariant i5: i >= 1;\n\n\nloop invariant i8: k <= 1;\nloop invariant i9: i + k <= LARGE_INT;\nloop invariant i10: i <= LARGE_INT;\n\nloop invariant i12: i + k <= 2;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j - i * k <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant i >= 1;\nloop invariant j >= i;\nloop invariant k >= 0;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\nloop invariant i4: i >= 1;\n\n\nloop invariant i7: i + k <= 2;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant 0 <= k && k <= 1;\nloop invariant 1 <= j && j <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 1 <= i + k && i + k <= 2;\nloop invariant i3: i >= 1;\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= i + k && k <= 1;\nloop invariant i >= 1;\nloop invariant j - i >= 0;\nloop invariant j - i <= k + 1;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i <= LARGE_INT;\nloop invariant j >= i;\nloop invariant j <= i + k;\nloop invariant i + k <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\nloop invariant i2: i >= 1;\n\n\n\nloop invariant i6: k <= 1;\nloop invariant i7: i <= LARGE_INT;\n\n\nloop invariant i10: i + k <= LARGE_INT;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i + k && i + k <= 2 && i >= 1;\nloop invariant j >= 1 + i * k;\nloop invariant 0 <= k && k <= 1;\nloop invariant 1 <= i && i <= LARGE_INT - 1;\nloop invariant 1 <= j && j <= LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant i < LARGE_INT ==> i + k < LARGE_INT;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + i;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant k == 0 ==> i == LARGE_INT - 1;\nloop invariant k == 1 ==> i == LARGE_INT - 2;\nloop invariant k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i + k && i + k <= 2 && i >= 1;\n\n\n\n\nloop invariant i6: i < LARGE_INT ==> i + k < LARGE_INT;\n\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT && 1 <= j && k >= 0 && k <= 1;\nloop invariant i = j + k * (LARGE_INT - i) / (LARGE_INT - 1);\nloop invariant k == LARGE_INT - i;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 0;\nloop invariant i == LARGE_INT;\nloop invariant j == 1;\nloop invariant k == 1;\nloop invariant i == LARGE_INT;\nloop invariant j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant k == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant j >= i * k;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= k <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\nloop invariant i2: 0 <= i <= LARGE_INT;\nloop invariant i3: j >= i * k;\nloop invariant i4: i <= LARGE_INT;\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= j && j <= LARGE_INT + k;\nloop invariant 1 <= i && i <= LARGE_INT;\nloop invariant 0 <= k && k <= 1;\nloop invariant 1 <= i + k && i + k <= 2;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant j <= LARGE_INT + k;\nloop invariant i <= LARGE_INT;\nloop invariant 0 <= k && k <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\nloop invariant i2: 1 <= i && i <= LARGE_INT;\n\nloop invariant i4: 1 <= i + k && i + k <= 2;\nloop invariant i5: i >= 1;\n\n\nloop invariant i8: i <= LARGE_INT;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant 0 <= i + k <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\nloop invariant i4: 0 <= i + k <= 2;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= LARGE_INT - 1;\nloop invariant 0 <= k <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j <= LARGE_INT;\nloop invariant 0 <= k <= 1;\nloop invariant i == 1 + LARGE_INT * (1 - k);\nloop invariant i + k >= 1 && i + k <= 2;\nloop invariant i >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\n\nloop invariant i5: i + k >= 1 && i + k <= 2;\nloop invariant i6: i >= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT - 1;\nloop invariant 1 <= j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant 0 <= k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\nloop invariant j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant k >= 0;\nloop invariant k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant i >= 1;\nloop invariant i < LARGE_INT;\nloop invariant j >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\n\n\n\nloop invariant i4: i + k >= 1;\nloop invariant i5: i + k <= 2;\nloop invariant i6: i >= 1;\n\n\n\n\nloop invariant i11: k <= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 73: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= j <= LARGE_INT * 2;\nloop invariant i3: 0 <= k <= 1;\nloop invariant i4: i + k >= 1;\nloop invariant i5: i + k <= 2;\nloop invariant i6: i >= 1;\nloop invariant i7: 0 <= i <= LARGE_INT - 1;\nloop invariant i8: 1 <= j <= j + k;\nloop invariant i9: 1 <= i + k && i + k <= 2;\nloop invariant i10: k >= 0;\nloop invariant i11: j >= 1;\nloop invariant i12: j <= j + k;\nloop invariant i13: k <= 1;\nloop invariant i14: 1 <= i <= LARGE_INT - 1;\nloop invariant i15: 1 <= j <= LARGE_INT - 1;\nloop invariant i16: j <= LARGE_INT - 1;\nloop invariant i17: i == 1 ==> j == 1;\nloop invariant i18: i == 1 ==> k == 1;\nloop invariant i19: i == LARGE_INT - 1 ==> j == LARGE_INT - 1;\nloop invariant i20: i == LARGE_INT - 1 ==> k == 0;\nloop invariant i21: i == j ==> k == 0;\nloop invariant i22: i == j + 1 ==> k == 1;\nloop invariant i23: i + k == 2 ==> j == LARGE_INT - 1;\nloop invariant i24: i + k == 2 ==> k == 0;\nloop invariant i25: i + k == 2 ==> j == LARGE_INT - 2;\nloop invariant i26: i + k == 1 ==> j == LARGE_INT - 2;\nloop invariant i27: i + k == 1 ==> k == 1;\nloop invariant i28: i + k == 1 ==> j == LARGE_INT - 1;\nloop invariant i29: i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i30: i + k == 0 ==> k == 1;\nloop invariant i31: 1 <= i <= LARGE_INT;\nloop invariant i32: 1 <= j <= LARGE_INT;\nloop invariant i33: 1 <= i + k <= 2;\nloop invariant i34: i + k <= LARGE_INT;\nloop invariant i35: i <= LARGE_INT;\nloop invariant i36: j <= LARGE_INT;\nloop invariant i37: 1 <= j - i * k <= LARGE_INT;\nloop invariant i38: j >= i;\nloop invariant i39: 0 <= k && k <= 1;\nloop invariant i40: 1 <= j && j <= 2;\nloop invariant i41: 0 <= k <= i + k && k <= 1;\nloop invariant i42: j - i >= 0;\nloop invariant i43: j - i <= k + 1;\nloop invariant i44: j <= i + k;\nloop invariant i45: 0 <= i + k && i + k <= 2 && i >= 1;\nloop invariant i46: j >= 1 + i * k;\nloop invariant i47: 1 <= i && i <= LARGE_INT - 1;\nloop invariant i48: 1 <= j && j <= LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant i49: i < LARGE_INT ==> i + k < LARGE_INT;\nloop invariant i50: k == 0 ==> j == LARGE_INT * (LARGE_INT + 1) / 2;\nloop invariant i51: k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + i;\nloop invariant i52: k == 0 ==> i == LARGE_INT - 1;\nloop invariant i53: k == 1 ==> i == LARGE_INT - 2;\nloop invariant i54: k == 1 ==> j == LARGE_INT * (LARGE_INT + 1) / 2 + LARGE_INT - 1;\nloop invariant i55: 0 <= i <= LARGE_INT && 1 <= j && k >= 0 && k <= 1;\nloop invariant i56: i = j + k * (LARGE_INT - i) / (LARGE_INT - 1);\nloop invariant i57: k == LARGE_INT - i;\nloop invariant i58: j == 1 + k * (LARGE_INT - 1) / 2;\nloop invariant i59: i == LARGE_INT;\nloop invariant i60: k == 1;\nloop invariant i61: k == 0;\nloop invariant i62: j == 1;\nloop invariant i63: 0 <= j <= LARGE_INT;\nloop invariant i64: j >= i * k;\nloop invariant i65: 1 <= j && j <= LARGE_INT + k;\nloop invariant i66: 1 <= i && i <= LARGE_INT;\nloop invariant i67: j <= LARGE_INT + k;\nloop invariant i68: 0 <= i + k <= 2;\nloop invariant i69: i == 1 + LARGE_INT * (1 - k);\nloop invariant i70: i + k >= 1 && i + k <= 2;\nloop invariant i71: 1 <= j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\nloop invariant i72: i < LARGE_INT;\nloop invariant i73: j <= (LARGE_INT - 1) * (1 + unknown_int()) / 2;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 32,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n\nloop invariant i4: i + k >= 1;\nloop invariant i5: i + k <= 2;\nloop invariant i6: i >= 1;\n\n\nloop invariant i9: 1 <= i + k && i + k <= 2;\n\n\n\nloop invariant i13: k <= 1;\n\n\nloop invariant i16: j <= LARGE_INT - 1;\nloop invariant i17: i == 1 ==> j == 1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i29: i + k == 0 ==> j == LARGE_INT - 1;\nloop invariant i30: i + k == 0 ==> k == 1;\nloop invariant i31: 1 <= i <= LARGE_INT;\n\nloop invariant i33: 1 <= i + k <= 2;\nloop invariant i34: i + k <= LARGE_INT;\nloop invariant i35: i <= LARGE_INT;\nloop invariant i36: j <= LARGE_INT;\n\n\n\n\n\n\nloop invariant i43: j - i <= k + 1;\nloop invariant i44: j <= i + k;\nloop invariant i45: 0 <= i + k && i + k <= 2 && i >= 1;\n\n\n\nloop invariant i49: i < LARGE_INT ==> i + k < LARGE_INT;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i64: j >= i * k;\n\nloop invariant i66: 1 <= i && i <= LARGE_INT;\nloop invariant i67: j <= LARGE_INT + k;\nloop invariant i68: 0 <= i + k <= 2;\n\nloop invariant i70: i + k >= 1 && i + k <= 2;\n\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c"
        ],
        "skipped": [],
        "total": 109,
        "success_count": 96,
        "failure_count": 13,
        "success_rate": 0.8807339449541285
    }
}