{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= lo <= 100000;\nloop invariant 0 <= mid <= 100000;\nloop invariant 0 <= hi <= 200000;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo == hi;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\n*/\n```",
            "```\n/*@\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= 0;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= lo + hi;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant mid == 0;\nloop invariant lo == hi;\nloop invariant lo >= 0 && lo <= LARGE_INT;\nloop invariant hi >= 0 && hi <= 2 * LARGE_INT;\nloop invariant mid >= 0 && mid <= LARGE_INT;\nloop invariant mid < LARGE_INT ==> mid >= 1;\nloop invariant lo == hi ==> lo == hi && mid == 0;\nloop invariant lo == hi && mid == 0 ==> lo == hi;\n*/\n```",
            "```\n/*@\nloop invariant lo <= hi;\nloop invariant mid == 0;\nloop invariant lo == hi;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= 2*mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= hi <= 2*mid;\nloop invariant lo == hi ==> mid == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= lo <= hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo == hi ==> lo >= 0;\nloop invariant lo == hi ==> hi >= 0;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo >= 0;\nloop invariant hi >= 0;\nloop invariant lo <= hi;\nloop invariant lo <= LARGE_INT;\nloop invariant hi <= LARGE_INT;\nloop invariant lo + hi >= 1;\nloop invariant lo + hi <= 2 * LARGE_INT - 1;\nloop invariant (mid > 0 ==> lo < LARGE_INT);\nloop invariant (mid > 0 ==> hi > 0);\nloop invariant (mid > 0 ==> lo + mid + hi == 2 * mid);\nloop invariant (mid > 0 ==> lo <= hi);\nloop invariant (mid > 0 ==> lo >= 0);\nloop invariant (mid > 0 ==> hi >= 0);\nloop invariant (mid > 0 ==> lo <= LARGE_INT);\nloop invariant (mid > 0 ==> hi <= LARGE_INT);\nloop invariant (mid > 0 ==> lo + hi >= 1);\nloop invariant (mid > 0 ==> lo + hi <= 2 * LARGE_INT - 1);\nloop invariant (mid == 0 ==> lo == hi);\nloop invariant (mid == 0 ==> lo == LARGE_INT);\nloop invariant (mid == 0 ==> hi == LARGE_INT);\nloop invariant (mid == 0 ==> lo == hi + 1);\nloop invariant (mid == 0 ==> lo == hi - 1);\nloop invariant (mid == 0 ==> lo == hi + 2);\nloop invariant (mid == 0 ==> lo == hi - 2);\nloop invariant (mid == 0 ==> lo == hi + 3);\nloop invariant (mid == 0 ==> lo == hi - 3);\nloop invariant (mid == 0 ==> lo == hi + 4);\nloop invariant (mid == 0 ==> lo == hi - 4);\nloop invariant (mid == 0 ==> lo == hi + 5);\nloop invariant (mid == 0 ==> lo == hi - 5);\nloop invariant (mid == 0 ==> lo == hi + 6);\nloop invariant (mid == 0 ==> lo == hi - 6);\nloop invariant (mid == 0 ==> lo == hi + 7);\nloop invariant (mid == 0 ==> lo == hi - 7);\nloop invariant (mid == 0 ==> lo == hi + 8);\nloop invariant (mid == 0 ==> lo == hi - 8);\nloop invariant (mid == 0 ==> lo == hi + 9);\nloop invariant (mid == 0 ==> lo == hi - 9);\nloop invariant (mid == 0 ==> lo == hi + 10);\nloop invariant (mid == 0 ==> lo == hi - 10);\nloop invariant (mid == 0 ==> lo == hi + 11);\nloop invariant (mid == 0 ==> lo == hi - 11);\nloop invariant (mid == 0 ==> lo == hi + 12);\nloop invariant (mid == 0 ==> lo == hi - 12);\nloop invariant (mid == 0 ==> lo == hi + 13);\nloop invariant (mid == 0 ==> lo == hi - 13);\nloop invariant (mid == 0 ==> lo == hi + 14);\nloop invariant (mid == 0 ==> lo == hi - 14);\nloop invariant (mid == 0 ==> lo == hi + 15);\nloop invariant (mid == 0 ==> lo == hi - 15);\nloop invariant (mid == 0 ==> lo == hi + 16);\nloop invariant (mid == 0 ==> lo == hi - 16);\nloop invariant (mid == 0 ==> lo == hi + 17);\nloop invariant (mid == 0 ==> lo == hi - 17);\nloop invariant (mid == 0 ==> lo == hi + 18);\nloop invariant (mid == 0 ==> lo == hi - 18);\nloop invariant (mid == 0 ==> lo == hi + 19);\nloop invariant (mid == 0 ==> lo == hi - 19);\nloop invariant (mid == 0 ==> lo == hi + 20);\nloop invariant (mid == 0 ==> lo == hi - 20);\nloop invariant (mid == 0 ==> lo == hi + 21);\nloop invariant (mid == 0 ==> lo == hi - 21);\nloop invariant (mid == 0 ==> lo == hi + 22);\nloop invariant (mid == 0 ==> lo == hi - 22);\nloop invariant (mid == 0 ==> lo == hi + 23);\nloop invariant (mid == 0 ==> lo == hi - 23);\nloop invariant (mid == 0 ==> lo == hi + 24);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo >= 1;\nloop invariant hi <= 2*LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid == hi - mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= mid <= mid;\nloop invariant mid <= hi <= 2*mid;\nloop invariant lo + mid == hi;\nloop invariant mid > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant hi >= 2*mid;\nloop invariant 0 <= lo <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant hi >= 2*mid;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo = hi;\nloop invariant lo >= 0;\nloop invariant lo <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant 0 <= lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\n*/\n```",
            "```\n/*@\nloop invariant lo + mid = hi;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant mid > 0;\n*/\n```",
            "```\n/*@\nloop invariant y > 0;\nloop invariant x >= y;\nloop invariant lo >= 0;\nloop invariant mid > 0;\nloop invariant hi >= 0;\nloop invariant lo + mid + hi == 2*mid;\nloop invariant (lo + 1) == hi;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant 1 <= mid <= LARGE_INT;\nloop invariant hi == 2 * mid;\nloop invariant lo + mid == hi;\nloop invariant hi - mid == lo;\nloop invariant hi - lo == mid;\nloop invariant mid <= hi;\nloop invariant mid >= lo;\nloop invariant mid >= 1;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant hi <= 2 * LARGE_INT;\nloop invariant lo <= 2 * LARGE_INT;\nloop invariant lo >= 0;\nloop invariant hi >= 1;\nloop invariant lo <= hi - 1;\nloop invariant lo >= mid;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo >= mid;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= 100000;\nloop invariant 0 <= mid <= 100000;\nloop invariant 0 <= hi <= 200000;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo == hi;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\nloop invariant lo == hi ==> mid <= 0;\nloop invariant mid <= 0 ==> lo == hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= 0;\nloop invariant lo <= hi;\nloop invariant lo + mid <= hi;\nloop invariant mid <= lo + hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: mid >= 0;\n\n\n\nloop invariant i6: mid <= lo + hi;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant mid == 0;\nloop invariant lo == hi;\nloop invariant lo >= 0 && lo <= LARGE_INT;\nloop invariant hi >= 0 && hi <= 2 * LARGE_INT;\nloop invariant mid >= 0 && mid <= LARGE_INT;\nloop invariant mid < LARGE_INT ==> mid >= 1;\nloop invariant lo == hi ==> lo == hi && mid == 0;\nloop invariant lo == hi && mid == 0 ==> lo == hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\n\nloop invariant i6: mid >= 0 && mid <= LARGE_INT;\n\n\nloop invariant i9: lo == hi && mid == 0 ==> lo == hi;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant lo <= hi;\nloop invariant mid == 0;\nloop invariant lo == hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= 2*mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= hi <= 2*mid;\nloop invariant lo == hi ==> mid == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= LARGE_INT;\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= lo <= hi;\nloop invariant lo == hi ==> mid == 0;\nloop invariant lo == hi ==> lo >= 0;\nloop invariant lo == hi ==> hi >= 0;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\nloop invariant lo == hi ==> lo == hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\n\n\n\nloop invariant i6: lo == hi ==> lo == hi;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 28,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo + mid + hi == 2 * mid;\nloop invariant lo >= 0;\nloop invariant hi >= 0;\nloop invariant lo <= hi;\nloop invariant lo <= LARGE_INT;\nloop invariant hi <= LARGE_INT;\nloop invariant lo + hi >= 1;\nloop invariant lo + hi <= 2 * LARGE_INT - 1;\nloop invariant (mid > 0 ==> lo < LARGE_INT);\nloop invariant (mid > 0 ==> hi > 0);\nloop invariant (mid > 0 ==> lo + mid + hi == 2 * mid);\nloop invariant (mid > 0 ==> lo <= hi);\nloop invariant (mid > 0 ==> lo >= 0);\nloop invariant (mid > 0 ==> hi >= 0);\nloop invariant (mid > 0 ==> lo <= LARGE_INT);\nloop invariant (mid > 0 ==> hi <= LARGE_INT);\nloop invariant (mid > 0 ==> lo + hi >= 1);\nloop invariant (mid > 0 ==> lo + hi <= 2 * LARGE_INT - 1);\nloop invariant (mid == 0 ==> lo == hi);\nloop invariant (mid == 0 ==> lo == LARGE_INT);\nloop invariant (mid == 0 ==> hi == LARGE_INT);\nloop invariant (mid == 0 ==> lo == hi + 1);\nloop invariant (mid == 0 ==> lo == hi - 1);\nloop invariant (mid == 0 ==> lo == hi + 2);\nloop invariant (mid == 0 ==> lo == hi - 2);\nloop invariant (mid == 0 ==> lo == hi + 3);\nloop invariant (mid == 0 ==> lo == hi - 3);\nloop invariant (mid == 0 ==> lo == hi + 4);\nloop invariant (mid == 0 ==> lo == hi - 4);\nloop invariant (mid == 0 ==> lo == hi + 5);\nloop invariant (mid == 0 ==> lo == hi - 5);\nloop invariant (mid == 0 ==> lo == hi + 6);\nloop invariant (mid == 0 ==> lo == hi - 6);\nloop invariant (mid == 0 ==> lo == hi + 7);\nloop invariant (mid == 0 ==> lo == hi - 7);\nloop invariant (mid == 0 ==> lo == hi + 8);\nloop invariant (mid == 0 ==> lo == hi - 8);\nloop invariant (mid == 0 ==> lo == hi + 9);\nloop invariant (mid == 0 ==> lo == hi - 9);\nloop invariant (mid == 0 ==> lo == hi + 10);\nloop invariant (mid == 0 ==> lo == hi - 10);\nloop invariant (mid == 0 ==> lo == hi + 11);\nloop invariant (mid == 0 ==> lo == hi - 11);\nloop invariant (mid == 0 ==> lo == hi + 12);\nloop invariant (mid == 0 ==> lo == hi - 12);\nloop invariant (mid == 0 ==> lo == hi + 13);\nloop invariant (mid == 0 ==> lo == hi - 13);\nloop invariant (mid == 0 ==> lo == hi + 14);\nloop invariant (mid == 0 ==> lo == hi - 14);\nloop invariant (mid == 0 ==> lo == hi + 15);\nloop invariant (mid == 0 ==> lo == hi - 15);\nloop invariant (mid == 0 ==> lo == hi + 16);\nloop invariant (mid == 0 ==> lo == hi - 16);\nloop invariant (mid == 0 ==> lo == hi + 17);\nloop invariant (mid == 0 ==> lo == hi - 17);\nloop invariant (mid == 0 ==> lo == hi + 18);\nloop invariant (mid == 0 ==> lo == hi - 18);\nloop invariant (mid == 0 ==> lo == hi + 19);\nloop invariant (mid == 0 ==> lo == hi - 19);\nloop invariant (mid == 0 ==> lo == hi + 20);\nloop invariant (mid == 0 ==> lo == hi - 20);\nloop invariant (mid == 0 ==> lo == hi + 21);\nloop invariant (mid == 0 ==> lo == hi - 21);\nloop invariant (mid == 0 ==> lo == hi + 22);\nloop invariant (mid == 0 ==> lo == hi - 22);\nloop invariant (mid == 0 ==> lo == hi + 23);\nloop invariant (mid == 0 ==> lo == hi - 23);\nloop invariant (mid == 0 ==> lo == hi + 24);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\nloop invariant i3: lo >= 0;\n\n\n\n\nloop invariant i8: lo + hi >= 1;\n\n\n\n\n\nloop invariant i14: (mid > 0 ==> lo >= 0);\n\n\n\nloop invariant i18: (mid > 0 ==> lo + hi >= 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo >= 1;\nloop invariant hi <= 2*LARGE_INT;\nloop invariant lo <= hi;\nloop invariant lo + mid == hi - mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\nloop invariant i3: hi <= 2*LARGE_INT;\nloop invariant i4: lo <= hi;\nloop invariant i5: lo + mid == hi - mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= mid <= mid;\nloop invariant mid <= hi <= 2*mid;\nloop invariant lo + mid == hi;\nloop invariant mid > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= mid;\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant hi >= 2*mid;\nloop invariant 0 <= lo <= hi;\nloop invariant mid >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= mid;\nloop invariant mid <= hi;\nloop invariant hi >= 2*mid;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: mid >= 0;\nloop invariant i3: mid <= LARGE_INT;\n\nloop invariant i5: mid <= hi;\nloop invariant i6: hi >= 2*mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant lo = hi;\nloop invariant lo >= 0;\nloop invariant lo <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\n\nloop invariant i3: lo >= 0;\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant 0 <= lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant 0 <= lo <= 2 * mid;\nloop invariant hi <= 2 * mid;\nloop invariant 0 <= mid <= 2 * mid;\nloop invariant lo <= hi;\nloop invariant mid >= 0;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant lo <= 2 * mid;\nloop invariant hi >= 0;\nloop invariant lo >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\nloop invariant i3: 0 <= mid <= 2 * mid;\n\nloop invariant i5: mid >= 0;\n\n\nloop invariant i8: lo >= 0;\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant lo + mid = hi;\nloop invariant lo >= 0;\nloop invariant hi <= 2 * mid;\nloop invariant mid > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: lo >= 0;\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant y > 0;\nloop invariant x >= y;\nloop invariant lo >= 0;\nloop invariant mid > 0;\nloop invariant hi >= 0;\nloop invariant lo + mid + hi == 2*mid;\nloop invariant (lo + 1) == hi;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\nloop invariant i3: lo >= 0;\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= lo <= hi;\nloop invariant 1 <= mid <= LARGE_INT;\nloop invariant hi == 2 * mid;\nloop invariant lo + mid == hi;\nloop invariant hi - mid == lo;\nloop invariant hi - lo == mid;\nloop invariant mid <= hi;\nloop invariant mid >= lo;\nloop invariant mid >= 1;\nloop invariant mid <= LARGE_INT;\nloop invariant lo <= hi;\nloop invariant hi <= 2 * LARGE_INT;\nloop invariant lo <= 2 * LARGE_INT;\nloop invariant lo >= 0;\nloop invariant hi >= 1;\nloop invariant lo <= hi - 1;\nloop invariant lo >= mid;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo >= mid;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\nloop invariant lo >= 0;\nloop invariant lo <= hi - 1;\nloop invariant lo <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\n\n\nloop invariant i7: mid <= hi;\n\n\nloop invariant i10: mid <= LARGE_INT;\n\nloop invariant i12: hi <= 2 * LARGE_INT;\n\nloop invariant i14: lo >= 0;\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 123: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= lo <= 100000;\nloop invariant i2: 0 <= mid <= 100000;\nloop invariant i3: 0 <= hi <= 200000;\nloop invariant i4: lo + mid + hi == 2 * mid;\nloop invariant i5: lo == hi;\nloop invariant i6: mid <= 0 ==> lo == hi;\nloop invariant i7: lo == hi ==> mid <= 0;\nloop invariant i8: lo >= 0;\nloop invariant i9: mid >= 0;\nloop invariant i10: hi >= 0;\nloop invariant i11: lo <= hi;\nloop invariant i12: lo + mid <= hi;\nloop invariant i13: mid <= lo + hi;\nloop invariant i14: 0 <= lo <= hi;\nloop invariant i15: mid == 0;\nloop invariant i16: lo >= 0 && lo <= LARGE_INT;\nloop invariant i17: hi >= 0 && hi <= 2 * LARGE_INT;\nloop invariant i18: mid >= 0 && mid <= LARGE_INT;\nloop invariant i19: mid < LARGE_INT ==> mid >= 1;\nloop invariant i20: lo == hi ==> lo == hi && mid == 0;\nloop invariant i21: lo == hi && mid == 0 ==> lo == hi;\nloop invariant i22: 0 <= lo <= 2*mid;\nloop invariant i23: 0 <= mid <= LARGE_INT;\nloop invariant i24: 0 <= hi <= 2*mid;\nloop invariant i25: lo == hi ==> mid == 0;\nloop invariant i26: lo == hi ==> lo >= 0;\nloop invariant i27: lo == hi ==> hi >= 0;\nloop invariant i28: lo == hi ==> lo == hi;\nloop invariant i29: lo <= LARGE_INT;\nloop invariant i30: hi <= LARGE_INT;\nloop invariant i31: lo + hi >= 1;\nloop invariant i32: lo + hi <= 2 * LARGE_INT - 1;\nloop invariant i33: (mid > 0 ==> lo < LARGE_INT);\nloop invariant i34: (mid > 0 ==> hi > 0);\nloop invariant i35: (mid > 0 ==> lo + mid + hi == 2 * mid);\nloop invariant i36: (mid > 0 ==> lo <= hi);\nloop invariant i37: (mid > 0 ==> lo >= 0);\nloop invariant i38: (mid > 0 ==> hi >= 0);\nloop invariant i39: (mid > 0 ==> lo <= LARGE_INT);\nloop invariant i40: (mid > 0 ==> hi <= LARGE_INT);\nloop invariant i41: (mid > 0 ==> lo + hi >= 1);\nloop invariant i42: (mid > 0 ==> lo + hi <= 2 * LARGE_INT - 1);\nloop invariant i43: (mid == 0 ==> lo == hi);\nloop invariant i44: (mid == 0 ==> lo == LARGE_INT);\nloop invariant i45: (mid == 0 ==> hi == LARGE_INT);\nloop invariant i46: (mid == 0 ==> lo == hi + 1);\nloop invariant i47: (mid == 0 ==> lo == hi - 1);\nloop invariant i48: (mid == 0 ==> lo == hi + 2);\nloop invariant i49: (mid == 0 ==> lo == hi - 2);\nloop invariant i50: (mid == 0 ==> lo == hi + 3);\nloop invariant i51: (mid == 0 ==> lo == hi - 3);\nloop invariant i52: (mid == 0 ==> lo == hi + 4);\nloop invariant i53: (mid == 0 ==> lo == hi - 4);\nloop invariant i54: (mid == 0 ==> lo == hi + 5);\nloop invariant i55: (mid == 0 ==> lo == hi - 5);\nloop invariant i56: (mid == 0 ==> lo == hi + 6);\nloop invariant i57: (mid == 0 ==> lo == hi - 6);\nloop invariant i58: (mid == 0 ==> lo == hi + 7);\nloop invariant i59: (mid == 0 ==> lo == hi - 7);\nloop invariant i60: (mid == 0 ==> lo == hi + 8);\nloop invariant i61: (mid == 0 ==> lo == hi - 8);\nloop invariant i62: (mid == 0 ==> lo == hi + 9);\nloop invariant i63: (mid == 0 ==> lo == hi - 9);\nloop invariant i64: (mid == 0 ==> lo == hi + 10);\nloop invariant i65: (mid == 0 ==> lo == hi - 10);\nloop invariant i66: (mid == 0 ==> lo == hi + 11);\nloop invariant i67: (mid == 0 ==> lo == hi - 11);\nloop invariant i68: (mid == 0 ==> lo == hi + 12);\nloop invariant i69: (mid == 0 ==> lo == hi - 12);\nloop invariant i70: (mid == 0 ==> lo == hi + 13);\nloop invariant i71: (mid == 0 ==> lo == hi - 13);\nloop invariant i72: (mid == 0 ==> lo == hi + 14);\nloop invariant i73: (mid == 0 ==> lo == hi - 14);\nloop invariant i74: (mid == 0 ==> lo == hi + 15);\nloop invariant i75: (mid == 0 ==> lo == hi - 15);\nloop invariant i76: (mid == 0 ==> lo == hi + 16);\nloop invariant i77: (mid == 0 ==> lo == hi - 16);\nloop invariant i78: (mid == 0 ==> lo == hi + 17);\nloop invariant i79: (mid == 0 ==> lo == hi - 17);\nloop invariant i80: (mid == 0 ==> lo == hi + 18);\nloop invariant i81: (mid == 0 ==> lo == hi - 18);\nloop invariant i82: (mid == 0 ==> lo == hi + 19);\nloop invariant i83: (mid == 0 ==> lo == hi - 19);\nloop invariant i84: (mid == 0 ==> lo == hi + 20);\nloop invariant i85: (mid == 0 ==> lo == hi - 20);\nloop invariant i86: (mid == 0 ==> lo == hi + 21);\nloop invariant i87: (mid == 0 ==> lo == hi - 21);\nloop invariant i88: (mid == 0 ==> lo == hi + 22);\nloop invariant i89: (mid == 0 ==> lo == hi - 22);\nloop invariant i90: (mid == 0 ==> lo == hi + 23);\nloop invariant i91: (mid == 0 ==> lo == hi - 23);\nloop invariant i92: (mid == 0 ==> lo == hi + 24);\nloop invariant i93: lo >= 1;\nloop invariant i94: hi <= 2*LARGE_INT;\nloop invariant i95: lo + mid == hi - mid;\nloop invariant i96: 0 <= lo <= mid;\nloop invariant i97: 0 <= mid <= mid;\nloop invariant i98: mid <= hi <= 2*mid;\nloop invariant i99: lo + mid == hi;\nloop invariant i100: mid > 0;\nloop invariant i101: mid <= LARGE_INT;\nloop invariant i102: lo <= mid;\nloop invariant i103: mid <= hi;\nloop invariant i104: hi >= 2*mid;\nloop invariant i105: lo = hi;\nloop invariant i106: 0 <= lo <= 2 * mid;\nloop invariant i107: hi <= 2 * mid;\nloop invariant i108: 0 <= mid <= 2 * mid;\nloop invariant i109: lo <= 2 * mid;\nloop invariant i110: lo + mid = hi;\nloop invariant i111: y > 0;\nloop invariant i112: x >= y;\nloop invariant i113: lo + mid + hi == 2*mid;\nloop invariant i114: (lo + 1) == hi;\nloop invariant i115: 1 <= mid <= LARGE_INT;\nloop invariant i116: hi == 2 * mid;\nloop invariant i117: hi - mid == lo;\nloop invariant i118: hi - lo == mid;\nloop invariant i119: mid >= lo;\nloop invariant i120: mid >= 1;\nloop invariant i121: hi <= 2 * LARGE_INT;\nloop invariant i122: lo <= 2 * LARGE_INT;\nloop invariant i123: hi >= 1;\nloop invariant i124: lo <= hi - 1;\nloop invariant i125: lo >= mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 71,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\n\nloop invariant i6: mid <= 0 ==> lo == hi;\nloop invariant i7: lo == hi ==> mid <= 0;\nloop invariant i8: lo >= 0;\nloop invariant i9: mid >= 0;\nloop invariant i10: hi >= 0;\nloop invariant i11: lo <= hi;\nloop invariant i12: lo + mid <= hi;\nloop invariant i13: mid <= lo + hi;\nloop invariant i14: 0 <= lo <= hi;\n\n\nloop invariant i17: hi >= 0 && hi <= 2 * LARGE_INT;\nloop invariant i18: mid >= 0 && mid <= LARGE_INT;\n\nloop invariant i20: lo == hi ==> lo == hi && mid == 0;\nloop invariant i21: lo == hi && mid == 0 ==> lo == hi;\n\nloop invariant i23: 0 <= mid <= LARGE_INT;\n\nloop invariant i25: lo == hi ==> mid == 0;\nloop invariant i26: lo == hi ==> lo >= 0;\nloop invariant i27: lo == hi ==> hi >= 0;\nloop invariant i28: lo == hi ==> lo == hi;\n\n\nloop invariant i31: lo + hi >= 1;\n\n\nloop invariant i34: (mid > 0 ==> hi > 0);\n\nloop invariant i36: (mid > 0 ==> lo <= hi);\nloop invariant i37: (mid > 0 ==> lo >= 0);\nloop invariant i38: (mid > 0 ==> hi >= 0);\n\n\nloop invariant i41: (mid > 0 ==> lo + hi >= 1);\n\nloop invariant i43: (mid == 0 ==> lo == hi);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i94: hi <= 2*LARGE_INT;\nloop invariant i95: lo + mid == hi - mid;\n\nloop invariant i97: 0 <= mid <= mid;\n\n\n\nloop invariant i101: mid <= LARGE_INT;\n\nloop invariant i103: mid <= hi;\nloop invariant i104: hi >= 2*mid;\n\n\n\nloop invariant i108: 0 <= mid <= 2 * mid;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i121: hi <= 2 * LARGE_INT;\nloop invariant i122: lo <= 2 * LARGE_INT;\nloop invariant i123: hi >= 1;\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c"
        ],
        "skipped": [],
        "total": 108,
        "success_count": 95,
        "failure_count": 13,
        "success_rate": 0.8796296296296297
    }
}