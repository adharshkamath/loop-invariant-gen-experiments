{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark50_linear.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  while (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\n*/\n```",
            "```\n/*@\nloop invariant xa <= YA <= xa + (ya - xa) * (ya - xa + 1) / 2;\nloop invariant ya >= 0;\nloop invariant xa >= 0;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa <= xa + (ya - xa) * (ya - xa + 1) / 2;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> ya >= 0;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa >= 0;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa <= ya;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa <= ya ==> xa >= ya;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> ya >= xa;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= ya + 1;\nloop invariant xa + ya >= 0;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= ya;\nloop invariant xa = ya - xa;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= ya <= ya + xa; loop invariant xa <= ya; loop invariant xa >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= xa <= ya;\nloop invariant ya >= 0;\n*/\n```",
            "```\n/*@\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa + ya <= xa + ya;\nloop invariant xa + ya >= xa + ya;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= ya;loop invariant xa + ya > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa;\nloop invariant 0 <= ya;\nloop invariant xa + ya == xa + ya;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa <= xa;\nloop invariant ya <= ya;\nloop invariant xa >= 0 ==> xa == 0 ==> ya >= 0;\nloop invariant ya >= 0 ==> ya == 0 ==> xa >= 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya == 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0 ==> ya == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0 ==> ya == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa != 0 ==> ya == 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0 ==> ya == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0 ==> ya == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= xa <= ya;\nloop invariant 0 <= ya - xa <= ya;\nloop invariant 0 <= xa <= ya;\nloop invariant ya >= ya - xa;\nloop invariant ya >= xa;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa <= ya;\nloop invariant xa <= ya;\nloop invariant ya >= 0;\nloop invariant ya >= ya - xa;\nloop invariant ya >= xa;\nloop invariant xa <= ya;\nloop invariant xa <= ya;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa <= ya;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= ya; loop invariant ya = xa + ya; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa <= ya; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= xa <= ya;\nloop invariant ya >= xa;\nloop invariant xa + ya > 0;\nloop invariant ya >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= xa <= ya;\nloop invariant ya >= 0;\nloop invariant xa >= 0;\nloop invariant ya - xa <= ya;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= xa <= ya; loop invariant xa + ya > 0; loop invariant xa + ya >= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant xa <= YA <= xa + (ya - xa) * (ya - xa + 1) / 2;\nloop invariant ya >= 0;\nloop invariant xa >= 0;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa <= xa + (ya - xa) * (ya - xa + 1) / 2;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> ya >= 0;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa >= 0;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa <= ya;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa <= ya ==> xa >= ya;\nloop invariant ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> ya >= xa;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa <= xa + (ya - xa) * (ya - xa + 1) / 2;\n\n\n\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= ya + 1;\nloop invariant xa + ya >= 0;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\nloop invariant i2: xa + ya >= 0;\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= ya;\nloop invariant xa = ya - xa;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= ya <= ya + xa; loop invariant xa <= ya; loop invariant xa >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= xa <= ya;\nloop invariant ya >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa + ya <= xa + ya;\nloop invariant xa + ya >= xa + ya;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant xa + ya >= xa + ya - xa * xa / 2;\nloop invariant xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\nloop invariant i3: xa + ya <= xa + ya;\nloop invariant i4: xa + ya >= xa + ya;\nloop invariant i5: xa + ya - xa * xa / 2 <= xa + ya;\nloop invariant i6: xa + ya >= xa + ya - xa * xa / 2;\nloop invariant i7: xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= ya;loop invariant xa + ya > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= xa;\nloop invariant 0 <= ya;\nloop invariant xa + ya == xa + ya;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa <= xa;\nloop invariant ya <= ya;\nloop invariant xa >= 0 ==> xa == 0 ==> ya >= 0;\nloop invariant ya >= 0 ==> ya == 0 ==> xa >= 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya == 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0 ==> ya == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0 ==> ya == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa != 0 ==> ya == 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0 ==> ya == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0 ==> ya == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\nloop invariant i3: xa + ya == xa + ya;\n\n\nloop invariant i6: xa <= xa;\nloop invariant i7: ya <= ya;\n\nloop invariant i9: ya >= 0 ==> ya == 0 ==> xa >= 0;\n\n\nloop invariant i12: xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0 ==> ya == 0;\nloop invariant i13: ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa != 0 ==> ya == 0 ==> xa == 0;\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= xa <= ya;\nloop invariant 0 <= ya - xa <= ya;\nloop invariant 0 <= xa <= ya;\nloop invariant ya >= ya - xa;\nloop invariant ya >= xa;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa <= ya;\nloop invariant xa <= ya;\nloop invariant ya >= 0;\nloop invariant ya >= ya - xa;\nloop invariant ya >= xa;\nloop invariant xa <= ya;\nloop invariant xa <= ya;\nloop invariant xa >= 0;\nloop invariant ya >= 0;\nloop invariant xa <= ya;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= ya; loop invariant ya = xa + ya; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa <= ya; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= xa <= ya;\nloop invariant ya >= xa;\nloop invariant xa + ya > 0;\nloop invariant ya >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\nloop invariant i3: xa + ya > 0;\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= xa <= ya;\nloop invariant ya >= 0;\nloop invariant xa >= 0;\nloop invariant ya - xa <= ya;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= xa <= ya; loop invariant xa + ya > 0; loop invariant xa + ya >= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 33: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: i1;\nloop invariant i2: i2;\nloop invariant i3: i3;\nloop invariant i4: i4;\nloop invariant i5: xa <= YA <= xa + (ya - xa) * (ya - xa + 1) / 2;\nloop invariant i6: ya >= 0;\nloop invariant i7: xa >= 0;\nloop invariant i8: ya <= xa + (ya - xa) * (ya - xa + 1) / 2;\nloop invariant i9: ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa <= xa + (ya - xa) * (ya - xa + 1) / 2;\nloop invariant i10: ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> ya >= 0;\nloop invariant i11: ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa >= 0;\nloop invariant i12: ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa <= ya;\nloop invariant i13: ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> xa <= ya ==> xa >= ya;\nloop invariant i14: ya <= xa + (ya - xa) * (ya - xa + 1) / 2 ==> ya >= xa;\nloop invariant i15: 0 <= xa <= ya + 1;\nloop invariant i16: xa + ya >= 0;\nloop invariant i17: 0 <= xa <= ya;\nloop invariant i18: xa = ya - xa;\nloop invariant i19: 0 <= ya <= ya + xa; loop invariant xa <= ya; loop invariant xa >= 0;\nloop invariant i20: 1 <= xa <= ya;\nloop invariant i21: xa + ya <= xa + ya;\nloop invariant i22: xa + ya >= xa + ya;\nloop invariant i23: xa + ya - xa * xa / 2 <= xa + ya;\nloop invariant i24: xa + ya >= xa + ya - xa * xa / 2;\nloop invariant i25: xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\nloop invariant i26: 0 <= xa <= ya;loop invariant xa + ya > 0;\nloop invariant i27: 0 <= xa;\nloop invariant i28: 0 <= ya;\nloop invariant i29: xa + ya == xa + ya;\nloop invariant i30: xa <= xa;\nloop invariant i31: ya <= ya;\nloop invariant i32: xa >= 0 ==> xa == 0 ==> ya >= 0;\nloop invariant i33: ya >= 0 ==> ya == 0 ==> xa >= 0;\nloop invariant i34: xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya == 0 ==> xa == 0;\nloop invariant i35: ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0 ==> ya == 0;\nloop invariant i36: xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0 ==> ya == 0;\nloop invariant i37: ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa != 0 ==> ya == 0 ==> xa == 0;\nloop invariant i38: xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0;\nloop invariant i39: ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa == 0;\nloop invariant i40: 0 <= ya - xa <= ya;\nloop invariant i41: ya >= ya - xa;\nloop invariant i42: ya >= xa;\nloop invariant i43: xa <= ya;\nloop invariant i44: 0 <= xa <= ya; loop invariant ya = xa + ya; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa <= ya; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0; loop invariant xa >= 0; loop invariant xa <= ya; loop invariant ya >= 0;\nloop invariant i45: xa + ya > 0;\nloop invariant i46: ya - xa <= ya;\nloop invariant i47: 1 <= xa <= ya; loop invariant xa + ya > 0; loop invariant xa + ya >= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0; loop invariant xa + ya > 0; loop invariant xa + ya < 0; loop invariant xa + ya >= 0; loop invariant xa + ya <= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 17,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: xa + ya >= 0;\n\n\n\n\nloop invariant i21: xa + ya <= xa + ya;\nloop invariant i22: xa + ya >= xa + ya;\nloop invariant i23: xa + ya - xa * xa / 2 <= xa + ya;\nloop invariant i24: xa + ya >= xa + ya - xa * xa / 2;\nloop invariant i25: xa + ya - xa * xa / 2 <= xa + ya - xa * xa / 2;\n\n\n\nloop invariant i29: xa + ya == xa + ya;\nloop invariant i30: xa <= xa;\nloop invariant i31: ya <= ya;\nloop invariant i32: xa >= 0 ==> xa == 0 ==> ya >= 0;\nloop invariant i33: ya >= 0 ==> ya == 0 ==> xa >= 0;\n\n\nloop invariant i36: xa >= 0 ==> xa != 0 ==> ya >= 0 ==> ya != 0 ==> xa == 0 ==> ya == 0;\nloop invariant i37: ya >= 0 ==> ya != 0 ==> xa >= 0 ==> xa != 0 ==> ya == 0 ==> xa == 0;\n\n\n\n\n\n\n\nloop invariant i45: xa + ya > 0;\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark50_linear.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c"
        ],
        "skipped": [],
        "total": 168,
        "success_count": 151,
        "failure_count": 17,
        "success_rate": 0.8988095238095238
    }
}