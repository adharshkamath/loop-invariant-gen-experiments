{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/52.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> !unknown();\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant if (unknown()) ==> (c == 0 || c == 1 || c == 2 || c == 3 || c == 4);\nloop invariant if (!unknown()) ==> (c == 0 || c == 1 || c == 2 || c == 3 || c == 4);\nloop invariant if (unknown() && !unknown()) ==> (c == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> (c = 1);\nloop invariant (c != 4) ==> (c = (c + 1));\nloop invariant (c < 0) ==> (c = 0);\nloop invariant (c > 4) ==> (c = 4);\nloop invariant (c >= 0) ==> (c <= 4);\nloop invariant (c >= 0) ==> (c <= 4);\nloop invariant (c >= 0) ==> (c <= 4);\nloop invariant (c >= 0) ==> (c <= 4);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= 4;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c < 4 ==> c == 0;\nloop invariant c == 4 ==> c >= 0;\nloop invariant c == 4 ==> c <= 4;\nloop invariant c == 4 ==> c != 4;\nloop invariant c == 4 ==> c == 1;\nloop invariant c == 4 ==> c == 2;\nloop invariant c == 4 ==> c == 3;\nloop invariant c == 4 ==> c == 4;\nloop invariant c == 4 ==> c == 5;\nloop invariant c == 4 ==> c == 6;\nloop invariant c == 4 ==> c == 7;\nloop invariant c == 4 ==> c == 8;\nloop invariant c == 4 ==> c == 9;\nloop invariant c == 4 ==> c == 10;\nloop invariant c == 4 ==> c == 11;\nloop invariant c == 4 ==> c == 12;\nloop invariant c == 4 ==> c == 13;\nloop invariant c == 4 ==> c == 14;\nloop invariant c == 4 ==> c == 15;\nloop invariant c == 4 ==> c == 16;\nloop invariant c == 4 ==> c == 17;\nloop invariant c == 4 ==> c == 18;\nloop invariant c == 4 ==> c == 19;\nloop invariant c == 4 ==> c == 20;\nloop invariant c == 4 ==> c == 21;\nloop invariant c == 4 ==> c == 22;\nloop invariant c == 4 ==> c == 23;\nloop invariant c == 4 ==> c == 24;\nloop invariant c == 4 ==> c == 25;\nloop invariant c == 4 ==> c == 26;\nloop invariant c == 4 ==> c == 27;\nloop invariant c == 4 ==> c == 28;\nloop invariant c == 4 ==> c == 29;\nloop invariant c == 4 ==> c == 30;\nloop invariant c == 4 ==> c == 31;\nloop invariant c == 4 ==> c == 32;\nloop invariant c == 4 ==> c == 33;\nloop invariant c == 4 ==> c == 34;\nloop invariant c == 4 ==> c == 35;\nloop invariant c == 4 ==> c == 36;\nloop invariant c == 4 ==> c == 37;\nloop invariant c == 4 ==> c == 38;\nloop invariant c == 4 ==> c == 39;\nloop invariant c == 4 ==> c == 40;\nloop invariant c == 4 ==> c == 41;\nloop invariant c == 4 ==> c == 42;\nloop invariant c == 4 ==> c == 43;\nloop invariant c == 4 ==> c == 44;\nloop invariant c == 4 ==> c == 45;\nloop invariant c == 4 ==> c == 46;\nloop invariant c == 4 ==> c == 47;\nloop invariant c == 4 ==> c == 48;\nloop invariant c == 4 ==> c == 49;\nloop invariant c == 4 ==> c == 50;\nloop invariant c == 4 ==> c == 51;\nloop invariant c == 4 ==> c == 52;\nloop invariant c == 4 ==> c == 53;\nloop invariant c == 4 ==> c == 54;\nloop invariant c == 4 ==> c == 55;\nloop invariant c == 4 ==> c == 56;\nloop invariant c == 4 ==> c == 57;\nloop invariant c == 4 ==> c == 58;\nloop invariant c == 4 ==> c == 59;\nloop invariant c == 4 ==> c == 60;\nloop invariant c == 4 ==> c == 61;\nloop invariant c == 4 ==> c == 62;\nloop invariant c == 4 ==> c == 63;\nloop invariant c == 4 ==> c == 64;\nloop invariant c == 4 ==> c == 65;\nloop invariant c == 4 ==> c == 66;\nloop invariant c == 4 ==> c == 67;\nloop invariant c == 4 ==> c == 68;\nloop invariant c == 4 ==> c == 69;\nloop invariant c == 4 ==> c == 70;\nloop invariant c == 4 ==> c == 71;\nloop invariant c == 4 ==> c == 72;\nloop invariant c == 4 ==> c == 73;\n*/\n```",
            "```\n/*@\nloop invariant i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= 4;\nloop invariant c >= 0;\nloop invariant c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c == 4 ==> (c == 4);\nloop invariant c != 4 ==> (c < 0 || c > 4);\nloop invariant c == 4 ==> (c == 4);\nloop invariant c == 0 ==> (c == 0);\nloop invariant c == 1 ==> (c == 1);\nloop invariant c == 2 ==> (c == 2);\nloop invariant c == 3 ==> (c == 3);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 0 ==> 0 <= c <= 4;\nloop invariant c == 0 ==> c >= 0;\nloop invariant c == 0 ==> c <= 4;\nloop invariant c == 1 ==> 0 <= c <= 4;\nloop invariant c == 1 ==> c >= 0;\nloop invariant c == 1 ==> c <= 4;\nloop invariant c == 2 ==> 0 <= c <= 4;\nloop invariant c == 2 ==> c >= 0;\nloop invariant c == 2 ==> c <= 4;\nloop invariant c == 3 ==> 0 <= c <= 4;\nloop invariant c == 3 ==> c >= 0;\nloop invariant c == 3 ==> c <= 4;\nloop invariant c == 4 ==> 0 <= c <= 4;\nloop invariant c == 4 ==> c >= 0;\nloop invariant c == 4 ==> c <= 4;\nloop invariant c != 4 ==> 0 <= c <= 4;\nloop invariant c != 4 ==> c >= 0;\nloop invariant c != 4 ==> c <= 4;\nloop invariant (c == 4) && (c >= 0) ==> c <= 4;\nloop invariant (c == 4) && (c <= 4) ==> c >= 0;\nloop invariant (c == 4) && (c <= 4) ==> c >= 0;\nloop invariant (c == 4) && (c >= 0) ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4;\nloop invariant c <= 4 ==> c >= 0;\nloop invariant c != 4 ==> c <= 4;\nloop invariant c != 4 ==> c >= 0;\nloop invariant c != 4 ==> c <= 4;\nloop invariant c != 4 ==> c >= 0;\nloop invariant c != 4 ==> c <= 4;\nloop invariant c != 4 ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == 2 ==> c == 1 || c == 2;\nloop invariant c == 3 ==> c == 1 || c == 2 || c == 3;\nloop invariant c == 4 ==> c == 1 || c == 2 || c == 3 || c == 4;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == 2 ==> c == 1 || c == 2;\nloop invariant c == 3 ==> c == 1 || c == 2 || c == 3;\nloop invariant c == 4 ==> c == 1 || c == 2 || c == 3 || c == 4;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant c >= 1 ==> c >= 4;\nloop invariant c <= 3 ==> c <= 4;\nloop invariant c == 2 ==> c == 4;\nloop invariant c == 3 ==> c == 4;\nloop invariant c == 4 ==> c == 4;\nloop invariant c == 5 ==> c == 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4; loop invariant (c != 4) ==> (c < 4); loop invariant (c == 4) ==> (c >= 4); loop invariant c ==> c; loop invariant c ==> c;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (if c != 4 ==> c >= 1) && (if c == 4 ==> c == 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c ==> c == 1 || c == 4;\nloop invariant c == 1 ==> 0 <= c <= 1;\nloop invariant c == 4 ==> 0 <= c <= 4 && c == 4;\nloop invariant (c != 4) ==> c >= 2;\nloop invariant 0 <= c ==> c <= 4;\nloop invariant (c > 4) ==> false;\nloop invariant (c < 0) ==> false;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= 4;\nloop invariant c == 4 ==> unknown();\nloop invariant c == 1 ==> !unknown();\nloop invariant c == 4 ==> c == 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> !unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant if (unknown()) ==> (c == 0 || c == 1 || c == 2 || c == 3 || c == 4);\nloop invariant if (!unknown()) ==> (c == 0 || c == 1 || c == 2 || c == 3 || c == 4);\nloop invariant if (unknown() && !unknown()) ==> (c == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 4;\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> (c = 1);\nloop invariant (c != 4) ==> (c = (c + 1));\nloop invariant (c < 0) ==> (c = 0);\nloop invariant (c > 4) ==> (c = 4);\nloop invariant (c >= 0) ==> (c <= 4);\nloop invariant (c >= 0) ==> (c <= 4);\nloop invariant (c >= 0) ==> (c <= 4);\nloop invariant (c >= 0) ==> (c <= 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\n\nloop invariant i6: (c >= 0) ==> (c <= 4);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= 4;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\nloop invariant (c == 4) ==> unknown() == 0;\nloop invariant (c == 1) ==> unknown() == 1;\nloop invariant (c >= 1) ==> unknown() == 1;\nloop invariant (c <= 4) ==> unknown() == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 74,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c < 4 ==> c == 0;\nloop invariant c == 4 ==> c >= 0;\nloop invariant c == 4 ==> c <= 4;\nloop invariant c == 4 ==> c != 4;\nloop invariant c == 4 ==> c == 1;\nloop invariant c == 4 ==> c == 2;\nloop invariant c == 4 ==> c == 3;\nloop invariant c == 4 ==> c == 4;\nloop invariant c == 4 ==> c == 5;\nloop invariant c == 4 ==> c == 6;\nloop invariant c == 4 ==> c == 7;\nloop invariant c == 4 ==> c == 8;\nloop invariant c == 4 ==> c == 9;\nloop invariant c == 4 ==> c == 10;\nloop invariant c == 4 ==> c == 11;\nloop invariant c == 4 ==> c == 12;\nloop invariant c == 4 ==> c == 13;\nloop invariant c == 4 ==> c == 14;\nloop invariant c == 4 ==> c == 15;\nloop invariant c == 4 ==> c == 16;\nloop invariant c == 4 ==> c == 17;\nloop invariant c == 4 ==> c == 18;\nloop invariant c == 4 ==> c == 19;\nloop invariant c == 4 ==> c == 20;\nloop invariant c == 4 ==> c == 21;\nloop invariant c == 4 ==> c == 22;\nloop invariant c == 4 ==> c == 23;\nloop invariant c == 4 ==> c == 24;\nloop invariant c == 4 ==> c == 25;\nloop invariant c == 4 ==> c == 26;\nloop invariant c == 4 ==> c == 27;\nloop invariant c == 4 ==> c == 28;\nloop invariant c == 4 ==> c == 29;\nloop invariant c == 4 ==> c == 30;\nloop invariant c == 4 ==> c == 31;\nloop invariant c == 4 ==> c == 32;\nloop invariant c == 4 ==> c == 33;\nloop invariant c == 4 ==> c == 34;\nloop invariant c == 4 ==> c == 35;\nloop invariant c == 4 ==> c == 36;\nloop invariant c == 4 ==> c == 37;\nloop invariant c == 4 ==> c == 38;\nloop invariant c == 4 ==> c == 39;\nloop invariant c == 4 ==> c == 40;\nloop invariant c == 4 ==> c == 41;\nloop invariant c == 4 ==> c == 42;\nloop invariant c == 4 ==> c == 43;\nloop invariant c == 4 ==> c == 44;\nloop invariant c == 4 ==> c == 45;\nloop invariant c == 4 ==> c == 46;\nloop invariant c == 4 ==> c == 47;\nloop invariant c == 4 ==> c == 48;\nloop invariant c == 4 ==> c == 49;\nloop invariant c == 4 ==> c == 50;\nloop invariant c == 4 ==> c == 51;\nloop invariant c == 4 ==> c == 52;\nloop invariant c == 4 ==> c == 53;\nloop invariant c == 4 ==> c == 54;\nloop invariant c == 4 ==> c == 55;\nloop invariant c == 4 ==> c == 56;\nloop invariant c == 4 ==> c == 57;\nloop invariant c == 4 ==> c == 58;\nloop invariant c == 4 ==> c == 59;\nloop invariant c == 4 ==> c == 60;\nloop invariant c == 4 ==> c == 61;\nloop invariant c == 4 ==> c == 62;\nloop invariant c == 4 ==> c == 63;\nloop invariant c == 4 ==> c == 64;\nloop invariant c == 4 ==> c == 65;\nloop invariant c == 4 ==> c == 66;\nloop invariant c == 4 ==> c == 67;\nloop invariant c == 4 ==> c == 68;\nloop invariant c == 4 ==> c == 69;\nloop invariant c == 4 ==> c == 70;\nloop invariant c == 4 ==> c == 71;\nloop invariant c == 4 ==> c == 72;\nloop invariant c == 4 ==> c == 73;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\nloop invariant i3: c == 4 ==> c >= 0;\nloop invariant i4: c == 4 ==> c <= 4;\n\n\n\n\nloop invariant i9: c == 4 ==> c == 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= 4;\nloop invariant c >= 0;\nloop invariant c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: c <= 4;\nloop invariant i3: c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c == 4 ==> (c == 4);\nloop invariant c != 4 ==> (c < 0 || c > 4);\nloop invariant c == 4 ==> (c == 4);\nloop invariant c == 0 ==> (c == 0);\nloop invariant c == 1 ==> (c == 1);\nloop invariant c == 2 ==> (c == 2);\nloop invariant c == 3 ==> (c == 3);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\nloop invariant c >= 0 ==> (c >= 0);\nloop invariant c <= 4 ==> (c <= 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: c == 4 ==> (c == 4);\n\nloop invariant i4: c == 0 ==> (c == 0);\nloop invariant i5: c == 1 ==> (c == 1);\nloop invariant i6: c == 2 ==> (c == 2);\nloop invariant i7: c == 3 ==> (c == 3);\nloop invariant i8: c >= 0 ==> (c >= 0);\nloop invariant i9: c <= 4 ==> (c <= 4);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 0 ==> 0 <= c <= 4;\nloop invariant c == 0 ==> c >= 0;\nloop invariant c == 0 ==> c <= 4;\nloop invariant c == 1 ==> 0 <= c <= 4;\nloop invariant c == 1 ==> c >= 0;\nloop invariant c == 1 ==> c <= 4;\nloop invariant c == 2 ==> 0 <= c <= 4;\nloop invariant c == 2 ==> c >= 0;\nloop invariant c == 2 ==> c <= 4;\nloop invariant c == 3 ==> 0 <= c <= 4;\nloop invariant c == 3 ==> c >= 0;\nloop invariant c == 3 ==> c <= 4;\nloop invariant c == 4 ==> 0 <= c <= 4;\nloop invariant c == 4 ==> c >= 0;\nloop invariant c == 4 ==> c <= 4;\nloop invariant c != 4 ==> 0 <= c <= 4;\nloop invariant c != 4 ==> c >= 0;\nloop invariant c != 4 ==> c <= 4;\nloop invariant (c == 4) && (c >= 0) ==> c <= 4;\nloop invariant (c == 4) && (c <= 4) ==> c >= 0;\nloop invariant (c == 4) && (c <= 4) ==> c >= 0;\nloop invariant (c == 4) && (c >= 0) ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4;\nloop invariant c <= 4 ==> c >= 0;\nloop invariant c != 4 ==> c <= 4;\nloop invariant c != 4 ==> c >= 0;\nloop invariant c != 4 ==> c <= 4;\nloop invariant c != 4 ==> c >= 0;\nloop invariant c != 4 ==> c <= 4;\nloop invariant c != 4 ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: c >= 0;\nloop invariant i3: c <= 4;\nloop invariant i4: c == 0 ==> 0 <= c <= 4;\nloop invariant i5: c == 0 ==> c >= 0;\nloop invariant i6: c == 0 ==> c <= 4;\nloop invariant i7: c == 1 ==> 0 <= c <= 4;\nloop invariant i8: c == 1 ==> c >= 0;\nloop invariant i9: c == 1 ==> c <= 4;\nloop invariant i10: c == 2 ==> 0 <= c <= 4;\nloop invariant i11: c == 2 ==> c >= 0;\nloop invariant i12: c == 2 ==> c <= 4;\nloop invariant i13: c == 3 ==> 0 <= c <= 4;\nloop invariant i14: c == 3 ==> c >= 0;\nloop invariant i15: c == 3 ==> c <= 4;\nloop invariant i16: c == 4 ==> 0 <= c <= 4;\nloop invariant i17: c == 4 ==> c >= 0;\nloop invariant i18: c == 4 ==> c <= 4;\nloop invariant i19: c != 4 ==> 0 <= c <= 4;\nloop invariant i20: c != 4 ==> c >= 0;\nloop invariant i21: c != 4 ==> c <= 4;\nloop invariant i22: (c == 4) && (c >= 0) ==> c <= 4;\nloop invariant i23: (c == 4) && (c <= 4) ==> c >= 0;\nloop invariant i24: c >= 0 ==> c <= 4;\nloop invariant i25: c <= 4 ==> c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == 2 ==> c == 1 || c == 2;\nloop invariant c == 3 ==> c == 1 || c == 2 || c == 3;\nloop invariant c == 4 ==> c == 1 || c == 2 || c == 3 || c == 4;\nloop invariant c == 1 ==> c == 1;\nloop invariant c == 2 ==> c == 1 || c == 2;\nloop invariant c == 3 ==> c == 1 || c == 2 || c == 3;\nloop invariant c == 4 ==> c == 1 || c == 2 || c == 3 || c == 4;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant c != 4 ==> c == 1 || c == 2 || c == 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 4;\nloop invariant i3: c == 1 ==> c == 1;\nloop invariant i4: c == 2 ==> c == 1 || c == 2;\nloop invariant i5: c == 3 ==> c == 1 || c == 2 || c == 3;\nloop invariant i6: c == 4 ==> c == 1 || c == 2 || c == 3 || c == 4;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant c >= 1 ==> c >= 4;\nloop invariant c <= 3 ==> c <= 4;\nloop invariant c == 2 ==> c == 4;\nloop invariant c == 3 ==> c == 4;\nloop invariant c == 4 ==> c == 4;\nloop invariant c == 5 ==> c == 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 5;\n\nloop invariant i3: c <= 3 ==> c <= 4;\n\n\nloop invariant i6: c == 4 ==> c == 4;\nloop invariant i7: c == 5 ==> c == 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4; loop invariant (c != 4) ==> (c < 4); loop invariant (c == 4) ==> (c >= 4); loop invariant c ==> c; loop invariant c ==> c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4; loop invariant (c != 4) ==> (c < 4); loop invariant (c == 4) ==> (c >= 4); loop invariant c ==> c; loop invariant c ==> c;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (if c != 4 ==> c >= 1) && (if c == 4 ==> c == 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c ==> c == 1 || c == 4;\nloop invariant c == 1 ==> 0 <= c <= 1;\nloop invariant c == 4 ==> 0 <= c <= 4 && c == 4;\nloop invariant (c != 4) ==> c >= 2;\nloop invariant 0 <= c ==> c <= 4;\nloop invariant (c > 4) ==> false;\nloop invariant (c < 0) ==> false;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\nloop invariant i2: c == 1 ==> 0 <= c <= 1;\nloop invariant i3: c == 4 ==> 0 <= c <= 4 && c == 4;\n\nloop invariant i5: 0 <= c ==> c <= 4;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= 4;\nloop invariant c == 4 ==> unknown();\nloop invariant c == 1 ==> !unknown();\nloop invariant c == 4 ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: (c == 4) ==> !unknown();\nloop invariant i3: c >= 0;\nloop invariant i4: c <= 4;\nloop invariant i5: if (unknown()) ==> (c == 0 || c == 1 || c == 2 || c == 3 || c == 4);\nloop invariant i6: if (!unknown()) ==> (c == 0 || c == 1 || c == 2 || c == 3 || c == 4);\nloop invariant i7: if (unknown() && !unknown()) ==> (c == 0);\nloop invariant i8: (c == 4) ==> (c = 1);\nloop invariant i9: (c != 4) ==> (c = (c + 1));\nloop invariant i10: (c < 0) ==> (c = 0);\nloop invariant i11: (c > 4) ==> (c = 4);\nloop invariant i12: (c >= 0) ==> (c <= 4);\nloop invariant i13: 1 <= c <= 4;\nloop invariant i14: (c == 4) ==> unknown() == 0;\nloop invariant i15: (c == 1) ==> unknown() == 1;\nloop invariant i16: (c >= 1) ==> unknown() == 1;\nloop invariant i17: (c <= 4) ==> unknown() == 0;\nloop invariant i18: c < 4 ==> c == 0;\nloop invariant i19: c == 4 ==> c >= 0;\nloop invariant i20: c == 4 ==> c <= 4;\nloop invariant i21: c == 4 ==> c != 4;\nloop invariant i22: c == 4 ==> c == 1;\nloop invariant i23: c == 4 ==> c == 2;\nloop invariant i24: c == 4 ==> c == 3;\nloop invariant i25: c == 4 ==> c == 4;\nloop invariant i26: c == 4 ==> c == 5;\nloop invariant i27: c == 4 ==> c == 6;\nloop invariant i28: c == 4 ==> c == 7;\nloop invariant i29: c == 4 ==> c == 8;\nloop invariant i30: c == 4 ==> c == 9;\nloop invariant i31: c == 4 ==> c == 10;\nloop invariant i32: c == 4 ==> c == 11;\nloop invariant i33: c == 4 ==> c == 12;\nloop invariant i34: c == 4 ==> c == 13;\nloop invariant i35: c == 4 ==> c == 14;\nloop invariant i36: c == 4 ==> c == 15;\nloop invariant i37: c == 4 ==> c == 16;\nloop invariant i38: c == 4 ==> c == 17;\nloop invariant i39: c == 4 ==> c == 18;\nloop invariant i40: c == 4 ==> c == 19;\nloop invariant i41: c == 4 ==> c == 20;\nloop invariant i42: c == 4 ==> c == 21;\nloop invariant i43: c == 4 ==> c == 22;\nloop invariant i44: c == 4 ==> c == 23;\nloop invariant i45: c == 4 ==> c == 24;\nloop invariant i46: c == 4 ==> c == 25;\nloop invariant i47: c == 4 ==> c == 26;\nloop invariant i48: c == 4 ==> c == 27;\nloop invariant i49: c == 4 ==> c == 28;\nloop invariant i50: c == 4 ==> c == 29;\nloop invariant i51: c == 4 ==> c == 30;\nloop invariant i52: c == 4 ==> c == 31;\nloop invariant i53: c == 4 ==> c == 32;\nloop invariant i54: c == 4 ==> c == 33;\nloop invariant i55: c == 4 ==> c == 34;\nloop invariant i56: c == 4 ==> c == 35;\nloop invariant i57: c == 4 ==> c == 36;\nloop invariant i58: c == 4 ==> c == 37;\nloop invariant i59: c == 4 ==> c == 38;\nloop invariant i60: c == 4 ==> c == 39;\nloop invariant i61: c == 4 ==> c == 40;\nloop invariant i62: c == 4 ==> c == 41;\nloop invariant i63: c == 4 ==> c == 42;\nloop invariant i64: c == 4 ==> c == 43;\nloop invariant i65: c == 4 ==> c == 44;\nloop invariant i66: c == 4 ==> c == 45;\nloop invariant i67: c == 4 ==> c == 46;\nloop invariant i68: c == 4 ==> c == 47;\nloop invariant i69: c == 4 ==> c == 48;\nloop invariant i70: c == 4 ==> c == 49;\nloop invariant i71: c == 4 ==> c == 50;\nloop invariant i72: c == 4 ==> c == 51;\nloop invariant i73: c == 4 ==> c == 52;\nloop invariant i74: c == 4 ==> c == 53;\nloop invariant i75: c == 4 ==> c == 54;\nloop invariant i76: c == 4 ==> c == 55;\nloop invariant i77: c == 4 ==> c == 56;\nloop invariant i78: c == 4 ==> c == 57;\nloop invariant i79: c == 4 ==> c == 58;\nloop invariant i80: c == 4 ==> c == 59;\nloop invariant i81: c == 4 ==> c == 60;\nloop invariant i82: c == 4 ==> c == 61;\nloop invariant i83: c == 4 ==> c == 62;\nloop invariant i84: c == 4 ==> c == 63;\nloop invariant i85: c == 4 ==> c == 64;\nloop invariant i86: c == 4 ==> c == 65;\nloop invariant i87: c == 4 ==> c == 66;\nloop invariant i88: c == 4 ==> c == 67;\nloop invariant i89: c == 4 ==> c == 68;\nloop invariant i90: c == 4 ==> c == 69;\nloop invariant i91: c == 4 ==> c == 70;\nloop invariant i92: c == 4 ==> c == 71;\nloop invariant i93: c == 4 ==> c == 72;\nloop invariant i94: c == 4 ==> c == 73;\nloop invariant i95: i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\nloop invariant i96: 0 <= c;\nloop invariant i97: c == 4 ==> (c == 4);\nloop invariant i98: c != 4 ==> (c < 0 || c > 4);\nloop invariant i99: c == 0 ==> (c == 0);\nloop invariant i100: c == 1 ==> (c == 1);\nloop invariant i101: c == 2 ==> (c == 2);\nloop invariant i102: c == 3 ==> (c == 3);\nloop invariant i103: c >= 0 ==> (c >= 0);\nloop invariant i104: c <= 4 ==> (c <= 4);\nloop invariant i105: c == 0 ==> 0 <= c <= 4;\nloop invariant i106: c == 0 ==> c >= 0;\nloop invariant i107: c == 0 ==> c <= 4;\nloop invariant i108: c == 1 ==> 0 <= c <= 4;\nloop invariant i109: c == 1 ==> c >= 0;\nloop invariant i110: c == 1 ==> c <= 4;\nloop invariant i111: c == 2 ==> 0 <= c <= 4;\nloop invariant i112: c == 2 ==> c >= 0;\nloop invariant i113: c == 2 ==> c <= 4;\nloop invariant i114: c == 3 ==> 0 <= c <= 4;\nloop invariant i115: c == 3 ==> c >= 0;\nloop invariant i116: c == 3 ==> c <= 4;\nloop invariant i117: c == 4 ==> 0 <= c <= 4;\nloop invariant i118: c != 4 ==> 0 <= c <= 4;\nloop invariant i119: c != 4 ==> c >= 0;\nloop invariant i120: c != 4 ==> c <= 4;\nloop invariant i121: (c == 4) && (c >= 0) ==> c <= 4;\nloop invariant i122: (c == 4) && (c <= 4) ==> c >= 0;\nloop invariant i123: c >= 0 ==> c <= 4;\nloop invariant i124: c <= 4 ==> c >= 0;\nloop invariant i125: c == 1 ==> c == 1;\nloop invariant i126: c == 2 ==> c == 1 || c == 2;\nloop invariant i127: c == 3 ==> c == 1 || c == 2 || c == 3;\nloop invariant i128: c == 4 ==> c == 1 || c == 2 || c == 3 || c == 4;\nloop invariant i129: c != 4 ==> c == 1 || c == 2 || c == 3;\nloop invariant i130: 0 <= c <= 5;\nloop invariant i131: c >= 1 ==> c >= 4;\nloop invariant i132: c <= 3 ==> c <= 4;\nloop invariant i133: c == 2 ==> c == 4;\nloop invariant i134: c == 3 ==> c == 4;\nloop invariant i135: c == 5 ==> c == 4;\nloop invariant i136: 0 <= c <= 4; loop invariant (c != 4) ==> (c < 4); loop invariant (c == 4) ==> (c >= 4); loop invariant c ==> c; loop invariant c ==> c;\nloop invariant i137: (if c != 4 ==> c >= 1) && (if c == 4 ==> c == 4);\nloop invariant i138: 0 <= c ==> c == 1 || c == 4;\nloop invariant i139: c == 1 ==> 0 <= c <= 1;\nloop invariant i140: c == 4 ==> 0 <= c <= 4 && c == 4;\nloop invariant i141: (c != 4) ==> c >= 2;\nloop invariant i142: 0 <= c ==> c <= 4;\nloop invariant i143: (c > 4) ==> false;\nloop invariant i144: (c < 0) ==> false;\nloop invariant i145: c == 4 ==> unknown();\nloop invariant i146: c == 1 ==> !unknown();\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 101,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\nloop invariant i3: c >= 0;\nloop invariant i4: c <= 4;\n\n\n\n\n\n\n\nloop invariant i12: (c >= 0) ==> (c <= 4);\n\n\n\n\n\n\nloop invariant i19: c == 4 ==> c >= 0;\nloop invariant i20: c == 4 ==> c <= 4;\n\n\n\n\nloop invariant i25: c == 4 ==> c == 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i96: 0 <= c;\nloop invariant i97: c == 4 ==> (c == 4);\n\nloop invariant i99: c == 0 ==> (c == 0);\nloop invariant i100: c == 1 ==> (c == 1);\nloop invariant i101: c == 2 ==> (c == 2);\nloop invariant i102: c == 3 ==> (c == 3);\nloop invariant i103: c >= 0 ==> (c >= 0);\nloop invariant i104: c <= 4 ==> (c <= 4);\nloop invariant i105: c == 0 ==> 0 <= c <= 4;\nloop invariant i106: c == 0 ==> c >= 0;\nloop invariant i107: c == 0 ==> c <= 4;\nloop invariant i108: c == 1 ==> 0 <= c <= 4;\nloop invariant i109: c == 1 ==> c >= 0;\nloop invariant i110: c == 1 ==> c <= 4;\nloop invariant i111: c == 2 ==> 0 <= c <= 4;\nloop invariant i112: c == 2 ==> c >= 0;\nloop invariant i113: c == 2 ==> c <= 4;\nloop invariant i114: c == 3 ==> 0 <= c <= 4;\nloop invariant i115: c == 3 ==> c >= 0;\nloop invariant i116: c == 3 ==> c <= 4;\nloop invariant i117: c == 4 ==> 0 <= c <= 4;\nloop invariant i118: c != 4 ==> 0 <= c <= 4;\nloop invariant i119: c != 4 ==> c >= 0;\nloop invariant i120: c != 4 ==> c <= 4;\nloop invariant i121: (c == 4) && (c >= 0) ==> c <= 4;\nloop invariant i122: (c == 4) && (c <= 4) ==> c >= 0;\nloop invariant i123: c >= 0 ==> c <= 4;\nloop invariant i124: c <= 4 ==> c >= 0;\nloop invariant i125: c == 1 ==> c == 1;\nloop invariant i126: c == 2 ==> c == 1 || c == 2;\nloop invariant i127: c == 3 ==> c == 1 || c == 2 || c == 3;\nloop invariant i128: c == 4 ==> c == 1 || c == 2 || c == 3 || c == 4;\n\nloop invariant i130: 0 <= c <= 5;\n\nloop invariant i132: c <= 3 ==> c <= 4;\n\n\nloop invariant i135: c == 5 ==> c == 4;\nloop invariant i136: 0 <= c <= 4; loop invariant (c != 4) ==> (c < 4); loop invariant (c == 4) ==> (c >= 4); loop invariant c ==> c; loop invariant c ==> c;\n\n\nloop invariant i139: c == 1 ==> 0 <= c <= 1;\nloop invariant i140: c == 4 ==> 0 <= c <= 4 && c == 4;\n\nloop invariant i142: 0 <= c ==> c <= 4;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 45,
        "success_count": 41,
        "failure_count": 4,
        "success_rate": 0.9111111111111111
    }
}