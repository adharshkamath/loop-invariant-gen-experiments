{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/91.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    while(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= max_value;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= x;\nloop invariant x >= y;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y >= 0 ==> y >= x ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0 ==> x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x <= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y >= 0;\nloop invariant x <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant y < 0 ==> x >= 0;\nloop invariant y >= 0 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 32767;\nloop invariant 0 <= y <= 32767;\nloop invariant x > y;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y + x >= 0;\nloop invariant y >= y + x;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y <= x + y;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= (x + 1) * (x + 2) / 2;\nloop invariant y >= (x + 1) * x / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= max_value;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\nloop invariant i2: x >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= x;\nloop invariant x >= y;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= x <= 1;\n\n\nloop invariant i4: y >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y >= 0 ==> y >= x ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0 ==> x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= x;\nloop invariant i4: y >= 0 ==> y >= x ==> y >= 0;\nloop invariant i5: y >= 0 ==> x >= 0 ==> x >= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y == (x * (x + 1)) / 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant x <= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: x <= y;\nloop invariant i2: y >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y == 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: y >= x;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y >= 0;\nloop invariant x <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: y >= 0;\nloop invariant i3: x <= 0;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant y < 0 ==> x >= 0;\nloop invariant y >= 0 ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 32767;\nloop invariant 0 <= y <= 32767;\nloop invariant x > y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= x <= 32767;\n\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y + x >= 0;\nloop invariant y >= y + x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y + x >= 0;\nloop invariant i4: y >= y + x;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y <= x + y;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= (x + 1) * (x + 2) / 2;\nloop invariant y >= (x + 1) * x / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\nloop invariant y <= x * (x + 1) / 2 + x;\nloop invariant y >= x * (x + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= x;\nloop invariant i4: y <= x + y;\nloop invariant i5: y >= x * (x + 1) / 2;\n\nloop invariant i7: y >= (x + 1) * x / 2;\n\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 14: unbound logic variable max_value. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= y <= 0;\nloop invariant i2: 0 <= y <= max_value;\nloop invariant i3: x >= 0;\nloop invariant i4: 0 <= x <= 1;\nloop invariant i5: 0 <= y <= x;\nloop invariant i6: x >= y;\nloop invariant i7: y >= 0;\nloop invariant i8: 0 <= y;\nloop invariant i9: y >= x;\nloop invariant i10: y >= 0 ==> y >= x ==> y >= 0;\nloop invariant i11: y >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant i12: y == (x * (x + 1)) / 2;\nloop invariant i13: x <= y;\nloop invariant i14: y == 0;\nloop invariant i15: 0 <= y <= 100000;\nloop invariant i16: x >= (1 + (y - 1) * y / 2);\nloop invariant i17: 0 <= x <= y;\nloop invariant i18: x <= 0;\nloop invariant i19: y < 0 ==> x >= 0;\nloop invariant i20: y >= 0 ==> y == 0;\nloop invariant i21: 0 <= x <= 32767;\nloop invariant i22: 0 <= y <= 32767;\nloop invariant i23: x > y;\nloop invariant i24: y + x >= 0;\nloop invariant i25: y >= y + x;\nloop invariant i26: y <= x + y;\nloop invariant i27: y >= x * (x + 1) / 2;\nloop invariant i28: y <= (x + 1) * (x + 2) / 2;\nloop invariant i29: y >= (x + 1) * x / 2;\nloop invariant i30: y <= x * (x + 1) / 2 + x;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    /*@\nloop invariant i1: 0 <= y <= 0;\n\nloop invariant i3: x >= 0;\nloop invariant i4: 0 <= x <= 1;\nloop invariant i5: 0 <= y <= x;\nloop invariant i6: x >= y;\nloop invariant i7: y >= 0;\nloop invariant i8: 0 <= y;\nloop invariant i9: y >= x;\nloop invariant i10: y >= 0 ==> y >= x ==> y >= 0;\nloop invariant i11: y >= 0 ==> x >= 0 ==> x >= 0;\nloop invariant i12: y == (x * (x + 1)) / 2;\nloop invariant i13: x <= y;\nloop invariant i14: y == 0;\nloop invariant i15: 0 <= y <= 100000;\n\nloop invariant i17: 0 <= x <= y;\nloop invariant i18: x <= 0;\nloop invariant i19: y < 0 ==> x >= 0;\nloop invariant i20: y >= 0 ==> y == 0;\nloop invariant i21: 0 <= x <= 32767;\nloop invariant i22: 0 <= y <= 32767;\n\nloop invariant i24: y + x >= 0;\nloop invariant i25: y >= y + x;\nloop invariant i26: y <= x + y;\nloop invariant i27: y >= x * (x + 1) / 2;\nloop invariant i28: y <= (x + 1) * (x + 2) / 2;\nloop invariant i29: y >= (x + 1) * x / 2;\nloop invariant i30: y <= x * (x + 1) / 2 + x;\n*/\nwhile(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 77,
        "success_count": 67,
        "failure_count": 10,
        "success_rate": 0.8701298701298701
    }
}