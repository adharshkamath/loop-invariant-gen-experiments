{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  while (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= 0xffffffff;\nloop invariant 0 <= j <= 0x7fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant i <= j / 2;\nloop invariant j <= k * 2;\nloop invariant i + j == k * 2;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant i <= k <= 0x0fffffff;\nloop invariant j <= k <= 0x0fffffff;\nloop invariant k <= i + j;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k <= 0x0fffffff;\nloop invariant j == (2 * i);\nloop invariant k == (3 * i + j);\nloop invariant k == (i + j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant (k >= (i + j)) ==> (k == (i + j));\nloop invariant (k <= (i + j)) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k / 3;\nloop invariant 0 <= j <= k / 3 * 2;\nloop invariant i + j == k;\nloop invariant i + j < 0x0fffffff;\nloop invariant k >= 0x0fffffff;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= (k - j) / 3;\nloop invariant 0 <= j <= (k - i) / 3;\nloop invariant (k == (i + j)) ==> ((k == (i + j)) && (k == (i + j)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i + j == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant 2 * i == j;\nloop invariant i + j == k;\nloop invariant j == 2 * i;\nloop invariant k == (i + j);\nloop invariant i + j == k;\nloop invariant j == 2 * i;\nloop invariant k == (i + j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i >= j / 2;\nloop invariant i <= j;\nloop invariant k == (i + j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant k % 3 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant k <= i + j;\nloop invariant k >= i;\nloop invariant k >= j;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff - j;\nloop invariant 0 <= j <= 0x0fffffff - i;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff - j;\nloop invariant 0 <= j <= 0x0fffffff - i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= (k / 3);\nloop invariant 0 <= j <= (k / 3 * 2);\nloop invariant k == (i + j);\nloop invariant k == (i + (k - i) / 3);\nloop invariant k == (j + (k - j) / 2);\nloop invariant k == (i + (k - i) / 3 * 3);\nloop invariant k == (j + (k - j) / 2 * 3);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j <= k <= 0xffffffff;\nloop invariant i == (j - 2 * i) / 2;\nloop invariant j == 2 * i + 1;\nloop invariant k == 3 * i + 2 * i * (i - 1) / 2;\nloop invariant i + j == k;\nloop invariant i >= 0;\nloop invariant j >= 1;\nloop invariant k >= 2;\nloop invariant i < 0xffffffff;\nloop invariant j < 0xffffffff;\nloop invariant k < 0xffffffff;\nloop invariant k == (i + j);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 0xffffffff;\nloop invariant 0 <= j <= 0x7fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant i <= j / 2;\nloop invariant j <= k * 2;\nloop invariant i + j == k * 2;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\nloop invariant i + j == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\nloop invariant i2: 0 <= j <= 0x7fffffff;\n\nloop invariant i4: k == (i + j);\nloop invariant i5: i <= j / 2;\nloop invariant i6: j <= k * 2;\n\nloop invariant i8: i <= k;\nloop invariant i9: j <= k;\nloop invariant i10: i + j == k;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant i <= k <= 0x0fffffff;\nloop invariant j <= k <= 0x0fffffff;\nloop invariant k <= i + j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\n\n\nloop invariant i4: k <= i + j;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant k <= 0x0fffffff;\nloop invariant j == (2 * i);\nloop invariant k == (3 * i + j);\nloop invariant k == (i + j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: k >= 0;\nloop invariant i4: k <= 0x0fffffff;\nloop invariant i5: j == (2 * i);\n\nloop invariant i7: k == (i + j);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant (k >= (i + j)) ==> (k == (i + j));\nloop invariant (k <= (i + j)) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (k == (i + j)) ==> (k == (i + j));\nloop invariant (k >= 0) ==> (k == (i + j));\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (i >= 0) ==> (k == (i + j));\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant (j >= 0) ==> (k == (i + j));\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\nloop invariant i2: 0 <= i <= 0x0fffffff;\n\nloop invariant i4: k == (i + j);\nloop invariant i5: (k >= (i + j)) ==> (k == (i + j));\nloop invariant i6: (k <= (i + j)) ==> (k == (i + j));\nloop invariant i7: (k == (i + j)) ==> (k == (i + j));\nloop invariant i8: (k >= 0) ==> (k == (i + j));\nloop invariant i9: (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant i10: (i >= 0) ==> (k == (i + j));\nloop invariant i11: (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant i12: (j >= 0) ==> (k == (i + j));\nloop invariant i13: (j <= 0x0fffffff) ==> (k == (i + j));\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k / 3;\nloop invariant 0 <= j <= k / 3 * 2;\nloop invariant i + j == k;\nloop invariant i + j < 0x0fffffff;\nloop invariant k >= 0x0fffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= k / 3;\nloop invariant i2: 0 <= j <= k / 3 * 2;\nloop invariant i3: i + j == k;\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= (k - j) / 3;\nloop invariant 0 <= j <= (k - i) / 3;\nloop invariant (k == (i + j)) ==> ((k == (i + j)) && (k == (i + j)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\n\n\nloop invariant i4: (k == (i + j)) ==> ((k == (i + j)) && (k == (i + j)));\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i + j == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\n\n\nloop invariant i4: i + j == k;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= k;\nloop invariant 2 * i == j;\nloop invariant i + j == k;\nloop invariant j == 2 * i;\nloop invariant k == (i + j);\nloop invariant i + j == k;\nloop invariant j == 2 * i;\nloop invariant k == (i + j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: 0 <= i <= k;\nloop invariant i3: 0 <= j <= k;\nloop invariant i4: 2 * i == j;\nloop invariant i5: i + j == k;\nloop invariant i6: j == 2 * i;\nloop invariant i7: k == (i + j);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant i >= j / 2;\nloop invariant i <= j;\nloop invariant k == (i + j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\nloop invariant i2: i >= j / 2;\nloop invariant i3: i <= j;\nloop invariant i4: k == (i + j);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\nloop invariant k % 3 == 0;\nloop invariant i % 2 == 0;\nloop invariant j % 2 == 1;\nloop invariant i <= k;\nloop invariant j <= k;\nloop invariant k <= i + j;\nloop invariant k >= i;\nloop invariant k >= j;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant k % 3 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\nloop invariant i2: 0 <= j <= 0x0fffffff;\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: k == (i + j);\nloop invariant i5: k % 3 == 0;\n\n\nloop invariant i8: i <= k;\nloop invariant i9: j <= k;\nloop invariant i10: k <= i + j;\nloop invariant i11: k >= i;\nloop invariant i12: k >= j;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\n\n\nloop invariant i4: k == (i + j);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff - j;\nloop invariant 0 <= j <= 0x0fffffff - i;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= 0x0fffffff - j;\nloop invariant 0 <= j <= 0x0fffffff - i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 0x0fffffff;\nloop invariant 0 <= j <= 0x0fffffff;\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant k == (i + j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= 0x0fffffff;\n\n\nloop invariant i4: k == (i + j);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 0x0fffffff;\nloop invariant 0 <= i <= (k / 3);\nloop invariant 0 <= j <= (k / 3 * 2);\nloop invariant k == (i + j);\nloop invariant k == (i + (k - i) / 3);\nloop invariant k == (j + (k - j) / 2);\nloop invariant k == (i + (k - i) / 3 * 3);\nloop invariant k == (j + (k - j) / 2 * 3);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= k <= 0x0fffffff;\nloop invariant i2: 0 <= i <= (k / 3);\nloop invariant i3: 0 <= j <= (k / 3 * 2);\nloop invariant i4: k == (i + j);\n\n\n\n\nloop invariant i9: k == (i + (k - i) / 3 * 3 + (k - i) % 3);\n\n\n\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j <= k <= 0xffffffff;\nloop invariant i == (j - 2 * i) / 2;\nloop invariant j == 2 * i + 1;\nloop invariant k == 3 * i + 2 * i * (i - 1) / 2;\nloop invariant i + j == k;\nloop invariant i >= 0;\nloop invariant j >= 1;\nloop invariant k >= 2;\nloop invariant i < 0xffffffff;\nloop invariant j < 0xffffffff;\nloop invariant k < 0xffffffff;\nloop invariant k == (i + j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= j <= k <= 0xffffffff;\n\n\n\nloop invariant i5: i + j == k;\nloop invariant i6: i >= 0;\n\n\nloop invariant i9: i < 0xffffffff;\nloop invariant i10: j < 0xffffffff;\nloop invariant i11: k < 0xffffffff;\nloop invariant i12: k == (i + j);\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 1 <= i <= 0xffffffff is preserved but not established.\nloop invariant 0 <= j <= 0x7fffffff is partially proven to be inductive.\nloop invariant 0 <= k <= 0x0fffffff is partially proven to be inductive.\nloop invariant k == (i + j) is partially proven to be inductive.\nloop invariant i <= j / 2 is partially proven to be inductive.\nloop invariant j <= k * 2 is partially proven to be inductive.\nloop invariant i + j == k * 2 is partially proven to be inductive.\nloop invariant i <= k is partially proven to be inductive.\nloop invariant j <= k is partially proven to be inductive.\nloop invariant i + j == k is partially proven to be inductive.\nloop invariant 0 <= i <= 0x0fffffff is partially proven to be inductive.\nloop invariant i <= k <= 0x0fffffff is partially proven to be inductive.\nloop invariant j <= k <= 0x0fffffff is partially proven to be inductive.\nloop invariant k <= i + j is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= 0x0fffffff is partially proven to be inductive.\nloop invariant j == (2 * i) is partially proven to be inductive.\nloop invariant k == (3 * i + j) is partially proven to be inductive.\nloop invariant 0 <= j <= 0x0fffffff is partially proven to be inductive.\nloop invariant (k >= (i + j)) ==> (k == (i + j)) is partially proven to be inductive.\nloop invariant (k <= (i + j)) ==> (k == (i + j)) is partially proven to be inductive.\nloop invariant (k == (i + j)) ==> (k == (i + j)) is partially proven to be inductive.\nloop invariant (k >= 0) ==> (k == (i + j)) is partially proven to be inductive.\nloop invariant (k <= 0x0fffffff) ==> (k == (i + j)) is partially proven to be inductive.\nloop invariant (i >= 0) ==> (k == (i + j)) is partially proven to be inductive.\nloop invariant (i <= 0x0fffffff) ==> (k == (i + j)) is partially proven to be inductive.\nloop invariant (j >= 0) ==> (k == (i + j)) is partially proven to be inductive.\nloop invariant (j <= 0x0fffffff) ==> (k == (i + j)) is partially proven to be inductive.\nloop invariant 0 <= i <= k / 3 is partially proven to be inductive.\nloop invariant 0 <= j <= k / 3 * 2 is partially proven to be inductive.\nloop invariant i + j < 0x0fffffff is partially proven to be inductive.\nloop invariant k >= 0x0fffffff is partially proven to be inductive.\nloop invariant 0 <= i <= (k - j) / 3 is partially proven to be inductive.\nloop invariant 0 <= j <= (k - i) / 3 is partially proven to be inductive.\nloop invariant (k == (i + j)) ==> ((k == (i + j)) && (k == (i + j))) is partially proven to be inductive.\nloop invariant 0 <= i <= k is partially proven to be inductive.\nloop invariant 0 <= j <= k is partially proven to be inductive.\nloop invariant 2 * i == j is partially proven to be inductive.\nloop invariant j == 2 * i is partially proven to be inductive.\nloop invariant i >= j / 2 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant k % 3 == 0 is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant j % 2 == 1 is partially proven to be inductive.\nloop invariant k >= i is partially proven to be inductive.\nloop invariant k >= j is partially proven to be inductive.\nloop invariant 0 <= i <= 0x0fffffff - j is partially proven to be inductive.\nloop invariant 0 <= j <= 0x0fffffff - i is partially proven to be inductive.\nloop invariant 0 <= i <= (k / 3) is partially proven to be inductive.\nloop invariant 0 <= j <= (k / 3 * 2) is partially proven to be inductive.\nloop invariant k == (i + (k - i) / 3) is partially proven to be inductive.\nloop invariant k == (j + (k - j) / 2) is partially proven to be inductive.\nloop invariant k == (i + (k - i) / 3 * 3) is partially proven to be inductive.\nloop invariant k == (j + (k - j) / 2 * 3) is partially proven to be inductive.\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3) is partially proven to be inductive.\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3) is partially proven to be inductive.\nloop invariant k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2) is partially proven to be inductive.\nloop invariant k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2) is partially proven to be inductive.\nloop invariant 0 <= i <= j <= k <= 0xffffffff is partially proven to be inductive.\nloop invariant i == (j - 2 * i) / 2 is partially proven to be inductive.\nloop invariant j == 2 * i + 1 is partially proven to be inductive.\nloop invariant k == 3 * i + 2 * i * (i - 1) / 2 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant k >= 2 is partially proven to be inductive.\nloop invariant i < 0xffffffff is partially proven to be inductive.\nloop invariant j < 0xffffffff is partially proven to be inductive.\nloop invariant k < 0xffffffff is partially proven to be inductive.\nAssertion k == i + j: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\nloop invariant i1: 1 <= i <= 0xffffffff;\nloop invariant i2: 0 <= j <= 0x7fffffff;\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: k == (i + j);\nloop invariant i5: i <= j / 2;\nloop invariant i6: j <= k * 2;\nloop invariant i7: i + j == k * 2;\nloop invariant i8: i <= k;\nloop invariant i9: j <= k;\nloop invariant i10: i + j == k;\nloop invariant i11: 0 <= i <= 0x0fffffff;\nloop invariant i12: i <= k <= 0x0fffffff;\nloop invariant i13: j <= k <= 0x0fffffff;\nloop invariant i14: k <= i + j;\nloop invariant i15: i >= 0;\nloop invariant i16: j >= 0;\nloop invariant i17: k >= 0;\nloop invariant i18: k <= 0x0fffffff;\nloop invariant i19: j == (2 * i);\nloop invariant i20: k == (3 * i + j);\nloop invariant i21: 0 <= j <= 0x0fffffff;\nloop invariant i22: (k >= (i + j)) ==> (k == (i + j));\nloop invariant i23: (k <= (i + j)) ==> (k == (i + j));\nloop invariant i24: (k == (i + j)) ==> (k == (i + j));\nloop invariant i25: (k >= 0) ==> (k == (i + j));\nloop invariant i26: (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant i27: (i >= 0) ==> (k == (i + j));\nloop invariant i28: (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant i29: (j >= 0) ==> (k == (i + j));\nloop invariant i30: (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant i31: 0 <= i <= k / 3;\nloop invariant i32: 0 <= j <= k / 3 * 2;\nloop invariant i33: i + j < 0x0fffffff;\nloop invariant i34: k >= 0x0fffffff;\nloop invariant i35: 0 <= i <= (k - j) / 3;\nloop invariant i36: 0 <= j <= (k - i) / 3;\nloop invariant i37: (k == (i + j)) ==> ((k == (i + j)) && (k == (i + j)));\nloop invariant i38: 0 <= i <= k;\nloop invariant i39: 0 <= j <= k;\nloop invariant i40: 2 * i == j;\nloop invariant i41: j == 2 * i;\nloop invariant i42: i >= j / 2;\nloop invariant i43: i <= j;\nloop invariant i44: k % 3 == 0;\nloop invariant i45: i % 2 == 0;\nloop invariant i46: j % 2 == 1;\nloop invariant i47: k >= i;\nloop invariant i48: k >= j;\nloop invariant i49: 0 <= i <= 0x0fffffff - j;\nloop invariant i50: 0 <= j <= 0x0fffffff - i;\nloop invariant i51: 0 <= i <= (k / 3);\nloop invariant i52: 0 <= j <= (k / 3 * 2);\nloop invariant i53: k == (i + (k - i) / 3);\nloop invariant i54: k == (j + (k - j) / 2);\nloop invariant i55: k == (i + (k - i) / 3 * 3);\nloop invariant i56: k == (j + (k - j) / 2 * 3);\nloop invariant i57: k == (i + (k - i) / 3 * 3 + (k - i) % 3);\nloop invariant i58: k == (j + (k - j) / 2 * 3 + (k - j) % 3);\nloop invariant i59: k == (i + (k - i) / 3 * 3 + (k - i) % 3 * 2);\nloop invariant i60: k == (j + (k - j) / 2 * 3 + (k - j) % 3 * 2);\nloop invariant i61: 0 <= i <= j <= k <= 0xffffffff;\nloop invariant i62: i == (j - 2 * i) / 2;\nloop invariant i63: j == 2 * i + 1;\nloop invariant i64: k == 3 * i + 2 * i * (i - 1) / 2;\nloop invariant i65: j >= 1;\nloop invariant i66: k >= 2;\nloop invariant i67: i < 0xffffffff;\nloop invariant i68: j < 0xffffffff;\nloop invariant i69: k < 0xffffffff;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
        "combined_annotation_num_solver_calls": 22,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  /*@\n\nloop invariant i2: 0 <= j <= 0x7fffffff;\nloop invariant i3: 0 <= k <= 0x0fffffff;\nloop invariant i4: k == (i + j);\nloop invariant i5: i <= j / 2;\nloop invariant i6: j <= k * 2;\n\nloop invariant i8: i <= k;\nloop invariant i9: j <= k;\nloop invariant i10: i + j == k;\nloop invariant i11: 0 <= i <= 0x0fffffff;\nloop invariant i12: i <= k <= 0x0fffffff;\nloop invariant i13: j <= k <= 0x0fffffff;\nloop invariant i14: k <= i + j;\nloop invariant i15: i >= 0;\nloop invariant i16: j >= 0;\nloop invariant i17: k >= 0;\nloop invariant i18: k <= 0x0fffffff;\nloop invariant i19: j == (2 * i);\n\nloop invariant i21: 0 <= j <= 0x0fffffff;\nloop invariant i22: (k >= (i + j)) ==> (k == (i + j));\nloop invariant i23: (k <= (i + j)) ==> (k == (i + j));\nloop invariant i24: (k == (i + j)) ==> (k == (i + j));\nloop invariant i25: (k >= 0) ==> (k == (i + j));\nloop invariant i26: (k <= 0x0fffffff) ==> (k == (i + j));\nloop invariant i27: (i >= 0) ==> (k == (i + j));\nloop invariant i28: (i <= 0x0fffffff) ==> (k == (i + j));\nloop invariant i29: (j >= 0) ==> (k == (i + j));\nloop invariant i30: (j <= 0x0fffffff) ==> (k == (i + j));\nloop invariant i31: 0 <= i <= k / 3;\nloop invariant i32: 0 <= j <= k / 3 * 2;\n\n\n\n\nloop invariant i37: (k == (i + j)) ==> ((k == (i + j)) && (k == (i + j)));\nloop invariant i38: 0 <= i <= k;\nloop invariant i39: 0 <= j <= k;\nloop invariant i40: 2 * i == j;\nloop invariant i41: j == 2 * i;\nloop invariant i42: i >= j / 2;\nloop invariant i43: i <= j;\nloop invariant i44: k % 3 == 0;\n\n\nloop invariant i47: k >= i;\nloop invariant i48: k >= j;\nloop invariant i49: 0 <= i <= 0x0fffffff - j;\nloop invariant i50: 0 <= j <= 0x0fffffff - i;\nloop invariant i51: 0 <= i <= (k / 3);\nloop invariant i52: 0 <= j <= (k / 3 * 2);\n\n\n\n\nloop invariant i57: k == (i + (k - i) / 3 * 3 + (k - i) % 3);\n\n\n\nloop invariant i61: 0 <= i <= j <= k <= 0xffffffff;\n\n\n\n\n\nloop invariant i67: i < 0xffffffff;\nloop invariant i68: j < 0xffffffff;\nloop invariant i69: k < 0xffffffff;\n*/\nwhile (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n\n  }\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 96,
        "success_count": 86,
        "failure_count": 10,
        "success_rate": 0.8958333333333334
    }
}