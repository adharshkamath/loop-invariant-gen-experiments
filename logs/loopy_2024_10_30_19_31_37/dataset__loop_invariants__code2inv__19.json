{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/19.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m < x;\nloop invariant x < n;\nloop invariant m < n ==> m < x;\nloop invariant x < n ==> m < x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m < n;\nloop invariant if (unknown()) then m = x;\nloop invariant x <= n;\nloop invariant if (unknown()) then m <= x;\nloop invariant if (unknown()) then m = x ==> m < n;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (m < n) ==> (unknown() ==> (x < n));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> (m < x));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> (m < n));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> (m < n)));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= n - 1;\nloop invariant m <= n - 2;\nloop invariant m <= n - 3;\nloop invariant m <= n - 4;\nloop invariant m <= n - 5;\nloop invariant m <= n - 6;\nloop invariant m <= n - 7;\nloop invariant m <= n - 8;\nloop invariant m <= n - 9;\nloop invariant m <= n - 10;\nloop invariant m <= n - 11;\nloop invariant m <= n - 12;\nloop invariant m <= n - 13;\nloop invariant m <= n - 14;\nloop invariant m <= n - 15;\nloop invariant m <= n - 16;\nloop invariant m <= n - 17;\nloop invariant m <= n - 18;\nloop invariant m <= n - 19;\nloop invariant m <= n - 20;\nloop invariant m <= n - 21;\nloop invariant m <= n - 22;\nloop invariant m <= n - 23;\nloop invariant m <= n - 24;\nloop invariant m <= n - 25;\nloop invariant m <= n - 26;\nloop invariant m <= n - 27;\nloop invariant m <= n - 28;\nloop invariant m <= n - 29;\nloop invariant m <= n - 30;\nloop invariant m <= n - 31;\nloop invariant m <= n - 32;\nloop invariant m <= n - 33;\nloop invariant m <= n - 34;\nloop invariant m <= n - 35;\nloop invariant m <= n - 36;\nloop invariant m <= n - 37;\nloop invariant m <= n - 38;\nloop invariant m <= n - 39;\nloop invariant m <= n - 40;\nloop invariant m <= n - 41;\nloop invariant m <= n - 42;\nloop invariant m <= n - 43;\nloop invariant m <= n - 44;\nloop invariant m <= n - 45;\nloop invariant m <= n - 46;\nloop invariant m <= n - 47;\nloop invariant m <= n - 48;\nloop invariant m <= n - 49;\nloop invariant m <= n - 50;\nloop invariant m <= n - 51;\nloop invariant m <= n - 52;\nloop invariant m <= n - 53;\nloop invariant m <= n - 54;\nloop invariant m <= n - 55;\nloop invariant m <= n - 56;\nloop invariant m <= n - 57;\nloop invariant m <= n - 58;\nloop invariant m <= n - 59;\nloop invariant m <= n - 60;\nloop invariant m <= n - 61;\nloop invariant m <= n - 62;\nloop invariant m <= n - 63;\nloop invariant m <= n - 64;\nloop invariant m <= n - 65;\nloop invariant m <= n - 66;\nloop invariant m <= n - 67;\nloop invariant m <= n - 68;\nloop invariant m <= n - 69;\nloop invariant m <= n - 70;\nloop invariant m <= n - 71;\nloop invariant m <= n - 72;\nloop invariant m <= n - 73;\nloop invariant m <= n - 74;\nloop invariant m <= n - 75;\nloop invariant m <= n - 76;\nloop invariant m <= n - 77;\nloop invariant m <= n - 78;\nloop invariant m <= n - 79;\nloop invariant m <= n - 80;\nloop invariant m <= n - 81;\nloop invariant m <= n - 82;\nloop invariant m <= n - 83;\nloop invariant m <= n - 84;\nloop invariant m <= n - 85;\nloop invariant m <= n - 86;\nloop invariant m <= n - 87;\nloop invariant m <= n - 88;\nloop invariant m <= n - 89;\nloop invariant m <= n - 90;\nloop invariant m <= n - 91;\nloop invariant m <= n - 92;\nloop invariant m <= n - 93;\nloop invariant m <= n - 94;\nloop invariant m <= n - 95;\nloop invariant m <= n - 96;\nloop invariant m <= n - 97;\nloop invariant m <= n - 98;\n*/\n```",
            "```\n/*@\nloop invariant m < n ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\nloop invariant x <= n ==> m < n;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m == x || m < x;\nloop invariant m == x || m == n;\nloop invariant m == x || m == 0;\nloop invariant m == x || m == n || m == 0;\nloop invariant m == x || m == n || m == 0 || m == x + 1;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8 || m == n + 9;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8 || m == n + 9 || m == n + 10;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8 || m == n + 9 || m == n + 10 || m == n + 11;\n*/\n```",
            "```\n/*@\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant if (unknown()) then m = x else m <= x;\nloop invariant if (unknown()) then m = x else m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x + m >= 0;\nloop invariant x + m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m < x;\nloop invariant x == n ==> m == 0;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < n ==> m < x;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant (if n > 0 then m < n else true);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant (m < n ==> x < n);\nloop invariant (m < n ==> x <= m);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant 0 <= m <= n;\nloop invariant n > 0 ==> m < n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m < x;\nloop invariant x < n;\nloop invariant m < n ==> m < x;\nloop invariant x < n ==> m < x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m < n;\nloop invariant if (unknown()) then m = x;\nloop invariant x <= n;\nloop invariant if (unknown()) then m <= x;\nloop invariant if (unknown()) then m = x ==> m < n;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant if (unknown()) then m = x ==> m = x;\nloop invariant if (unknown()) then m = x ==> m <= x;\nloop invariant if (unknown()) then m = x ==> m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (m < n) ==> (unknown() ==> (x < n));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> (m < x));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> (m < n));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> (m < n)));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= n - 1;\nloop invariant m <= n - 2;\nloop invariant m <= n - 3;\nloop invariant m <= n - 4;\nloop invariant m <= n - 5;\nloop invariant m <= n - 6;\nloop invariant m <= n - 7;\nloop invariant m <= n - 8;\nloop invariant m <= n - 9;\nloop invariant m <= n - 10;\nloop invariant m <= n - 11;\nloop invariant m <= n - 12;\nloop invariant m <= n - 13;\nloop invariant m <= n - 14;\nloop invariant m <= n - 15;\nloop invariant m <= n - 16;\nloop invariant m <= n - 17;\nloop invariant m <= n - 18;\nloop invariant m <= n - 19;\nloop invariant m <= n - 20;\nloop invariant m <= n - 21;\nloop invariant m <= n - 22;\nloop invariant m <= n - 23;\nloop invariant m <= n - 24;\nloop invariant m <= n - 25;\nloop invariant m <= n - 26;\nloop invariant m <= n - 27;\nloop invariant m <= n - 28;\nloop invariant m <= n - 29;\nloop invariant m <= n - 30;\nloop invariant m <= n - 31;\nloop invariant m <= n - 32;\nloop invariant m <= n - 33;\nloop invariant m <= n - 34;\nloop invariant m <= n - 35;\nloop invariant m <= n - 36;\nloop invariant m <= n - 37;\nloop invariant m <= n - 38;\nloop invariant m <= n - 39;\nloop invariant m <= n - 40;\nloop invariant m <= n - 41;\nloop invariant m <= n - 42;\nloop invariant m <= n - 43;\nloop invariant m <= n - 44;\nloop invariant m <= n - 45;\nloop invariant m <= n - 46;\nloop invariant m <= n - 47;\nloop invariant m <= n - 48;\nloop invariant m <= n - 49;\nloop invariant m <= n - 50;\nloop invariant m <= n - 51;\nloop invariant m <= n - 52;\nloop invariant m <= n - 53;\nloop invariant m <= n - 54;\nloop invariant m <= n - 55;\nloop invariant m <= n - 56;\nloop invariant m <= n - 57;\nloop invariant m <= n - 58;\nloop invariant m <= n - 59;\nloop invariant m <= n - 60;\nloop invariant m <= n - 61;\nloop invariant m <= n - 62;\nloop invariant m <= n - 63;\nloop invariant m <= n - 64;\nloop invariant m <= n - 65;\nloop invariant m <= n - 66;\nloop invariant m <= n - 67;\nloop invariant m <= n - 68;\nloop invariant m <= n - 69;\nloop invariant m <= n - 70;\nloop invariant m <= n - 71;\nloop invariant m <= n - 72;\nloop invariant m <= n - 73;\nloop invariant m <= n - 74;\nloop invariant m <= n - 75;\nloop invariant m <= n - 76;\nloop invariant m <= n - 77;\nloop invariant m <= n - 78;\nloop invariant m <= n - 79;\nloop invariant m <= n - 80;\nloop invariant m <= n - 81;\nloop invariant m <= n - 82;\nloop invariant m <= n - 83;\nloop invariant m <= n - 84;\nloop invariant m <= n - 85;\nloop invariant m <= n - 86;\nloop invariant m <= n - 87;\nloop invariant m <= n - 88;\nloop invariant m <= n - 89;\nloop invariant m <= n - 90;\nloop invariant m <= n - 91;\nloop invariant m <= n - 92;\nloop invariant m <= n - 93;\nloop invariant m <= n - 94;\nloop invariant m <= n - 95;\nloop invariant m <= n - 96;\nloop invariant m <= n - 97;\nloop invariant m <= n - 98;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant m < n ==> x < n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= n;\nloop invariant x <= n ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m == x || m < x;\nloop invariant m == x || m == n;\nloop invariant m == x || m == 0;\nloop invariant m == x || m == n || m == 0;\nloop invariant m == x || m == n || m == 0 || m == x + 1;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8 || m == n + 9;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8 || m == n + 9 || m == n + 10;\nloop invariant m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8 || m == n + 9 || m == n + 10 || m == n + 11;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\nloop invariant i5: m == x || m < x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant if (unknown()) then m = x else m <= x;\nloop invariant if (unknown()) then m = x else m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x + m >= 0;\nloop invariant x + m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\nloop invariant i5: x + m >= 0;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m < x;\nloop invariant x == n ==> m == 0;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < n ==> m < x;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\nloop invariant m < x ==> m < n;\nloop invariant m == 0 ==> n == 0 || n == 1;\nloop invariant m < x ==> m < n;\nloop invariant m == n ==> x == n;\nloop invariant m == x ==> m == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n\n\n\nloop invariant i8: m == n ==> x == n;\n\nloop invariant i10: m < x ==> m < n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant (if n > 0 then m < n else true);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant (m < n ==> x < n);\nloop invariant (m < n ==> x <= m);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant 0 <= m <= n;\nloop invariant n > 0 ==> m < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\nloop invariant i4: n > 0 ==> m < n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 24: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= m <= n;\nloop invariant i3: m < x;\nloop invariant i4: x < n;\nloop invariant i5: m < n ==> m < x;\nloop invariant i6: x < n ==> m < x;\nloop invariant i7: 0 <= m < n;\nloop invariant i8: if (unknown()) then m = x;\nloop invariant i9: x <= n;\nloop invariant i10: if (unknown()) then m <= x;\nloop invariant i11: if (unknown()) then m = x ==> m < n;\nloop invariant i12: if (unknown()) then m = x ==> m <= x;\nloop invariant i13: if (unknown()) then m = x ==> m <= n;\nloop invariant i14: if (unknown()) then m = x ==> m < n ==> m <= n;\nloop invariant i15: if (unknown()) then m = x ==> m = x;\nloop invariant i16: m <= x;\nloop invariant i17: m <= n;\nloop invariant i18: (m < n) ==> (unknown() ==> (x < n));\nloop invariant i19: (m < n) ==> ((unknown() ==> (x < n)) ==> (m < x));\nloop invariant i20: (m < n) ==> ((unknown() ==> (x < n)) ==> (m < n));\nloop invariant i21: (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> (m < n)));\nloop invariant i22: (m < n) ==> ((unknown() ==> (x < n)) ==> ((m < x) ==> ((m < n) ==> (m < n))));\nloop invariant i23: m <= n - 1;\nloop invariant i24: m <= n - 2;\nloop invariant i25: m <= n - 3;\nloop invariant i26: m <= n - 4;\nloop invariant i27: m <= n - 5;\nloop invariant i28: m <= n - 6;\nloop invariant i29: m <= n - 7;\nloop invariant i30: m <= n - 8;\nloop invariant i31: m <= n - 9;\nloop invariant i32: m <= n - 10;\nloop invariant i33: m <= n - 11;\nloop invariant i34: m <= n - 12;\nloop invariant i35: m <= n - 13;\nloop invariant i36: m <= n - 14;\nloop invariant i37: m <= n - 15;\nloop invariant i38: m <= n - 16;\nloop invariant i39: m <= n - 17;\nloop invariant i40: m <= n - 18;\nloop invariant i41: m <= n - 19;\nloop invariant i42: m <= n - 20;\nloop invariant i43: m <= n - 21;\nloop invariant i44: m <= n - 22;\nloop invariant i45: m <= n - 23;\nloop invariant i46: m <= n - 24;\nloop invariant i47: m <= n - 25;\nloop invariant i48: m <= n - 26;\nloop invariant i49: m <= n - 27;\nloop invariant i50: m <= n - 28;\nloop invariant i51: m <= n - 29;\nloop invariant i52: m <= n - 30;\nloop invariant i53: m <= n - 31;\nloop invariant i54: m <= n - 32;\nloop invariant i55: m <= n - 33;\nloop invariant i56: m <= n - 34;\nloop invariant i57: m <= n - 35;\nloop invariant i58: m <= n - 36;\nloop invariant i59: m <= n - 37;\nloop invariant i60: m <= n - 38;\nloop invariant i61: m <= n - 39;\nloop invariant i62: m <= n - 40;\nloop invariant i63: m <= n - 41;\nloop invariant i64: m <= n - 42;\nloop invariant i65: m <= n - 43;\nloop invariant i66: m <= n - 44;\nloop invariant i67: m <= n - 45;\nloop invariant i68: m <= n - 46;\nloop invariant i69: m <= n - 47;\nloop invariant i70: m <= n - 48;\nloop invariant i71: m <= n - 49;\nloop invariant i72: m <= n - 50;\nloop invariant i73: m <= n - 51;\nloop invariant i74: m <= n - 52;\nloop invariant i75: m <= n - 53;\nloop invariant i76: m <= n - 54;\nloop invariant i77: m <= n - 55;\nloop invariant i78: m <= n - 56;\nloop invariant i79: m <= n - 57;\nloop invariant i80: m <= n - 58;\nloop invariant i81: m <= n - 59;\nloop invariant i82: m <= n - 60;\nloop invariant i83: m <= n - 61;\nloop invariant i84: m <= n - 62;\nloop invariant i85: m <= n - 63;\nloop invariant i86: m <= n - 64;\nloop invariant i87: m <= n - 65;\nloop invariant i88: m <= n - 66;\nloop invariant i89: m <= n - 67;\nloop invariant i90: m <= n - 68;\nloop invariant i91: m <= n - 69;\nloop invariant i92: m <= n - 70;\nloop invariant i93: m <= n - 71;\nloop invariant i94: m <= n - 72;\nloop invariant i95: m <= n - 73;\nloop invariant i96: m <= n - 74;\nloop invariant i97: m <= n - 75;\nloop invariant i98: m <= n - 76;\nloop invariant i99: m <= n - 77;\nloop invariant i100: m <= n - 78;\nloop invariant i101: m <= n - 79;\nloop invariant i102: m <= n - 80;\nloop invariant i103: m <= n - 81;\nloop invariant i104: m <= n - 82;\nloop invariant i105: m <= n - 83;\nloop invariant i106: m <= n - 84;\nloop invariant i107: m <= n - 85;\nloop invariant i108: m <= n - 86;\nloop invariant i109: m <= n - 87;\nloop invariant i110: m <= n - 88;\nloop invariant i111: m <= n - 89;\nloop invariant i112: m <= n - 90;\nloop invariant i113: m <= n - 91;\nloop invariant i114: m <= n - 92;\nloop invariant i115: m <= n - 93;\nloop invariant i116: m <= n - 94;\nloop invariant i117: m <= n - 95;\nloop invariant i118: m <= n - 96;\nloop invariant i119: m <= n - 97;\nloop invariant i120: m <= n - 98;\nloop invariant i121: m < n ==> x < n;\nloop invariant i122: x >= 0;\nloop invariant i123: 0 <= m <= x;\nloop invariant i124: x <= n ==> m < n;\nloop invariant i125: m >= 0;\nloop invariant i126: m == x || m < x;\nloop invariant i127: m == x || m == n;\nloop invariant i128: m == x || m == 0;\nloop invariant i129: m == x || m == n || m == 0;\nloop invariant i130: m == x || m == n || m == 0 || m == x + 1;\nloop invariant i131: m == x || m == n || m == 0 || m == x + 1 || m == n - 1;\nloop invariant i132: m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1;\nloop invariant i133: m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2;\nloop invariant i134: m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3;\nloop invariant i135: m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4;\nloop invariant i136: m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5;\nloop invariant i137: m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6;\nloop invariant i138: m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7;\nloop invariant i139: m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8;\nloop invariant i140: m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8 || m == n + 9;\nloop invariant i141: m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8 || m == n + 9 || m == n + 10;\nloop invariant i142: m == x || m == n || m == 0 || m == x + 1 || m == n - 1 || m == n + 1 || m == n + 2 || m == n + 3 || m == n + 4 || m == n + 5 || m == n + 6 || m == n + 7 || m == n + 8 || m == n + 9 || m == n + 10 || m == n + 11;\nloop invariant i143: if (unknown()) then m = x else m <= x;\nloop invariant i144: n >= 0;\nloop invariant i145: x + m >= 0;\nloop invariant i146: x + m <= n;\nloop invariant i147: x == n ==> m == 0;\nloop invariant i148: m == 0 ==> n == 0 || n == 1;\nloop invariant i149: m == n ==> x == n;\nloop invariant i150: m == x ==> m == n;\nloop invariant i151: m < x ==> m < n;\nloop invariant i152: (if n > 0 then m < n else true);\nloop invariant i153: 1 <= x <= n;\nloop invariant i154: (m < n ==> x < n);\nloop invariant i155: (m < n ==> x <= m);\nloop invariant i156: n > 0 ==> m < n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 37,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: m <= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i122: x >= 0;\nloop invariant i123: 0 <= m <= x;\n\nloop invariant i125: m >= 0;\nloop invariant i126: m == x || m < x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i145: x + m >= 0;\n\n\n\nloop invariant i149: m == n ==> x == n;\n\nloop invariant i151: m < x ==> m < n;\n\n\n\n\nloop invariant i156: n > 0 ==> m < n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c"
        ],
        "skipped": [],
        "total": 15,
        "success_count": 13,
        "failure_count": 2,
        "success_rate": 0.8666666666666667
    }
}