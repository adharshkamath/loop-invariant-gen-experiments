{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  while (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x == 1 ==> x == 2;\nloop invariant x == 2 ==> x == 1;\nloop invariant x == 1 ==> !unknown_bool();\nloop invariant x == 2 ==> !unknown_bool();\nloop invariant x == 1 ==> unknown_int() == 1;\nloop invariant x == 2 ==> unknown_int() == 2;\nloop invariant 1 <= x <= 2;\nloop invariant x == 1 ==> x == 2;\nloop invariant x == 2 ==> x == 1;\nloop invariant x == 1 ==> !unknown_bool();\nloop invariant x == 2 ==> !unknown_bool();\nloop invariant x == 1 ==> unknown_int() == 1;\nloop invariant x == 2 ==> unknown_int() == 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant (x==1 || x==2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant (x == 1 || x == 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x == 1 => x == 2;\nloop invariant x == 2 => x == 1;\nloop invariant x == 1 => x <= 8;\nloop invariant x == 2 => x <= 8;\nloop invariant x == 1 => x <= 8;\nloop invariant x == 2 => x <= 8;\nloop invariant x == 1 => x <= 8;\nloop invariant x == 2 => x <= 8;\nloop invariant x == 1 => x <= 8;\nloop invariant x == 2 => x <= 8;\nloop invariant x == 1 => x <= 8;\nloop invariant x == 2 => x <= 8;\n*/\n```",
            "```\n/*@\nloop invariant ( x == 1 ) ==> ( x <= 8 );\nloop invariant ( x == 2 ) ==> ( x <= 8 );\nloop invariant ( x != 1 ) ==> ( x != 2 ) ==> ( x <= 8 );\nloop invariant ( x != 1 ) ==> ( x != 2 ) ==> ( x >= 1 );\nloop invariant ( x != 1 ) ==> ( x != 2 ) ==> ( x == 1 ) || ( x == 2 );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant !(x==1 && x==2);\nloop invariant !(x==1 && x==2 && unknown_bool());\nloop invariant !(x==1 && x==2 && unknown_bool() && unknown_bool());\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant x == 1 || x == 2;\nloop invariant !(x==1 ==> x==2) || !(x==2 ==> x==1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x == 1 || x == 2;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant x <= 8;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x <= 8;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 8; loop invariant x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8; loop invariant !unknown_bool() ==> x==1 || x==2;\nloop invariant 0 <= x <= 8; loop invariant (unknown_bool() ==> x==1 || x==2) && (unknown_bool() ==> x==3 || x==4 || x==5 || x==6 || x==7 || x==8); loop invariant x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8; loop invariant !(x==1 && x==2); loop invariant !unknown_bool() ==> x==1 || x==2; loop invariant (unknown_bool() ==> x==1 || x==2) && (unknown_bool() ==> x==3 || x==4 || x==5 || x==6 || x==7 || x==8); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7 && x==8); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7 && x==8 && x==1); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7 && x==8 && x==1 && x==2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x == 1 ==> x == 2;\nloop invariant x == 2 ==> x == 1;\nloop invariant x == 1 ==> !unknown_bool();\nloop invariant x == 2 ==> !unknown_bool();\nloop invariant x == 1 ==> unknown_int() == 1;\nloop invariant x == 2 ==> unknown_int() == 2;\nloop invariant 1 <= x <= 2;\nloop invariant x == 1 ==> x == 2;\nloop invariant x == 2 ==> x == 1;\nloop invariant x == 1 ==> !unknown_bool();\nloop invariant x == 2 ==> !unknown_bool();\nloop invariant x == 1 ==> unknown_int() == 1;\nloop invariant x == 2 ==> unknown_int() == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 1 <= x <= 2;\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant (x==1 || x==2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 8;\nloop invariant i2: (x==1 || x==2);\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant (x == 1 || x == 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 8;\nloop invariant i2: (x == 1 || x == 2);\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x == 1 => x == 2;\nloop invariant x == 2 => x == 1;\nloop invariant x == 1 => x <= 8;\nloop invariant x == 2 => x <= 8;\nloop invariant x == 1 => x <= 8;\nloop invariant x == 2 => x <= 8;\nloop invariant x == 1 => x <= 8;\nloop invariant x == 2 => x <= 8;\nloop invariant x == 1 => x <= 8;\nloop invariant x == 2 => x <= 8;\nloop invariant x == 1 => x <= 8;\nloop invariant x == 2 => x <= 8;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 1 <= x <= 2;\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant ( x == 1 ) ==> ( x <= 8 );\nloop invariant ( x == 2 ) ==> ( x <= 8 );\nloop invariant ( x != 1 ) ==> ( x != 2 ) ==> ( x <= 8 );\nloop invariant ( x != 1 ) ==> ( x != 2 ) ==> ( x >= 1 );\nloop invariant ( x != 1 ) ==> ( x != 2 ) ==> ( x == 1 ) || ( x == 2 );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: ( x == 1 ) ==> ( x <= 8 );\nloop invariant i2: ( x == 2 ) ==> ( x <= 8 );\nloop invariant i3: ( x != 1 ) ==> ( x != 2 ) ==> ( x <= 8 );\nloop invariant i4: ( x != 1 ) ==> ( x != 2 ) ==> ( x >= 1 );\nloop invariant i5: ( x != 1 ) ==> ( x != 2 ) ==> ( x == 1 ) || ( x == 2 );\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant !(x==1 && x==2);\nloop invariant !(x==1 && x==2 && unknown_bool());\nloop invariant !(x==1 && x==2 && unknown_bool() && unknown_bool());\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: !(x==1 && x==2);\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 2;\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 3;\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant x == 1 || x == 2;\nloop invariant !(x==1 ==> x==2) || !(x==2 ==> x==1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 8;\nloop invariant i2: x == 1 || x == 2;\nloop invariant i3: !(x==1 ==> x==2) || !(x==2 ==> x==1);\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 1 <= x <= 2;\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant x == 1 || x == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: x == 1 || x == 2;\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 8;\nloop invariant x <= 8;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 8;\nloop invariant i2: x <= 8;\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant x <= 8;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 1 <= x <= 2;\nloop invariant i2: x <= 8;\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 8; loop invariant x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8; loop invariant !unknown_bool() ==> x==1 || x==2;\nloop invariant 0 <= x <= 8; loop invariant (unknown_bool() ==> x==1 || x==2) && (unknown_bool() ==> x==3 || x==4 || x==5 || x==6 || x==7 || x==8); loop invariant x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8; loop invariant !(x==1 && x==2); loop invariant !unknown_bool() ==> x==1 || x==2; loop invariant (unknown_bool() ==> x==1 || x==2) && (unknown_bool() ==> x==3 || x==4 || x==5 || x==6 || x==7 || x==8); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7 && x==8); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7 && x==8 && x==1); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7 && x==8 && x==1 && x==2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 1 <= x <= 2;\nloop invariant i2: x == 1 ==> x == 2;\nloop invariant i3: x == 2 ==> x == 1;\nloop invariant i4: x == 1 ==> !unknown_bool();\nloop invariant i5: x == 2 ==> !unknown_bool();\nloop invariant i6: x == 1 ==> unknown_int() == 1;\nloop invariant i7: x == 2 ==> unknown_int() == 2;\nloop invariant i8: 0 <= x <= 8;\nloop invariant i9: (x==1 || x==2);\nloop invariant i10: (x == 1 || x == 2);\nloop invariant i11: x == 1 => x == 2;\nloop invariant i12: x == 2 => x == 1;\nloop invariant i13: x == 1 => x <= 8;\nloop invariant i14: x == 2 => x <= 8;\nloop invariant i15: ( x == 1 ) ==> ( x <= 8 );\nloop invariant i16: ( x == 2 ) ==> ( x <= 8 );\nloop invariant i17: ( x != 1 ) ==> ( x != 2 ) ==> ( x <= 8 );\nloop invariant i18: ( x != 1 ) ==> ( x != 2 ) ==> ( x >= 1 );\nloop invariant i19: ( x != 1 ) ==> ( x != 2 ) ==> ( x == 1 ) || ( x == 2 );\nloop invariant i20: 0 <= x <= 2;\nloop invariant i21: !(x==1 && x==2);\nloop invariant i22: !(x==1 && x==2 && unknown_bool());\nloop invariant i23: !(x==1 && x==2 && unknown_bool() && unknown_bool());\nloop invariant i24: 0 <= x <= 3;\nloop invariant i25: x == 1 || x == 2;\nloop invariant i26: !(x==1 ==> x==2) || !(x==2 ==> x==1);\nloop invariant i27: x <= 8;\nloop invariant i28: 0 <= x <= 8; loop invariant x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8; loop invariant !unknown_bool() ==> x==1 || x==2;\nloop invariant i29: 0 <= x <= 8; loop invariant (unknown_bool() ==> x==1 || x==2) && (unknown_bool() ==> x==3 || x==4 || x==5 || x==6 || x==7 || x==8); loop invariant x==1 || x==2 || x==3 || x==4 || x==5 || x==6 || x==7 || x==8; loop invariant !(x==1 && x==2); loop invariant !unknown_bool() ==> x==1 || x==2; loop invariant (unknown_bool() ==> x==1 || x==2) && (unknown_bool() ==> x==3 || x==4 || x==5 || x==6 || x==7 || x==8); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7 && x==8); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7 && x==8 && x==1); loop invariant !(x==1 && x==2 && x==4 && x==5 && x==6 && x==7 && x==8 && x==3 && x==6 && x==7 && x==2 && x==3 && x==4 && x==5 && x==6 && x==7 && x==8 && x==1 && x==2);\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  /*@\nloop invariant i1: 1 <= x <= 2;\n\n\n\n\n\n\nloop invariant i8: 0 <= x <= 8;\nloop invariant i9: (x==1 || x==2);\nloop invariant i10: (x == 1 || x == 2);\n\n\n\n\nloop invariant i15: ( x == 1 ) ==> ( x <= 8 );\nloop invariant i16: ( x == 2 ) ==> ( x <= 8 );\nloop invariant i17: ( x != 1 ) ==> ( x != 2 ) ==> ( x <= 8 );\nloop invariant i18: ( x != 1 ) ==> ( x != 2 ) ==> ( x >= 1 );\nloop invariant i19: ( x != 1 ) ==> ( x != 2 ) ==> ( x == 1 ) || ( x == 2 );\nloop invariant i20: 0 <= x <= 2;\nloop invariant i21: !(x==1 && x==2);\n\n\nloop invariant i24: 0 <= x <= 3;\nloop invariant i25: x == 1 || x == 2;\nloop invariant i26: !(x==1 ==> x==2) || !(x==2 ==> x==1);\nloop invariant i27: x <= 8;\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c"
        ],
        "skipped": [],
        "total": 151,
        "success_count": 134,
        "failure_count": 17,
        "success_rate": 0.8874172185430463
    }
}