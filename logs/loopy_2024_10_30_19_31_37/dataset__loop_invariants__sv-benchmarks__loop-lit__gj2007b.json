{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    while(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m < x;\nloop invariant (x + m) <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n - 1;\nloop invariant m == 0 ==> n <= 0;\nloop invariant m == x ==> x >= n;\nloop invariant x < m ==> n > 0;\nloop invariant x > m ==> n <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m = (if x > 0 then x - 1 else 0);\nloop invariant (if x = n then m <= n else m < n);\n*/\n```",
            "```\n/*@\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant (unknown_int() ==> m == x);\nloop invariant (!unknown_int() ==> m != x);\nloop invariant (m >= 0 ==> n > 0);\nloop invariant (m < n ==> n > 0);\n*/\n```",
            "```\n/*@\nloop invariant m <= x <= n;\nloop invariant ((m >= 0 && n > 0) || (m < 0 && n <= 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant (m >= 0 ==> x >= 0);\nloop invariant (m >= 0 ==> n > 0);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> x <= n);\nloop invariant (m >= 0 ==> m >= 0);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant n <= x ==> m = n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n = 0 ==> m = 0;\nloop invariant n > 0 ==> m < x;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m == (if x > 0 then (x - 1) else 0);\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> (m <= x && m <= n);\nloop invariant m < n ==> (m < x && m <= n);\n*/\n```",
            "```\n/*@\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant m >= 0;\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m < n ==> n <= 0);\nloop invariant (m >= 0 ==> m <= n ==> m <= x);\nloop invariant (m >= 0 ==> m <= n ==> x <= n);\nloop invariant (m >= 0 ==> m <= n ==> x >= 0);\nloop invariant (m < n ==> n <= 0 ==> m <= x);\nloop invariant (m < n ==> n <= 0 ==> x <= n);\nloop invariant (m < n ==> n <= 0 ==> x >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x > m ==> unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant (x < n ==> m < n);\nloop invariant (x >= n ==> n <= 0);\nloop invariant (x >= n ==> m >= 0);\nloop invariant (x < n ==> (0 <= x ==> 0 <= m));\nloop invariant (x >= n ==> (x <= n ==> m <= n));\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant m >= 0;\nloop invariant x >= m;\nloop invariant n >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant (x < n ==> m = x);\nloop invariant (x >= n ==> m >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant m <= x - 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m == x - 1 ==> unknown_int();\nloop invariant m == x ==> unknown_int() ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant m < x;\nloop invariant (x + m) <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n - 1;\nloop invariant m == 0 ==> n <= 0;\nloop invariant m == x ==> x >= n;\nloop invariant x < m ==> n > 0;\nloop invariant x > m ==> n <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n\nloop invariant i5: x < m ==> n > 0;\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m = (if x > 0 then x - 1 else 0);\nloop invariant (if x = n then m <= n else m < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant (unknown_int() ==> m == x);\nloop invariant (!unknown_int() ==> m != x);\nloop invariant (m >= 0 ==> n > 0);\nloop invariant (m < n ==> n > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: x >= m;\n\n\n\n\nloop invariant i6: (m < n ==> n > 0);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant m <= x <= n;\nloop invariant ((m >= 0 && n > 0) || (m < 0 && n <= 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant (m >= 0 ==> x >= 0);\nloop invariant (m >= 0 ==> n > 0);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> x <= n);\nloop invariant (m >= 0 ==> m >= 0);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m >= 0 ==> m <= x);\nloop invariant (m >= 0 ==> m <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: (m >= 0 ==> x >= 0);\n\nloop invariant i5: (m >= 0 ==> m <= x);\n\nloop invariant i7: (m >= 0 ==> m >= 0);\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant n <= x ==> m = n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n = 0 ==> m = 0;\nloop invariant n > 0 ==> m < x;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\nloop invariant n > 0 ==> m < n;\nloop invariant n > 0 ==> m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: m <= x;\n\nloop invariant i6: n > 0 ==> m >= 0;\n\n\nloop invariant i9: n > 0 ==> m < n;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m == (if x > 0 then (x - 1) else 0);\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant m == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\nloop invariant x == (if m >= 0 then (m + 1) else 0);\nloop invariant (if m >= 0 then (m + 1) else 0) == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> (m <= x && m <= n);\nloop invariant m < n ==> (m < x && m <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant m <= x <= n;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant m >= 0;\nloop invariant (m >= 0 ==> m <= n);\nloop invariant (m < n ==> n <= 0);\nloop invariant (m >= 0 ==> m <= n ==> m <= x);\nloop invariant (m >= 0 ==> m <= n ==> x <= n);\nloop invariant (m >= 0 ==> m <= n ==> x >= 0);\nloop invariant (m < n ==> n <= 0 ==> m <= x);\nloop invariant (m < n ==> n <= 0 ==> x <= n);\nloop invariant (m < n ==> n <= 0 ==> x >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: m >= 0;\n\n\nloop invariant i7: (m >= 0 ==> m <= n ==> m <= x);\nloop invariant i8: (m >= 0 ==> m <= n ==> x <= n);\nloop invariant i9: (m >= 0 ==> m <= n ==> x >= 0);\nloop invariant i10: (m < n ==> n <= 0 ==> m <= x);\nloop invariant i11: (m < n ==> n <= 0 ==> x <= n);\nloop invariant i12: (m < n ==> n <= 0 ==> x >= 0);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant x > m ==> unknown_int();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant (x < n ==> m < n);\nloop invariant (x >= n ==> n <= 0);\nloop invariant (x >= n ==> m >= 0);\nloop invariant (x < n ==> (0 <= x ==> 0 <= m));\nloop invariant (x >= n ==> (x <= n ==> m <= n));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: (x < n ==> m < n);\n\nloop invariant i5: (x >= n ==> m >= 0);\nloop invariant i6: (x < n ==> (0 <= x ==> 0 <= m));\nloop invariant i7: (x >= n ==> (x <= n ==> m <= n));\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant m >= 0;\nloop invariant x >= m;\nloop invariant n >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: m >= 0;\nloop invariant i4: x >= m;\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant (x < n ==> m = x);\nloop invariant (x >= n ==> m >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant m <= x - 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m == x - 1 ==> unknown_int();\nloop invariant m == x ==> unknown_int() ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\nloop invariant m == x ==> false;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0;\n\n\nloop invariant i5: m <= x;\n\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 24: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m >= 0;\nloop invariant i3: m <= n;\nloop invariant i4: m < x;\nloop invariant i5: (x + m) <= n;\nloop invariant i6: 0 <= m <= n - 1;\nloop invariant i7: m == 0 ==> n <= 0;\nloop invariant i8: m == x ==> x >= n;\nloop invariant i9: x < m ==> n > 0;\nloop invariant i10: x > m ==> n <= 0;\nloop invariant i11: m = (if x > 0 then x - 1 else 0);\nloop invariant i12: (if x = n then m <= n else m < n);\nloop invariant i13: x >= m;\nloop invariant i14: x <= n;\nloop invariant i15: (unknown_int() ==> m == x);\nloop invariant i16: (!unknown_int() ==> m != x);\nloop invariant i17: (m >= 0 ==> n > 0);\nloop invariant i18: (m < n ==> n > 0);\nloop invariant i19: m <= x <= n;\nloop invariant i20: ((m >= 0 && n > 0) || (m < 0 && n <= 0));\nloop invariant i21: 0 <= x;\nloop invariant i22: (m >= 0 ==> x >= 0);\nloop invariant i23: (m >= 0 ==> m <= x);\nloop invariant i24: (m >= 0 ==> x <= n);\nloop invariant i25: (m >= 0 ==> m >= 0);\nloop invariant i26: (m >= 0 ==> m <= n);\nloop invariant i27: 0 <= m <= n;\nloop invariant i28: x >= 0;\nloop invariant i29: m <= x;\nloop invariant i30: n <= x ==> m = n;\nloop invariant i31: n > 0 ==> m >= 0;\nloop invariant i32: n = 0 ==> m = 0;\nloop invariant i33: n > 0 ==> m < x;\nloop invariant i34: n > 0 ==> m < n;\nloop invariant i35: m == (if x > 0 then (x - 1) else 0);\nloop invariant i36: x == (if m >= 0 then (m + 1) else 0);\nloop invariant i37: m == (if m >= 0 then (m + 1) else 0);\nloop invariant i38: (if m >= 0 then (m + 1) else 0) == x;\nloop invariant i39: m >= 0 ==> (m <= x && m <= n);\nloop invariant i40: m < n ==> (m < x && m <= n);\nloop invariant i41: n >= 0;\nloop invariant i42: (m < n ==> n <= 0);\nloop invariant i43: (m >= 0 ==> m <= n ==> m <= x);\nloop invariant i44: (m >= 0 ==> m <= n ==> x <= n);\nloop invariant i45: (m >= 0 ==> m <= n ==> x >= 0);\nloop invariant i46: (m < n ==> n <= 0 ==> m <= x);\nloop invariant i47: (m < n ==> n <= 0 ==> x <= n);\nloop invariant i48: (m < n ==> n <= 0 ==> x >= 0);\nloop invariant i49: x > m ==> unknown_int();\nloop invariant i50: 0 <= m <= x;\nloop invariant i51: (x < n ==> m < n);\nloop invariant i52: (x >= n ==> n <= 0);\nloop invariant i53: (x >= n ==> m >= 0);\nloop invariant i54: (x < n ==> (0 <= x ==> 0 <= m));\nloop invariant i55: (x >= n ==> (x <= n ==> m <= n));\nloop invariant i56: n >= x;\nloop invariant i57: m < n;\nloop invariant i58: (x < n ==> m = x);\nloop invariant i59: m <= x - 1;\nloop invariant i60: m == x - 1 ==> unknown_int();\nloop invariant i61: m == x ==> unknown_int() ==> false;\nloop invariant i62: m == x ==> false;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0;\n\n\n\n\n\n\nloop invariant i9: x < m ==> n > 0;\n\n\n\nloop invariant i13: x >= m;\n\n\n\n\nloop invariant i18: (m < n ==> n > 0);\n\n\nloop invariant i21: 0 <= x;\nloop invariant i22: (m >= 0 ==> x >= 0);\nloop invariant i23: (m >= 0 ==> m <= x);\n\nloop invariant i25: (m >= 0 ==> m >= 0);\n\n\nloop invariant i28: x >= 0;\nloop invariant i29: m <= x;\n\nloop invariant i31: n > 0 ==> m >= 0;\n\n\nloop invariant i34: n > 0 ==> m < n;\n\n\n\n\n\n\n\n\nloop invariant i43: (m >= 0 ==> m <= n ==> m <= x);\nloop invariant i44: (m >= 0 ==> m <= n ==> x <= n);\nloop invariant i45: (m >= 0 ==> m <= n ==> x >= 0);\nloop invariant i46: (m < n ==> n <= 0 ==> m <= x);\nloop invariant i47: (m < n ==> n <= 0 ==> x <= n);\nloop invariant i48: (m < n ==> n <= 0 ==> x >= 0);\n\nloop invariant i50: 0 <= m <= x;\nloop invariant i51: (x < n ==> m < n);\n\nloop invariant i53: (x >= n ==> m >= 0);\nloop invariant i54: (x < n ==> (0 <= x ==> 0 <= m));\nloop invariant i55: (x >= n ==> (x <= n ==> m <= n));\n\n\n\n\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c"
        ],
        "skipped": [],
        "total": 111,
        "success_count": 98,
        "failure_count": 13,
        "success_rate": 0.8828828828828829
    }
}