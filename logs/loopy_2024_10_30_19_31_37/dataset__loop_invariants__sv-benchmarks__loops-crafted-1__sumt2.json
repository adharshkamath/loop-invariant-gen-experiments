{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  while( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= l <= n; 0 <= i <= n; 0 <= j <= n; i + j == l; i == l - j; j == l - i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l/2;\nloop invariant 0 <= j <= l/2;\nloop invariant i + j == l;\nloop invariant i == (l/2) * ((l%2) == 0 ? 1 : 0);\nloop invariant j == (l/2) * ((l%2) == 1 ? 1 : 0);\nloop invariant 0 <= i + j <= l;\nloop invariant 0 <= i <= l;\nloop invariant 0 <= j <= l;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l < n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant l == i + j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant l == i + j;\nloop invariant i == (l / 2) + (l % 2);\nloop invariant j == (l / 2);\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i + j == l;\nloop invariant l == n ==> i + j == n;\nloop invariant l < n ==> i + j < n;\nloop invariant l == 0 ==> i + j == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= SIZE;\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l/2;\nloop invariant 0 <= j <= l - i;\nloop invariant i + j == l;\nloop invariant i == j || i == j - 1 || i == j + 1;\nloop invariant 0 <= n <= SIZE;\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l/2;\nloop invariant 0 <= j <= l - i;\nloop invariant i + j == l;\nloop invariant i == j || i == j - 1 || i == j + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= (n / 2);\nloop invariant 0 <= j <= (n / 2);\nloop invariant i + j == l;\nloop invariant i <= (n / 2);\nloop invariant j <= (n / 2);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant l <= n;\nloop invariant l >= 0;\nloop invariant i + j == l;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == l;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant l%2 ==> i >= 0;\nloop invariant l%2 ==> i <= (l / 2);\nloop invariant !l%2 ==> j >= 0;\nloop invariant !l%2 ==> j <= (l / 2);\nloop invariant (i+j) >= l;\nloop invariant (i+j) == l ==> i == (l / 2);\nloop invariant (i+j) == l ==> j == (l / 2);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= l <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant l % 2 == 0 ==> i >= 1;\nloop invariant l % 2 == 1 ==> i == 0;\nloop invariant l % 2 == 0 ==> j == 0;\nloop invariant l % 2 == 1 ==> j >= 1;\nloop invariant i + j == l;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= n / 2;\nloop invariant j <= n - i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant n <= l ==> (i + j) == l;\nloop invariant n <= l ==> l % 2 == 0 ==> i == l / 2;\nloop invariant n <= l ==> l % 2 == 1 ==> j == (l + 1) / 2;\nloop invariant n > l ==> i <= l / 2;\nloop invariant n > l ==> j <= (l + 1) / 2;\nloop invariant n > l ==> i + j < l;\nloop invariant n > l ==> i + j >= l / 2;\nloop invariant n > l ==> i <= l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j <= (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i+j >= l;\nloop invariant i >= l - j;\nloop invariant j >= l - i;\nloop invariant i <= n/2;\nloop invariant j <= n/2;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant l%2 == i%2;\nloop invariant l%2 == j%2;\nloop invariant (i+j) == l;\nloop invariant i + j == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant l = i + j;\nloop invariant l%2 == 0 ==> i = l/2;\nloop invariant l%2 == 1 ==> j = (l-1)/2;\nloop invariant l%2 == 0 ==> i >= j;\nloop invariant l%2 == 1 ==> j >= i;\nloop invariant l%2 == 0 ==> i < j;\nloop invariant l%2 == 1 ==> j < i;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n; 0 <= i <= n; 0 <= j <= n; i + j == l; i == l - j; j == l - i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= l;\nloop invariant j <= l;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: i + j == l;\nloop invariant i5: i <= l;\nloop invariant i6: j <= l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l/2;\nloop invariant 0 <= j <= l/2;\nloop invariant i + j == l;\nloop invariant i == (l/2) * ((l%2) == 0 ? 1 : 0);\nloop invariant j == (l/2) * ((l%2) == 1 ? 1 : 0);\nloop invariant 0 <= i + j <= l;\nloop invariant 0 <= i <= l;\nloop invariant 0 <= j <= l;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\nloop invariant j == l/2;\nloop invariant i + j == l;\nloop invariant i == l/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\nloop invariant i3: 0 <= j <= l/2;\nloop invariant i4: i + j == l;\n\n\nloop invariant i7: 0 <= i + j <= l;\nloop invariant i8: 0 <= i <= l;\nloop invariant i9: 0 <= j <= l;\n\nloop invariant i11: j == l/2;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= l < n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant l == i + j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\n\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: 0 <= j <= n;\nloop invariant i4: l == i + j;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant l == i + j;\nloop invariant i == (l / 2) + (l % 2);\nloop invariant j == (l / 2);\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant i + j == l;\nloop invariant l == n ==> i + j == n;\nloop invariant l < n ==> i + j < n;\nloop invariant l == 0 ==> i + j == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: l == i + j;\nloop invariant i5: i == (l / 2) + (l % 2);\nloop invariant i6: j == (l / 2);\nloop invariant i7: i <= n;\nloop invariant i8: j <= n;\nloop invariant i9: i + j == l;\nloop invariant i10: l == n ==> i + j == n;\nloop invariant i11: l < n ==> i + j < n;\nloop invariant i12: l == 0 ==> i + j == 0;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= SIZE;\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l/2;\nloop invariant 0 <= j <= l - i;\nloop invariant i + j == l;\nloop invariant i == j || i == j - 1 || i == j + 1;\nloop invariant 0 <= n <= SIZE;\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l/2;\nloop invariant 0 <= j <= l - i;\nloop invariant i + j == l;\nloop invariant i == j || i == j - 1 || i == j + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= n <= SIZE;\nloop invariant i2: 0 <= l <= n;\n\nloop invariant i4: 0 <= j <= l - i;\nloop invariant i5: i + j == l;\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= (n / 2);\nloop invariant 0 <= j <= (n / 2);\nloop invariant i + j == l;\nloop invariant i <= (n / 2);\nloop invariant j <= (n / 2);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant l <= n;\nloop invariant l >= 0;\nloop invariant i + j == l;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == l;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\nloop invariant i + j == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\n\n\nloop invariant i3: i + j == l;\n\n\nloop invariant i6: i >= 0;\nloop invariant i7: j >= 0;\nloop invariant i8: l <= n;\nloop invariant i9: l >= 0;\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant l%2 ==> i >= 0;\nloop invariant l%2 ==> i <= (l / 2);\nloop invariant !l%2 ==> j >= 0;\nloop invariant !l%2 ==> j <= (l / 2);\nloop invariant (i+j) >= l;\nloop invariant (i+j) == l ==> i == (l / 2);\nloop invariant (i+j) == l ==> j == (l / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: l%2 ==> i >= 0;\n\n\n\n\n\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= l <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant l % 2 == 0 ==> i >= 1;\nloop invariant l % 2 == 1 ==> i == 0;\nloop invariant l % 2 == 0 ==> j == 0;\nloop invariant l % 2 == 1 ==> j >= 1;\nloop invariant i + j == l;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\n\n\n\n\nloop invariant i8: i + j == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i + j == l;\nloop invariant i <= n / 2;\nloop invariant j <= n - i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: i >= 0;\nloop invariant i3: j >= 0;\nloop invariant i4: i + j == l;\n\nloop invariant i6: j <= n - i;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant n <= l ==> (i + j) == l;\nloop invariant n <= l ==> l % 2 == 0 ==> i == l / 2;\nloop invariant n <= l ==> l % 2 == 1 ==> j == (l + 1) / 2;\nloop invariant n > l ==> i <= l / 2;\nloop invariant n > l ==> j <= (l + 1) / 2;\nloop invariant n > l ==> i + j < l;\nloop invariant n > l ==> i + j >= l / 2;\nloop invariant n > l ==> i <= l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j <= (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant n > l ==> i + j < l ==> i < l / 2;\nloop invariant n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i+j >= l;\nloop invariant i >= l - j;\nloop invariant j >= l - i;\nloop invariant i <= n/2;\nloop invariant j <= n/2;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant l%2 == i%2;\nloop invariant l%2 == j%2;\nloop invariant (i+j) == l;\nloop invariant i + j == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: i+j >= l;\nloop invariant i3: i >= l - j;\nloop invariant i4: j >= l - i;\n\n\nloop invariant i7: i >= 0;\nloop invariant i8: j >= 0;\n\n\nloop invariant i11: (i+j) == l;\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant l = i + j;\nloop invariant l%2 == 0 ==> i = l/2;\nloop invariant l%2 == 1 ==> j = (l-1)/2;\nloop invariant l%2 == 0 ==> i >= j;\nloop invariant l%2 == 1 ==> j >= i;\nloop invariant l%2 == 0 ==> i < j;\nloop invariant l%2 == 1 ==> j < i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\n\n\n\n\n\n\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: unexpected token '0'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n; 0 <= i <= n; 0 <= j <= n; i + j == l; i == l - j; j == l - i;\nloop invariant i2: 0 <= l <= n;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: i + j == l;\nloop invariant i6: i <= l;\nloop invariant i7: j <= l;\nloop invariant i8: 0 <= i <= l/2;\nloop invariant i9: 0 <= j <= l/2;\nloop invariant i10: i == (l/2) * ((l%2) == 0 ? 1 : 0);\nloop invariant i11: j == (l/2) * ((l%2) == 1 ? 1 : 0);\nloop invariant i12: 0 <= i + j <= l;\nloop invariant i13: 0 <= i <= l;\nloop invariant i14: 0 <= j <= l;\nloop invariant i15: i == l/2;\nloop invariant i16: j == l/2;\nloop invariant i17: 0 <= l < n;\nloop invariant i18: 0 <= i <= n;\nloop invariant i19: 0 <= j <= n;\nloop invariant i20: l == i + j;\nloop invariant i21: i == (l / 2) + (l % 2);\nloop invariant i22: j == (l / 2);\nloop invariant i23: i <= n;\nloop invariant i24: j <= n;\nloop invariant i25: l == n ==> i + j == n;\nloop invariant i26: l < n ==> i + j < n;\nloop invariant i27: l == 0 ==> i + j == 0;\nloop invariant i28: 0 <= n <= SIZE;\nloop invariant i29: 0 <= j <= l - i;\nloop invariant i30: i == j || i == j - 1 || i == j + 1;\nloop invariant i31: 0 <= i <= (n / 2);\nloop invariant i32: 0 <= j <= (n / 2);\nloop invariant i33: i <= (n / 2);\nloop invariant i34: j <= (n / 2);\nloop invariant i35: l <= n;\nloop invariant i36: l >= 0;\nloop invariant i37: i + j == n;\nloop invariant i38: l%2 ==> i >= 0;\nloop invariant i39: l%2 ==> i <= (l / 2);\nloop invariant i40: !l%2 ==> j >= 0;\nloop invariant i41: !l%2 ==> j <= (l / 2);\nloop invariant i42: (i+j) >= l;\nloop invariant i43: (i+j) == l ==> i == (l / 2);\nloop invariant i44: (i+j) == l ==> j == (l / 2);\nloop invariant i45: 1 <= l <= n;\nloop invariant i46: l % 2 == 0 ==> i >= 1;\nloop invariant i47: l % 2 == 1 ==> i == 0;\nloop invariant i48: l % 2 == 0 ==> j == 0;\nloop invariant i49: l % 2 == 1 ==> j >= 1;\nloop invariant i50: i <= n / 2;\nloop invariant i51: j <= n - i;\nloop invariant i52: n <= l ==> (i + j) == l;\nloop invariant i53: n <= l ==> l % 2 == 0 ==> i == l / 2;\nloop invariant i54: n <= l ==> l % 2 == 1 ==> j == (l + 1) / 2;\nloop invariant i55: n > l ==> i <= l / 2;\nloop invariant i56: n > l ==> j <= (l + 1) / 2;\nloop invariant i57: n > l ==> i + j < l;\nloop invariant i58: n > l ==> i + j >= l / 2;\nloop invariant i59: n > l ==> i <= l / 2 ==> j < (l + 1) / 2;\nloop invariant i60: n > l ==> j <= (l + 1) / 2 ==> i < l / 2;\nloop invariant i61: n > l ==> i + j < l ==> i < l / 2;\nloop invariant i62: n > l ==> i + j >= l / 2 ==> j >= (l + 1) / 2;\nloop invariant i63: n > l ==> i < l / 2 ==> j < (l + 1) / 2;\nloop invariant i64: n > l ==> j < (l + 1) / 2 ==> i < l / 2;\nloop invariant i65: i+j >= l;\nloop invariant i66: i >= l - j;\nloop invariant i67: j >= l - i;\nloop invariant i68: i <= n/2;\nloop invariant i69: j <= n/2;\nloop invariant i70: l%2 == i%2;\nloop invariant i71: l%2 == j%2;\nloop invariant i72: (i+j) == l;\nloop invariant i73: l = i + j;\nloop invariant i74: l%2 == 0 ==> i = l/2;\nloop invariant i75: l%2 == 1 ==> j = (l-1)/2;\nloop invariant i76: l%2 == 0 ==> i >= j;\nloop invariant i77: l%2 == 1 ==> j >= i;\nloop invariant i78: l%2 == 0 ==> i < j;\nloop invariant i79: l%2 == 1 ==> j < i;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 28,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  /*@\n\nloop invariant i2: 0 <= l <= n;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: i + j == l;\nloop invariant i6: i <= l;\nloop invariant i7: j <= l;\n\nloop invariant i9: 0 <= j <= l/2;\n\n\nloop invariant i12: 0 <= i + j <= l;\nloop invariant i13: 0 <= i <= l;\nloop invariant i14: 0 <= j <= l;\n\nloop invariant i16: j == l/2;\n\nloop invariant i18: 0 <= i <= n;\nloop invariant i19: 0 <= j <= n;\nloop invariant i20: l == i + j;\nloop invariant i21: i == (l / 2) + (l % 2);\nloop invariant i22: j == (l / 2);\nloop invariant i23: i <= n;\nloop invariant i24: j <= n;\nloop invariant i25: l == n ==> i + j == n;\nloop invariant i26: l < n ==> i + j < n;\nloop invariant i27: l == 0 ==> i + j == 0;\nloop invariant i28: 0 <= n <= SIZE;\nloop invariant i29: 0 <= j <= l - i;\nloop invariant i30: i == j || i == j - 1 || i == j + 1;\n\nloop invariant i32: 0 <= j <= (n / 2);\n\nloop invariant i34: j <= (n / 2);\nloop invariant i35: l <= n;\nloop invariant i36: l >= 0;\n\nloop invariant i38: l%2 ==> i >= 0;\n\n\n\nloop invariant i42: (i+j) >= l;\n\nloop invariant i44: (i+j) == l ==> j == (l / 2);\n\n\n\n\n\n\nloop invariant i51: j <= n - i;\nloop invariant i52: n <= l ==> (i + j) == l;\nloop invariant i53: n <= l ==> l % 2 == 0 ==> i == l / 2;\n\n\nloop invariant i56: n > l ==> j <= (l + 1) / 2;\n\nloop invariant i58: n > l ==> i + j >= l / 2;\n\n\nloop invariant i61: n > l ==> i + j < l ==> i < l / 2;\n\nloop invariant i63: n > l ==> i < l / 2 ==> j < (l + 1) / 2;\n\nloop invariant i65: i+j >= l;\nloop invariant i66: i >= l - j;\nloop invariant i67: j >= l - i;\n\nloop invariant i69: j <= n/2;\n\n\nloop invariant i72: (i+j) == l;\n\n\n\nloop invariant i76: l%2 == 0 ==> i >= j;\n\n\nloop invariant i79: l%2 == 1 ==> j < i;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv3.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sum_natnum.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_9.c"
        ],
        "skipped": [],
        "total": 182,
        "success_count": 162,
        "failure_count": 20,
        "success_rate": 0.8901098901098901
    }
}