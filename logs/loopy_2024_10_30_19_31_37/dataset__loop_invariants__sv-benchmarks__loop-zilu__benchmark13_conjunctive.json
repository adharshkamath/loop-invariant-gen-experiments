{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  while (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i && i <= k;\nloop invariant j = i + 1;\nloop invariant k >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k; loop invariant j == i; loop invariant i<=k ==> i>=j; loop invariant k==0 ==> i==j; loop invariant k==0 ==> j==k; loop invariant i>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant i <= j <= i + k;\nloop invariant i <= k;\nloop invariant k >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= i + k;\nloop invariant j <= i + k;\nloop invariant i+1 <= k ==> j+1 == i + k;\nloop invariant i+1 > k ==> j+1 == i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i;\nloop invariant i <= k ==> j == i;\nloop invariant i <= k ==> j == i ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\n*/\n```",
            "```\n/*@\nloop invariant i <= k;\nloop invariant j == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= k ==> j == i;\nloop invariant i > k ==> j == k+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant j <= i;\nloop invariant j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= k;\nloop invariant 0 <= j <= i;\nloop invariant i <= k ==> j==i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k; loop invariant i == j; loop invariant i <= k ==> j == (i + 1); loop invariant j <= (k + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i;\nloop invariant k <= i ==> j==i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant i <= k ==> j == i;\nloop invariant i <= k ==> k == i;\nloop invariant i <= k ==> k == i;\nloop invariant i <= k ==> j == i;\nloop invariant i <= k ==> k == i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k;\nloop invariant i == (k + 1);\nloop invariant 0 <= j <= i;\nloop invariant 0 <= i <= k;\nloop invariant i == (k + 1);\nloop invariant 0 <= j <= i;\nloop invariant i == (k + 1);\nloop invariant j == i;\nloop invariant i == (k + 1);\nloop invariant j == i;\nloop invariant i == (k + 1);\nloop invariant j == i;\n*/\n```",
            "```\n/*@\nloop invariant j < i;\nloop invariant k >= i;\n*/\n```",
            "```\n/*@\nloop invariant i == j - 1;\nloop invariant i <= k;\nloop invariant j <= k + 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= k;\nloop invariant i <= k;\nloop invariant i == j - 1 ==> i <= k ==> j <= k + 1;\nloop invariant j == k ==> i == j - 1;\nloop invariant i == 0 ==> j == 1;\nloop invariant j == i ==> k == j - 1;\nloop invariant i == k ==> j == k + 1;\nloop invariant i == k ==> k == j - 1 ==> k == k;\nloop invariant i == k ==> k == i;\nloop invariant i == k ==> j == i ==> k == i;\nloop invariant i == k ==> j == k ==> i == k;\nloop invariant i == k ==> j == i ==> k == j;\nloop invariant i == k ==> j == k ==> k == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i == k ==> j == k ==> i == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == i;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant i <= j;\nloop invariant i <= k ==> j == i;\n*/\n```",
            "```\n/*@\nloop invariant i <= k;\nloop invariant i <= j;\nloop invariant k >= j;\nloop invariant k >= i;\nloop invariant j <= k;\nloop invariant j >= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i && i <= k;\nloop invariant j = i + 1;\nloop invariant k >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k; loop invariant j == i; loop invariant i<=k ==> i>=j; loop invariant k==0 ==> i==j; loop invariant k==0 ==> j==k; loop invariant i>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant i <= j <= i + k;\nloop invariant i <= k;\nloop invariant k >= 0;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= i + k;\nloop invariant j <= i + k;\nloop invariant i+1 <= k ==> j+1 == i + k;\nloop invariant i+1 > k ==> j+1 == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: i >= 0;\nloop invariant i6: j >= 0;\n\n\n\n\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i;\nloop invariant i <= k ==> j == i;\nloop invariant i <= k ==> j == i ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: i <= k ==> j == i;\nloop invariant i4: i <= k ==> j == i ==> i <= k;\nloop invariant i5: i <= k ==> j == i ==> j <= k;\nloop invariant i6: i <= k ==> j == i ==> j <= k ==> i <= k;\nloop invariant i7: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k;\nloop invariant i8: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i9: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i10: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i11: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i12: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i13: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i14: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i15: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i16: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i17: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i18: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i19: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i20: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i21: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i22: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i23: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i <= k;\nloop invariant j == i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= k ==> j == i;\nloop invariant i > k ==> j == k+1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\nloop invariant i2: j == i;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\n\nloop invariant i6: i <= k ==> j == i;\n\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant j <= i;\nloop invariant j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\nloop invariant i2: j <= i;\nloop invariant i3: j >= 0;\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= k;\nloop invariant 0 <= j <= i;\nloop invariant i <= k ==> j==i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\nloop invariant i2: 0 <= j <= i;\nloop invariant i3: i <= k ==> j==i;\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k; loop invariant i == j; loop invariant i <= k ==> j == (i + 1); loop invariant j <= (k + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant 0 <= j <= i;\nloop invariant k <= i ==> j==i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\nloop invariant i2: 0 <= j <= i;\n\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant i <= k ==> j == i;\nloop invariant i <= k ==> k == i;\nloop invariant i <= k ==> k == i;\nloop invariant i <= k ==> j == i;\nloop invariant i <= k ==> k == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\nloop invariant i2: i <= k ==> j == i;\n\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= k;\nloop invariant i == (k + 1);\nloop invariant 0 <= j <= i;\nloop invariant 0 <= i <= k;\nloop invariant i == (k + 1);\nloop invariant 0 <= j <= i;\nloop invariant i == (k + 1);\nloop invariant j == i;\nloop invariant i == (k + 1);\nloop invariant j == i;\nloop invariant i == (k + 1);\nloop invariant j == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\nloop invariant i3: 0 <= j <= i;\n\nloop invariant i5: j == i;\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant j < i;\nloop invariant k >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i == j - 1;\nloop invariant i <= k;\nloop invariant j <= k + 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i <= j;\nloop invariant j <= k;\nloop invariant i <= k;\nloop invariant i == j - 1 ==> i <= k ==> j <= k + 1;\nloop invariant j == k ==> i == j - 1;\nloop invariant i == 0 ==> j == 1;\nloop invariant j == i ==> k == j - 1;\nloop invariant i == k ==> j == k + 1;\nloop invariant i == k ==> k == j - 1 ==> k == k;\nloop invariant i == k ==> k == i;\nloop invariant i == k ==> j == i ==> k == i;\nloop invariant i == k ==> j == k ==> i == k;\nloop invariant i == k ==> j == i ==> k == j;\nloop invariant i == k ==> j == k ==> k == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i == k ==> j == k ==> i == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == i;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n\nloop invariant i4: i >= 0;\nloop invariant i5: j >= 0;\n\nloop invariant i7: i <= j;\n\nloop invariant i9: i == j - 1 ==> i <= k ==> j <= k + 1;\n\n\n\n\nloop invariant i14: i == k ==> k == j - 1 ==> k == k;\nloop invariant i15: i == k ==> k == i;\nloop invariant i16: i == k ==> j == i ==> k == i;\nloop invariant i17: i == k ==> j == k ==> i == k;\nloop invariant i18: i == k ==> j == i ==> k == j;\nloop invariant i19: i == k ==> j == k ==> k == j;\nloop invariant i20: i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i21: i == k ==> j == k ==> i == j;\nloop invariant i22: i == k ==> j == i ==> k == j ==> i == j;\nloop invariant i23: i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i24: i == k ==> j == i ==> k == j ==> i == k ==> j == k;\nloop invariant i25: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j;\nloop invariant i26: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == i;\nloop invariant i27: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j;\nloop invariant i28: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k;\nloop invariant i29: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i;\nloop invariant i30: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i31: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i32: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i33: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i34: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i35: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i36: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i37: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= k;\nloop invariant i <= j;\nloop invariant i <= k ==> j == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\nloop invariant i2: i <= j;\nloop invariant i3: i <= k ==> j == i;\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i <= k;\nloop invariant i <= j;\nloop invariant k >= j;\nloop invariant k >= i;\nloop invariant j <= k;\nloop invariant j >= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\nloop invariant i2: i <= j;\n\n\n\nloop invariant i6: j >= i;\nloop invariant i7: i >= 0;\nloop invariant i8: j >= 0;\n\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i && i <= k;\nloop invariant i2: j = i + 1;\nloop invariant i3: k >= i;\nloop invariant i4: 0 <= i <= k; loop invariant j == i; loop invariant i<=k ==> i>=j; loop invariant k==0 ==> i==j; loop invariant k==0 ==> j==k; loop invariant i>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j; loop invariant k>=1 ==> j==i; loop invariant k>=1 ==> k==i; loop invariant k>=1 ==> i==k; loop invariant i>=1 ==> i==j;\nloop invariant i5: 0 <= i <= k;\nloop invariant i6: i <= j <= i + k;\nloop invariant i7: i <= k;\nloop invariant i8: k >= 0;\nloop invariant i9: i >= 0;\nloop invariant i10: j >= 0;\nloop invariant i11: i <= i + k;\nloop invariant i12: j <= i + k;\nloop invariant i13: i+1 <= k ==> j+1 == i + k;\nloop invariant i14: i+1 > k ==> j+1 == i;\nloop invariant i15: 0 <= j <= i;\nloop invariant i16: i <= k ==> j == i;\nloop invariant i17: i <= k ==> j == i ==> i <= k;\nloop invariant i18: i <= k ==> j == i ==> j <= k;\nloop invariant i19: i <= k ==> j == i ==> j <= k ==> i <= k;\nloop invariant i20: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k;\nloop invariant i21: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i22: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i23: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i24: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i25: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i26: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i27: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i28: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i29: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i30: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i31: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i32: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i33: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i34: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i35: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i36: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i37: j == i;\nloop invariant i38: i > k ==> j == k+1;\nloop invariant i39: j <= i;\nloop invariant i40: 1 <= i <= k;\nloop invariant i41: i <= k ==> j==i;\nloop invariant i42: 0 <= i <= k; loop invariant i == j; loop invariant i <= k ==> j == (i + 1); loop invariant j <= (k + 1);\nloop invariant i43: k <= i ==> j==i;\nloop invariant i44: i <= k ==> k == i;\nloop invariant i45: 0 <= k;\nloop invariant i46: i == (k + 1);\nloop invariant i47: j < i;\nloop invariant i48: i == j - 1;\nloop invariant i49: j <= k + 1;\nloop invariant i50: i <= j;\nloop invariant i51: j <= k;\nloop invariant i52: i == j - 1 ==> i <= k ==> j <= k + 1;\nloop invariant i53: j == k ==> i == j - 1;\nloop invariant i54: i == 0 ==> j == 1;\nloop invariant i55: j == i ==> k == j - 1;\nloop invariant i56: i == k ==> j == k + 1;\nloop invariant i57: i == k ==> k == j - 1 ==> k == k;\nloop invariant i58: i == k ==> k == i;\nloop invariant i59: i == k ==> j == i ==> k == i;\nloop invariant i60: i == k ==> j == k ==> i == k;\nloop invariant i61: i == k ==> j == i ==> k == j;\nloop invariant i62: i == k ==> j == k ==> k == j;\nloop invariant i63: i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i64: i == k ==> j == k ==> i == j;\nloop invariant i65: i == k ==> j == i ==> k == j ==> i == j;\nloop invariant i66: i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i67: i == k ==> j == i ==> k == j ==> i == k ==> j == k;\nloop invariant i68: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j;\nloop invariant i69: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == i;\nloop invariant i70: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j;\nloop invariant i71: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k;\nloop invariant i72: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i;\nloop invariant i73: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i74: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i75: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i76: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i77: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i78: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i79: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i80: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i81: k >= j;\nloop invariant i82: j >= i;\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 18,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: i >= 0;\nloop invariant i10: j >= 0;\n\n\n\n\nloop invariant i15: 0 <= j <= i;\nloop invariant i16: i <= k ==> j == i;\nloop invariant i17: i <= k ==> j == i ==> i <= k;\nloop invariant i18: i <= k ==> j == i ==> j <= k;\nloop invariant i19: i <= k ==> j == i ==> j <= k ==> i <= k;\nloop invariant i20: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k;\nloop invariant i21: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i22: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i23: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i24: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i25: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i26: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i27: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i28: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i29: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i30: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i31: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i32: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i33: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i34: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i35: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i36: i <= k ==> j == i ==> j <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k ==> i <= k;\nloop invariant i37: j == i;\n\nloop invariant i39: j <= i;\n\nloop invariant i41: i <= k ==> j==i;\n\nloop invariant i43: k <= i ==> j==i;\n\n\n\n\n\n\nloop invariant i50: i <= j;\n\nloop invariant i52: i == j - 1 ==> i <= k ==> j <= k + 1;\n\n\n\n\nloop invariant i57: i == k ==> k == j - 1 ==> k == k;\nloop invariant i58: i == k ==> k == i;\nloop invariant i59: i == k ==> j == i ==> k == i;\nloop invariant i60: i == k ==> j == k ==> i == k;\nloop invariant i61: i == k ==> j == i ==> k == j;\nloop invariant i62: i == k ==> j == k ==> k == j;\nloop invariant i63: i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i64: i == k ==> j == k ==> i == j;\nloop invariant i65: i == k ==> j == i ==> k == j ==> i == j;\nloop invariant i66: i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i67: i == k ==> j == i ==> k == j ==> i == k ==> j == k;\nloop invariant i68: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j;\nloop invariant i69: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == i;\nloop invariant i70: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j;\nloop invariant i71: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k;\nloop invariant i72: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i;\nloop invariant i73: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i74: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i75: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i76: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i77: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\nloop invariant i78: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i;\nloop invariant i79: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j;\nloop invariant i80: i == k ==> j == i ==> k == j ==> i == k ==> j == k ==> i == j ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k ==> j == i ==> k == j ==> i == k;\n\nloop invariant i82: j >= i;\n*/\nwhile (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c"
        ],
        "skipped": [],
        "total": 134,
        "success_count": 118,
        "failure_count": 16,
        "success_rate": 0.8805970149253731
    }
}