{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/43.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c > n) ==> (c > n);\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> unknown() == 0;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 0 <= n;\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant n > 0;\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant (c == n) ==> (n > -1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 0 <= n <= 100000;\nloop invariant c >= (1 + (n - 1) * n / 2);\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (c == n) ==> (unknown() && unknown());\nloop invariant (c > n) ==> !unknown() || !unknown();\nloop invariant (c < n) ==> unknown() || unknown();\nloop invariant (c == 1) ==> !unknown() && !unknown();\nloop invariant (c > 1) ==> unknown() && unknown();\nloop invariant (c == 0) ==> !unknown() && !unknown();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c = (c + 1) ==> unknown();\nloop invariant c = 1 ==> (c == n) ==> unknown();\nloop invariant c > n ==> (c = c + 1) ==> unknown();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n + 1;\nloop invariant if (unknown()) then (c > n) else (c <= n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n + 1);\nloop invariant if (unknown()) then (c > n) else (c == 1);\nloop invariant if (unknown()) then (c > n) else (c == 0);\nloop invariant if (unknown()) then (c > n) else (c == 2);\nloop invariant if (unknown()) then (c > n) else (c == 3);\nloop invariant if (unknown()) then (c > n) else (c == 4);\nloop invariant if (unknown()) then (c > n) else (c == 5);\nloop invariant if (unknown()) then (c > n) else (c == 6);\nloop invariant if (unknown()) then (c > n) else (c == 7);\nloop invariant if (unknown()) then (c > n) else (c == 8);\nloop invariant if (unknown()) then (c > n) else (c == 9);\nloop invariant if (unknown()) then (c > n) else (c == 10);\nloop invariant if (unknown()) then (c > n) else (c == 11);\nloop invariant if (unknown()) then (c > n) else (c == 12);\nloop invariant if (unknown()) then (c > n) else (c == 13);\nloop invariant if (unknown()) then (c > n) else (c == 14);\nloop invariant if (unknown()) then (c > n) else (c == 15);\nloop invariant if (unknown()) then (c > n) else (c == 16);\nloop invariant if (unknown()) then (c > n) else (c == 17);\nloop invariant if (unknown()) then (c > n) else (c == 18);\nloop invariant if (unknown()) then (c > n) else (c == 19);\nloop invariant if (unknown()) then (c > n) else (c == 20);\nloop invariant if (unknown()) then (c > n) else (c == 21);\nloop invariant if (unknown()) then (c > n) else (c == 22);\nloop invariant if (unknown()) then (c > n) else (c == 23);\nloop invariant if (unknown()) then (c > n) else (c == 24);\nloop invariant if (unknown()) then (c > n) else (c == 25);\nloop invariant if (unknown()) then (c > n) else (c == 26);\nloop invariant if (unknown()) then (c > n) else (c == 27);\nloop invariant if (unknown()) then (c > n) else (c == 28);\nloop invariant if (unknown()) then (c > n) else (c == 29);\nloop invariant if (unknown()) then (c > n) else (c == 30);\nloop invariant if (unknown()) then (c > n) else (c == 31);\nloop invariant if (unknown()) then (c > n) else (c == 32);\nloop invariant if (unknown()) then (c > n) else (c == 33);\nloop invariant if (unknown()) then (c > n) else (c == 34);\nloop invariant if (unknown()) then (c > n) else (c == 35);\nloop invariant if (unknown()) then (c > n) else (c == 36);\nloop invariant if (unknown()) then (c > n) else (c == 37);\nloop invariant if (unknown()) then (c > n) else (c == 38);\nloop invariant if (unknown()) then (c > n) else (c == 39);\nloop invariant if (unknown()) then (c > n) else (c == 40);\nloop invariant if (unknown()) then (c > n) else (c == 41);\nloop invariant if (unknown()) then (c > n) else (c == 42);\nloop invariant if (unknown()) then (c > n) else (c == 43);\nloop invariant if (unknown()) then (c > n) else (c == 44);\nloop invariant if (unknown()) then (c > n) else (c == 45);\nloop invariant if (unknown()) then (c > n) else (c == 46);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant c <= n;\nloop invariant n >= 0;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n ==> n > -1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 1 ==> n == 0;\nloop invariant c == 1 ==> n == 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n ==> n > -1);\nloop invariant (c > n ==> (c >= 1 && c <= n));\nloop invariant (c == n ==> c > n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == 0 || c == n;\nloop invariant c == 1 || c == n;\nloop invariant c == 0 || c == 1;\nloop invariant c == 0 || c == n || c == 1;\nloop invariant c == 0 || c == 1 || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1;\nloop invariant c == 0 || c == n || c == 1 || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == 1;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == 1;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1 || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == n || c == 1;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> n > -1;\nloop invariant c > n ==> c > n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c > n) ==> (c > n);\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: (c > n) ==> (c >= n);\nloop invariant i3: (c == n) ==> (c == n);\nloop invariant i4: (c > n) ==> (c > n);\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> unknown() == 0;\nloop invariant c == n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 0;\nloop invariant c > n ==> unknown() == 0;\nloop invariant c < n ==> unknown() == 1;\nloop invariant c > n ==> unknown() == 1;\nloop invariant c < n ==> unknown() == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 0 <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 0 <= n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant n > 0;\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant (c == n) ==> (n > -1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: n > 0;\nloop invariant i3: 0 <= c <= n;\nloop invariant i4: c <= n;\nloop invariant i5: (c == n) ==> (n > -1);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 0 <= n <= 100000;\nloop invariant c >= (1 + (n - 1) * n / 2);\nloop invariant n >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\nloop invariant i4: n >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant (c == n) ==> (unknown() && unknown());\nloop invariant (c > n) ==> !unknown() || !unknown();\nloop invariant (c < n) ==> unknown() || unknown();\nloop invariant (c == 1) ==> !unknown() && !unknown();\nloop invariant (c > 1) ==> unknown() && unknown();\nloop invariant (c == 0) ==> !unknown() && !unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c = (c + 1) ==> unknown();\nloop invariant c = 1 ==> (c == n) ==> unknown();\nloop invariant c > n ==> (c = c + 1) ==> unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 51,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n + 1;\nloop invariant if (unknown()) then (c > n) else (c <= n);\nloop invariant if (unknown()) then (c > n) else (c == n);\nloop invariant if (unknown()) then (c > n) else (c == n + 1);\nloop invariant if (unknown()) then (c > n) else (c == 1);\nloop invariant if (unknown()) then (c > n) else (c == 0);\nloop invariant if (unknown()) then (c > n) else (c == 2);\nloop invariant if (unknown()) then (c > n) else (c == 3);\nloop invariant if (unknown()) then (c > n) else (c == 4);\nloop invariant if (unknown()) then (c > n) else (c == 5);\nloop invariant if (unknown()) then (c > n) else (c == 6);\nloop invariant if (unknown()) then (c > n) else (c == 7);\nloop invariant if (unknown()) then (c > n) else (c == 8);\nloop invariant if (unknown()) then (c > n) else (c == 9);\nloop invariant if (unknown()) then (c > n) else (c == 10);\nloop invariant if (unknown()) then (c > n) else (c == 11);\nloop invariant if (unknown()) then (c > n) else (c == 12);\nloop invariant if (unknown()) then (c > n) else (c == 13);\nloop invariant if (unknown()) then (c > n) else (c == 14);\nloop invariant if (unknown()) then (c > n) else (c == 15);\nloop invariant if (unknown()) then (c > n) else (c == 16);\nloop invariant if (unknown()) then (c > n) else (c == 17);\nloop invariant if (unknown()) then (c > n) else (c == 18);\nloop invariant if (unknown()) then (c > n) else (c == 19);\nloop invariant if (unknown()) then (c > n) else (c == 20);\nloop invariant if (unknown()) then (c > n) else (c == 21);\nloop invariant if (unknown()) then (c > n) else (c == 22);\nloop invariant if (unknown()) then (c > n) else (c == 23);\nloop invariant if (unknown()) then (c > n) else (c == 24);\nloop invariant if (unknown()) then (c > n) else (c == 25);\nloop invariant if (unknown()) then (c > n) else (c == 26);\nloop invariant if (unknown()) then (c > n) else (c == 27);\nloop invariant if (unknown()) then (c > n) else (c == 28);\nloop invariant if (unknown()) then (c > n) else (c == 29);\nloop invariant if (unknown()) then (c > n) else (c == 30);\nloop invariant if (unknown()) then (c > n) else (c == 31);\nloop invariant if (unknown()) then (c > n) else (c == 32);\nloop invariant if (unknown()) then (c > n) else (c == 33);\nloop invariant if (unknown()) then (c > n) else (c == 34);\nloop invariant if (unknown()) then (c > n) else (c == 35);\nloop invariant if (unknown()) then (c > n) else (c == 36);\nloop invariant if (unknown()) then (c > n) else (c == 37);\nloop invariant if (unknown()) then (c > n) else (c == 38);\nloop invariant if (unknown()) then (c > n) else (c == 39);\nloop invariant if (unknown()) then (c > n) else (c == 40);\nloop invariant if (unknown()) then (c > n) else (c == 41);\nloop invariant if (unknown()) then (c > n) else (c == 42);\nloop invariant if (unknown()) then (c > n) else (c == 43);\nloop invariant if (unknown()) then (c > n) else (c == 44);\nloop invariant if (unknown()) then (c > n) else (c == 45);\nloop invariant if (unknown()) then (c > n) else (c == 46);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant c <= n;\nloop invariant n >= 0;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n ==> n > -1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 0 <= n;\n\nloop invariant i4: n >= 0;\nloop invariant i5: c >= 0;\nloop invariant i6: c == n ==> n > -1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 1 ==> n == 0;\nloop invariant c == 1 ==> n == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 0 <= n;\nloop invariant i3: c >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n ==> n > -1);\nloop invariant (c > n ==> (c >= 1 && c <= n));\nloop invariant (c == n ==> c > n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c == n ==> n > -1);\nloop invariant i3: (c > n ==> (c >= 1 && c <= n));\nloop invariant i4: (c == n ==> c > n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 33,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == 0 || c == n;\nloop invariant c == 1 || c == n;\nloop invariant c == 0 || c == 1;\nloop invariant c == 0 || c == n || c == 1;\nloop invariant c == 0 || c == 1 || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1;\nloop invariant c == 0 || c == n || c == 1 || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == 1;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == 1;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1 || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == n || c == 1;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n || c == n || c == n;\nloop invariant c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant (c == n) ==> (unknown() ==> c == 1);\nloop invariant (c == n) ==> (!unknown() ==> c == n);\nloop invariant (c <= n) ==> (unknown() ==> c <= n);\nloop invariant (c <= n) ==> (!unknown() ==> c <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> n > -1;\nloop invariant c > n ==> c > n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c == n ==> n > -1;\nloop invariant i3: c > n ==> c > n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c > n) ==> (c >= n);\nloop invariant i3: (c == n) ==> (c == n);\nloop invariant i4: (c > n) ==> (c > n);\nloop invariant i5: c <= n;\nloop invariant i6: c == n ==> unknown() == 0;\nloop invariant i7: c == n ==> unknown() == 1;\nloop invariant i8: c > n ==> unknown() == 0;\nloop invariant i9: c < n ==> unknown() == 1;\nloop invariant i10: c < n ==> unknown() == 0;\nloop invariant i11: c > n ==> unknown() == 1;\nloop invariant i12: 1 <= c <= n;\nloop invariant i13: 0 <= n;\nloop invariant i14: c >= 0;\nloop invariant i15: n > 0;\nloop invariant i16: (c == n) ==> (n > -1);\nloop invariant i17: 0 <= n <= 100000;\nloop invariant i18: c >= (1 + (n - 1) * n / 2);\nloop invariant i19: n >= 0;\nloop invariant i20: (c == n) ==> (unknown() && unknown());\nloop invariant i21: (c > n) ==> !unknown() || !unknown();\nloop invariant i22: (c < n) ==> unknown() || unknown();\nloop invariant i23: (c == 1) ==> !unknown() && !unknown();\nloop invariant i24: (c > 1) ==> unknown() && unknown();\nloop invariant i25: (c == 0) ==> !unknown() && !unknown();\nloop invariant i26: c = (c + 1) ==> unknown();\nloop invariant i27: c = 1 ==> (c == n) ==> unknown();\nloop invariant i28: c > n ==> (c = c + 1) ==> unknown();\nloop invariant i29: 1 <= c <= n + 1;\nloop invariant i30: if (unknown()) then (c > n) else (c <= n);\nloop invariant i31: if (unknown()) then (c > n) else (c == n);\nloop invariant i32: if (unknown()) then (c > n) else (c == n + 1);\nloop invariant i33: if (unknown()) then (c > n) else (c == 1);\nloop invariant i34: if (unknown()) then (c > n) else (c == 0);\nloop invariant i35: if (unknown()) then (c > n) else (c == 2);\nloop invariant i36: if (unknown()) then (c > n) else (c == 3);\nloop invariant i37: if (unknown()) then (c > n) else (c == 4);\nloop invariant i38: if (unknown()) then (c > n) else (c == 5);\nloop invariant i39: if (unknown()) then (c > n) else (c == 6);\nloop invariant i40: if (unknown()) then (c > n) else (c == 7);\nloop invariant i41: if (unknown()) then (c > n) else (c == 8);\nloop invariant i42: if (unknown()) then (c > n) else (c == 9);\nloop invariant i43: if (unknown()) then (c > n) else (c == 10);\nloop invariant i44: if (unknown()) then (c > n) else (c == 11);\nloop invariant i45: if (unknown()) then (c > n) else (c == 12);\nloop invariant i46: if (unknown()) then (c > n) else (c == 13);\nloop invariant i47: if (unknown()) then (c > n) else (c == 14);\nloop invariant i48: if (unknown()) then (c > n) else (c == 15);\nloop invariant i49: if (unknown()) then (c > n) else (c == 16);\nloop invariant i50: if (unknown()) then (c > n) else (c == 17);\nloop invariant i51: if (unknown()) then (c > n) else (c == 18);\nloop invariant i52: if (unknown()) then (c > n) else (c == 19);\nloop invariant i53: if (unknown()) then (c > n) else (c == 20);\nloop invariant i54: if (unknown()) then (c > n) else (c == 21);\nloop invariant i55: if (unknown()) then (c > n) else (c == 22);\nloop invariant i56: if (unknown()) then (c > n) else (c == 23);\nloop invariant i57: if (unknown()) then (c > n) else (c == 24);\nloop invariant i58: if (unknown()) then (c > n) else (c == 25);\nloop invariant i59: if (unknown()) then (c > n) else (c == 26);\nloop invariant i60: if (unknown()) then (c > n) else (c == 27);\nloop invariant i61: if (unknown()) then (c > n) else (c == 28);\nloop invariant i62: if (unknown()) then (c > n) else (c == 29);\nloop invariant i63: if (unknown()) then (c > n) else (c == 30);\nloop invariant i64: if (unknown()) then (c > n) else (c == 31);\nloop invariant i65: if (unknown()) then (c > n) else (c == 32);\nloop invariant i66: if (unknown()) then (c > n) else (c == 33);\nloop invariant i67: if (unknown()) then (c > n) else (c == 34);\nloop invariant i68: if (unknown()) then (c > n) else (c == 35);\nloop invariant i69: if (unknown()) then (c > n) else (c == 36);\nloop invariant i70: if (unknown()) then (c > n) else (c == 37);\nloop invariant i71: if (unknown()) then (c > n) else (c == 38);\nloop invariant i72: if (unknown()) then (c > n) else (c == 39);\nloop invariant i73: if (unknown()) then (c > n) else (c == 40);\nloop invariant i74: if (unknown()) then (c > n) else (c == 41);\nloop invariant i75: if (unknown()) then (c > n) else (c == 42);\nloop invariant i76: if (unknown()) then (c > n) else (c == 43);\nloop invariant i77: if (unknown()) then (c > n) else (c == 44);\nloop invariant i78: if (unknown()) then (c > n) else (c == 45);\nloop invariant i79: if (unknown()) then (c > n) else (c == 46);\nloop invariant i80: c == n ==> n > -1;\nloop invariant i81: c == 1 ==> n == 0;\nloop invariant i82: c == 1 ==> n == 1;\nloop invariant i83: c >= 1;\nloop invariant i84: (c == n ==> n > -1);\nloop invariant i85: (c > n ==> (c >= 1 && c <= n));\nloop invariant i86: (c == n ==> c > n);\nloop invariant i87: c == 0 || c == n;\nloop invariant i88: c == 1 || c == n;\nloop invariant i89: c == 0 || c == 1;\nloop invariant i90: c == 0 || c == n || c == 1;\nloop invariant i91: c == 0 || c == 1 || c == n;\nloop invariant i92: c == 0 || c == n || c == 1 || c == 1;\nloop invariant i93: c == 0 || c == n || c == 1 || c == n;\nloop invariant i94: c == 0 || c == 1 || c == n || c == 1;\nloop invariant i95: c == 0 || c == n || c == 1 || c == n || c == 1;\nloop invariant i96: c == 0 || c == 1 || c == n || c == 1 || c == n;\nloop invariant i97: c == 0 || c == n || c == 1 || c == 1 || c == n;\nloop invariant i98: c == 0 || c == 1 || c == n || c == n || c == 1;\nloop invariant i99: c == 0 || c == n || c == 1 || c == n || c == n;\nloop invariant i100: c == 0 || c == 1 || c == n || c == 1 || c == n || c == n;\nloop invariant i101: c == 0 || c == n || c == 1 || c == 1 || c == n || c == n;\nloop invariant i102: c == 0 || c == 1 || c == n || c == n || c == 1 || c == n;\nloop invariant i103: c == 0 || c == n || c == 1 || c == n || c == n || c == 1;\nloop invariant i104: c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant i105: c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n;\nloop invariant i106: c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n;\nloop invariant i107: c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n;\nloop invariant i108: c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant i109: c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant i110: c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant i111: c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n || c == n;\nloop invariant i112: c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n;\nloop invariant i113: c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n || c == n;\nloop invariant i114: c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant i115: c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant i116: c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n || c == n;\nloop invariant i117: c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n || c == n || c == n;\nloop invariant i118: c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n;\nloop invariant i119: (c == n) ==> (unknown() ==> c == 1);\nloop invariant i120: (c == n) ==> (!unknown() ==> c == n);\nloop invariant i121: (c <= n) ==> (unknown() ==> c <= n);\nloop invariant i122: (c <= n) ==> (!unknown() ==> c <= n);\nloop invariant i123: c > n ==> c > n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 75,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c > n) ==> (c >= n);\nloop invariant i3: (c == n) ==> (c == n);\nloop invariant i4: (c > n) ==> (c > n);\nloop invariant i5: c <= n;\n\n\n\n\n\n\n\nloop invariant i13: 0 <= n;\nloop invariant i14: c >= 0;\nloop invariant i15: n > 0;\nloop invariant i16: (c == n) ==> (n > -1);\n\n\nloop invariant i19: n >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i80: c == n ==> n > -1;\nloop invariant i81: c == 1 ==> n == 0;\nloop invariant i82: c == 1 ==> n == 1;\n\nloop invariant i84: (c == n ==> n > -1);\nloop invariant i85: (c > n ==> (c >= 1 && c <= n));\nloop invariant i86: (c == n ==> c > n);\nloop invariant i87: c == 0 || c == n;\n\nloop invariant i89: c == 0 || c == 1;\nloop invariant i90: c == 0 || c == n || c == 1;\nloop invariant i91: c == 0 || c == 1 || c == n;\nloop invariant i92: c == 0 || c == n || c == 1 || c == 1;\nloop invariant i93: c == 0 || c == n || c == 1 || c == n;\nloop invariant i94: c == 0 || c == 1 || c == n || c == 1;\nloop invariant i95: c == 0 || c == n || c == 1 || c == n || c == 1;\nloop invariant i96: c == 0 || c == 1 || c == n || c == 1 || c == n;\nloop invariant i97: c == 0 || c == n || c == 1 || c == 1 || c == n;\nloop invariant i98: c == 0 || c == 1 || c == n || c == n || c == 1;\nloop invariant i99: c == 0 || c == n || c == 1 || c == n || c == n;\nloop invariant i100: c == 0 || c == 1 || c == n || c == 1 || c == n || c == n;\nloop invariant i101: c == 0 || c == n || c == 1 || c == 1 || c == n || c == n;\nloop invariant i102: c == 0 || c == 1 || c == n || c == n || c == 1 || c == n;\nloop invariant i103: c == 0 || c == n || c == 1 || c == n || c == n || c == 1;\nloop invariant i104: c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant i105: c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n;\nloop invariant i106: c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n;\nloop invariant i107: c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n;\nloop invariant i108: c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant i109: c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant i110: c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant i111: c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n || c == n;\nloop invariant i112: c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n;\nloop invariant i113: c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n || c == n;\nloop invariant i114: c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n || c == n;\nloop invariant i115: c == 0 || c == n || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n;\nloop invariant i116: c == 0 || c == 1 || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n || c == n;\nloop invariant i117: c == 0 || c == n || c == 1 || c == 1 || c == n || c == n || c == n || c == n || c == n || c == n;\nloop invariant i118: c == 0 || c == 1 || c == n || c == n || c == 1 || c == n || c == n || c == n || c == n || c == n;\n\n\n\n\nloop invariant i123: c > n ==> c > n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 35,
        "success_count": 31,
        "failure_count": 4,
        "success_rate": 0.8857142857142857
    }
}