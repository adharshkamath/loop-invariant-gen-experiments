{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/13.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x >= 0) ==> (x <= 2);\nloop invariant (y >= 0) ==> (y <= 2);\nloop invariant (x >= 0) ==> (x <= 4);\nloop invariant (y >= 0) ==> (y <= 4);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x >= 2);\nloop invariant (y >= 0) ==> (y <= 4) ==> (y >= 2);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x >= 2) ==> (x % 2 == 0);\nloop invariant (y >= 0) ==> (y <= 4) ==> (y >= 2) ==> (y % 2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x - 2 * y <= 2;\nloop invariant x - 2 * y >= 0;\nloop invariant x % 2 == 0;\nloop invariant y % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x == (y + (y * (y - 1)) / 2);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant ((x == 0 && y == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0));\nloop invariant ((x >= 1 && x <= 3 && y >= 1 && y <= 3) ==> (z1 >= 1 && z1 <= 3 && z2 >= 1 && z2 <= 3 && z3 >= 1 && z3 <= 3));\nloop invariant ((x == 4 && y == 4) ==> (z1 == 4 && z2 == 4 && z3 == 4));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= (2 * y);\nloop invariant y >= x / 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 2;\nloop invariant x != 3 || y != 3;\nloop invariant x != 1 || y != 1;\nloop invariant x != 5 || y != 5;\nloop invariant x != 0 || y != 0;\nloop invariant x != 2 || y != 2;\nloop invariant x != 4 || y != 4;\nloop invariant x != 6 || y != 6;\nloop invariant x != 8 || y != 8;\nloop invariant x != 10 || y != 10;\nloop invariant x != 12 || y != 12;\nloop invariant x != 14 || y != 14;\nloop invariant x != 16 || y != 16;\nloop invariant x != 18 || y != 18;\nloop invariant x != 20 || y != 20;\nloop invariant x != 22 || y != 22;\nloop invariant x != 24 || y != 24;\nloop invariant x != 26 || y != 26;\nloop invariant x != 28 || y != 28;\nloop invariant x != 30 || y != 30;\nloop invariant x != 32 || y != 32;\nloop invariant x != 34 || y != 34;\nloop invariant x != 36 || y != 36;\nloop invariant x != 38 || y != 38;\nloop invariant x != 40 || y != 40;\nloop invariant x != 42 || y != 42;\nloop invariant x != 44 || y != 44;\nloop invariant x != 46 || y != 46;\nloop invariant x != 48 || y != 48;\nloop invariant x != 50 || y != 50;\nloop invariant x != 52 || y != 52;\nloop invariant x != 54 || y != 54;\nloop invariant x != 56 || y != 56;\nloop invariant x != 58 || y != 58;\nloop invariant x != 60 || y != 60;\nloop invariant x != 62 || y != 62;\nloop invariant x != 64 || y != 64;\nloop invariant x != 66 || y != 66;\nloop invariant x != 68 || y != 68;\nloop invariant x != 70 || y != 70;\nloop invariant x != 72 || y != 72;\nloop invariant x != 74 || y != 74;\nloop invariant x != 76 || y != 76;\nloop invariant x != 78 || y != 78;\nloop invariant x != 80 || y != 80;\nloop invariant x != 82 || y != 82;\nloop invariant x != 84 || y != 84;\nloop invariant x != 86 || y != 86;\nloop invariant x != 88 || y != 88;\nloop invariant x != 90 || y != 90;\nloop invariant x != 92 || y != 92;\nloop invariant x != 94 || y != 94;\nloop invariant x != 96 || y != 96;\nloop invariant x != 98 || y != 98;\nloop invariant x != 100 || y != 100;\nloop invariant x != 102 || y != 102;\nloop invariant x != 104 || y != 104;\nloop invariant x != 106 || y != 106;\nloop invariant x != 108 || y != 108;\nloop invariant x != 110 || y != 110;\nloop invariant x != 112 || y != 112;\nloop invariant x != 114 || y != 114;\nloop invariant x != 116 || y != 116;\nloop invariant x != 118 || y != 118;\nloop invariant x != 120 || y != 120;\nloop invariant x != 122 || y != 122;\nloop invariant x != 124 || y != 124;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= (2 * y - 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x == 4) ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4, 0 <= y <= 4;\nloop invariant x == y || x == y + 2 || x == y - 2;\nloop invariant x + y >= (1 + (y - 1) * y / 2);\nloop invariant x + y >= (1 + (x - 1) * x / 2);\nloop invariant x + y <= (1 + (y - 1) * y / 2) + 4;\nloop invariant x + y <= (1 + (x - 1) * x / 2) + 4;\nloop invariant x + y == 4 ==> y != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 0 <= y <= 6;\nloop invariant x == 2 * y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= y;\nloop invariant (x >= 0) ==> (x == 4);\nloop invariant (y != 0) ==> (x == 4);\nloop invariant (x == 4) ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant x >= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= 2;\nloop invariant y >= 2;\nloop invariant x == y - 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x < 4 ==> y > 0;\nloop invariant x > 2 ==> y < 2;\nloop invariant x == 4 ==> y != 0;\nloop invariant x > 2 ==> y <= 2;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x >= 0) ==> (x <= 2);\nloop invariant (y >= 0) ==> (y <= 2);\nloop invariant (x >= 0) ==> (x <= 4);\nloop invariant (y >= 0) ==> (y <= 4);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x >= 2);\nloop invariant (y >= 0) ==> (y <= 4) ==> (y >= 2);\nloop invariant (x >= 0) ==> (x <= 4) ==> (x >= 2) ==> (x % 2 == 0);\nloop invariant (y >= 0) ==> (y <= 4) ==> (y >= 2) ==> (y % 2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x - 2 * y <= 2;\nloop invariant x - 2 * y >= 0;\nloop invariant x % 2 == 0;\nloop invariant y % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x - 2 * y <= 2;\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 4;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 4;\nloop invariant y <= 2;\nloop invariant x >= y;\nloop invariant x == (y + (y * (y - 1)) / 2);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\nloop invariant x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant x >= y ==> (x == 4) ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\nloop invariant i9: x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant i10: x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant i11: y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant i12: y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant i13: x >= y ==> (x == 4) ==> (y != 0);\nloop invariant i14: x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant ((x == 0 && y == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0));\nloop invariant ((x >= 1 && x <= 3 && y >= 1 && y <= 3) ==> (z1 >= 1 && z1 <= 3 && z2 >= 1 && z2 <= 3 && z3 >= 1 && z3 <= 3));\nloop invariant ((x == 4 && y == 4) ==> (z1 == 4 && z2 == 4 && z3 == 4));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 63,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= (2 * y);\nloop invariant y >= x / 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 2;\nloop invariant x != 3 || y != 3;\nloop invariant x != 1 || y != 1;\nloop invariant x != 5 || y != 5;\nloop invariant x != 0 || y != 0;\nloop invariant x != 2 || y != 2;\nloop invariant x != 4 || y != 4;\nloop invariant x != 6 || y != 6;\nloop invariant x != 8 || y != 8;\nloop invariant x != 10 || y != 10;\nloop invariant x != 12 || y != 12;\nloop invariant x != 14 || y != 14;\nloop invariant x != 16 || y != 16;\nloop invariant x != 18 || y != 18;\nloop invariant x != 20 || y != 20;\nloop invariant x != 22 || y != 22;\nloop invariant x != 24 || y != 24;\nloop invariant x != 26 || y != 26;\nloop invariant x != 28 || y != 28;\nloop invariant x != 30 || y != 30;\nloop invariant x != 32 || y != 32;\nloop invariant x != 34 || y != 34;\nloop invariant x != 36 || y != 36;\nloop invariant x != 38 || y != 38;\nloop invariant x != 40 || y != 40;\nloop invariant x != 42 || y != 42;\nloop invariant x != 44 || y != 44;\nloop invariant x != 46 || y != 46;\nloop invariant x != 48 || y != 48;\nloop invariant x != 50 || y != 50;\nloop invariant x != 52 || y != 52;\nloop invariant x != 54 || y != 54;\nloop invariant x != 56 || y != 56;\nloop invariant x != 58 || y != 58;\nloop invariant x != 60 || y != 60;\nloop invariant x != 62 || y != 62;\nloop invariant x != 64 || y != 64;\nloop invariant x != 66 || y != 66;\nloop invariant x != 68 || y != 68;\nloop invariant x != 70 || y != 70;\nloop invariant x != 72 || y != 72;\nloop invariant x != 74 || y != 74;\nloop invariant x != 76 || y != 76;\nloop invariant x != 78 || y != 78;\nloop invariant x != 80 || y != 80;\nloop invariant x != 82 || y != 82;\nloop invariant x != 84 || y != 84;\nloop invariant x != 86 || y != 86;\nloop invariant x != 88 || y != 88;\nloop invariant x != 90 || y != 90;\nloop invariant x != 92 || y != 92;\nloop invariant x != 94 || y != 94;\nloop invariant x != 96 || y != 96;\nloop invariant x != 98 || y != 98;\nloop invariant x != 100 || y != 100;\nloop invariant x != 102 || y != 102;\nloop invariant x != 104 || y != 104;\nloop invariant x != 106 || y != 106;\nloop invariant x != 108 || y != 108;\nloop invariant x != 110 || y != 110;\nloop invariant x != 112 || y != 112;\nloop invariant x != 114 || y != 114;\nloop invariant x != 116 || y != 116;\nloop invariant x != 118 || y != 118;\nloop invariant x != 120 || y != 120;\nloop invariant x != 122 || y != 122;\nloop invariant x != 124 || y != 124;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= (2 * y - 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant (x == 4) ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4, 0 <= y <= 4;\nloop invariant x == y || x == y + 2 || x == y - 2;\nloop invariant x + y >= (1 + (y - 1) * y / 2);\nloop invariant x + y >= (1 + (x - 1) * x / 2);\nloop invariant x + y <= (1 + (y - 1) * y / 2) + 4;\nloop invariant x + y <= (1 + (x - 1) * x / 2) + 4;\nloop invariant x + y == 4 ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 0 <= y <= 6;\nloop invariant x == 2 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2;\nloop invariant 0 <= y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= y;\nloop invariant (x >= 0) ==> (x == 4);\nloop invariant (y != 0) ==> (x == 4);\nloop invariant (x == 4) ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant y >= 0;\nloop invariant y <= 2;\nloop invariant x >= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\nloop invariant i2: y >= 0;\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x >= 2;\nloop invariant y >= 2;\nloop invariant x == y - 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x < 4 ==> y > 0;\nloop invariant x > 2 ==> y < 2;\nloop invariant x == 4 ==> y != 0;\nloop invariant x > 2 ==> y <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 125: unexpected token ','",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 4;\nloop invariant i2: 0 <= y <= 4;\nloop invariant i3: (x >= 0) ==> (x <= 2);\nloop invariant i4: (y >= 0) ==> (y <= 2);\nloop invariant i5: (x >= 0) ==> (x <= 4);\nloop invariant i6: (y >= 0) ==> (y <= 4);\nloop invariant i7: (x >= 0) ==> (x <= 4) ==> (x >= 2);\nloop invariant i8: (y >= 0) ==> (y <= 4) ==> (y >= 2);\nloop invariant i9: (x >= 0) ==> (x <= 4) ==> (x >= 2) ==> (x % 2 == 0);\nloop invariant i10: (y >= 0) ==> (y <= 4) ==> (y >= 2) ==> (y % 2 == 0);\nloop invariant i11: x - 2 * y <= 2;\nloop invariant i12: x - 2 * y >= 0;\nloop invariant i13: x % 2 == 0;\nloop invariant i14: y % 2 == 0;\nloop invariant i15: 0 <= y <= 2;\nloop invariant i16: x >= 0;\nloop invariant i17: y >= 0;\nloop invariant i18: x <= 4;\nloop invariant i19: y <= 2;\nloop invariant i20: x >= y;\nloop invariant i21: x == (y + (y * (y - 1)) / 2);\nloop invariant i22: x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant i23: x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant i24: y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant i25: y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant i26: x >= y ==> (x == 4) ==> (y != 0);\nloop invariant i27: x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\nloop invariant i28: ((x == 0 && y == 0) ==> (z1 == 0 && z2 == 0 && z3 == 0));\nloop invariant i29: ((x >= 1 && x <= 3 && y >= 1 && y <= 3) ==> (z1 >= 1 && z1 <= 3 && z2 >= 1 && z2 <= 3 && z3 >= 1 && z3 <= 3));\nloop invariant i30: ((x == 4 && y == 4) ==> (z1 == 4 && z2 == 4 && z3 == 4));\nloop invariant i31: x >= (2 * y);\nloop invariant i32: y >= x / 2;\nloop invariant i33: x + y <= 4;\nloop invariant i34: x + y >= 2;\nloop invariant i35: x != 3 || y != 3;\nloop invariant i36: x != 1 || y != 1;\nloop invariant i37: x != 5 || y != 5;\nloop invariant i38: x != 0 || y != 0;\nloop invariant i39: x != 2 || y != 2;\nloop invariant i40: x != 4 || y != 4;\nloop invariant i41: x != 6 || y != 6;\nloop invariant i42: x != 8 || y != 8;\nloop invariant i43: x != 10 || y != 10;\nloop invariant i44: x != 12 || y != 12;\nloop invariant i45: x != 14 || y != 14;\nloop invariant i46: x != 16 || y != 16;\nloop invariant i47: x != 18 || y != 18;\nloop invariant i48: x != 20 || y != 20;\nloop invariant i49: x != 22 || y != 22;\nloop invariant i50: x != 24 || y != 24;\nloop invariant i51: x != 26 || y != 26;\nloop invariant i52: x != 28 || y != 28;\nloop invariant i53: x != 30 || y != 30;\nloop invariant i54: x != 32 || y != 32;\nloop invariant i55: x != 34 || y != 34;\nloop invariant i56: x != 36 || y != 36;\nloop invariant i57: x != 38 || y != 38;\nloop invariant i58: x != 40 || y != 40;\nloop invariant i59: x != 42 || y != 42;\nloop invariant i60: x != 44 || y != 44;\nloop invariant i61: x != 46 || y != 46;\nloop invariant i62: x != 48 || y != 48;\nloop invariant i63: x != 50 || y != 50;\nloop invariant i64: x != 52 || y != 52;\nloop invariant i65: x != 54 || y != 54;\nloop invariant i66: x != 56 || y != 56;\nloop invariant i67: x != 58 || y != 58;\nloop invariant i68: x != 60 || y != 60;\nloop invariant i69: x != 62 || y != 62;\nloop invariant i70: x != 64 || y != 64;\nloop invariant i71: x != 66 || y != 66;\nloop invariant i72: x != 68 || y != 68;\nloop invariant i73: x != 70 || y != 70;\nloop invariant i74: x != 72 || y != 72;\nloop invariant i75: x != 74 || y != 74;\nloop invariant i76: x != 76 || y != 76;\nloop invariant i77: x != 78 || y != 78;\nloop invariant i78: x != 80 || y != 80;\nloop invariant i79: x != 82 || y != 82;\nloop invariant i80: x != 84 || y != 84;\nloop invariant i81: x != 86 || y != 86;\nloop invariant i82: x != 88 || y != 88;\nloop invariant i83: x != 90 || y != 90;\nloop invariant i84: x != 92 || y != 92;\nloop invariant i85: x != 94 || y != 94;\nloop invariant i86: x != 96 || y != 96;\nloop invariant i87: x != 98 || y != 98;\nloop invariant i88: x != 100 || y != 100;\nloop invariant i89: x != 102 || y != 102;\nloop invariant i90: x != 104 || y != 104;\nloop invariant i91: x != 106 || y != 106;\nloop invariant i92: x != 108 || y != 108;\nloop invariant i93: x != 110 || y != 110;\nloop invariant i94: x != 112 || y != 112;\nloop invariant i95: x != 114 || y != 114;\nloop invariant i96: x != 116 || y != 116;\nloop invariant i97: x != 118 || y != 118;\nloop invariant i98: x != 120 || y != 120;\nloop invariant i99: x != 122 || y != 122;\nloop invariant i100: x != 124 || y != 124;\nloop invariant i101: x >= (2 * y - 2);\nloop invariant i102: (x == 4) ==> (y != 0);\nloop invariant i103: 0 <= x <= 4, 0 <= y <= 4;\nloop invariant i104: x == y || x == y + 2 || x == y - 2;\nloop invariant i105: x + y >= (1 + (y - 1) * y / 2);\nloop invariant i106: x + y >= (1 + (x - 1) * x / 2);\nloop invariant i107: x + y <= (1 + (y - 1) * y / 2) + 4;\nloop invariant i108: x + y <= (1 + (x - 1) * x / 2) + 4;\nloop invariant i109: x + y == 4 ==> y != 0;\nloop invariant i110: 0 <= x <= 6;\nloop invariant i111: 0 <= y <= 6;\nloop invariant i112: x == 2 * y;\nloop invariant i113: 1 <= x <= 2;\nloop invariant i114: (x >= 0) ==> (x == 4);\nloop invariant i115: (y != 0) ==> (x == 4);\nloop invariant i116: 0 <= x <= 2;\nloop invariant i117: x >= 4;\nloop invariant i118: x >= 2;\nloop invariant i119: y >= 2;\nloop invariant i120: x == y - 2;\nloop invariant i121: x < 4 ==> y > 0;\nloop invariant i122: x > 2 ==> y < 2;\nloop invariant i123: x == 4 ==> y != 0;\nloop invariant i124: x > 2 ==> y <= 2;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 74,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: x - 2 * y <= 2;\n\n\n\n\nloop invariant i16: x >= 0;\nloop invariant i17: y >= 0;\n\n\n\n\nloop invariant i22: x >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant i23: x <= 4 ==> (x == 4) ==> (y != 0);\nloop invariant i24: y >= 0 ==> (x == 4) ==> (y != 0);\nloop invariant i25: y <= 2 ==> (x == 4) ==> (y != 0);\nloop invariant i26: x >= y ==> (x == 4) ==> (y != 0);\nloop invariant i27: x == (y + (y * (y - 1)) / 2) ==> (x == 4) ==> (y != 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i102: (x == 4) ==> (y != 0);\n\n\n\n\n\n\nloop invariant i109: x + y == 4 ==> y != 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i123: x == 4 ==> y != 0;\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 7,
        "success_count": 7,
        "failure_count": 0,
        "success_rate": 1.0
    }
}