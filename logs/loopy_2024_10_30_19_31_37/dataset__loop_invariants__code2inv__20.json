{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/20.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x = m || x > m;\nloop invariant x >= 0;\nloop invariant n > 0;\nloop invariant (n > 0 ==> x <= n);\nloop invariant x = m || x > m;\nloop invariant x >= 0;\nloop invariant n > 0;\nloop invariant (n > 0 ==> x <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant m <= x <= n;\nloop invariant (unknown() ==> m == x) && (!(unknown()) ==> m == m);\nloop invariant n > 0 ==> m >= 0;\nloop invariant m >= 0 ==> m >= 0;\nloop invariant m >= 0 ==> m <= n;\nloop invariant m >= 0 ==> m >= m;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant unknown ==> (x = n);\nloop invariant unknown ==> (m = n);\nloop invariant !unknown ==> (m = x);\nloop invariant !unknown ==> (m <= x);\nloop invariant !unknown ==> (m <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= x;\nloop invariant m >= 0 ==> m < n ==> m <= x;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n; m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant (x == n || m == x) ==> n > 0;\nloop invariant (x == n || m == x) ==> n <= 0 ==> (m == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m == x ==> (unknown() ==> m >= 0);\n*/\n```",
            "```\n/*@\nloop invariant z1 >= 0 && z1 <= z2;\nloop invariant z2 >= 0 && z2 <= z3;\nloop invariant z3 >= 0 && z3 <= n;\nloop invariant m >= 0 && m <= n;\nloop invariant m >= z1;\nloop invariant m <= z2;\nloop invariant m <= z3;\nloop invariant m <= x;\nloop invariant m >= x;\nloop invariant m == x ==> z1 == x;\nloop invariant m == x ==> z2 == x;\nloop invariant m == x ==> z3 == x;\nloop invariant m == x ==> n == x;\nloop invariant m == x ==> n >= x;\nloop invariant m == x ==> n <= x;\nloop invariant z1 == x ==> z2 == x;\nloop invariant z1 == x ==> z3 == x;\nloop invariant z1 == x ==> n == x;\nloop invariant z1 == x ==> n >= x;\nloop invariant z1 == x ==> n <= x;\nloop invariant z2 == x ==> z3 == x;\nloop invariant z2 == x ==> n == x;\nloop invariant z2 == x ==> n >= x;\nloop invariant z2 == x ==> n <= x;\nloop invariant z3 == x ==> n == x;\nloop invariant z3 == x ==> n >= x;\nloop invariant z3 == x ==> n <= x;\nloop invariant m == x && n == x ==> z1 == x;\nloop invariant m == x && n == x ==> z2 == x;\nloop invariant m == x && n == x ==> z3 == x;\nloop invariant z1 == x && z2 == x ==> z3 == x;\nloop invariant z1 == x && z2 == x ==> n == x;\nloop invariant z1 == x && z3 == x ==> n == x;\nloop invariant z2 == x && z3 == x ==> n == x;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x == n;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x >= z1;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x >= z1;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z2 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z2 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z2 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z2 <= z3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant n > 0 ==> (m >= 0);\nloop invariant x >= 0 ==> (m >= 0);\nloop invariant m <= x ==> (m >= 0);\nloop invariant m <= x ==> (x >= 0);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant (n > 0) ==> (m >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (m >= -1) ==> (m < 0);\nloop invariant (m >= 0) ==> (m < n);\nloop invariant (m >= 0) ==> (m >= x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant n == 0 ==> m == 0;\nloop invariant n > 0 ==> m == x;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant 1 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\nloop invariant i4: m >= 0;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x = m || x > m;\nloop invariant x >= 0;\nloop invariant n > 0;\nloop invariant (n > 0 ==> x <= n);\nloop invariant x = m || x > m;\nloop invariant x >= 0;\nloop invariant n > 0;\nloop invariant (n > 0 ==> x <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: (n > 0 ==> x <= n);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant m <= x <= n;\nloop invariant (unknown() ==> m == x) && (!(unknown()) ==> m == m);\nloop invariant n > 0 ==> m >= 0;\nloop invariant m >= 0 ==> m >= 0;\nloop invariant m >= 0 ==> m <= n;\nloop invariant m >= 0 ==> m >= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\nloop invariant i5: m >= 0 ==> m >= 0;\n\nloop invariant i7: m >= 0 ==> m >= m;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant m >= 0;\nloop invariant x >= m;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant unknown ==> (x = n);\nloop invariant unknown ==> (m = n);\nloop invariant !unknown ==> (m = x);\nloop invariant !unknown ==> (m <= x);\nloop invariant !unknown ==> (m <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: m >= 0;\nloop invariant i3: x >= m;\n\n\n\n\n\nloop invariant i9: !unknown ==> (m <= x);\nloop invariant i10: !unknown ==> (m <= n);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= x;\nloop invariant m >= 0 ==> m < n ==> m <= x;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m >= 0 ==> m < n ==> m <= x;\nloop invariant i4: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n;\nloop invariant i5: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m;\nloop invariant i6: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i7: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i8: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i9: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i10: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i11: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i12: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i13: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i14: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i15: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i16: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i17: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i18: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i19: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n; m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant (x == n || m == x) ==> n > 0;\nloop invariant (x == n || m == x) ==> n <= 0 ==> (m == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\nloop invariant i4: (x == n || m == x) ==> n <= 0 ==> (m == 0);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m == x ==> (unknown() ==> m >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: x >= m;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant z1 >= 0 && z1 <= z2;\nloop invariant z2 >= 0 && z2 <= z3;\nloop invariant z3 >= 0 && z3 <= n;\nloop invariant m >= 0 && m <= n;\nloop invariant m >= z1;\nloop invariant m <= z2;\nloop invariant m <= z3;\nloop invariant m <= x;\nloop invariant m >= x;\nloop invariant m == x ==> z1 == x;\nloop invariant m == x ==> z2 == x;\nloop invariant m == x ==> z3 == x;\nloop invariant m == x ==> n == x;\nloop invariant m == x ==> n >= x;\nloop invariant m == x ==> n <= x;\nloop invariant z1 == x ==> z2 == x;\nloop invariant z1 == x ==> z3 == x;\nloop invariant z1 == x ==> n == x;\nloop invariant z1 == x ==> n >= x;\nloop invariant z1 == x ==> n <= x;\nloop invariant z2 == x ==> z3 == x;\nloop invariant z2 == x ==> n == x;\nloop invariant z2 == x ==> n >= x;\nloop invariant z2 == x ==> n <= x;\nloop invariant z3 == x ==> n == x;\nloop invariant z3 == x ==> n >= x;\nloop invariant z3 == x ==> n <= x;\nloop invariant m == x && n == x ==> z1 == x;\nloop invariant m == x && n == x ==> z2 == x;\nloop invariant m == x && n == x ==> z3 == x;\nloop invariant z1 == x && z2 == x ==> z3 == x;\nloop invariant z1 == x && z2 == x ==> n == x;\nloop invariant z1 == x && z3 == x ==> n == x;\nloop invariant z2 == x && z3 == x ==> n == x;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x == n;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x >= z1;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x >= z1;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z2 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z2 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z2 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z2;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z3;\nloop invariant m == x && n == x && z1 == x && z2 == x && z3 == x ==> z2 <= z3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n\n\n\nloop invariant i8: m <= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x == n;\nloop invariant i36: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x >= z1;\nloop invariant i37: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z2;\nloop invariant i38: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z3;\nloop invariant i39: m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z2;\nloop invariant i40: m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z3;\nloop invariant i41: m == x && n == x && z1 == x && z2 == x && z3 == x ==> z2 <= z3;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant n > 0 ==> (m >= 0);\nloop invariant x >= 0 ==> (m >= 0);\nloop invariant m <= x ==> (m >= 0);\nloop invariant m <= x ==> (x >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: n > 0 ==> (m >= 0);\nloop invariant i6: x >= 0 ==> (m >= 0);\nloop invariant i7: m <= x ==> (m >= 0);\nloop invariant i8: m <= x ==> (x >= 0);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant (n > 0) ==> (m >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: (n > 0) ==> (m >= 0);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (m >= -1) ==> (m < 0);\nloop invariant (m >= 0) ==> (m < n);\nloop invariant (m >= 0) ==> (m >= x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant n == 0 ==> m == 0;\nloop invariant n > 0 ==> m == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: 1 <= x <= n;\nloop invariant i2: 0 <= m <= n;\nloop invariant i3: m <= x;\nloop invariant i4: m >= 0;\nloop invariant i5: x = m || x > m;\nloop invariant i6: x >= 0;\nloop invariant i7: n > 0;\nloop invariant i8: (n > 0 ==> x <= n);\nloop invariant i9: 0 <= x <= n;\nloop invariant i10: n >= 0;\nloop invariant i11: m <= x <= n;\nloop invariant i12: (unknown() ==> m == x) && (!(unknown()) ==> m == m);\nloop invariant i13: n > 0 ==> m >= 0;\nloop invariant i14: m >= 0 ==> m >= 0;\nloop invariant i15: m >= 0 ==> m <= n;\nloop invariant i16: m >= 0 ==> m >= m;\nloop invariant i17: x >= m;\nloop invariant i18: x <= n;\nloop invariant i19: m <= n;\nloop invariant i20: unknown ==> (x = n);\nloop invariant i21: unknown ==> (m = n);\nloop invariant i22: !unknown ==> (m = x);\nloop invariant i23: !unknown ==> (m <= x);\nloop invariant i24: !unknown ==> (m <= n);\nloop invariant i25: m >= x;\nloop invariant i26: m >= 0 ==> m < n ==> m <= x;\nloop invariant i27: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n;\nloop invariant i28: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m;\nloop invariant i29: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i30: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i31: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i32: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i33: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i34: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i35: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i36: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i37: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i38: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i39: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i40: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i41: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i42: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i43: 0 <= m <= n; m <= x;\nloop invariant i44: 0 <= m <= x;\nloop invariant i45: (x == n || m == x) ==> n > 0;\nloop invariant i46: (x == n || m == x) ==> n <= 0 ==> (m == 0);\nloop invariant i47: m == x ==> (unknown() ==> m >= 0);\nloop invariant i48: z1 >= 0 && z1 <= z2;\nloop invariant i49: z2 >= 0 && z2 <= z3;\nloop invariant i50: z3 >= 0 && z3 <= n;\nloop invariant i51: m >= 0 && m <= n;\nloop invariant i52: m >= z1;\nloop invariant i53: m <= z2;\nloop invariant i54: m <= z3;\nloop invariant i55: m == x ==> z1 == x;\nloop invariant i56: m == x ==> z2 == x;\nloop invariant i57: m == x ==> z3 == x;\nloop invariant i58: m == x ==> n == x;\nloop invariant i59: m == x ==> n >= x;\nloop invariant i60: m == x ==> n <= x;\nloop invariant i61: z1 == x ==> z2 == x;\nloop invariant i62: z1 == x ==> z3 == x;\nloop invariant i63: z1 == x ==> n == x;\nloop invariant i64: z1 == x ==> n >= x;\nloop invariant i65: z1 == x ==> n <= x;\nloop invariant i66: z2 == x ==> z3 == x;\nloop invariant i67: z2 == x ==> n == x;\nloop invariant i68: z2 == x ==> n >= x;\nloop invariant i69: z2 == x ==> n <= x;\nloop invariant i70: z3 == x ==> n == x;\nloop invariant i71: z3 == x ==> n >= x;\nloop invariant i72: z3 == x ==> n <= x;\nloop invariant i73: m == x && n == x ==> z1 == x;\nloop invariant i74: m == x && n == x ==> z2 == x;\nloop invariant i75: m == x && n == x ==> z3 == x;\nloop invariant i76: z1 == x && z2 == x ==> z3 == x;\nloop invariant i77: z1 == x && z2 == x ==> n == x;\nloop invariant i78: z1 == x && z3 == x ==> n == x;\nloop invariant i79: z2 == x && z3 == x ==> n == x;\nloop invariant i80: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x == n;\nloop invariant i81: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x >= z1;\nloop invariant i82: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z2;\nloop invariant i83: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z3;\nloop invariant i84: m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z2;\nloop invariant i85: m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z3;\nloop invariant i86: m == x && n == x && z1 == x && z2 == x && z3 == x ==> z2 <= z3;\nloop invariant i87: n > 0 ==> (m >= 0);\nloop invariant i88: x >= 0 ==> (m >= 0);\nloop invariant i89: m <= x ==> (m >= 0);\nloop invariant i90: m <= x ==> (x >= 0);\nloop invariant i91: (n > 0) ==> (m >= 0);\nloop invariant i92: (m >= -1) ==> (m < 0);\nloop invariant i93: (m >= 0) ==> (m < n);\nloop invariant i94: (m >= 0) ==> (m >= x);\nloop invariant i95: n == 0 ==> m == 0;\nloop invariant i96: n > 0 ==> m == x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 19,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\nloop invariant i4: m >= 0;\n\nloop invariant i6: x >= 0;\n\nloop invariant i8: (n > 0 ==> x <= n);\n\n\n\n\nloop invariant i13: n > 0 ==> m >= 0;\nloop invariant i14: m >= 0 ==> m >= 0;\n\nloop invariant i16: m >= 0 ==> m >= m;\nloop invariant i17: x >= m;\n\n\n\n\n\nloop invariant i23: !unknown ==> (m <= x);\nloop invariant i24: !unknown ==> (m <= n);\n\nloop invariant i26: m >= 0 ==> m < n ==> m <= x;\nloop invariant i27: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n;\nloop invariant i28: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m;\nloop invariant i29: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i30: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i31: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i32: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i33: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i34: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i35: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i36: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i37: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i38: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i39: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i40: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\nloop invariant i41: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m;\nloop invariant i42: n > 0 ==> m >= 0 ==> m < n ==> m <= x ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n ==> m >= m ==> m <= n;\n\nloop invariant i44: 0 <= m <= x;\n\nloop invariant i46: (x == n || m == x) ==> n <= 0 ==> (m == 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i80: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x == n;\nloop invariant i81: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x >= z1;\nloop invariant i82: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z2;\nloop invariant i83: m == x && n == x && z1 == x && z2 == x && z3 == x ==> x <= z3;\nloop invariant i84: m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z2;\nloop invariant i85: m == x && n == x && z1 == x && z2 == x && z3 == x ==> z1 <= z3;\nloop invariant i86: m == x && n == x && z1 == x && z2 == x && z3 == x ==> z2 <= z3;\nloop invariant i87: n > 0 ==> (m >= 0);\nloop invariant i88: x >= 0 ==> (m >= 0);\nloop invariant i89: m <= x ==> (m >= 0);\nloop invariant i90: m <= x ==> (x >= 0);\nloop invariant i91: (n > 0) ==> (m >= 0);\n\n\n\nloop invariant i95: n == 0 ==> m == 0;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c"
        ],
        "skipped": [],
        "total": 17,
        "success_count": 15,
        "failure_count": 2,
        "success_rate": 0.8823529411764706
    }
}