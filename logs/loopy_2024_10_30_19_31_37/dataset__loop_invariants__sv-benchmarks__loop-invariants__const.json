{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  while (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant s >= 0;\nloop invariant s == 0 ==> unknown_uint() == 0 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= s <= 1;\nloop invariant 0 ==> (s == 0);\nloop invariant !0 ==> (s >= 1);\nloop invariant !0 ==> (s <= 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= s;\nloop invariant unknown_uint() ==> s == 0;\nloop invariant !unknown_uint() ==> s != 0;\nloop invariant s <= 1;\nloop invariant s == 0 ==> !unknown_uint() || s == 0;\nloop invariant s == 1 ==> unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= s <= 1;\nloop invariant !unknown_uint() ==> s == 0;\nloop invariant unknown_uint() ==> s == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= s <= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= unknown_uint() <= 1;\nloop invariant s >= 0;\nloop invariant s <= unknown_uint();\nloop invariant if (unknown_uint() == 1) then s == 0 else s > 0;\nloop invariant if (unknown_uint() == 0) then s == 0 else s > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= s <= 1;\nloop invariant unknown_uint() ==> s == 0;\nloop invariant unknown_uint() ==> s == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= s <= unknown_uint() * unknown_uint();\nloop invariant !unknown_uint() ==> (s == 0);\n*/\n```",
            "```\n/*@\nloop invariant s >= 0;\nloop invariant s <= 1;\nloop invariant unknown_uint() ==> s == 0;\nloop invariant !unknown_uint() ==> s >= 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= s <= 1;\n*/\n```",
            "```\n/*@\nloop invariant ( unknown_uint() ==> s == 0 );\nloop invariant ( !unknown_uint() ==> s == 0 );\nloop invariant ( unknown_uint() && s != 0 ==> s == 1 );\nloop invariant ( !unknown_uint() && s != 0 ==> s == s );\nloop invariant ( unknown_uint() && s == 0 ==> s == 0 );\nloop invariant ( !unknown_uint() && s == 0 ==> s == 0 );\nloop invariant ( unknown_uint() && s == 1 ==> s == 1 );\nloop invariant ( !unknown_uint() && s == 1 ==> s == s );\nloop invariant ( unknown_uint() && s == s ==> s == s );\nloop invariant ( !unknown_uint() && s == s ==> s == s );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= s <= 2;\nloop invariant (s == 0 || s == 1) ==> unknown_uint();\nloop invariant s >= 0;\nloop invariant (s > 0) ==> unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= s <= 1;\nloop invariant (unknown_uint() ==> s == 0);\nloop invariant (!unknown_uint() ==> s >= 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= s <= 1;\nloop invariant !(unknown_uint() && unknown_uint());\nloop invariant !(unknown_uint() && s != 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant s >= 0;\nloop invariant s == 0 ==> unknown_uint() == 0 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant s > 0 ==> unknown_uint() == 0 ==> s > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\nloop invariant i1: s >= 0;\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= s <= 1;\nloop invariant 0 ==> (s == 0);\nloop invariant !0 ==> (s >= 1);\nloop invariant !0 ==> (s <= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\nloop invariant i2: 0 ==> (s == 0);\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= s;\nloop invariant unknown_uint() ==> s == 0;\nloop invariant !unknown_uint() ==> s != 0;\nloop invariant s <= 1;\nloop invariant s == 0 ==> !unknown_uint() || s == 0;\nloop invariant s == 1 ==> unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\nloop invariant i1: 0 <= s;\n\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= s <= 1;\nloop invariant !unknown_uint() ==> s == 0;\nloop invariant unknown_uint() ==> s == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= s <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= unknown_uint() <= 1;\nloop invariant s >= 0;\nloop invariant s <= unknown_uint();\nloop invariant if (unknown_uint() == 1) then s == 0 else s > 0;\nloop invariant if (unknown_uint() == 0) then s == 0 else s > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\nloop invariant i2: s >= 0;\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= s <= 1;\nloop invariant unknown_uint() ==> s == 0;\nloop invariant unknown_uint() ==> s == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= s <= unknown_uint() * unknown_uint();\nloop invariant !unknown_uint() ==> (s == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant s >= 0;\nloop invariant s <= 1;\nloop invariant unknown_uint() ==> s == 0;\nloop invariant !unknown_uint() ==> s >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\nloop invariant i1: s >= 0;\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= s <= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant ( unknown_uint() ==> s == 0 );\nloop invariant ( !unknown_uint() ==> s == 0 );\nloop invariant ( unknown_uint() && s != 0 ==> s == 1 );\nloop invariant ( !unknown_uint() && s != 0 ==> s == s );\nloop invariant ( unknown_uint() && s == 0 ==> s == 0 );\nloop invariant ( !unknown_uint() && s == 0 ==> s == 0 );\nloop invariant ( unknown_uint() && s == 1 ==> s == 1 );\nloop invariant ( !unknown_uint() && s == 1 ==> s == s );\nloop invariant ( unknown_uint() && s == s ==> s == s );\nloop invariant ( !unknown_uint() && s == s ==> s == s );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= s <= 2;\nloop invariant (s == 0 || s == 1) ==> unknown_uint();\nloop invariant s >= 0;\nloop invariant (s > 0) ==> unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\n\nloop invariant i3: s >= 0;\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= s <= 1;\nloop invariant (unknown_uint() ==> s == 0);\nloop invariant (!unknown_uint() ==> s >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= s <= 1;\nloop invariant !(unknown_uint() && unknown_uint());\nloop invariant !(unknown_uint() && s != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 13: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\nloop invariant i1: s >= 0;\nloop invariant i2: s == 0 ==> unknown_uint() == 0 ==> s == 0;\nloop invariant i3: s > 0 ==> unknown_uint() == 1 ==> s > 0;\nloop invariant i4: s == 0 ==> unknown_uint() == 1 ==> s == 0;\nloop invariant i5: s > 0 ==> unknown_uint() == 0 ==> s > 0;\nloop invariant i6: 0 <= s <= 1;\nloop invariant i7: 0 ==> (s == 0);\nloop invariant i8: !0 ==> (s >= 1);\nloop invariant i9: !0 ==> (s <= 1);\nloop invariant i10: 0 <= s;\nloop invariant i11: unknown_uint() ==> s == 0;\nloop invariant i12: !unknown_uint() ==> s != 0;\nloop invariant i13: s <= 1;\nloop invariant i14: s == 0 ==> !unknown_uint() || s == 0;\nloop invariant i15: s == 1 ==> unknown_uint();\nloop invariant i16: !unknown_uint() ==> s == 0;\nloop invariant i17: 0 <= unknown_uint() <= 1;\nloop invariant i18: s <= unknown_uint();\nloop invariant i19: if (unknown_uint() == 1) then s == 0 else s > 0;\nloop invariant i20: if (unknown_uint() == 0) then s == 0 else s > 0;\nloop invariant i21: unknown_uint() ==> s == 1;\nloop invariant i22: 0 <= s <= unknown_uint() * unknown_uint();\nloop invariant i23: !unknown_uint() ==> (s == 0);\nloop invariant i24: !unknown_uint() ==> s >= 1;\nloop invariant i25: ( unknown_uint() ==> s == 0 );\nloop invariant i26: ( !unknown_uint() ==> s == 0 );\nloop invariant i27: ( unknown_uint() && s != 0 ==> s == 1 );\nloop invariant i28: ( !unknown_uint() && s != 0 ==> s == s );\nloop invariant i29: ( unknown_uint() && s == 0 ==> s == 0 );\nloop invariant i30: ( !unknown_uint() && s == 0 ==> s == 0 );\nloop invariant i31: ( unknown_uint() && s == 1 ==> s == 1 );\nloop invariant i32: ( !unknown_uint() && s == 1 ==> s == s );\nloop invariant i33: ( unknown_uint() && s == s ==> s == s );\nloop invariant i34: ( !unknown_uint() && s == s ==> s == s );\nloop invariant i35: 0 <= s <= 2;\nloop invariant i36: (s == 0 || s == 1) ==> unknown_uint();\nloop invariant i37: (s > 0) ==> unknown_uint();\nloop invariant i38: (unknown_uint() ==> s == 0);\nloop invariant i39: (!unknown_uint() ==> s >= 1);\nloop invariant i40: !(unknown_uint() && unknown_uint());\nloop invariant i41: !(unknown_uint() && s != 0);\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 40,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int s = 0;\n  /*@\nloop invariant i1: s >= 0;\n\n\n\n\n\nloop invariant i7: 0 ==> (s == 0);\n\n\nloop invariant i10: 0 <= s;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n\n    }\n  }\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c"
        ],
        "skipped": [],
        "total": 99,
        "success_count": 88,
        "failure_count": 11,
        "success_rate": 0.8888888888888888
    }
}