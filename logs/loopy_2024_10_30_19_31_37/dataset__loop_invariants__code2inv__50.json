{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/50.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (if (unknown() && (c != 4))) ==> (c <= 3);\nloop invariant (if (unknown() && (c != 4))) ==> (c >= 0);\nloop invariant (if (!unknown() && (c == 4))) ==> (c == 1);\nloop invariant (if (!unknown() && (c == 4))) ==> (c >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 100000;\nloop invariant c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant c == 4 ==> c == 0;\nloop invariant c < 4 ==> c >= 0;\nloop invariant c == 4 ==> c >= 0;\nloop invariant c >= 0 ==> c != 4;\nloop invariant c != 4 ==> c < 5;\nloop invariant c < 5 ==> c >= 0;\nloop invariant c < 5 ==> c != 4;\nloop invariant c >= 0 ==> c < 5;\nloop invariant c >= 0 ==> c != 4;\nloop invariant c != 4 ==> c < 5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c >= 0 ==> c != 4 || c == 0;\nloop invariant c == 4 ==> c == 4;\nloop invariant c == 0 ==> c == 0;\nloop invariant c >= 0 ==> c <= 4;\nloop invariant c >= 0 ==> c != 4 || c == 0 ==> c <= 4;\nloop invariant c >= 0 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 ==> c >= 0;\nloop invariant c == 4 ==> c == 1;\nloop invariant c == 4 ==> unknown() == 0;\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c == 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= 4;\nloop invariant c >= 0 && c <= 4;\nloop invariant c == 4 || c == 1;\nloop invariant c >= 0 && c <= 4 && (c == 4 || c == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 4) ==> (c == 1);\nloop invariant (c == 1) ==> (c == 2);\nloop invariant (c == 2) ==> (c == 3);\nloop invariant (c == 3) ==> (c == 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> (c == 1);\nloop invariant (c == 1) ==> (c == 4);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c != 4) ==> (c >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> unknown() ==> c == 4;\nloop invariant (c != 4) ==> !unknown() ==> c != 4;\nloop invariant (c == 1) ==> !unknown() ==> c == 1;\nloop invariant (c != 1) ==> unknown() ==> c != 1;\nloop invariant (c >= 0) ==> !unknown() ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c != 4) ==> (c == 0 or c == 1);\nloop invariant (c == 4) ==> (c == 4);\nloop invariant (c < 4) ==> (c <= (c + 1));\nloop invariant (c >= 4) ==> (c >= 1);\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant unknown() ==> c < 4;\nloop invariant !unknown() ==> c >= 4;\n*/\n```",
            "```\n/*@\nloop invariant c % 4 == c;\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c <= 4 + (unknown() ? 1 : 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant c == 0 || c == 4 || c == 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (if (unknown() && (c != 4))) ==> (c <= 3);\nloop invariant (if (unknown() && (c != 4))) ==> (c >= 0);\nloop invariant (if (!unknown() && (c == 4))) ==> (c == 1);\nloop invariant (if (!unknown() && (c == 4))) ==> (c >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 100000;\nloop invariant c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\nloop invariant i2: c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant c == 4 ==> c == 0;\nloop invariant c < 4 ==> c >= 0;\nloop invariant c == 4 ==> c >= 0;\nloop invariant c >= 0 ==> c != 4;\nloop invariant c != 4 ==> c < 5;\nloop invariant c < 5 ==> c >= 0;\nloop invariant c < 5 ==> c != 4;\nloop invariant c >= 0 ==> c < 5;\nloop invariant c >= 0 ==> c != 4;\nloop invariant c != 4 ==> c < 5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 5;\n\nloop invariant i3: c < 4 ==> c >= 0;\nloop invariant i4: c == 4 ==> c >= 0;\n\nloop invariant i6: c != 4 ==> c < 5;\nloop invariant i7: c < 5 ==> c >= 0;\n\nloop invariant i9: c >= 0 ==> c < 5;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c >= 0 ==> c != 4 || c == 0;\nloop invariant c == 4 ==> c == 4;\nloop invariant c == 0 ==> c == 0;\nloop invariant c >= 0 ==> c <= 4;\nloop invariant c >= 0 ==> c != 4 || c == 0 ==> c <= 4;\nloop invariant c >= 0 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\nloop invariant i3: c == 4 ==> c == 4;\nloop invariant i4: c == 0 ==> c == 0;\nloop invariant i5: c >= 0 ==> c <= 4;\nloop invariant i6: c >= 0 ==> c != 4 || c == 0 ==> c <= 4;\nloop invariant i7: c >= 0 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i8: c >= 0 ==> c <= 4 ==> c <= 4;\n\nloop invariant i10: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i11: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4;\nloop invariant i12: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i13: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i14: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i15: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i16: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i17: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i18: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i19: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i20: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant c != 4 ==> c >= 0;\nloop invariant c == 4 ==> c == 1;\nloop invariant c == 4 ==> unknown() == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: c != 4 ==> c >= 0;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c == 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c == 4;\nloop invariant c != 4 ==> unknown() ==> c != 4;\nloop invariant c == 4 ==> unknown() ==> c != 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 4;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= 4;\nloop invariant c >= 0 && c <= 4;\nloop invariant c == 4 || c == 1;\nloop invariant c >= 0 && c <= 4 && (c == 4 || c == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\nloop invariant i2: c >= 0 && c <= 4;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c == 4) ==> (c == 1);\nloop invariant (c == 1) ==> (c == 2);\nloop invariant (c == 2) ==> (c == 3);\nloop invariant (c == 3) ==> (c == 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> (c == 1);\nloop invariant (c == 1) ==> (c == 4);\nloop invariant (c == 0) ==> (c == 1);\nloop invariant (c != 4) ==> (c >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\nloop invariant i5: (c != 4) ==> (c >= 0);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c == 4) ==> unknown() ==> c == 4;\nloop invariant (c != 4) ==> !unknown() ==> c != 4;\nloop invariant (c == 1) ==> !unknown() ==> c == 1;\nloop invariant (c != 1) ==> unknown() ==> c != 1;\nloop invariant (c >= 0) ==> !unknown() ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 4;\nloop invariant (c != 4) ==> (c == 0 or c == 1);\nloop invariant (c == 4) ==> (c == 4);\nloop invariant (c < 4) ==> (c <= (c + 1));\nloop invariant (c >= 4) ==> (c >= 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\nloop invariant i3: (c == 4) ==> (c == 4);\nloop invariant i4: (c < 4) ==> (c <= (c + 1));\nloop invariant i5: (c >= 4) ==> (c >= 1);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant unknown() ==> c < 4;\nloop invariant !unknown() ==> c >= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 4;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant c % 4 == c;\nloop invariant c >= 0;\nloop invariant c <= 4;\nloop invariant c <= 4 + (unknown() ? 1 : 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\nloop invariant i2: c >= 0;\nloop invariant i3: c <= 4;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= 5;\nloop invariant c == 0 || c == 4 || c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: (if (unknown() && (c != 4))) ==> (c <= 3);\nloop invariant i3: (if (unknown() && (c != 4))) ==> (c >= 0);\nloop invariant i4: (if (!unknown() && (c == 4))) ==> (c == 1);\nloop invariant i5: (if (!unknown() && (c == 4))) ==> (c >= 0);\nloop invariant i6: 0 <= c <= 100000;\nloop invariant i7: c >= 0;\nloop invariant i8: 0 <= c <= 5;\nloop invariant i9: c == 4 ==> c == 0;\nloop invariant i10: c < 4 ==> c >= 0;\nloop invariant i11: c == 4 ==> c >= 0;\nloop invariant i12: c >= 0 ==> c != 4;\nloop invariant i13: c != 4 ==> c < 5;\nloop invariant i14: c < 5 ==> c >= 0;\nloop invariant i15: c < 5 ==> c != 4;\nloop invariant i16: c >= 0 ==> c < 5;\nloop invariant i17: c >= 0 ==> c != 4 || c == 0;\nloop invariant i18: c == 4 ==> c == 4;\nloop invariant i19: c == 0 ==> c == 0;\nloop invariant i20: c >= 0 ==> c <= 4;\nloop invariant i21: c >= 0 ==> c != 4 || c == 0 ==> c <= 4;\nloop invariant i22: c >= 0 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i23: c >= 0 ==> c <= 4 ==> c <= 4;\nloop invariant i24: c >= 0 ==> c <= 4 ==> c == 0 || c == 4;\nloop invariant i25: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i26: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4;\nloop invariant i27: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i28: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i29: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i30: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i31: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i32: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i33: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i34: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i35: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i36: c != 4 ==> c >= 0;\nloop invariant i37: c == 4 ==> c == 1;\nloop invariant i38: c == 4 ==> unknown() == 0;\nloop invariant i39: c <= 4;\nloop invariant i40: c == 4 ==> unknown() ==> c == 4;\nloop invariant i41: c != 4 ==> unknown() ==> c != 4;\nloop invariant i42: c == 4 ==> unknown() ==> c != 4;\nloop invariant i43: c != 4 ==> unknown() ==> c == 4;\nloop invariant i44: 1 <= c <= 4;\nloop invariant i45: c >= 0 && c <= 4;\nloop invariant i46: c == 4 || c == 1;\nloop invariant i47: c >= 0 && c <= 4 && (c == 4 || c == 1);\nloop invariant i48: (c == 0) ==> (c == 1);\nloop invariant i49: (c == 4) ==> (c == 1);\nloop invariant i50: (c == 1) ==> (c == 2);\nloop invariant i51: (c == 2) ==> (c == 3);\nloop invariant i52: (c == 3) ==> (c == 4);\nloop invariant i53: (c == 1) ==> (c == 4);\nloop invariant i54: (c != 4) ==> (c >= 0);\nloop invariant i55: (c == 4) ==> unknown() ==> c == 4;\nloop invariant i56: (c != 4) ==> !unknown() ==> c != 4;\nloop invariant i57: (c == 1) ==> !unknown() ==> c == 1;\nloop invariant i58: (c != 1) ==> unknown() ==> c != 1;\nloop invariant i59: (c >= 0) ==> !unknown() ==> c >= 0;\nloop invariant i60: (c != 4) ==> (c == 0 or c == 1);\nloop invariant i61: (c == 4) ==> (c == 4);\nloop invariant i62: (c < 4) ==> (c <= (c + 1));\nloop invariant i63: (c >= 4) ==> (c >= 1);\nloop invariant i64: unknown() ==> c < 4;\nloop invariant i65: !unknown() ==> c >= 4;\nloop invariant i66: c % 4 == c;\nloop invariant i67: c <= 4 + (unknown() ? 1 : 0);\nloop invariant i68: c == 0 || c == 4 || c == 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 36,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\n\nloop invariant i6: 0 <= c <= 100000;\nloop invariant i7: c >= 0;\nloop invariant i8: 0 <= c <= 5;\n\nloop invariant i10: c < 4 ==> c >= 0;\nloop invariant i11: c == 4 ==> c >= 0;\n\nloop invariant i13: c != 4 ==> c < 5;\nloop invariant i14: c < 5 ==> c >= 0;\n\nloop invariant i16: c >= 0 ==> c < 5;\n\nloop invariant i18: c == 4 ==> c == 4;\nloop invariant i19: c == 0 ==> c == 0;\nloop invariant i20: c >= 0 ==> c <= 4;\nloop invariant i21: c >= 0 ==> c != 4 || c == 0 ==> c <= 4;\nloop invariant i22: c >= 0 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i23: c >= 0 ==> c <= 4 ==> c <= 4;\n\nloop invariant i25: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i26: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4;\nloop invariant i27: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i28: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i29: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i30: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i31: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i32: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i33: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i34: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i35: c >= 0 ==> c <= 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c == 0 || c == 4 ==> c <= 4;\nloop invariant i36: c != 4 ==> c >= 0;\n\n\nloop invariant i39: c <= 4;\n\n\n\n\n\nloop invariant i45: c >= 0 && c <= 4;\n\n\n\n\n\n\n\n\nloop invariant i54: (c != 4) ==> (c >= 0);\n\n\n\n\n\n\nloop invariant i61: (c == 4) ==> (c == 4);\nloop invariant i62: (c < 4) ==> (c <= (c + 1));\nloop invariant i63: (c >= 4) ==> (c >= 1);\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 43,
        "success_count": 39,
        "failure_count": 4,
        "success_rate": 0.9069767441860465
    }
}