{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  while (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n - 1) / 2;\nloop invariant sum <= i * (i - 1) / 2;\nloop invariant sum <= n * (n + 1) / 2 - (n - i) * (n - i + 1) / 2;\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n - 1) / 2;\nloop invariant sum <= i * (i - 1) / 2;\nloop invariant sum <= n * (n + 1) / 2 - (n - i) * (n - i + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum + i * (i + 1) / 2 == sum + i;\nloop invariant sum >= 0;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant n >= i;\nloop invariant sum >= 0;\nloop invariant sum == i * (i - 1) / 2;\nloop invariant n >= 0;\nloop invariant i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum == i * (i - 1) / 2;\nloop invariant sum >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (i * (i - 1) / 2);\nloop invariant i >= 0;\nloop invariant n >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n - 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n - 1) / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= i;\nloop invariant sum <= n * (n - 1) / 2 + i;\nloop invariant sum <= n * (n - 1) / 2 + n;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum <= n * (n + 1) / 2 + 1;\nloop invariant sum <= (n + 1) * n / 2;\nloop invariant sum <= (n + 1) * n / 2 + 1;\nloop invariant sum <= (n + 1) * (n + 1) / 2;\nloop invariant sum <= (n + 1) * (n + 1) / 2 + 1;\nloop invariant sum <= n * (n + 1) / 2 + 1;\nloop invariant sum <= n * (n + 1) / 2 + n + 1;\nloop invariant sum <= n * (n + 1) / 2 + n;\nloop invariant sum <= n * (n + 1) / 2 + n - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - i;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - i;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n + 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (i * (i-1) / 2);\nloop invariant i = n ==> sum >= (i * (i-1) / 2);\nloop invariant i < n ==> sum < (i * (i-1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sum <= (1 + (i - 1) * i / 2);\nloop invariant sum = (1 + (i - 1) * i / 2);\nloop invariant n >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= (1 + (i - 1) * i / 2);\nloop invariant sum = (1 + (i - 1) * i / 2);\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sum <= i * (i + 1) / 2;\nloop invariant n >= 0;\nloop invariant sum >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum == i * (i + 1) / 2;\nloop invariant sum == (i + 1) * (i + 2) / 2 - (i + 1);\nloop invariant sum == (i + 2) * (i + 1) / 2 - (i + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sum <= n * (n - 1) / 2;\nloop invariant 0 <= i <= n;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n - 1) / 2;\nloop invariant sum == i * (i - 1) / 2;\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant n * (n - 1) / 2 >= 0;\nloop invariant i * (i - 1) / 2 >= 0;\nloop invariant n == 0 ==> sum == 0;\nloop invariant i == 0 ==> sum == 0;\nloop invariant sum == 0 ==> n == 0;\nloop invariant sum == 0 ==> i == 0;\nloop invariant i == n ==> sum == n * (n - 1) / 2;\nloop invariant i == 0 ==> sum == 0;\nloop invariant sum == n * (n - 1) / 2 ==> i == n;\nloop invariant sum == 0 ==> i == 0;\nloop invariant i == n ==> sum == n * (n - 1) / 2;\nloop invariant i == 0 ==> sum == 0;\nloop invariant sum == n * (n - 1) / 2 ==> i == n;\nloop invariant sum == 0 ==> i == 0;\nloop invariant i == n ==> sum == n * (n - 1) / 2;\nloop invariant i == 0 ==> sum == 0;\nloop invariant sum == n * (n - 1) / 2 ==> i == n;\nloop invariant sum == 0 ==> i == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum == (i * (i - 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum == (i * (i - 1)) / 2;\nloop invariant sum >= 0;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum <= (n * (n - 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n - 1) / 2);\nloop invariant i <= n;\nloop invariant sum <= i * (n - i) / 2;\nloop invariant sum >= (i - 1) * i / 2;\nloop invariant sum <= (n - i - 1) * i + (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sum <= ((n * (n + 1)) / 2);\nloop invariant i < n ==> sum >= 0;\nloop invariant i < n ==> sum <= ((n * (n + 1)) / 2);\nloop invariant i < n ==> sum == (i * (i + 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sum <= (n * (n - 1) / 2);\nloop invariant sum == (i * (i - 1) / 2);\nloop invariant 0 <= i <= n ==> sum == (i * (i - 1) / 2);\nloop invariant 0 <= sum <= (n * (n - 1) / 2) ==> sum == (i * (i - 1) / 2);\nloop invariant 0 <= i <= n ==> 0 <= sum <= (n * (n - 1) / 2);\nloop invariant 0 <= sum <= (n * (n - 1) / 2) ==> 0 <= i <= n;\nloop invariant 0 <= i <= n ==> i <= n;\nloop invariant i <= n ==> i >= 0;\nloop invariant 0 <= i <= n ==> i >= 0;\nloop invariant i >= 0 ==> 0 <= i <= n;\nloop invariant i >= 0 ==> i <= n;\nloop invariant i <= n ==> i >= 0;\nloop invariant i >= 0 ==> i <= n;\nloop invariant 0 <= sum <= (n * (n - 1) / 2);\nloop invariant i <= n ==> 0 <= sum <= (n * (n - 1) / 2);\nloop invariant i >= 0 ==> 0 <= sum <= (n * (n - 1) / 2);\nloop invariant sum == (i * (i - 1) / 2);\nloop invariant i <= n ==> sum == (i * (i - 1) / 2);\nloop invariant i >= 0 ==> sum == (i * (i - 1) / 2);\nloop invariant 0 <= sum <= (n * (n - 1) / 2) ==> sum == (i * (i - 1) / 2);\nloop invariant 0 <= i <= n ==> 0 <= sum <= (n * (n - 1) / 2) && sum == (i * (i - 1) / 2);\nloop invariant i <= n ==> 0 <= sum <= (n * (n - 1) / 2) && sum == (i * (i - 1) / 2);\nloop invariant i >= 0 ==> 0 <= sum <= (n * (n - 1) / 2) && sum == (i * (i - 1) / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n - 1) / 2;\nloop invariant sum <= i * (i - 1) / 2;\nloop invariant sum <= n * (n + 1) / 2 - (n - i) * (n - i + 1) / 2;\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n - 1) / 2;\nloop invariant sum <= i * (i - 1) / 2;\nloop invariant sum <= n * (n + 1) / 2 - (n - i) * (n - i + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= 0;\n\nloop invariant i4: sum <= i * (i - 1) / 2;\nloop invariant i5: sum <= n * (n + 1) / 2 - (n - i) * (n - i + 1) / 2;\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum + i * (i + 1) / 2 == sum + i;\nloop invariant sum >= 0;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: sum >= 0;\nloop invariant i4: i >= 0;\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant n >= i;\nloop invariant sum >= 0;\nloop invariant sum == i * (i - 1) / 2;\nloop invariant n >= 0;\nloop invariant i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: n >= i;\nloop invariant i2: sum >= 0;\nloop invariant i3: sum == i * (i - 1) / 2;\nloop invariant i4: n >= 0;\nloop invariant i5: i >= 0;\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum == i * (i - 1) / 2;\nloop invariant sum >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum == i * (i - 1) / 2;\nloop invariant i3: sum >= 0;\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (i * (i - 1) / 2);\nloop invariant i >= 0;\nloop invariant n >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n - 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= 0;\nloop invariant i3: sum <= (i * (i - 1) / 2);\nloop invariant i4: i >= 0;\nloop invariant i5: n >= 0;\nloop invariant i6: sum <= (n * (n - 1) / 2);\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n - 1) / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= i;\nloop invariant sum <= n * (n - 1) / 2 + i;\nloop invariant sum <= n * (n - 1) / 2 + n;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum <= n * (n + 1) / 2 + 1;\nloop invariant sum <= (n + 1) * n / 2;\nloop invariant sum <= (n + 1) * n / 2 + 1;\nloop invariant sum <= (n + 1) * (n + 1) / 2;\nloop invariant sum <= (n + 1) * (n + 1) / 2 + 1;\nloop invariant sum <= n * (n + 1) / 2 + 1;\nloop invariant sum <= n * (n + 1) / 2 + n + 1;\nloop invariant sum <= n * (n + 1) / 2 + n;\nloop invariant sum <= n * (n + 1) / 2 + n - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - i;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - i;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n + 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= 0;\n\nloop invariant i4: i <= n;\nloop invariant i5: i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (i * (i-1) / 2);\nloop invariant i = n ==> sum >= (i * (i-1) / 2);\nloop invariant i < n ==> sum < (i * (i-1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: sum >= 0;\nloop invariant i4: sum <= (i * (i-1) / 2);\n\n\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sum <= (1 + (i - 1) * i / 2);\nloop invariant sum = (1 + (i - 1) * i / 2);\nloop invariant n >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= (1 + (i - 1) * i / 2);\nloop invariant sum = (1 + (i - 1) * i / 2);\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\nloop invariant sum <= (1 + (n - 1) * n / 2);\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= sum <= (1 + (i - 1) * i / 2);\n\nloop invariant i4: n >= 0;\nloop invariant i5: sum >= 0;\nloop invariant i6: sum <= (1 + (n - 1) * n / 2);\nloop invariant i7: i <= n;\nloop invariant i8: i >= 0;\n\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sum <= i * (i + 1) / 2;\nloop invariant n >= 0;\nloop invariant sum >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant sum <= n * (n + 1) / 2;\nloop invariant sum == i * (i + 1) / 2;\nloop invariant sum == (i + 1) * (i + 2) / 2 - (i + 1);\nloop invariant sum == (i + 2) * (i + 1) / 2 - (i + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= sum <= i * (i + 1) / 2;\nloop invariant i3: n >= 0;\nloop invariant i4: sum >= 0;\nloop invariant i5: i >= 0;\nloop invariant i6: i <= n;\n\n\n\n\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sum <= n * (n - 1) / 2;\nloop invariant 0 <= i <= n;\nloop invariant i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= n * (n - 1) / 2;\nloop invariant sum == i * (i - 1) / 2;\nloop invariant n >= 0;\nloop invariant i >= 0;\nloop invariant n * (n - 1) / 2 >= 0;\nloop invariant i * (i - 1) / 2 >= 0;\nloop invariant n == 0 ==> sum == 0;\nloop invariant i == 0 ==> sum == 0;\nloop invariant sum == 0 ==> n == 0;\nloop invariant sum == 0 ==> i == 0;\nloop invariant i == n ==> sum == n * (n - 1) / 2;\nloop invariant i == 0 ==> sum == 0;\nloop invariant sum == n * (n - 1) / 2 ==> i == n;\nloop invariant sum == 0 ==> i == 0;\nloop invariant i == n ==> sum == n * (n - 1) / 2;\nloop invariant i == 0 ==> sum == 0;\nloop invariant sum == n * (n - 1) / 2 ==> i == n;\nloop invariant sum == 0 ==> i == 0;\nloop invariant i == n ==> sum == n * (n - 1) / 2;\nloop invariant i == 0 ==> sum == 0;\nloop invariant sum == n * (n - 1) / 2 ==> i == n;\nloop invariant sum == 0 ==> i == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\n\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: i <= n;\nloop invariant i4: sum >= 0;\nloop invariant i5: sum <= n * (n - 1) / 2;\nloop invariant i6: sum == i * (i - 1) / 2;\nloop invariant i7: n >= 0;\nloop invariant i8: i >= 0;\nloop invariant i9: n * (n - 1) / 2 >= 0;\nloop invariant i10: i * (i - 1) / 2 >= 0;\nloop invariant i11: n == 0 ==> sum == 0;\nloop invariant i12: i == 0 ==> sum == 0;\n\n\nloop invariant i15: i == n ==> sum == n * (n - 1) / 2;\n\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum == (i * (i - 1)) / 2;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant sum == (i * (i - 1)) / 2 ==> sum >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum == (i * (i - 1)) / 2;\nloop invariant i3: sum >= 0;\n\nloop invariant i5: sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant i6: sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant i7: sum == (i * (i - 1)) / 2 ==> sum >= 0;\n\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum == (i * (i - 1)) / 2;\nloop invariant sum >= 0;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant i >= 0;\nloop invariant sum <= (n * (n - 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum == (i * (i - 1)) / 2;\nloop invariant i3: sum >= 0;\nloop invariant i4: n >= 0;\nloop invariant i5: i <= n;\nloop invariant i6: i >= 0;\n\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n - 1) / 2);\nloop invariant i <= n;\nloop invariant sum <= i * (n - i) / 2;\nloop invariant sum >= (i - 1) * i / 2;\nloop invariant sum <= (n - i - 1) * i + (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\nloop invariant sum >= (n - i - 1) * (n - i) / 2;\nloop invariant sum <= (n - i) * (n - i - 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= 0;\n\nloop invariant i4: i <= n;\n\nloop invariant i6: sum >= (i - 1) * i / 2;\n\n\n\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sum <= ((n * (n + 1)) / 2);\nloop invariant i < n ==> sum >= 0;\nloop invariant i < n ==> sum <= ((n * (n + 1)) / 2);\nloop invariant i < n ==> sum == (i * (i + 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: i < n ==> sum >= 0;\n\n\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sum <= (n * (n - 1) / 2);\nloop invariant sum == (i * (i - 1) / 2);\nloop invariant 0 <= i <= n ==> sum == (i * (i - 1) / 2);\nloop invariant 0 <= sum <= (n * (n - 1) / 2) ==> sum == (i * (i - 1) / 2);\nloop invariant 0 <= i <= n ==> 0 <= sum <= (n * (n - 1) / 2);\nloop invariant 0 <= sum <= (n * (n - 1) / 2) ==> 0 <= i <= n;\nloop invariant 0 <= i <= n ==> i <= n;\nloop invariant i <= n ==> i >= 0;\nloop invariant 0 <= i <= n ==> i >= 0;\nloop invariant i >= 0 ==> 0 <= i <= n;\nloop invariant i >= 0 ==> i <= n;\nloop invariant i <= n ==> i >= 0;\nloop invariant i >= 0 ==> i <= n;\nloop invariant 0 <= sum <= (n * (n - 1) / 2);\nloop invariant i <= n ==> 0 <= sum <= (n * (n - 1) / 2);\nloop invariant i >= 0 ==> 0 <= sum <= (n * (n - 1) / 2);\nloop invariant sum == (i * (i - 1) / 2);\nloop invariant i <= n ==> sum == (i * (i - 1) / 2);\nloop invariant i >= 0 ==> sum == (i * (i - 1) / 2);\nloop invariant 0 <= sum <= (n * (n - 1) / 2) ==> sum == (i * (i - 1) / 2);\nloop invariant 0 <= i <= n ==> 0 <= sum <= (n * (n - 1) / 2) && sum == (i * (i - 1) / 2);\nloop invariant i <= n ==> 0 <= sum <= (n * (n - 1) / 2) && sum == (i * (i - 1) / 2);\nloop invariant i >= 0 ==> 0 <= sum <= (n * (n - 1) / 2) && sum == (i * (i - 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: sum == (i * (i - 1) / 2);\nloop invariant i4: 0 <= i <= n ==> sum == (i * (i - 1) / 2);\nloop invariant i5: 0 <= sum <= (n * (n - 1) / 2) ==> sum == (i * (i - 1) / 2);\n\nloop invariant i7: 0 <= sum <= (n * (n - 1) / 2) ==> 0 <= i <= n;\nloop invariant i8: 0 <= i <= n ==> i <= n;\nloop invariant i9: i <= n ==> i >= 0;\nloop invariant i10: 0 <= i <= n ==> i >= 0;\nloop invariant i11: i >= 0 ==> 0 <= i <= n;\nloop invariant i12: i >= 0 ==> i <= n;\n\n\nloop invariant i15: i <= n ==> sum == (i * (i - 1) / 2);\nloop invariant i16: i >= 0 ==> sum == (i * (i - 1) / 2);\n\n\n\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 61: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= 0;\nloop invariant i3: sum <= n * (n - 1) / 2;\nloop invariant i4: sum <= i * (i - 1) / 2;\nloop invariant i5: sum <= n * (n + 1) / 2 - (n - i) * (n - i + 1) / 2;\nloop invariant i6: sum + i * (i + 1) / 2 == sum + i;\nloop invariant i7: i >= 0;\nloop invariant i8: n >= i;\nloop invariant i9: sum == i * (i - 1) / 2;\nloop invariant i10: n >= 0;\nloop invariant i11: sum <= (i * (i - 1) / 2);\nloop invariant i12: sum <= (n * (n - 1) / 2);\nloop invariant i13: i <= n;\nloop invariant i14: sum >= i;\nloop invariant i15: sum <= n * (n - 1) / 2 + i;\nloop invariant i16: sum <= n * (n - 1) / 2 + n;\nloop invariant i17: sum <= n * (n + 1) / 2;\nloop invariant i18: sum <= n * (n + 1) / 2 + 1;\nloop invariant i19: sum <= (n + 1) * n / 2;\nloop invariant i20: sum <= (n + 1) * n / 2 + 1;\nloop invariant i21: sum <= (n + 1) * (n + 1) / 2;\nloop invariant i22: sum <= (n + 1) * (n + 1) / 2 + 1;\nloop invariant i23: sum <= n * (n + 1) / 2 + n + 1;\nloop invariant i24: sum <= n * (n + 1) / 2 + n;\nloop invariant i25: sum <= n * (n + 1) / 2 + n - 1;\nloop invariant i26: sum <= n * (n + 1) / 2 + n - i;\nloop invariant i27: sum <= n * (n + 1) / 2 + n - 1 - i;\nloop invariant i28: sum <= n * (n + 1) / 2 + n - 1 - n + 1;\nloop invariant i29: sum <= n * (n + 1) / 2 + n - 1 - n;\nloop invariant i30: sum <= n * (n + 1) / 2 + n - 1 - n - 1;\nloop invariant i31: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1;\nloop invariant i32: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1;\nloop invariant i33: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1;\nloop invariant i34: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1;\nloop invariant i35: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant i36: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant i37: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant i38: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant i39: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant i40: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant i41: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant i42: sum <= n * (n + 1) / 2 + n - 1 - n - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\nloop invariant i43: sum <= (i * (i-1) / 2);\nloop invariant i44: i = n ==> sum >= (i * (i-1) / 2);\nloop invariant i45: i < n ==> sum < (i * (i-1) / 2);\nloop invariant i46: 0 <= sum <= (1 + (i - 1) * i / 2);\nloop invariant i47: sum = (1 + (i - 1) * i / 2);\nloop invariant i48: sum <= (1 + (n - 1) * n / 2);\nloop invariant i49: sum >= (1 + (i - 1) * i / 2);\nloop invariant i50: 0 <= sum <= i * (i + 1) / 2;\nloop invariant i51: sum == i * (i + 1) / 2;\nloop invariant i52: sum == (i + 1) * (i + 2) / 2 - (i + 1);\nloop invariant i53: sum == (i + 2) * (i + 1) / 2 - (i + 1);\nloop invariant i54: 0 <= sum <= n * (n - 1) / 2;\nloop invariant i55: n * (n - 1) / 2 >= 0;\nloop invariant i56: i * (i - 1) / 2 >= 0;\nloop invariant i57: n == 0 ==> sum == 0;\nloop invariant i58: i == 0 ==> sum == 0;\nloop invariant i59: sum == 0 ==> n == 0;\nloop invariant i60: sum == 0 ==> i == 0;\nloop invariant i61: i == n ==> sum == n * (n - 1) / 2;\nloop invariant i62: sum == n * (n - 1) / 2 ==> i == n;\nloop invariant i63: sum == (i * (i - 1)) / 2;\nloop invariant i64: sum <= (n * (n - 1)) / 2;\nloop invariant i65: sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant i66: sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant i67: sum == (i * (i - 1)) / 2 ==> sum >= 0;\nloop invariant i68: sum == (i * (i - 1)) / 2 ==> sum <= (n * (n - 1)) / 2;\nloop invariant i69: sum <= i * (n - i) / 2;\nloop invariant i70: sum >= (i - 1) * i / 2;\nloop invariant i71: sum <= (n - i - 1) * i + (n - i) * (n - i - 1) / 2;\nloop invariant i72: sum >= (n - i - 1) * (n - i) / 2;\nloop invariant i73: sum <= (n - i) * (n - i - 1) / 2;\nloop invariant i74: 0 <= sum <= ((n * (n + 1)) / 2);\nloop invariant i75: i < n ==> sum >= 0;\nloop invariant i76: i < n ==> sum <= ((n * (n + 1)) / 2);\nloop invariant i77: i < n ==> sum == (i * (i + 1)) / 2;\nloop invariant i78: 0 <= sum <= (n * (n - 1) / 2);\nloop invariant i79: sum == (i * (i - 1) / 2);\nloop invariant i80: 0 <= i <= n ==> sum == (i * (i - 1) / 2);\nloop invariant i81: 0 <= sum <= (n * (n - 1) / 2) ==> sum == (i * (i - 1) / 2);\nloop invariant i82: 0 <= i <= n ==> 0 <= sum <= (n * (n - 1) / 2);\nloop invariant i83: 0 <= sum <= (n * (n - 1) / 2) ==> 0 <= i <= n;\nloop invariant i84: 0 <= i <= n ==> i <= n;\nloop invariant i85: i <= n ==> i >= 0;\nloop invariant i86: 0 <= i <= n ==> i >= 0;\nloop invariant i87: i >= 0 ==> 0 <= i <= n;\nloop invariant i88: i >= 0 ==> i <= n;\nloop invariant i89: i <= n ==> 0 <= sum <= (n * (n - 1) / 2);\nloop invariant i90: i >= 0 ==> 0 <= sum <= (n * (n - 1) / 2);\nloop invariant i91: i <= n ==> sum == (i * (i - 1) / 2);\nloop invariant i92: i >= 0 ==> sum == (i * (i - 1) / 2);\nloop invariant i93: 0 <= i <= n ==> 0 <= sum <= (n * (n - 1) / 2) && sum == (i * (i - 1) / 2);\nloop invariant i94: i <= n ==> 0 <= sum <= (n * (n - 1) / 2) && sum == (i * (i - 1) / 2);\nloop invariant i95: i >= 0 ==> 0 <= sum <= (n * (n - 1) / 2) && sum == (i * (i - 1) / 2);\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 39,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= 0;\n\n\n\n\nloop invariant i7: i >= 0;\nloop invariant i8: n >= i;\n\nloop invariant i10: n >= 0;\n\n\nloop invariant i13: i <= n;\n\n\n\n\n\n\n\n\n\nloop invariant i23: sum <= n * (n + 1) / 2 + n + 1;\nloop invariant i24: sum <= n * (n + 1) / 2 + n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: 0 <= sum <= (1 + (i - 1) * i / 2);\n\n\n\nloop invariant i50: 0 <= sum <= i * (i + 1) / 2;\n\n\n\n\nloop invariant i55: n * (n - 1) / 2 >= 0;\nloop invariant i56: i * (i - 1) / 2 >= 0;\nloop invariant i57: n == 0 ==> sum == 0;\nloop invariant i58: i == 0 ==> sum == 0;\n\n\n\n\n\n\nloop invariant i65: sum == (i * (i - 1)) / 2 ==> i <= n;\nloop invariant i66: sum == (i * (i - 1)) / 2 ==> i >= 0;\nloop invariant i67: sum == (i * (i - 1)) / 2 ==> sum >= 0;\n\n\nloop invariant i70: sum >= (i - 1) * i / 2;\n\n\n\n\nloop invariant i75: i < n ==> sum >= 0;\n\n\n\n\n\n\n\nloop invariant i83: 0 <= sum <= (n * (n - 1) / 2) ==> 0 <= i <= n;\nloop invariant i84: 0 <= i <= n ==> i <= n;\nloop invariant i85: i <= n ==> i >= 0;\nloop invariant i86: 0 <= i <= n ==> i >= 0;\nloop invariant i87: i >= 0 ==> 0 <= i <= n;\nloop invariant i88: i >= 0 ==> i <= n;\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c"
        ],
        "skipped": [],
        "total": 129,
        "success_count": 113,
        "failure_count": 16,
        "success_rate": 0.875968992248062
    }
}