{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/44.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n <= 100000;\nloop invariant c >= 0;\nloop invariant n >= 0;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 1 <= n;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant n >= -1;\nloop invariant c != n ==> (c > n ==> c <= n + 1) ==> c <= n + 1;\nloop invariant c != n ==> (c == n ==> c <= n + 1) ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if ( unknown() ) then (c <= n+1) else (c == n);\nloop invariant if (!unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n) ==> (unknown() ==> (c <= n));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (c == n));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;loop invariant (c < n) ==> (c == 1);loop invariant (n > 0) ==> (c >= -1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant 0 <= n;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant c <= n + 1 ==> c - 1 <= n;\nloop invariant n <= c ==> c <= n + 1;\nloop invariant c <= n ==> c <= n;\nloop invariant c >= n ==> c >= n;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c - 1 <= n ==> n >= 0;\nloop invariant n >= 0 ==> c - 1 <= n;\nloop invariant c <= n + 1 ==> n >= 0;\nloop invariant n >= 0 ==> c <= n + 1;\nloop invariant c - 1 <= n ==> c >= 0;\nloop invariant c >= 0 ==> c - 1 <= n;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant n >= 0 ==> c >= 0;\nloop invariant c >= 0 ==> n >= 0;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c <= n + 1 ==> n >= 0;\nloop invariant n >= 0 ==> c <= n + 1;\nloop invariant c - 1 <= n ==> c >= 0;\nloop invariant c >= 0 ==> c - 1 <= n;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant n >= 0 ==> c >= 0;\nloop invariant c >= 0 ==> n >= 0;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c <= n + 1 ==> n >= 0;\nloop invariant n >= 0 ==> c <= n + 1;\nloop invariant c - 1 <= n ==> c >= 0;\nloop invariant c >= 0 ==> c - 1 <= n;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant n >= 0 ==> c >= 0;\nloop invariant c >= 0 ==> n >= 0;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c <= n + 1 ==> n >= 0;\nloop invariant n >= 0 ==> c <= n + 1;\nloop invariant c - 1 <= n ==> c >= 0;\nloop invariant c >= 0 ==> c - 1 <= n;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant n >= 0 ==> c >= 0;\nloop invariant c >= 0 ==> n >= 0;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c <= n + 1 ==> n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant n > 0;\nloop invariant c >= 0;\nloop invariant n > c;\nloop invariant c != n ==> (c < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant c <= n ==> c < n + 1;\nloop invariant c < n ==> c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 1 <= n;\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == 1) ==> (c == n);\nloop invariant (c <= n) ==> (c >= 1);\nloop invariant (c <= n) ==> (c < n);\nloop invariant (c <= n) ==> (c != n);\nloop invariant (unknown()) ==> (c > n);\nloop invariant (unknown() == 0) ==> (c == n);\nloop invariant (unknown() == 0) ==> (c == 1);\nloop invariant (unknown() == 0) ==> (c >= 1);\nloop invariant (unknown() == 0) ==> (c < n);\nloop invariant (unknown() == 0) ==> (c != n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (n <= -1 ==> c != n);\nloop invariant (n > -1 ==> c <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 1 <= n <= 100000;\nloop invariant c >= (1 + (n - 1) * n / 2);\nloop invariant c <= (1 + (n - 1) * n / 2) + n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant (c == 1) ==> (c <= n);\nloop invariant (c != 1) ==> (c > n);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n <= 100000;\nloop invariant c >= 0;\nloop invariant n >= 0;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\nloop invariant c <= n;\nloop invariant c <= 100000;\nloop invariant n <= 100000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c >= 0;\nloop invariant i4: n >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 1 <= n;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant n >= -1;\nloop invariant c != n ==> (c > n ==> c <= n + 1) ==> c <= n + 1;\nloop invariant c != n ==> (c == n ==> c <= n + 1) ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant n <= -1 ==> c != n ==> c <= n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 1 <= n;\nloop invariant i3: c <= n;\n\nloop invariant i5: n >= -1;\nloop invariant i6: c != n ==> (c > n ==> c <= n + 1) ==> c <= n + 1;\nloop invariant i7: c != n ==> (c == n ==> c <= n + 1) ==> c <= n + 1;\nloop invariant i8: n <= -1 ==> c != n ==> c <= n + 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if ( unknown() ) then (c <= n+1) else (c == n);\nloop invariant if (!unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant if (!unknown() && unknown()) then (c == 1) else (c != 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n) ==> (unknown() ==> (c <= n));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (c == n));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant (c <= n) ==> (unknown() ==> (n >= 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;loop invariant (c < n) ==> (c == 1);loop invariant (n > 0) ==> (c >= -1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;loop invariant (c < n) ==> (c == 1);loop invariant (n > 0) ==> (c >= -1);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant 0 <= n;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n + 1;\nloop invariant c != n ==> c == 1;\nloop invariant n == -1 ==> c != n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c != 1;\nloop invariant c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: 0 <= n;\nloop invariant i3: c <= n + 1;\n\nloop invariant i5: n == -1 ==> c != n;\nloop invariant i6: c == n ==> c == 1;\nloop invariant i7: c != n ==> c != 1;\nloop invariant i8: c <= n;\nloop invariant i9: c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant c <= n + 1 ==> c - 1 <= n;\nloop invariant n <= c ==> c <= n + 1;\nloop invariant c <= n ==> c <= n;\nloop invariant c >= n ==> c >= n;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c - 1 <= n ==> n >= 0;\nloop invariant n >= 0 ==> c - 1 <= n;\nloop invariant c <= n + 1 ==> n >= 0;\nloop invariant n >= 0 ==> c <= n + 1;\nloop invariant c - 1 <= n ==> c >= 0;\nloop invariant c >= 0 ==> c - 1 <= n;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant n >= 0 ==> c >= 0;\nloop invariant c >= 0 ==> n >= 0;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c <= n + 1 ==> n >= 0;\nloop invariant n >= 0 ==> c <= n + 1;\nloop invariant c - 1 <= n ==> c >= 0;\nloop invariant c >= 0 ==> c - 1 <= n;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant n >= 0 ==> c >= 0;\nloop invariant c >= 0 ==> n >= 0;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c <= n + 1 ==> n >= 0;\nloop invariant n >= 0 ==> c <= n + 1;\nloop invariant c - 1 <= n ==> c >= 0;\nloop invariant c >= 0 ==> c - 1 <= n;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant n >= 0 ==> c >= 0;\nloop invariant c >= 0 ==> n >= 0;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c <= n + 1 ==> n >= 0;\nloop invariant n >= 0 ==> c <= n + 1;\nloop invariant c - 1 <= n ==> c >= 0;\nloop invariant c >= 0 ==> c - 1 <= n;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant n >= 0 ==> c >= 0;\nloop invariant c >= 0 ==> n >= 0;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c <= n + 1 ==> n >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c <= n + 1 ==> c - 1 <= n;\n\nloop invariant i4: c <= n ==> c <= n;\nloop invariant i5: c >= n ==> c >= n;\nloop invariant i6: c <= n + 1 ==> c >= 0;\n\nloop invariant i8: c - 1 <= n ==> n >= 0;\n\nloop invariant i10: c <= n + 1 ==> n >= 0;\n\nloop invariant i12: c - 1 <= n ==> c >= 0;\n\nloop invariant i14: n >= 0 ==> c >= 0;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant n > 0;\nloop invariant c >= 0;\nloop invariant n > c;\nloop invariant c != n ==> (c < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: n > 0;\nloop invariant i2: c >= 0;\nloop invariant i3: n > c;\nloop invariant i4: c != n ==> (c < n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant c <= n ==> c < n + 1;\nloop invariant c < n ==> c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c <= n ==> c < n + 1;\nloop invariant i3: c < n ==> c <= n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 1 <= n;\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c == 1) ==> (c == n);\nloop invariant (c <= n) ==> (c >= 1);\nloop invariant (c <= n) ==> (c < n);\nloop invariant (c <= n) ==> (c != n);\nloop invariant (unknown()) ==> (c > n);\nloop invariant (unknown() == 0) ==> (c == n);\nloop invariant (unknown() == 0) ==> (c == 1);\nloop invariant (unknown() == 0) ==> (c >= 1);\nloop invariant (unknown() == 0) ==> (c < n);\nloop invariant (unknown() == 0) ==> (c != n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 1 <= n;\nloop invariant i3: (c == n) ==> (c == 1);\nloop invariant i4: (c == 1) ==> (c == n);\n\nloop invariant i6: (c <= n) ==> (c < n);\nloop invariant i7: (c <= n) ==> (c != n);\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\nloop invariant c == n || (c == 1 || c == n && c == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (n <= -1 ==> c != n);\nloop invariant (n > -1 ==> c <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: (n <= -1 ==> c != n);\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 1 <= n <= 100000;\nloop invariant c >= (1 + (n - 1) * n / 2);\nloop invariant c <= (1 + (n - 1) * n / 2) + n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n + 1;\nloop invariant (c == 1) ==> (c <= n);\nloop invariant (c != 1) ==> (c > n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 32: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: 0 <= n <= 100000;\nloop invariant i3: c >= 0;\nloop invariant i4: n >= 0;\nloop invariant i5: c <= n;\nloop invariant i6: c <= 100000;\nloop invariant i7: n <= 100000;\nloop invariant i8: 1 <= c <= n;\nloop invariant i9: 1 <= n;\nloop invariant i10: c >= 1;\nloop invariant i11: n >= -1;\nloop invariant i12: c != n ==> (c > n ==> c <= n + 1) ==> c <= n + 1;\nloop invariant i13: c != n ==> (c == n ==> c <= n + 1) ==> c <= n + 1;\nloop invariant i14: n <= -1 ==> c != n ==> c <= n + 1;\nloop invariant i15: if ( unknown() ) then (c <= n+1) else (c == n);\nloop invariant i16: if (!unknown()) then (c == 1) else (c != 1);\nloop invariant i17: if (unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant i18: if (unknown() && unknown()) then (c <= n+1) else (c == n);\nloop invariant i19: if (!unknown() && !unknown()) then (c == 1) else (c != 1);\nloop invariant i20: if (!unknown() && unknown()) then (c == 1) else (c != 1);\nloop invariant i21: if (unknown() && !unknown()) then (c <= n+1) else (c == n);\nloop invariant i22: (c <= n) ==> (unknown() ==> (c <= n));\nloop invariant i23: (c <= n) ==> ((!(unknown())) ==> (c == n));\nloop invariant i24: (c <= n) ==> (unknown() ==> (n >= 0));\nloop invariant i25: (c <= n) ==> ((!(unknown())) ==> (n >= -1));\nloop invariant i26: (c <= n) ==> (unknown() ==> (n <= 99999));\nloop invariant i27: (c <= n) ==> ((!(unknown())) ==> (n <= -1));\nloop invariant i28: 0 <= c <= n;loop invariant (c < n) ==> (c == 1);loop invariant (n > 0) ==> (c >= -1);\nloop invariant i29: 0 <= c;\nloop invariant i30: 0 <= n;\nloop invariant i31: c <= n + 1;\nloop invariant i32: c != n ==> c == 1;\nloop invariant i33: n == -1 ==> c != n;\nloop invariant i34: c == n ==> c == 1;\nloop invariant i35: c != n ==> c != 1;\nloop invariant i36: 0 <= c <= n + 1;\nloop invariant i37: c <= n + 1 ==> c - 1 <= n;\nloop invariant i38: n <= c ==> c <= n + 1;\nloop invariant i39: c <= n ==> c <= n;\nloop invariant i40: c >= n ==> c >= n;\nloop invariant i41: c <= n + 1 ==> c >= 0;\nloop invariant i42: c >= 0 ==> c <= n + 1;\nloop invariant i43: c - 1 <= n ==> n >= 0;\nloop invariant i44: n >= 0 ==> c - 1 <= n;\nloop invariant i45: c <= n + 1 ==> n >= 0;\nloop invariant i46: n >= 0 ==> c <= n + 1;\nloop invariant i47: c - 1 <= n ==> c >= 0;\nloop invariant i48: c >= 0 ==> c - 1 <= n;\nloop invariant i49: n >= 0 ==> c >= 0;\nloop invariant i50: c >= 0 ==> n >= 0;\nloop invariant i51: n > 0;\nloop invariant i52: n > c;\nloop invariant i53: c != n ==> (c < n);\nloop invariant i54: c <= n ==> c < n + 1;\nloop invariant i55: c < n ==> c <= n;\nloop invariant i56: (c == n) ==> (c == 1);\nloop invariant i57: (c == 1) ==> (c == n);\nloop invariant i58: (c <= n) ==> (c >= 1);\nloop invariant i59: (c <= n) ==> (c < n);\nloop invariant i60: (c <= n) ==> (c != n);\nloop invariant i61: (unknown()) ==> (c > n);\nloop invariant i62: (unknown() == 0) ==> (c == n);\nloop invariant i63: (unknown() == 0) ==> (c == 1);\nloop invariant i64: (unknown() == 0) ==> (c >= 1);\nloop invariant i65: (unknown() == 0) ==> (c < n);\nloop invariant i66: (unknown() == 0) ==> (c != n);\nloop invariant i67: c == n || (c == 1 || c == n && c == 1);\nloop invariant i68: (n <= -1 ==> c != n);\nloop invariant i69: (n > -1 ==> c <= n);\nloop invariant i70: 1 <= n <= 100000;\nloop invariant i71: c >= (1 + (n - 1) * n / 2);\nloop invariant i72: c <= (1 + (n - 1) * n / 2) + n;\nloop invariant i73: (c == 1) ==> (c <= n);\nloop invariant i74: (c != 1) ==> (c > n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 23,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\n\nloop invariant i3: c >= 0;\nloop invariant i4: n >= 0;\nloop invariant i5: c <= n;\nloop invariant i6: c <= 100000;\n\n\nloop invariant i9: 1 <= n;\n\nloop invariant i11: n >= -1;\nloop invariant i12: c != n ==> (c > n ==> c <= n + 1) ==> c <= n + 1;\nloop invariant i13: c != n ==> (c == n ==> c <= n + 1) ==> c <= n + 1;\nloop invariant i14: n <= -1 ==> c != n ==> c <= n + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i28: 0 <= c <= n;loop invariant (c < n) ==> (c == 1);loop invariant (n > 0) ==> (c >= -1);\nloop invariant i29: 0 <= c;\nloop invariant i30: 0 <= n;\nloop invariant i31: c <= n + 1;\nloop invariant i32: c != n ==> c == 1;\nloop invariant i33: n == -1 ==> c != n;\nloop invariant i34: c == n ==> c == 1;\nloop invariant i35: c != n ==> c != 1;\nloop invariant i36: 0 <= c <= n + 1;\nloop invariant i37: c <= n + 1 ==> c - 1 <= n;\nloop invariant i38: n <= c ==> c <= n + 1;\nloop invariant i39: c <= n ==> c <= n;\nloop invariant i40: c >= n ==> c >= n;\nloop invariant i41: c <= n + 1 ==> c >= 0;\nloop invariant i42: c >= 0 ==> c <= n + 1;\nloop invariant i43: c - 1 <= n ==> n >= 0;\nloop invariant i44: n >= 0 ==> c - 1 <= n;\nloop invariant i45: c <= n + 1 ==> n >= 0;\nloop invariant i46: n >= 0 ==> c <= n + 1;\nloop invariant i47: c - 1 <= n ==> c >= 0;\nloop invariant i48: c >= 0 ==> c - 1 <= n;\nloop invariant i49: n >= 0 ==> c >= 0;\nloop invariant i50: c >= 0 ==> n >= 0;\nloop invariant i51: n > 0;\nloop invariant i52: n > c;\nloop invariant i53: c != n ==> (c < n);\nloop invariant i54: c <= n ==> c < n + 1;\nloop invariant i55: c < n ==> c <= n;\nloop invariant i56: (c == n) ==> (c == 1);\nloop invariant i57: (c == 1) ==> (c == n);\nloop invariant i58: (c <= n) ==> (c >= 1);\nloop invariant i59: (c <= n) ==> (c < n);\nloop invariant i60: (c <= n) ==> (c != n);\n\n\n\n\n\n\nloop invariant i67: c == n || (c == 1 || c == n && c == 1);\nloop invariant i68: (n <= -1 ==> c != n);\nloop invariant i69: (n > -1 ==> c <= n);\nloop invariant i70: 1 <= n <= 100000;\nloop invariant i71: c >= (1 + (n - 1) * n / 2);\nloop invariant i72: c <= (1 + (n - 1) * n / 2) + n;\nloop invariant i73: (c == 1) ==> (c <= n);\nloop invariant i74: (c != 1) ==> (c > n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 36,
        "success_count": 32,
        "failure_count": 4,
        "success_rate": 0.8888888888888888
    }
}