{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    while (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a == 2*i + (i*(i-1))%2;\nloop invariant b == i + (i*(i-1))%2;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 3*i;\nloop invariant b <= 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant i < n ==> a + b == 3*i;\nloop invariant i == n ==> a + b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant a <= 3*n;\nloop invariant b >= 0;\nloop invariant b <= 3*n;\nloop invariant (a + b) == (3*n);\nloop invariant (if unknown_int() then a + 1 else a) >= 0;\nloop invariant (if unknown_int() then a + 1 else a) <= 3*n;\nloop invariant (if unknown_int() then a + 2 else a) >= 0;\nloop invariant (if unknown_int() then a + 2 else a) <= 3*n;\nloop invariant (if unknown_int() then b + 1 else b) >= 0;\nloop invariant (if unknown_int() then b + 1 else b) <= 3*n;\nloop invariant (if unknown_int() then b + 2 else b) >= 0;\nloop invariant (if unknown_int() then b + 2 else b) <= 3*n;\nloop invariant (if unknown_int() then i + 1 else i) == n;\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant a <= 3*n;\nloop invariant b >= 0;\nloop invariant b <= 3*n;\nloop invariant (a + b) == (3*n);\nloop invariant (if unknown_int() then a + 1 else a) >= 0;\nloop invariant (if unknown_int() then a + 1 else a) <= 3*n;\nloop invariant (if unknown_int() then a + 2 else a) >= 0;\nloop invariant (if unknown_int() then a + 2 else a) <= 3*n;\nloop invariant (if unknown_int() then b + 1 else b) >= 0;\nloop invariant (if unknown_int() then b + 1 else b) <= 3*n;\nloop invariant (if unknown_int() then b + 2 else b) >= 0;\nloop invariant (if unknown_int() then b + 2 else b) <= 3*n;\nloop invariant (if unknown_int() then i + 1 else i) == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant a + b == 3 * i;\nloop invariant (i < n ==> unknown_int());\nloop invariant (i < n ==> (a + b == 3 * i) && (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i < n));\nloop invariant (i == n ==> a + b == 3 * i);\nloop invariant (i == n ==> (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\nloop invariant (i == n ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\nloop invariant (i == n ==> (unknown_int() ==> a + b == 3 * i) && (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b == 2*i;\nloop invariant a + b <= 2*n;\nloop invariant a + b >= 0;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b >= 3*n ==> i == n;\nloop invariant a + b <= 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*i;\nloop invariant a + b >= 3*n ==> a + b >= 3*i;\nloop invariant a + b <= 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a == 3*i - b;\nloop invariant a + b >= 3*n ==> a >= 3*i - b;\nloop invariant a + b <= 3*n ==> a <= 3*i - b;\nloop invariant a + b == 3*n ==> b == 3*i - a;\nloop invariant a + b >= 3*n ==> b >= 3*i - a;\nloop invariant a + b <= 3*n ==> b <= 3*i - a;\nloop invariant a + b == 3*n ==> a == 3*n - b;\nloop invariant a + b >= 3*n ==> a >= 3*n - b;\nloop invariant a + b <= 3*n ==> a <= 3*n - b;\nloop invariant a + b == 3*n ==> b == 3*n - a;\nloop invariant a + b >= 3*n ==> b >= 3*n - a;\nloop invariant a + b <= 3*n ==> b <= 3*n - a;\nloop invariant a + b == 3*n ==> a == 3*n - 3*i;\nloop invariant a + b >= 3*n ==> a >= 3*n - 3*i;\nloop invariant a + b <= 3*n ==> a <= 3*n - 3*i;\nloop invariant a + b == 3*n ==> b == 3*n - 3*i;\nloop invariant a + b >= 3*n ==> b >= 3*n - 3*i;\nloop invariant a + b <= 3*n ==> b <= 3*n - 3*i;\nloop invariant a + b == 3*n ==> a == 3*i - b;\nloop invariant a + b >= 3*n ==> a >= 3*i - b;\nloop invariant a + b <= 3*n ==> a <= 3*i - b;\nloop invariant a + b == 3*n ==> b == 3*i - a;\nloop invariant a + b >= 3*n ==> b >= 3*i - a;\nloop invariant a + b <= 3*n ==> b <= 3*i - a;\nloop invariant a + b == 3*n ==> a == 3*n - b;\nloop invariant a + b >= 3*n ==> a >= 3*n - b;\nloop invariant a + b <= 3*n ==> a <= 3*n - b;\nloop invariant a + b == 3*n ==> b == 3*n - a;\nloop invariant a + b >= 3*n ==> b >= 3*n - a;\nloop invariant a + b <= 3*n ==> b <= 3*n - a;\nloop invariant a + b == 3*n ==> a == 3*n - 3*i;\nloop invariant a + b >= 3*n ==> a >= 3*n - 3*i;\nloop invariant a + b <= 3*n ==> a <= 3*n - 3*i;\nloop invariant a + b == 3*n ==> b == 3*n - 3*i;\nloop invariant a + b >= 3*n ==> b >= 3*n - 3*i;\nloop invariant a + b <= 3*n ==> b <= 3*n - 3*i;\nloop invariant a + b == 3*n ==> a == 3*i - b;\nloop invariant a + b >= 3*n ==> a >= 3*i - b;\nloop invariant a + b <= 3*n ==> a <= 3*i - b;\nloop invariant a + b == 3*n ==> b == 3*i - a;\nloop invariant a + b >= 3*n ==> b >= 3*i - a;\nloop invariant a + b <= 3*n ==> b <= 3*i - a;\nloop invariant a + b == 3*n ==> a == 3*n - b;\nloop invariant a + b >= 3*n ==> a >= 3*n - b;\nloop invariant a + b <= 3*n ==> a <= 3*n - b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n + 1;\nloop invariant 0 <= b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= n;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant a + b == 3*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3 * n;\nloop invariant 0 <= b <= 2 * n;\nloop invariant a + b >= 3 * i;\nloop invariant (i < n) ==> (a + b == 3 * i);\nloop invariant (i == n) ==> (a + b == 3 * n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b <= 3 * n;\nloop invariant a <= n;\nloop invariant b <= n;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= 2*i;\nloop invariant a + b == 3*i ==> a - b <= 2*i;\nloop invariant a + b == 3*i ==> b - a <= 2*i;\nloop invariant a - b <= 2*i ==> a + b == 3*i;\nloop invariant b - a <= 2*i ==> a + b == 3*i;\nloop invariant a - b <= 2*i ==> a + b == 3*i ==> a - b <= 2*i;\nloop invariant b - a <= 2*i ==> a + b == 3*i ==> b - a <= 2*i;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant a == 2*i + (i*(i-1))%2;\nloop invariant b == i + (i*(i-1))%2;\nloop invariant a >= i;\nloop invariant b >= i;\nloop invariant a <= 3*i;\nloop invariant b <= 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n\n\nloop invariant i7: a >= i;\nloop invariant i8: b >= i;\nloop invariant i9: a <= 3*i;\nloop invariant i10: b <= 3*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\nloop invariant i < n ==> a + b == 3*i;\nloop invariant i == n ==> a + b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: i < n ==> a + b == 3*i;\nloop invariant i6: i == n ==> a + b == 3*n;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant a <= 3*n;\nloop invariant b >= 0;\nloop invariant b <= 3*n;\nloop invariant (a + b) == (3*n);\nloop invariant (if unknown_int() then a + 1 else a) >= 0;\nloop invariant (if unknown_int() then a + 1 else a) <= 3*n;\nloop invariant (if unknown_int() then a + 2 else a) >= 0;\nloop invariant (if unknown_int() then a + 2 else a) <= 3*n;\nloop invariant (if unknown_int() then b + 1 else b) >= 0;\nloop invariant (if unknown_int() then b + 1 else b) <= 3*n;\nloop invariant (if unknown_int() then b + 2 else b) >= 0;\nloop invariant (if unknown_int() then b + 2 else b) <= 3*n;\nloop invariant (if unknown_int() then i + 1 else i) == n;\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant a <= 3*n;\nloop invariant b >= 0;\nloop invariant b <= 3*n;\nloop invariant (a + b) == (3*n);\nloop invariant (if unknown_int() then a + 1 else a) >= 0;\nloop invariant (if unknown_int() then a + 1 else a) <= 3*n;\nloop invariant (if unknown_int() then a + 2 else a) >= 0;\nloop invariant (if unknown_int() then a + 2 else a) <= 3*n;\nloop invariant (if unknown_int() then b + 1 else b) >= 0;\nloop invariant (if unknown_int() then b + 1 else b) <= 3*n;\nloop invariant (if unknown_int() then b + 2 else b) >= 0;\nloop invariant (if unknown_int() then b + 2 else b) <= 3*n;\nloop invariant (if unknown_int() then i + 1 else i) == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\n\nloop invariant i4: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant a + b == 3 * i;\nloop invariant (i < n ==> unknown_int());\nloop invariant (i < n ==> (a + b == 3 * i) && (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i < n));\nloop invariant (i == n ==> a + b == 3 * i);\nloop invariant (i == n ==> (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\nloop invariant (i == n ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\nloop invariant (i == n ==> (unknown_int() ==> a + b == 3 * i) && (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a;\nloop invariant i3: 0 <= b;\nloop invariant i4: a + b == 3 * i;\n\nloop invariant i6: (i < n ==> (a + b == 3 * i) && (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i < n));\nloop invariant i7: (i == n ==> a + b == 3 * i);\nloop invariant i8: (i == n ==> (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\nloop invariant i9: (i == n ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\n\n\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b == 2*i;\nloop invariant a + b <= 2*n;\nloop invariant a + b >= 0;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b == 3*n ==> i == n;\nloop invariant a + b >= 3*n ==> i == n;\nloop invariant a + b <= 3*n ==> i == n;\nloop invariant a + b == 3*n ==> a + b == 3*i;\nloop invariant a + b >= 3*n ==> a + b >= 3*i;\nloop invariant a + b <= 3*n ==> a + b <= 3*i;\nloop invariant a + b == 3*n ==> a == 3*i - b;\nloop invariant a + b >= 3*n ==> a >= 3*i - b;\nloop invariant a + b <= 3*n ==> a <= 3*i - b;\nloop invariant a + b == 3*n ==> b == 3*i - a;\nloop invariant a + b >= 3*n ==> b >= 3*i - a;\nloop invariant a + b <= 3*n ==> b <= 3*i - a;\nloop invariant a + b == 3*n ==> a == 3*n - b;\nloop invariant a + b >= 3*n ==> a >= 3*n - b;\nloop invariant a + b <= 3*n ==> a <= 3*n - b;\nloop invariant a + b == 3*n ==> b == 3*n - a;\nloop invariant a + b >= 3*n ==> b >= 3*n - a;\nloop invariant a + b <= 3*n ==> b <= 3*n - a;\nloop invariant a + b == 3*n ==> a == 3*n - 3*i;\nloop invariant a + b >= 3*n ==> a >= 3*n - 3*i;\nloop invariant a + b <= 3*n ==> a <= 3*n - 3*i;\nloop invariant a + b == 3*n ==> b == 3*n - 3*i;\nloop invariant a + b >= 3*n ==> b >= 3*n - 3*i;\nloop invariant a + b <= 3*n ==> b <= 3*n - 3*i;\nloop invariant a + b == 3*n ==> a == 3*i - b;\nloop invariant a + b >= 3*n ==> a >= 3*i - b;\nloop invariant a + b <= 3*n ==> a <= 3*i - b;\nloop invariant a + b == 3*n ==> b == 3*i - a;\nloop invariant a + b >= 3*n ==> b >= 3*i - a;\nloop invariant a + b <= 3*n ==> b <= 3*i - a;\nloop invariant a + b == 3*n ==> a == 3*n - b;\nloop invariant a + b >= 3*n ==> a >= 3*n - b;\nloop invariant a + b <= 3*n ==> a <= 3*n - b;\nloop invariant a + b == 3*n ==> b == 3*n - a;\nloop invariant a + b >= 3*n ==> b >= 3*n - a;\nloop invariant a + b <= 3*n ==> b <= 3*n - a;\nloop invariant a + b == 3*n ==> a == 3*n - 3*i;\nloop invariant a + b >= 3*n ==> a >= 3*n - 3*i;\nloop invariant a + b <= 3*n ==> a <= 3*n - 3*i;\nloop invariant a + b == 3*n ==> b == 3*n - 3*i;\nloop invariant a + b >= 3*n ==> b >= 3*n - 3*i;\nloop invariant a + b <= 3*n ==> b <= 3*n - 3*i;\nloop invariant a + b == 3*n ==> a == 3*i - b;\nloop invariant a + b >= 3*n ==> a >= 3*i - b;\nloop invariant a + b <= 3*n ==> a <= 3*i - b;\nloop invariant a + b == 3*n ==> b == 3*i - a;\nloop invariant a + b >= 3*n ==> b >= 3*i - a;\nloop invariant a + b <= 3*n ==> b <= 3*i - a;\nloop invariant a + b == 3*n ==> a == 3*n - b;\nloop invariant a + b >= 3*n ==> a >= 3*n - b;\nloop invariant a + b <= 3*n ==> a <= 3*n - b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\n\n\nloop invariant i6: a + b >= 0;\nloop invariant i7: a + b == 3*n ==> i == n;\nloop invariant i8: a + b >= 3*n ==> i == n;\n\nloop invariant i10: a + b == 3*n ==> a + b == 3*i;\nloop invariant i11: a + b >= 3*n ==> a + b >= 3*i;\nloop invariant i12: a + b <= 3*n ==> a + b <= 3*i;\nloop invariant i13: a + b == 3*n ==> a == 3*i - b;\nloop invariant i14: a + b >= 3*n ==> a >= 3*i - b;\nloop invariant i15: a + b <= 3*n ==> a <= 3*i - b;\nloop invariant i16: a + b == 3*n ==> b == 3*i - a;\nloop invariant i17: a + b >= 3*n ==> b >= 3*i - a;\nloop invariant i18: a + b <= 3*n ==> b <= 3*i - a;\nloop invariant i19: a + b == 3*n ==> a == 3*n - b;\nloop invariant i20: a + b >= 3*n ==> a >= 3*n - b;\nloop invariant i21: a + b <= 3*n ==> a <= 3*n - b;\nloop invariant i22: a + b == 3*n ==> b == 3*n - a;\nloop invariant i23: a + b >= 3*n ==> b >= 3*n - a;\nloop invariant i24: a + b <= 3*n ==> b <= 3*n - a;\n\nloop invariant i26: a + b >= 3*n ==> a >= 3*n - 3*i;\n\n\nloop invariant i29: a + b >= 3*n ==> b >= 3*n - 3*i;\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\nloop invariant (a + b) == (3 * i);\nloop invariant (a % 2) == (i % 2);\nloop invariant (b % 2) == ((i + 1) % 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: (a + b) == (3 * i);\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= n + 1;\nloop invariant 0 <= b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\nloop invariant a + b <= i * 3;\nloop invariant a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a <= n + 1;\nloop invariant b <= n + 1;\nloop invariant a + b >= i * 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b >= i * 2;\nloop invariant i5: a + b <= i * 3;\n\nloop invariant i7: a >= 0;\nloop invariant i8: b >= 0;\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= 3*n;\nloop invariant a + b == 3*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= n;\nloop invariant n >= 0;\nloop invariant n <= LARGE_INT;\nloop invariant a + b == 3*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: n >= 0;\nloop invariant i4: n <= LARGE_INT;\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3 * n;\nloop invariant 0 <= b <= 2 * n;\nloop invariant a + b >= 3 * i;\nloop invariant (i < n) ==> (a + b == 3 * i);\nloop invariant (i == n) ==> (a + b == 3 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b >= 3 * i;\nloop invariant i5: (i < n) ==> (a + b == 3 * i);\nloop invariant i6: (i == n) ==> (a + b == 3 * n);\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant a + b <= 3 * n;\nloop invariant a <= n;\nloop invariant b <= n;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\nloop invariant a + b == i * 3;\nloop invariant a + b == i * 3;\nloop invariant a >= b;\nloop invariant a >= b;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: a + b <= 3 * n;\n\n\nloop invariant i7: a + b == i * 3;\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 2*n;\nloop invariant 0 <= b <= 2*n;\nloop invariant a + b == 3*i;\nloop invariant a - b <= 2*i;\nloop invariant b - a <= 2*i;\nloop invariant a + b == 3*i ==> a - b <= 2*i;\nloop invariant a + b == 3*i ==> b - a <= 2*i;\nloop invariant a - b <= 2*i ==> a + b == 3*i;\nloop invariant b - a <= 2*i ==> a + b == 3*i;\nloop invariant a - b <= 2*i ==> a + b == 3*i ==> a - b <= 2*i;\nloop invariant b - a <= 2*i ==> a + b == 3*i ==> b - a <= 2*i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\nloop invariant i5: a - b <= 2*i;\nloop invariant i6: b - a <= 2*i;\nloop invariant i7: a + b == 3*i ==> a - b <= 2*i;\nloop invariant i8: a + b == 3*i ==> b - a <= 2*i;\nloop invariant i9: a - b <= 2*i ==> a + b == 3*i;\nloop invariant i10: b - a <= 2*i ==> a + b == 3*i;\nloop invariant i11: a - b <= 2*i ==> a + b == 3*i ==> a - b <= 2*i;\nloop invariant i12: b - a <= 2*i ==> a + b == 3*i ==> b - a <= 2*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= a <= 3*n;\nloop invariant 0 <= b <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\n\n\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 33: unexpected token 'unknown_int'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: a == 2*i + (i*(i-1))%2;\nloop invariant i6: b == i + (i*(i-1))%2;\nloop invariant i7: a >= i;\nloop invariant i8: b >= i;\nloop invariant i9: a <= 3*i;\nloop invariant i10: b <= 3*i;\nloop invariant i11: i < n ==> a + b == 3*i;\nloop invariant i12: i == n ==> a + b == 3*n;\nloop invariant i13: a >= 0;\nloop invariant i14: a <= 3*n;\nloop invariant i15: b >= 0;\nloop invariant i16: b <= 3*n;\nloop invariant i17: (a + b) == (3*n);\nloop invariant i18: (if unknown_int() then a + 1 else a) >= 0;\nloop invariant i19: (if unknown_int() then a + 1 else a) <= 3*n;\nloop invariant i20: (if unknown_int() then a + 2 else a) >= 0;\nloop invariant i21: (if unknown_int() then a + 2 else a) <= 3*n;\nloop invariant i22: (if unknown_int() then b + 1 else b) >= 0;\nloop invariant i23: (if unknown_int() then b + 1 else b) <= 3*n;\nloop invariant i24: (if unknown_int() then b + 2 else b) >= 0;\nloop invariant i25: (if unknown_int() then b + 2 else b) <= 3*n;\nloop invariant i26: (if unknown_int() then i + 1 else i) == n;\nloop invariant i27: 0 <= a;\nloop invariant i28: 0 <= b;\nloop invariant i29: a + b == 3 * i;\nloop invariant i30: (i < n ==> unknown_int());\nloop invariant i31: (i < n ==> (a + b == 3 * i) && (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i < n));\nloop invariant i32: (i == n ==> a + b == 3 * i);\nloop invariant i33: (i == n ==> (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\nloop invariant i34: (i == n ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\nloop invariant i35: (i == n ==> (unknown_int() ==> a + b == 3 * i) && (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\nloop invariant i36: (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n)));\nloop invariant i37: (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n)));\nloop invariant i38: (i == n ==> (unknown_int() ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) ==> (a + b == 3 * i) && (i == n)));\nloop invariant i39: a + b == 2*i;\nloop invariant i40: a + b <= 2*n;\nloop invariant i41: a + b >= 0;\nloop invariant i42: a + b == 3*n ==> i == n;\nloop invariant i43: a + b >= 3*n ==> i == n;\nloop invariant i44: a + b <= 3*n ==> i == n;\nloop invariant i45: a + b == 3*n ==> a + b == 3*i;\nloop invariant i46: a + b >= 3*n ==> a + b >= 3*i;\nloop invariant i47: a + b <= 3*n ==> a + b <= 3*i;\nloop invariant i48: a + b == 3*n ==> a == 3*i - b;\nloop invariant i49: a + b >= 3*n ==> a >= 3*i - b;\nloop invariant i50: a + b <= 3*n ==> a <= 3*i - b;\nloop invariant i51: a + b == 3*n ==> b == 3*i - a;\nloop invariant i52: a + b >= 3*n ==> b >= 3*i - a;\nloop invariant i53: a + b <= 3*n ==> b <= 3*i - a;\nloop invariant i54: a + b == 3*n ==> a == 3*n - b;\nloop invariant i55: a + b >= 3*n ==> a >= 3*n - b;\nloop invariant i56: a + b <= 3*n ==> a <= 3*n - b;\nloop invariant i57: a + b == 3*n ==> b == 3*n - a;\nloop invariant i58: a + b >= 3*n ==> b >= 3*n - a;\nloop invariant i59: a + b <= 3*n ==> b <= 3*n - a;\nloop invariant i60: a + b == 3*n ==> a == 3*n - 3*i;\nloop invariant i61: a + b >= 3*n ==> a >= 3*n - 3*i;\nloop invariant i62: a + b <= 3*n ==> a <= 3*n - 3*i;\nloop invariant i63: a + b == 3*n ==> b == 3*n - 3*i;\nloop invariant i64: a + b >= 3*n ==> b >= 3*n - 3*i;\nloop invariant i65: a + b <= 3*n ==> b <= 3*n - 3*i;\nloop invariant i66: (a + b) == (3 * i);\nloop invariant i67: (a % 2) == (i % 2);\nloop invariant i68: (b % 2) == ((i + 1) % 2);\nloop invariant i69: 0 <= a <= n + 1;\nloop invariant i70: 0 <= b <= n + 1;\nloop invariant i71: a + b >= i * 2;\nloop invariant i72: a + b <= i * 3;\nloop invariant i73: a + b == 3 * i + (unknown_int() == 1 ? 0 : 1);\nloop invariant i74: a <= n + 1;\nloop invariant i75: b <= n + 1;\nloop invariant i76: 0 <= a <= 2*n;\nloop invariant i77: 0 <= b <= n;\nloop invariant i78: n >= 0;\nloop invariant i79: n <= LARGE_INT;\nloop invariant i80: a + b == 3*n;\nloop invariant i81: 0 <= a <= 3 * n;\nloop invariant i82: 0 <= b <= 2 * n;\nloop invariant i83: a + b >= 3 * i;\nloop invariant i84: (i < n) ==> (a + b == 3 * i);\nloop invariant i85: (i == n) ==> (a + b == 3 * n);\nloop invariant i86: a + b <= 3 * n;\nloop invariant i87: a <= n;\nloop invariant i88: b <= n;\nloop invariant i89: a + b == i * 3;\nloop invariant i90: a >= b;\nloop invariant i91: 0 <= b <= 2*n;\nloop invariant i92: a - b <= 2*i;\nloop invariant i93: b - a <= 2*i;\nloop invariant i94: a + b == 3*i ==> a - b <= 2*i;\nloop invariant i95: a + b == 3*i ==> b - a <= 2*i;\nloop invariant i96: a - b <= 2*i ==> a + b == 3*i;\nloop invariant i97: b - a <= 2*i ==> a + b == 3*i;\nloop invariant i98: a - b <= 2*i ==> a + b == 3*i ==> a - b <= 2*i;\nloop invariant i99: b - a <= 2*i ==> a + b == 3*i ==> b - a <= 2*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 24,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 3*n;\nloop invariant i3: 0 <= b <= 3*n;\nloop invariant i4: a + b == 3*i;\n\n\nloop invariant i7: a >= i;\nloop invariant i8: b >= i;\nloop invariant i9: a <= 3*i;\nloop invariant i10: b <= 3*i;\nloop invariant i11: i < n ==> a + b == 3*i;\nloop invariant i12: i == n ==> a + b == 3*n;\nloop invariant i13: a >= 0;\nloop invariant i14: a <= 3*n;\nloop invariant i15: b >= 0;\nloop invariant i16: b <= 3*n;\n\n\n\n\n\n\n\n\n\n\nloop invariant i27: 0 <= a;\nloop invariant i28: 0 <= b;\nloop invariant i29: a + b == 3 * i;\n\nloop invariant i31: (i < n ==> (a + b == 3 * i) && (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i < n));\nloop invariant i32: (i == n ==> a + b == 3 * i);\nloop invariant i33: (i == n ==> (0 <= i) && (i <= n) && (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\nloop invariant i34: (i == n ==> (0 <= i) && (i <= n) ==> (0 <= a) && (0 <= b) && (a + b == 3 * i) && (i == n));\n\n\n\n\n\n\nloop invariant i41: a + b >= 0;\nloop invariant i42: a + b == 3*n ==> i == n;\nloop invariant i43: a + b >= 3*n ==> i == n;\n\nloop invariant i45: a + b == 3*n ==> a + b == 3*i;\nloop invariant i46: a + b >= 3*n ==> a + b >= 3*i;\nloop invariant i47: a + b <= 3*n ==> a + b <= 3*i;\nloop invariant i48: a + b == 3*n ==> a == 3*i - b;\nloop invariant i49: a + b >= 3*n ==> a >= 3*i - b;\nloop invariant i50: a + b <= 3*n ==> a <= 3*i - b;\nloop invariant i51: a + b == 3*n ==> b == 3*i - a;\nloop invariant i52: a + b >= 3*n ==> b >= 3*i - a;\nloop invariant i53: a + b <= 3*n ==> b <= 3*i - a;\nloop invariant i54: a + b == 3*n ==> a == 3*n - b;\nloop invariant i55: a + b >= 3*n ==> a >= 3*n - b;\nloop invariant i56: a + b <= 3*n ==> a <= 3*n - b;\nloop invariant i57: a + b == 3*n ==> b == 3*n - a;\nloop invariant i58: a + b >= 3*n ==> b >= 3*n - a;\nloop invariant i59: a + b <= 3*n ==> b <= 3*n - a;\n\nloop invariant i61: a + b >= 3*n ==> a >= 3*n - 3*i;\n\n\nloop invariant i64: a + b >= 3*n ==> b >= 3*n - 3*i;\n\nloop invariant i66: (a + b) == (3 * i);\n\n\n\n\nloop invariant i71: a + b >= i * 2;\nloop invariant i72: a + b <= i * 3;\n\n\n\nloop invariant i76: 0 <= a <= 2*n;\n\nloop invariant i78: n >= 0;\nloop invariant i79: n <= LARGE_INT;\n\nloop invariant i81: 0 <= a <= 3 * n;\nloop invariant i82: 0 <= b <= 2 * n;\nloop invariant i83: a + b >= 3 * i;\nloop invariant i84: (i < n) ==> (a + b == 3 * i);\nloop invariant i85: (i == n) ==> (a + b == 3 * n);\nloop invariant i86: a + b <= 3 * n;\n\n\nloop invariant i89: a + b == i * 3;\n\nloop invariant i91: 0 <= b <= 2*n;\nloop invariant i92: a - b <= 2*i;\nloop invariant i93: b - a <= 2*i;\nloop invariant i94: a + b == 3*i ==> a - b <= 2*i;\nloop invariant i95: a + b == 3*i ==> b - a <= 2*i;\nloop invariant i96: a - b <= 2*i ==> a + b == 3*i;\nloop invariant i97: b - a <= 2*i ==> a + b == 3*i;\nloop invariant i98: a - b <= 2*i ==> a + b == 3*i ==> a - b <= 2*i;\nloop invariant i99: b - a <= 2*i ==> a + b == 3*i ==> b - a <= 2*i;\n*/\nwhile (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c"
        ],
        "skipped": [],
        "total": 106,
        "success_count": 94,
        "failure_count": 12,
        "success_rate": 0.8867924528301887
    }
}