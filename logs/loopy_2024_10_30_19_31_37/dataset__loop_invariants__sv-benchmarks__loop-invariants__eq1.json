{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  while (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= w;\nloop invariant w <= x;\nloop invariant y <= z;\nloop invariant 0 <= y;\nloop invariant z <= 4294967295;\nloop invariant x <= 4294967295;\nloop invariant w <= 4294967295;\nloop invariant z <= 4294967295;\nloop invariant y <= 4294967295;\nloop invariant unknown_uint() ==> w == x;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= w;\nloop invariant 0 <= y <= z;\nloop invariant x + y == w + z;\nloop invariant w <= x + y;\nloop invariant z <= w + y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= 2^32 - 1;\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant w == x;\nloop invariant 0 <= y <= 2^32 - 1;\nloop invariant 0 <= z <= 2^32 - 1;\nloop invariant y == z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant w == x;\nloop invariant y == z;\nloop invariant w <= y;\nloop invariant w >= x;\nloop invariant w <= z;\nloop invariant x <= y;\nloop invariant x >= w;\nloop invariant y >= z;\nloop invariant z <= y;\nloop invariant z >= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= x <= unsigned int_max;\nloop invariant y <= z <= unsigned int_max;\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= x <= z;\nloop invariant y <= z;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= w <= 2147483647;\nloop invariant 1 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant 0 <= z <= 2147483647;\nloop invariant w == x ==> y == z;\nloop invariant z == 0 ==> w == z;\nloop invariant w == z ==> y == 0;\nloop invariant w >= x ==> y == z;\nloop invariant w >= z ==> y == 0;\nloop invariant w <= z ==> y == 0;\nloop invariant y == z ==> w >= x;\nloop invariant w >= z ==> y == 0;\nloop invariant w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y && y <= z;\nloop invariant w <= x;\nloop invariant w <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= w + y;\nloop invariant w + y <= z + x;\nloop invariant z + y <= x + w;\nloop invariant x + y <= z + w;\nloop invariant x + y <= z;\nloop invariant w + y <= z;\nloop invariant x + z <= y;\nloop invariant w + z <= y;\nloop invariant x + y + z <= w + w;\nloop invariant w + w <= y + y;\nloop invariant w + y + z <= y + y;\nloop invariant w + z <= y + y;\nloop invariant w + y >= z;\nloop invariant w + z >= y;\nloop invariant w + y >= x;\nloop invariant w + z >= x;\nloop invariant w + x >= y;\nloop invariant w + z >= y;\nloop invariant x + y >= z;\nloop invariant x + z >= y;\nloop invariant w + x >= y;\nloop invariant w + z >= y;\nloop invariant x + y >= w;\nloop invariant x + z >= w;\nloop invariant w + x >= z;\nloop invariant w + z >= w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= w <= x; 1 <= y <= z; 1 <= w + x <= 2 * x; 1 <= y + z <= 2 * y; w == x ==> w == x + y; y == z ==> y == z - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= 2 * w;\nloop invariant 0 <= x <= 2 * x;\nloop invariant y <= z <= 2 * z;\nloop invariant w == x ==> y == z;\nloop invariant w != x ==> y != z;\nloop invariant w == x ==> y == z ==> w == x == y == z;\nloop invariant w != x ==> y != z ==> w != x != y != z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= w <= x;\nloop invariant y <= z;\nloop invariant 0 <= w, x <= UINT_MAX;\nloop invariant 0 <= y, z <= UINT_MAX;\nloop invariant w >= x ==> w == x;\nloop invariant y >= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= w <= 4294967295;\nloop invariant 1 <= x <= 4294967295;\nloop invariant 0 <= y <= 4294967295;\nloop invariant 0 <= z <= 4294967295;\nloop invariant w == x - 1 || w == x;\nloop invariant y == z - 1 || y == z;\nloop invariant (w == x && y == z) ==> !unknown_uint();\nloop invariant (w == x && y == z) ==> unknown_uint() ==> (w == x+1 || w == x) && (y == z-1 || y == z);\nloop invariant (w == x && y == z) ==> unknown_uint() ==> !(unknown_uint() && (w == x+1 || w == x) && (y == z-1 || y == z));\nloop invariant (w == x && y == z) ==> unknown_uint() ==> (unknown_uint() && (w == x+1 || w == x) && (y == z-1 || y == z)) ==> unknown_uint();\nloop invariant (w == x && y == z) ==> unknown_uint() ==> (unknown_uint() && (w == x+1 || w == x) && (y == z-1 || y == z)) ==> !unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant w == x;\nloop invariant y == z;\nloop invariant w <= y && w >= x && y >= z;\n*/\n```",
            "```\n/*@\nloop invariant ( ( ( w - x ) == 0 ) || ( ( w - x ) > 0 ) );\nloop invariant ( ( ( y - z ) == 0 ) || ( ( y - z ) < 0 ) );\nloop invariant ( w >= x );\nloop invariant ( y <= z );\nloop invariant ( ( w >= x ) ==> ( x == w ) );\nloop invariant ( ( y <= z ) ==> ( y == z ) );\nloop invariant ( ( w >= x ) ==> ( w - x == 0 ) );\nloop invariant ( ( y <= z ) ==> ( y - z == 0 ) );\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= w;\nloop invariant w <= x;\nloop invariant y <= z;\nloop invariant 0 <= y;\nloop invariant z <= 4294967295;\nloop invariant x <= 4294967295;\nloop invariant w <= 4294967295;\nloop invariant z <= 4294967295;\nloop invariant y <= 4294967295;\nloop invariant unknown_uint() ==> w == x;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> y <= 4294967295;\nloop invariant unknown_uint() ==> x == w;\nloop invariant unknown_uint() ==> y == z;\nloop invariant unknown_uint() ==> 0 <= y;\nloop invariant unknown_uint() ==> z <= 4294967295;\nloop invariant unknown_uint() ==> x <= 4294967295;\nloop invariant unknown_uint() ==> w <= 4294967295;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: 0 <= w;\n\n\nloop invariant i4: 0 <= y;\nloop invariant i5: z <= 4294967295;\nloop invariant i6: x <= 4294967295;\nloop invariant i7: w <= 4294967295;\nloop invariant i8: y <= 4294967295;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= w;\nloop invariant 0 <= y <= z;\nloop invariant x + y == w + z;\nloop invariant w <= x + y;\nloop invariant z <= w + y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: 0 <= x <= w;\nloop invariant i2: 0 <= y <= z;\nloop invariant i3: x + y == w + z;\nloop invariant i4: w <= x + y;\nloop invariant i5: z <= w + y;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= 2^32 - 1;\nloop invariant 0 <= x <= 2^32 - 1;\nloop invariant w == x;\nloop invariant 0 <= y <= 2^32 - 1;\nloop invariant 0 <= z <= 2^32 - 1;\nloop invariant y == z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\nloop invariant i3: w == x;\n\n\nloop invariant i6: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant w == x;\nloop invariant y == z;\nloop invariant w <= y;\nloop invariant w >= x;\nloop invariant w <= z;\nloop invariant x <= y;\nloop invariant x >= w;\nloop invariant y >= z;\nloop invariant z <= y;\nloop invariant z >= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= w;\nloop invariant w <= x;\nloop invariant x <= y;\nloop invariant y <= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\nloop invariant i2: w == x;\nloop invariant i3: y == z;\n\nloop invariant i5: w >= x;\n\n\nloop invariant i8: x >= w;\nloop invariant i9: y >= z;\nloop invariant i10: z <= y;\n\nloop invariant i12: w <= x;\nloop invariant i13: y <= z;\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= x <= unsigned int_max;\nloop invariant y <= z <= unsigned int_max;\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w <= x ==> (y >= z));\nloop invariant (y <= z ==> (w >= x));\nloop invariant (w == x ==> (y == z));\nloop invariant (w == x ==> (w == x));\nloop invariant (w == x ==> (y == z));\nloop invariant (y == z ==> (w == x));\nloop invariant (y == z ==> (w == x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w >= x ==> (y <= z));\nloop invariant (y >= z ==> (w <= x));\nloop invariant (w <= x ==> (y >= z));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: (w == x ==> (w == x));\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= x <= z;\nloop invariant y <= z;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\nloop invariant z == w - y;\nloop invariant w == x + y;\nloop invariant y == z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\nloop invariant i2: y <= z;\n\nloop invariant i4: y == z;\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= w <= 2147483647;\nloop invariant 1 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant 0 <= z <= 2147483647;\nloop invariant w == x ==> y == z;\nloop invariant z == 0 ==> w == z;\nloop invariant w == z ==> y == 0;\nloop invariant w >= x ==> y == z;\nloop invariant w >= z ==> y == 0;\nloop invariant w <= z ==> y == 0;\nloop invariant y == z ==> w >= x;\nloop invariant w >= z ==> y == 0;\nloop invariant w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i14: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x;\nloop invariant i15: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z;\nloop invariant i16: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x;\nloop invariant i17: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0;\nloop invariant i18: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x;\nloop invariant i19: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z;\nloop invariant i20: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x;\nloop invariant i21: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i22: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant i23: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i24: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant i25: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i26: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant i27: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i28: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= y && y <= z;\nloop invariant w <= x;\nloop invariant w <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= w + y;\nloop invariant w + y <= z + x;\nloop invariant z + y <= x + w;\nloop invariant x + y <= z + w;\nloop invariant x + y <= z;\nloop invariant w + y <= z;\nloop invariant x + z <= y;\nloop invariant w + z <= y;\nloop invariant x + y + z <= w + w;\nloop invariant w + w <= y + y;\nloop invariant w + y + z <= y + y;\nloop invariant w + z <= y + y;\nloop invariant w + y >= z;\nloop invariant w + z >= y;\nloop invariant w + y >= x;\nloop invariant w + z >= x;\nloop invariant w + x >= y;\nloop invariant w + z >= y;\nloop invariant x + y >= z;\nloop invariant x + z >= y;\nloop invariant w + x >= y;\nloop invariant w + z >= y;\nloop invariant x + y >= w;\nloop invariant x + z >= w;\nloop invariant w + x >= z;\nloop invariant w + z >= w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\nloop invariant x + y > w;\nloop invariant x + z > w;\nloop invariant w + x > z;\nloop invariant w + z > w;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i28: w + z >= w;\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= w <= x; 1 <= y <= z; 1 <= w + x <= 2 * x; 1 <= y + z <= 2 * y; w == x ==> w == x + y; y == z ==> y == z - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= 2 * w;\nloop invariant 0 <= x <= 2 * x;\nloop invariant y <= z <= 2 * z;\nloop invariant w == x ==> y == z;\nloop invariant w != x ==> y != z;\nloop invariant w == x ==> y == z ==> w == x == y == z;\nloop invariant w != x ==> y != z ==> w != x != y != z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: 0 <= w <= 2 * w;\nloop invariant i2: 0 <= x <= 2 * x;\n\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= w <= x;\nloop invariant y <= z;\nloop invariant 0 <= w, x <= UINT_MAX;\nloop invariant 0 <= y, z <= UINT_MAX;\nloop invariant w >= x ==> w == x;\nloop invariant y >= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\nloop invariant w <= x ==> w == x;\nloop invariant y <= z ==> y == z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: 0 <= w <= x;\nloop invariant i2: y <= z;\n\n\nloop invariant i5: w >= x ==> w == x;\nloop invariant i6: y >= z ==> y == z;\nloop invariant i7: w <= x ==> w == x;\nloop invariant i8: y <= z ==> y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= w <= 4294967295;\nloop invariant 1 <= x <= 4294967295;\nloop invariant 0 <= y <= 4294967295;\nloop invariant 0 <= z <= 4294967295;\nloop invariant w == x - 1 || w == x;\nloop invariant y == z - 1 || y == z;\nloop invariant (w == x && y == z) ==> !unknown_uint();\nloop invariant (w == x && y == z) ==> unknown_uint() ==> (w == x+1 || w == x) && (y == z-1 || y == z);\nloop invariant (w == x && y == z) ==> unknown_uint() ==> !(unknown_uint() && (w == x+1 || w == x) && (y == z-1 || y == z));\nloop invariant (w == x && y == z) ==> unknown_uint() ==> (unknown_uint() && (w == x+1 || w == x) && (y == z-1 || y == z)) ==> unknown_uint();\nloop invariant (w == x && y == z) ==> unknown_uint() ==> (unknown_uint() && (w == x+1 || w == x) && (y == z-1 || y == z)) ==> !unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\nloop invariant i3: 0 <= y <= 4294967295;\nloop invariant i4: 0 <= z <= 4294967295;\n\n\n\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant w == x;\nloop invariant y == z;\nloop invariant w <= y && w >= x && y >= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant ( ( ( w - x ) == 0 ) || ( ( w - x ) > 0 ) );\nloop invariant ( ( ( y - z ) == 0 ) || ( ( y - z ) < 0 ) );\nloop invariant ( w >= x );\nloop invariant ( y <= z );\nloop invariant ( ( w >= x ) ==> ( x == w ) );\nloop invariant ( ( y <= z ) ==> ( y == z ) );\nloop invariant ( ( w >= x ) ==> ( w - x == 0 ) );\nloop invariant ( ( y <= z ) ==> ( y - z == 0 ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: ( ( ( w - x ) == 0 ) || ( ( w - x ) > 0 ) );\nloop invariant i2: ( ( ( y - z ) == 0 ) || ( ( y - z ) < 0 ) );\nloop invariant i3: ( w >= x );\nloop invariant i4: ( y <= z );\nloop invariant i5: ( ( w >= x ) ==> ( x == w ) );\nloop invariant i6: ( ( y <= z ) ==> ( y == z ) );\nloop invariant i7: ( ( w >= x ) ==> ( w - x == 0 ) );\nloop invariant i8: ( ( y <= z ) ==> ( y - z == 0 ) );\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: 0 <= w;\nloop invariant i2: w <= x;\nloop invariant i3: y <= z;\nloop invariant i4: 0 <= y;\nloop invariant i5: z <= 4294967295;\nloop invariant i6: x <= 4294967295;\nloop invariant i7: w <= 4294967295;\nloop invariant i8: y <= 4294967295;\nloop invariant i9: unknown_uint() ==> w == x;\nloop invariant i10: unknown_uint() ==> y == z;\nloop invariant i11: unknown_uint() ==> 0 <= y;\nloop invariant i12: unknown_uint() ==> z <= 4294967295;\nloop invariant i13: unknown_uint() ==> x <= 4294967295;\nloop invariant i14: unknown_uint() ==> w <= 4294967295;\nloop invariant i15: unknown_uint() ==> y <= 4294967295;\nloop invariant i16: unknown_uint() ==> x == w;\nloop invariant i17: 0 <= x <= w;\nloop invariant i18: 0 <= y <= z;\nloop invariant i19: x + y == w + z;\nloop invariant i20: w <= x + y;\nloop invariant i21: z <= w + y;\nloop invariant i22: 0 <= w <= 2^32 - 1;\nloop invariant i23: 0 <= x <= 2^32 - 1;\nloop invariant i24: w == x;\nloop invariant i25: 0 <= y <= 2^32 - 1;\nloop invariant i26: 0 <= z <= 2^32 - 1;\nloop invariant i27: y == z;\nloop invariant i28: 0 <= x <= y;\nloop invariant i29: w <= y;\nloop invariant i30: w >= x;\nloop invariant i31: w <= z;\nloop invariant i32: x <= y;\nloop invariant i33: x >= w;\nloop invariant i34: y >= z;\nloop invariant i35: z <= y;\nloop invariant i36: z >= w;\nloop invariant i37: z <= w;\nloop invariant i38: 0 <= w <= x <= unsigned int_max;\nloop invariant i39: y <= z <= unsigned int_max;\nloop invariant i40: (w == x ==> (y == z));\nloop invariant i41: (y == z ==> (w == x));\nloop invariant i42: (w >= x ==> (y <= z));\nloop invariant i43: (y >= z ==> (w <= x));\nloop invariant i44: (w <= x ==> (y >= z));\nloop invariant i45: (y <= z ==> (w >= x));\nloop invariant i46: (w == x ==> (w == x));\nloop invariant i47: 0 <= w <= x <= z;\nloop invariant i48: w == x + y;\nloop invariant i49: z == w - y;\nloop invariant i50: 1 <= w <= 2147483647;\nloop invariant i51: 1 <= x <= 2147483647;\nloop invariant i52: 0 <= y <= 2147483647;\nloop invariant i53: 0 <= z <= 2147483647;\nloop invariant i54: w == x ==> y == z;\nloop invariant i55: z == 0 ==> w == z;\nloop invariant i56: w == z ==> y == 0;\nloop invariant i57: w >= x ==> y == z;\nloop invariant i58: w >= z ==> y == 0;\nloop invariant i59: w <= z ==> y == 0;\nloop invariant i60: y == z ==> w >= x;\nloop invariant i61: w >= x ==> y == z ==> w >= z;\nloop invariant i62: w >= x ==> y == z ==> w >= z ==> y == 0;\nloop invariant i63: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x;\nloop invariant i64: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z;\nloop invariant i65: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x;\nloop invariant i66: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0;\nloop invariant i67: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x;\nloop invariant i68: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z;\nloop invariant i69: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x;\nloop invariant i70: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i71: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant i72: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i73: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant i74: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i75: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant i76: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i77: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant i78: 0 <= y && y <= z;\nloop invariant i79: z <= x;\nloop invariant i80: x <= w + y;\nloop invariant i81: w + y <= z + x;\nloop invariant i82: z + y <= x + w;\nloop invariant i83: x + y <= z + w;\nloop invariant i84: x + y <= z;\nloop invariant i85: w + y <= z;\nloop invariant i86: x + z <= y;\nloop invariant i87: w + z <= y;\nloop invariant i88: x + y + z <= w + w;\nloop invariant i89: w + w <= y + y;\nloop invariant i90: w + y + z <= y + y;\nloop invariant i91: w + z <= y + y;\nloop invariant i92: w + y >= z;\nloop invariant i93: w + z >= y;\nloop invariant i94: w + y >= x;\nloop invariant i95: w + z >= x;\nloop invariant i96: w + x >= y;\nloop invariant i97: x + y >= z;\nloop invariant i98: x + z >= y;\nloop invariant i99: x + y >= w;\nloop invariant i100: x + z >= w;\nloop invariant i101: w + x >= z;\nloop invariant i102: w + z >= w;\nloop invariant i103: x + y > w;\nloop invariant i104: x + z > w;\nloop invariant i105: w + x > z;\nloop invariant i106: w + z > w;\nloop invariant i107: 1 <= w <= x; 1 <= y <= z; 1 <= w + x <= 2 * x; 1 <= y + z <= 2 * y; w == x ==> w == x + y; y == z ==> y == z - x;\nloop invariant i108: 0 <= w <= 2 * w;\nloop invariant i109: 0 <= x <= 2 * x;\nloop invariant i110: y <= z <= 2 * z;\nloop invariant i111: w != x ==> y != z;\nloop invariant i112: w == x ==> y == z ==> w == x == y == z;\nloop invariant i113: w != x ==> y != z ==> w != x != y != z;\nloop invariant i114: 0 <= w <= x;\nloop invariant i115: 0 <= w, x <= UINT_MAX;\nloop invariant i116: 0 <= y, z <= UINT_MAX;\nloop invariant i117: w >= x ==> w == x;\nloop invariant i118: y >= z ==> y == z;\nloop invariant i119: w <= x ==> w == x;\nloop invariant i120: y <= z ==> y == z;\nloop invariant i121: 1 <= w <= 4294967295;\nloop invariant i122: 1 <= x <= 4294967295;\nloop invariant i123: 0 <= y <= 4294967295;\nloop invariant i124: 0 <= z <= 4294967295;\nloop invariant i125: w == x - 1 || w == x;\nloop invariant i126: y == z - 1 || y == z;\nloop invariant i127: (w == x && y == z) ==> !unknown_uint();\nloop invariant i128: (w == x && y == z) ==> unknown_uint() ==> (w == x+1 || w == x) && (y == z-1 || y == z);\nloop invariant i129: (w == x && y == z) ==> unknown_uint() ==> !(unknown_uint() && (w == x+1 || w == x) && (y == z-1 || y == z));\nloop invariant i130: (w == x && y == z) ==> unknown_uint() ==> (unknown_uint() && (w == x+1 || w == x) && (y == z-1 || y == z)) ==> unknown_uint();\nloop invariant i131: (w == x && y == z) ==> unknown_uint() ==> (unknown_uint() && (w == x+1 || w == x) && (y == z-1 || y == z)) ==> !unknown_uint();\nloop invariant i132: w <= y && w >= x && y >= z;\nloop invariant i133: ( ( ( w - x ) == 0 ) || ( ( w - x ) > 0 ) );\nloop invariant i134: ( ( ( y - z ) == 0 ) || ( ( y - z ) < 0 ) );\nloop invariant i135: ( w >= x );\nloop invariant i136: ( y <= z );\nloop invariant i137: ( ( w >= x ) ==> ( x == w ) );\nloop invariant i138: ( ( y <= z ) ==> ( y == z ) );\nloop invariant i139: ( ( w >= x ) ==> ( w - x == 0 ) );\nloop invariant i140: ( ( y <= z ) ==> ( y - z == 0 ) );\nloop invariant i141: i1;\nloop invariant i142: i2;\nloop invariant i143: 0 <= y <= 100000;\nloop invariant i144: x >= (1 + (y - 1) * y / 2);\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 38,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: 0 <= w;\nloop invariant i2: w <= x;\nloop invariant i3: y <= z;\nloop invariant i4: 0 <= y;\nloop invariant i5: z <= 4294967295;\nloop invariant i6: x <= 4294967295;\nloop invariant i7: w <= 4294967295;\nloop invariant i8: y <= 4294967295;\n\n\n\n\n\n\n\n\nloop invariant i17: 0 <= x <= w;\nloop invariant i18: 0 <= y <= z;\nloop invariant i19: x + y == w + z;\nloop invariant i20: w <= x + y;\nloop invariant i21: z <= w + y;\n\n\nloop invariant i24: w == x;\n\n\nloop invariant i27: y == z;\n\n\nloop invariant i30: w >= x;\n\n\nloop invariant i33: x >= w;\nloop invariant i34: y >= z;\nloop invariant i35: z <= y;\n\n\n\n\nloop invariant i40: (w == x ==> (y == z));\nloop invariant i41: (y == z ==> (w == x));\nloop invariant i42: (w >= x ==> (y <= z));\nloop invariant i43: (y >= z ==> (w <= x));\nloop invariant i44: (w <= x ==> (y >= z));\nloop invariant i45: (y <= z ==> (w >= x));\nloop invariant i46: (w == x ==> (w == x));\n\n\n\n\n\n\n\nloop invariant i54: w == x ==> y == z;\n\n\nloop invariant i57: w >= x ==> y == z;\n\n\nloop invariant i60: y == z ==> w >= x;\n\n\nloop invariant i63: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x;\nloop invariant i64: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z;\nloop invariant i65: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x;\nloop invariant i66: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0;\nloop invariant i67: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x;\nloop invariant i68: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z;\nloop invariant i69: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x;\nloop invariant i70: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i71: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant i72: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i73: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant i74: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i75: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant i76: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z;\nloop invariant i77: w >= x ==> y == z ==> w >= z ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == 0 ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x ==> y == z ==> w >= x;\nloop invariant i78: 0 <= y && y <= z;\n\nloop invariant i80: x <= w + y;\nloop invariant i81: w + y <= z + x;\n\nloop invariant i83: x + y <= z + w;\n\n\n\n\n\n\n\n\nloop invariant i92: w + y >= z;\nloop invariant i93: w + z >= y;\nloop invariant i94: w + y >= x;\nloop invariant i95: w + z >= x;\n\nloop invariant i97: x + y >= z;\nloop invariant i98: x + z >= y;\nloop invariant i99: x + y >= w;\nloop invariant i100: x + z >= w;\n\nloop invariant i102: w + z >= w;\n\n\n\n\n\nloop invariant i108: 0 <= w <= 2 * w;\nloop invariant i109: 0 <= x <= 2 * x;\nloop invariant i110: y <= z <= 2 * z;\nloop invariant i111: w != x ==> y != z;\n\n\nloop invariant i114: 0 <= w <= x;\n\n\nloop invariant i117: w >= x ==> w == x;\nloop invariant i118: y >= z ==> y == z;\nloop invariant i119: w <= x ==> w == x;\nloop invariant i120: y <= z ==> y == z;\n\n\nloop invariant i123: 0 <= y <= 4294967295;\nloop invariant i124: 0 <= z <= 4294967295;\nloop invariant i125: w == x - 1 || w == x;\nloop invariant i126: y == z - 1 || y == z;\n\n\n\n\n\n\nloop invariant i133: ( ( ( w - x ) == 0 ) || ( ( w - x ) > 0 ) );\nloop invariant i134: ( ( ( y - z ) == 0 ) || ( ( y - z ) < 0 ) );\nloop invariant i135: ( w >= x );\nloop invariant i136: ( y <= z );\nloop invariant i137: ( ( w >= x ) ==> ( x == w ) );\nloop invariant i138: ( ( y <= z ) ==> ( y == z ) );\nloop invariant i139: ( ( w >= x ) ==> ( w - x == 0 ) );\nloop invariant i140: ( ( y <= z ) ==> ( y - z == 0 ) );\n\n\n\n\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c"
        ],
        "skipped": [],
        "total": 100,
        "success_count": 89,
        "failure_count": 11,
        "success_rate": 0.89
    }
}