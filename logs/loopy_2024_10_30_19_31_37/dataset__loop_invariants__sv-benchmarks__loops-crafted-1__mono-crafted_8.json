{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 5000000 <= x <= y <= 10000000;\nloop invariant z == 5000000 * (x < 5000000);\nloop invariant z >= 0;\nloop invariant z <= 5000000;\nloop invariant x - (5000000 - z) == 5000000 * (x >= 5000000);\nloop invariant y <= x + (5000000 - z);\nloop invariant y >= 10000000 * (x < 5000000) + 5000000 * (x >= 5000000);\nloop invariant x - 1 <= y <= x + (5000000 - z) * (x >= 5000000);\nloop invariant x >= 5000000 * (x < 5000000) + (5000000 - z) * (x >= 5000000);\nloop invariant x - 1 <= y <= 10000000 * (x < 5000000) + (5000000 - z) * (x >= 5000000);\nloop invariant 0 <= z <= 5000000 * (x >= 5000000);\nloop invariant z == 0 * (x >= 5000000);\nloop invariant z == 0;\nloop invariant y == 10000000 * (x < 5000000);\nloop invariant y == 5000000 * (x >= 5000000);\nloop invariant x == y * (x >= 5000000);\nloop invariant x == 10000000 * (x < 5000000);\nloop invariant x == 5000000 * (x >= 5000000);\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= z <= 5000000;\nloop invariant x >= 0;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant x >= z ==> y == x;\nloop invariant x < z ==> y > x;\nloop invariant x > z ==> y < x;\nloop invariant x < y ==> x != z;\nloop invariant x == y ==> x == z;\nloop invariant x > y ==> x != z;\nloop invariant y == x ==> z == 0;\nloop invariant y > x ==> z != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= z;\nloop invariant x <= 10000000;\nloop invariant y >= 0;\nloop invariant y <= 10000000;\nloop invariant z >= 0;\nloop invariant z <= 5000000;\nloop invariant z == 0 ==> x >= y;\nloop invariant z == 0 ==> x <= y;\nloop invariant z == 0 ==> y == x;\nloop invariant z == 0 ==> x == y;\nloop invariant z == 0 ==> y == 10000000;\nloop invariant z == 0 ==> x == 10000000;\nloop invariant z == 0 ==> x == 10000000 && y == 10000000;\nloop invariant z == 0 ==> x >= 10000000 && y <= 10000000;\nloop invariant z == 0 ==> x >= y && x <= y && y == 10000000;\nloop invariant z == 0 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000;\nloop invariant z == 0 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000 ==> z == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y == 10000000;\nloop invariant z == 5000000;\nloop invariant x <= y;\nloop invariant (x < 5000000) ==> (z == 5000000);\nloop invariant (x >= 5000000) ==> (z == 5000000 - (x - 5000000));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= 10000000;\nloop invariant z == 5000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant z <= 5000000;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant z == 5000000;\nloop invariant z == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= 10000000;\nloop invariant x >= 5000000 - (10000000 - y);\nloop invariant z >= 5000000 - x;\nloop invariant z <= 5000000;\nloop invariant x < y ==> z >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant z >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant z >= 0;\nloop invariant z == 0 ==> x >= 5000000;\nloop invariant z > 0 ==> x < 5000000;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0; loop invariant x <= y; loop invariant z >= 0; loop invariant z <= 5000000; loop invariant (x >= 5000000 ==> z >= 1); loop invariant (x < 5000000 ==> z == 5000000); loop invariant (x >= 5000000 ==> x == 5000000); loop invariant (x < 5000000 ==> x <= 5000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 5000000); loop invariant (x < 5000000 ==> y >= 5000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000);\n*/\n```",
            "```\n/*@\nloop invariant x <= y;\nloop invariant 0 <= x <= 10000000;\nloop invariant 0 <= y <= 10000000;\nloop invariant x + 1 == y ==> z == 5000000;\nloop invariant x < 5000000 ==> z >= 0;\nloop invariant y == 10000000 ==> z == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y; loop invariant z >= 0; loop invariant z <= 5000000; loop invariant x >= 5000000 ==> z == 5000000; loop invariant x < 5000000 ==> z > 5000000; loop invariant x <= y ==> z == 0;\n*/\n```",
            "```\n/*@\nloop invariant x > 0 ==> z > 0;\nloop invariant x > 0 ==> y > x;\nloop invariant z > 5000000 ==> x >= 5000000;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x < 5000000 ==> x < y;\nloop invariant y < 10000000 ==> x < y;\nloop invariant y >= 10000000 ==> x >= 10000000;\nloop invariant x == 0 ==> z == 5000000;\nloop invariant x == 0 ==> y == 10000000;\nloop invariant y == 10000000 ==> x == 10000000;\nloop invariant z == 0 ==> x == 10000000;\nloop invariant x == 0 ==> z == 5000000;\nloop invariant x == 0 ==> y == 10000000;\nloop invariant y == 10000000 ==> x == 10000000;\nloop invariant z == 0 ==> x == 10000000;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x == 0 ==> z == 5000000;\nloop invariant x == 0 ==> y == 10000000;\nloop invariant y == 10000000 ==> x == 10000000;\nloop invariant z == 0 ==> x == 10000000;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y <= 10000000;\nloop invariant z >= 5000000;\nloop invariant z <= 5000000;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 19,
                "annotations": "```\n/*@\nloop invariant 5000000 <= x <= y <= 10000000;\nloop invariant z == 5000000 * (x < 5000000);\nloop invariant z >= 0;\nloop invariant z <= 5000000;\nloop invariant x - (5000000 - z) == 5000000 * (x >= 5000000);\nloop invariant y <= x + (5000000 - z);\nloop invariant y >= 10000000 * (x < 5000000) + 5000000 * (x >= 5000000);\nloop invariant x - 1 <= y <= x + (5000000 - z) * (x >= 5000000);\nloop invariant x >= 5000000 * (x < 5000000) + (5000000 - z) * (x >= 5000000);\nloop invariant x - 1 <= y <= 10000000 * (x < 5000000) + (5000000 - z) * (x >= 5000000);\nloop invariant 0 <= z <= 5000000 * (x >= 5000000);\nloop invariant z == 0 * (x >= 5000000);\nloop invariant z == 0;\nloop invariant y == 10000000 * (x < 5000000);\nloop invariant y == 5000000 * (x >= 5000000);\nloop invariant x == y * (x >= 5000000);\nloop invariant x == 10000000 * (x < 5000000);\nloop invariant x == 5000000 * (x >= 5000000);\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\nloop invariant x == 10000000;\nloop invariant y == 10000000;\nloop invariant z == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\n\n\nloop invariant i3: z >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: y == 10000000;\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= z <= 5000000;\nloop invariant x >= 0;\nloop invariant x <= y;\nloop invariant x <= z;\nloop invariant x >= z ==> y == x;\nloop invariant x < z ==> y > x;\nloop invariant x > z ==> y < x;\nloop invariant x < y ==> x != z;\nloop invariant x == y ==> x == z;\nloop invariant x > y ==> x != z;\nloop invariant y == x ==> z == 0;\nloop invariant y > x ==> z != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: x <= y;\n\n\n\n\n\n\nloop invariant i10: x > y ==> x != z;\n\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= z;\nloop invariant x <= 10000000;\nloop invariant y >= 0;\nloop invariant y <= 10000000;\nloop invariant z >= 0;\nloop invariant z <= 5000000;\nloop invariant z == 0 ==> x >= y;\nloop invariant z == 0 ==> x <= y;\nloop invariant z == 0 ==> y == x;\nloop invariant z == 0 ==> x == y;\nloop invariant z == 0 ==> y == 10000000;\nloop invariant z == 0 ==> x == 10000000;\nloop invariant z == 0 ==> x == 10000000 && y == 10000000;\nloop invariant z == 0 ==> x >= 10000000 && y <= 10000000;\nloop invariant z == 0 ==> x >= y && x <= y && y == 10000000;\nloop invariant z == 0 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000;\nloop invariant z == 0 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000 ==> z == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 0 <= x <= y;\n\nloop invariant i3: x <= 10000000;\nloop invariant i4: y >= 0;\nloop invariant i5: y <= 10000000;\nloop invariant i6: z >= 0;\n\n\nloop invariant i9: z == 0 ==> x <= y;\n\n\n\n\n\n\n\n\nloop invariant i18: z == 0 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000 ==> z == 0;\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y == 10000000;\nloop invariant z == 5000000;\nloop invariant x <= y;\nloop invariant (x < 5000000) ==> (z == 5000000);\nloop invariant (x >= 5000000) ==> (z == 5000000 - (x - 5000000));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: y == 10000000;\n\nloop invariant i4: x <= y;\nloop invariant i5: (x < 5000000) ==> (z == 5000000);\nloop invariant i6: (x >= 5000000) ==> (z == 5000000 - (x - 5000000));\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= 10000000;\nloop invariant z == 5000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 0 <= x <= y <= 10000000;\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant z <= 5000000;\nloop invariant z >= 0;\nloop invariant x <= y;\nloop invariant z == 5000000;\nloop invariant z == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 0 <= x <= y;\n\nloop invariant i3: z >= 0;\nloop invariant i4: x <= y;\n\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= 10000000;\nloop invariant x >= 5000000 - (10000000 - y);\nloop invariant z >= 5000000 - x;\nloop invariant z <= 5000000;\nloop invariant x < y ==> z >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 0 <= x <= y <= 10000000;\n\nloop invariant i3: z >= 5000000 - x;\n\nloop invariant i5: x < y ==> z >= 0;\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant z >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: z >= 0;\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant z >= 0;\nloop invariant z == 0 ==> x >= 5000000;\nloop invariant z > 0 ==> x < 5000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: z >= 0;\nloop invariant i3: z == 0 ==> x >= 5000000;\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x >= 0; loop invariant x <= y; loop invariant z >= 0; loop invariant z <= 5000000; loop invariant (x >= 5000000 ==> z >= 1); loop invariant (x < 5000000 ==> z == 5000000); loop invariant (x >= 5000000 ==> x == 5000000); loop invariant (x < 5000000 ==> x <= 5000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 5000000); loop invariant (x < 5000000 ==> y >= 5000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: x >= 0; loop invariant x <= y; loop invariant z >= 0; loop invariant z <= 5000000; loop invariant (x >= 5000000 ==> z >= 1); loop invariant (x < 5000000 ==> z == 5000000); loop invariant (x >= 5000000 ==> x == 5000000); loop invariant (x < 5000000 ==> x <= 5000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 5000000); loop invariant (x < 5000000 ==> y >= 5000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000);\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x <= y;\nloop invariant 0 <= x <= 10000000;\nloop invariant 0 <= y <= 10000000;\nloop invariant x + 1 == y ==> z == 5000000;\nloop invariant x < 5000000 ==> z >= 0;\nloop invariant y == 10000000 ==> z == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: x <= y;\nloop invariant i2: 0 <= x <= 10000000;\nloop invariant i3: 0 <= y <= 10000000;\n\nloop invariant i5: x < 5000000 ==> z >= 0;\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x >= z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 0 <= x <= y;\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y; loop invariant z >= 0; loop invariant z <= 5000000; loop invariant x >= 5000000 ==> z == 5000000; loop invariant x < 5000000 ==> z > 5000000; loop invariant x <= y ==> z == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 0 <= x <= y; loop invariant z >= 0; loop invariant z <= 5000000; loop invariant x >= 5000000 ==> z == 5000000; loop invariant x < 5000000 ==> z > 5000000; loop invariant x <= y ==> z == 0;\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant x > 0 ==> z > 0;\nloop invariant x > 0 ==> y > x;\nloop invariant z > 5000000 ==> x >= 5000000;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x < 5000000 ==> x < y;\nloop invariant y < 10000000 ==> x < y;\nloop invariant y >= 10000000 ==> x >= 10000000;\nloop invariant x == 0 ==> z == 5000000;\nloop invariant x == 0 ==> y == 10000000;\nloop invariant y == 10000000 ==> x == 10000000;\nloop invariant z == 0 ==> x == 10000000;\nloop invariant x == 0 ==> z == 5000000;\nloop invariant x == 0 ==> y == 10000000;\nloop invariant y == 10000000 ==> x == 10000000;\nloop invariant z == 0 ==> x == 10000000;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x == 0 ==> z == 5000000;\nloop invariant x == 0 ==> y == 10000000;\nloop invariant y == 10000000 ==> x == 10000000;\nloop invariant z == 0 ==> x == 10000000;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\nloop invariant x < 5000000 ==> z >= 1;\nloop invariant x >= 5000000 ==> z <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\n\n\nloop invariant i3: z > 5000000 ==> x >= 5000000;\n\nloop invariant i5: x < 5000000 ==> z >= 1;\n\n\n\nloop invariant i9: x == 0 ==> z == 5000000;\nloop invariant i10: x == 0 ==> y == 10000000;\n\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x <= y;\nloop invariant x >= 0;\nloop invariant y <= 10000000;\nloop invariant z >= 5000000;\nloop invariant z <= 5000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: x <= y;\nloop invariant i3: x >= 0;\nloop invariant i4: y <= 10000000;\n\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 14: invalid operands to binary *; unexpected ℤ and 𝔹. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 5000000 <= x <= y <= 10000000;\nloop invariant i2: z == 5000000 * (x < 5000000);\nloop invariant i3: z >= 0;\nloop invariant i4: z <= 5000000;\nloop invariant i5: x - (5000000 - z) == 5000000 * (x >= 5000000);\nloop invariant i6: y <= x + (5000000 - z);\nloop invariant i7: y >= 10000000 * (x < 5000000) + 5000000 * (x >= 5000000);\nloop invariant i8: x - 1 <= y <= x + (5000000 - z) * (x >= 5000000);\nloop invariant i9: x >= 5000000 * (x < 5000000) + (5000000 - z) * (x >= 5000000);\nloop invariant i10: x - 1 <= y <= 10000000 * (x < 5000000) + (5000000 - z) * (x >= 5000000);\nloop invariant i11: 0 <= z <= 5000000 * (x >= 5000000);\nloop invariant i12: z == 0 * (x >= 5000000);\nloop invariant i13: z == 0;\nloop invariant i14: y == 10000000 * (x < 5000000);\nloop invariant i15: y == 5000000 * (x >= 5000000);\nloop invariant i16: x == y * (x >= 5000000);\nloop invariant i17: x == 10000000 * (x < 5000000);\nloop invariant i18: x == 5000000 * (x >= 5000000);\nloop invariant i19: y == 10000000;\nloop invariant i20: x == 10000000;\nloop invariant i21: 0 <= z <= 5000000;\nloop invariant i22: x >= 0;\nloop invariant i23: x <= y;\nloop invariant i24: x <= z;\nloop invariant i25: x >= z ==> y == x;\nloop invariant i26: x < z ==> y > x;\nloop invariant i27: x > z ==> y < x;\nloop invariant i28: x < y ==> x != z;\nloop invariant i29: x == y ==> x == z;\nloop invariant i30: x > y ==> x != z;\nloop invariant i31: y == x ==> z == 0;\nloop invariant i32: y > x ==> z != 0;\nloop invariant i33: 0 <= x <= y;\nloop invariant i34: x >= z;\nloop invariant i35: x <= 10000000;\nloop invariant i36: y >= 0;\nloop invariant i37: y <= 10000000;\nloop invariant i38: z == 0 ==> x >= y;\nloop invariant i39: z == 0 ==> x <= y;\nloop invariant i40: z == 0 ==> y == x;\nloop invariant i41: z == 0 ==> x == y;\nloop invariant i42: z == 0 ==> y == 10000000;\nloop invariant i43: z == 0 ==> x == 10000000;\nloop invariant i44: z == 0 ==> x == 10000000 && y == 10000000;\nloop invariant i45: z == 0 ==> x >= 10000000 && y <= 10000000;\nloop invariant i46: z == 0 ==> x >= y && x <= y && y == 10000000;\nloop invariant i47: z == 0 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000;\nloop invariant i48: z == 0 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000 ==> z == 0;\nloop invariant i49: z == 5000000;\nloop invariant i50: (x < 5000000) ==> (z == 5000000);\nloop invariant i51: (x >= 5000000) ==> (z == 5000000 - (x - 5000000));\nloop invariant i52: 0 <= x <= y <= 10000000;\nloop invariant i53: x >= 5000000 - (10000000 - y);\nloop invariant i54: z >= 5000000 - x;\nloop invariant i55: x < y ==> z >= 0;\nloop invariant i56: z == 0 ==> x >= 5000000;\nloop invariant i57: z > 0 ==> x < 5000000;\nloop invariant i58: x >= 0; loop invariant x <= y; loop invariant z >= 0; loop invariant z <= 5000000; loop invariant (x >= 5000000 ==> z >= 1); loop invariant (x < 5000000 ==> z == 5000000); loop invariant (x >= 5000000 ==> x == 5000000); loop invariant (x < 5000000 ==> x <= 5000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 5000000); loop invariant (x < 5000000 ==> y >= 5000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000);\nloop invariant i59: 0 <= x <= 10000000;\nloop invariant i60: 0 <= y <= 10000000;\nloop invariant i61: x + 1 == y ==> z == 5000000;\nloop invariant i62: x < 5000000 ==> z >= 0;\nloop invariant i63: y == 10000000 ==> z == 0;\nloop invariant i64: 0 <= x <= y; loop invariant z >= 0; loop invariant z <= 5000000; loop invariant x >= 5000000 ==> z == 5000000; loop invariant x < 5000000 ==> z > 5000000; loop invariant x <= y ==> z == 0;\nloop invariant i65: x > 0 ==> z > 0;\nloop invariant i66: x > 0 ==> y > x;\nloop invariant i67: z > 5000000 ==> x >= 5000000;\nloop invariant i68: x >= 5000000 ==> z <= 0;\nloop invariant i69: x < 5000000 ==> z >= 1;\nloop invariant i70: x < 5000000 ==> x < y;\nloop invariant i71: y < 10000000 ==> x < y;\nloop invariant i72: y >= 10000000 ==> x >= 10000000;\nloop invariant i73: x == 0 ==> z == 5000000;\nloop invariant i74: x == 0 ==> y == 10000000;\nloop invariant i75: y == 10000000 ==> x == 10000000;\nloop invariant i76: z >= 5000000;\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 21,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\n\n\nloop invariant i3: z >= 0;\nloop invariant i4: z <= 5000000;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: y == 10000000;\n\nloop invariant i21: 0 <= z <= 5000000;\nloop invariant i22: x >= 0;\nloop invariant i23: x <= y;\nloop invariant i24: x <= z;\nloop invariant i25: x >= z ==> y == x;\nloop invariant i26: x < z ==> y > x;\nloop invariant i27: x > z ==> y < x;\nloop invariant i28: x < y ==> x != z;\nloop invariant i29: x == y ==> x == z;\nloop invariant i30: x > y ==> x != z;\nloop invariant i31: y == x ==> z == 0;\nloop invariant i32: y > x ==> z != 0;\nloop invariant i33: 0 <= x <= y;\n\nloop invariant i35: x <= 10000000;\nloop invariant i36: y >= 0;\nloop invariant i37: y <= 10000000;\nloop invariant i38: z == 0 ==> x >= y;\nloop invariant i39: z == 0 ==> x <= y;\nloop invariant i40: z == 0 ==> y == x;\nloop invariant i41: z == 0 ==> x == y;\nloop invariant i42: z == 0 ==> y == 10000000;\nloop invariant i43: z == 0 ==> x == 10000000;\nloop invariant i44: z == 0 ==> x == 10000000 && y == 10000000;\nloop invariant i45: z == 0 ==> x >= 10000000 && y <= 10000000;\nloop invariant i46: z == 0 ==> x >= y && x <= y && y == 10000000;\nloop invariant i47: z == 0 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000;\nloop invariant i48: z == 0 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000 ==> x >= 5000000 && y <= 10000000 && x == 10000000 && y == 10000000 ==> z == 0;\nloop invariant i49: z == 5000000;\nloop invariant i50: (x < 5000000) ==> (z == 5000000);\nloop invariant i51: (x >= 5000000) ==> (z == 5000000 - (x - 5000000));\nloop invariant i52: 0 <= x <= y <= 10000000;\n\nloop invariant i54: z >= 5000000 - x;\nloop invariant i55: x < y ==> z >= 0;\nloop invariant i56: z == 0 ==> x >= 5000000;\nloop invariant i57: z > 0 ==> x < 5000000;\nloop invariant i58: x >= 0; loop invariant x <= y; loop invariant z >= 0; loop invariant z <= 5000000; loop invariant (x >= 5000000 ==> z >= 1); loop invariant (x < 5000000 ==> z == 5000000); loop invariant (x >= 5000000 ==> x == 5000000); loop invariant (x < 5000000 ==> x <= 5000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 5000000); loop invariant (x < 5000000 ==> y >= 5000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000); loop invariant (x >= 5000000 ==> y == 10000000); loop invariant (x < 5000000 ==> y <= 10000000); loop invariant (x < 5000000 ==> y >= 10000000);\nloop invariant i59: 0 <= x <= 10000000;\nloop invariant i60: 0 <= y <= 10000000;\nloop invariant i61: x + 1 == y ==> z == 5000000;\nloop invariant i62: x < 5000000 ==> z >= 0;\nloop invariant i63: y == 10000000 ==> z == 0;\nloop invariant i64: 0 <= x <= y; loop invariant z >= 0; loop invariant z <= 5000000; loop invariant x >= 5000000 ==> z == 5000000; loop invariant x < 5000000 ==> z > 5000000; loop invariant x <= y ==> z == 0;\nloop invariant i65: x > 0 ==> z > 0;\nloop invariant i66: x > 0 ==> y > x;\nloop invariant i67: z > 5000000 ==> x >= 5000000;\nloop invariant i68: x >= 5000000 ==> z <= 0;\nloop invariant i69: x < 5000000 ==> z >= 1;\nloop invariant i70: x < 5000000 ==> x < y;\nloop invariant i71: y < 10000000 ==> x < y;\nloop invariant i72: y >= 10000000 ==> x >= 10000000;\nloop invariant i73: x == 0 ==> z == 5000000;\nloop invariant i74: x == 0 ==> y == 10000000;\nloop invariant i75: y == 10000000 ==> x == 10000000;\nloop invariant i76: z >= 5000000;\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv3.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_8.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_12.c"
        ],
        "skipped": [],
        "total": 179,
        "success_count": 160,
        "failure_count": 19,
        "success_rate": 0.8938547486033519
    }
}