{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= z <= i + j;\nloop invariant x <= i;\nloop invariant y <= j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant -1 <= y <= LARGE_INT;\nloop invariant z >= 0;\nloop invariant (i == j) ==> (y == -z);\nloop invariant (i != j) ==> (y == j - i);\nloop invariant (i >= 0 && i <= LARGE_INT) ==> (x == i);\nloop invariant (j >= 0) ==> (y == j);\nloop invariant (x == 0) ==> (z == i);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x);\nloop invariant (x == 0 && y >= 0 && y < LARGE_INT) ==> (z == i - y / 2);\nloop invariant (x == 0 && y == -1) ==> (z == i - 1);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2 || z == i - y / 2 - 3);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3 || y == j - 2 * x - 4);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2 || z == i - y / 2 - 3 || z == i - y / 2 - 4);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3 || y == j - 2 * x - 4 || y == j - 2 * x - 5);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2 || z == i - y / 2 - 3 || z == i - y / 2 - 4 || z == i - y / 2 - 5);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3 || y == j - 2 * x - 4 || y == j - 2 * x - 5 || y == j - 2 * x - 6);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant 0 <= z <= LARGE_INT;\nloop invariant x + y == z + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= LARGE_INT;\nloop invariant y <= LARGE_INT;\nloop invariant z <= LARGE_INT;\nloop invariant (x == 0 ==> y == -z && y == j);\nloop invariant (i == j ==> x + y == -z && x + y == j);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j;\nloop invariant 0 <= x <= i;\nloop invariant -LARGE_INT <= y <= j - j % 2;\nloop invariant 0 <= z <= i;\nloop invariant z == (i - j) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 1000000;\nloop invariant 0 <= y + z <= 1000000;\nloop invariant 0 <= x <= 1000000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (i == j) ==> (y == -z);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 100000 >= i >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= j <= z;\nloop invariant 0 <= y <= j;\nloop invariant y == (j - z);\nloop invariant j == (i + z);\nloop invariant i == (j + z);\nloop invariant y == (j - z);\nloop invariant x == (i - z);\nloop invariant x == (i - (j - y));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i >= j;\nloop invariant z == j - i;\nloop invariant x == i - j;\nloop invariant y == LARGE_INT - j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= LARGE_INT;\nloop invariant x <= LARGE_INT;\nloop invariant y <= LARGE_INT;\nloop invariant x + y == LARGE_INT;\nloop invariant x + y >= LARGE_INT;\nloop invariant x + y <= LARGE_INT;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\n*/\n```",
            "```\n/*@\nloop invariant 1. 0 <= x <= 1000000;\nloop invariant 2. i = x;\nloop invariant 3. 0 <= y;\nloop invariant 4. !((i == j) && (y == -z));\nloop invariant 5. ((i == j) ==> (y == -z));\nloop invariant 6. 0 <= i;\nloop invariant 7. 0 <= j;\nloop invariant 8. 0 <= z;\nloop invariant 9. j <= i;\nloop invariant 10. !(i == j);\nloop invariant 11. !(j == 0);\nloop invariant 12. !(x == 0);\nloop invariant 13. !(y == -z);\nloop invariant 14. !(i == j && y == -z);\nloop invariant 15. !(i == j && y == -z && x == 0);\nloop invariant 16. !(i == j && y == -z && x == 0 && j == 0);\nloop invariant 17. !(i == j && y == -z && x == 0 && j == 0 && i == 0);\nloop invariant 18. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0);\nloop invariant 19. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant 20. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant 21. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant 22. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant 23. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant 24. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant 25. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant 26. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant 27. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant 28. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant x == i - z;\nloop invariant z >= 0;\nloop invariant i >= z;\nloop invariant j >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z <= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2 * j;\nloop invariant i - j <= x <= i;\nloop invariant j - 2 * x <= y <= j;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant z <= j;\nloop invariant (i == j) ==> (y == -z);\nloop invariant (i != j) ==> (x >= 0);\nloop invariant (i != j) ==> (z <= j);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y <= i);\nloop invariant (i != j) ==> (z <= y);\nloop invariant (i != j) ==> (y <= i + z);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant 0 <= z <= LARGE_INT;\nloop invariant x >= z;\nloop invariant y <= -z;\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant 0 <= z <= LARGE_INT;\nloop invariant 0 <= z <= LARGE_INT ==> (x == 0 && y == -z);\nloop invariant x >= z;\nloop invariant y <= -z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant z >= 0;\nloop invariant i - x == z;\nloop invariant y - 2 * z == j;\nloop invariant if (i == j) then y == -z;\nloop invariant if (i == j) then y == -z ==> (y == -z);\nloop invariant if (i == j) then y == -z ==> (y == -z);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= i;\nloop invariant y <= j;\nloop invariant i == (j - y);\nloop invariant z == (y - j);\nloop invariant i == (j - y) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= z <= i + j;\nloop invariant x <= i;\nloop invariant y <= j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: x <= i;\nloop invariant i3: y <= j;\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant -1 <= y <= LARGE_INT;\nloop invariant z >= 0;\nloop invariant (i == j) ==> (y == -z);\nloop invariant (i != j) ==> (y == j - i);\nloop invariant (i >= 0 && i <= LARGE_INT) ==> (x == i);\nloop invariant (j >= 0) ==> (y == j);\nloop invariant (x == 0) ==> (z == i);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x);\nloop invariant (x == 0 && y >= 0 && y < LARGE_INT) ==> (z == i - y / 2);\nloop invariant (x == 0 && y == -1) ==> (z == i - 1);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2 || z == i - y / 2 - 3);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3 || y == j - 2 * x - 4);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2 || z == i - y / 2 - 3 || z == i - y / 2 - 4);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3 || y == j - 2 * x - 4 || y == j - 2 * x - 5);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2 || z == i - y / 2 - 3 || z == i - y / 2 - 4 || z == i - y / 2 - 5);\nloop invariant (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3 || y == j - 2 * x - 4 || y == j - 2 * x - 5 || y == j - 2 * x - 6);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= LARGE_INT;\n\nloop invariant i3: z >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant 0 <= z <= LARGE_INT;\nloop invariant x + y == z + j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= LARGE_INT;\nloop invariant y <= LARGE_INT;\nloop invariant z <= LARGE_INT;\nloop invariant (x == 0 ==> y == -z && y == j);\nloop invariant (i == j ==> x + y == -z && x + y == j);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= LARGE_INT;\n\n\n\nloop invariant i5: x >= 0;\n\nloop invariant i7: z >= 0;\nloop invariant i8: x <= LARGE_INT;\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= j;\nloop invariant 0 <= x <= i;\nloop invariant -LARGE_INT <= y <= j - j % 2;\nloop invariant 0 <= z <= i;\nloop invariant z == (i - j) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= x <= i;\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 1000000;\nloop invariant 0 <= y + z <= 1000000;\nloop invariant 0 <= x <= 1000000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (i == j) ==> (y == -z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\n\nloop invariant i5: 0 <= x <= 1000000;\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 100000 >= i >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= j <= z;\nloop invariant 0 <= y <= j;\nloop invariant y == (j - z);\nloop invariant j == (i + z);\nloop invariant i == (j + z);\nloop invariant y == (j - z);\nloop invariant x == (i - z);\nloop invariant x == (i - (j - y));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\n\n\n\n\nloop invariant i7: x == (i - z);\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant i >= j;\nloop invariant z == j - i;\nloop invariant x == i - j;\nloop invariant y == LARGE_INT - j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant z <= LARGE_INT;\nloop invariant x <= LARGE_INT;\nloop invariant y <= LARGE_INT;\nloop invariant x + y == LARGE_INT;\nloop invariant x + y >= LARGE_INT;\nloop invariant x + y <= LARGE_INT;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\nloop invariant x + y <= LARGE_INT - j;\nloop invariant x + y == LARGE_INT - j;\nloop invariant x + y >= LARGE_INT - j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: 0 <= i <= LARGE_INT;\n\n\n\n\nloop invariant i7: x >= 0;\n\nloop invariant i9: z >= 0;\n\nloop invariant i11: x <= LARGE_INT;\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 28,
                "annotations": "```\n/*@\nloop invariant 1. 0 <= x <= 1000000;\nloop invariant 2. i = x;\nloop invariant 3. 0 <= y;\nloop invariant 4. !((i == j) && (y == -z));\nloop invariant 5. ((i == j) ==> (y == -z));\nloop invariant 6. 0 <= i;\nloop invariant 7. 0 <= j;\nloop invariant 8. 0 <= z;\nloop invariant 9. j <= i;\nloop invariant 10. !(i == j);\nloop invariant 11. !(j == 0);\nloop invariant 12. !(x == 0);\nloop invariant 13. !(y == -z);\nloop invariant 14. !(i == j && y == -z);\nloop invariant 15. !(i == j && y == -z && x == 0);\nloop invariant 16. !(i == j && y == -z && x == 0 && j == 0);\nloop invariant 17. !(i == j && y == -z && x == 0 && j == 0 && i == 0);\nloop invariant 18. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0);\nloop invariant 19. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant 20. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant 21. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant 22. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant 23. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant 24. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant 25. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant 26. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant 27. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant 28. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= j;\nloop invariant x == i - z;\nloop invariant z >= 0;\nloop invariant i >= z;\nloop invariant j >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z <= 1000000;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\nloop invariant i2: x == i - z;\nloop invariant i3: z >= 0;\nloop invariant i4: i >= z;\nloop invariant i5: j >= y;\nloop invariant i6: x >= 0;\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2 * j;\nloop invariant i - j <= x <= i;\nloop invariant j - 2 * x <= y <= j;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant z <= j;\nloop invariant (i == j) ==> (y == -z);\nloop invariant (i != j) ==> (x >= 0);\nloop invariant (i != j) ==> (z <= j);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y <= i);\nloop invariant (i != j) ==> (z <= y);\nloop invariant (i != j) ==> (y <= i + z);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\nloop invariant (i != j) ==> (y <= i);\nloop invariant (i != j) ==> (0 <= y);\nloop invariant (i != j) ==> (0 <= z);\nloop invariant (i != j) ==> (0 <= x);\nloop invariant (i != j) ==> (i - j <= x);\nloop invariant (i != j) ==> (x <= i);\nloop invariant (i != j) ==> (i - j <= y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: z >= 0;\n\n\nloop invariant i8: (i != j) ==> (x >= 0);\n\nloop invariant i10: (i != j) ==> (x <= i);\n\n\n\n\nloop invariant i15: (i != j) ==> (0 <= z);\nloop invariant i16: (i != j) ==> (0 <= x);\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant 0 <= z <= LARGE_INT;\nloop invariant x >= z;\nloop invariant y <= -z;\nloop invariant 0 <= x <= LARGE_INT;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant 0 <= z <= LARGE_INT;\nloop invariant 0 <= z <= LARGE_INT ==> (x == 0 && y == -z);\nloop invariant x >= z;\nloop invariant y <= -z;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= LARGE_INT;\n\n\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant z >= 0;\nloop invariant i - x == z;\nloop invariant y - 2 * z == j;\nloop invariant if (i == j) then y == -z;\nloop invariant if (i == j) then y == -z ==> (y == -z);\nloop invariant if (i == j) then y == -z ==> (y == -z);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= x <= i;\n\nloop invariant i3: z >= 0;\nloop invariant i4: i - x == z;\n\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0;\nloop invariant i <= 1000000;\nloop invariant j >= 0;\nloop invariant z >= 0;\nloop invariant x >= i;\nloop invariant y <= j;\nloop invariant i == (j - y);\nloop invariant z == (y - j);\nloop invariant i == (j - y) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\nloop invariant z == (y - j) ==> i == (j - y);\nloop invariant z == (y - j) ==> y == (j - i);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\n\n\nloop invariant i3: i >= 0;\nloop invariant i4: i <= 1000000;\nloop invariant i5: j >= 0;\nloop invariant i6: z >= 0;\n\nloop invariant i8: y <= j;\n\n\nloop invariant i11: i == (j - y) ==> y == (j - i);\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 89: unexpected token '0'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= z <= i + j;\nloop invariant i2: x <= i;\nloop invariant i3: y <= j;\nloop invariant i4: 0 <= x <= LARGE_INT;\nloop invariant i5: -1 <= y <= LARGE_INT;\nloop invariant i6: z >= 0;\nloop invariant i7: (i == j) ==> (y == -z);\nloop invariant i8: (i != j) ==> (y == j - i);\nloop invariant i9: (i >= 0 && i <= LARGE_INT) ==> (x == i);\nloop invariant i10: (j >= 0) ==> (y == j);\nloop invariant i11: (x == 0) ==> (z == i);\nloop invariant i12: (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x);\nloop invariant i13: (x == 0 && y >= 0 && y < LARGE_INT) ==> (z == i - y / 2);\nloop invariant i14: (x == 0 && y == -1) ==> (z == i - 1);\nloop invariant i15: (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1);\nloop invariant i16: (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1);\nloop invariant i17: (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1);\nloop invariant i18: (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1);\nloop invariant i19: (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2);\nloop invariant i20: (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2);\nloop invariant i21: (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3);\nloop invariant i22: (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2 || z == i - y / 2 - 3);\nloop invariant i23: (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3 || y == j - 2 * x - 4);\nloop invariant i24: (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2 || z == i - y / 2 - 3 || z == i - y / 2 - 4);\nloop invariant i25: (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3 || y == j - 2 * x - 4 || y == j - 2 * x - 5);\nloop invariant i26: (x >= 0 && x < LARGE_INT) ==> (z == i - y / 2 || z == i - 1 || z == i - y / 2 - 1 || z == i - y / 2 - 2 || z == i - y / 2 - 3 || z == i - y / 2 - 4 || z == i - y / 2 - 5);\nloop invariant i27: (x >= 0 && x < LARGE_INT) ==> (y == j - 2 * x || y == -1 || y == j - 2 * x - 1 || y == j - 2 * x - 2 || y == j - 2 * x - 3 || y == j - 2 * x - 4 || y == j - 2 * x - 5 || y == j - 2 * x - 6);\nloop invariant i28: 0 <= y <= LARGE_INT;\nloop invariant i29: 0 <= z <= LARGE_INT;\nloop invariant i30: x + y == z + j;\nloop invariant i31: x >= 0;\nloop invariant i32: y >= 0;\nloop invariant i33: x <= LARGE_INT;\nloop invariant i34: y <= LARGE_INT;\nloop invariant i35: z <= LARGE_INT;\nloop invariant i36: (x == 0 ==> y == -z && y == j);\nloop invariant i37: (i == j ==> x + y == -z && x + y == j);\nloop invariant i38: 0 <= i <= LARGE_INT;\nloop invariant i39: 0 <= j;\nloop invariant i40: 0 <= x <= i;\nloop invariant i41: -LARGE_INT <= y <= j - j % 2;\nloop invariant i42: 0 <= z <= i;\nloop invariant i43: z == (i - j) / 2;\nloop invariant i44: 0 <= y <= 100000;\nloop invariant i45: x >= (1 + (y - 1) * y / 2);\nloop invariant i46: 0 <= z <= 1000000;\nloop invariant i47: 0 <= y + z <= 1000000;\nloop invariant i48: 0 <= x <= 1000000;\nloop invariant i49: 100000 >= i >= 0;\nloop invariant i50: 0 <= j <= z;\nloop invariant i51: 0 <= y <= j;\nloop invariant i52: y == (j - z);\nloop invariant i53: j == (i + z);\nloop invariant i54: i == (j + z);\nloop invariant i55: x == (i - z);\nloop invariant i56: x == (i - (j - y));\nloop invariant i57: 0 <= j <= LARGE_INT;\nloop invariant i58: i >= j;\nloop invariant i59: z == j - i;\nloop invariant i60: x == i - j;\nloop invariant i61: y == LARGE_INT - j;\nloop invariant i62: x + y == LARGE_INT;\nloop invariant i63: x + y >= LARGE_INT;\nloop invariant i64: x + y <= LARGE_INT;\nloop invariant i65: x + y == LARGE_INT - j;\nloop invariant i66: x + y >= LARGE_INT - j;\nloop invariant i67: x + y <= LARGE_INT - j;\nloop invariant i68: 1. 0 <= x <= 1000000;\nloop invariant i69: 2. i = x;\nloop invariant i70: 3. 0 <= y;\nloop invariant i71: 4. !((i == j) && (y == -z));\nloop invariant i72: 5. ((i == j) ==> (y == -z));\nloop invariant i73: 6. 0 <= i;\nloop invariant i74: 7. 0 <= j;\nloop invariant i75: 8. 0 <= z;\nloop invariant i76: 9. j <= i;\nloop invariant i77: 10. !(i == j);\nloop invariant i78: 11. !(j == 0);\nloop invariant i79: 12. !(x == 0);\nloop invariant i80: 13. !(y == -z);\nloop invariant i81: 14. !(i == j && y == -z);\nloop invariant i82: 15. !(i == j && y == -z && x == 0);\nloop invariant i83: 16. !(i == j && y == -z && x == 0 && j == 0);\nloop invariant i84: 17. !(i == j && y == -z && x == 0 && j == 0 && i == 0);\nloop invariant i85: 18. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0);\nloop invariant i86: 19. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant i87: 20. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant i88: 21. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant i89: 22. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant i90: 23. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant i91: 24. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant i92: 25. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant i93: 26. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant i94: 27. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0);\nloop invariant i95: 28. !(i == j && y == -z && x == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0 && i == 0 && j == 0);\nloop invariant i96: x == i - z;\nloop invariant i97: i >= z;\nloop invariant i98: j >= y;\nloop invariant i99: z <= 1000000;\nloop invariant i100: 0 <= y <= 2 * j;\nloop invariant i101: i - j <= x <= i;\nloop invariant i102: j - 2 * x <= y <= j;\nloop invariant i103: z <= j;\nloop invariant i104: (i != j) ==> (x >= 0);\nloop invariant i105: (i != j) ==> (z <= j);\nloop invariant i106: (i != j) ==> (x <= i);\nloop invariant i107: (i != j) ==> (i - j <= y <= i);\nloop invariant i108: (i != j) ==> (z <= y);\nloop invariant i109: (i != j) ==> (y <= i + z);\nloop invariant i110: (i != j) ==> (0 <= y);\nloop invariant i111: (i != j) ==> (0 <= z);\nloop invariant i112: (i != j) ==> (0 <= x);\nloop invariant i113: (i != j) ==> (i - j <= x);\nloop invariant i114: (i != j) ==> (i - j <= y);\nloop invariant i115: (i != j) ==> (y <= i);\nloop invariant i116: x >= z;\nloop invariant i117: y <= -z;\nloop invariant i118: 0 <= z <= LARGE_INT ==> (x == 0 && y == -z);\nloop invariant i119: i - x == z;\nloop invariant i120: y - 2 * z == j;\nloop invariant i121: if (i == j) then y == -z;\nloop invariant i122: if (i == j) then y == -z ==> (y == -z);\nloop invariant i123: i >= 0;\nloop invariant i124: i <= 1000000;\nloop invariant i125: j >= 0;\nloop invariant i126: x >= i;\nloop invariant i127: i == (j - y);\nloop invariant i128: z == (y - j);\nloop invariant i129: i == (j - y) ==> y == (j - i);\nloop invariant i130: z == (y - j) ==> i == (j - y);\nloop invariant i131: z == (y - j) ==> y == (j - i);\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 53,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    /*@\nloop invariant i1: 0 <= z <= i + j;\nloop invariant i2: x <= i;\nloop invariant i3: y <= j;\nloop invariant i4: 0 <= x <= LARGE_INT;\n\nloop invariant i6: z >= 0;\n\n\n\n\nloop invariant i11: (x == 0) ==> (z == i);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i29: 0 <= z <= LARGE_INT;\n\nloop invariant i31: x >= 0;\n\nloop invariant i33: x <= LARGE_INT;\n\nloop invariant i35: z <= LARGE_INT;\n\n\nloop invariant i38: 0 <= i <= LARGE_INT;\nloop invariant i39: 0 <= j;\nloop invariant i40: 0 <= x <= i;\n\nloop invariant i42: 0 <= z <= i;\n\n\n\nloop invariant i46: 0 <= z <= 1000000;\n\nloop invariant i48: 0 <= x <= 1000000;\n\n\n\n\n\n\nloop invariant i55: x == (i - z);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i96: x == i - z;\nloop invariant i97: i >= z;\nloop invariant i98: j >= y;\nloop invariant i99: z <= 1000000;\n\n\n\n\nloop invariant i104: (i != j) ==> (x >= 0);\n\nloop invariant i106: (i != j) ==> (x <= i);\n\n\n\n\nloop invariant i111: (i != j) ==> (0 <= z);\nloop invariant i112: (i != j) ==> (0 <= x);\n\n\n\n\n\n\nloop invariant i119: i - x == z;\n\n\n\nloop invariant i123: i >= 0;\nloop invariant i124: i <= 1000000;\nloop invariant i125: j >= 0;\n\n\n\nloop invariant i129: i == (j - y) ==> y == (j - i);\n\n\n*/\nwhile(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n\n    }\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c"
        ],
        "skipped": [],
        "total": 115,
        "success_count": 100,
        "failure_count": 15,
        "success_rate": 0.8695652173913043
    }
}