{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/16.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant (x == n);\nloop invariant m >= 0;\nloop invariant (m <= n);\nloop invariant (m <= x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant m <= x <= n;\nloop invariant if n > 0 then x <= n;\nloop invariant if n > 0 then m >= 0;\nloop invariant if n > 0 and m >= 0 then x >= m;\nloop invariant if n > 0 and m >= 0 then m <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant (n > 0 ==> x >= m);\nloop invariant (n > 0 ==> x == n);\nloop invariant (n > 0 ==> m == x);\nloop invariant (n > 0 ==> x > m);\nloop invariant (n > 0 ==> x >= 0);\nloop invariant (n > 0 ==> x <= n);\nloop invariant (n > 0 ==> m >= 0);\nloop invariant (n > 0 ==> m <= n);\nloop invariant (n > 0 ==> x < n);\nloop invariant (n > 0 ==> x > 0);\nloop invariant (n > 0 ==> x < n);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= m <= n;\nloop invariant n == 0 ==> x == 0;\nloop invariant n != 0 ==> x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (m >= 0) ==> (n > 0);\nloop invariant (m <= n) ==> (n >= 0);\nloop invariant (m < n) ==> (n > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> m <= x < n;\nloop invariant m >= 0 ==> m <= n;\nloop invariant m >= 0 ==> m <= m + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (if n > 0 then m >= 0 else \\true);\nloop invariant (if unknown() then (m = x) else \\true);\nloop invariant (if x >= n then m = (if unknown() then x else m) else \\true);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= x;\nloop invariant m >= 0;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant 0 <= n <= INT_MAX;\nloop invariant n >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n <= INT_MAX;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m == 0 ==> n <= 0;\nloop invariant m > 0 ==> n > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m == (if x < n then x else m);\nloop invariant (if x < n then m < x else m >= x);\nloop invariant (if x < n then m >= 0 else m == m);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == m || x == n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant x >= m;\nloop invariant n > 0 ==> x >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0 ==> x >= m;\nloop invariant x >= m ==> x <= n;\nloop invariant x >= m ==> x <= n;\nloop invariant x >= m ==> x == n;\nloop invariant x == n ==> x >= m;\nloop invariant x == n ==> x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> m <= x;\nloop invariant m >= 0 ==> m <= n;\nloop invariant m >= 0 ==> m >= 0;\nloop invariant m >= 0 ==> m >= x;\nloop invariant m >= 0 ==> m >= n;\nloop invariant m >= 0 ==> m <= m;\nloop invariant m >= 0 ==> m >= m;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant (x == n);\nloop invariant m >= 0;\nloop invariant (m <= n);\nloop invariant (m <= x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m >= 0;\n\nloop invariant i5: (m <= x);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant m <= x <= n;\nloop invariant if n > 0 then x <= n;\nloop invariant if n > 0 then m >= 0;\nloop invariant if n > 0 and m >= 0 then x >= m;\nloop invariant if n > 0 and m >= 0 then m <= x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant (n > 0 ==> x >= m);\nloop invariant (n > 0 ==> x == n);\nloop invariant (n > 0 ==> m == x);\nloop invariant (n > 0 ==> x > m);\nloop invariant (n > 0 ==> x >= 0);\nloop invariant (n > 0 ==> x <= n);\nloop invariant (n > 0 ==> m >= 0);\nloop invariant (n > 0 ==> m <= n);\nloop invariant (n > 0 ==> x < n);\nloop invariant (n > 0 ==> x > 0);\nloop invariant (n > 0 ==> x < n);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\nloop invariant (n > 0 ==> m > 0);\nloop invariant (n > 0 ==> m < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: (n > 0 ==> x >= m);\n\n\n\nloop invariant i7: (n > 0 ==> x >= 0);\nloop invariant i8: (n > 0 ==> x <= n);\nloop invariant i9: (n > 0 ==> m >= 0);\nloop invariant i10: (n > 0 ==> m <= n);\n\n\nloop invariant i13: (n > 0 ==> m < n);\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= m <= n;\nloop invariant n == 0 ==> x == 0;\nloop invariant n != 0 ==> x <= n;\nloop invariant m <= x <= n;\nloop invariant m >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: n == 0 ==> x == 0;\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (m >= 0) ==> (n > 0);\nloop invariant (m <= n) ==> (n >= 0);\nloop invariant (m < n) ==> (n > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\n\nloop invariant i5: (m <= n) ==> (n >= 0);\nloop invariant i6: (m < n) ==> (n > 0);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> m <= x < n;\nloop invariant m >= 0 ==> m <= n;\nloop invariant m >= 0 ==> m <= m + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\nloop invariant i4: m >= 0 ==> m <= m + 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (if n > 0 then m >= 0 else \\true);\nloop invariant (if unknown() then (m = x) else \\true);\nloop invariant (if x >= n then m = (if unknown() then x else m) else \\true);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= x;\nloop invariant m >= 0;\nloop invariant m <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant 0 <= n <= INT_MAX;\nloop invariant n >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n <= INT_MAX;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\nloop invariant m <= x;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\n\nloop invariant i5: x >= 0;\nloop invariant i6: m <= x;\nloop invariant i7: n <= INT_MAX;\n\nloop invariant i9: m >= 0;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m == 0 ==> n <= 0;\nloop invariant m > 0 ==> n > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m >= 0;\nloop invariant i4: m <= x;\n\nloop invariant i6: m > 0 ==> n > 0;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m == (if x < n then x else m);\nloop invariant (if x < n then m < x else m >= x);\nloop invariant (if x < n then m >= 0 else m == m);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\nloop invariant (if x < n then m >= 0 else m >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == m || x == n;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant x >= m;\nloop invariant n > 0 ==> x >= 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0 ==> x >= m;\nloop invariant x >= m ==> x <= n;\nloop invariant x >= m ==> x <= n;\nloop invariant x >= m ==> x == n;\nloop invariant x == n ==> x >= m;\nloop invariant x == n ==> x <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m >= 0;\n\nloop invariant i5: x >= m;\nloop invariant i6: n > 0 ==> x >= 0;\nloop invariant i7: x >= 0;\n\nloop invariant i9: m >= 0 ==> x >= m;\n\n\nloop invariant i12: x == n ==> x >= m;\nloop invariant i13: x == n ==> x <= n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> m <= x;\nloop invariant m >= 0 ==> m <= n;\nloop invariant m >= 0 ==> m >= 0;\nloop invariant m >= 0 ==> m >= x;\nloop invariant m >= 0 ==> m >= n;\nloop invariant m >= 0 ==> m <= m;\nloop invariant m >= 0 ==> m >= m;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 0 ==> m <= x;\n\nloop invariant i4: m >= 0 ==> m >= 0;\n\n\nloop invariant i7: m >= 0 ==> m <= m;\nloop invariant i8: m >= 0 ==> m >= m;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 26: unexpected token 'n'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\nloop invariant i1: 0 <= n;\nloop invariant i2: (x == n);\nloop invariant i3: m >= 0;\nloop invariant i4: (m <= n);\nloop invariant i5: (m <= x);\nloop invariant i6: 0 <= x <= n;\nloop invariant i7: 0 <= m <= x;\nloop invariant i8: m <= x;\nloop invariant i9: m <= n;\nloop invariant i10: m <= x <= n;\nloop invariant i11: if n > 0 then x <= n;\nloop invariant i12: if n > 0 then m >= 0;\nloop invariant i13: if n > 0 and m >= 0 then x >= m;\nloop invariant i14: if n > 0 and m >= 0 then m <= x <= n;\nloop invariant i15: (n > 0 ==> x >= m);\nloop invariant i16: (n > 0 ==> x == n);\nloop invariant i17: (n > 0 ==> m == x);\nloop invariant i18: (n > 0 ==> x > m);\nloop invariant i19: (n > 0 ==> x >= 0);\nloop invariant i20: (n > 0 ==> x <= n);\nloop invariant i21: (n > 0 ==> m >= 0);\nloop invariant i22: (n > 0 ==> m <= n);\nloop invariant i23: (n > 0 ==> x < n);\nloop invariant i24: (n > 0 ==> x > 0);\nloop invariant i25: (n > 0 ==> m < n);\nloop invariant i26: (n > 0 ==> m > 0);\nloop invariant i27: 0 <= x <= m <= n;\nloop invariant i28: n == 0 ==> x == 0;\nloop invariant i29: n != 0 ==> x <= n;\nloop invariant i30: (m >= 0) ==> (n > 0);\nloop invariant i31: (m <= n) ==> (n >= 0);\nloop invariant i32: (m < n) ==> (n > 0);\nloop invariant i33: m >= 0 ==> m <= x < n;\nloop invariant i34: m >= 0 ==> m <= n;\nloop invariant i35: m >= 0 ==> m <= m + 1;\nloop invariant i36: 0 <= m <= n;\nloop invariant i37: (if n > 0 then m >= 0 else \\true);\nloop invariant i38: (if unknown() then (m = x) else \\true);\nloop invariant i39: (if x >= n then m = (if unknown() then x else m) else \\true);\nloop invariant i40: m >= x;\nloop invariant i41: 0 <= n <= INT_MAX;\nloop invariant i42: n >= 0;\nloop invariant i43: x >= 0;\nloop invariant i44: n <= INT_MAX;\nloop invariant i45: x <= n;\nloop invariant i46: m == 0 ==> n <= 0;\nloop invariant i47: m > 0 ==> n > 0;\nloop invariant i48: m == (if x < n then x else m);\nloop invariant i49: (if x < n then m < x else m >= x);\nloop invariant i50: (if x < n then m >= 0 else m == m);\nloop invariant i51: (if x < n then m >= 0 else m >= 0);\nloop invariant i52: x == m || x == n;\nloop invariant i53: x >= m;\nloop invariant i54: n > 0 ==> x >= 0;\nloop invariant i55: m >= 0 ==> x >= m;\nloop invariant i56: x >= m ==> x <= n;\nloop invariant i57: x >= m ==> x == n;\nloop invariant i58: x == n ==> x >= m;\nloop invariant i59: x == n ==> x <= n;\nloop invariant i60: m >= 0 ==> m <= x;\nloop invariant i61: m >= 0 ==> m >= 0;\nloop invariant i62: m >= 0 ==> m >= x;\nloop invariant i63: m >= 0 ==> m >= n;\nloop invariant i64: m >= 0 ==> m <= m;\nloop invariant i65: m >= 0 ==> m >= m;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 25,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m >= 0;\n\nloop invariant i5: (m <= x);\n\nloop invariant i7: 0 <= m <= x;\nloop invariant i8: m <= x;\n\n\n\n\n\n\nloop invariant i15: (n > 0 ==> x >= m);\n\n\n\nloop invariant i19: (n > 0 ==> x >= 0);\nloop invariant i20: (n > 0 ==> x <= n);\nloop invariant i21: (n > 0 ==> m >= 0);\nloop invariant i22: (n > 0 ==> m <= n);\n\n\nloop invariant i25: (n > 0 ==> m < n);\n\n\nloop invariant i28: n == 0 ==> x == 0;\n\n\nloop invariant i31: (m <= n) ==> (n >= 0);\nloop invariant i32: (m < n) ==> (n > 0);\n\n\nloop invariant i35: m >= 0 ==> m <= m + 1;\n\n\n\n\n\n\n\nloop invariant i43: x >= 0;\nloop invariant i44: n <= INT_MAX;\n\n\nloop invariant i47: m > 0 ==> n > 0;\n\n\n\n\n\nloop invariant i53: x >= m;\nloop invariant i54: n > 0 ==> x >= 0;\nloop invariant i55: m >= 0 ==> x >= m;\n\n\nloop invariant i58: x == n ==> x >= m;\nloop invariant i59: x == n ==> x <= n;\nloop invariant i60: m >= 0 ==> m <= x;\nloop invariant i61: m >= 0 ==> m >= 0;\n\n\nloop invariant i64: m >= 0 ==> m <= m;\nloop invariant i65: m >= 0 ==> m >= m;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c"
        ],
        "skipped": [],
        "total": 13,
        "success_count": 11,
        "failure_count": 2,
        "success_rate": 0.8461538461538461
    }
}