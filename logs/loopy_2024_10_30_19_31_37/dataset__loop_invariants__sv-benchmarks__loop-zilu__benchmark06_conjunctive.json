{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  while (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j;\nloop invariant 0 <= i;\nloop invariant -1 <= x;\nloop invariant -1 <= y;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x >= k;\nloop invariant y >= k;\nloop invariant j <= i;\nloop invariant j >= i;\nloop invariant x + y == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j;\n*/\n```",
            "```\n/*@\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant k >= 0;\nloop invariant x + y == k;\nloop invariant x >= j;\nloop invariant y <= j;\nloop invariant x >= y;\nloop invariant x + y >= k;\nloop invariant x - y <= k;\nloop invariant x - y >= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant 0 <= i <= k;\nloop invariant x >= 0;\nloop invariant y <= 0;\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant x+y==k;\nloop invariant x+y==k ==> x>=0;\nloop invariant x+y==k ==> y>=0;\nloop invariant x+y==k ==> j>=0;\nloop invariant x+y==k ==> i>=0;\nloop invariant x+y==k ==> j<=i;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <=i;\nloop invariant x+y==k;\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= j <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= k;loop invariant k <= x+y<=k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 2 * (i + 1);\nloop invariant (x + y) == k;\nloop invariant j < i ==> (x >= y);\nloop invariant j >= i ==> (x <= y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant x >= 0;\nloop invariant y <= 0;\nloop invariant x + y == k;\nloop invariant j == i && x + y == k ==> x == k && y == 0;\nloop invariant j != i && x + y == k ==> x == k && y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 1;\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant x+y==k;\nloop invariant j <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (j==i ==> (x > y));\nloop invariant (j==i ==> (x < y));\nloop invariant (j!=i ==> (x < y));\nloop invariant (j!=i ==> (x > y));\nloop invariant (j==i ==> (x == y));\nloop invariant (j!=i ==> (x != y));\nloop invariant ((j==i && x > y) ==> (x == 0 && y == 0));\nloop invariant ((j!=i && x < y) ==> (x == 0 && y == 0));\nloop invariant ((j==i && x < y) ==> (x == 0 && y == 0));\nloop invariant ((j!=i && x > y) ==> (x == 0 && y == 0));\nloop invariant ((j==i && x == y) ==> (x == i));\nloop invariant ((j!=i && x == y) ==> (x == i));\nloop invariant ((j==i && x == y) ==> (y == j));\nloop invariant ((j!=i && x == y) ==> (y == j));\nloop invariant ((j==i && x == y) ==> (x == y));\nloop invariant ((j!=i && x == y) ==> (x == y));\nloop invariant ((j==i && x == y) ==> (x == i && y == j));\nloop invariant ((j!=i && x == y) ==> (x == i && y == j));\nloop invariant ((j==i && x == y) ==> (x == y && x == j));\nloop invariant ((j!=i && x == y) ==> (x == y && x == j));\nloop invariant ((j==i && x == y) ==> (x == y && y == j));\nloop invariant ((j!=i && x == y) ==> (x == y && y == j));\nloop invariant ((j==i && x == y) ==> (x == y && x == i));\nloop invariant ((j!=i && x == y) ==> (x == y && x == i));\nloop invariant ((j==i && x == y) ==> (x == y && y == i));\nloop invariant ((j!=i && x == y) ==> (x == y && y == i));\nloop invariant ((j==i && x == y) ==> (x == y && x == i && y == j));\nloop invariant ((j!=i && x == y) ==> (x == y && x == i && y == j));\nloop invariant ((j==i && x == y) ==> (x == y && x == j && y == i));\nloop invariant ((j!=i && x == y) ==> (x == y && x == j && y == i));\nloop invariant ((j==i && x == y) ==> (x == y && x == i && y == j && x == y));\nloop invariant ((j!=i && x == y) ==> (x == y && x == i && y == j && x == y));\nloop invariant ((j==i && x == y) ==> (x == y && x == j && y == i && x == y));\nloop invariant ((j!=i && x == y) ==> (x == y && x == j && y == i && x == y));\nloop invariant ((j==i && x == y) ==> (x == y && x == i && y == j && x == y && x == y));\nloop invariant ((j!=i && x == y) ==> (x == y && x == i && y == j && x == y && y == i));\nloop invariant ((j==i && x == y) ==> (x == y && x == j && y == i && x == y && y == i));\nloop invariant ((j!=i && x == y) ==> (x == y && x == j && y == i && x == y && y == i));\nloop invariant ((j==i && x == y) ==> (x == y && x == i && y == j && x == y && x == y));\nloop invariant ((j!=i && x == y) ==> (x == y && x == i && y == j && x == y && x == y));\nloop invariant ((j==i && x == y) ==> (x == y && x == j && y == i && x == y && x == y));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= i;\nloop invariant 0 <= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= MAXINT; j == i ==> x + y == k; j != i ==> x + y == k; j = i; j != i; x + y == k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant (j==i ==> x==y+k) ==> (j+i==i ==> x==k);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==k);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y+k==k);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j;\nloop invariant 0 <= i;\nloop invariant -1 <= x;\nloop invariant -1 <= y;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x >= k;\nloop invariant y >= k;\nloop invariant j <= i;\nloop invariant j >= i;\nloop invariant x + y == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\nloop invariant i1: 0 <= j;\n\n\n\n\n\n\n\n\n\nloop invariant i11: x + y == k;\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant \\forall int i; 0 <= i <= 100000 ==> \\exists int j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\nloop invariant i1: 0 <= j <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: x+y==k;\nloop invariant i4: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i5: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k;\nloop invariant i6: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i7: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k;\nloop invariant i8: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i9: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i10: \\forall int i; 0 <= i <= 100000 ==> \\exists int j;\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant k >= 0;\nloop invariant x + y == k;\nloop invariant x >= j;\nloop invariant y <= j;\nloop invariant x >= y;\nloop invariant x + y >= k;\nloop invariant x - y <= k;\nloop invariant x - y >= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\nloop invariant x % y >= k;\nloop invariant x % y <= k;\nloop invariant x + y >= k;\nloop invariant x + y <= k;\nloop invariant x - y >= k;\nloop invariant x - y <= k;\nloop invariant x * y >= k;\nloop invariant x * y <= k;\nloop invariant x / y >= k;\nloop invariant x / y <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\nloop invariant i1: j >= 0;\n\n\n\n\nloop invariant i6: x + y == k;\n\n\n\nloop invariant i10: x + y >= k;\n\n\n\n\n\n\n\n\nloop invariant i19: x + y <= k;\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant 0 <= i <= k;\nloop invariant x >= 0;\nloop invariant y <= 0;\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\nloop invariant (~j==i) ==> (x + y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant x+y==k;\nloop invariant x+y==k ==> x>=0;\nloop invariant x+y==k ==> y>=0;\nloop invariant x+y==k ==> j>=0;\nloop invariant x+y==k ==> i>=0;\nloop invariant x+y==k ==> j<=i;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\nloop invariant x+y==k ==> x+y==k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\nloop invariant i2: x+y==k;\n\n\nloop invariant i5: x+y==k ==> j>=0;\n\n\nloop invariant i8: x+y==k ==> x+y==k;\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <=i;\nloop invariant x+y==k;\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= j <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\nloop invariant i2: x+y==k;\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= k;loop invariant k <= x+y<=k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 2 * (i + 1);\nloop invariant (x + y) == k;\nloop invariant j < i ==> (x >= y);\nloop invariant j >= i ==> (x <= y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\nloop invariant i2: (x + y) == k;\n\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant x >= 0;\nloop invariant y <= 0;\nloop invariant x + y == k;\nloop invariant j == i && x + y == k ==> x == k && y == 0;\nloop invariant j != i && x + y == k ==> x == k && y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\n\n\nloop invariant i4: x + y == k;\n\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 1;\nloop invariant i >= 0;\nloop invariant k >= 0;\nloop invariant x+y==k;\nloop invariant j <= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant (j==i ==> (x > y));\nloop invariant (j==i ==> (x < y));\nloop invariant (j!=i ==> (x < y));\nloop invariant (j!=i ==> (x > y));\nloop invariant (j==i ==> (x == y));\nloop invariant (j!=i ==> (x != y));\nloop invariant ((j==i && x > y) ==> (x == 0 && y == 0));\nloop invariant ((j!=i && x < y) ==> (x == 0 && y == 0));\nloop invariant ((j==i && x < y) ==> (x == 0 && y == 0));\nloop invariant ((j!=i && x > y) ==> (x == 0 && y == 0));\nloop invariant ((j==i && x == y) ==> (x == i));\nloop invariant ((j!=i && x == y) ==> (x == i));\nloop invariant ((j==i && x == y) ==> (y == j));\nloop invariant ((j!=i && x == y) ==> (y == j));\nloop invariant ((j==i && x == y) ==> (x == y));\nloop invariant ((j!=i && x == y) ==> (x == y));\nloop invariant ((j==i && x == y) ==> (x == i && y == j));\nloop invariant ((j!=i && x == y) ==> (x == i && y == j));\nloop invariant ((j==i && x == y) ==> (x == y && x == j));\nloop invariant ((j!=i && x == y) ==> (x == y && x == j));\nloop invariant ((j==i && x == y) ==> (x == y && y == j));\nloop invariant ((j!=i && x == y) ==> (x == y && y == j));\nloop invariant ((j==i && x == y) ==> (x == y && x == i));\nloop invariant ((j!=i && x == y) ==> (x == y && x == i));\nloop invariant ((j==i && x == y) ==> (x == y && y == i));\nloop invariant ((j!=i && x == y) ==> (x == y && y == i));\nloop invariant ((j==i && x == y) ==> (x == y && x == i && y == j));\nloop invariant ((j!=i && x == y) ==> (x == y && x == i && y == j));\nloop invariant ((j==i && x == y) ==> (x == y && x == j && y == i));\nloop invariant ((j!=i && x == y) ==> (x == y && x == j && y == i));\nloop invariant ((j==i && x == y) ==> (x == y && x == i && y == j && x == y));\nloop invariant ((j!=i && x == y) ==> (x == y && x == i && y == j && x == y));\nloop invariant ((j==i && x == y) ==> (x == y && x == j && y == i && x == y));\nloop invariant ((j!=i && x == y) ==> (x == y && x == j && y == i && x == y));\nloop invariant ((j==i && x == y) ==> (x == y && x == i && y == j && x == y && x == y));\nloop invariant ((j!=i && x == y) ==> (x == y && x == i && y == j && x == y && y == i));\nloop invariant ((j==i && x == y) ==> (x == y && x == j && y == i && x == y && y == i));\nloop invariant ((j!=i && x == y) ==> (x == y && x == j && y == i && x == y && y == i));\nloop invariant ((j==i && x == y) ==> (x == y && x == i && y == j && x == y && x == y));\nloop invariant ((j!=i && x == y) ==> (x == y && x == i && y == j && x == y && x == y));\nloop invariant ((j==i && x == y) ==> (x == y && x == j && y == i && x == y && x == y));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\n\n\nloop invariant i4: x+y==k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i22: ((j==i && x == y) ==> (x == y));\nloop invariant i23: ((j!=i && x == y) ==> (x == y));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x + y = k;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant j <= i;\nloop invariant j <= i + 1;\nloop invariant x <= k;\nloop invariant y <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\n\n\nloop invariant i4: j >= 0;\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= i;\nloop invariant 0 <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= MAXINT; j == i ==> x + y == k; j != i ==> x + y == k; j = i; j != i; x + y == k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant (j==i ==> x==y+k) ==> (j+i==i ==> x==k);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==k);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y+k==k);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\nloop invariant (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 43: unexpected token 'invariant'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\nloop invariant i1: 0 <= j;\nloop invariant i2: 0 <= i;\nloop invariant i3: -1 <= x;\nloop invariant i4: -1 <= y;\nloop invariant i5: x <= k;\nloop invariant i6: y <= k;\nloop invariant i7: x >= k;\nloop invariant i8: y >= k;\nloop invariant i9: j <= i;\nloop invariant i10: j >= i;\nloop invariant i11: x + y == k;\nloop invariant i12: 0 <= j <= 100000;\nloop invariant i13: x >= (1 + (y - 1) * y / 2);\nloop invariant i14: x+y==k;\nloop invariant i15: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i16: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k;\nloop invariant i17: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i18: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k;\nloop invariant i19: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i20: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i21: \\forall int i; 0 <= i <= 100000 ==> \\exists int j;\nloop invariant i22: j >= 0;\nloop invariant i23: i >= 0;\nloop invariant i24: x >= 0;\nloop invariant i25: y >= 0;\nloop invariant i26: k >= 0;\nloop invariant i27: x >= j;\nloop invariant i28: y <= j;\nloop invariant i29: x >= y;\nloop invariant i30: x + y >= k;\nloop invariant i31: x - y <= k;\nloop invariant i32: x - y >= k;\nloop invariant i33: x * y >= k;\nloop invariant i34: x * y <= k;\nloop invariant i35: x / y >= k;\nloop invariant i36: x / y <= k;\nloop invariant i37: x % y >= k;\nloop invariant i38: x % y <= k;\nloop invariant i39: x + y <= k;\nloop invariant i40: 0 <= j <= i;\nloop invariant i41: 0 <= i <= k;\nloop invariant i42: y <= 0;\nloop invariant i43: (j==i) ==> (x + y == 0);\nloop invariant i44: (~j==i) ==> (x + y == 0);\nloop invariant i45: x+y==k ==> x>=0;\nloop invariant i46: x+y==k ==> y>=0;\nloop invariant i47: x+y==k ==> j>=0;\nloop invariant i48: x+y==k ==> i>=0;\nloop invariant i49: x+y==k ==> j<=i;\nloop invariant i50: x+y==k ==> x+y==k;\nloop invariant i51: 0 <= j <=i;\nloop invariant i52: 0 <= x <= k;\nloop invariant i53: 0 <= y <= k;\nloop invariant i54: 0 <= j <= k;loop invariant k <= x+y<=k;\nloop invariant i55: 0 <= j <= 2 * (i + 1);\nloop invariant i56: (x + y) == k;\nloop invariant i57: j < i ==> (x >= y);\nloop invariant i58: j >= i ==> (x <= y);\nloop invariant i59: j == i && x + y == k ==> x == k && y == 0;\nloop invariant i60: j != i && x + y == k ==> x == k && y == 0;\nloop invariant i61: 0 <= j <= 1;\nloop invariant i62: (j==i ==> (x > y));\nloop invariant i63: (j==i ==> (x < y));\nloop invariant i64: (j!=i ==> (x < y));\nloop invariant i65: (j!=i ==> (x > y));\nloop invariant i66: (j==i ==> (x == y));\nloop invariant i67: (j!=i ==> (x != y));\nloop invariant i68: ((j==i && x > y) ==> (x == 0 && y == 0));\nloop invariant i69: ((j!=i && x < y) ==> (x == 0 && y == 0));\nloop invariant i70: ((j==i && x < y) ==> (x == 0 && y == 0));\nloop invariant i71: ((j!=i && x > y) ==> (x == 0 && y == 0));\nloop invariant i72: ((j==i && x == y) ==> (x == i));\nloop invariant i73: ((j!=i && x == y) ==> (x == i));\nloop invariant i74: ((j==i && x == y) ==> (y == j));\nloop invariant i75: ((j!=i && x == y) ==> (y == j));\nloop invariant i76: ((j==i && x == y) ==> (x == y));\nloop invariant i77: ((j!=i && x == y) ==> (x == y));\nloop invariant i78: ((j==i && x == y) ==> (x == i && y == j));\nloop invariant i79: ((j!=i && x == y) ==> (x == i && y == j));\nloop invariant i80: ((j==i && x == y) ==> (x == y && x == j));\nloop invariant i81: ((j!=i && x == y) ==> (x == y && x == j));\nloop invariant i82: ((j==i && x == y) ==> (x == y && y == j));\nloop invariant i83: ((j!=i && x == y) ==> (x == y && y == j));\nloop invariant i84: ((j==i && x == y) ==> (x == y && x == i));\nloop invariant i85: ((j!=i && x == y) ==> (x == y && x == i));\nloop invariant i86: ((j==i && x == y) ==> (x == y && y == i));\nloop invariant i87: ((j!=i && x == y) ==> (x == y && y == i));\nloop invariant i88: ((j==i && x == y) ==> (x == y && x == i && y == j));\nloop invariant i89: ((j!=i && x == y) ==> (x == y && x == i && y == j));\nloop invariant i90: ((j==i && x == y) ==> (x == y && x == j && y == i));\nloop invariant i91: ((j!=i && x == y) ==> (x == y && x == j && y == i));\nloop invariant i92: ((j==i && x == y) ==> (x == y && x == i && y == j && x == y));\nloop invariant i93: ((j!=i && x == y) ==> (x == y && x == i && y == j && x == y));\nloop invariant i94: ((j==i && x == y) ==> (x == y && x == j && y == i && x == y));\nloop invariant i95: ((j!=i && x == y) ==> (x == y && x == j && y == i && x == y));\nloop invariant i96: ((j==i && x == y) ==> (x == y && x == i && y == j && x == y && x == y));\nloop invariant i97: ((j!=i && x == y) ==> (x == y && x == i && y == j && x == y && y == i));\nloop invariant i98: ((j==i && x == y) ==> (x == y && x == j && y == i && x == y && y == i));\nloop invariant i99: ((j!=i && x == y) ==> (x == y && x == j && y == i && x == y && y == i));\nloop invariant i100: ((j!=i && x == y) ==> (x == y && x == i && y == j && x == y && x == y));\nloop invariant i101: ((j==i && x == y) ==> (x == y && x == j && y == i && x == y && x == y));\nloop invariant i102: x + y = k;\nloop invariant i103: j <= i + 1;\nloop invariant i104: 0 <= k;\nloop invariant i105: 0 <= j <= MAXINT; j == i ==> x + y == k; j != i ==> x + y == k; j = i; j != i; x + y == k;\nloop invariant i106: 0 <= y <= 100000;\nloop invariant i107: (j==i ==> x==y+k) ==> (j+i==i ==> x==k);\nloop invariant i108: (j==i ==> x==y+k) ==> (j-i==i ==> y==k);\nloop invariant i109: (j==i ==> x==y+k) ==> (j-i==i ==> y+k==k);\nloop invariant i110: (j==i ==> x==y+k) ==> (j-i==i ==> y==0);\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 90,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  /*@\nloop invariant i1: 0 <= j;\nloop invariant i2: 0 <= i;\nloop invariant i3: -1 <= x;\nloop invariant i4: -1 <= y;\nloop invariant i5: x <= k;\nloop invariant i6: y <= k;\nloop invariant i7: x >= k;\nloop invariant i8: y >= k;\nloop invariant i9: j <= i;\nloop invariant i10: j >= i;\nloop invariant i11: x + y == k;\nloop invariant i12: 0 <= j <= 100000;\nloop invariant i13: x >= (1 + (y - 1) * y / 2);\nloop invariant i14: x+y==k;\nloop invariant i15: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i16: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k;\nloop invariant i17: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i18: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k;\nloop invariant i19: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i20: \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int i; 0 <= i <= 100000 ==> \\exists int j; 0 <= j <= 100000 ==> x+y==k ==> \\forall int k; 0 <= k <= 100000 ==> x+y==k ==> \\forall int j; 0 <= j <= 100000 ==> x+y==k;\nloop invariant i21: \\forall int i; 0 <= i <= 100000 ==> \\exists int j;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c"
        ],
        "skipped": [],
        "total": 128,
        "success_count": 112,
        "failure_count": 16,
        "success_rate": 0.875
    }
}