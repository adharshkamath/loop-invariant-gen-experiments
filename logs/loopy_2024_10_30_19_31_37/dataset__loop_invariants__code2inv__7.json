{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/7.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant (x + 10 * i) <= 20 ==> y <= 10;\nloop invariant (x + 10 * i) <= 20 ==> x <= 20;\nloop invariant (x + 10 * i) <= 20 ==> y >= 0;\nloop invariant (x + 10 * i) <= 20 ==> x >= 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (x >= 20) ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10; loop invariant 0 <= x <= 10; loop invariant (x - y) == 0 ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 20;\nloop invariant y >= 0;\nloop invariant y <= 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant unknown() == (x == 20 && y != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x >= y;\nloop invariant x - 10 <= x' <= x + 10;\nloop invariant y - 10 <= y' <= y + 10;\nloop invariant (unknown() ==> (x' == x + 10 && y' == y + 10));\nloop invariant (unknown() ==> (x' == x && y' == y));\nloop invariant (y == 20 ==> (x == 20));\nloop invariant (x == 20 ==> (y == 20));\nloop invariant (x == 20 ==> (y != 0));\nloop invariant (y != 20 ==> (x != 20));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 30;\nloop invariant 0 <= y <= 30;\nloop invariant (x >= y);\nloop invariant (x % 10 == 0);\nloop invariant (y % 10 == 0);\nloop invariant (x >= 0) ==> (x <= 30);\nloop invariant (y >= 0) ==> (y <= 30);\nloop invariant (x >= 0) ==> (y >= 0);\nloop invariant (x >= 0) ==> (x % 10 == 0);\nloop invariant (y >= 0) ==> (y % 10 == 0);\nloop invariant (x >= 0) ==> (x <= 30) ==> (x >= y);\nloop invariant (y >= 0) ==> (y <= 30) ==> (x >= y);\nloop invariant (x >= 0) ==> (y >= 0) ==> (x >= y);\nloop invariant (x >= 0) ==> (x % 10 == 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (y % 10 == 0) ==> (x >= y);\nloop invariant (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30) ==> (x >= 0);\nloop invariant (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30) ==> (x >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y <= 10;\nloop invariant x + y >= 20;\nloop invariant y >= x;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y + x <= 20;\nloop invariant 0 <= x <= 20 - y;\nloop invariant 0 <= y <= 20 - x;\nloop invariant 0 <= y + x <= 20;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 20;\nloop invariant (y <= x);\nloop invariant (x == 20) ==> (y != 0);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x;\nloop invariant x + 10 * y <= x;\nloop invariant x + 10 * y >= y;\nloop invariant x + 10 * y <= y;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x + 10;\nloop invariant x + 10 * y <= x + 10;\nloop invariant x + 10 * y >= y + 10;\nloop invariant x + 10 * y <= y + 10;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x + 10;\nloop invariant x + 10 * y <= x + 10;\nloop invariant x + 10 * y >= y + 10;\nloop invariant x + 10 * y <= y + 10;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x + 10;\nloop invariant x + 10 * y <= x + 10;\nloop invariant x + 10 * y >= y + 10;\nloop invariant x + 10 * y <= y + 10;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x + 10;\nloop invariant x + 10 * y <= x + 10;\nloop invariant x + 10 * y >= y + 10;\nloop invariant x + 10 * y <= y + 10;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x + 10;\nloop invariant x + 10 * y <= x + 10;\nloop invariant x + 10 * y >= y + 10;\nloop invariant x + 10 * y <= y + 10;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= (10 - y) * y / 2;\nloop invariant x + y <= 20;\nloop invariant x + y >= 20 ==> y == 0;\nloop invariant x + y == 20 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x + y <= 20;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 10;\nloop invariant x + y == 20 ==> y != 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant (x + 10 * i) <= 20 ==> y <= 10;\nloop invariant (x + 10 * i) <= 20 ==> x <= 20;\nloop invariant (x + 10 * i) <= 20 ==> y >= 0;\nloop invariant (x + 10 * i) <= 20 ==> x >= 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant (x >= 20) ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10; loop invariant 0 <= x <= 10; loop invariant (x - y) == 0 ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 20;\nloop invariant y >= 0;\nloop invariant y <= 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant unknown() == (x == 20 && y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant 0 <= y <= 20;\nloop invariant x >= y;\nloop invariant x - 10 <= x' <= x + 10;\nloop invariant y - 10 <= y' <= y + 10;\nloop invariant (unknown() ==> (x' == x + 10 && y' == y + 10));\nloop invariant (unknown() ==> (x' == x && y' == y));\nloop invariant (y == 20 ==> (x == 20));\nloop invariant (x == 20 ==> (y == 20));\nloop invariant (x == 20 ==> (y != 0));\nloop invariant (y != 20 ==> (x != 20));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 20;\nloop invariant i2: 0 <= y <= 20;\nloop invariant i3: x >= y;\n\nloop invariant i5: y - 10 <= y' <= y + 10;\nloop invariant i6: (unknown() ==> (x' == x + 10 && y' == y + 10));\nloop invariant i7: (unknown() ==> (x' == x && y' == y));\nloop invariant i8: (y == 20 ==> (x == 20));\nloop invariant i9: (x == 20 ==> (y == 20));\nloop invariant i10: (x == 20 ==> (y != 0));\nloop invariant i11: (y != 20 ==> (x != 20));\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 30;\nloop invariant 0 <= y <= 30;\nloop invariant (x >= y);\nloop invariant (x % 10 == 0);\nloop invariant (y % 10 == 0);\nloop invariant (x >= 0) ==> (x <= 30);\nloop invariant (y >= 0) ==> (y <= 30);\nloop invariant (x >= 0) ==> (y >= 0);\nloop invariant (x >= 0) ==> (x % 10 == 0);\nloop invariant (y >= 0) ==> (y % 10 == 0);\nloop invariant (x >= 0) ==> (x <= 30) ==> (x >= y);\nloop invariant (y >= 0) ==> (y <= 30) ==> (x >= y);\nloop invariant (x >= 0) ==> (y >= 0) ==> (x >= y);\nloop invariant (x >= 0) ==> (x % 10 == 0) ==> (x >= y);\nloop invariant (y >= 0) ==> (y % 10 == 0) ==> (x >= y);\nloop invariant (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30) ==> (x >= 0);\nloop invariant (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30) ==> (x >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0);\n\nloop invariant i21: (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\n\n\n\n\nloop invariant i26: (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i27: (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i28: (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i29: (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i30: (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i31: (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30) ==> (x >= 0);\nloop invariant i32: (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30) ==> (x >= 0);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y <= 10;\nloop invariant x + y >= 20;\nloop invariant y >= x;\nloop invariant x >= 10;\nloop invariant y >= 10;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\nloop invariant x <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\nloop invariant i8: y >= 0;\nloop invariant i9: x >= 0;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\nloop invariant y + 10 >= y;\nloop invariant x + 10 >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x + 10 >= x;\nloop invariant i4: y + 10 >= y;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y + x <= 20;\nloop invariant 0 <= x <= 20 - y;\nloop invariant 0 <= y <= 20 - x;\nloop invariant 0 <= y + x <= 20;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\nloop invariant x <= y + 10;\nloop invariant y <= x + 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x <= y + 10;\nloop invariant i7: y <= x + 10;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 20;\nloop invariant (y <= x);\nloop invariant (x == 20) ==> (y != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x;\nloop invariant x + 10 * y <= x;\nloop invariant x + 10 * y >= y;\nloop invariant x + 10 * y <= y;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x + 10;\nloop invariant x + 10 * y <= x + 10;\nloop invariant x + 10 * y >= y + 10;\nloop invariant x + 10 * y <= y + 10;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x + 10;\nloop invariant x + 10 * y <= x + 10;\nloop invariant x + 10 * y >= y + 10;\nloop invariant x + 10 * y <= y + 10;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x + 10;\nloop invariant x + 10 * y <= x + 10;\nloop invariant x + 10 * y >= y + 10;\nloop invariant x + 10 * y <= y + 10;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x + 10;\nloop invariant x + 10 * y <= x + 10;\nloop invariant x + 10 * y >= y + 10;\nloop invariant x + 10 * y <= y + 10;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\nloop invariant x + 10 * y <= x + 10 * y;\nloop invariant x + 10 * y >= x + 10;\nloop invariant x + 10 * y <= x + 10;\nloop invariant x + 10 * y >= y + 10;\nloop invariant x + 10 * y <= y + 10;\nloop invariant x + 10 * y >= 10 * y;\nloop invariant x + 10 * y <= 10 * y;\nloop invariant x + 10 * y >= x + y;\nloop invariant x + 10 * y <= x + y;\nloop invariant x + 10 * y >= x + 10 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: x + 10 * y >= x + 10 * y;\nloop invariant i6: x + 10 * y <= x + 10 * y;\nloop invariant i7: x + 10 * y >= x;\n\nloop invariant i9: x + 10 * y >= y;\n\nloop invariant i11: x + 10 * y >= 10 * y;\n\nloop invariant i13: x + 10 * y >= x + y;\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= (10 - y) * y / 2;\nloop invariant x + y <= 20;\nloop invariant x + y >= 20 ==> y == 0;\nloop invariant x + y == 20 ==> y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x + y <= 20;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 10;\nloop invariant x + y == 20 ==> y != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n\nloop invariant i7: x + y == 20 ==> y != 0;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 40: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 10;\nloop invariant i2: 0 <= y <= 10;\nloop invariant i3: x <= 10;\nloop invariant i4: y <= 10;\nloop invariant i5: (x + 10 * i) <= 20 ==> y <= 10;\nloop invariant i6: (x + 10 * i) <= 20 ==> x <= 20;\nloop invariant i7: (x + 10 * i) <= 20 ==> y >= 0;\nloop invariant i8: (x + 10 * i) <= 20 ==> x >= 0;\nloop invariant i9: (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant i10: (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant i11: (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant i12: (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant i13: 0 <= x <= 20;\nloop invariant i14: 0 <= y <= 20;\nloop invariant i15: (x >= 20) ==> (y != 0);\nloop invariant i16: 0 <= y <= 10; loop invariant 0 <= x <= 10; loop invariant (x - y) == 0 ==> (y != 0);\nloop invariant i17: x >= 0;\nloop invariant i18: x <= 20;\nloop invariant i19: y >= 0;\nloop invariant i20: y <= 20;\nloop invariant i21: unknown() == (x == 20 && y != 0);\nloop invariant i22: x >= y;\nloop invariant i23: x - 10 <= x' <= x + 10;\nloop invariant i24: y - 10 <= y' <= y + 10;\nloop invariant i25: (unknown() ==> (x' == x + 10 && y' == y + 10));\nloop invariant i26: (unknown() ==> (x' == x && y' == y));\nloop invariant i27: (y == 20 ==> (x == 20));\nloop invariant i28: (x == 20 ==> (y == 20));\nloop invariant i29: (x == 20 ==> (y != 0));\nloop invariant i30: (y != 20 ==> (x != 20));\nloop invariant i31: 0 <= x <= 30;\nloop invariant i32: 0 <= y <= 30;\nloop invariant i33: (x >= y);\nloop invariant i34: (x % 10 == 0);\nloop invariant i35: (y % 10 == 0);\nloop invariant i36: (x >= 0) ==> (x <= 30);\nloop invariant i37: (y >= 0) ==> (y <= 30);\nloop invariant i38: (x >= 0) ==> (y >= 0);\nloop invariant i39: (x >= 0) ==> (x % 10 == 0);\nloop invariant i40: (y >= 0) ==> (y % 10 == 0);\nloop invariant i41: (x >= 0) ==> (x <= 30) ==> (x >= y);\nloop invariant i42: (y >= 0) ==> (y <= 30) ==> (x >= y);\nloop invariant i43: (x >= 0) ==> (y >= 0) ==> (x >= y);\nloop invariant i44: (x >= 0) ==> (x % 10 == 0) ==> (x >= y);\nloop invariant i45: (y >= 0) ==> (y % 10 == 0) ==> (x >= y);\nloop invariant i46: (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant i47: (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant i48: (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant i49: (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant i50: (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant i51: (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant i52: (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant i53: (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant i54: (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant i55: (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant i56: (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i57: (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i58: (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i59: (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i60: (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i61: (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30) ==> (x >= 0);\nloop invariant i62: (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30) ==> (x >= 0);\nloop invariant i63: x + y >= 20;\nloop invariant i64: y >= x;\nloop invariant i65: x >= 10;\nloop invariant i66: y >= 10;\nloop invariant i67: x + 10 >= x;\nloop invariant i68: y + 10 >= y;\nloop invariant i69: 0 <= y + x <= 20;\nloop invariant i70: 0 <= x <= 20 - y;\nloop invariant i71: 0 <= y <= 20 - x;\nloop invariant i72: x <= y + 10;\nloop invariant i73: y <= x + 10;\nloop invariant i74: (y <= x);\nloop invariant i75: (x == 20) ==> (y != 0);\nloop invariant i76: x + 10 * y >= x + 10 * y;\nloop invariant i77: x + 10 * y <= x + 10 * y;\nloop invariant i78: x + 10 * y >= x;\nloop invariant i79: x + 10 * y <= x;\nloop invariant i80: x + 10 * y >= y;\nloop invariant i81: x + 10 * y <= y;\nloop invariant i82: x + 10 * y >= 10 * y;\nloop invariant i83: x + 10 * y <= 10 * y;\nloop invariant i84: x + 10 * y >= x + y;\nloop invariant i85: x + 10 * y <= x + y;\nloop invariant i86: x + 10 * y >= x + 10;\nloop invariant i87: x + 10 * y <= x + 10;\nloop invariant i88: x + 10 * y >= y + 10;\nloop invariant i89: x + 10 * y <= y + 10;\nloop invariant i90: x >= (10 - y) * y / 2;\nloop invariant i91: x + y <= 20;\nloop invariant i92: x + y >= 20 ==> y == 0;\nloop invariant i93: x + y == 20 ==> y == 0;\nloop invariant i94: x + y >= 10;\nloop invariant i95: x + y == 20 ==> y != 0;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 10;\nloop invariant i2: 0 <= y <= 10;\nloop invariant i3: x <= 10;\nloop invariant i4: y <= 10;\nloop invariant i5: (x + 10 * i) <= 20 ==> y <= 10;\nloop invariant i6: (x + 10 * i) <= 20 ==> x <= 20;\nloop invariant i7: (x + 10 * i) <= 20 ==> y >= 0;\nloop invariant i8: (x + 10 * i) <= 20 ==> x >= 0;\nloop invariant i9: (x + 10 * i) <= 20 ==> y != 0 ==> y >= 10;\nloop invariant i10: (x + 10 * i) <= 20 ==> y != 0 ==> x >= 10;\nloop invariant i11: (x + 10 * i) <= 20 ==> y != 0 ==> y != 0;\nloop invariant i12: (x + 10 * i) <= 20 ==> y != 0 ==> x != 0;\nloop invariant i13: 0 <= x <= 20;\nloop invariant i14: 0 <= y <= 20;\nloop invariant i15: (x >= 20) ==> (y != 0);\nloop invariant i16: 0 <= y <= 10; loop invariant 0 <= x <= 10; loop invariant (x - y) == 0 ==> (y != 0);\nloop invariant i17: x >= 0;\nloop invariant i18: x <= 20;\nloop invariant i19: y >= 0;\nloop invariant i20: y <= 20;\n\nloop invariant i22: x >= y;\n\nloop invariant i24: y - 10 <= y' <= y + 10;\nloop invariant i25: (unknown() ==> (x' == x + 10 && y' == y + 10));\nloop invariant i26: (unknown() ==> (x' == x && y' == y));\nloop invariant i27: (y == 20 ==> (x == 20));\nloop invariant i28: (x == 20 ==> (y == 20));\nloop invariant i29: (x == 20 ==> (y != 0));\nloop invariant i30: (y != 20 ==> (x != 20));\nloop invariant i31: 0 <= x <= 30;\nloop invariant i32: 0 <= y <= 30;\nloop invariant i33: (x >= y);\nloop invariant i34: (x % 10 == 0);\nloop invariant i35: (y % 10 == 0);\nloop invariant i36: (x >= 0) ==> (x <= 30);\nloop invariant i37: (y >= 0) ==> (y <= 30);\nloop invariant i38: (x >= 0) ==> (y >= 0);\nloop invariant i39: (x >= 0) ==> (x % 10 == 0);\nloop invariant i40: (y >= 0) ==> (y % 10 == 0);\nloop invariant i41: (x >= 0) ==> (x <= 30) ==> (x >= y);\nloop invariant i42: (y >= 0) ==> (y <= 30) ==> (x >= y);\nloop invariant i43: (x >= 0) ==> (y >= 0) ==> (x >= y);\nloop invariant i44: (x >= 0) ==> (x % 10 == 0) ==> (x >= y);\nloop invariant i45: (y >= 0) ==> (y % 10 == 0) ==> (x >= y);\nloop invariant i46: (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant i47: (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant i48: (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant i49: (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant i50: (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0);\nloop invariant i51: (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant i52: (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant i53: (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant i54: (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant i55: (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30);\nloop invariant i56: (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i57: (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i58: (x >= 0) ==> (y >= 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i59: (x >= 0) ==> (x % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i60: (y >= 0) ==> (y % 10 == 0) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30);\nloop invariant i61: (x >= 0) ==> (x <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30) ==> (x >= 0);\nloop invariant i62: (y >= 0) ==> (y <= 30) ==> (x >= y) ==> (x % 10 == 0) ==> (x <= 30) ==> (y <= 30) ==> (x >= 0);\nloop invariant i63: x + y >= 20;\nloop invariant i64: y >= x;\nloop invariant i65: x >= 10;\nloop invariant i66: y >= 10;\nloop invariant i67: x + 10 >= x;\nloop invariant i68: y + 10 >= y;\nloop invariant i69: 0 <= y + x <= 20;\nloop invariant i70: 0 <= x <= 20 - y;\nloop invariant i71: 0 <= y <= 20 - x;\nloop invariant i72: x <= y + 10;\nloop invariant i73: y <= x + 10;\nloop invariant i74: (y <= x);\nloop invariant i75: (x == 20) ==> (y != 0);\nloop invariant i76: x + 10 * y >= x + 10 * y;\nloop invariant i77: x + 10 * y <= x + 10 * y;\nloop invariant i78: x + 10 * y >= x;\nloop invariant i79: x + 10 * y <= x;\nloop invariant i80: x + 10 * y >= y;\nloop invariant i81: x + 10 * y <= y;\nloop invariant i82: x + 10 * y >= 10 * y;\nloop invariant i83: x + 10 * y <= 10 * y;\nloop invariant i84: x + 10 * y >= x + y;\nloop invariant i85: x + 10 * y <= x + y;\nloop invariant i86: x + 10 * y >= x + 10;\nloop invariant i87: x + 10 * y <= x + 10;\nloop invariant i88: x + 10 * y >= y + 10;\nloop invariant i89: x + 10 * y <= y + 10;\nloop invariant i90: x >= (10 - y) * y / 2;\nloop invariant i91: x + y <= 20;\nloop invariant i92: x + y >= 20 ==> y == 0;\nloop invariant i93: x + y == 20 ==> y == 0;\nloop invariant i94: x + y >= 10;\nloop invariant i95: x + y == 20 ==> y != 0;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c"
        ],
        "skipped": [],
        "total": 59,
        "success_count": 50,
        "failure_count": 9,
        "success_rate": 0.847457627118644
    }
}