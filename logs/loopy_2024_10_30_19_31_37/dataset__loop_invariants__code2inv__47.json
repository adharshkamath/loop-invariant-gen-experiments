{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/47.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 0 ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c != 1 ==> c != n;\nloop invariant c == 1 ==> c == n;\nloop invariant c == 1 ==> n >= 1;\nloop invariant c != 1 ==> n >= 1;\nloop invariant c == 1 ==> unknown();\nloop invariant c != 1 ==> !unknown();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == (1 + (n - 1) * n / 2);\nloop invariant c == (1 + (n - 1) * n / 2) ==> (c < 0 && c > n);\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c != n;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c != 1;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n && c != 1;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0 && c != 0 && c != 0 && c != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (unknown()) {c >= 0;} else {c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c < n) ==> (c == 0);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c < n) ==> (c != 0);\nloop invariant (c == n) ==> (c != 1);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant if unknown() then (c < n) else (c >= n);\nloop invariant if unknown() then (c < n) else (c <= n);\nloop invariant if unknown() then (c <= n) else (c > n);\nloop invariant if unknown() then (c <= n) else (c >= n);\nloop invariant if unknown() then (c < n) else (c == n);\nloop invariant if unknown() then (c <= n) else (c == n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant n > 0;\nloop invariant (c < 0) ==> (c == n);\nloop invariant (c > n) ==> (c == n);\nloop invariant (c >= 0) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c == n);\nloop invariant (c >= 0) ==> (c > n) ==> (c == n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\n*/\n```",
            "```\n/*@\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c >= n ==> c == 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c >= n ==> c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c >= 0) && (c <= n);\nloop invariant (c != n) ==> (c >= 0) && (c <= n);\nloop invariant (c == 1) ==> (c >= 0) && (c <= n);\nloop invariant (c != 1) ==> (c >= 0) && (c <= n);\nloop invariant (c == 0) ==> (c >= 0) && (c <= n);\nloop invariant (c != 0) ==> (c >= 0) && (c <= n);\nloop invariant (c >= 0) ==> (c <= n);\nloop invariant (c <= n) ==> (c >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> unknown();\nloop invariant c < n ==> !unknown();\nloop invariant c == 1 ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c > c ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c > c ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c != n) ==> (c != n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n ==> c >= 0;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c != n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 0 ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= n;\nloop invariant i2: c >= 0;\nloop invariant i3: c <= n;\nloop invariant i4: c == 0 ==> c < n;\nloop invariant i5: c == n ==> c > 0;\nloop invariant i6: c == n ==> c <= n;\nloop invariant i7: c == n ==> c >= 0;\nloop invariant i8: c != n ==> c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c != 1 ==> c != n;\nloop invariant c == 1 ==> c == n;\nloop invariant c == 1 ==> n >= 1;\nloop invariant c != 1 ==> n >= 1;\nloop invariant c == 1 ==> unknown();\nloop invariant c != 1 ==> !unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\nloop invariant i4: c == 1 ==> n >= 1;\nloop invariant i5: c != 1 ==> n >= 1;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c == (1 + (n - 1) * n / 2);\nloop invariant c == (1 + (n - 1) * n / 2) ==> (c < 0 && c > n);\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c != n;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c != 1;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n && c != 1;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0 && c != 0 && c != 0 && c != 0;\nloop invariant c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0 && c != 0 && c != 0 && c != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if (unknown()) {c >= 0;} else {c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c < n) ==> (c == 0);\nloop invariant (c == n) ==> (c > 0);\nloop invariant (c < n) ==> (c != 0);\nloop invariant (c == n) ==> (c != 1);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\nloop invariant (c < n) ==> (c != 1);\nloop invariant (c == n) ==> (c != 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\n\nloop invariant i3: (c == n) ==> (c > 0);\n\n\n\nloop invariant i7: (c == n) ==> (c != 0);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant if unknown() then (c < n) else (c >= n);\nloop invariant if unknown() then (c < n) else (c <= n);\nloop invariant if unknown() then (c <= n) else (c > n);\nloop invariant if unknown() then (c <= n) else (c >= n);\nloop invariant if unknown() then (c < n) else (c == n);\nloop invariant if unknown() then (c <= n) else (c == n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\nloop invariant if unknown() then (c == n) else (c >= n);\nloop invariant if unknown() then (c == n) else (c < n);\nloop invariant if unknown() then (c == n) else (c <= n);\nloop invariant if unknown() then (c == n) else (c > n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 0 <= n;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant c <= n;\nloop invariant c >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant 0 <= n;\nloop invariant n > 0;\nloop invariant (c < 0) ==> (c == n);\nloop invariant (c > n) ==> (c == n);\nloop invariant (c >= 0) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c == n);\nloop invariant (c >= 0) ==> (c > n) ==> (c == n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant (c >= 0) ==> (c == n) ==> (c <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: 0 <= n;\nloop invariant i3: n > 0;\nloop invariant i4: (c < 0) ==> (c == n);\nloop invariant i5: (c > n) ==> (c == n);\nloop invariant i6: (c >= 0) ==> (c <= n);\nloop invariant i7: (c >= 0) ==> (c == n) ==> (c == n);\nloop invariant i8: (c >= 0) ==> (c > n) ==> (c == n);\nloop invariant i9: (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant i10: (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant i11: (c >= 0) ==> (c > n) ==> (c <= n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c >= n ==> c == 1;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c >= n ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c >= 0;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c >= 0) && (c <= n);\nloop invariant (c != n) ==> (c >= 0) && (c <= n);\nloop invariant (c == 1) ==> (c >= 0) && (c <= n);\nloop invariant (c != 1) ==> (c >= 0) && (c <= n);\nloop invariant (c == 0) ==> (c >= 0) && (c <= n);\nloop invariant (c != 0) ==> (c >= 0) && (c <= n);\nloop invariant (c >= 0) ==> (c <= n);\nloop invariant (c <= n) ==> (c >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: (c == n) ==> (c >= 0) && (c <= n);\n\n\n\n\n\n\nloop invariant i9: (c <= n) ==> (c >= 0);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> unknown();\nloop invariant c < n ==> !unknown();\nloop invariant c == 1 ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c > c ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c > c ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\nloop invariant c < n ==> unknown() && !unknown();\nloop invariant c == c ==> unknown() && !unknown();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c >= 0);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c != n) ==> (c >= 0);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c == n) ==> (c == n);\nloop invariant (c != n) ==> (c != n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: (c == n) ==> (c >= 0);\nloop invariant i3: (c == n) ==> (c <= n);\nloop invariant i4: (c != n) ==> (c >= 0);\n\nloop invariant i6: (c == n) ==> (c == n);\nloop invariant i7: (c != n) ==> (c != n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == n ==> c >= 0;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c != n ==> c != n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c >= 0;\n\nloop invariant i4: c == n ==> c >= 0;\nloop invariant i5: c == n ==> c <= n;\nloop invariant i6: c == n ==> c == n;\nloop invariant i7: c != n ==> c >= 0;\n\nloop invariant i9: c != n ==> c != n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 31: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= n;\nloop invariant i2: c >= 0;\nloop invariant i3: c <= n;\nloop invariant i4: c == 0 ==> c < n;\nloop invariant i5: c == n ==> c > 0;\nloop invariant i6: c == n ==> c <= n;\nloop invariant i7: c == n ==> c >= 0;\nloop invariant i8: c != n ==> c >= 0;\nloop invariant i9: 1 <= c <= n;\nloop invariant i10: c != 1 ==> c != n;\nloop invariant i11: c == 1 ==> c == n;\nloop invariant i12: c == 1 ==> n >= 1;\nloop invariant i13: c != 1 ==> n >= 1;\nloop invariant i14: c == 1 ==> unknown();\nloop invariant i15: c != 1 ==> !unknown();\nloop invariant i16: c == (1 + (n - 1) * n / 2);\nloop invariant i17: c == (1 + (n - 1) * n / 2) ==> (c < 0 && c > n);\nloop invariant i18: c == (1 + (n - 1) * n / 2) ==> c == n;\nloop invariant i19: c == (1 + (n - 1) * n / 2) ==> c != n;\nloop invariant i20: c == (1 + (n - 1) * n / 2) ==> c == 1;\nloop invariant i21: c == (1 + (n - 1) * n / 2) ==> c != 1;\nloop invariant i22: c == (1 + (n - 1) * n / 2) ==> c == n && c != 1;\nloop invariant i23: c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n;\nloop invariant i24: c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1;\nloop invariant i25: c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1;\nloop invariant i26: c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0;\nloop invariant i27: c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0;\nloop invariant i28: c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0;\nloop invariant i29: c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0;\nloop invariant i30: c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0 && c != 0;\nloop invariant i31: c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0 && c != 0;\nloop invariant i32: c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0 && c != 0;\nloop invariant i33: c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0 && c != 0;\nloop invariant i34: c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0 && c != 0 && c != 0;\nloop invariant i35: c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0 && c != 0 && c != 0;\nloop invariant i36: c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0 && c != 0 && c != 0;\nloop invariant i37: c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0 && c != 0 && c != 0;\nloop invariant i38: c == (1 + (n - 1) * n / 2) ==> c == n && c != 1 && c != 0 && c != 0 && c != 0 && c != 0;\nloop invariant i39: c == (1 + (n - 1) * n / 2) ==> c == 1 && c != n && c != 0 && c != 0 && c != 0 && c != 0;\nloop invariant i40: c == (1 + (n - 1) * n / 2) ==> c < 0 && c != n && c != 1 && c != 0 && c != 0 && c != 0 && c != 0;\nloop invariant i41: c == (1 + (n - 1) * n / 2) ==> c > n && c != n && c != 1 && c != 0 && c != 0 && c != 0 && c != 0;\nloop invariant i42: 0 <= c <= n;\nloop invariant i43: if (unknown()) {c >= 0;} else {c <= n;\nloop invariant i44: (c < n) ==> (c == 0);\nloop invariant i45: (c == n) ==> (c > 0);\nloop invariant i46: (c < n) ==> (c != 0);\nloop invariant i47: (c == n) ==> (c != 1);\nloop invariant i48: (c < n) ==> (c != 1);\nloop invariant i49: (c == n) ==> (c != 0);\nloop invariant i50: if unknown() then (c < n) else (c >= n);\nloop invariant i51: if unknown() then (c < n) else (c <= n);\nloop invariant i52: if unknown() then (c <= n) else (c > n);\nloop invariant i53: if unknown() then (c <= n) else (c >= n);\nloop invariant i54: if unknown() then (c < n) else (c == n);\nloop invariant i55: if unknown() then (c <= n) else (c == n);\nloop invariant i56: if unknown() then (c == n) else (c < n);\nloop invariant i57: if unknown() then (c == n) else (c <= n);\nloop invariant i58: if unknown() then (c == n) else (c > n);\nloop invariant i59: if unknown() then (c == n) else (c >= n);\nloop invariant i60: c >= 1;\nloop invariant i61: n > 0;\nloop invariant i62: (c < 0) ==> (c == n);\nloop invariant i63: (c > n) ==> (c == n);\nloop invariant i64: (c >= 0) ==> (c <= n);\nloop invariant i65: (c >= 0) ==> (c == n) ==> (c == n);\nloop invariant i66: (c >= 0) ==> (c > n) ==> (c == n);\nloop invariant i67: (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant i68: (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant i69: (c >= 0) ==> (c > n) ==> (c <= n);\nloop invariant i70: c >= n ==> c == 1;\nloop invariant i71: (c == n) ==> (c >= 0) && (c <= n);\nloop invariant i72: (c != n) ==> (c >= 0) && (c <= n);\nloop invariant i73: (c == 1) ==> (c >= 0) && (c <= n);\nloop invariant i74: (c != 1) ==> (c >= 0) && (c <= n);\nloop invariant i75: (c == 0) ==> (c >= 0) && (c <= n);\nloop invariant i76: (c != 0) ==> (c >= 0) && (c <= n);\nloop invariant i77: (c <= n) ==> (c >= 0);\nloop invariant i78: c == n ==> unknown();\nloop invariant i79: c < n ==> !unknown();\nloop invariant i80: c == 1 ==> unknown() && !unknown();\nloop invariant i81: c < n ==> unknown() && !unknown();\nloop invariant i82: c > c ==> unknown() && !unknown();\nloop invariant i83: c == c ==> unknown() && !unknown();\nloop invariant i84: (c == n) ==> (c >= 0);\nloop invariant i85: (c == n) ==> (c <= n);\nloop invariant i86: (c != n) ==> (c >= 0);\nloop invariant i87: (c != n) ==> (c < n);\nloop invariant i88: (c == n) ==> (c == n);\nloop invariant i89: (c != n) ==> (c != n);\nloop invariant i90: c == n ==> c == n;\nloop invariant i91: c != n ==> c <= n;\nloop invariant i92: c != n ==> c != n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 44,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= n;\nloop invariant i2: c >= 0;\nloop invariant i3: c <= n;\nloop invariant i4: c == 0 ==> c < n;\nloop invariant i5: c == n ==> c > 0;\nloop invariant i6: c == n ==> c <= n;\nloop invariant i7: c == n ==> c >= 0;\nloop invariant i8: c != n ==> c >= 0;\n\n\n\nloop invariant i12: c == 1 ==> n >= 1;\nloop invariant i13: c != 1 ==> n >= 1;\n\n\n\n\nloop invariant i18: c == (1 + (n - 1) * n / 2) ==> c == n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i42: 0 <= c <= n;\n\n\nloop invariant i45: (c == n) ==> (c > 0);\n\n\n\nloop invariant i49: (c == n) ==> (c != 0);\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i61: n > 0;\nloop invariant i62: (c < 0) ==> (c == n);\nloop invariant i63: (c > n) ==> (c == n);\nloop invariant i64: (c >= 0) ==> (c <= n);\nloop invariant i65: (c >= 0) ==> (c == n) ==> (c == n);\nloop invariant i66: (c >= 0) ==> (c > n) ==> (c == n);\nloop invariant i67: (c >= 0) ==> (c < n) ==> (c <= n);\nloop invariant i68: (c >= 0) ==> (c == n) ==> (c <= n);\nloop invariant i69: (c >= 0) ==> (c > n) ==> (c <= n);\n\nloop invariant i71: (c == n) ==> (c >= 0) && (c <= n);\nloop invariant i72: (c != n) ==> (c >= 0) && (c <= n);\nloop invariant i73: (c == 1) ==> (c >= 0) && (c <= n);\nloop invariant i74: (c != 1) ==> (c >= 0) && (c <= n);\nloop invariant i75: (c == 0) ==> (c >= 0) && (c <= n);\nloop invariant i76: (c != 0) ==> (c >= 0) && (c <= n);\nloop invariant i77: (c <= n) ==> (c >= 0);\n\n\n\n\n\n\nloop invariant i84: (c == n) ==> (c >= 0);\nloop invariant i85: (c == n) ==> (c <= n);\nloop invariant i86: (c != n) ==> (c >= 0);\nloop invariant i87: (c != n) ==> (c < n);\nloop invariant i88: (c == n) ==> (c == n);\nloop invariant i89: (c != n) ==> (c != n);\nloop invariant i90: c == n ==> c == n;\nloop invariant i91: c != n ==> c <= n;\nloop invariant i92: c != n ==> c != n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 39,
        "success_count": 35,
        "failure_count": 4,
        "success_rate": 0.8974358974358975
    }
}