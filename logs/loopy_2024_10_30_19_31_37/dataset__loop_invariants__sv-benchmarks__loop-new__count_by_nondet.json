{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant i == (k * (k + 1)) / 2;\nloop invariant (k * (k + 1)) / 2 <= LARGE_INT;\nloop invariant unknown_int() >= 1;\nloop invariant unknown_int() < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j;\nloop invariant 0 <= i + j;\nloop invariant i + j < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant j >= 0;\nloop invariant j < LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j >= j;\nloop invariant i + j >= i + j - 1;\nloop invariant i + j >= i + j - 2;\nloop invariant i + j >= i + j - 3;\nloop invariant i + j >= i + j - 4;\nloop invariant i + j >= i + j - 5;\nloop invariant i + j >= i + j - 6;\nloop invariant i + j >= i + j - 7;\nloop invariant i + j >= i + j - 8;\nloop invariant i + j >= i + j - 9;\nloop invariant i + j >= i + j - 10;\nloop invariant i + j >= i + j - 11;\nloop invariant i + j >= i + j - 12;\nloop invariant i + j >= i + j - 13;\nloop invariant i + j >= i + j - 14;\nloop invariant i + j >= i + j - 15;\nloop invariant i + j >= i + j - 16;\nloop invariant i + j >= i + j - 17;\nloop invariant i + j >= i + j - 18;\nloop invariant i + j >= i + j - 19;\nloop invariant i + j >= i + j - 20;\nloop invariant i + j >= i + j - 21;\nloop invariant i + j >= i + j - 22;\nloop invariant i + j >= i + j - 23;\nloop invariant i + j >= i + j - 24;\nloop invariant i + j >= i + j - 25;\nloop invariant i + j >= i + j - 26;\nloop invariant i + j >= i + j - 27;\nloop invariant i + j >= i + j - 28;\nloop invariant i + j >= i + j - 29;\nloop invariant i + j >= i + j - 30;\nloop invariant i + j >= i + j - 31;\nloop invariant i + j >= i + j - 32;\nloop invariant i + j >= i + j - 33;\nloop invariant i + j >= i + j - 34;\nloop invariant i + j >= i + j - 35;\nloop invariant i + j >= i + j - 36;\nloop invariant i + j >= i + j - 37;\nloop invariant i + j >= i + j - 38;\nloop invariant i + j >= i + j - 39;\nloop invariant i + j >= i + j - 40;\nloop invariant i + j >= i + j - 41;\nloop invariant i + j >= i + j - 42;\nloop invariant i + j >= i + j - 43;\nloop invariant i + j >= i + j - 44;\nloop invariant i + j >= i + j - 45;\nloop invariant i + j >= i + j - 46;\nloop invariant i + j >= i + j - 47;\nloop invariant i + j >= i + j - 48;\nloop invariant i + j >= i + j - 49;\nloop invariant i + j >= i + j - 50;\nloop invariant i + j >= i + j - 51;\nloop invariant i + j >= i + j - 52;\nloop invariant i + j >= i + j - 53;\nloop invariant i + j >= i + j - 54;\nloop invariant i + j >= i + j - 55;\nloop invariant i + j >= i + j - 56;\nloop invariant i + j >= i + j - 57;\nloop invariant i + j >= i + j - 58;\nloop invariant i + j >= i + j - 59;\nloop invariant i + j >= i + j - 60;\nloop invariant i + j >= i + j - 61;\nloop invariant i + j >= i + j - 62;\nloop invariant i + j >= i + j - 63;\nloop invariant i + j >= i + j - 64;\nloop invariant i + j >= i + j - 65;\nloop invariant i + j >= i + j - 66;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant i >= j * k;\nloop invariant k == i / (LARGE_INT - 1);\nloop invariant i % (LARGE_INT - 1) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i == k * j;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i + j < LARGE_INT ==> i < LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + j >= 0 ==> 0 <= j < LARGE_INT;\nloop invariant i + j >= 0 ==> 0 <= i <= LARGE_INT;\nloop invariant i + j >= 0 ==> 0 <= k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i <= i + j;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT; loop invariant 0 <= k <= LARGE_INT; loop invariant i == (k * (k + 1) / 2); loop invariant k >= 0; loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + j == i' + j';\nloop invariant k + 1 == k' + 1;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i' + j' == i + j;\nloop invariant k' + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant i + j <= LARGE_INT;\nloop invariant k == i / LARGE_INT;\nloop invariant i == k * LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j < LARGE_INT;\nloop invariant 1 <= i + j < LARGE_INT * LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant (i + j) <= (k + 1) * LARGE_INT;\nloop invariant i + j < LARGE_INT * (k + 1);\nloop invariant i + j >= k;\nloop invariant i + j >= k * LARGE_INT;\nloop invariant i + j < k * LARGE_INT + LARGE_INT;\nloop invariant i + j < (k + 1) * LARGE_INT;\nloop invariant i + j < (k + 1) * LARGE_INT;\nloop invariant (k + 1) * LARGE_INT <= i + j < (k + 2) * LARGE_INT;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT ==> i + j - k <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= j < LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 0 <= k <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 1 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 2 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 3 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 4 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 5 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 6 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 7 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 8 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 9 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 10 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 11 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 12 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 13 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 14 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 15 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 16 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 17 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 18 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 19 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 20 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 21 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 22 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 23 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 24 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 25 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 26 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 27 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 28 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 29 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 30 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 31 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 32 <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant i + k * j <= LARGE_INT;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT ==> k == i / j;\nloop invariant i < LARGE_INT ==> i + j == i * (i + 1) / 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant i == (k * (k + 1)) / 2;\nloop invariant (k * (k + 1)) / 2 <= LARGE_INT;\nloop invariant unknown_int() >= 1;\nloop invariant unknown_int() < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 75,
                "annotations": "```\n/*@\nloop invariant 0 <= j;\nloop invariant 0 <= i + j;\nloop invariant i + j < LARGE_INT;\nloop invariant k >= 0;\nloop invariant k <= LARGE_INT;\nloop invariant i >= 0;\nloop invariant i < LARGE_INT;\nloop invariant j >= 0;\nloop invariant j < LARGE_INT;\nloop invariant i + j >= i;\nloop invariant i + j >= j;\nloop invariant i + j >= i + j - 1;\nloop invariant i + j >= i + j - 2;\nloop invariant i + j >= i + j - 3;\nloop invariant i + j >= i + j - 4;\nloop invariant i + j >= i + j - 5;\nloop invariant i + j >= i + j - 6;\nloop invariant i + j >= i + j - 7;\nloop invariant i + j >= i + j - 8;\nloop invariant i + j >= i + j - 9;\nloop invariant i + j >= i + j - 10;\nloop invariant i + j >= i + j - 11;\nloop invariant i + j >= i + j - 12;\nloop invariant i + j >= i + j - 13;\nloop invariant i + j >= i + j - 14;\nloop invariant i + j >= i + j - 15;\nloop invariant i + j >= i + j - 16;\nloop invariant i + j >= i + j - 17;\nloop invariant i + j >= i + j - 18;\nloop invariant i + j >= i + j - 19;\nloop invariant i + j >= i + j - 20;\nloop invariant i + j >= i + j - 21;\nloop invariant i + j >= i + j - 22;\nloop invariant i + j >= i + j - 23;\nloop invariant i + j >= i + j - 24;\nloop invariant i + j >= i + j - 25;\nloop invariant i + j >= i + j - 26;\nloop invariant i + j >= i + j - 27;\nloop invariant i + j >= i + j - 28;\nloop invariant i + j >= i + j - 29;\nloop invariant i + j >= i + j - 30;\nloop invariant i + j >= i + j - 31;\nloop invariant i + j >= i + j - 32;\nloop invariant i + j >= i + j - 33;\nloop invariant i + j >= i + j - 34;\nloop invariant i + j >= i + j - 35;\nloop invariant i + j >= i + j - 36;\nloop invariant i + j >= i + j - 37;\nloop invariant i + j >= i + j - 38;\nloop invariant i + j >= i + j - 39;\nloop invariant i + j >= i + j - 40;\nloop invariant i + j >= i + j - 41;\nloop invariant i + j >= i + j - 42;\nloop invariant i + j >= i + j - 43;\nloop invariant i + j >= i + j - 44;\nloop invariant i + j >= i + j - 45;\nloop invariant i + j >= i + j - 46;\nloop invariant i + j >= i + j - 47;\nloop invariant i + j >= i + j - 48;\nloop invariant i + j >= i + j - 49;\nloop invariant i + j >= i + j - 50;\nloop invariant i + j >= i + j - 51;\nloop invariant i + j >= i + j - 52;\nloop invariant i + j >= i + j - 53;\nloop invariant i + j >= i + j - 54;\nloop invariant i + j >= i + j - 55;\nloop invariant i + j >= i + j - 56;\nloop invariant i + j >= i + j - 57;\nloop invariant i + j >= i + j - 58;\nloop invariant i + j >= i + j - 59;\nloop invariant i + j >= i + j - 60;\nloop invariant i + j >= i + j - 61;\nloop invariant i + j >= i + j - 62;\nloop invariant i + j >= i + j - 63;\nloop invariant i + j >= i + j - 64;\nloop invariant i + j >= i + j - 65;\nloop invariant i + j >= i + j - 66;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\nloop invariant i4: k >= 0;\n\nloop invariant i6: i >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant k <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT;\nloop invariant i >= j * k;\nloop invariant k == i / (LARGE_INT - 1);\nloop invariant i % (LARGE_INT - 1) == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i == k * j;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i + j < LARGE_INT ==> i < LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + j >= 0 ==> 0 <= j < LARGE_INT;\nloop invariant i + j >= 0 ==> 0 <= i <= LARGE_INT;\nloop invariant i + j >= 0 ==> 0 <= k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i <= i + j;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i + j >= 0 ==> k <= k + 1;\nloop invariant i + j >= 0 ==> k <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT; loop invariant 0 <= k <= LARGE_INT; loop invariant i == (k * (k + 1) / 2); loop invariant k >= 0; loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant i + j == i' + j';\nloop invariant k + 1 == k' + 1;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i' + j' == i + j;\nloop invariant k' + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\nloop invariant k + 1 == k + 1;\nloop invariant i' <= LARGE_INT;\nloop invariant k' <= LARGE_INT;\nloop invariant j' >= 1;\nloop invariant j' < LARGE_INT;\nloop invariant i + j == i + j';\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: i + j == i' + j';\nloop invariant i4: k + 1 == k' + 1;\nloop invariant i5: j >= 1;\nloop invariant i6: j < LARGE_INT;\nloop invariant i7: i' + j' == i + j;\nloop invariant i8: k' + 1 == k + 1;\nloop invariant i9: i' <= LARGE_INT;\nloop invariant i10: k' <= LARGE_INT;\nloop invariant i11: j' >= 1;\nloop invariant i12: j' < LARGE_INT;\nloop invariant i13: i + j == i + j';\nloop invariant i14: k + 1 == k + 1;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT;\nloop invariant k = i - 1;\nloop invariant j = unknown_int();\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant i + j <= LARGE_INT;\nloop invariant k == i / LARGE_INT;\nloop invariant i == k * LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= j < LARGE_INT;\nloop invariant 1 <= i + j < LARGE_INT * LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant (i + j) <= (k + 1) * LARGE_INT;\nloop invariant i + j < LARGE_INT * (k + 1);\nloop invariant i + j >= k;\nloop invariant i + j >= k * LARGE_INT;\nloop invariant i + j < k * LARGE_INT + LARGE_INT;\nloop invariant i + j < (k + 1) * LARGE_INT;\nloop invariant i + j < (k + 1) * LARGE_INT;\nloop invariant (k + 1) * LARGE_INT <= i + j < (k + 2) * LARGE_INT;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\nloop invariant k + 1 <= i / LARGE_INT < k + 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 39,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 1 <= j < LARGE_INT ==> i + j - k <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= j < LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 0 <= k <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 1 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 2 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 3 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 4 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 5 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 6 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 7 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 8 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 9 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 10 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 11 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 12 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 13 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 14 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 15 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 16 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 17 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 18 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 19 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 20 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 21 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 22 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 23 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 24 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 25 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 26 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 27 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 28 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 29 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 30 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 31 <= LARGE_INT;\nloop invariant i + j - k <= LARGE_INT ==> 1 <= i + j - k - 32 <= LARGE_INT;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= j <= LARGE_INT;\nloop invariant i + k * j <= LARGE_INT;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant j >= 1;\nloop invariant j < LARGE_INT;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\nloop invariant i + k * j <= i + j;\nloop invariant i + k * j >= i;\nloop invariant i + k * j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= LARGE_INT;\nloop invariant 0 <= i <= LARGE_INT;\nloop invariant 1 <= j && j < LARGE_INT;\nloop invariant i < LARGE_INT ==> k == i / j;\nloop invariant i < LARGE_INT ==> i + j == i * (i + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\n\n\n\n\n\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "No CSV output dump found from Frama-C",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 1 <= i <= LARGE_INT;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: 0 <= j < LARGE_INT;\nloop invariant i4: i == (k * (k + 1)) / 2;\nloop invariant i5: (k * (k + 1)) / 2 <= LARGE_INT;\nloop invariant i6: unknown_int() >= 1;\nloop invariant i7: unknown_int() < LARGE_INT;\nloop invariant i8: 0 <= j;\nloop invariant i9: 0 <= i + j;\nloop invariant i10: i + j < LARGE_INT;\nloop invariant i11: k >= 0;\nloop invariant i12: k <= LARGE_INT;\nloop invariant i13: i >= 0;\nloop invariant i14: i < LARGE_INT;\nloop invariant i15: j >= 0;\nloop invariant i16: j < LARGE_INT;\nloop invariant i17: i + j >= i;\nloop invariant i18: i + j >= j;\nloop invariant i19: i + j >= i + j - 1;\nloop invariant i20: i + j >= i + j - 2;\nloop invariant i21: i + j >= i + j - 3;\nloop invariant i22: i + j >= i + j - 4;\nloop invariant i23: i + j >= i + j - 5;\nloop invariant i24: i + j >= i + j - 6;\nloop invariant i25: i + j >= i + j - 7;\nloop invariant i26: i + j >= i + j - 8;\nloop invariant i27: i + j >= i + j - 9;\nloop invariant i28: i + j >= i + j - 10;\nloop invariant i29: i + j >= i + j - 11;\nloop invariant i30: i + j >= i + j - 12;\nloop invariant i31: i + j >= i + j - 13;\nloop invariant i32: i + j >= i + j - 14;\nloop invariant i33: i + j >= i + j - 15;\nloop invariant i34: i + j >= i + j - 16;\nloop invariant i35: i + j >= i + j - 17;\nloop invariant i36: i + j >= i + j - 18;\nloop invariant i37: i + j >= i + j - 19;\nloop invariant i38: i + j >= i + j - 20;\nloop invariant i39: i + j >= i + j - 21;\nloop invariant i40: i + j >= i + j - 22;\nloop invariant i41: i + j >= i + j - 23;\nloop invariant i42: i + j >= i + j - 24;\nloop invariant i43: i + j >= i + j - 25;\nloop invariant i44: i + j >= i + j - 26;\nloop invariant i45: i + j >= i + j - 27;\nloop invariant i46: i + j >= i + j - 28;\nloop invariant i47: i + j >= i + j - 29;\nloop invariant i48: i + j >= i + j - 30;\nloop invariant i49: i + j >= i + j - 31;\nloop invariant i50: i + j >= i + j - 32;\nloop invariant i51: i + j >= i + j - 33;\nloop invariant i52: i + j >= i + j - 34;\nloop invariant i53: i + j >= i + j - 35;\nloop invariant i54: i + j >= i + j - 36;\nloop invariant i55: i + j >= i + j - 37;\nloop invariant i56: i + j >= i + j - 38;\nloop invariant i57: i + j >= i + j - 39;\nloop invariant i58: i + j >= i + j - 40;\nloop invariant i59: i + j >= i + j - 41;\nloop invariant i60: i + j >= i + j - 42;\nloop invariant i61: i + j >= i + j - 43;\nloop invariant i62: i + j >= i + j - 44;\nloop invariant i63: i + j >= i + j - 45;\nloop invariant i64: i + j >= i + j - 46;\nloop invariant i65: i + j >= i + j - 47;\nloop invariant i66: i + j >= i + j - 48;\nloop invariant i67: i + j >= i + j - 49;\nloop invariant i68: i + j >= i + j - 50;\nloop invariant i69: i + j >= i + j - 51;\nloop invariant i70: i + j >= i + j - 52;\nloop invariant i71: i + j >= i + j - 53;\nloop invariant i72: i + j >= i + j - 54;\nloop invariant i73: i + j >= i + j - 55;\nloop invariant i74: i + j >= i + j - 56;\nloop invariant i75: i + j >= i + j - 57;\nloop invariant i76: i + j >= i + j - 58;\nloop invariant i77: i + j >= i + j - 59;\nloop invariant i78: i + j >= i + j - 60;\nloop invariant i79: i + j >= i + j - 61;\nloop invariant i80: i + j >= i + j - 62;\nloop invariant i81: i + j >= i + j - 63;\nloop invariant i82: i + j >= i + j - 64;\nloop invariant i83: i + j >= i + j - 65;\nloop invariant i84: i + j >= i + j - 66;\nloop invariant i85: 0 <= i <= LARGE_INT;\nloop invariant i86: j >= 1;\nloop invariant i87: 1 <= j < LARGE_INT;\nloop invariant i88: i >= j * k;\nloop invariant i89: k == i / (LARGE_INT - 1);\nloop invariant i90: i % (LARGE_INT - 1) == 0;\nloop invariant i91: i == k * j;\nloop invariant i92: 1 <= j && j < LARGE_INT;\nloop invariant i93: i + j < LARGE_INT ==> i < LARGE_INT;\nloop invariant i94: i1;\nloop invariant i95: i2;\nloop invariant i96: i3;\nloop invariant i97: i4;\nloop invariant i98: i + j >= 0 ==> 0 <= j < LARGE_INT;\nloop invariant i99: i + j >= 0 ==> 0 <= i <= LARGE_INT;\nloop invariant i100: i + j >= 0 ==> 0 <= k <= LARGE_INT;\nloop invariant i101: i + j >= 0 ==> i <= i + j;\nloop invariant i102: i + j >= 0 ==> k <= k + 1;\nloop invariant i103: i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i104: i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i105: 0 <= i <= LARGE_INT; loop invariant 0 <= k <= LARGE_INT; loop invariant i == (k * (k + 1) / 2); loop invariant k >= 0; loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i;\nloop invariant i106: i + j == i' + j';\nloop invariant i107: k + 1 == k' + 1;\nloop invariant i108: i' + j' == i + j;\nloop invariant i109: k' + 1 == k + 1;\nloop invariant i110: i' <= LARGE_INT;\nloop invariant i111: k' <= LARGE_INT;\nloop invariant i112: j' >= 1;\nloop invariant i113: j' < LARGE_INT;\nloop invariant i114: i + j == i + j';\nloop invariant i115: k + 1 == k + 1;\nloop invariant i116: k = i - 1;\nloop invariant i117: j = unknown_int();\nloop invariant i118: 0 <= j <= LARGE_INT;\nloop invariant i119: i + j <= LARGE_INT;\nloop invariant i120: k == i / LARGE_INT;\nloop invariant i121: i == k * LARGE_INT;\nloop invariant i122: 1 <= i + j < LARGE_INT * LARGE_INT;\nloop invariant i123: (i + j) <= (k + 1) * LARGE_INT;\nloop invariant i124: i + j < LARGE_INT * (k + 1);\nloop invariant i125: i + j >= k;\nloop invariant i126: i + j >= k * LARGE_INT;\nloop invariant i127: i + j < k * LARGE_INT + LARGE_INT;\nloop invariant i128: i + j < (k + 1) * LARGE_INT;\nloop invariant i129: (k + 1) * LARGE_INT <= i + j < (k + 2) * LARGE_INT;\nloop invariant i130: k + 1 <= i / LARGE_INT < k + 2;\nloop invariant i131: 1 <= j < LARGE_INT ==> i + j - k <= LARGE_INT;\nloop invariant i132: i + j - k <= LARGE_INT ==> 1 <= j < LARGE_INT;\nloop invariant i133: i + j - k <= LARGE_INT ==> 1 <= i <= LARGE_INT;\nloop invariant i134: i + j - k <= LARGE_INT ==> 0 <= k <= LARGE_INT;\nloop invariant i135: i + j - k <= LARGE_INT ==> 1 <= i + j - k <= LARGE_INT;\nloop invariant i136: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 1 <= LARGE_INT;\nloop invariant i137: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 2 <= LARGE_INT;\nloop invariant i138: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 3 <= LARGE_INT;\nloop invariant i139: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 4 <= LARGE_INT;\nloop invariant i140: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 5 <= LARGE_INT;\nloop invariant i141: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 6 <= LARGE_INT;\nloop invariant i142: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 7 <= LARGE_INT;\nloop invariant i143: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 8 <= LARGE_INT;\nloop invariant i144: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 9 <= LARGE_INT;\nloop invariant i145: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 10 <= LARGE_INT;\nloop invariant i146: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 11 <= LARGE_INT;\nloop invariant i147: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 12 <= LARGE_INT;\nloop invariant i148: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 13 <= LARGE_INT;\nloop invariant i149: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 14 <= LARGE_INT;\nloop invariant i150: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 15 <= LARGE_INT;\nloop invariant i151: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 16 <= LARGE_INT;\nloop invariant i152: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 17 <= LARGE_INT;\nloop invariant i153: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 18 <= LARGE_INT;\nloop invariant i154: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 19 <= LARGE_INT;\nloop invariant i155: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 20 <= LARGE_INT;\nloop invariant i156: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 21 <= LARGE_INT;\nloop invariant i157: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 22 <= LARGE_INT;\nloop invariant i158: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 23 <= LARGE_INT;\nloop invariant i159: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 24 <= LARGE_INT;\nloop invariant i160: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 25 <= LARGE_INT;\nloop invariant i161: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 26 <= LARGE_INT;\nloop invariant i162: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 27 <= LARGE_INT;\nloop invariant i163: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 28 <= LARGE_INT;\nloop invariant i164: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 29 <= LARGE_INT;\nloop invariant i165: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 30 <= LARGE_INT;\nloop invariant i166: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 31 <= LARGE_INT;\nloop invariant i167: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 32 <= LARGE_INT;\nloop invariant i168: i + k * j <= LARGE_INT;\nloop invariant i169: i + k * j >= i;\nloop invariant i170: i + k * j >= 0;\nloop invariant i171: i + k * j <= i + j;\nloop invariant i172: i < LARGE_INT ==> k == i / j;\nloop invariant i173: i < LARGE_INT ==> i + j == i * (i + 1) / 2;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    /*@\nloop invariant i1: 1 <= i <= LARGE_INT;\nloop invariant i2: 0 <= k <= LARGE_INT;\nloop invariant i3: 0 <= j < LARGE_INT;\nloop invariant i4: i == (k * (k + 1)) / 2;\nloop invariant i5: (k * (k + 1)) / 2 <= LARGE_INT;\nloop invariant i6: unknown_int() >= 1;\nloop invariant i7: unknown_int() < LARGE_INT;\nloop invariant i8: 0 <= j;\nloop invariant i9: 0 <= i + j;\nloop invariant i10: i + j < LARGE_INT;\nloop invariant i11: k >= 0;\nloop invariant i12: k <= LARGE_INT;\nloop invariant i13: i >= 0;\nloop invariant i14: i < LARGE_INT;\nloop invariant i15: j >= 0;\nloop invariant i16: j < LARGE_INT;\nloop invariant i17: i + j >= i;\nloop invariant i18: i + j >= j;\nloop invariant i19: i + j >= i + j - 1;\nloop invariant i20: i + j >= i + j - 2;\nloop invariant i21: i + j >= i + j - 3;\nloop invariant i22: i + j >= i + j - 4;\nloop invariant i23: i + j >= i + j - 5;\nloop invariant i24: i + j >= i + j - 6;\nloop invariant i25: i + j >= i + j - 7;\nloop invariant i26: i + j >= i + j - 8;\nloop invariant i27: i + j >= i + j - 9;\nloop invariant i28: i + j >= i + j - 10;\nloop invariant i29: i + j >= i + j - 11;\nloop invariant i30: i + j >= i + j - 12;\nloop invariant i31: i + j >= i + j - 13;\nloop invariant i32: i + j >= i + j - 14;\nloop invariant i33: i + j >= i + j - 15;\nloop invariant i34: i + j >= i + j - 16;\nloop invariant i35: i + j >= i + j - 17;\nloop invariant i36: i + j >= i + j - 18;\nloop invariant i37: i + j >= i + j - 19;\nloop invariant i38: i + j >= i + j - 20;\nloop invariant i39: i + j >= i + j - 21;\nloop invariant i40: i + j >= i + j - 22;\nloop invariant i41: i + j >= i + j - 23;\nloop invariant i42: i + j >= i + j - 24;\nloop invariant i43: i + j >= i + j - 25;\nloop invariant i44: i + j >= i + j - 26;\nloop invariant i45: i + j >= i + j - 27;\nloop invariant i46: i + j >= i + j - 28;\nloop invariant i47: i + j >= i + j - 29;\nloop invariant i48: i + j >= i + j - 30;\nloop invariant i49: i + j >= i + j - 31;\nloop invariant i50: i + j >= i + j - 32;\nloop invariant i51: i + j >= i + j - 33;\nloop invariant i52: i + j >= i + j - 34;\nloop invariant i53: i + j >= i + j - 35;\nloop invariant i54: i + j >= i + j - 36;\nloop invariant i55: i + j >= i + j - 37;\nloop invariant i56: i + j >= i + j - 38;\nloop invariant i57: i + j >= i + j - 39;\nloop invariant i58: i + j >= i + j - 40;\nloop invariant i59: i + j >= i + j - 41;\nloop invariant i60: i + j >= i + j - 42;\nloop invariant i61: i + j >= i + j - 43;\nloop invariant i62: i + j >= i + j - 44;\nloop invariant i63: i + j >= i + j - 45;\nloop invariant i64: i + j >= i + j - 46;\nloop invariant i65: i + j >= i + j - 47;\nloop invariant i66: i + j >= i + j - 48;\nloop invariant i67: i + j >= i + j - 49;\nloop invariant i68: i + j >= i + j - 50;\nloop invariant i69: i + j >= i + j - 51;\nloop invariant i70: i + j >= i + j - 52;\nloop invariant i71: i + j >= i + j - 53;\nloop invariant i72: i + j >= i + j - 54;\nloop invariant i73: i + j >= i + j - 55;\nloop invariant i74: i + j >= i + j - 56;\nloop invariant i75: i + j >= i + j - 57;\nloop invariant i76: i + j >= i + j - 58;\nloop invariant i77: i + j >= i + j - 59;\nloop invariant i78: i + j >= i + j - 60;\nloop invariant i79: i + j >= i + j - 61;\nloop invariant i80: i + j >= i + j - 62;\nloop invariant i81: i + j >= i + j - 63;\nloop invariant i82: i + j >= i + j - 64;\nloop invariant i83: i + j >= i + j - 65;\nloop invariant i84: i + j >= i + j - 66;\nloop invariant i85: 0 <= i <= LARGE_INT;\nloop invariant i86: j >= 1;\nloop invariant i87: 1 <= j < LARGE_INT;\nloop invariant i88: i >= j * k;\nloop invariant i89: k == i / (LARGE_INT - 1);\nloop invariant i90: i % (LARGE_INT - 1) == 0;\nloop invariant i91: i == k * j;\nloop invariant i92: 1 <= j && j < LARGE_INT;\nloop invariant i93: i + j < LARGE_INT ==> i < LARGE_INT;\nloop invariant i94: i1;\nloop invariant i95: i2;\nloop invariant i96: i3;\nloop invariant i97: i4;\nloop invariant i98: i + j >= 0 ==> 0 <= j < LARGE_INT;\nloop invariant i99: i + j >= 0 ==> 0 <= i <= LARGE_INT;\nloop invariant i100: i + j >= 0 ==> 0 <= k <= LARGE_INT;\nloop invariant i101: i + j >= 0 ==> i <= i + j;\nloop invariant i102: i + j >= 0 ==> k <= k + 1;\nloop invariant i103: i + j >= 0 ==> k <= LARGE_INT;\nloop invariant i104: i + j >= 0 ==> i + j <= LARGE_INT;\nloop invariant i105: 0 <= i <= LARGE_INT; loop invariant 0 <= k <= LARGE_INT; loop invariant i == (k * (k + 1) / 2); loop invariant k >= 0; loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i; loop invariant i <= (k * (k + 1) / 2); loop invariant k <= LARGE_INT; loop invariant k <= i;\nloop invariant i106: i + j == i' + j';\nloop invariant i107: k + 1 == k' + 1;\nloop invariant i108: i' + j' == i + j;\nloop invariant i109: k' + 1 == k + 1;\nloop invariant i110: i' <= LARGE_INT;\nloop invariant i111: k' <= LARGE_INT;\nloop invariant i112: j' >= 1;\nloop invariant i113: j' < LARGE_INT;\nloop invariant i114: i + j == i + j';\nloop invariant i115: k + 1 == k + 1;\nloop invariant i116: k = i - 1;\nloop invariant i117: j = unknown_int();\nloop invariant i118: 0 <= j <= LARGE_INT;\nloop invariant i119: i + j <= LARGE_INT;\nloop invariant i120: k == i / LARGE_INT;\nloop invariant i121: i == k * LARGE_INT;\nloop invariant i122: 1 <= i + j < LARGE_INT * LARGE_INT;\nloop invariant i123: (i + j) <= (k + 1) * LARGE_INT;\nloop invariant i124: i + j < LARGE_INT * (k + 1);\nloop invariant i125: i + j >= k;\nloop invariant i126: i + j >= k * LARGE_INT;\nloop invariant i127: i + j < k * LARGE_INT + LARGE_INT;\nloop invariant i128: i + j < (k + 1) * LARGE_INT;\nloop invariant i129: (k + 1) * LARGE_INT <= i + j < (k + 2) * LARGE_INT;\nloop invariant i130: k + 1 <= i / LARGE_INT < k + 2;\nloop invariant i131: 1 <= j < LARGE_INT ==> i + j - k <= LARGE_INT;\nloop invariant i132: i + j - k <= LARGE_INT ==> 1 <= j < LARGE_INT;\nloop invariant i133: i + j - k <= LARGE_INT ==> 1 <= i <= LARGE_INT;\nloop invariant i134: i + j - k <= LARGE_INT ==> 0 <= k <= LARGE_INT;\nloop invariant i135: i + j - k <= LARGE_INT ==> 1 <= i + j - k <= LARGE_INT;\nloop invariant i136: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 1 <= LARGE_INT;\nloop invariant i137: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 2 <= LARGE_INT;\nloop invariant i138: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 3 <= LARGE_INT;\nloop invariant i139: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 4 <= LARGE_INT;\nloop invariant i140: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 5 <= LARGE_INT;\nloop invariant i141: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 6 <= LARGE_INT;\nloop invariant i142: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 7 <= LARGE_INT;\nloop invariant i143: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 8 <= LARGE_INT;\nloop invariant i144: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 9 <= LARGE_INT;\nloop invariant i145: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 10 <= LARGE_INT;\nloop invariant i146: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 11 <= LARGE_INT;\nloop invariant i147: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 12 <= LARGE_INT;\nloop invariant i148: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 13 <= LARGE_INT;\nloop invariant i149: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 14 <= LARGE_INT;\nloop invariant i150: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 15 <= LARGE_INT;\nloop invariant i151: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 16 <= LARGE_INT;\nloop invariant i152: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 17 <= LARGE_INT;\nloop invariant i153: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 18 <= LARGE_INT;\nloop invariant i154: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 19 <= LARGE_INT;\nloop invariant i155: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 20 <= LARGE_INT;\nloop invariant i156: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 21 <= LARGE_INT;\nloop invariant i157: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 22 <= LARGE_INT;\nloop invariant i158: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 23 <= LARGE_INT;\nloop invariant i159: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 24 <= LARGE_INT;\nloop invariant i160: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 25 <= LARGE_INT;\nloop invariant i161: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 26 <= LARGE_INT;\nloop invariant i162: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 27 <= LARGE_INT;\nloop invariant i163: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 28 <= LARGE_INT;\nloop invariant i164: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 29 <= LARGE_INT;\nloop invariant i165: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 30 <= LARGE_INT;\nloop invariant i166: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 31 <= LARGE_INT;\nloop invariant i167: i + j - k <= LARGE_INT ==> 1 <= i + j - k - 32 <= LARGE_INT;\nloop invariant i168: i + k * j <= LARGE_INT;\nloop invariant i169: i + k * j >= i;\nloop invariant i170: i + k * j >= 0;\nloop invariant i171: i + k * j <= i + j;\nloop invariant i172: i < LARGE_INT ==> k == i / j;\nloop invariant i173: i < LARGE_INT ==> i + j == i * (i + 1) / 2;\n*/\nwhile(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c"
        ],
        "skipped": [],
        "total": 120,
        "success_count": 104,
        "failure_count": 16,
        "success_rate": 0.8666666666666667
    }
}