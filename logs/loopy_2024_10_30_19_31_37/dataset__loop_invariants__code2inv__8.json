{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/8.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant (y == 0) ==> (x != 20);\nloop invariant y == 0;\n*/\n```",
            "```\n/*@\nloop invariant x = y * 10 + x0;\nloop invariant 0 <= y <= 10;\nloop invariant y == 0 ==> x != 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y <= 10;\nloop invariant x = 10 * (y / 10) + x_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant (x == 0) ==> (x != 20);\nloop invariant (y == 0) ==> (x != 20);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= (0 + (y - 1) * y / 10);\nloop invariant x <= (10 + (y - 1) * y / 10);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant assume((x >= 0));\nloop invariant assume((x <= 10));\nloop invariant assume((y <= 10));\nloop invariant assume((y >= 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant y == 0 ==> x != 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= (x - 10) * (x - 1) / 2;\nloop invariant y >= (y - 10) * (y - 1) / 2;\nloop invariant x <= (x + 10) * (x + 9) / 2;\nloop invariant y <= (y + 10) * (y + 9) / 2;\nloop invariant x < y ==> x < y;\nloop invariant x == y ==> x == y;\nloop invariant x > y ==> x > y;\nloop invariant x != y ==> x != y;\nloop invariant x == 20 ==> x == 20;\nloop invariant x != 20 ==> x != 20;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 10;\n*/\n```",
            "```\n/*@\nloop invariant ( ( ( x >= 0 ) ) && ( ( x <= 11 ) ) );\nloop invariant ( ( ( y >= 0 ) ) && ( ( y <= 11 ) ) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 100;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y != 0) ==> (x != 20);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y > 0) ==> (x != 20);\nloop invariant (y > 0) ==> (x >= 1 + (y - 1) * y / 2);\nloop invariant (y > 0) ==> (x <= 10);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y == 0 ==> x == 20;\nloop invariant y == 0 ==> x != 20 ==> x >= 11;\nloop invariant y == 0 ==> x != 20 ==> x <= 20;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x >= 0;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x <= 10;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 1;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 9;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 2;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 8;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 3;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 7;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 4;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 6;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 5;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 5;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant (y == 0) ==> (x != 20);\nloop invariant y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x = y * 10 + x0;\nloop invariant 0 <= y <= 10;\nloop invariant y == 0 ==> x != 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y <= 10;\nloop invariant x = 10 * (y / 10) + x_0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant (x == 0) ==> (x != 20);\nloop invariant (y == 0) ==> (x != 20);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\nloop invariant i7: (x == 0) ==> (x != 20);\nloop invariant i8: (y == 0) ==> (x != 20);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= (0 + (y - 1) * y / 10);\nloop invariant x <= (10 + (y - 1) * y / 10);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant assume((x >= 0));\nloop invariant assume((x <= 10));\nloop invariant assume((y <= 10));\nloop invariant assume((y >= 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 10;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant x + y <= 20;\nloop invariant x + y >= 0;\nloop invariant y == 0 ==> x != 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\n\nloop invariant i6: x + y >= 0;\nloop invariant i7: y == 0 ==> x != 20;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant 0 <= y <= 10;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 10;\nloop invariant y <= 10;\nloop invariant x >= (x - 10) * (x - 1) / 2;\nloop invariant y >= (y - 10) * (y - 1) / 2;\nloop invariant x <= (x + 10) * (x + 9) / 2;\nloop invariant y <= (y + 10) * (y + 9) / 2;\nloop invariant x < y ==> x < y;\nloop invariant x == y ==> x == y;\nloop invariant x > y ==> x > y;\nloop invariant x != y ==> x != y;\nloop invariant x == 20 ==> x == 20;\nloop invariant x != 20 ==> x != 20;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\nloop invariant i9: x <= (x + 10) * (x + 9) / 2;\nloop invariant i10: y <= (y + 10) * (y + 9) / 2;\nloop invariant i11: x < y ==> x < y;\nloop invariant i12: x == y ==> x == y;\nloop invariant i13: x > y ==> x > y;\nloop invariant i14: x != y ==> x != y;\nloop invariant i15: x == 20 ==> x == 20;\nloop invariant i16: x != 20 ==> x != 20;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( ( ( x >= 0 ) ) && ( ( x <= 11 ) ) );\nloop invariant ( ( ( y >= 0 ) ) && ( ( y <= 11 ) ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= x <= 100;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y != 0) ==> (x != 20);\nloop invariant (y == 0) ==> (x == 0);\nloop invariant (y > 0) ==> (x != 20);\nloop invariant (y > 0) ==> (x >= 1 + (y - 1) * y / 2);\nloop invariant (y > 0) ==> (x <= 10);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y == 0 ==> x == 20;\nloop invariant y == 0 ==> x != 20 ==> x >= 11;\nloop invariant y == 0 ==> x != 20 ==> x <= 20;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x >= 0;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x <= 10;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 1;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 9;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 2;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 8;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 3;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 7;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 4;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 6;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 5;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 5;\nloop invariant y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 10;\nloop invariant i2: (y == 0) ==> (x != 20);\nloop invariant i3: y == 0;\nloop invariant i4: x = y * 10 + x0;\nloop invariant i5: 0 <= y <= 10;\nloop invariant i6: y == 0 ==> x != 20;\nloop invariant i7: 0 <= y <= 100000;\nloop invariant i8: x >= (1 + (y - 1) * y / 2);\nloop invariant i9: i1;\nloop invariant i10: i2;\nloop invariant i11: y <= 10;\nloop invariant i12: x = 10 * (y / 10) + x_0;\nloop invariant i13: x >= 0;\nloop invariant i14: y >= 0;\nloop invariant i15: x <= 10;\nloop invariant i16: (x == 0) ==> (x != 20);\nloop invariant i17: x >= (0 + (y - 1) * y / 10);\nloop invariant i18: x <= (10 + (y - 1) * y / 10);\nloop invariant i19: assume((x >= 0));\nloop invariant i20: assume((x <= 10));\nloop invariant i21: assume((y <= 10));\nloop invariant i22: assume((y >= 0));\nloop invariant i23: x <= y;\nloop invariant i24: x + y <= 20;\nloop invariant i25: x + y >= 0;\nloop invariant i26: x >= (x - 10) * (x - 1) / 2;\nloop invariant i27: y >= (y - 10) * (y - 1) / 2;\nloop invariant i28: x <= (x + 10) * (x + 9) / 2;\nloop invariant i29: y <= (y + 10) * (y + 9) / 2;\nloop invariant i30: x < y ==> x < y;\nloop invariant i31: x == y ==> x == y;\nloop invariant i32: x > y ==> x > y;\nloop invariant i33: x != y ==> x != y;\nloop invariant i34: x == 20 ==> x == 20;\nloop invariant i35: x != 20 ==> x != 20;\nloop invariant i36: ( ( ( x >= 0 ) ) && ( ( x <= 11 ) ) );\nloop invariant i37: ( ( ( y >= 0 ) ) && ( ( y <= 11 ) ) );\nloop invariant i38: 0 <= x <= 100;\nloop invariant i39: (y != 0) ==> (x != 20);\nloop invariant i40: (y == 0) ==> (x == 0);\nloop invariant i41: (y > 0) ==> (x != 20);\nloop invariant i42: (y > 0) ==> (x >= 1 + (y - 1) * y / 2);\nloop invariant i43: (y > 0) ==> (x <= 10);\nloop invariant i44: y == 0 ==> x == 20;\nloop invariant i45: y == 0 ==> x != 20 ==> x >= 11;\nloop invariant i46: y == 0 ==> x != 20 ==> x <= 20;\nloop invariant i47: y == 0 ==> x != 20 ==> x != 20 ==> x >= 0;\nloop invariant i48: y == 0 ==> x != 20 ==> x != 20 ==> x <= 10;\nloop invariant i49: y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 1;\nloop invariant i50: y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 9;\nloop invariant i51: y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 2;\nloop invariant i52: y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 8;\nloop invariant i53: y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 3;\nloop invariant i54: y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 7;\nloop invariant i55: y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 4;\nloop invariant i56: y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 6;\nloop invariant i57: y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x >= 5;\nloop invariant i58: y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x <= 5;\nloop invariant i59: y == 0 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x != 20 ==> x == 0;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 17,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\n\nloop invariant i2: (y == 0) ==> (x != 20);\n\n\n\nloop invariant i6: y == 0 ==> x != 20;\n\n\n\n\n\n\nloop invariant i13: x >= 0;\nloop invariant i14: y >= 0;\n\nloop invariant i16: (x == 0) ==> (x != 20);\n\n\n\n\n\n\n\n\nloop invariant i25: x + y >= 0;\n\n\nloop invariant i28: x <= (x + 10) * (x + 9) / 2;\nloop invariant i29: y <= (y + 10) * (y + 9) / 2;\nloop invariant i30: x < y ==> x < y;\nloop invariant i31: x == y ==> x == y;\nloop invariant i32: x > y ==> x > y;\nloop invariant i33: x != y ==> x != y;\nloop invariant i34: x == 20 ==> x == 20;\nloop invariant i35: x != 20 ==> x != 20;\n\n\n\n\n\n\n\n\n\n\nloop invariant i46: y == 0 ==> x != 20 ==> x <= 20;\nloop invariant i47: y == 0 ==> x != 20 ==> x != 20 ==> x >= 0;\nloop invariant i48: y == 0 ==> x != 20 ==> x != 20 ==> x <= 10;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c"
        ],
        "skipped": [],
        "total": 67,
        "success_count": 58,
        "failure_count": 9,
        "success_rate": 0.8656716417910447
    }
}