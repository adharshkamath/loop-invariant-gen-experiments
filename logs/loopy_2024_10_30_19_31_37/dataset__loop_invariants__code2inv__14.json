{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/14.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= y;\nloop invariant y == 0 ==> x != 4;\nloop invariant y != 0 ==> x == 4;\n*/\n```",
            "```\n/*@\nloop invariant ( ( ( x == 0 ) ==> ( y == 0 ) ) && ( ( y == 0 ) ==> ( x == 0 ) ) );\nloop invariant ( ( ( y == 0 ) ==> ( z1 == 0 ) ) && ( ( z1 == 0 ) ==> ( y == 0 ) ) );\nloop invariant ( ( ( x == 0 ) ==> ( z2 == 0 ) ) && ( ( z2 == 0 ) ==> ( x == 0 ) ) );\nloop invariant ( ( ( x == 0 ) ==> ( z3 == 0 ) ) && ( ( z3 == 0 ) ==> ( x == 0 ) ) );\nloop invariant ( ( ( x == 0 ) ==> ( z1 == 0 ) ) && ( ( z1 == 0 ) ==> ( x == 0 ) ) );\nloop invariant ( ( ( x == 0 ) ==> ( z2 == 0 ) ) && ( ( z2 == 0 ) ==> ( x == 0 ) ) );\nloop invariant ( ( ( x == 0 ) ==> ( z3 == 0 ) ) && ( ( z3 == 0 ) ==> ( x == 0 ) ) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= (0 + (y - 0) * 0 / 2);\nloop invariant y >= (0 + (x - 0) * 0 / 2);\nloop invariant x <= (2 + (y - 2) * 2 / 2);\nloop invariant y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 < x ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant 0 < y ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> (x >= (0 + (y - 0) * 0 / 2) && x <= (2 + (y - 2) * 2 / 2));\nloop invariant 0 <= y <= 2 ==> (y >= (0 + (x - 0) * 0 / 2) && y <= (2 + (x - 2) * 2 / 2));\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant 0 <= y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant 0 <= y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant 0 <= y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant 0 <= y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant (x == 4) ==> (y == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y;\nloop invariant \\at(x, Pre) <= x;\nloop invariant \\at(y, Pre) <= y;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4 ==> y == 0;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4 ==> y == 0 ==> \\at(x, Post) == 4;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4 ==> y == 0 ==> \\at(x, Post) == 4 ==> \\at(y, Post) == 0;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x + 2 * y <= 4;\nloop invariant x != 4;\nloop invariant y == 0;\nloop invariant \\at(x, Post) == 4;\nloop invariant \\at(y, Post) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x <= (y + 2) ==> (x >= y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant 0 <= z1 <= 4;\nloop invariant 0 <= z2 <= 4;\nloop invariant 0 <= z3 <= 4;\nloop invariant x == (2 * z1);\nloop invariant y == (2 * z2);\nloop invariant z1 == (z2 + z3);\nloop invariant z1 == (z2 + 1);\nloop invariant z1 == (z2 + 2);\nloop invariant z1 == (z2 + 3);\nloop invariant z1 == (z2 + 4);\nloop invariant z1 == (z2 + 0);\nloop invariant z1 == (z2 + (-1));\nloop invariant z1 == (z2 + (-2));\nloop invariant z1 == (z2 + (-3));\nloop invariant z1 == (z2 + (-4));\nloop invariant z1 == (z2 + (-5));\nloop invariant z1 == (z2 + (-6));\nloop invariant z1 == (z2 + (-7));\nloop invariant z1 == (z2 + (-8));\nloop invariant z1 == (z2 + (-9));\nloop invariant z1 == (z2 + (-10));\nloop invariant z1 == (z2 + (-11));\nloop invariant z1 == (z2 + (-12));\nloop invariant z1 == (z2 + (-13));\nloop invariant z1 == (z2 + (-14));\nloop invariant z1 == (z2 + (-15));\nloop invariant z1 == (z2 + (-16));\nloop invariant z1 == (z2 + (-17));\nloop invariant z1 == (z2 + (-18));\nloop invariant z1 == (z2 + (-19));\nloop invariant z1 == (z2 + (-20));\nloop invariant z1 == (z2 + (-21));\nloop invariant z1 == (z2 + (-22));\nloop invariant z1 == (z2 + (-23));\nloop invariant z1 == (z2 + (-24));\nloop invariant z1 == (z2 + (-25));\nloop invariant z1 == (z2 + (-26));\nloop invariant z1 == (z2 + (-27));\nloop invariant z1 == (z2 + (-28));\nloop invariant z1 == (z2 + (-29));\nloop invariant z1 == (z2 + (-30));\nloop invariant z1 == (z2 + (-31));\nloop invariant z1 == (z2 + (-32));\nloop invariant z1 == (z2 + (-33));\nloop invariant z1 == (z2 + (-34));\nloop invariant z1 == (z2 + (-35));\nloop invariant z1 == (z2 + (-36));\nloop invariant z1 == (z2 + (-37));\nloop invariant z1 == (z2 + (-38));\nloop invariant z1 == (z2 + (-39));\nloop invariant z1 == (z2 + (-40));\nloop invariant z1 == (z2 + (-41));\nloop invariant z1 == (z2 + (-42));\nloop invariant z1 == (z2 + (-43));\nloop invariant z1 == (z2 + (-44));\nloop invariant z1 == (z2 + (-45));\nloop invariant z1 == (z2 + (-46));\nloop invariant z1 == (z2 + (-47));\nloop invariant z1 == (z2 + (-48));\nloop invariant z1 == (z2 + (-49));\nloop invariant z1 == (z2 + (-50));\nloop invariant z1 == (z2 + (-51));\nloop invariant z1 == (z2 + (-52));\nloop invariant z1 == (z2 + (-53));\nloop invariant z1 == (z2 + (-54));\nloop invariant z1 == (z2 + (-55));\nloop invariant z1 == (z2 + (-56));\nloop invariant z1 == (z2 + (-57));\nloop invariant z1 == (z2 + (-58));\nloop invariant z1 == (z2 + (-59));\nloop invariant z1 == (z2 + (-60));\nloop invariant z1 == (z2 + (-61));\nloop invariant z1 == (z2 + (-62));\nloop invariant z1 == (z2 + (-63));\nloop invariant z1 == (z2 + (-64));\nloop invariant z1 == (z2 + (-65));\nloop invariant z1 == (z2 + (-66));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant (y == 0) ==> (x == y);\nloop invariant (y == 0) ==> (x != 4);\nloop invariant (unknown() == 0) ==> true;\nloop invariant (unknown() != 0) ==> true;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x == 2 ==> y == 0;\nloop invariant x == 4 ==> y == 2;\nloop invariant x == 2 ==> x == y;\nloop invariant x == 4 ==> x == y + 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x < 5;\nloop invariant y < 5;\nloop invariant x - 2 * y < 5;\nloop invariant x - 2 * y >= -5;\nloop invariant x >= y;\nloop invariant x <= y + 2;\nloop invariant x <= y + 4;\nloop invariant y <= x - 2;\nloop invariant y <= x - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\nloop invariant x <= y + unknown();\nloop invariant x == 0 || x == 2 || x == 4;\nloop invariant y == 0 || y == 2 || y == 4;\nloop invariant (x == 0 && y == 0) ==> (x != 4);\nloop invariant (x == 2 && y == 2) ==> (x != 4);\nloop invariant (x == 4 && y == 4) ==> (x != 4);\nloop invariant (x == 0 && y == 4) ==> (x != 4);\nloop invariant (x == 2 && y == 0) ==> (x != 4);\nloop invariant (x == 4 && y == 0) ==> (x != 4);\nloop invariant (x == 0 && y == 2) ==> (x != 4);\nloop invariant (x == 2 && y == 4) ==> (x != 4);\nloop invariant (x == 4 && y == 2) ==> (x != 4);\nloop invariant (x == 0 && y == 4) ==> (x != 4);\nloop invariant (x == 2 && y == 0) ==> (x != 4);\nloop invariant (x == 4 && y == 0) ==> (x != 4);\nloop invariant (x == 0 && y == 2) ==> (x != 4);\nloop invariant (x == 2 && y == 4) ==> (x != 4);\nloop invariant (x == 4 && y == 2) ==> (x != 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= (y - 2);\nloop invariant (y == 0) ==> (x != 4);\nloop invariant (y != 0) ==> (x == 4);\n*/\n```",
            "```\n/*@\nloop invariant i1 -> y <= 2;\nloop invariant i2 -> y >= 0;\nloop invariant i3 -> x <= 2;\nloop invariant i4 -> x >= 0;\nloop invariant i5 -> x <= y;\nloop invariant i6 -> x >= y - 2 * z1;\nloop invariant i7 -> y <= x + 2 * z2;\nloop invariant i8 -> y >= x - 2 * z3;\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant (x mod 2) == (y mod 2);\nloop invariant (x <= 2) ==> (x == y);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 2;\nloop invariant y <= 2;\nloop invariant x <= 4;\nloop invariant y <= 4;\nloop invariant x >= y;\nloop invariant y == 0 ==> x != 4;\nloop invariant y != 0 ==> x == 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n\nloop invariant i10: y == 0 ==> x != 4;\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( ( ( x == 0 ) ==> ( y == 0 ) ) && ( ( y == 0 ) ==> ( x == 0 ) ) );\nloop invariant ( ( ( y == 0 ) ==> ( z1 == 0 ) ) && ( ( z1 == 0 ) ==> ( y == 0 ) ) );\nloop invariant ( ( ( x == 0 ) ==> ( z2 == 0 ) ) && ( ( z2 == 0 ) ==> ( x == 0 ) ) );\nloop invariant ( ( ( x == 0 ) ==> ( z3 == 0 ) ) && ( ( z3 == 0 ) ==> ( x == 0 ) ) );\nloop invariant ( ( ( x == 0 ) ==> ( z1 == 0 ) ) && ( ( z1 == 0 ) ==> ( x == 0 ) ) );\nloop invariant ( ( ( x == 0 ) ==> ( z2 == 0 ) ) && ( ( z2 == 0 ) ==> ( x == 0 ) ) );\nloop invariant ( ( ( x == 0 ) ==> ( z3 == 0 ) ) && ( ( z3 == 0 ) ==> ( x == 0 ) ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 2;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\nloop invariant x + y <= 2 * x;\nloop invariant x + y >= 2;\nloop invariant x + y <= 4;\nloop invariant x + y >= 0;\nloop invariant x + y >= 2 * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n\nloop invariant i7: x + y >= 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= (0 + (y - 0) * 0 / 2);\nloop invariant y >= (0 + (x - 0) * 0 / 2);\nloop invariant x <= (2 + (y - 2) * 2 / 2);\nloop invariant y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 < x ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant 0 < y ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> (x >= (0 + (y - 0) * 0 / 2) && x <= (2 + (y - 2) * 2 / 2));\nloop invariant 0 <= y <= 2 ==> (y >= (0 + (x - 0) * 0 / 2) && y <= (2 + (x - 2) * 2 / 2));\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant 0 <= y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant 0 <= y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant 0 <= y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant 0 <= y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant (x == 4) ==> (y == 0);\nloop invariant 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant (x == 4) ==> (y == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= (0 + (y - 0) * 0 / 2);\nloop invariant i4: y >= (0 + (x - 0) * 0 / 2);\n\n\n\nloop invariant i8: 0 < x ==> x >= (0 + (y - 0) * 0 / 2);\n\nloop invariant i10: 0 < y ==> y >= (0 + (x - 0) * 0 / 2);\n\n\n\nloop invariant i14: 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant i15: 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y;\nloop invariant \\at(x, Pre) <= x;\nloop invariant \\at(y, Pre) <= y;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4 ==> y == 0;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4 ==> y == 0 ==> \\at(x, Post) == 4;\nloop invariant \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4 ==> y == 0 ==> \\at(x, Post) == 4 ==> \\at(y, Post) == 0;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x + 2 * y <= 4;\nloop invariant x != 4;\nloop invariant y == 0;\nloop invariant \\at(x, Post) == 4;\nloop invariant \\at(y, Post) == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x <= (y + 2) ==> (x >= y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 36,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant 0 <= z1 <= 4;\nloop invariant 0 <= z2 <= 4;\nloop invariant 0 <= z3 <= 4;\nloop invariant x == (2 * z1);\nloop invariant y == (2 * z2);\nloop invariant z1 == (z2 + z3);\nloop invariant z1 == (z2 + 1);\nloop invariant z1 == (z2 + 2);\nloop invariant z1 == (z2 + 3);\nloop invariant z1 == (z2 + 4);\nloop invariant z1 == (z2 + 0);\nloop invariant z1 == (z2 + (-1));\nloop invariant z1 == (z2 + (-2));\nloop invariant z1 == (z2 + (-3));\nloop invariant z1 == (z2 + (-4));\nloop invariant z1 == (z2 + (-5));\nloop invariant z1 == (z2 + (-6));\nloop invariant z1 == (z2 + (-7));\nloop invariant z1 == (z2 + (-8));\nloop invariant z1 == (z2 + (-9));\nloop invariant z1 == (z2 + (-10));\nloop invariant z1 == (z2 + (-11));\nloop invariant z1 == (z2 + (-12));\nloop invariant z1 == (z2 + (-13));\nloop invariant z1 == (z2 + (-14));\nloop invariant z1 == (z2 + (-15));\nloop invariant z1 == (z2 + (-16));\nloop invariant z1 == (z2 + (-17));\nloop invariant z1 == (z2 + (-18));\nloop invariant z1 == (z2 + (-19));\nloop invariant z1 == (z2 + (-20));\nloop invariant z1 == (z2 + (-21));\nloop invariant z1 == (z2 + (-22));\nloop invariant z1 == (z2 + (-23));\nloop invariant z1 == (z2 + (-24));\nloop invariant z1 == (z2 + (-25));\nloop invariant z1 == (z2 + (-26));\nloop invariant z1 == (z2 + (-27));\nloop invariant z1 == (z2 + (-28));\nloop invariant z1 == (z2 + (-29));\nloop invariant z1 == (z2 + (-30));\nloop invariant z1 == (z2 + (-31));\nloop invariant z1 == (z2 + (-32));\nloop invariant z1 == (z2 + (-33));\nloop invariant z1 == (z2 + (-34));\nloop invariant z1 == (z2 + (-35));\nloop invariant z1 == (z2 + (-36));\nloop invariant z1 == (z2 + (-37));\nloop invariant z1 == (z2 + (-38));\nloop invariant z1 == (z2 + (-39));\nloop invariant z1 == (z2 + (-40));\nloop invariant z1 == (z2 + (-41));\nloop invariant z1 == (z2 + (-42));\nloop invariant z1 == (z2 + (-43));\nloop invariant z1 == (z2 + (-44));\nloop invariant z1 == (z2 + (-45));\nloop invariant z1 == (z2 + (-46));\nloop invariant z1 == (z2 + (-47));\nloop invariant z1 == (z2 + (-48));\nloop invariant z1 == (z2 + (-49));\nloop invariant z1 == (z2 + (-50));\nloop invariant z1 == (z2 + (-51));\nloop invariant z1 == (z2 + (-52));\nloop invariant z1 == (z2 + (-53));\nloop invariant z1 == (z2 + (-54));\nloop invariant z1 == (z2 + (-55));\nloop invariant z1 == (z2 + (-56));\nloop invariant z1 == (z2 + (-57));\nloop invariant z1 == (z2 + (-58));\nloop invariant z1 == (z2 + (-59));\nloop invariant z1 == (z2 + (-60));\nloop invariant z1 == (z2 + (-61));\nloop invariant z1 == (z2 + (-62));\nloop invariant z1 == (z2 + (-63));\nloop invariant z1 == (z2 + (-64));\nloop invariant z1 == (z2 + (-65));\nloop invariant z1 == (z2 + (-66));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant (y == 0) ==> (x == y);\nloop invariant (y == 0) ==> (x != 4);\nloop invariant (unknown() == 0) ==> true;\nloop invariant (unknown() != 0) ==> true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x == 2 ==> y == 0;\nloop invariant x == 4 ==> y == 2;\nloop invariant x == 2 ==> x == y;\nloop invariant x == 4 ==> x == y + 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: x == 2 ==> y == 0 ==> x == 2;\nloop invariant i8: x == 4 ==> y == 2 ==> x == 4;\nloop invariant i9: x == 2 ==> y == 0 ==> y == 0;\nloop invariant i10: x == 4 ==> y == 2 ==> y == 2;\nloop invariant i11: x == 2 ==> y == 0 ==> x == 2 ==> x == 2;\nloop invariant i12: x == 4 ==> y == 2 ==> x == 4 ==> x == 4;\nloop invariant i13: x == 2 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i14: x == 4 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i15: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i16: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i17: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i18: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i19: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i20: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i21: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i22: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i23: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i24: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i25: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i26: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i27: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i28: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i29: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i30: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i31: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i32: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i33: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i34: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 4;\nloop invariant x < 5;\nloop invariant y < 5;\nloop invariant x - 2 * y < 5;\nloop invariant x - 2 * y >= -5;\nloop invariant x >= y;\nloop invariant x <= y + 2;\nloop invariant x <= y + 4;\nloop invariant y <= x - 2;\nloop invariant y <= x - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\nloop invariant x - 2 * y < 5;\nloop invariant y <= x - 2 * y;\nloop invariant y >= x - 2 * y - 2;\nloop invariant y >= x - 2 * y - 4;\nloop invariant x - 2 * y >= -5;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\nloop invariant i5: x - 2 * y < 5;\n\n\nloop invariant i8: x <= y + 2;\nloop invariant i9: x <= y + 4;\n\n\n\nloop invariant i13: y >= x - 2 * y - 2;\nloop invariant i14: y >= x - 2 * y - 4;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= y;\nloop invariant x <= y + unknown();\nloop invariant x == 0 || x == 2 || x == 4;\nloop invariant y == 0 || y == 2 || y == 4;\nloop invariant (x == 0 && y == 0) ==> (x != 4);\nloop invariant (x == 2 && y == 2) ==> (x != 4);\nloop invariant (x == 4 && y == 4) ==> (x != 4);\nloop invariant (x == 0 && y == 4) ==> (x != 4);\nloop invariant (x == 2 && y == 0) ==> (x != 4);\nloop invariant (x == 4 && y == 0) ==> (x != 4);\nloop invariant (x == 0 && y == 2) ==> (x != 4);\nloop invariant (x == 2 && y == 4) ==> (x != 4);\nloop invariant (x == 4 && y == 2) ==> (x != 4);\nloop invariant (x == 0 && y == 4) ==> (x != 4);\nloop invariant (x == 2 && y == 0) ==> (x != 4);\nloop invariant (x == 4 && y == 0) ==> (x != 4);\nloop invariant (x == 0 && y == 2) ==> (x != 4);\nloop invariant (x == 2 && y == 4) ==> (x != 4);\nloop invariant (x == 4 && y == 2) ==> (x != 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: (x == 0 && y == 0) ==> (x != 4);\nloop invariant i8: (x == 2 && y == 2) ==> (x != 4);\n\nloop invariant i10: (x == 0 && y == 4) ==> (x != 4);\nloop invariant i11: (x == 2 && y == 0) ==> (x != 4);\n\nloop invariant i13: (x == 0 && y == 2) ==> (x != 4);\nloop invariant i14: (x == 2 && y == 4) ==> (x != 4);\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= (y - 2);\nloop invariant (y == 0) ==> (x != 4);\nloop invariant (y != 0) ==> (x == 4);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= (y - 2);\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant i1 -> y <= 2;\nloop invariant i2 -> y >= 0;\nloop invariant i3 -> x <= 2;\nloop invariant i4 -> x >= 0;\nloop invariant i5 -> x <= y;\nloop invariant i6 -> x >= y - 2 * z1;\nloop invariant i7 -> y <= x + 2 * z2;\nloop invariant i8 -> y >= x - 2 * z3;\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 4;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant (x mod 2) == (y mod 2);\nloop invariant (x <= 2) ==> (x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 155: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 2;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x <= 2;\nloop invariant i6: y <= 2;\nloop invariant i7: x <= 4;\nloop invariant i8: y <= 4;\nloop invariant i9: x >= y;\nloop invariant i10: y == 0 ==> x != 4;\nloop invariant i11: y != 0 ==> x == 4;\nloop invariant i12: ( ( ( x == 0 ) ==> ( y == 0 ) ) && ( ( y == 0 ) ==> ( x == 0 ) ) );\nloop invariant i13: ( ( ( y == 0 ) ==> ( z1 == 0 ) ) && ( ( z1 == 0 ) ==> ( y == 0 ) ) );\nloop invariant i14: ( ( ( x == 0 ) ==> ( z2 == 0 ) ) && ( ( z2 == 0 ) ==> ( x == 0 ) ) );\nloop invariant i15: ( ( ( x == 0 ) ==> ( z3 == 0 ) ) && ( ( z3 == 0 ) ==> ( x == 0 ) ) );\nloop invariant i16: ( ( ( x == 0 ) ==> ( z1 == 0 ) ) && ( ( z1 == 0 ) ==> ( x == 0 ) ) );\nloop invariant i17: x + y <= 4;\nloop invariant i18: x + y >= 0;\nloop invariant i19: x + y >= 2 * y;\nloop invariant i20: x + y <= 2 * x;\nloop invariant i21: x + y >= 2;\nloop invariant i22: x >= (0 + (y - 0) * 0 / 2);\nloop invariant i23: y >= (0 + (x - 0) * 0 / 2);\nloop invariant i24: x <= (2 + (y - 2) * 2 / 2);\nloop invariant i25: y <= (2 + (x - 2) * 2 / 2);\nloop invariant i26: (x == 4) ==> (y == 0);\nloop invariant i27: 0 < x ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant i28: x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant i29: 0 < y ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant i30: y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant i31: 0 <= x <= 2 ==> (x >= (0 + (y - 0) * 0 / 2) && x <= (2 + (y - 2) * 2 / 2));\nloop invariant i32: 0 <= y <= 2 ==> (y >= (0 + (x - 0) * 0 / 2) && y <= (2 + (x - 2) * 2 / 2));\nloop invariant i33: 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant i34: 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\nloop invariant i35: 0 <= x <= 2 ==> x <= (2 + (y - 2) * 2 / 2);\nloop invariant i36: 0 <= y <= 2 ==> y <= (2 + (x - 2) * 2 / 2);\nloop invariant i37: 1 <= x <= 4;\nloop invariant i38: 0 <= y <= 4;\nloop invariant i39: \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y;\nloop invariant i40: \\at(x, Pre) <= x;\nloop invariant i41: \\at(y, Pre) <= y;\nloop invariant i42: \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4;\nloop invariant i43: \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4;\nloop invariant i44: \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4 ==> y == 0;\nloop invariant i45: \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4 ==> y == 0 ==> \\at(x, Post) == 4;\nloop invariant i46: \\at(x, Pre) + 2 * \\at(y, Pre) <= x + 2 * y ==> x + 2 * y <= 4 ==> x != 4 ==> y == 0 ==> \\at(x, Post) == 4 ==> \\at(y, Post) == 0;\nloop invariant i47: x + 2 * y <= 4;\nloop invariant i48: x != 4;\nloop invariant i49: y == 0;\nloop invariant i50: \\at(x, Post) == 4;\nloop invariant i51: \\at(y, Post) == 0;\nloop invariant i52: x <= (y + 2) ==> (x >= y);\nloop invariant i53: 0 <= x <= 4;\nloop invariant i54: 0 <= z1 <= 4;\nloop invariant i55: 0 <= z2 <= 4;\nloop invariant i56: 0 <= z3 <= 4;\nloop invariant i57: x == (2 * z1);\nloop invariant i58: y == (2 * z2);\nloop invariant i59: z1 == (z2 + z3);\nloop invariant i60: z1 == (z2 + 1);\nloop invariant i61: z1 == (z2 + 2);\nloop invariant i62: z1 == (z2 + 3);\nloop invariant i63: z1 == (z2 + 4);\nloop invariant i64: z1 == (z2 + 0);\nloop invariant i65: z1 == (z2 + (-1));\nloop invariant i66: z1 == (z2 + (-2));\nloop invariant i67: z1 == (z2 + (-3));\nloop invariant i68: z1 == (z2 + (-4));\nloop invariant i69: z1 == (z2 + (-5));\nloop invariant i70: z1 == (z2 + (-6));\nloop invariant i71: z1 == (z2 + (-7));\nloop invariant i72: z1 == (z2 + (-8));\nloop invariant i73: z1 == (z2 + (-9));\nloop invariant i74: z1 == (z2 + (-10));\nloop invariant i75: z1 == (z2 + (-11));\nloop invariant i76: z1 == (z2 + (-12));\nloop invariant i77: z1 == (z2 + (-13));\nloop invariant i78: z1 == (z2 + (-14));\nloop invariant i79: z1 == (z2 + (-15));\nloop invariant i80: z1 == (z2 + (-16));\nloop invariant i81: z1 == (z2 + (-17));\nloop invariant i82: z1 == (z2 + (-18));\nloop invariant i83: z1 == (z2 + (-19));\nloop invariant i84: z1 == (z2 + (-20));\nloop invariant i85: z1 == (z2 + (-21));\nloop invariant i86: z1 == (z2 + (-22));\nloop invariant i87: z1 == (z2 + (-23));\nloop invariant i88: z1 == (z2 + (-24));\nloop invariant i89: z1 == (z2 + (-25));\nloop invariant i90: z1 == (z2 + (-26));\nloop invariant i91: z1 == (z2 + (-27));\nloop invariant i92: z1 == (z2 + (-28));\nloop invariant i93: z1 == (z2 + (-29));\nloop invariant i94: z1 == (z2 + (-30));\nloop invariant i95: z1 == (z2 + (-31));\nloop invariant i96: z1 == (z2 + (-32));\nloop invariant i97: z1 == (z2 + (-33));\nloop invariant i98: z1 == (z2 + (-34));\nloop invariant i99: z1 == (z2 + (-35));\nloop invariant i100: z1 == (z2 + (-36));\nloop invariant i101: z1 == (z2 + (-37));\nloop invariant i102: z1 == (z2 + (-38));\nloop invariant i103: z1 == (z2 + (-39));\nloop invariant i104: z1 == (z2 + (-40));\nloop invariant i105: z1 == (z2 + (-41));\nloop invariant i106: z1 == (z2 + (-42));\nloop invariant i107: z1 == (z2 + (-43));\nloop invariant i108: z1 == (z2 + (-44));\nloop invariant i109: z1 == (z2 + (-45));\nloop invariant i110: z1 == (z2 + (-46));\nloop invariant i111: z1 == (z2 + (-47));\nloop invariant i112: z1 == (z2 + (-48));\nloop invariant i113: z1 == (z2 + (-49));\nloop invariant i114: z1 == (z2 + (-50));\nloop invariant i115: z1 == (z2 + (-51));\nloop invariant i116: z1 == (z2 + (-52));\nloop invariant i117: z1 == (z2 + (-53));\nloop invariant i118: z1 == (z2 + (-54));\nloop invariant i119: z1 == (z2 + (-55));\nloop invariant i120: z1 == (z2 + (-56));\nloop invariant i121: z1 == (z2 + (-57));\nloop invariant i122: z1 == (z2 + (-58));\nloop invariant i123: z1 == (z2 + (-59));\nloop invariant i124: z1 == (z2 + (-60));\nloop invariant i125: z1 == (z2 + (-61));\nloop invariant i126: z1 == (z2 + (-62));\nloop invariant i127: z1 == (z2 + (-63));\nloop invariant i128: z1 == (z2 + (-64));\nloop invariant i129: z1 == (z2 + (-65));\nloop invariant i130: z1 == (z2 + (-66));\nloop invariant i131: (y == 0) ==> (x == y);\nloop invariant i132: (y == 0) ==> (x != 4);\nloop invariant i133: (unknown() == 0) ==> true;\nloop invariant i134: (unknown() != 0) ==> true;\nloop invariant i135: x == 2 ==> y == 0;\nloop invariant i136: x == 4 ==> y == 2;\nloop invariant i137: x == 2 ==> x == y;\nloop invariant i138: x == 4 ==> x == y + 2;\nloop invariant i139: x == 2 ==> y == 0 ==> x == 2;\nloop invariant i140: x == 4 ==> y == 2 ==> x == 4;\nloop invariant i141: x == 2 ==> y == 0 ==> y == 0;\nloop invariant i142: x == 4 ==> y == 2 ==> y == 2;\nloop invariant i143: x == 2 ==> y == 0 ==> x == 2 ==> x == 2;\nloop invariant i144: x == 4 ==> y == 2 ==> x == 4 ==> x == 4;\nloop invariant i145: x == 2 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i146: x == 4 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i147: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i148: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i149: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i150: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i151: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i152: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i153: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i154: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i155: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i156: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i157: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i158: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i159: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i160: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i161: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i162: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i163: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i164: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i165: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i166: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i167: x < 5;\nloop invariant i168: y < 5;\nloop invariant i169: x - 2 * y < 5;\nloop invariant i170: x - 2 * y >= -5;\nloop invariant i171: x <= y + 2;\nloop invariant i172: x <= y + 4;\nloop invariant i173: y <= x - 2;\nloop invariant i174: y <= x - 4;\nloop invariant i175: y <= x - 2 * y;\nloop invariant i176: y >= x - 2 * y - 2;\nloop invariant i177: y >= x - 2 * y - 4;\nloop invariant i178: x <= y + unknown();\nloop invariant i179: x == 0 || x == 2 || x == 4;\nloop invariant i180: y == 0 || y == 2 || y == 4;\nloop invariant i181: (x == 0 && y == 0) ==> (x != 4);\nloop invariant i182: (x == 2 && y == 2) ==> (x != 4);\nloop invariant i183: (x == 4 && y == 4) ==> (x != 4);\nloop invariant i184: (x == 0 && y == 4) ==> (x != 4);\nloop invariant i185: (x == 2 && y == 0) ==> (x != 4);\nloop invariant i186: (x == 4 && y == 0) ==> (x != 4);\nloop invariant i187: (x == 0 && y == 2) ==> (x != 4);\nloop invariant i188: (x == 2 && y == 4) ==> (x != 4);\nloop invariant i189: (x == 4 && y == 2) ==> (x != 4);\nloop invariant i190: x >= (y - 2);\nloop invariant i191: (y != 0) ==> (x == 4);\nloop invariant i192: i1 -> y <= 2;\nloop invariant i193: i2 -> y >= 0;\nloop invariant i194: i3 -> x <= 2;\nloop invariant i195: i4 -> x >= 0;\nloop invariant i196: i5 -> x <= y;\nloop invariant i197: i6 -> x >= y - 2 * z1;\nloop invariant i198: i7 -> y <= x + 2 * z2;\nloop invariant i199: i8 -> y >= x - 2 * z3;\nloop invariant i200: i1;\nloop invariant i201: i2;\nloop invariant i202: i3;\nloop invariant i203: i4;\nloop invariant i204: i5;\nloop invariant i205: i6;\nloop invariant i206: i7;\nloop invariant i207: i8;\nloop invariant i208: (x mod 2) == (y mod 2);\nloop invariant i209: (x <= 2) ==> (x == y);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 80,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n\n\nloop invariant i10: y == 0 ==> x != 4;\n\n\n\n\n\n\n\nloop invariant i18: x + y >= 0;\n\n\n\nloop invariant i22: x >= (0 + (y - 0) * 0 / 2);\nloop invariant i23: y >= (0 + (x - 0) * 0 / 2);\n\n\n\nloop invariant i27: 0 < x ==> x >= (0 + (y - 0) * 0 / 2);\n\nloop invariant i29: 0 < y ==> y >= (0 + (x - 0) * 0 / 2);\n\n\n\nloop invariant i33: 0 <= x <= 2 ==> x >= (0 + (y - 0) * 0 / 2);\nloop invariant i34: 0 <= y <= 2 ==> y >= (0 + (x - 0) * 0 / 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i132: (y == 0) ==> (x != 4);\n\n\n\n\n\n\nloop invariant i139: x == 2 ==> y == 0 ==> x == 2;\nloop invariant i140: x == 4 ==> y == 2 ==> x == 4;\nloop invariant i141: x == 2 ==> y == 0 ==> y == 0;\nloop invariant i142: x == 4 ==> y == 2 ==> y == 2;\nloop invariant i143: x == 2 ==> y == 0 ==> x == 2 ==> x == 2;\nloop invariant i144: x == 4 ==> y == 2 ==> x == 4 ==> x == 4;\nloop invariant i145: x == 2 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i146: x == 4 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i147: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i148: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i149: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i150: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i151: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i152: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i153: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i154: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i155: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i156: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i157: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i158: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i159: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i160: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i161: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i162: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\nloop invariant i163: x == 2 ==> y == 0 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2 ==> x == 2;\nloop invariant i164: x == 4 ==> y == 2 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4 ==> x == 4;\nloop invariant i165: x == 2 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0 ==> y == 0;\nloop invariant i166: x == 4 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2 ==> y == 2;\n\n\nloop invariant i169: x - 2 * y < 5;\n\nloop invariant i171: x <= y + 2;\nloop invariant i172: x <= y + 4;\n\n\n\nloop invariant i176: y >= x - 2 * y - 2;\nloop invariant i177: y >= x - 2 * y - 4;\n\n\n\nloop invariant i181: (x == 0 && y == 0) ==> (x != 4);\nloop invariant i182: (x == 2 && y == 2) ==> (x != 4);\n\nloop invariant i184: (x == 0 && y == 4) ==> (x != 4);\nloop invariant i185: (x == 2 && y == 0) ==> (x != 4);\nloop invariant i186: (x == 4 && y == 0) ==> (x != 4);\nloop invariant i187: (x == 0 && y == 2) ==> (x != 4);\nloop invariant i188: (x == 2 && y == 4) ==> (x != 4);\n\nloop invariant i190: x >= (y - 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c"
        ],
        "skipped": [],
        "total": 11,
        "success_count": 10,
        "failure_count": 1,
        "success_rate": 0.9090909090909091
    }
}