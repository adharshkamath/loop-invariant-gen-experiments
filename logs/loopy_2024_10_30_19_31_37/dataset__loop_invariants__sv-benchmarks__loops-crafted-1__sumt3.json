{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt3.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  while( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= n/3;\nloop invariant 0 <= j <= n/2;\nloop invariant 0 <= k <= n - i - j;\nloop invariant i + j + k == l;\nloop invariant l <= 20000001;\n*/\n```",
            "```\n/*@\nloop invariant i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= l%3 <= 2;\nloop invariant 0 <= i <= n/3;\nloop invariant 0 <= j <= n/2;\nloop invariant 0 <= k <= n;\nloop invariant i+j+k == l;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l/3;\nloop invariant 0 <= j <= l/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n/3;\nloop invariant 0 <= j <= n/2;\nloop invariant 0 <= k <= n;\nloop invariant i + j + k <= l;\nloop invariant i + j + k <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant l <= n;\nloop invariant i + j + k == l;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i <= (l/3);\nloop invariant j <= (l/2);\nloop invariant k <= (l/2);\nloop invariant i <= (l/2);\nloop invariant j <= (l/3);\nloop invariant k <= (l/3);\nloop invariant i + j + k <= l;\nloop invariant i + j + k >= l;\nloop invariant i + j + k == l;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l;\nloop invariant 0 <= j <= l;\nloop invariant 0 <= k <= l;\nloop invariant i + j + k == l;\nloop invariant if l % 3 then i == l / 3 else i == l / 3 - 1;\nloop invariant if l % 2 then j == l / 2 else j == l / 2 - 1;\nloop invariant if l % 2 then k == l / 2 else k == l / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant ((l % 3) == 0) ==> (i < l);\nloop invariant ((l % 3) == 0) ==> (j >= l);\nloop invariant ((l % 3) == 0) ==> (k >= l);\nloop invariant ((l % 2) == 0) ==> (i >= l);\nloop invariant ((l % 2) == 0) ==> (j < l);\nloop invariant ((l % 2) == 0) ==> (k >= l);\nloop invariant ((l % 2) == 1) ==> (i >= l);\nloop invariant ((l % 2) == 1) ==> (j >= l);\nloop invariant ((l % 2) == 1) ==> (k < l);\nloop invariant (i + j + k) == l;\nloop invariant (l % 3) < 3;\nloop invariant (l % 2) < 2;\nloop invariant (l % 2) + (l % 3) < 5;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l/3;\nloop invariant 0 <= j <= l/2;\nloop invariant 0 <= k <= l;\nloop invariant i + j + k == l;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= k;\nloop invariant i <= j;\nloop invariant j <= k;\nloop invariant i + j + k <= l;\nloop invariant l <= n;\nloop invariant i + j + k == l ==> i + j + k == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i, j, k;\nloop invariant i + j + k == l;\nloop invariant i <= l/3;\nloop invariant j <= l/2;\nloop invariant k <= l/3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant l %3 ==> i == l/3;\nloop invariant l %2 ==> j == l/2;\nloop invariant (l %2 && l %3) ==> k == l/6;\nloop invariant !(l %2 && l %3) ==> k == l/2;\n*/\n```",
            "```\n/*@\nloop invariant ( l >= 0) && ( l <= n);\nloop invariant ( i >= 0) && ( i <= n/3);\nloop invariant ( j >= 0) && ( j <= n/2);\nloop invariant ( k >= 0) && ( k <= n/2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l;\nloop invariant 0 <= j <= l;\nloop invariant 0 <= k <= l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) <= n;\nloop invariant i <= j <= k;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= n/3;\nloop invariant 0 <= j <= n/2;\nloop invariant 0 <= k <= n - i - j;\nloop invariant i + j + k == l;\nloop invariant l <= 20000001;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\nloop invariant i4: 0 <= k <= n - i - j;\nloop invariant i5: i + j + k == l;\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= l%3 <= 2;\nloop invariant 0 <= i <= n/3;\nloop invariant 0 <= j <= n/2;\nloop invariant 0 <= k <= n;\nloop invariant i+j+k == l;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= l%3 <= 2;\n\n\n\nloop invariant i6: i+j+k == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l/3;\nloop invariant 0 <= j <= l/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n/3;\nloop invariant 0 <= j <= n/2;\nloop invariant 0 <= k <= n;\nloop invariant i + j + k <= l;\nloop invariant i + j + k <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\n\n\nloop invariant i3: 0 <= k <= n;\nloop invariant i4: i + j + k <= l;\nloop invariant i5: i + j + k <= n;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant l <= n;\nloop invariant i + j + k == l;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\n\nloop invariant i2: 0 <= j <= n;\nloop invariant i3: 0 <= k <= n;\nloop invariant i4: l <= n;\nloop invariant i5: i + j + k == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant i <= (l/3);\nloop invariant j <= (l/2);\nloop invariant k <= (l/2);\nloop invariant i <= (l/2);\nloop invariant j <= (l/3);\nloop invariant k <= (l/3);\nloop invariant i + j + k <= l;\nloop invariant i + j + k >= l;\nloop invariant i + j + k == l;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\nloop invariant i4: k <= (l/2);\n\n\n\nloop invariant i8: i + j + k <= l;\nloop invariant i9: i + j + k >= l;\nloop invariant i10: i + j + k == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l;\nloop invariant 0 <= j <= l;\nloop invariant 0 <= k <= l;\nloop invariant i + j + k == l;\nloop invariant if l % 3 then i == l / 3 else i == l / 3 - 1;\nloop invariant if l % 2 then j == l / 2 else j == l / 2 - 1;\nloop invariant if l % 2 then k == l / 2 else k == l / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= l;\nloop invariant i3: 0 <= j <= l;\nloop invariant i4: 0 <= k <= l;\nloop invariant i5: i + j + k == l;\n\n\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant ((l % 3) == 0) ==> (i < l);\nloop invariant ((l % 3) == 0) ==> (j >= l);\nloop invariant ((l % 3) == 0) ==> (k >= l);\nloop invariant ((l % 2) == 0) ==> (i >= l);\nloop invariant ((l % 2) == 0) ==> (j < l);\nloop invariant ((l % 2) == 0) ==> (k >= l);\nloop invariant ((l % 2) == 1) ==> (i >= l);\nloop invariant ((l % 2) == 1) ==> (j >= l);\nloop invariant ((l % 2) == 1) ==> (k < l);\nloop invariant (i + j + k) == l;\nloop invariant (l % 3) < 3;\nloop invariant (l % 2) < 2;\nloop invariant (l % 2) + (l % 3) < 5;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) >= l;\nloop invariant (i + j + k) == l;\nloop invariant (i + j + k) <= l;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\n\n\n\n\n\n\n\nloop invariant i11: (i + j + k) == l;\nloop invariant i12: (l % 3) < 3;\nloop invariant i13: (l % 2) < 2;\nloop invariant i14: (l % 2) + (l % 3) < 5;\nloop invariant i15: (i + j + k) <= l;\nloop invariant i16: (i + j + k) >= l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l/3;\nloop invariant 0 <= j <= l/2;\nloop invariant 0 <= k <= l;\nloop invariant i + j + k == l;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\nloop invariant i4: 0 <= k <= l;\nloop invariant i5: i + j + k == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= k;\nloop invariant i <= j;\nloop invariant j <= k;\nloop invariant i + j + k <= l;\nloop invariant l <= n;\nloop invariant i + j + k == l ==> i + j + k == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= k;\n\n\nloop invariant i6: i + j + k <= l;\nloop invariant i7: l <= n;\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i, j, k;\nloop invariant i + j + k == l;\nloop invariant i <= l/3;\nloop invariant j <= l/2;\nloop invariant k <= l/3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\nloop invariant i3: i + j + k == l;\n\n\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant l %3 ==> i == l/3;\nloop invariant l %2 ==> j == l/2;\nloop invariant (l %2 && l %3) ==> k == l/6;\nloop invariant !(l %2 && l %3) ==> k == l/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\n\n\n\n\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( l >= 0) && ( l <= n);\nloop invariant ( i >= 0) && ( i <= n/3);\nloop invariant ( j >= 0) && ( j <= n/2);\nloop invariant ( k >= 0) && ( k <= n/2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: ( l >= 0) && ( l <= n);\n\n\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= l <= n;\nloop invariant 0 <= i <= l;\nloop invariant 0 <= j <= l;\nloop invariant 0 <= k <= l;\nloop invariant (i + j + k) <= l;\nloop invariant (i + j + k) <= n;\nloop invariant i <= j <= k;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= l;\nloop invariant i3: 0 <= j <= l;\nloop invariant i4: 0 <= k <= l;\nloop invariant i5: (i + j + k) <= l;\nloop invariant i6: (i + j + k) <= n;\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 47: unexpected token 'l'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= n/3;\nloop invariant i3: 0 <= j <= n/2;\nloop invariant i4: 0 <= k <= n - i - j;\nloop invariant i5: i + j + k == l;\nloop invariant i6: l <= 20000001;\nloop invariant i7: i1; loop invariant i2; loop invariant i3; loop invariant i4; loop invariant i5; loop invariant i6; loop invariant i7; loop invariant i8; loop invariant i9; loop invariant i10; loop invariant i11; loop invariant i12; loop invariant i13; loop invariant i14; loop invariant i15; loop invariant i16; loop invariant i17; loop invariant i18; loop invariant i19; loop invariant i20; loop invariant i21; loop invariant i22; loop invariant i23; loop invariant i24; loop invariant i25; loop invariant i26; loop invariant i27; loop invariant i28; loop invariant i29; loop invariant i30; loop invariant i31; loop invariant i32; loop invariant i33; loop invariant i34; loop invariant i35; loop invariant i36; loop invariant i37; loop invariant i38; loop invariant i39; loop invariant i40; loop invariant i41; loop invariant i42; loop invariant i43; loop invariant i44; loop invariant i45; loop invariant i46; loop invariant i47; loop invariant i48; loop invariant i49; loop invariant i50; loop invariant i51; loop invariant i52; loop invariant i53; loop invariant i54; loop invariant i55; loop invariant i56; loop invariant i57; loop invariant i58; loop invariant i59; loop invariant i60; loop invariant i61; loop invariant i62; loop invariant i63; loop invariant i64; loop invariant i65; loop invariant i66; loop invariant i67; loop invariant i68; loop invariant i69; loop invariant i70; loop invariant i71; loop invariant i72; loop invariant i73; loop invariant i74; loop invariant i75; loop invariant i76; loop invariant i77; loop invariant i78; loop invariant i79; loop invariant i80; loop invariant i81; loop invariant i82; loop invariant i83; loop invariant i84; loop invariant i85; loop invariant i86; loop invariant i87; loop invariant i88; loop invariant i89; loop invariant i90; loop invariant i91; loop invariant i92; loop invariant i93; loop invariant i94; loop invariant i95; loop invariant i96; loop invariant i97; loop invariant i98; loop invariant i99; loop invariant i100; loop invariant i101; loop invariant i102; loop invariant i103; loop invariant i104; loop invariant i105; loop invariant i106; loop invariant i107; loop invariant i108; loop invariant i109; loop invariant i110; loop invariant i111; loop invariant i112; loop invariant i113; loop invariant i114; loop invariant i115; loop invariant i116; loop invariant i117; loop invariant i118; loop invariant i119; loop invariant i120; loop invariant i121; loop invariant i122; loop invariant i123; loop invariant i124; loop invariant i125; loop invariant i126; loop invariant i127; loop invariant i128; loop invariant i129; loop invariant i130; loop invariant i131; loop invariant i132; loop invariant i133; loop invariant i134; loop invariant i135; loop invariant i136; loop invariant i137; loop invariant i138; loop invariant i139; loop invariant i140; loop invariant i141; loop invariant i142; loop invariant i143; loop invariant i144; loop invariant i145; loop invariant i146; loop invariant i147; loop invariant i148; loop invariant i149; loop invariant i150; loop invariant i151; loop invariant i152; loop invariant i153; loop invariant i154; loop invariant i155; loop invariant i156; loop invariant i157; loop invariant i158;\nloop invariant i8: 0 <= l%3 <= 2;\nloop invariant i9: 0 <= k <= n;\nloop invariant i10: i+j+k == l;\nloop invariant i11: 0 <= i <= l/3;\nloop invariant i12: 0 <= j <= l/2;\nloop invariant i13: i + j + k <= l;\nloop invariant i14: i + j + k <= n;\nloop invariant i15: 1 <= i <= n;\nloop invariant i16: 0 <= j <= n;\nloop invariant i17: l <= n;\nloop invariant i18: i <= (l/3);\nloop invariant i19: j <= (l/2);\nloop invariant i20: k <= (l/2);\nloop invariant i21: i <= (l/2);\nloop invariant i22: j <= (l/3);\nloop invariant i23: k <= (l/3);\nloop invariant i24: i + j + k >= l;\nloop invariant i25: 0 <= i <= l;\nloop invariant i26: 0 <= j <= l;\nloop invariant i27: 0 <= k <= l;\nloop invariant i28: if l % 3 then i == l / 3 else i == l / 3 - 1;\nloop invariant i29: if l % 2 then j == l / 2 else j == l / 2 - 1;\nloop invariant i30: if l % 2 then k == l / 2 else k == l / 2;\nloop invariant i31: ((l % 3) == 0) ==> (i < l);\nloop invariant i32: ((l % 3) == 0) ==> (j >= l);\nloop invariant i33: ((l % 3) == 0) ==> (k >= l);\nloop invariant i34: ((l % 2) == 0) ==> (i >= l);\nloop invariant i35: ((l % 2) == 0) ==> (j < l);\nloop invariant i36: ((l % 2) == 0) ==> (k >= l);\nloop invariant i37: ((l % 2) == 1) ==> (i >= l);\nloop invariant i38: ((l % 2) == 1) ==> (j >= l);\nloop invariant i39: ((l % 2) == 1) ==> (k < l);\nloop invariant i40: (i + j + k) == l;\nloop invariant i41: (l % 3) < 3;\nloop invariant i42: (l % 2) < 2;\nloop invariant i43: (l % 2) + (l % 3) < 5;\nloop invariant i44: (i + j + k) <= l;\nloop invariant i45: (i + j + k) >= l;\nloop invariant i46: 0 <= i;\nloop invariant i47: 0 <= j;\nloop invariant i48: 0 <= k;\nloop invariant i49: i <= j;\nloop invariant i50: j <= k;\nloop invariant i51: i + j + k == l ==> i + j + k == n;\nloop invariant i52: 0 <= i, j, k;\nloop invariant i53: i <= l/3;\nloop invariant i54: j <= l/2;\nloop invariant i55: k <= l/3;\nloop invariant i56: 0 <= i <= n;\nloop invariant i57: l %3 ==> i == l/3;\nloop invariant i58: l %2 ==> j == l/2;\nloop invariant i59: (l %2 && l %3) ==> k == l/6;\nloop invariant i60: !(l %2 && l %3) ==> k == l/2;\nloop invariant i61: ( l >= 0) && ( l <= n);\nloop invariant i62: ( i >= 0) && ( i <= n/3);\nloop invariant i63: ( j >= 0) && ( j <= n/2);\nloop invariant i64: ( k >= 0) && ( k <= n/2);\nloop invariant i65: (i + j + k) <= n;\nloop invariant i66: i <= j <= k;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 28,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\nloop invariant i4: 0 <= k <= n - i - j;\nloop invariant i5: i + j + k == l;\n\n\nloop invariant i8: 0 <= l%3 <= 2;\nloop invariant i9: 0 <= k <= n;\nloop invariant i10: i+j+k == l;\n\n\nloop invariant i13: i + j + k <= l;\nloop invariant i14: i + j + k <= n;\n\nloop invariant i16: 0 <= j <= n;\nloop invariant i17: l <= n;\n\n\nloop invariant i20: k <= (l/2);\n\n\n\nloop invariant i24: i + j + k >= l;\nloop invariant i25: 0 <= i <= l;\nloop invariant i26: 0 <= j <= l;\nloop invariant i27: 0 <= k <= l;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i39: ((l % 2) == 1) ==> (k < l);\nloop invariant i40: (i + j + k) == l;\nloop invariant i41: (l % 3) < 3;\nloop invariant i42: (l % 2) < 2;\nloop invariant i43: (l % 2) + (l % 3) < 5;\nloop invariant i44: (i + j + k) <= l;\nloop invariant i45: (i + j + k) >= l;\nloop invariant i46: 0 <= i;\nloop invariant i47: 0 <= j;\nloop invariant i48: 0 <= k;\n\n\n\n\n\n\n\nloop invariant i56: 0 <= i <= n;\n\n\n\n\nloop invariant i61: ( l >= 0) && ( l <= n);\n\n\nloop invariant i64: ( k >= 0) && ( k <= n/2);\nloop invariant i65: (i + j + k) <= n;\n\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv3.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sum_natnum.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt3.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_9.c"
        ],
        "skipped": [],
        "total": 183,
        "success_count": 163,
        "failure_count": 20,
        "success_rate": 0.8907103825136612
    }
}