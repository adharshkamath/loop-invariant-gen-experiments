{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/63.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y = 10 - x;\nloop invariant x <= 10 ==> y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 11;\nloop invariant 1 <= y <= 10;\nloop invariant y = 10 - x;\nloop invariant x <= y;\nloop invariant x + y <= 20;\nloop invariant y - x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 1;\nloop invariant x <= 11;\nloop invariant y >= 0;\nloop invariant y <= 9;\n*/\n```",
            "```\n/*@\nloop invariant y == 10 - x;\nloop invariant x >= 1;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 9;\nloop invariant x + y == 10;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 11;\nloop invariant y = 10 - x;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 11;\nloop invariant 0 <= y <= 9;\nloop invariant y == 10 - x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 10;\nloop invariant 0 <= y <= 10 - x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 10;\nloop invariant y = 10 - x;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 10;\nloop invariant 0 <= y <= 10 - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y == 10 - x;\nloop invariant y >= 0;\nloop invariant 0 <= x <= 10;\nloop invariant y == 10 - x;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y = 10 - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 11;\nloop invariant y = 10 - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 11;\nloop invariant 0 <= y <= 9;\nloop invariant (x <= 10) ==> (y == 10 - x);\nloop invariant (x > 10) ==> (y <= 0);\nloop invariant (x >= 1) ==> (y >= 0);\nloop invariant (x <= 10) ==> (x + y == 11);\nloop invariant x + y == 11;\nloop invariant (x <= 10) ==> (y == 10 - x);\nloop invariant (x > 10) ==> (y <= 0);\nloop invariant (x >= 1) ==> (y >= 0);\nloop invariant (x <= 10) ==> (x + y == 11);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y >= 0;\nloop invariant y == 10 - x;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y = 10 - x;\nloop invariant x <= 10 ==> y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\nloop invariant i4: x >= 0;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 11;\nloop invariant 1 <= y <= 10;\nloop invariant y = 10 - x;\nloop invariant x <= y;\nloop invariant x + y <= 20;\nloop invariant y - x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= 11;\n\n\n\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant x <= 11;\nloop invariant y >= 0;\nloop invariant y <= 9;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y == 10 - x;\nloop invariant x >= 1;\nloop invariant x <= 10;\nloop invariant y >= 0;\nloop invariant y <= 9;\nloop invariant x + y == 10;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\nloop invariant i2: x >= 1;\n\n\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 11;\nloop invariant y = 10 - x;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= 11;\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 11;\nloop invariant 0 <= y <= 9;\nloop invariant y == 10 - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 0 <= x <= 11;\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 10;\nloop invariant 0 <= y <= 10 - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 10;\nloop invariant y = 10 - x;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 10;\nloop invariant 0 <= y <= 10 - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y == 10 - x;\nloop invariant y >= 0;\nloop invariant 0 <= x <= 10;\nloop invariant y == 10 - x;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y = 10 - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 11;\nloop invariant y = 10 - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 0 <= x <= 11;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 11;\nloop invariant 0 <= y <= 9;\nloop invariant (x <= 10) ==> (y == 10 - x);\nloop invariant (x > 10) ==> (y <= 0);\nloop invariant (x >= 1) ==> (y >= 0);\nloop invariant (x <= 10) ==> (x + y == 11);\nloop invariant x + y == 11;\nloop invariant (x <= 10) ==> (y == 10 - x);\nloop invariant (x > 10) ==> (y <= 0);\nloop invariant (x >= 1) ==> (y >= 0);\nloop invariant (x <= 10) ==> (x + y == 11);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 0 <= x <= 11;\n\n\nloop invariant i4: (x > 10) ==> (y <= 0);\n\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant y >= 0;\nloop invariant y == 10 - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 0 <= x <= 10;\nloop invariant i2: y = 10 - x;\nloop invariant i3: x <= 10 ==> y >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: y <= 10;\nloop invariant i6: 1 <= x <= 11;\nloop invariant i7: 1 <= y <= 10;\nloop invariant i8: x <= y;\nloop invariant i9: x + y <= 20;\nloop invariant i10: y - x >= 0;\nloop invariant i11: x >= 1;\nloop invariant i12: x <= 11;\nloop invariant i13: y >= 0;\nloop invariant i14: y <= 9;\nloop invariant i15: y == 10 - x;\nloop invariant i16: x <= 10;\nloop invariant i17: x + y == 10;\nloop invariant i18: 0 <= x <= 11;\nloop invariant i19: 0 <= y <= 9;\nloop invariant i20: 1 <= x <= 10;\nloop invariant i21: 0 <= y <= 10 - x;\nloop invariant i22: (x <= 10) ==> (y == 10 - x);\nloop invariant i23: (x > 10) ==> (y <= 0);\nloop invariant i24: (x >= 1) ==> (y >= 0);\nloop invariant i25: (x <= 10) ==> (x + y == 11);\nloop invariant i26: x + y == 11;\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\nloop invariant i4: x >= 0;\n\nloop invariant i6: 1 <= x <= 11;\n\n\n\n\nloop invariant i11: x >= 1;\nloop invariant i12: x <= 11;\n\n\n\n\n\nloop invariant i18: 0 <= x <= 11;\n\n\n\n\nloop invariant i23: (x > 10) ==> (y <= 0);\n\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c"
        ],
        "skipped": [],
        "total": 55,
        "success_count": 49,
        "failure_count": 6,
        "success_rate": 0.8909090909090909
    }
}