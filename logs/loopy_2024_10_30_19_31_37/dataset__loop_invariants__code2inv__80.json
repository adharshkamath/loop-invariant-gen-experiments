{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/80.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= i;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant i < y ==> z1 >= 0;\nloop invariant i < y ==> z2 >= 0;\nloop invariant i < y ==> z3 >= 0;\nloop invariant i < y ==> z1 <= i;\nloop invariant i < y ==> z2 <= i;\nloop invariant i < y ==> z3 <= i;\nloop invariant i < y ==> z1 <= z2;\nloop invariant i < y ==> z2 <= z3;\nloop invariant i < y ==> z1 + z2 + z3 <= 3 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant (i < y) ==> (i < x);\nloop invariant (i >= y) ==> (i == x);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= y;\nloop invariant x >= y;\nloop invariant i < y ==> x >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant i == y ==> i < y ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i < y ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i < y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant i < x;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\n*/\n```",
            "```\n/*@\nloop invariant i <= y && i >= 0 && y >= 0 && x >= 0 && x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant y <= x;\nloop invariant i <= x - y;\nloop invariant i >= 0;\nloop invariant i >= y;\nloop invariant i == 0 ==> (i < x);\nloop invariant i == y ==> (i < x);\nloop invariant i != y ==> (i < x) ==> (i < x - y);\nloop invariant i != y ==> (i < x) ==> (i >= 0);\nloop invariant i != y ==> (i < x) ==> (i >= y);\nloop invariant i != y ==> (i < x) ==> (i < x - y) ==> (i >= 0);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y);\nloop invariant i != y ==> (i < x) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant i < y ==> (i >= 0 && i <= y && x >= y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant x >= z2;\nloop invariant z2 >= z1;\nloop invariant z1 >= z3;\nloop invariant z3 >= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z1 <= z2;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z3;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z3 <= z2;\nloop invariant z3 <= z1;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z2 <= z3;\nloop invariant z2 <= 0;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z1;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z2 <= z3;\nloop invariant z2 <= 0;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z1;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z2 <= z3;\nloop invariant z2 <= 0;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z1;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z2 <= z3;\nloop invariant z2 <= 0;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z1;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z2 <= z3;\nloop invariant z2 <= 0;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z1;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i < x ==> i < y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant i < y ==> i < x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant y <= x;\nloop invariant i < y ==> (i < x);\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1);\nloop invariant i >= y ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1);\nloop invariant i >= y ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1) ==> (i < x);\nloop invariant i >= y ==> (y + 1 > i) ==> (x >= y);\nloop invariant i < y ==> (i < x);\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1);\nloop invariant i >= y ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1);\nloop invariant i >= y ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1) ==> (i < x);\nloop invariant i >= y ==> (y + 1 > i) ==> (x >= y);\nloop invariant i < y ==> (i < x);\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1);\nloop invariant i >= y ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1);\nloop invariant i >= y ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1) ==> (i < x);\nloop invariant i >= y ==> (y + 1 > i) ==> (x >= y);\nloop invariant i < y ==> (i < x);\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1);\nloop invariant i >= y ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1);\nloop invariant i >= y ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1) ==> (i < x);\nloop invariant i >= y ==> (y + 1 > i) ==> (x >= y);\nloop invariant i < y ==> (i < x);\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1);\nloop invariant i >= y ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= i;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant i < y ==> z1 >= 0;\nloop invariant i < y ==> z2 >= 0;\nloop invariant i < y ==> z3 >= 0;\nloop invariant i < y ==> z1 <= i;\nloop invariant i < y ==> z2 <= i;\nloop invariant i < y ==> z3 <= i;\nloop invariant i < y ==> z1 <= z2;\nloop invariant i < y ==> z2 <= z3;\nloop invariant i < y ==> z1 + z2 + z3 <= 3 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= i;\nloop invariant i3: i >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= y;\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant (i < y) ==> (i < x);\nloop invariant (i >= y) ==> (i == x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= y;\nloop invariant x >= y;\nloop invariant i < y ==> x >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\n\nloop invariant i2: x >= y;\nloop invariant i3: i < y ==> x >= i;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i <= x;\nloop invariant i3: x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant i == y ==> i < y ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i < y ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= y;\nloop invariant i3: i == y ==> i < y ==> x >= y;\nloop invariant i4: i < y ==> i < x;\nloop invariant i5: i < y ==> i < x ==> x >= y;\nloop invariant i6: i < y ==> i < x ==> i <= y;\nloop invariant i7: i < y ==> i < x ==> i < x ==> x >= y;\nloop invariant i8: i < y ==> i < x ==> i < x ==> i <= y;\nloop invariant i9: i < y ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i10: i < y ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i11: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i12: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i13: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i14: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i15: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i16: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i17: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i18: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i19: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i20: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i21: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i22: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i23: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i24: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i25: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i26: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i27: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i28: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i29: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i >= 0;\nloop invariant y >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\nloop invariant x >= i ==> x >= y;\nloop invariant i < y ==> i < x;\nloop invariant i >= y ==> i >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: i <= y;\nloop invariant i5: x >= y;\nloop invariant i6: x >= 0;\nloop invariant i7: i < y ==> i < x;\n\nloop invariant i9: x >= i ==> x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i < y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant i < x;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\nloop invariant i >= y;\nloop invariant i >= 0;\nloop invariant i >= 0;\nloop invariant i >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n\nloop invariant i3: x >= y;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= 0;\n\nloop invariant i7: i >= 0;\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i <= y && i >= 0 && y >= 0 && x >= 0 && x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i <= y && i >= 0 && y >= 0 && x >= 0 && x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant y <= x;\nloop invariant i <= x - y;\nloop invariant i >= 0;\nloop invariant i >= y;\nloop invariant i == 0 ==> (i < x);\nloop invariant i == y ==> (i < x);\nloop invariant i != y ==> (i < x) ==> (i < x - y);\nloop invariant i != y ==> (i < x) ==> (i >= 0);\nloop invariant i != y ==> (i < x) ==> (i >= y);\nloop invariant i != y ==> (i < x) ==> (i < x - y) ==> (i >= 0);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y);\nloop invariant i != y ==> (i < x) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i <= x;\nloop invariant i3: y <= x;\n\nloop invariant i5: i >= 0;\n\n\n\n\nloop invariant i10: i != y ==> (i < x) ==> (i >= 0);\n\nloop invariant i12: i != y ==> (i < x) ==> (i < x - y) ==> (i >= 0);\nloop invariant i13: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y);\n\nloop invariant i15: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i16: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i17: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i18: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i19: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i20: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i21: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i22: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i23: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i24: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i < y;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\n\nloop invariant i2: x >= y;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 0;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= y;\nloop invariant x >= y;\nloop invariant i < y ==> (i >= 0 && i <= y && x >= y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= y;\nloop invariant i3: x >= y;\nloop invariant i4: i < y ==> (i >= 0 && i <= y && x >= y);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant x >= z2;\nloop invariant z2 >= z1;\nloop invariant z1 >= z3;\nloop invariant z3 >= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z1 <= z2;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z3;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z3 <= z2;\nloop invariant z3 <= z1;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z2 <= z3;\nloop invariant z2 <= 0;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z1;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z2 <= z3;\nloop invariant z2 <= 0;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z1;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z2 <= z3;\nloop invariant z2 <= 0;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z1;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z2 <= z3;\nloop invariant z2 <= 0;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z1;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\nloop invariant z1 <= x;\nloop invariant z1 <= y;\nloop invariant z1 <= z2;\nloop invariant z2 <= z3;\nloop invariant z2 <= 0;\nloop invariant z2 <= x;\nloop invariant z2 <= y;\nloop invariant z2 <= z1;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z3 <= 0;\nloop invariant z3 <= x;\nloop invariant z3 <= y;\nloop invariant z3 <= z1;\nloop invariant z3 <= z2;\nloop invariant z2 <= z1;\nloop invariant z2 <= z3;\nloop invariant z1 <= z2;\nloop invariant z1 <= z3;\nloop invariant z1 <= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant i <= y;\nloop invariant i < x ==> i < y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\n\nloop invariant i3: i <= y;\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant x >= y;\nloop invariant i < y ==> i < x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= y;\nloop invariant i3: i < y ==> i < x;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= y;\nloop invariant i <= x;\nloop invariant y <= x;\nloop invariant i < y ==> (i < x);\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1);\nloop invariant i >= y ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1);\nloop invariant i >= y ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1) ==> (i < x);\nloop invariant i >= y ==> (y + 1 > i) ==> (x >= y);\nloop invariant i < y ==> (i < x);\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1);\nloop invariant i >= y ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1);\nloop invariant i >= y ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1) ==> (i < x);\nloop invariant i >= y ==> (y + 1 > i) ==> (x >= y);\nloop invariant i < y ==> (i < x);\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1);\nloop invariant i >= y ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1);\nloop invariant i >= y ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1) ==> (i < x);\nloop invariant i >= y ==> (y + 1 > i) ==> (x >= y);\nloop invariant i < y ==> (i < x);\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1);\nloop invariant i >= y ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1);\nloop invariant i >= y ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1) ==> (i < x);\nloop invariant i >= y ==> (y + 1 > i) ==> (x >= y);\nloop invariant i < y ==> (i < x);\nloop invariant i >= y ==> (x >= y);\nloop invariant i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1);\nloop invariant i >= y ==> (i + 1 > i);\nloop invariant i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i < y ==> (i < y + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: i <= x;\nloop invariant i3: y <= x;\nloop invariant i4: i < y ==> (i < x);\nloop invariant i5: i >= y ==> (x >= y);\nloop invariant i6: i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i7: i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i8: i < y ==> (i < i + 1);\nloop invariant i9: i >= y ==> (i + 1 > i);\nloop invariant i10: i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i11: i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i12: i < y ==> (i < y + 1);\nloop invariant i13: i >= y ==> (y + 1 > i);\nloop invariant i14: i < y ==> (i < y + 1) ==> (i < x);\nloop invariant i15: i >= y ==> (y + 1 > i) ==> (x >= y);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= y is partially proven to be inductive.\nloop invariant x >= i is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant i < y ==> z1 >= 0 is preserved but not established.\nloop invariant i < y ==> z2 >= 0 is preserved but not established.\nloop invariant i < y ==> z3 >= 0 is preserved but not established.\nloop invariant i < y ==> z1 <= i is preserved but not established.\nloop invariant i < y ==> z2 <= i is preserved but not established.\nloop invariant i < y ==> z3 <= i is preserved but not established.\nloop invariant i < y ==> z1 <= z2 is partially proven to be inductive.\nloop invariant i < y ==> z2 <= z3 is partially proven to be inductive.\nloop invariant i < y ==> z1 + z2 + z3 <= 3 * i is partially proven to be inductive.\nloop invariant i <= x is partially proven to be inductive.\nloop invariant (i < y) ==> (i < x) is partially proven to be inductive.\nloop invariant (i >= y) ==> (i == x) is preserved but not established.\nloop invariant 1 <= i <= y is preserved but not established.\nloop invariant i < y ==> x >= i is partially proven to be inductive.\nloop invariant i == y ==> i < y ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y is partially proven to be inductive.\nloop invariant i <= y is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant i >= y ==> i >= x is partially proven to be inductive.\nloop invariant x >= i ==> x >= y is partially proven to be inductive.\nloop invariant i < y is partially proven to be inductive.\nloop invariant i < x is partially proven to be inductive.\nloop invariant i >= x is partially proven to be inductive.\nloop invariant i >= y is partially proven to be inductive.\nloop invariant i <= y && i >= 0 && y >= 0 && x >= 0 && x >= y is partially proven to be inductive.\nloop invariant y <= x is partially proven to be inductive.\nloop invariant i <= x - y is partially proven to be inductive.\nloop invariant i == 0 ==> (i < x) is partially proven to be inductive.\nloop invariant i == y ==> (i < x) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i < x - y) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= 0) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i < x - y) ==> (i >= 0) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) is partially proven to be inductive.\nloop invariant i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) is partially proven to be inductive.\nloop invariant 0 <= i < y is partially proven to be inductive.\nloop invariant i < y ==> (i >= 0 && i <= y && x >= y) is partially proven to be inductive.\nloop invariant x >= z2 is partially proven to be inductive.\nloop invariant z2 >= z1 is partially proven to be inductive.\nloop invariant z1 >= z3 is partially proven to be inductive.\nloop invariant z3 >= 0 is partially proven to be inductive.\nloop invariant z3 <= x is partially proven to be inductive.\nloop invariant z3 <= y is partially proven to be inductive.\nloop invariant z3 <= z1 is partially proven to be inductive.\nloop invariant z1 <= z2 is partially proven to be inductive.\nloop invariant z2 <= x is partially proven to be inductive.\nloop invariant z2 <= y is partially proven to be inductive.\nloop invariant z2 <= z3 is partially proven to be inductive.\nloop invariant z1 <= z3 is partially proven to be inductive.\nloop invariant z1 <= 0 is partially proven to be inductive.\nloop invariant z1 <= x is partially proven to be inductive.\nloop invariant z1 <= y is partially proven to be inductive.\nloop invariant z3 <= z2 is partially proven to be inductive.\nloop invariant z3 <= 0 is partially proven to be inductive.\nloop invariant z2 <= z1 is partially proven to be inductive.\nloop invariant z2 <= 0 is partially proven to be inductive.\nloop invariant i < x ==> i < y is partially proven to be inductive.\nloop invariant i < y ==> (i < x) is partially proven to be inductive.\nloop invariant i >= y ==> (x >= y) is partially proven to be inductive.\nloop invariant i < y ==> (i < x) ==> (i < i + 1) is partially proven to be inductive.\nloop invariant i >= y ==> (x >= y) ==> (i + 1 > i) is partially proven to be inductive.\nloop invariant i < y ==> (i < i + 1) is partially proven to be inductive.\nloop invariant i >= y ==> (i + 1 > i) is partially proven to be inductive.\nloop invariant i < y ==> (i < i + 1) ==> (i < y + 1) is partially proven to be inductive.\nloop invariant i >= y ==> (i + 1 > i) ==> (y + 1 > i) is partially proven to be inductive.\nloop invariant i < y ==> (i < y + 1) is partially proven to be inductive.\nloop invariant i >= y ==> (y + 1 > i) is partially proven to be inductive.\nloop invariant i < y ==> (i < y + 1) ==> (i < x) is partially proven to be inductive.\nloop invariant i >= y ==> (y + 1 > i) ==> (x >= y) is partially proven to be inductive.\nAssertion i < x: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= i;\nloop invariant i3: i >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= y;\nloop invariant i6: i < y ==> z1 >= 0;\nloop invariant i7: i < y ==> z2 >= 0;\nloop invariant i8: i < y ==> z3 >= 0;\nloop invariant i9: i < y ==> z1 <= i;\nloop invariant i10: i < y ==> z2 <= i;\nloop invariant i11: i < y ==> z3 <= i;\nloop invariant i12: i < y ==> z1 <= z2;\nloop invariant i13: i < y ==> z2 <= z3;\nloop invariant i14: i < y ==> z1 + z2 + z3 <= 3 * i;\nloop invariant i15: i <= x;\nloop invariant i16: (i < y) ==> (i < x);\nloop invariant i17: (i >= y) ==> (i == x);\nloop invariant i18: 1 <= i <= y;\nloop invariant i19: i < y ==> x >= i;\nloop invariant i20: i == y ==> i < y ==> x >= y;\nloop invariant i21: i < y ==> i < x;\nloop invariant i22: i < y ==> i < x ==> x >= y;\nloop invariant i23: i < y ==> i < x ==> i <= y;\nloop invariant i24: i < y ==> i < x ==> i < x ==> x >= y;\nloop invariant i25: i < y ==> i < x ==> i < x ==> i <= y;\nloop invariant i26: i < y ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i27: i < y ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i28: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i29: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i30: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i31: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i32: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i33: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i34: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i35: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i36: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i37: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i38: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i39: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i40: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i41: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i42: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i43: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i44: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i45: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i46: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i47: i <= y;\nloop invariant i48: x >= 0;\nloop invariant i49: i >= y ==> i >= x;\nloop invariant i50: x >= i ==> x >= y;\nloop invariant i51: i < y;\nloop invariant i52: i < x;\nloop invariant i53: i >= x;\nloop invariant i54: i >= y;\nloop invariant i55: i <= y && i >= 0 && y >= 0 && x >= 0 && x >= y;\nloop invariant i56: y <= x;\nloop invariant i57: i <= x - y;\nloop invariant i58: i == 0 ==> (i < x);\nloop invariant i59: i == y ==> (i < x);\nloop invariant i60: i != y ==> (i < x) ==> (i < x - y);\nloop invariant i61: i != y ==> (i < x) ==> (i >= 0);\nloop invariant i62: i != y ==> (i < x) ==> (i >= y);\nloop invariant i63: i != y ==> (i < x) ==> (i < x - y) ==> (i >= 0);\nloop invariant i64: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y);\nloop invariant i65: i != y ==> (i < x) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i66: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i67: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i68: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i69: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i70: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i71: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i72: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i73: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i74: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i75: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i76: 0 <= i < y;\nloop invariant i77: i < y ==> (i >= 0 && i <= y && x >= y);\nloop invariant i78: x >= z2;\nloop invariant i79: z2 >= z1;\nloop invariant i80: z1 >= z3;\nloop invariant i81: z3 >= 0;\nloop invariant i82: z3 <= x;\nloop invariant i83: z3 <= y;\nloop invariant i84: z3 <= z1;\nloop invariant i85: z1 <= z2;\nloop invariant i86: z2 <= x;\nloop invariant i87: z2 <= y;\nloop invariant i88: z2 <= z3;\nloop invariant i89: z1 <= z3;\nloop invariant i90: z1 <= 0;\nloop invariant i91: z1 <= x;\nloop invariant i92: z1 <= y;\nloop invariant i93: z3 <= z2;\nloop invariant i94: z3 <= 0;\nloop invariant i95: z2 <= z1;\nloop invariant i96: z2 <= 0;\nloop invariant i97: i < x ==> i < y;\nloop invariant i98: i < y ==> (i < x);\nloop invariant i99: i >= y ==> (x >= y);\nloop invariant i100: i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i101: i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i102: i < y ==> (i < i + 1);\nloop invariant i103: i >= y ==> (i + 1 > i);\nloop invariant i104: i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i105: i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i106: i < y ==> (i < y + 1);\nloop invariant i107: i >= y ==> (y + 1 > i);\nloop invariant i108: i < y ==> (i < y + 1) ==> (i < x);\nloop invariant i109: i >= y ==> (y + 1 > i) ==> (x >= y);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: 0 <= i <= y;\nloop invariant i2: x >= i;\nloop invariant i3: i >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= y;\n\n\n\n\n\n\n\n\n\nloop invariant i15: i <= x;\nloop invariant i16: (i < y) ==> (i < x);\n\n\nloop invariant i19: i < y ==> x >= i;\nloop invariant i20: i == y ==> i < y ==> x >= y;\nloop invariant i21: i < y ==> i < x;\nloop invariant i22: i < y ==> i < x ==> x >= y;\nloop invariant i23: i < y ==> i < x ==> i <= y;\nloop invariant i24: i < y ==> i < x ==> i < x ==> x >= y;\nloop invariant i25: i < y ==> i < x ==> i < x ==> i <= y;\nloop invariant i26: i < y ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i27: i < y ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i28: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i29: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i30: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i31: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i32: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i33: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i34: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i35: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i36: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i37: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i38: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i39: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i40: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i41: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i42: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i43: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i44: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i45: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i <= y;\nloop invariant i46: i < y ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> i < x ==> x >= y;\nloop invariant i47: i <= y;\nloop invariant i48: x >= 0;\n\nloop invariant i50: x >= i ==> x >= y;\n\n\n\n\nloop invariant i55: i <= y && i >= 0 && y >= 0 && x >= 0 && x >= y;\nloop invariant i56: y <= x;\n\n\n\n\nloop invariant i61: i != y ==> (i < x) ==> (i >= 0);\n\nloop invariant i63: i != y ==> (i < x) ==> (i < x - y) ==> (i >= 0);\nloop invariant i64: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y);\n\nloop invariant i66: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i67: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i68: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i69: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i70: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i71: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i72: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\nloop invariant i73: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0);\nloop invariant i74: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y);\nloop invariant i75: i != y ==> (i < x) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y) ==> (i >= 0) ==> (i >= y) ==> (i < x - y);\n\nloop invariant i77: i < y ==> (i >= 0 && i <= y && x >= y);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i98: i < y ==> (i < x);\nloop invariant i99: i >= y ==> (x >= y);\nloop invariant i100: i < y ==> (i < x) ==> (i < i + 1);\nloop invariant i101: i >= y ==> (x >= y) ==> (i + 1 > i);\nloop invariant i102: i < y ==> (i < i + 1);\nloop invariant i103: i >= y ==> (i + 1 > i);\nloop invariant i104: i < y ==> (i < i + 1) ==> (i < y + 1);\nloop invariant i105: i >= y ==> (i + 1 > i) ==> (y + 1 > i);\nloop invariant i106: i < y ==> (i < y + 1);\nloop invariant i107: i >= y ==> (y + 1 > i);\nloop invariant i108: i < y ==> (i < y + 1) ==> (i < x);\nloop invariant i109: i >= y ==> (y + 1 > i) ==> (x >= y);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c"
        ],
        "skipped": [],
        "total": 68,
        "success_count": 59,
        "failure_count": 9,
        "success_rate": 0.8676470588235294
    }
}