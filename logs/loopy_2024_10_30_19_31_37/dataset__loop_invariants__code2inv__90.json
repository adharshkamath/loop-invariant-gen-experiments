{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/90.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant lock == 0 ==> x == y;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 1 <= x <= INT_MAX;\nloop invariant 0 <= y - x <= INT_MAX;\nloop invariant 0 <= x - y <= INT_MAX;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 1 || (lock == 0 && x == y);\nloop invariant lock == 1 || (lock == 0 && y == x + 1);\nloop invariant lock == 1 || (lock == 0 && x != y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 0 || lock == 1;\nloop invariant x <= y;\nloop invariant y == x + 1;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 1 ==> x == y + 1;\nloop invariant lock == 0 ==> x == y + 1;\nloop invariant lock == 1 ==> x == y + 2;\nloop invariant lock == 0 ==> x == y + 2;\nloop invariant lock == 1 ==> x == y + 3;\nloop invariant lock == 0 ==> x == y + 3;\nloop invariant lock == 1 ==> x == y + 4;\nloop invariant lock == 0 ==> x == y + 4;\nloop invariant lock == 1 ==> x == y + 5;\nloop invariant lock == 0 ==> x == y + 5;\nloop invariant lock == 1 ==> x == y + 6;\nloop invariant lock == 0 ==> x == y + 6;\nloop invariant lock == 1 ==> x == y + 7;\nloop invariant lock == 0 ==> x == y + 7;\nloop invariant lock == 1 ==> x == y + 8;\nloop invariant lock == 0 ==> x == y + 8;\nloop invariant lock == 1 ==> x == y + 9;\nloop invariant lock == 0 ==> x == y + 9;\nloop invariant lock == 1 ==> x == y + 10;\nloop invariant lock == 0 ==> x == y + 10;\nloop invariant lock == 1 ==> x == y + 11;\nloop invariant lock == 0 ==> x == y + 11;\nloop invariant lock == 1 ==> x == y + 12;\nloop invariant lock == 0 ==> x == y + 12;\nloop invariant lock == 1 ==> x == y + 13;\nloop invariant lock == 0 ==> x == y + 13;\nloop invariant lock == 1 ==> x == y + 14;\nloop invariant lock == 0 ==> x == y + 14;\nloop invariant lock == 1 ==> x == y + 15;\nloop invariant lock == 0 ==> x == y + 15;\nloop invariant lock == 1 ==> x == y + 16;\nloop invariant lock == 0 ==> x == y + 16;\nloop invariant lock == 1 ==> x == y + 17;\nloop invariant lock == 0 ==> x == y + 17;\nloop invariant lock == 1 ==> x == y + 18;\nloop invariant lock == 0 ==> x == y + 18;\nloop invariant lock == 1 ==> x == y + 19;\nloop invariant lock == 0 ==> x == y + 19;\nloop invariant lock == 1 ==> x == y + 20;\nloop invariant lock == 0 ==> x == y + 20;\nloop invariant lock == 1 ==> x == y + 21;\nloop invariant lock == 0 ==> x == y + 21;\nloop invariant lock == 1 ==> x == y + 22;\nloop invariant lock == 0 ==> x == y + 22;\nloop invariant lock == 1 ==> x == y + 23;\nloop invariant lock == 0 ==> x == y + 23;\nloop invariant lock == 1 ==> x == y + 24;\nloop invariant lock == 0 ==> x == y + 24;\nloop invariant lock == 1 ==> x == y + 25;\nloop invariant lock == 0 ==> x == y + 25;\nloop invariant lock == 1 ==> x == y + 26;\nloop invariant lock == 0 ==> x == y + 26;\nloop invariant lock == 1 ==> x == y + 27;\nloop invariant lock == 0 ==> x == y + 27;\nloop invariant lock == 1 ==> x == y + 28;\nloop invariant lock == 0 ==> x == y + 28;\nloop invariant lock == 1 ==> x == y + 29;\nloop invariant lock == 0 ==> x == y + 29;\nloop invariant lock == 1 ==> x == y + 30;\nloop invariant lock == 0 ==> x == y + 30;\nloop invariant lock == 1 ==> x == y + 31;\nloop invariant lock == 0 ==> x == y + 31;\nloop invariant lock == 1 ==> x == y + 32;\nloop invariant lock == 0 ==> x == y + 32;\n*/\n```",
            "```\n/*@\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x < y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x + 1;\nloop invariant x <= 2 * y - 1;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= INT_MAX;\nloop invariant y <= 2;\nloop invariant lock == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant (y - 1) <= x <= y;\nloop invariant x <= y + 1;\nloop invariant lock == 1 ==> x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1 ==> x == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= 2147483647;\nloop invariant !lock || x == y;\nloop invariant lock ==> y == x + 1;\nloop invariant !lock ==> y == x + 1;\nloop invariant unknown() ==> lock;\nloop invariant !unknown() ==> lock == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y - x <= 1;\nloop invariant lock == 0 ==> x = y;\nloop invariant lock == 1 ==> x != y;\nloop invariant !lock ==> x = y;\nloop invariant lock == 1 ==> y - x == 1;\nloop invariant lock == 0 ==> y - x >= 1;\nloop invariant lock == 0 ==> x <= y - 1;\nloop invariant lock == 1 ==> x < y;\nloop invariant lock == 0 ==> x <= y;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant !lock ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - x == 1;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant (x == y) ==> (lock == 1);\nloop invariant lock <= 1 ==> (x != y);\nloop invariant lock <= 1 ==> (x <= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 0;\nloop invariant lock ==> (x == y);\nloop invariant lock ==> (x == y + 1);\nloop invariant lock ==> (x == y - 1);\nloop invariant lock ==> (x == y + 2);\nloop invariant lock ==> (x == y - 2);\nloop invariant lock ==> (x == y + 3);\nloop invariant lock ==> (x == y - 3);\nloop invariant lock ==> (x == y + 4);\nloop invariant lock ==> (x == y - 4);\nloop invariant lock ==> (x == y + 5);\nloop invariant lock ==> (x == y - 5);\nloop invariant lock ==> (x == y + 6);\nloop invariant lock ==> (x == y - 6);\nloop invariant lock ==> (x == y + 7);\nloop invariant lock ==> (x == y - 7);\nloop invariant lock ==> (x == y + 8);\nloop invariant lock ==> (x == y - 8);\nloop invariant lock ==> (x == y + 9);\nloop invariant lock ==> (x == y - 9);\nloop invariant lock ==> (x == y + 10);\nloop invariant lock ==> (x == y - 10);\nloop invariant lock ==> (x == y + 11);\nloop invariant lock ==> (x == y - 11);\nloop invariant lock ==> (x == y + 12);\nloop invariant lock ==> (x == y - 12);\nloop invariant lock ==> (x == y + 13);\nloop invariant lock ==> (x == y - 13);\nloop invariant lock ==> (x == y + 14);\nloop invariant lock ==> (x == y - 14);\nloop invariant lock ==> (x == y + 15);\nloop invariant lock ==> (x == y - 15);\nloop invariant lock ==> (x == y + 16);\nloop invariant lock ==> (x == y - 16);\nloop invariant lock ==> (x == y + 17);\nloop invariant lock ==> (x == y - 17);\nloop invariant lock ==> (x == y + 18);\nloop invariant lock ==> (x == y - 18);\nloop invariant lock ==> (x == y + 19);\nloop invariant lock ==> (x == y - 19);\nloop invariant lock ==> (x == y + 20);\nloop invariant lock ==> (x == y - 20);\nloop invariant lock ==> (x == y + 21);\nloop invariant lock ==> (x == y - 21);\nloop invariant lock ==> (x == y + 22);\nloop invariant lock ==> (x == y - 22);\nloop invariant lock ==> (x == y + 23);\nloop invariant lock ==> (x == y - 23);\nloop invariant lock ==> (x == y + 24);\nloop invariant lock ==> (x == y - 24);\nloop invariant lock ==> (x == y + 25);\nloop invariant lock ==> (x == y - 25);\nloop invariant lock ==> (x == y + 26);\nloop invariant lock ==> (x == y - 26);\nloop invariant lock ==> (x == y + 27);\nloop invariant lock ==> (x == y - 27);\nloop invariant lock ==> (x == y + 28);\nloop invariant lock ==> (x == y - 28);\nloop invariant lock ==> (x == y + 29);\nloop invariant lock ==> (x == y - 29);\nloop invariant lock ==> (x == y + 30);\nloop invariant lock ==> (x == y - 30);\nloop invariant lock ==> (x == y + 31);\nloop invariant lock ==> (x == y - 31);\nloop invariant lock ==> (x == y + 32);\nloop invariant lock ==> (x == y - 32);\nloop invariant lock ==> (x == y + 33);\nloop invariant lock ==> (x == y - 33);\nloop invariant lock ==> (x == y + 34);\nloop invariant lock ==> (x == y - 34);\nloop invariant lock ==> (x == y + 35);\nloop invariant lock ==> (x == y - 35);\nloop invariant lock ==> (x == y + 36);\nloop invariant lock ==> (x == y - 36);\nloop invariant lock ==> (x == y + 37);\nloop invariant lock ==> (x == y - 37);\nloop invariant lock ==> (x == y + 38);\nloop invariant lock ==> (x == y - 38);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v1 <= v2;\nloop invariant 0 <= v3 <= 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == (x != y);\nloop invariant x > 0;\nloop invariant y > 0;\nloop invariant x <= y;\nloop invariant y <= (x + 1);\nloop invariant lock == 0 ==> y == x;\nloop invariant lock == 1 ==> y == x + 1;\nloop invariant lock == 0 ==> x <= y;\nloop invariant lock == 1 ==> x < y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x <= y + 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant lock == 0 ==> x == y;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant 1 <= x <= INT_MAX;\nloop invariant 0 <= y - x <= INT_MAX;\nloop invariant 0 <= x - y <= INT_MAX;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 0 ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n\nloop invariant i5: 0 <= y - x <= INT_MAX;\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 158,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 1 || (lock == 0 && x == y);\nloop invariant lock == 1 || (lock == 0 && y == x + 1);\nloop invariant lock == 1 || (lock == 0 && x != y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\nloop invariant i3: lock == 1 || (lock == 0 && y == x + 1);\nloop invariant i4: lock == 1 || (lock == 0 && x != y);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 67,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 0 || lock == 1;\nloop invariant x <= y;\nloop invariant y == x + 1;\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x == y;\nloop invariant lock == 1 ==> x == y + 1;\nloop invariant lock == 0 ==> x == y + 1;\nloop invariant lock == 1 ==> x == y + 2;\nloop invariant lock == 0 ==> x == y + 2;\nloop invariant lock == 1 ==> x == y + 3;\nloop invariant lock == 0 ==> x == y + 3;\nloop invariant lock == 1 ==> x == y + 4;\nloop invariant lock == 0 ==> x == y + 4;\nloop invariant lock == 1 ==> x == y + 5;\nloop invariant lock == 0 ==> x == y + 5;\nloop invariant lock == 1 ==> x == y + 6;\nloop invariant lock == 0 ==> x == y + 6;\nloop invariant lock == 1 ==> x == y + 7;\nloop invariant lock == 0 ==> x == y + 7;\nloop invariant lock == 1 ==> x == y + 8;\nloop invariant lock == 0 ==> x == y + 8;\nloop invariant lock == 1 ==> x == y + 9;\nloop invariant lock == 0 ==> x == y + 9;\nloop invariant lock == 1 ==> x == y + 10;\nloop invariant lock == 0 ==> x == y + 10;\nloop invariant lock == 1 ==> x == y + 11;\nloop invariant lock == 0 ==> x == y + 11;\nloop invariant lock == 1 ==> x == y + 12;\nloop invariant lock == 0 ==> x == y + 12;\nloop invariant lock == 1 ==> x == y + 13;\nloop invariant lock == 0 ==> x == y + 13;\nloop invariant lock == 1 ==> x == y + 14;\nloop invariant lock == 0 ==> x == y + 14;\nloop invariant lock == 1 ==> x == y + 15;\nloop invariant lock == 0 ==> x == y + 15;\nloop invariant lock == 1 ==> x == y + 16;\nloop invariant lock == 0 ==> x == y + 16;\nloop invariant lock == 1 ==> x == y + 17;\nloop invariant lock == 0 ==> x == y + 17;\nloop invariant lock == 1 ==> x == y + 18;\nloop invariant lock == 0 ==> x == y + 18;\nloop invariant lock == 1 ==> x == y + 19;\nloop invariant lock == 0 ==> x == y + 19;\nloop invariant lock == 1 ==> x == y + 20;\nloop invariant lock == 0 ==> x == y + 20;\nloop invariant lock == 1 ==> x == y + 21;\nloop invariant lock == 0 ==> x == y + 21;\nloop invariant lock == 1 ==> x == y + 22;\nloop invariant lock == 0 ==> x == y + 22;\nloop invariant lock == 1 ==> x == y + 23;\nloop invariant lock == 0 ==> x == y + 23;\nloop invariant lock == 1 ==> x == y + 24;\nloop invariant lock == 0 ==> x == y + 24;\nloop invariant lock == 1 ==> x == y + 25;\nloop invariant lock == 0 ==> x == y + 25;\nloop invariant lock == 1 ==> x == y + 26;\nloop invariant lock == 0 ==> x == y + 26;\nloop invariant lock == 1 ==> x == y + 27;\nloop invariant lock == 0 ==> x == y + 27;\nloop invariant lock == 1 ==> x == y + 28;\nloop invariant lock == 0 ==> x == y + 28;\nloop invariant lock == 1 ==> x == y + 29;\nloop invariant lock == 0 ==> x == y + 29;\nloop invariant lock == 1 ==> x == y + 30;\nloop invariant lock == 0 ==> x == y + 30;\nloop invariant lock == 1 ==> x == y + 31;\nloop invariant lock == 0 ==> x == y + 31;\nloop invariant lock == 1 ==> x == y + 32;\nloop invariant lock == 0 ==> x == y + 32;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: lock == 0 || lock == 1;\nloop invariant i3: x <= y;\n\nloop invariant i5: lock == 1 ==> x == y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant lock == 1 ==> x == y;\nloop invariant lock == 0 ==> x < y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x + 1;\nloop invariant x <= 2 * y - 1;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= x;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y - 1;\nloop invariant y >= 1;\nloop invariant y <= x;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: lock == 1 ==> x == y;\nloop invariant i2: lock == 0 ==> x < y;\n\n\nloop invariant i5: y <= x + 1;\n\n\n\nloop invariant i9: x >= y - 1;\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= INT_MAX;\nloop invariant y <= 2;\nloop invariant lock == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant (y - 1) <= x <= y;\nloop invariant x <= y + 1;\nloop invariant lock == 1 ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: 0 <= lock <= 1;\nloop invariant i2: (y - 1) <= x <= y;\nloop invariant i3: x <= y + 1;\nloop invariant i4: lock == 1 ==> x == y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 1;\nloop invariant x == y;\nloop invariant lock == 1 ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\nloop invariant i4: lock == 1 ==> x == y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= 2147483647;\nloop invariant !lock || x == y;\nloop invariant lock ==> y == x + 1;\nloop invariant !lock ==> y == x + 1;\nloop invariant unknown() ==> lock;\nloop invariant !unknown() ==> lock == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: !lock || x == y;\n\nloop invariant i4: !lock ==> y == x + 1;\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant y - x <= 1;\nloop invariant lock == 0 ==> x = y;\nloop invariant lock == 1 ==> x != y;\nloop invariant !lock ==> x = y;\nloop invariant lock == 1 ==> y - x == 1;\nloop invariant lock == 0 ==> y - x >= 1;\nloop invariant lock == 0 ==> x <= y - 1;\nloop invariant lock == 1 ==> x < y;\nloop invariant lock == 0 ==> x <= y;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant !lock ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - x == 1;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\nloop invariant lock == 0 ==> y - 1 <= x;\nloop invariant lock == 1 ==> y - 1 <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: y - x <= 1;\n\n\n\n\nloop invariant i7: lock == 0 ==> y - x >= 1;\nloop invariant i8: lock == 0 ==> x <= y - 1;\n\nloop invariant i10: lock == 0 ==> x <= y;\nloop invariant i11: lock == 1 ==> y - 1 <= x;\nloop invariant i12: !lock ==> y - 1 <= x;\nloop invariant i13: lock == 0 ==> y - 1 <= x;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant (x == y) ==> (lock == 1);\nloop invariant lock <= 1 ==> (x != y);\nloop invariant lock <= 1 ==> (x <= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\nloop invariant lock <= 1 ==> (x >= y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: 0 <= lock <= 1;\nloop invariant i2: (x == y) ==> (lock == 1);\n\nloop invariant i4: lock <= 1 ==> (x <= y);\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 78,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == 0;\nloop invariant lock ==> (x == y);\nloop invariant lock ==> (x == y + 1);\nloop invariant lock ==> (x == y - 1);\nloop invariant lock ==> (x == y + 2);\nloop invariant lock ==> (x == y - 2);\nloop invariant lock ==> (x == y + 3);\nloop invariant lock ==> (x == y - 3);\nloop invariant lock ==> (x == y + 4);\nloop invariant lock ==> (x == y - 4);\nloop invariant lock ==> (x == y + 5);\nloop invariant lock ==> (x == y - 5);\nloop invariant lock ==> (x == y + 6);\nloop invariant lock ==> (x == y - 6);\nloop invariant lock ==> (x == y + 7);\nloop invariant lock ==> (x == y - 7);\nloop invariant lock ==> (x == y + 8);\nloop invariant lock ==> (x == y - 8);\nloop invariant lock ==> (x == y + 9);\nloop invariant lock ==> (x == y - 9);\nloop invariant lock ==> (x == y + 10);\nloop invariant lock ==> (x == y - 10);\nloop invariant lock ==> (x == y + 11);\nloop invariant lock ==> (x == y - 11);\nloop invariant lock ==> (x == y + 12);\nloop invariant lock ==> (x == y - 12);\nloop invariant lock ==> (x == y + 13);\nloop invariant lock ==> (x == y - 13);\nloop invariant lock ==> (x == y + 14);\nloop invariant lock ==> (x == y - 14);\nloop invariant lock ==> (x == y + 15);\nloop invariant lock ==> (x == y - 15);\nloop invariant lock ==> (x == y + 16);\nloop invariant lock ==> (x == y - 16);\nloop invariant lock ==> (x == y + 17);\nloop invariant lock ==> (x == y - 17);\nloop invariant lock ==> (x == y + 18);\nloop invariant lock ==> (x == y - 18);\nloop invariant lock ==> (x == y + 19);\nloop invariant lock ==> (x == y - 19);\nloop invariant lock ==> (x == y + 20);\nloop invariant lock ==> (x == y - 20);\nloop invariant lock ==> (x == y + 21);\nloop invariant lock ==> (x == y - 21);\nloop invariant lock ==> (x == y + 22);\nloop invariant lock ==> (x == y - 22);\nloop invariant lock ==> (x == y + 23);\nloop invariant lock ==> (x == y - 23);\nloop invariant lock ==> (x == y + 24);\nloop invariant lock ==> (x == y - 24);\nloop invariant lock ==> (x == y + 25);\nloop invariant lock ==> (x == y - 25);\nloop invariant lock ==> (x == y + 26);\nloop invariant lock ==> (x == y - 26);\nloop invariant lock ==> (x == y + 27);\nloop invariant lock ==> (x == y - 27);\nloop invariant lock ==> (x == y + 28);\nloop invariant lock ==> (x == y - 28);\nloop invariant lock ==> (x == y + 29);\nloop invariant lock ==> (x == y - 29);\nloop invariant lock ==> (x == y + 30);\nloop invariant lock ==> (x == y - 30);\nloop invariant lock ==> (x == y + 31);\nloop invariant lock ==> (x == y - 31);\nloop invariant lock ==> (x == y + 32);\nloop invariant lock ==> (x == y - 32);\nloop invariant lock ==> (x == y + 33);\nloop invariant lock ==> (x == y - 33);\nloop invariant lock ==> (x == y + 34);\nloop invariant lock ==> (x == y - 34);\nloop invariant lock ==> (x == y + 35);\nloop invariant lock ==> (x == y - 35);\nloop invariant lock ==> (x == y + 36);\nloop invariant lock ==> (x == y - 36);\nloop invariant lock ==> (x == y + 37);\nloop invariant lock ==> (x == y - 37);\nloop invariant lock ==> (x == y + 38);\nloop invariant lock ==> (x == y - 38);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\nloop invariant i3: lock ==> (x == y);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= v1 <= v2;\nloop invariant 0 <= v3 <= 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\nloop invariant v3 == 1 ==> y == x;\nloop invariant v3 == 0 ==> y == x + 1;\nloop invariant v3 == 1 ==> lock == 1;\nloop invariant v3 == 0 ==> lock == 0;\nloop invariant v3 == 1 ==> x == y;\nloop invariant v3 == 0 ==> x != y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant lock == (x != y);\nloop invariant x > 0;\nloop invariant y > 0;\nloop invariant x <= y;\nloop invariant y <= (x + 1);\nloop invariant lock == 0 ==> y == x;\nloop invariant lock == 1 ==> y == x + 1;\nloop invariant lock == 0 ==> x <= y;\nloop invariant lock == 1 ==> x < y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n\nloop invariant i5: x <= y;\nloop invariant i6: y <= (x + 1);\n\n\nloop invariant i9: lock == 0 ==> x <= y;\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x <= y + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\nloop invariant i3: x <= y;\nloop invariant i4: x <= y + 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 278: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: 1 <= x <= y;\nloop invariant i2: lock == 0 ==> x == y;\nloop invariant i3: 0 <= y <= INT_MAX;\nloop invariant i4: 1 <= x <= INT_MAX;\nloop invariant i5: 0 <= y - x <= INT_MAX;\nloop invariant i6: 0 <= x - y <= INT_MAX;\nloop invariant i7: i1;\nloop invariant i8: i2;\nloop invariant i9: i3;\nloop invariant i10: i4;\nloop invariant i11: i5;\nloop invariant i12: i6;\nloop invariant i13: i7;\nloop invariant i14: i8;\nloop invariant i15: i9;\nloop invariant i16: i10;\nloop invariant i17: i11;\nloop invariant i18: i12;\nloop invariant i19: i13;\nloop invariant i20: i14;\nloop invariant i21: i15;\nloop invariant i22: i16;\nloop invariant i23: i17;\nloop invariant i24: i18;\nloop invariant i25: i19;\nloop invariant i26: i20;\nloop invariant i27: i21;\nloop invariant i28: i22;\nloop invariant i29: i23;\nloop invariant i30: i24;\nloop invariant i31: i25;\nloop invariant i32: i26;\nloop invariant i33: i27;\nloop invariant i34: i28;\nloop invariant i35: i29;\nloop invariant i36: i30;\nloop invariant i37: i31;\nloop invariant i38: i32;\nloop invariant i39: i33;\nloop invariant i40: i34;\nloop invariant i41: i35;\nloop invariant i42: i36;\nloop invariant i43: i37;\nloop invariant i44: i38;\nloop invariant i45: i39;\nloop invariant i46: i40;\nloop invariant i47: i41;\nloop invariant i48: i42;\nloop invariant i49: i43;\nloop invariant i50: i44;\nloop invariant i51: i45;\nloop invariant i52: i46;\nloop invariant i53: i47;\nloop invariant i54: i48;\nloop invariant i55: i49;\nloop invariant i56: i50;\nloop invariant i57: i51;\nloop invariant i58: i52;\nloop invariant i59: i53;\nloop invariant i60: i54;\nloop invariant i61: i55;\nloop invariant i62: i56;\nloop invariant i63: i57;\nloop invariant i64: i58;\nloop invariant i65: i59;\nloop invariant i66: i60;\nloop invariant i67: i61;\nloop invariant i68: i62;\nloop invariant i69: i63;\nloop invariant i70: i64;\nloop invariant i71: i65;\nloop invariant i72: i66;\nloop invariant i73: i67;\nloop invariant i74: i68;\nloop invariant i75: i69;\nloop invariant i76: i70;\nloop invariant i77: i71;\nloop invariant i78: i72;\nloop invariant i79: i73;\nloop invariant i80: i74;\nloop invariant i81: i75;\nloop invariant i82: i76;\nloop invariant i83: i77;\nloop invariant i84: i78;\nloop invariant i85: i79;\nloop invariant i86: i80;\nloop invariant i87: i81;\nloop invariant i88: i82;\nloop invariant i89: i83;\nloop invariant i90: i84;\nloop invariant i91: i85;\nloop invariant i92: i86;\nloop invariant i93: i87;\nloop invariant i94: i88;\nloop invariant i95: i89;\nloop invariant i96: i90;\nloop invariant i97: i91;\nloop invariant i98: i92;\nloop invariant i99: i93;\nloop invariant i100: i94;\nloop invariant i101: i95;\nloop invariant i102: i96;\nloop invariant i103: i97;\nloop invariant i104: i98;\nloop invariant i105: i99;\nloop invariant i106: i100;\nloop invariant i107: i101;\nloop invariant i108: i102;\nloop invariant i109: i103;\nloop invariant i110: i104;\nloop invariant i111: i105;\nloop invariant i112: i106;\nloop invariant i113: i107;\nloop invariant i114: i108;\nloop invariant i115: i109;\nloop invariant i116: i110;\nloop invariant i117: i111;\nloop invariant i118: i112;\nloop invariant i119: i113;\nloop invariant i120: i114;\nloop invariant i121: i115;\nloop invariant i122: i116;\nloop invariant i123: i117;\nloop invariant i124: i118;\nloop invariant i125: i119;\nloop invariant i126: i120;\nloop invariant i127: i121;\nloop invariant i128: i122;\nloop invariant i129: i123;\nloop invariant i130: i124;\nloop invariant i131: i125;\nloop invariant i132: i126;\nloop invariant i133: i127;\nloop invariant i134: i128;\nloop invariant i135: i129;\nloop invariant i136: i130;\nloop invariant i137: i131;\nloop invariant i138: i132;\nloop invariant i139: i133;\nloop invariant i140: i134;\nloop invariant i141: i135;\nloop invariant i142: i136;\nloop invariant i143: i137;\nloop invariant i144: i138;\nloop invariant i145: i139;\nloop invariant i146: i140;\nloop invariant i147: i141;\nloop invariant i148: i142;\nloop invariant i149: i143;\nloop invariant i150: i144;\nloop invariant i151: i145;\nloop invariant i152: i146;\nloop invariant i153: i147;\nloop invariant i154: i148;\nloop invariant i155: i149;\nloop invariant i156: i150;\nloop invariant i157: i151;\nloop invariant i158: i152;\nloop invariant i159: i153;\nloop invariant i160: i154;\nloop invariant i161: i155;\nloop invariant i162: i156;\nloop invariant i163: i157;\nloop invariant i164: i158;\nloop invariant i165: 0 <= x <= y;\nloop invariant i166: lock == 1 || (lock == 0 && x == y);\nloop invariant i167: lock == 1 || (lock == 0 && y == x + 1);\nloop invariant i168: lock == 1 || (lock == 0 && x != y);\nloop invariant i169: lock == 0 || lock == 1;\nloop invariant i170: x <= y;\nloop invariant i171: y == x + 1;\nloop invariant i172: lock == 1 ==> x == y;\nloop invariant i173: lock == 1 ==> x == y + 1;\nloop invariant i174: lock == 0 ==> x == y + 1;\nloop invariant i175: lock == 1 ==> x == y + 2;\nloop invariant i176: lock == 0 ==> x == y + 2;\nloop invariant i177: lock == 1 ==> x == y + 3;\nloop invariant i178: lock == 0 ==> x == y + 3;\nloop invariant i179: lock == 1 ==> x == y + 4;\nloop invariant i180: lock == 0 ==> x == y + 4;\nloop invariant i181: lock == 1 ==> x == y + 5;\nloop invariant i182: lock == 0 ==> x == y + 5;\nloop invariant i183: lock == 1 ==> x == y + 6;\nloop invariant i184: lock == 0 ==> x == y + 6;\nloop invariant i185: lock == 1 ==> x == y + 7;\nloop invariant i186: lock == 0 ==> x == y + 7;\nloop invariant i187: lock == 1 ==> x == y + 8;\nloop invariant i188: lock == 0 ==> x == y + 8;\nloop invariant i189: lock == 1 ==> x == y + 9;\nloop invariant i190: lock == 0 ==> x == y + 9;\nloop invariant i191: lock == 1 ==> x == y + 10;\nloop invariant i192: lock == 0 ==> x == y + 10;\nloop invariant i193: lock == 1 ==> x == y + 11;\nloop invariant i194: lock == 0 ==> x == y + 11;\nloop invariant i195: lock == 1 ==> x == y + 12;\nloop invariant i196: lock == 0 ==> x == y + 12;\nloop invariant i197: lock == 1 ==> x == y + 13;\nloop invariant i198: lock == 0 ==> x == y + 13;\nloop invariant i199: lock == 1 ==> x == y + 14;\nloop invariant i200: lock == 0 ==> x == y + 14;\nloop invariant i201: lock == 1 ==> x == y + 15;\nloop invariant i202: lock == 0 ==> x == y + 15;\nloop invariant i203: lock == 1 ==> x == y + 16;\nloop invariant i204: lock == 0 ==> x == y + 16;\nloop invariant i205: lock == 1 ==> x == y + 17;\nloop invariant i206: lock == 0 ==> x == y + 17;\nloop invariant i207: lock == 1 ==> x == y + 18;\nloop invariant i208: lock == 0 ==> x == y + 18;\nloop invariant i209: lock == 1 ==> x == y + 19;\nloop invariant i210: lock == 0 ==> x == y + 19;\nloop invariant i211: lock == 1 ==> x == y + 20;\nloop invariant i212: lock == 0 ==> x == y + 20;\nloop invariant i213: lock == 1 ==> x == y + 21;\nloop invariant i214: lock == 0 ==> x == y + 21;\nloop invariant i215: lock == 1 ==> x == y + 22;\nloop invariant i216: lock == 0 ==> x == y + 22;\nloop invariant i217: lock == 1 ==> x == y + 23;\nloop invariant i218: lock == 0 ==> x == y + 23;\nloop invariant i219: lock == 1 ==> x == y + 24;\nloop invariant i220: lock == 0 ==> x == y + 24;\nloop invariant i221: lock == 1 ==> x == y + 25;\nloop invariant i222: lock == 0 ==> x == y + 25;\nloop invariant i223: lock == 1 ==> x == y + 26;\nloop invariant i224: lock == 0 ==> x == y + 26;\nloop invariant i225: lock == 1 ==> x == y + 27;\nloop invariant i226: lock == 0 ==> x == y + 27;\nloop invariant i227: lock == 1 ==> x == y + 28;\nloop invariant i228: lock == 0 ==> x == y + 28;\nloop invariant i229: lock == 1 ==> x == y + 29;\nloop invariant i230: lock == 0 ==> x == y + 29;\nloop invariant i231: lock == 1 ==> x == y + 30;\nloop invariant i232: lock == 0 ==> x == y + 30;\nloop invariant i233: lock == 1 ==> x == y + 31;\nloop invariant i234: lock == 0 ==> x == y + 31;\nloop invariant i235: lock == 1 ==> x == y + 32;\nloop invariant i236: lock == 0 ==> x == y + 32;\nloop invariant i237: lock == 0 ==> x < y;\nloop invariant i238: x >= 0;\nloop invariant i239: y >= 0;\nloop invariant i240: y <= x + 1;\nloop invariant i241: x <= 2 * y - 1;\nloop invariant i242: x >= 1;\nloop invariant i243: y >= 1;\nloop invariant i244: x >= y - 1;\nloop invariant i245: y <= x;\nloop invariant i246: 0 <= x <= y <= INT_MAX;\nloop invariant i247: y <= 2;\nloop invariant i248: lock == 1;\nloop invariant i249: 0 <= lock <= 1;\nloop invariant i250: (y - 1) <= x <= y;\nloop invariant i251: x <= y + 1;\nloop invariant i252: x == y;\nloop invariant i253: 0 <= x <= y <= 2147483647;\nloop invariant i254: !lock || x == y;\nloop invariant i255: lock ==> y == x + 1;\nloop invariant i256: !lock ==> y == x + 1;\nloop invariant i257: unknown() ==> lock;\nloop invariant i258: !unknown() ==> lock == 0;\nloop invariant i259: y - x <= 1;\nloop invariant i260: lock == 0 ==> x = y;\nloop invariant i261: lock == 1 ==> x != y;\nloop invariant i262: !lock ==> x = y;\nloop invariant i263: lock == 1 ==> y - x == 1;\nloop invariant i264: lock == 0 ==> y - x >= 1;\nloop invariant i265: lock == 0 ==> x <= y - 1;\nloop invariant i266: lock == 1 ==> x < y;\nloop invariant i267: lock == 0 ==> x <= y;\nloop invariant i268: lock == 1 ==> y - 1 <= x;\nloop invariant i269: !lock ==> y - 1 <= x;\nloop invariant i270: lock == 0 ==> y - 1 <= x;\nloop invariant i271: (x == y) ==> (lock == 1);\nloop invariant i272: lock <= 1 ==> (x != y);\nloop invariant i273: lock <= 1 ==> (x <= y);\nloop invariant i274: lock <= 1 ==> (x >= y);\nloop invariant i275: lock == 0;\nloop invariant i276: lock ==> (x == y);\nloop invariant i277: lock ==> (x == y + 1);\nloop invariant i278: lock ==> (x == y - 1);\nloop invariant i279: lock ==> (x == y + 2);\nloop invariant i280: lock ==> (x == y - 2);\nloop invariant i281: lock ==> (x == y + 3);\nloop invariant i282: lock ==> (x == y - 3);\nloop invariant i283: lock ==> (x == y + 4);\nloop invariant i284: lock ==> (x == y - 4);\nloop invariant i285: lock ==> (x == y + 5);\nloop invariant i286: lock ==> (x == y - 5);\nloop invariant i287: lock ==> (x == y + 6);\nloop invariant i288: lock ==> (x == y - 6);\nloop invariant i289: lock ==> (x == y + 7);\nloop invariant i290: lock ==> (x == y - 7);\nloop invariant i291: lock ==> (x == y + 8);\nloop invariant i292: lock ==> (x == y - 8);\nloop invariant i293: lock ==> (x == y + 9);\nloop invariant i294: lock ==> (x == y - 9);\nloop invariant i295: lock ==> (x == y + 10);\nloop invariant i296: lock ==> (x == y - 10);\nloop invariant i297: lock ==> (x == y + 11);\nloop invariant i298: lock ==> (x == y - 11);\nloop invariant i299: lock ==> (x == y + 12);\nloop invariant i300: lock ==> (x == y - 12);\nloop invariant i301: lock ==> (x == y + 13);\nloop invariant i302: lock ==> (x == y - 13);\nloop invariant i303: lock ==> (x == y + 14);\nloop invariant i304: lock ==> (x == y - 14);\nloop invariant i305: lock ==> (x == y + 15);\nloop invariant i306: lock ==> (x == y - 15);\nloop invariant i307: lock ==> (x == y + 16);\nloop invariant i308: lock ==> (x == y - 16);\nloop invariant i309: lock ==> (x == y + 17);\nloop invariant i310: lock ==> (x == y - 17);\nloop invariant i311: lock ==> (x == y + 18);\nloop invariant i312: lock ==> (x == y - 18);\nloop invariant i313: lock ==> (x == y + 19);\nloop invariant i314: lock ==> (x == y - 19);\nloop invariant i315: lock ==> (x == y + 20);\nloop invariant i316: lock ==> (x == y - 20);\nloop invariant i317: lock ==> (x == y + 21);\nloop invariant i318: lock ==> (x == y - 21);\nloop invariant i319: lock ==> (x == y + 22);\nloop invariant i320: lock ==> (x == y - 22);\nloop invariant i321: lock ==> (x == y + 23);\nloop invariant i322: lock ==> (x == y - 23);\nloop invariant i323: lock ==> (x == y + 24);\nloop invariant i324: lock ==> (x == y - 24);\nloop invariant i325: lock ==> (x == y + 25);\nloop invariant i326: lock ==> (x == y - 25);\nloop invariant i327: lock ==> (x == y + 26);\nloop invariant i328: lock ==> (x == y - 26);\nloop invariant i329: lock ==> (x == y + 27);\nloop invariant i330: lock ==> (x == y - 27);\nloop invariant i331: lock ==> (x == y + 28);\nloop invariant i332: lock ==> (x == y - 28);\nloop invariant i333: lock ==> (x == y + 29);\nloop invariant i334: lock ==> (x == y - 29);\nloop invariant i335: lock ==> (x == y + 30);\nloop invariant i336: lock ==> (x == y - 30);\nloop invariant i337: lock ==> (x == y + 31);\nloop invariant i338: lock ==> (x == y - 31);\nloop invariant i339: lock ==> (x == y + 32);\nloop invariant i340: lock ==> (x == y - 32);\nloop invariant i341: lock ==> (x == y + 33);\nloop invariant i342: lock ==> (x == y - 33);\nloop invariant i343: lock ==> (x == y + 34);\nloop invariant i344: lock ==> (x == y - 34);\nloop invariant i345: lock ==> (x == y + 35);\nloop invariant i346: lock ==> (x == y - 35);\nloop invariant i347: lock ==> (x == y + 36);\nloop invariant i348: lock ==> (x == y - 36);\nloop invariant i349: lock ==> (x == y + 37);\nloop invariant i350: lock ==> (x == y - 37);\nloop invariant i351: lock ==> (x == y + 38);\nloop invariant i352: lock ==> (x == y - 38);\nloop invariant i353: 0 <= v1 <= v2;\nloop invariant i354: 0 <= v3 <= 1;\nloop invariant i355: v3 == 1 ==> lock == 1;\nloop invariant i356: v3 == 0 ==> lock == 0;\nloop invariant i357: v3 == 1 ==> x == y;\nloop invariant i358: v3 == 0 ==> x != y;\nloop invariant i359: v3 == 1 ==> y == x;\nloop invariant i360: v3 == 0 ==> y == x + 1;\nloop invariant i361: lock == (x != y);\nloop invariant i362: x > 0;\nloop invariant i363: y > 0;\nloop invariant i364: y <= (x + 1);\nloop invariant i365: lock == 0 ==> y == x;\nloop invariant i366: lock == 1 ==> y == x + 1;\nloop invariant i367: 0 <= y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 322,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\n\nloop invariant i5: 0 <= y - x <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i167: lock == 1 || (lock == 0 && y == x + 1);\nloop invariant i168: lock == 1 || (lock == 0 && x != y);\nloop invariant i169: lock == 0 || lock == 1;\nloop invariant i170: x <= y;\n\nloop invariant i172: lock == 1 ==> x == y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i237: lock == 0 ==> x < y;\n\n\nloop invariant i240: y <= x + 1;\n\n\n\nloop invariant i244: x >= y - 1;\n\n\n\n\nloop invariant i249: 0 <= lock <= 1;\nloop invariant i250: (y - 1) <= x <= y;\nloop invariant i251: x <= y + 1;\n\n\nloop invariant i254: !lock || x == y;\n\nloop invariant i256: !lock ==> y == x + 1;\n\n\nloop invariant i259: y - x <= 1;\n\n\n\n\nloop invariant i264: lock == 0 ==> y - x >= 1;\nloop invariant i265: lock == 0 ==> x <= y - 1;\n\nloop invariant i267: lock == 0 ==> x <= y;\nloop invariant i268: lock == 1 ==> y - 1 <= x;\nloop invariant i269: !lock ==> y - 1 <= x;\nloop invariant i270: lock == 0 ==> y - 1 <= x;\nloop invariant i271: (x == y) ==> (lock == 1);\n\nloop invariant i273: lock <= 1 ==> (x <= y);\n\n\nloop invariant i276: lock ==> (x == y);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i364: y <= (x + 1);\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 76,
        "success_count": 66,
        "failure_count": 10,
        "success_rate": 0.868421052631579
    }
}