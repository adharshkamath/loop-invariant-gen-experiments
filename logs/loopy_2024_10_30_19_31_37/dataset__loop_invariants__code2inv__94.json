{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/94.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= j <= ((n * (n + 1)) / 2);\nloop invariant j == ((i * (i - 1)) / 2);\nloop invariant (i + (j + k)) > (2 * n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i + j >= (i + (i - 1) * i / 2);\nloop invariant i + j >= (i + i * i / 2);\nloop invariant i + j >= (i + (i * i + i) / 2);\nloop invariant i + j >= (i + (i * (i + 1)) / 2);\nloop invariant i + j >= (i + (i * (i + 1) / 2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j >= (i * (i - 1)) / 2;\nloop invariant j <= (i * (i + 1)) / 2;\nloop invariant j >= 0;\nloop invariant j <= (n * (n + 1)) / 2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant (i + j + k) > (2 * n);\n*/\n```",
            "```\n/*@\nloop invariant i <= n;\nloop invariant j >= 0;\nloop invariant j <= (n * (n + 1) / 2);\nloop invariant (j + k) >= (n * (n + 1) / 2);\nloop invariant (i + (j + k)) >= (n * (n + 1) / 2);\nloop invariant (i + (j + k)) <= ((n + 1) * (n + 1) / 2);\nloop invariant (i + (j + k)) > (2 * n);\nloop invariant i >= 1;\nloop invariant i <= (n + 1);\nloop invariant j >= (i * (i - 1) / 2);\nloop invariant j <= ((i + 1) * (i + 2) / 2);\nloop invariant (j + k) >= (i * (i - 1) / 2);\nloop invariant (j + k) <= ((i + 1) * (i + 2) / 2);\nloop invariant (i + (j + k)) >= (i * (i - 1) / 2);\nloop invariant (i + (j + k)) <= ((i + 1) * (i + 2) / 2);\nloop invariant (i + (j + k)) > (2 * (i - 1));\nloop invariant (i + (j + k)) > (2 * (i - 2));\nloop invariant (i + (j + k)) > (2 * (i - 3));\nloop invariant (i + (j + k)) > (2 * (i - 4));\nloop invariant (i + (j + k)) > (2 * (i - 5));\nloop invariant (i + (j + k)) > (2 * (i - 6));\nloop invariant (i + (j + k)) > (2 * (i - 7));\nloop invariant (i + (j + k)) > (2 * (i - 8));\nloop invariant (i + (j + k)) > (2 * (i - 9));\nloop invariant (i + (j + k)) > (2 * (i - 10));\nloop invariant (i + (j + k)) > (2 * (i - 11));\nloop invariant (i + (j + k)) > (2 * (i - 12));\nloop invariant (i + (j + k)) > (2 * (i - 13));\nloop invariant (i + (j + k)) > (2 * (i - 14));\nloop invariant (i + (j + k)) > (2 * (i - 15));\nloop invariant (i + (j + k)) > (2 * (i - 16));\nloop invariant (i + (j + k)) > (2 * (i - 17));\nloop invariant (i + (j + k)) > (2 * (i - 18));\nloop invariant (i + (j + k)) > (2 * (i - 19));\nloop invariant (i + (j + k)) > (2 * (i - 20));\nloop invariant (i + (j + k)) > (2 * (i - 21));\nloop invariant (i + (j + k)) > (2 * (i - 22));\nloop invariant (i + (j + k)) > (2 * (i - 23));\nloop invariant (i + (j + k)) > (2 * (i - 24));\nloop invariant (i + (j + k)) > (2 * (i - 25));\nloop invariant (i + (j + k)) > (2 * (i - 26));\nloop invariant (i + (j + k)) > (2 * (i - 27));\nloop invariant (i + (j + k)) > (2 * (i - 28));\nloop invariant (i + (j + k)) > (2 * (i - 29));\nloop invariant (i + (j + k)) > (2 * (i - 30));\nloop invariant (i + (j + k)) > (2 * (i - 31));\nloop invariant (i + (j + k)) > (2 * (i - 32));\nloop invariant (i + (j + k)) > (2 * (i - 33));\nloop invariant (i + (j + k)) > (2 * (i - 34));\nloop invariant (i + (j + k)) > (2 * (i - 35));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= (i * (i + 1) / 2);\nloop invariant (i + (j + k)) > (2 * n) ==> ((i + (j + k)) > (2 * n));\n*/\n```",
            "```\n/*@\nloop invariant i = j - i;\nloop invariant (i + (j + k)) > (2 * n);\n*/\n```",
            "```\n/*@\nloop invariant ( i <= n );\nloop invariant ( j >= 0 );\nloop invariant ( j <= i * (i + 1)/2 );\nloop invariant ( i + j + k > 2 * n );\n*/\n```",
            "```\n/*@\nloop invariant i <= n;\nloop invariant j >= 0;\nloop invariant j <= (i * (i + 1)) / 2;\nloop invariant j >= i * (i - 1) / 2;\nloop invariant i + j + k > 2 * n ==> i + j + k == 2 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k <= j <= (n * (n + 1) / 2);\nloop invariant (i + j + k) > (2 * n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n * (n + 1) / 2;\nloop invariant i + j >= n * (n + 1) / 2;\nloop invariant i + j + k > 2 * n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= (n * (n + 1) / 2 + k);\nloop invariant i <= n + 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= (i * (i + 1) / 2);\nloop invariant (i + (j + k)) > (2 * n) ==> n >= i;\nloop invariant (i + (j + k)) > (2 * n) ==> j >= (i * (i + 1) / 2);\nloop invariant (i + (j + k)) > (2 * n) ==> k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= (n * (n + 1) / 2);\nloop invariant (i + (j + k)) > (2 * n);\nloop invariant (i <= n);\nloop invariant (j <= (n * (n + 1) / 2));\nloop invariant (i + (j + k) > (2 * n));\nloop invariant (i + (j + k) > (2 * n));\nloop invariant (i + (j + k) > (2 * n));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i * (i + 1) / 2;\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (j + k) <= (1 + (i - 1) * i / 2);\nloop invariant i + j + k > 2 * n ==> i > n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= j <= ((n * (n + 1)) / 2);\nloop invariant j == ((i * (i - 1)) / 2);\nloop invariant (i + (j + k)) > (2 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i + j >= (i + (i - 1) * i / 2);\nloop invariant i + j >= (i + i * i / 2);\nloop invariant i + j >= (i + (i * i + i) / 2);\nloop invariant i + j >= (i + (i * (i + 1)) / 2);\nloop invariant i + j >= (i + (i * (i + 1) / 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\nloop invariant i2: i + j >= (i + (i - 1) * i / 2);\nloop invariant i3: i + j >= (i + i * i / 2);\nloop invariant i4: i + j >= (i + (i * i + i) / 2);\nloop invariant i5: i + j >= (i + (i * (i + 1)) / 2);\nloop invariant i6: i + j >= (i + (i * (i + 1) / 2));\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant j >= (i * (i - 1)) / 2;\nloop invariant j <= (i * (i + 1)) / 2;\nloop invariant j >= 0;\nloop invariant j <= (n * (n + 1)) / 2;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant (i + j + k) > (2 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\nloop invariant i2: j >= (i * (i - 1)) / 2;\nloop invariant i3: j <= (i * (i + 1)) / 2;\nloop invariant i4: j >= 0;\n\nloop invariant i6: i >= 0;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i <= n;\nloop invariant j >= 0;\nloop invariant j <= (n * (n + 1) / 2);\nloop invariant (j + k) >= (n * (n + 1) / 2);\nloop invariant (i + (j + k)) >= (n * (n + 1) / 2);\nloop invariant (i + (j + k)) <= ((n + 1) * (n + 1) / 2);\nloop invariant (i + (j + k)) > (2 * n);\nloop invariant i >= 1;\nloop invariant i <= (n + 1);\nloop invariant j >= (i * (i - 1) / 2);\nloop invariant j <= ((i + 1) * (i + 2) / 2);\nloop invariant (j + k) >= (i * (i - 1) / 2);\nloop invariant (j + k) <= ((i + 1) * (i + 2) / 2);\nloop invariant (i + (j + k)) >= (i * (i - 1) / 2);\nloop invariant (i + (j + k)) <= ((i + 1) * (i + 2) / 2);\nloop invariant (i + (j + k)) > (2 * (i - 1));\nloop invariant (i + (j + k)) > (2 * (i - 2));\nloop invariant (i + (j + k)) > (2 * (i - 3));\nloop invariant (i + (j + k)) > (2 * (i - 4));\nloop invariant (i + (j + k)) > (2 * (i - 5));\nloop invariant (i + (j + k)) > (2 * (i - 6));\nloop invariant (i + (j + k)) > (2 * (i - 7));\nloop invariant (i + (j + k)) > (2 * (i - 8));\nloop invariant (i + (j + k)) > (2 * (i - 9));\nloop invariant (i + (j + k)) > (2 * (i - 10));\nloop invariant (i + (j + k)) > (2 * (i - 11));\nloop invariant (i + (j + k)) > (2 * (i - 12));\nloop invariant (i + (j + k)) > (2 * (i - 13));\nloop invariant (i + (j + k)) > (2 * (i - 14));\nloop invariant (i + (j + k)) > (2 * (i - 15));\nloop invariant (i + (j + k)) > (2 * (i - 16));\nloop invariant (i + (j + k)) > (2 * (i - 17));\nloop invariant (i + (j + k)) > (2 * (i - 18));\nloop invariant (i + (j + k)) > (2 * (i - 19));\nloop invariant (i + (j + k)) > (2 * (i - 20));\nloop invariant (i + (j + k)) > (2 * (i - 21));\nloop invariant (i + (j + k)) > (2 * (i - 22));\nloop invariant (i + (j + k)) > (2 * (i - 23));\nloop invariant (i + (j + k)) > (2 * (i - 24));\nloop invariant (i + (j + k)) > (2 * (i - 25));\nloop invariant (i + (j + k)) > (2 * (i - 26));\nloop invariant (i + (j + k)) > (2 * (i - 27));\nloop invariant (i + (j + k)) > (2 * (i - 28));\nloop invariant (i + (j + k)) > (2 * (i - 29));\nloop invariant (i + (j + k)) > (2 * (i - 30));\nloop invariant (i + (j + k)) > (2 * (i - 31));\nloop invariant (i + (j + k)) > (2 * (i - 32));\nloop invariant (i + (j + k)) > (2 * (i - 33));\nloop invariant (i + (j + k)) > (2 * (i - 34));\nloop invariant (i + (j + k)) > (2 * (i - 35));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\nloop invariant i2: j >= 0;\n\n\n\n\n\n\nloop invariant i9: i <= (n + 1);\nloop invariant i10: j >= (i * (i - 1) / 2);\nloop invariant i11: j <= ((i + 1) * (i + 2) / 2);\nloop invariant i12: (j + k) >= (i * (i - 1) / 2);\n\nloop invariant i14: (i + (j + k)) >= (i * (i - 1) / 2);\n\nloop invariant i16: (i + (j + k)) > (2 * (i - 1));\nloop invariant i17: (i + (j + k)) > (2 * (i - 2));\nloop invariant i18: (i + (j + k)) > (2 * (i - 3));\nloop invariant i19: (i + (j + k)) > (2 * (i - 4));\nloop invariant i20: (i + (j + k)) > (2 * (i - 5));\nloop invariant i21: (i + (j + k)) > (2 * (i - 6));\nloop invariant i22: (i + (j + k)) > (2 * (i - 7));\nloop invariant i23: (i + (j + k)) > (2 * (i - 8));\nloop invariant i24: (i + (j + k)) > (2 * (i - 9));\nloop invariant i25: (i + (j + k)) > (2 * (i - 10));\nloop invariant i26: (i + (j + k)) > (2 * (i - 11));\nloop invariant i27: (i + (j + k)) > (2 * (i - 12));\nloop invariant i28: (i + (j + k)) > (2 * (i - 13));\nloop invariant i29: (i + (j + k)) > (2 * (i - 14));\nloop invariant i30: (i + (j + k)) > (2 * (i - 15));\nloop invariant i31: (i + (j + k)) > (2 * (i - 16));\nloop invariant i32: (i + (j + k)) > (2 * (i - 17));\nloop invariant i33: (i + (j + k)) > (2 * (i - 18));\nloop invariant i34: (i + (j + k)) > (2 * (i - 19));\nloop invariant i35: (i + (j + k)) > (2 * (i - 20));\nloop invariant i36: (i + (j + k)) > (2 * (i - 21));\nloop invariant i37: (i + (j + k)) > (2 * (i - 22));\nloop invariant i38: (i + (j + k)) > (2 * (i - 23));\nloop invariant i39: (i + (j + k)) > (2 * (i - 24));\nloop invariant i40: (i + (j + k)) > (2 * (i - 25));\nloop invariant i41: (i + (j + k)) > (2 * (i - 26));\nloop invariant i42: (i + (j + k)) > (2 * (i - 27));\nloop invariant i43: (i + (j + k)) > (2 * (i - 28));\nloop invariant i44: (i + (j + k)) > (2 * (i - 29));\nloop invariant i45: (i + (j + k)) > (2 * (i - 30));\nloop invariant i46: (i + (j + k)) > (2 * (i - 31));\nloop invariant i47: (i + (j + k)) > (2 * (i - 32));\nloop invariant i48: (i + (j + k)) > (2 * (i - 33));\nloop invariant i49: (i + (j + k)) > (2 * (i - 34));\nloop invariant i50: (i + (j + k)) > (2 * (i - 35));\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= (i * (i + 1) / 2);\nloop invariant (i + (j + k)) > (2 * n) ==> ((i + (j + k)) > (2 * n));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\n\nloop invariant i3: (i + (j + k)) > (2 * n) ==> ((i + (j + k)) > (2 * n));\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i = j - i;\nloop invariant (i + (j + k)) > (2 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( i <= n );\nloop invariant ( j >= 0 );\nloop invariant ( j <= i * (i + 1)/2 );\nloop invariant ( i + j + k > 2 * n );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\n\nloop invariant i3: ( j <= i * (i + 1)/2 );\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i <= n;\nloop invariant j >= 0;\nloop invariant j <= (i * (i + 1)) / 2;\nloop invariant j >= i * (i - 1) / 2;\nloop invariant i + j + k > 2 * n ==> i + j + k == 2 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\nloop invariant i2: j >= 0;\nloop invariant i3: j <= (i * (i + 1)) / 2;\nloop invariant i4: j >= i * (i - 1) / 2;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k <= j <= (n * (n + 1) / 2);\nloop invariant (i + j + k) > (2 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n * (n + 1) / 2;\nloop invariant i + j >= n * (n + 1) / 2;\nloop invariant i + j + k > 2 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= (n * (n + 1) / 2 + k);\nloop invariant i <= n + 1;\nloop invariant i >= 0;\nloop invariant j >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\nloop invariant i2: i <= n + 1;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= (i * (i + 1) / 2);\nloop invariant (i + (j + k)) > (2 * n) ==> n >= i;\nloop invariant (i + (j + k)) > (2 * n) ==> j >= (i * (i + 1) / 2);\nloop invariant (i + (j + k)) > (2 * n) ==> k >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= (n * (n + 1) / 2);\nloop invariant (i + (j + k)) > (2 * n);\nloop invariant (i <= n);\nloop invariant (j <= (n * (n + 1) / 2));\nloop invariant (i + (j + k) > (2 * n));\nloop invariant (i + (j + k) > (2 * n));\nloop invariant (i + (j + k) > (2 * n));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= i * (i + 1) / 2;\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\n\nloop invariant i3: ((i + (j + k)) > (2 * n)) ==> (i + j + k > 2 * n);\nloop invariant i4: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0);\nloop invariant i5: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i6: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i7: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i8: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i9: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i10: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i11: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i12: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (j + k) <= (1 + (i - 1) * i / 2);\nloop invariant i + j + k > 2 * n ==> i > n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i + j + k > 2 * n ==> i + j + k > 2 * n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\n\n\nloop invariant i4: i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i5: i + j + k > 2 * n ==> i + j + k > 2 * n;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 86: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: 0 <= j <= ((n * (n + 1)) / 2);\nloop invariant i3: j == ((i * (i - 1)) / 2);\nloop invariant i4: (i + (j + k)) > (2 * n);\nloop invariant i5: 0 <= i <= n;\nloop invariant i6: i + j >= (i + (i - 1) * i / 2);\nloop invariant i7: i + j >= (i + i * i / 2);\nloop invariant i8: i + j >= (i + (i * i + i) / 2);\nloop invariant i9: i + j >= (i + (i * (i + 1)) / 2);\nloop invariant i10: i + j >= (i + (i * (i + 1) / 2));\nloop invariant i11: j >= (i * (i - 1)) / 2;\nloop invariant i12: j <= (i * (i + 1)) / 2;\nloop invariant i13: j >= 0;\nloop invariant i14: j <= (n * (n + 1)) / 2;\nloop invariant i15: i >= 0;\nloop invariant i16: i <= n;\nloop invariant i17: (i + j + k) > (2 * n);\nloop invariant i18: j <= (n * (n + 1) / 2);\nloop invariant i19: (j + k) >= (n * (n + 1) / 2);\nloop invariant i20: (i + (j + k)) >= (n * (n + 1) / 2);\nloop invariant i21: (i + (j + k)) <= ((n + 1) * (n + 1) / 2);\nloop invariant i22: i >= 1;\nloop invariant i23: i <= (n + 1);\nloop invariant i24: j >= (i * (i - 1) / 2);\nloop invariant i25: j <= ((i + 1) * (i + 2) / 2);\nloop invariant i26: (j + k) >= (i * (i - 1) / 2);\nloop invariant i27: (j + k) <= ((i + 1) * (i + 2) / 2);\nloop invariant i28: (i + (j + k)) >= (i * (i - 1) / 2);\nloop invariant i29: (i + (j + k)) <= ((i + 1) * (i + 2) / 2);\nloop invariant i30: (i + (j + k)) > (2 * (i - 1));\nloop invariant i31: (i + (j + k)) > (2 * (i - 2));\nloop invariant i32: (i + (j + k)) > (2 * (i - 3));\nloop invariant i33: (i + (j + k)) > (2 * (i - 4));\nloop invariant i34: (i + (j + k)) > (2 * (i - 5));\nloop invariant i35: (i + (j + k)) > (2 * (i - 6));\nloop invariant i36: (i + (j + k)) > (2 * (i - 7));\nloop invariant i37: (i + (j + k)) > (2 * (i - 8));\nloop invariant i38: (i + (j + k)) > (2 * (i - 9));\nloop invariant i39: (i + (j + k)) > (2 * (i - 10));\nloop invariant i40: (i + (j + k)) > (2 * (i - 11));\nloop invariant i41: (i + (j + k)) > (2 * (i - 12));\nloop invariant i42: (i + (j + k)) > (2 * (i - 13));\nloop invariant i43: (i + (j + k)) > (2 * (i - 14));\nloop invariant i44: (i + (j + k)) > (2 * (i - 15));\nloop invariant i45: (i + (j + k)) > (2 * (i - 16));\nloop invariant i46: (i + (j + k)) > (2 * (i - 17));\nloop invariant i47: (i + (j + k)) > (2 * (i - 18));\nloop invariant i48: (i + (j + k)) > (2 * (i - 19));\nloop invariant i49: (i + (j + k)) > (2 * (i - 20));\nloop invariant i50: (i + (j + k)) > (2 * (i - 21));\nloop invariant i51: (i + (j + k)) > (2 * (i - 22));\nloop invariant i52: (i + (j + k)) > (2 * (i - 23));\nloop invariant i53: (i + (j + k)) > (2 * (i - 24));\nloop invariant i54: (i + (j + k)) > (2 * (i - 25));\nloop invariant i55: (i + (j + k)) > (2 * (i - 26));\nloop invariant i56: (i + (j + k)) > (2 * (i - 27));\nloop invariant i57: (i + (j + k)) > (2 * (i - 28));\nloop invariant i58: (i + (j + k)) > (2 * (i - 29));\nloop invariant i59: (i + (j + k)) > (2 * (i - 30));\nloop invariant i60: (i + (j + k)) > (2 * (i - 31));\nloop invariant i61: (i + (j + k)) > (2 * (i - 32));\nloop invariant i62: (i + (j + k)) > (2 * (i - 33));\nloop invariant i63: (i + (j + k)) > (2 * (i - 34));\nloop invariant i64: (i + (j + k)) > (2 * (i - 35));\nloop invariant i65: 0 <= j <= (i * (i + 1) / 2);\nloop invariant i66: (i + (j + k)) > (2 * n) ==> ((i + (j + k)) > (2 * n));\nloop invariant i67: i = j - i;\nloop invariant i68: ( i <= n );\nloop invariant i69: ( j >= 0 );\nloop invariant i70: ( j <= i * (i + 1)/2 );\nloop invariant i71: ( i + j + k > 2 * n );\nloop invariant i72: j >= i * (i - 1) / 2;\nloop invariant i73: i + j + k > 2 * n ==> i + j + k == 2 * n;\nloop invariant i74: k <= j <= (n * (n + 1) / 2);\nloop invariant i75: 0 <= j <= n * (n + 1) / 2;\nloop invariant i76: i + j >= n * (n + 1) / 2;\nloop invariant i77: i + j + k > 2 * n;\nloop invariant i78: 0 <= j <= (n * (n + 1) / 2 + k);\nloop invariant i79: i <= n + 1;\nloop invariant i80: (i + (j + k)) > (2 * n) ==> n >= i;\nloop invariant i81: (i + (j + k)) > (2 * n) ==> j >= (i * (i + 1) / 2);\nloop invariant i82: (i + (j + k)) > (2 * n) ==> k >= 0;\nloop invariant i83: 0 <= j <= (n * (n + 1) / 2);\nloop invariant i84: (i <= n);\nloop invariant i85: (j <= (n * (n + 1) / 2));\nloop invariant i86: (i + (j + k) > (2 * n));\nloop invariant i87: 0 <= j <= i * (i + 1) / 2;\nloop invariant i88: ((i + (j + k)) > (2 * n)) ==> (i + j + k > 2 * n);\nloop invariant i89: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0);\nloop invariant i90: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i91: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i92: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i93: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i94: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i95: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i96: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i97: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i98: (j + k) <= (1 + (i - 1) * i / 2);\nloop invariant i99: i + j + k > 2 * n ==> i > n;\nloop invariant i100: i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i101: i + j + k > 2 * n ==> i + j + k > 2 * n;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: i + j >= (i + (i - 1) * i / 2);\nloop invariant i7: i + j >= (i + i * i / 2);\nloop invariant i8: i + j >= (i + (i * i + i) / 2);\nloop invariant i9: i + j >= (i + (i * (i + 1)) / 2);\nloop invariant i10: i + j >= (i + (i * (i + 1) / 2));\nloop invariant i11: j >= (i * (i - 1)) / 2;\nloop invariant i12: j <= (i * (i + 1)) / 2;\nloop invariant i13: j >= 0;\n\nloop invariant i15: i >= 0;\n\n\n\n\n\n\n\nloop invariant i23: i <= (n + 1);\nloop invariant i24: j >= (i * (i - 1) / 2);\nloop invariant i25: j <= ((i + 1) * (i + 2) / 2);\nloop invariant i26: (j + k) >= (i * (i - 1) / 2);\n\nloop invariant i28: (i + (j + k)) >= (i * (i - 1) / 2);\n\nloop invariant i30: (i + (j + k)) > (2 * (i - 1));\nloop invariant i31: (i + (j + k)) > (2 * (i - 2));\nloop invariant i32: (i + (j + k)) > (2 * (i - 3));\nloop invariant i33: (i + (j + k)) > (2 * (i - 4));\nloop invariant i34: (i + (j + k)) > (2 * (i - 5));\nloop invariant i35: (i + (j + k)) > (2 * (i - 6));\nloop invariant i36: (i + (j + k)) > (2 * (i - 7));\nloop invariant i37: (i + (j + k)) > (2 * (i - 8));\nloop invariant i38: (i + (j + k)) > (2 * (i - 9));\nloop invariant i39: (i + (j + k)) > (2 * (i - 10));\nloop invariant i40: (i + (j + k)) > (2 * (i - 11));\nloop invariant i41: (i + (j + k)) > (2 * (i - 12));\nloop invariant i42: (i + (j + k)) > (2 * (i - 13));\nloop invariant i43: (i + (j + k)) > (2 * (i - 14));\nloop invariant i44: (i + (j + k)) > (2 * (i - 15));\nloop invariant i45: (i + (j + k)) > (2 * (i - 16));\nloop invariant i46: (i + (j + k)) > (2 * (i - 17));\nloop invariant i47: (i + (j + k)) > (2 * (i - 18));\nloop invariant i48: (i + (j + k)) > (2 * (i - 19));\nloop invariant i49: (i + (j + k)) > (2 * (i - 20));\nloop invariant i50: (i + (j + k)) > (2 * (i - 21));\nloop invariant i51: (i + (j + k)) > (2 * (i - 22));\nloop invariant i52: (i + (j + k)) > (2 * (i - 23));\nloop invariant i53: (i + (j + k)) > (2 * (i - 24));\nloop invariant i54: (i + (j + k)) > (2 * (i - 25));\nloop invariant i55: (i + (j + k)) > (2 * (i - 26));\nloop invariant i56: (i + (j + k)) > (2 * (i - 27));\nloop invariant i57: (i + (j + k)) > (2 * (i - 28));\nloop invariant i58: (i + (j + k)) > (2 * (i - 29));\nloop invariant i59: (i + (j + k)) > (2 * (i - 30));\nloop invariant i60: (i + (j + k)) > (2 * (i - 31));\nloop invariant i61: (i + (j + k)) > (2 * (i - 32));\nloop invariant i62: (i + (j + k)) > (2 * (i - 33));\nloop invariant i63: (i + (j + k)) > (2 * (i - 34));\nloop invariant i64: (i + (j + k)) > (2 * (i - 35));\nloop invariant i65: 0 <= j <= (i * (i + 1) / 2);\nloop invariant i66: (i + (j + k)) > (2 * n) ==> ((i + (j + k)) > (2 * n));\n\n\nloop invariant i69: ( j >= 0 );\nloop invariant i70: ( j <= i * (i + 1)/2 );\n\nloop invariant i72: j >= i * (i - 1) / 2;\n\n\n\n\n\n\nloop invariant i79: i <= n + 1;\n\nloop invariant i81: (i + (j + k)) > (2 * n) ==> j >= (i * (i + 1) / 2);\n\n\n\n\n\nloop invariant i87: 0 <= j <= i * (i + 1) / 2;\nloop invariant i88: ((i + (j + k)) > (2 * n)) ==> (i + j + k > 2 * n);\nloop invariant i89: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0);\nloop invariant i90: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i91: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i92: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i93: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i94: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i95: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i96: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\nloop invariant i97: ((i + (j + k)) > (2 * n)) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k - 2 * n > 0) ==> (i + j + k > 2 * n);\n\n\nloop invariant i100: i + j + k > 2 * n ==> i + (j + k) > 2 * n;\nloop invariant i101: i + j + k > 2 * n ==> i + j + k > 2 * n;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 80,
        "success_count": 70,
        "failure_count": 10,
        "success_rate": 0.875
    }
}