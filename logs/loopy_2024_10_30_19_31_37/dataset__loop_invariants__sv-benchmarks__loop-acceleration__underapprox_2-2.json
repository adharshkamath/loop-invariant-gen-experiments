{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= 6;\nloop invariant y == (1 << x);\nloop invariant (x < 6) ==> (x == 0);\n*/\n```",
            "```\n/*@\nloop invariant y > x;\nloop invariant y <= 7;\nloop invariant x <= 6;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x == y / 2;\nloop invariant x + y == 6 + 64;\nloop invariant x + y == 70;\nloop invariant x + y == 70;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant 1 <= y <= 64;\nloop invariant x + 1 == y / 2;\nloop invariant x * 2 == y;\nloop invariant y % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x >= 0;\nloop invariant y >= 1;\nloop invariant x < y;\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant 1 <= y <= 64;\nloop invariant x == (y / 2 - 1);\nloop invariant y == (1 << x);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant y = (1 << x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x + 1 <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 128;\nloop invariant x <= 6;\nloop invariant y <= 128;\nloop invariant x == y / 2;\nloop invariant x == y >> 1;\nloop invariant x == (unsigned int)(y >> 1);\nloop invariant x == y / 2;\nloop invariant x == y >> 1;\nloop invariant x == (unsigned int)(y >> 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant 1 <= y <= 32;\nloop invariant y == (1 << x);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x <= 6;\nloop invariant y >= 2 ^ x;\nloop invariant y <= 2 ^ (x + 1);\nloop invariant y == 2 ^ x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 2^x <= y < 2^(x+1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant y == 2 ^ x;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x >= 0 ==> y >= 1;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 6;\nloop invariant y == (1 << x);\nloop invariant (x < 6) ==> (x == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\n\nloop invariant i2: y == (1 << x);\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant y > x;\nloop invariant y <= 7;\nloop invariant x <= 6;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\n\n\nloop invariant i3: x <= 6;\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x == y / 2;\nloop invariant x + y == 6 + 64;\nloop invariant x + y == 70;\nloop invariant x + y == 70;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant 1 <= y <= 64;\nloop invariant x + 1 == y / 2;\nloop invariant x * 2 == y;\nloop invariant y % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x >= 0;\nloop invariant y >= 1;\nloop invariant x < y;\nloop invariant x + 1 == y;\nloop invariant x + 1 == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\nloop invariant i3: x >= 0;\n\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant 1 <= y <= 64;\nloop invariant x == (y / 2 - 1);\nloop invariant y == (1 << x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\n\n\n\nloop invariant i4: y == (1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant y = (1 << x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x + 1 <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\nloop invariant x * 2 ^ (x + 1) <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 1 <= y <= 128;\nloop invariant x <= 6;\nloop invariant y <= 128;\nloop invariant x == y / 2;\nloop invariant x == y >> 1;\nloop invariant x == (unsigned int)(y >> 1);\nloop invariant x == y / 2;\nloop invariant x == y >> 1;\nloop invariant x == (unsigned int)(y >> 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\nloop invariant i3: x <= 6;\n\n\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 5;\nloop invariant 1 <= y <= 32;\nloop invariant y == (1 << x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\n\n\nloop invariant i3: y == (1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 6;\nloop invariant 1 <= y <= 64;\nloop invariant x <= 6;\nloop invariant y >= 2 ^ x;\nloop invariant y <= 2 ^ (x + 1);\nloop invariant y == 2 ^ x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\n\n\nloop invariant i3: x <= 6;\n\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant 2^x <= y < 2^(x+1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 6;\nloop invariant y == 2 ^ x;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x >= 0 ==> y >= 1;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\nloop invariant x < 6 ==> y < 65536;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\n\n\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 33: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 1 <= x <= 6;\nloop invariant i2: y == (1 << x);\nloop invariant i3: (x < 6) ==> (x == 0);\nloop invariant i4: y > x;\nloop invariant i5: y <= 7;\nloop invariant i6: x <= 6;\nloop invariant i7: 0 <= x <= 6;\nloop invariant i8: 1 <= y <= 64;\nloop invariant i9: x == y / 2;\nloop invariant i10: x + y == 6 + 64;\nloop invariant i11: x + y == 70;\nloop invariant i12: x <= y;\nloop invariant i13: 0 <= x <= 5;\nloop invariant i14: x + 1 == y / 2;\nloop invariant i15: x * 2 == y;\nloop invariant i16: y % 2 == 0;\nloop invariant i17: x >= 0;\nloop invariant i18: y >= 1;\nloop invariant i19: x < y;\nloop invariant i20: x + 1 == y;\nloop invariant i21: x == (y / 2 - 1);\nloop invariant i22: y = (1 << x);\nloop invariant i23: x + 1 <= y;\nloop invariant i24: x * 2 ^ (x + 1) <= y;\nloop invariant i25: 1 <= y <= 128;\nloop invariant i26: y <= 128;\nloop invariant i27: x == y >> 1;\nloop invariant i28: x == (unsigned int)(y >> 1);\nloop invariant i29: 1 <= y <= 32;\nloop invariant i30: y >= 2 ^ x;\nloop invariant i31: y <= 2 ^ (x + 1);\nloop invariant i32: y == 2 ^ x;\nloop invariant i33: 2^x <= y < 2^(x+1);\nloop invariant i34: x < 6 ==> y < 65536;\nloop invariant i35: x >= 0 ==> y >= 1;\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
        "combined_annotation_num_solver_calls": 25,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\n\nloop invariant i2: y == (1 << x);\n\nloop invariant i4: y > x;\n\nloop invariant i6: x <= 6;\nloop invariant i7: 0 <= x <= 6;\n\n\n\n\nloop invariant i12: x <= y;\n\n\n\n\nloop invariant i17: x >= 0;\nloop invariant i18: y >= 1;\nloop invariant i19: x < y;\n\n\n\nloop invariant i23: x + 1 <= y;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: x >= 0 ==> y >= 1;\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 95,
        "success_count": 85,
        "failure_count": 10,
        "success_rate": 0.8947368421052632
    }
}