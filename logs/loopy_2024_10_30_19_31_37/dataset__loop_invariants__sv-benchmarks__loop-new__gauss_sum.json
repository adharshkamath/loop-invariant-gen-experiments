{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    for(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= (i * (i + 1)) / 2;\nloop invariant sum <= ((n + 1) * n) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum >= i * (i-1) / 2;\nloop invariant sum <= (n * (n+1))/2;\nloop invariant sum + i >= (n * (n+1))/2;\nloop invariant sum + i <= sum + n;\nloop invariant sum + i <= (n * (n+1))/2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum == (i * (i - 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= sum <= n*(n+1)/2;\nloop invariant sum == i*(i+1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n <= 1000;\nloop invariant n is an integer;\nloop invariant sum is an integer;\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant i is an integer;\nloop invariant 1 <= i <= n;\nloop invariant sum = i*(i+1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant 1 <= n <= 1000;\nloop invariant 1 <= i <= n+1;\nloop invariant i <= n ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i <= n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= i * (i - 1) / 2;\nloop invariant (i <= n ==> sum >= i * (i + 1) / 2);\nloop invariant (i > n ==> sum == n * (n + 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum >= (i * (i - 1) / 2);\nloop invariant sum <= (i * (i + 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant Pre(n) ? i == 1 : i <= n;\nloop invariant Pre(n) ? sum == 0 : sum == (i * (i - 1)) / 2;\nloop invariant i == 1 ==> sum == 0;\nloop invariant i <= n ==> sum == (i * (i - 1)) / 2;\nloop invariant i <= n ==> sum == (i * (i - 1)) / 2;\nloop invariant i <= n ==> sum == (i * (i - 1)) / 2;\nloop invariant i == 1 ==> sum == 0;\nloop invariant i <= n ==> sum == (i * (i - 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n + 1) / 2);\nloop invariant sum == (i * (i + 1) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sum <= i*(i+1)/2;\nloop invariant n <= n;\nloop invariant 2*sum == i*(i+1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n <= 1000;\nloop invariant 0 <= sum <= (n+1)*n/2;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant n - i + 1 + sum == n*(n+1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant 1 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= n*(n+1)/2;\nloop invariant i <= sum;\nloop invariant sum <= n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant 0 <= i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum == (i*(i-1))/2;\nloop invariant sum + i*(n-i+1) == n*(n+1)/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sum <= (n * (n + 1)) / 2;\nloop invariant 1 <= n <= 1000;\nloop invariant 1 <= i <= n;\nloop invariant sum >= (i * (i - 1)) / 2;\nloop invariant sum <= ((i + 1) * i) / 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= (i * (i + 1)) / 2;\nloop invariant sum <= ((n + 1) * n) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum >= i * (i-1) / 2;\nloop invariant sum <= (n * (n+1))/2;\nloop invariant sum + i >= (n * (n+1))/2;\nloop invariant sum + i <= sum + n;\nloop invariant sum + i <= (n * (n+1))/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\nloop invariant i2: sum >= i * (i-1) / 2;\n\n\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum == (i * (i - 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\nloop invariant i2: sum == (i * (i - 1)) / 2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= sum <= n*(n+1)/2;\nloop invariant sum == i*(i+1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= n <= 1000;\nloop invariant n is an integer;\nloop invariant sum is an integer;\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant i is an integer;\nloop invariant 1 <= i <= n;\nloop invariant sum = i*(i+1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 1 <= n <= 1000;\n\n\n\n\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= sum <= n*(n+1)/2;\nloop invariant 1 <= n <= 1000;\nloop invariant 1 <= i <= n+1;\nloop invariant i <= n ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i <= n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\nloop invariant i2: 1 <= n <= 1000;\nloop invariant i3: 1 <= i <= n+1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sum >= i * (i - 1) / 2;\nloop invariant (i <= n ==> sum >= i * (i + 1) / 2);\nloop invariant (i > n ==> sum == n * (n + 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\nloop invariant i2: sum >= i * (i - 1) / 2;\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum >= (i * (i - 1) / 2);\nloop invariant sum <= (i * (i + 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\nloop invariant i2: sum >= (i * (i - 1) / 2);\nloop invariant i3: sum <= (i * (i + 1) / 2);\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant Pre(n) ? i == 1 : i <= n;\nloop invariant Pre(n) ? sum == 0 : sum == (i * (i - 1)) / 2;\nloop invariant i == 1 ==> sum == 0;\nloop invariant i <= n ==> sum == (i * (i - 1)) / 2;\nloop invariant i <= n ==> sum == (i * (i - 1)) / 2;\nloop invariant i <= n ==> sum == (i * (i - 1)) / 2;\nloop invariant i == 1 ==> sum == 0;\nloop invariant i <= n ==> sum == (i * (i - 1)) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\nloop invariant i3: i == 1 ==> sum == 0;\nloop invariant i4: i <= n ==> sum == (i * (i - 1)) / 2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant 0 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= (n * (n + 1) / 2);\nloop invariant sum == (i * (i + 1) / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 0 <= n <= 1000;\n\n\n\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sum <= i*(i+1)/2;\nloop invariant n <= n;\nloop invariant 2*sum == i*(i+1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\nloop invariant i3: n <= n;\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= n <= 1000;\nloop invariant 0 <= sum <= (n+1)*n/2;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant n - i + 1 + sum == n*(n+1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 1 <= n <= 1000;\n\nloop invariant i3: i >= 1;\nloop invariant i4: i <= n+1;\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant 1 <= i <= n;\nloop invariant sum >= 0;\nloop invariant sum <= n*(n+1)/2;\nloop invariant i <= sum;\nloop invariant sum <= n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant 0 <= i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\nloop invariant 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i <= n ==> i <= n*(n+1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 0 <= n <= 1000;\n\n\n\n\n\n\nloop invariant i8: i <= n ==> i <= n*(n+1)/2;\nloop invariant i9: 0 <= i <= n ==> i <= n*(n+1)/2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sum == (i*(i-1))/2;\nloop invariant sum + i*(n-i+1) == n*(n+1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\nloop invariant i2: sum == (i*(i-1))/2;\n\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sum <= (n * (n + 1)) / 2;\nloop invariant 1 <= n <= 1000;\nloop invariant 1 <= i <= n;\nloop invariant sum >= (i * (i - 1)) / 2;\nloop invariant sum <= ((i + 1) * i) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\nloop invariant i2: 1 <= n <= 1000;\n\nloop invariant i4: sum >= (i * (i - 1)) / 2;\nloop invariant i5: sum <= ((i + 1) * i) / 2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 28: unexpected token 'is'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sum >= (i * (i + 1)) / 2;\nloop invariant i3: sum <= ((n + 1) * n) / 2;\nloop invariant i4: 1 <= i <= n;\nloop invariant i5: sum >= i * (i-1) / 2;\nloop invariant i6: sum <= (n * (n+1))/2;\nloop invariant i7: sum + i >= (n * (n+1))/2;\nloop invariant i8: sum + i <= sum + n;\nloop invariant i9: sum + i <= (n * (n+1))/2;\nloop invariant i10: sum == (i * (i - 1)) / 2;\nloop invariant i11: 1 <= sum <= n*(n+1)/2;\nloop invariant i12: sum == i*(i+1)/2;\nloop invariant i13: 1 <= n <= 1000;\nloop invariant i14: n is an integer;\nloop invariant i15: sum is an integer;\nloop invariant i16: 0 <= sum <= n*(n+1)/2;\nloop invariant i17: i is an integer;\nloop invariant i18: sum = i*(i+1)/2;\nloop invariant i19: 1 <= i <= n+1;\nloop invariant i20: i <= n ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i21: i > n ==> sum == n*(n+1)/2;\nloop invariant i22: i > n ==> i <= n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i23: i > n ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i24: i > n ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i25: i > n ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i26: i > n ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i27: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i28: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i29: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i30: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i31: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i32: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i33: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i34: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\nloop invariant i35: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum + i == n*(n+1)/2 + (i-1)*(n+1)/2;\nloop invariant i36: sum >= i * (i - 1) / 2;\nloop invariant i37: (i <= n ==> sum >= i * (i + 1) / 2);\nloop invariant i38: (i > n ==> sum == n * (n + 1) / 2);\nloop invariant i39: sum >= (i * (i - 1) / 2);\nloop invariant i40: sum <= (i * (i + 1) / 2);\nloop invariant i41: Pre(n) ? i == 1 : i <= n;\nloop invariant i42: Pre(n) ? sum == 0 : sum == (i * (i - 1)) / 2;\nloop invariant i43: i == 1 ==> sum == 0;\nloop invariant i44: i <= n ==> sum == (i * (i - 1)) / 2;\nloop invariant i45: 0 <= n <= 1000;\nloop invariant i46: sum >= 0;\nloop invariant i47: sum <= (n * (n + 1) / 2);\nloop invariant i48: sum == (i * (i + 1) / 2);\nloop invariant i49: 0 <= sum <= i*(i+1)/2;\nloop invariant i50: n <= n;\nloop invariant i51: 2*sum == i*(i+1)/2;\nloop invariant i52: 0 <= sum <= (n+1)*n/2;\nloop invariant i53: i >= 1;\nloop invariant i54: i <= n+1;\nloop invariant i55: n - i + 1 + sum == n*(n+1)/2;\nloop invariant i56: sum <= n*(n+1)/2;\nloop invariant i57: i <= sum;\nloop invariant i58: n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\nloop invariant i59: 0 <= sum <= n*(n+1)/2 ==> sum == n*(n+1)/2;\nloop invariant i60: i <= n ==> i <= n*(n+1)/2;\nloop invariant i61: 0 <= i <= n ==> i <= n*(n+1)/2;\nloop invariant i62: sum == (i*(i-1))/2;\nloop invariant i63: sum + i*(n-i+1) == n*(n+1)/2;\nloop invariant i64: 0 <= sum <= (n * (n + 1)) / 2;\nloop invariant i65: sum >= (i * (i - 1)) / 2;\nloop invariant i66: sum <= ((i + 1) * i) / 2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 26,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    /*@\n\n\nloop invariant i3: sum <= ((n + 1) * n) / 2;\n\nloop invariant i5: sum >= i * (i-1) / 2;\nloop invariant i6: sum <= (n * (n+1))/2;\n\n\n\nloop invariant i10: sum == (i * (i - 1)) / 2;\n\n\nloop invariant i13: 1 <= n <= 1000;\n\n\nloop invariant i16: 0 <= sum <= n*(n+1)/2;\n\n\nloop invariant i19: 1 <= i <= n+1;\n\nloop invariant i21: i > n ==> sum == n*(n+1)/2;\n\nloop invariant i23: i > n ==> i == n+1 ==> sum == n*(n+1)/2;\n\n\nloop invariant i26: i > n ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\n\nloop invariant i28: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\n\nloop invariant i30: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\n\nloop invariant i32: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\n\nloop invariant i34: i > n ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> i == n+1 ==> sum == n*(n+1)/2;\n\nloop invariant i36: sum >= i * (i - 1) / 2;\n\nloop invariant i38: (i > n ==> sum == n * (n + 1) / 2);\nloop invariant i39: sum >= (i * (i - 1) / 2);\nloop invariant i40: sum <= (i * (i + 1) / 2);\n\n\nloop invariant i43: i == 1 ==> sum == 0;\nloop invariant i44: i <= n ==> sum == (i * (i - 1)) / 2;\nloop invariant i45: 0 <= n <= 1000;\nloop invariant i46: sum >= 0;\nloop invariant i47: sum <= (n * (n + 1) / 2);\n\nloop invariant i49: 0 <= sum <= i*(i+1)/2;\nloop invariant i50: n <= n;\n\nloop invariant i52: 0 <= sum <= (n+1)*n/2;\nloop invariant i53: i >= 1;\nloop invariant i54: i <= n+1;\n\nloop invariant i56: sum <= n*(n+1)/2;\n\nloop invariant i58: n*(n+1)/2 <= sum ==> sum == n*(n+1)/2;\n\nloop invariant i60: i <= n ==> i <= n*(n+1)/2;\nloop invariant i61: 0 <= i <= n ==> i <= n*(n+1)/2;\nloop invariant i62: sum == (i*(i-1))/2;\n\nloop invariant i64: 0 <= sum <= (n * (n + 1)) / 2;\nloop invariant i65: sum >= (i * (i - 1)) / 2;\nloop invariant i66: sum <= ((i + 1) * i) / 2;\n*/\nfor(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c"
        ],
        "skipped": [],
        "total": 121,
        "success_count": 105,
        "failure_count": 16,
        "success_rate": 0.8677685950413223
    }
}