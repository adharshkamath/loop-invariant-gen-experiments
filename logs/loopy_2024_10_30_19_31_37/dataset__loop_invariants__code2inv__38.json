{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/38.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    while (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c;\nloop invariant c <= n;\nloop invariant 1 <= n;\nloop invariant if c == n then c >= 0 else c == c + 1 ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c && c <= n;\nloop invariant c == n ==> unknown() == false;\nloop invariant unknown() ==> c == 1 || c == n;\nloop invariant c == n ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> true;\nloop invariant c == n ==> unknown() ==> true;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> unknown() == false;\nloop invariant c <= n ==> unknown() == true;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == 1 ==> n == 1;\nloop invariant (c != n) ==> (c >= 1 && c < n);\n*/\n```",
            "```\n/*@\nloop invariant n > 0;\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c == n ==> c == 1;\nloop invariant unknown() ==> true;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n; loop invariant unknown() ==> c == n; loop invariant !unknown() ==> c < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n ==> c >= 0);\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= n - 1 ==> c == 0;\nloop invariant c <= n - 1 ==> c == 1;\nloop invariant c <= n - 1 ==> c == 2;\nloop invariant c <= n - 1 ==> c == n - 1;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n - 1;\nloop invariant c == n ==> c == n - 2;\nloop invariant c == n ==> c == 1;\nloop invariant c == n ==> c == 0;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant if c == n then c >= 1 else c < n;\nloop invariant if c == n then c == 1 else c == c + 1;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c else c == c + 1;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == (n + 1) ==> n >= 0;\nloop invariant c == (n + 1) ==> n < 0 ==> c == 0;\nloop invariant c == (n + 1) ==> c == 0 ==> n >= 0;\nloop invariant c == (n + 1) ==> c == 0 ==> n < 0 ==> c == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c != n ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if c == n then c >= 0 else c < n;\nloop invariant c == n ==> c >= 0;\nloop invariant c < n ==> c < n;\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c == n) ==> c == 0;\nloop invariant (c < n) ==> c >= 0;\nloop invariant (c >= n) ==> c == n;\nloop invariant (c <= n) ==> c <= n;\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= c;\nloop invariant c <= n;\nloop invariant 1 <= n;\nloop invariant if c == n then c >= 0 else c == c + 1 ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\nloop invariant i2: c <= n;\nloop invariant i3: 1 <= n;\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= c && c <= n;\nloop invariant c == n ==> unknown() == false;\nloop invariant unknown() ==> c == 1 || c == n;\nloop invariant c == n ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> true;\nloop invariant c == n ==> unknown() ==> true;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\nloop invariant c == 1 ==> unknown() ==> false;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == n ==> unknown() == false;\nloop invariant c <= n ==> unknown() == true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == 1 ==> n == 1;\nloop invariant (c != n) ==> (c >= 1 && c < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant n > 0;\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c == n ==> c == 1;\nloop invariant unknown() ==> true;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: n > 0;\nloop invariant i2: 0 <= c <= n;\nloop invariant i3: c <= n;\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n; loop invariant unknown() ==> c == n; loop invariant !unknown() ==> c < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n ==> c >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= n - 1 ==> c == 0;\nloop invariant c <= n - 1 ==> c == 1;\nloop invariant c <= n - 1 ==> c == 2;\nloop invariant c <= n - 1 ==> c == n - 1;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c == n - 1;\nloop invariant c == n ==> c == n - 2;\nloop invariant c == n ==> c == 1;\nloop invariant c == n ==> c == 0;\nloop invariant c == n ==> c == n;\nloop invariant c == n ==> c <= n;\nloop invariant c == n ==> c >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: c >= 0;\n\n\n\n\n\nloop invariant i7: c == n ==> c == n;\n\n\n\n\nloop invariant i12: c == n ==> c <= n;\nloop invariant i13: c == n ==> c >= 0;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant if c == n then c >= 1 else c < n;\nloop invariant if c == n then c == 1 else c == c + 1;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c else c == c + 1;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\nloop invariant if c == n then c == c + 1 else c == c;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: 1 <= n;\nloop invariant i2: 0 <= c;\nloop invariant i3: c <= n;\n\n\n\n\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c == (n + 1) ==> n >= 0;\nloop invariant c == (n + 1) ==> n < 0 ==> c == 0;\nloop invariant c == (n + 1) ==> c == 0 ==> n >= 0;\nloop invariant c == (n + 1) ==> c == 0 ==> n < 0 ==> c == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\nloop invariant i2: c == (n + 1) ==> n >= 0;\nloop invariant i3: c == (n + 1) ==> n < 0 ==> c == 0;\nloop invariant i4: c == (n + 1) ==> c == 0 ==> n >= 0;\nloop invariant i5: c == (n + 1) ==> c == 0 ==> n < 0 ==> c == 0;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c != n ==> c == 1;\nloop invariant c == n ==> c == n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\nloop invariant c == n ==> c > 0;\nloop invariant c != n ==> c >= 0;\nloop invariant c == n ==> c >= 0;\nloop invariant c != n ==> c <= n;\nloop invariant c == n ==> c <= n;\nloop invariant c != n ==> c < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: c <= n;\nloop invariant i3: c >= 0;\n\nloop invariant i5: c == n ==> c == n;\nloop invariant i6: c != n ==> c < n;\nloop invariant i7: c == n ==> c > 0;\nloop invariant i8: c != n ==> c >= 0;\nloop invariant i9: c == n ==> c >= 0;\nloop invariant i10: c != n ==> c <= n;\nloop invariant i11: c == n ==> c <= n;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant if c == n then c >= 0 else c < n;\nloop invariant c == n ==> c >= 0;\nloop invariant c < n ==> c < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\n\nloop invariant i4: c < n ==> c < n;\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c == n) ==> c == 0;\nloop invariant (c < n) ==> c >= 0;\nloop invariant (c >= n) ==> c == n;\nloop invariant (c <= n) ==> c <= n;\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\nloop invariant (c >= n) ==> (c == n);\nloop invariant (c <= n) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c < n) ==> (c < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: c >= 0;\n\n\nloop invariant i4: (c < n) ==> c >= 0;\n\nloop invariant i6: (c <= n) ==> c <= n;\n\nloop invariant i8: (c < n) ==> (c < n);\n\nloop invariant i10: (c <= n) ==> (c <= n);\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: unexpected token 'c'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\nloop invariant i1: 1 <= c <= n;\nloop invariant i2: 1 <= c;\nloop invariant i3: c <= n;\nloop invariant i4: 1 <= n;\nloop invariant i5: if c == n then c >= 0 else c == c + 1 ==> c >= 0;\nloop invariant i6: 1 <= c && c <= n;\nloop invariant i7: c == n ==> unknown() == false;\nloop invariant i8: unknown() ==> c == 1 || c == n;\nloop invariant i9: c == n ==> unknown() ==> false;\nloop invariant i10: c == 1 ==> unknown() ==> true;\nloop invariant i11: c == n ==> unknown() ==> true;\nloop invariant i12: c == 1 ==> unknown() ==> false;\nloop invariant i13: 0 <= c <= n;\nloop invariant i14: c <= n ==> unknown() == true;\nloop invariant i15: c == 1 ==> n == 1;\nloop invariant i16: (c != n) ==> (c >= 1 && c < n);\nloop invariant i17: n > 0;\nloop invariant i18: c == n ==> c == 1;\nloop invariant i19: unknown() ==> true;\nloop invariant i20: 0 <= c <= n; loop invariant unknown() ==> c == n; loop invariant !unknown() ==> c < n;\nloop invariant i21: (c == n ==> c >= 0);\nloop invariant i22: c >= 0;\nloop invariant i23: c <= n - 1 ==> c == 0;\nloop invariant i24: c <= n - 1 ==> c == 1;\nloop invariant i25: c <= n - 1 ==> c == 2;\nloop invariant i26: c <= n - 1 ==> c == n - 1;\nloop invariant i27: c == n ==> c == n;\nloop invariant i28: c == n ==> c == n - 1;\nloop invariant i29: c == n ==> c == n - 2;\nloop invariant i30: c == n ==> c == 0;\nloop invariant i31: c == n ==> c <= n;\nloop invariant i32: c == n ==> c >= 0;\nloop invariant i33: 0 <= c;\nloop invariant i34: if c == n then c >= 1 else c < n;\nloop invariant i35: if c == n then c == 1 else c == c + 1;\nloop invariant i36: if c == n then c == c + 1 else c == c;\nloop invariant i37: if c == n then c == c else c == c + 1;\nloop invariant i38: c == (n + 1) ==> n >= 0;\nloop invariant i39: c == (n + 1) ==> n < 0 ==> c == 0;\nloop invariant i40: c == (n + 1) ==> c == 0 ==> n >= 0;\nloop invariant i41: c == (n + 1) ==> c == 0 ==> n < 0 ==> c == 0;\nloop invariant i42: c != n ==> c == 1;\nloop invariant i43: c != n ==> c < n;\nloop invariant i44: c == n ==> c > 0;\nloop invariant i45: c != n ==> c >= 0;\nloop invariant i46: c != n ==> c <= n;\nloop invariant i47: if c == n then c >= 0 else c < n;\nloop invariant i48: c < n ==> c < n;\nloop invariant i49: (c == n) ==> c == 0;\nloop invariant i50: (c < n) ==> c >= 0;\nloop invariant i51: (c >= n) ==> c == n;\nloop invariant i52: (c <= n) ==> c <= n;\nloop invariant i53: (c == n) ==> (c == 1);\nloop invariant i54: (c < n) ==> (c < n);\nloop invariant i55: (c >= n) ==> (c == n);\nloop invariant i56: (c <= n) ==> (c <= n);\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 28,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    /*@\n\n\nloop invariant i3: c <= n;\nloop invariant i4: 1 <= n;\n\n\n\n\n\n\n\n\nloop invariant i13: 0 <= c <= n;\n\n\n\nloop invariant i17: n > 0;\n\n\n\nloop invariant i21: (c == n ==> c >= 0);\nloop invariant i22: c >= 0;\n\n\n\n\nloop invariant i27: c == n ==> c == n;\n\n\n\nloop invariant i31: c == n ==> c <= n;\nloop invariant i32: c == n ==> c >= 0;\nloop invariant i33: 0 <= c;\n\n\n\n\nloop invariant i38: c == (n + 1) ==> n >= 0;\nloop invariant i39: c == (n + 1) ==> n < 0 ==> c == 0;\nloop invariant i40: c == (n + 1) ==> c == 0 ==> n >= 0;\nloop invariant i41: c == (n + 1) ==> c == 0 ==> n < 0 ==> c == 0;\n\nloop invariant i43: c != n ==> c < n;\nloop invariant i44: c == n ==> c > 0;\nloop invariant i45: c != n ==> c >= 0;\nloop invariant i46: c != n ==> c <= n;\n\nloop invariant i48: c < n ==> c < n;\n\nloop invariant i50: (c < n) ==> c >= 0;\nloop invariant i51: (c >= n) ==> c == n;\nloop invariant i52: (c <= n) ==> c <= n;\n\nloop invariant i54: (c < n) ==> (c < n);\nloop invariant i55: (c >= n) ==> (c == n);\nloop invariant i56: (c <= n) ==> (c <= n);\n*/\nwhile (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n\n    }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 29,
        "success_count": 25,
        "failure_count": 4,
        "success_rate": 0.8620689655172413
    }
}