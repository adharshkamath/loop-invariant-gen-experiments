{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  while (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant y >= x;\nloop invariant j >= i;\nloop invariant flag ==> j >= i;\nloop invariant !flag ==> j >= i;\nloop invariant i <= j;\nloop invariant j >= i;\nloop invariant i <= y;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= x;\nloop invariant j >= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant i == x * (x + 1) / 2 + j;\nloop invariant j >= i;\nloop invariant flag ==> 0;\nloop invariant !flag ==> j >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant j <= i + (x * (x + 1)) / 2;\nloop invariant i <= j + (y * (y + 1)) / 2;\nloop invariant (flag ==> j >= i + 1);\nloop invariant (flag ==> i >= j + 1);\nloop invariant (flag ==> j >= i);\nloop invariant (flag ==> i >= j);\nloop invariant (i == j ==> flag);\nloop invariant (j == i ==> flag);\nloop invariant (i < j ==> flag);\nloop invariant (j < i ==> flag);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant j >= i;\nloop invariant j >= 2;\nloop invariant i >= 0;\nloop invariant j >= x + y;\nloop invariant i >= x + y;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant j >= i;\nloop invariant flag ==> (j >= i) ==> j >= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant j >= i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant x <= j;\nloop invariant y <= i;\nloop invariant x <= y + 1;\nloop invariant y <= i - x;\nloop invariant flag ==> j >= i;\nloop invariant !flag ==> j >= i + 1;\nloop invariant j >= i + flag;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= x <= j;\nloop invariant i + x == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i <= j;\nloop invariant i <= x + j;\nloop invariant j <= x + y;\nloop invariant j <= x + y + (flag ? 1 : 0);\nloop invariant i <= x + j + (flag ? 1 : 0);\nloop invariant x <= x + j + (flag ? 1 : 0);\nloop invariant y <= x + y + (flag ? 1 : 0);\nloop invariant i <= x + j + (flag ? 1 : 0);\nloop invariant x + y <= x + j + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant j <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= x;\nloop invariant j <= y;\nloop invariant x + y >= i;\nloop invariant y + 1 >= j;\nloop invariant x + y + j >= i;\nloop invariant y + 1 + j >= i;\nloop invariant x + y + j + 1 >= i;\nloop invariant x + y + j + 1 + j >= i;\nloop invariant x + y + j + 1 + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant 0 <= i <= unknown_int() + (unknown_int() - 1) * unknown_int() / 2;\nloop invariant 0 <= j <= unknown_int() + (unknown_int() - 1) * unknown_int() / 2;\nloop invariant i == 0 ==> x == 0;\nloop invariant j == 0 ==> y == 0;\nloop invariant flag ==> j == i + 1;\nloop invariant !flag ==> j == i;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant 0 <= i < unknown_int();\nloop invariant 0 <= j < unknown_int();\nloop invariant i == x*(x+1)/2;\nloop invariant j == x*(x+1)/2 + y;\nloop invariant unknown_bool() ==> i <= j;\nloop invariant unknown_bool() ==> j >= i;\nloop invariant unknown_bool() ==> x >= 0;\nloop invariant unknown_bool() ==> y >= 0;\nloop invariant unknown_bool() ==> i < unknown_int();\nloop invariant unknown_bool() ==> j < unknown_int();\nloop invariant unknown_bool() ==> flag ==> j >= i + 1;\nloop invariant unknown_bool() ==> !flag ==> j >= i;\nloop invariant unknown_bool() ==> x == unknown_int() - y;\nloop invariant unknown_bool() ==> y == unknown_int() - x;\nloop invariant unknown_bool() ==> i == unknown_int() - j;\nloop invariant unknown_bool() ==> j == unknown_int() - i;\nloop invariant unknown_bool() ==> x == 0;\nloop invariant unknown_bool() ==> y == 0;\nloop invariant unknown_bool() ==> i == 0;\nloop invariant unknown_bool() ==> j == 0;\nloop invariant unknown_bool() ==> x == 0 ==> y == 0;\nloop invariant unknown_bool() ==> y == 0 ==> x == 0;\nloop invariant unknown_bool() ==> i == 0 ==> j == 0;\nloop invariant unknown_bool() ==> j == 0 ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant (i == x && j == y) ==> (flag ==> (j >= i));\nloop invariant (i == x && j == y) ==> (!flag ==> (j >= (i + 1)));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= unknown_int();loop invariant 0 <= j <= unknown_int();loop invariant x >= unknown_int();loop invariant y >= unknown_int();loop invariant i <= j;loop invariant x <= j;loop invariant x <= y;loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant y >= x;\nloop invariant j >= i;\nloop invariant flag ==> j >= i;\nloop invariant !flag ==> j >= i;\nloop invariant i <= j;\nloop invariant j >= i;\nloop invariant i <= y;\nloop invariant j <= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= x;\nloop invariant j >= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\nloop invariant j >= y;\nloop invariant i <= x;\nloop invariant j <= x;\nloop invariant i >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 2147483647;\nloop invariant i2: 0 <= y <= 2147483647;\nloop invariant i3: 0 <= i <= 2147483647;\nloop invariant i4: 0 <= j <= 2147483647;\nloop invariant i5: y >= x;\nloop invariant i6: j >= i;\nloop invariant i7: flag ==> j >= i;\nloop invariant i8: !flag ==> j >= i;\nloop invariant i9: i <= j;\n\n\n\n\nloop invariant i14: i >= x;\nloop invariant i15: j >= x;\nloop invariant i16: i >= y;\nloop invariant i17: j >= y;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant i == x * (x + 1) / 2 + j;\nloop invariant j >= i;\nloop invariant flag ==> 0;\nloop invariant !flag ==> j >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y;\n\nloop invariant i3: j >= i;\n\nloop invariant i5: !flag ==> j >= i;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant j <= i + (x * (x + 1)) / 2;\nloop invariant i <= j + (y * (y + 1)) / 2;\nloop invariant (flag ==> j >= i + 1);\nloop invariant (flag ==> i >= j + 1);\nloop invariant (flag ==> j >= i);\nloop invariant (flag ==> i >= j);\nloop invariant (i == j ==> flag);\nloop invariant (j == i ==> flag);\nloop invariant (i < j ==> flag);\nloop invariant (j < i ==> flag);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= x;\nloop invariant i4: 0 <= y;\nloop invariant i5: x <= i;\nloop invariant i6: y <= j;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant j >= i;\nloop invariant j >= 2;\nloop invariant i >= 0;\nloop invariant j >= x + y;\nloop invariant i >= x + y;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant i >= 0;\nloop invariant x >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\nloop invariant i3: j >= i;\n\nloop invariant i5: i >= 0;\n\n\nloop invariant i8: x >= 0;\nloop invariant i9: i <= j;\nloop invariant i10: x <= y;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant j >= i;\nloop invariant flag ==> (j >= i) ==> j >= i;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant j >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\nloop invariant i4: flag ==> (j >= i) ==> j >= i;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant x <= j;\nloop invariant y <= i;\nloop invariant x <= y + 1;\nloop invariant y <= i - x;\nloop invariant flag ==> j >= i;\nloop invariant !flag ==> j >= i + 1;\nloop invariant j >= i + flag;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n\nloop invariant i4: x <= y + 1;\n\nloop invariant i6: flag ==> j >= i;\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant 0 <= y <= j;\nloop invariant 0 <= x <= j;\nloop invariant i + x == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\nloop invariant i2: 0 <= y <= j;\nloop invariant i3: 0 <= x <= j;\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i <= j;\nloop invariant i <= x + j;\nloop invariant j <= x + y;\nloop invariant j <= x + y + (flag ? 1 : 0);\nloop invariant i <= x + j + (flag ? 1 : 0);\nloop invariant x <= x + j + (flag ? 1 : 0);\nloop invariant y <= x + y + (flag ? 1 : 0);\nloop invariant i <= x + j + (flag ? 1 : 0);\nloop invariant x + y <= x + j + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\nloop invariant x + y <= x + y + (flag ? 1 : 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= x;\nloop invariant i4: 0 <= y;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\n\n\n\n\n\nloop invariant i12: x <= x + j + (flag ? 1 : 0);\nloop invariant i13: y <= x + y + (flag ? 1 : 0);\nloop invariant i14: x + y <= x + j + (flag ? 1 : 0);\nloop invariant i15: x + y <= x + y + (flag ? 1 : 0);\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i;\nloop invariant j <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\nloop invariant x <= j;\nloop invariant j <= y;\nloop invariant x <= i;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant y <= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: x <= y;\nloop invariant i8: y <= i;\nloop invariant i9: x <= j;\n\nloop invariant i11: x <= i;\nloop invariant i12: y <= j;\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 28,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant i <= x;\nloop invariant j <= y;\nloop invariant x + y >= i;\nloop invariant y + 1 >= j;\nloop invariant x + y + j >= i;\nloop invariant y + 1 + j >= i;\nloop invariant x + y + j + 1 >= i;\nloop invariant x + y + j + 1 + j >= i;\nloop invariant x + y + j + 1 + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 2147483647;\nloop invariant i2: 0 <= y <= 2147483647;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant 0 <= i <= unknown_int() + (unknown_int() - 1) * unknown_int() / 2;\nloop invariant 0 <= j <= unknown_int() + (unknown_int() - 1) * unknown_int() / 2;\nloop invariant i == 0 ==> x == 0;\nloop invariant j == 0 ==> y == 0;\nloop invariant flag ==> j == i + 1;\nloop invariant !flag ==> j == i;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\nloop invariant unknown_int() == j ==> j == y;\nloop invariant unknown_bool() ==> true;\nloop invariant unknown_int() == i ==> i == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 30,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= unknown_int();\nloop invariant 0 <= y <= unknown_int();\nloop invariant 0 <= i < unknown_int();\nloop invariant 0 <= j < unknown_int();\nloop invariant i == x*(x+1)/2;\nloop invariant j == x*(x+1)/2 + y;\nloop invariant unknown_bool() ==> i <= j;\nloop invariant unknown_bool() ==> j >= i;\nloop invariant unknown_bool() ==> x >= 0;\nloop invariant unknown_bool() ==> y >= 0;\nloop invariant unknown_bool() ==> i < unknown_int();\nloop invariant unknown_bool() ==> j < unknown_int();\nloop invariant unknown_bool() ==> flag ==> j >= i + 1;\nloop invariant unknown_bool() ==> !flag ==> j >= i;\nloop invariant unknown_bool() ==> x == unknown_int() - y;\nloop invariant unknown_bool() ==> y == unknown_int() - x;\nloop invariant unknown_bool() ==> i == unknown_int() - j;\nloop invariant unknown_bool() ==> j == unknown_int() - i;\nloop invariant unknown_bool() ==> x == 0;\nloop invariant unknown_bool() ==> y == 0;\nloop invariant unknown_bool() ==> i == 0;\nloop invariant unknown_bool() ==> j == 0;\nloop invariant unknown_bool() ==> x == 0 ==> y == 0;\nloop invariant unknown_bool() ==> y == 0 ==> x == 0;\nloop invariant unknown_bool() ==> i == 0 ==> j == 0;\nloop invariant unknown_bool() ==> j == 0 ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant unknown_bool() ==> i == unknown_int() ==> j == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: i == x*(x+1)/2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant 0 <= j <= 2147483647;\nloop invariant 0 <= x <= 2147483647;\nloop invariant 0 <= y <= 2147483647;\nloop invariant i <= j;\nloop invariant x <= y;\nloop invariant (i == x && j == y) ==> (flag ==> (j >= i));\nloop invariant (i == x && j == y) ==> (!flag ==> (j >= (i + 1)));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 2147483647;\nloop invariant i2: 0 <= j <= 2147483647;\nloop invariant i3: 0 <= x <= 2147483647;\nloop invariant i4: 0 <= y <= 2147483647;\nloop invariant i5: i <= j;\nloop invariant i6: x <= y;\nloop invariant i7: (i == x && j == y) ==> (flag ==> (j >= i));\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= unknown_int();loop invariant 0 <= j <= unknown_int();loop invariant x >= unknown_int();loop invariant y >= unknown_int();loop invariant i <= j;loop invariant x <= j;loop invariant x <= y;loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 119: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 2147483647;\nloop invariant i2: 0 <= y <= 2147483647;\nloop invariant i3: 0 <= i <= 2147483647;\nloop invariant i4: 0 <= j <= 2147483647;\nloop invariant i5: y >= x;\nloop invariant i6: j >= i;\nloop invariant i7: flag ==> j >= i;\nloop invariant i8: !flag ==> j >= i;\nloop invariant i9: i <= j;\nloop invariant i10: i <= y;\nloop invariant i11: j <= y;\nloop invariant i12: i <= x;\nloop invariant i13: j <= x;\nloop invariant i14: i >= x;\nloop invariant i15: j >= x;\nloop invariant i16: i >= y;\nloop invariant i17: j >= y;\nloop invariant i18: 0 <= x <= y;\nloop invariant i19: i == x * (x + 1) / 2 + j;\nloop invariant i20: flag ==> 0;\nloop invariant i21: 0 <= i;\nloop invariant i22: 0 <= j;\nloop invariant i23: 0 <= x;\nloop invariant i24: 0 <= y;\nloop invariant i25: x <= i;\nloop invariant i26: y <= j;\nloop invariant i27: j <= i + (x * (x + 1)) / 2;\nloop invariant i28: i <= j + (y * (y + 1)) / 2;\nloop invariant i29: (flag ==> j >= i + 1);\nloop invariant i30: (flag ==> i >= j + 1);\nloop invariant i31: (flag ==> j >= i);\nloop invariant i32: (flag ==> i >= j);\nloop invariant i33: (i == j ==> flag);\nloop invariant i34: (j == i ==> flag);\nloop invariant i35: (i < j ==> flag);\nloop invariant i36: (j < i ==> flag);\nloop invariant i37: 0 <= x <= 1;\nloop invariant i38: 0 <= y <= 1;\nloop invariant i39: j >= 2;\nloop invariant i40: i >= 0;\nloop invariant i41: j >= x + y;\nloop invariant i42: i >= x + y;\nloop invariant i43: x >= 0;\nloop invariant i44: x <= y;\nloop invariant i45: y >= 0;\nloop invariant i46: flag ==> (j >= i) ==> j >= i;\nloop invariant i47: 1 <= x <= y;\nloop invariant i48: x <= j;\nloop invariant i49: y <= i;\nloop invariant i50: x <= y + 1;\nloop invariant i51: y <= i - x;\nloop invariant i52: !flag ==> j >= i + 1;\nloop invariant i53: j >= i + flag;\nloop invariant i54: 0 <= i <= j;\nloop invariant i55: 0 <= y <= j;\nloop invariant i56: 0 <= x <= j;\nloop invariant i57: i + x == j;\nloop invariant i58: i <= x + j;\nloop invariant i59: j <= x + y;\nloop invariant i60: j <= x + y + (flag ? 1 : 0);\nloop invariant i61: i <= x + j + (flag ? 1 : 0);\nloop invariant i62: x <= x + j + (flag ? 1 : 0);\nloop invariant i63: y <= x + y + (flag ? 1 : 0);\nloop invariant i64: x + y <= x + j + (flag ? 1 : 0);\nloop invariant i65: x + y <= x + y + (flag ? 1 : 0);\nloop invariant i66: 0 <= j <= i;\nloop invariant i67: j <= i;\nloop invariant i68: j >= 0;\nloop invariant i69: x + y >= i;\nloop invariant i70: y + 1 >= j;\nloop invariant i71: x + y + j >= i;\nloop invariant i72: y + 1 + j >= i;\nloop invariant i73: x + y + j + 1 >= i;\nloop invariant i74: x + y + j + 1 + j >= i;\nloop invariant i75: x + y + j + 1 + j + j >= i;\nloop invariant i76: x + y + j + 1 + j + j + j >= i;\nloop invariant i77: x + y + j + 1 + j + j + j + j >= i;\nloop invariant i78: x + y + j + 1 + j + j + j + j + j >= i;\nloop invariant i79: x + y + j + 1 + j + j + j + j + j + j >= i;\nloop invariant i80: x + y + j + 1 + j + j + j + j + j + j + j >= i;\nloop invariant i81: x + y + j + 1 + j + j + j + j + j + j + j + j >= i;\nloop invariant i82: x + y + j + 1 + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i83: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i84: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i85: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i86: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i87: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i88: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i89: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i90: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i91: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i92: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i93: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i94: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i95: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i96: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i97: 0 <= x <= unknown_int();\nloop invariant i98: 0 <= y <= unknown_int();\nloop invariant i99: 0 <= i <= unknown_int() + (unknown_int() - 1) * unknown_int() / 2;\nloop invariant i100: 0 <= j <= unknown_int() + (unknown_int() - 1) * unknown_int() / 2;\nloop invariant i101: i == 0 ==> x == 0;\nloop invariant i102: j == 0 ==> y == 0;\nloop invariant i103: flag ==> j == i + 1;\nloop invariant i104: !flag ==> j == i;\nloop invariant i105: unknown_bool() ==> true;\nloop invariant i106: unknown_int() == i ==> i == x;\nloop invariant i107: unknown_int() == j ==> j == y;\nloop invariant i108: 0 <= i < unknown_int();\nloop invariant i109: 0 <= j < unknown_int();\nloop invariant i110: i == x*(x+1)/2;\nloop invariant i111: j == x*(x+1)/2 + y;\nloop invariant i112: unknown_bool() ==> i <= j;\nloop invariant i113: unknown_bool() ==> j >= i;\nloop invariant i114: unknown_bool() ==> x >= 0;\nloop invariant i115: unknown_bool() ==> y >= 0;\nloop invariant i116: unknown_bool() ==> i < unknown_int();\nloop invariant i117: unknown_bool() ==> j < unknown_int();\nloop invariant i118: unknown_bool() ==> flag ==> j >= i + 1;\nloop invariant i119: unknown_bool() ==> !flag ==> j >= i;\nloop invariant i120: unknown_bool() ==> x == unknown_int() - y;\nloop invariant i121: unknown_bool() ==> y == unknown_int() - x;\nloop invariant i122: unknown_bool() ==> i == unknown_int() - j;\nloop invariant i123: unknown_bool() ==> j == unknown_int() - i;\nloop invariant i124: unknown_bool() ==> x == 0;\nloop invariant i125: unknown_bool() ==> y == 0;\nloop invariant i126: unknown_bool() ==> i == 0;\nloop invariant i127: unknown_bool() ==> j == 0;\nloop invariant i128: unknown_bool() ==> x == 0 ==> y == 0;\nloop invariant i129: unknown_bool() ==> y == 0 ==> x == 0;\nloop invariant i130: unknown_bool() ==> i == 0 ==> j == 0;\nloop invariant i131: unknown_bool() ==> j == 0 ==> i == 0;\nloop invariant i132: unknown_bool() ==> x == unknown_int() ==> y == 0;\nloop invariant i133: unknown_bool() ==> y == unknown_int() ==> x == 0;\nloop invariant i134: unknown_bool() ==> i == unknown_int() ==> j == 0;\nloop invariant i135: unknown_bool() ==> j == unknown_int() ==> i == 0;\nloop invariant i136: (i == x && j == y) ==> (flag ==> (j >= i));\nloop invariant i137: (i == x && j == y) ==> (!flag ==> (j >= (i + 1)));\nloop invariant i138: 0 <= i <= unknown_int();loop invariant 0 <= j <= unknown_int();loop invariant x >= unknown_int();loop invariant y >= unknown_int();loop invariant i <= j;loop invariant x <= j;loop invariant x <= y;loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;loop invariant j <= unknown_int();loop invariant i <= unknown_int();loop invariant y <= unknown_int();loop invariant flag ==> i <= unknown_int();loop invariant flag ==> j <= unknown_int();loop invariant i <= x;loop invariant j <= x;loop invariant y <= x;\nloop invariant i139: 0 <= y <= 100000;\nloop invariant i140: x >= (1 + (y - 1) * y / 2);\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 56,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= 2147483647;\nloop invariant i2: 0 <= y <= 2147483647;\nloop invariant i3: 0 <= i <= 2147483647;\nloop invariant i4: 0 <= j <= 2147483647;\nloop invariant i5: y >= x;\nloop invariant i6: j >= i;\nloop invariant i7: flag ==> j >= i;\nloop invariant i8: !flag ==> j >= i;\nloop invariant i9: i <= j;\n\n\n\n\nloop invariant i14: i >= x;\nloop invariant i15: j >= x;\nloop invariant i16: i >= y;\nloop invariant i17: j >= y;\nloop invariant i18: 0 <= x <= y;\n\n\nloop invariant i21: 0 <= i;\nloop invariant i22: 0 <= j;\nloop invariant i23: 0 <= x;\nloop invariant i24: 0 <= y;\nloop invariant i25: x <= i;\nloop invariant i26: y <= j;\n\nloop invariant i28: i <= j + (y * (y + 1)) / 2;\n\n\nloop invariant i31: (flag ==> j >= i);\n\n\n\n\nloop invariant i36: (j < i ==> flag);\n\n\n\nloop invariant i40: i >= 0;\n\n\nloop invariant i43: x >= 0;\nloop invariant i44: x <= y;\nloop invariant i45: y >= 0;\nloop invariant i46: flag ==> (j >= i) ==> j >= i;\n\nloop invariant i48: x <= j;\nloop invariant i49: y <= i;\nloop invariant i50: x <= y + 1;\n\n\n\nloop invariant i54: 0 <= i <= j;\nloop invariant i55: 0 <= y <= j;\nloop invariant i56: 0 <= x <= j;\n\nloop invariant i58: i <= x + j;\n\n\nloop invariant i61: i <= x + j + (flag ? 1 : 0);\nloop invariant i62: x <= x + j + (flag ? 1 : 0);\nloop invariant i63: y <= x + y + (flag ? 1 : 0);\nloop invariant i64: x + y <= x + j + (flag ? 1 : 0);\nloop invariant i65: x + y <= x + y + (flag ? 1 : 0);\n\n\nloop invariant i68: j >= 0;\n\n\nloop invariant i71: x + y + j >= i;\nloop invariant i72: y + 1 + j >= i;\nloop invariant i73: x + y + j + 1 >= i;\nloop invariant i74: x + y + j + 1 + j >= i;\nloop invariant i75: x + y + j + 1 + j + j >= i;\nloop invariant i76: x + y + j + 1 + j + j + j >= i;\nloop invariant i77: x + y + j + 1 + j + j + j + j >= i;\nloop invariant i78: x + y + j + 1 + j + j + j + j + j >= i;\nloop invariant i79: x + y + j + 1 + j + j + j + j + j + j >= i;\nloop invariant i80: x + y + j + 1 + j + j + j + j + j + j + j >= i;\nloop invariant i81: x + y + j + 1 + j + j + j + j + j + j + j + j >= i;\nloop invariant i82: x + y + j + 1 + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i83: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i84: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i85: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i86: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i87: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i88: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i89: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i90: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i91: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i92: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i93: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i94: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i95: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\nloop invariant i96: x + y + j + 1 + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j + j >= i;\n\n\n\n\nloop invariant i101: i == 0 ==> x == 0;\nloop invariant i102: j == 0 ==> y == 0;\n\n\n\n\n\n\n\nloop invariant i110: i == x*(x+1)/2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i136: (i == x && j == y) ==> (flag ==> (j >= i));\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c"
        ],
        "skipped": [],
        "total": 125,
        "success_count": 109,
        "failure_count": 16,
        "success_rate": 0.872
    }
}