{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/97.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= x;\nloop invariant j >= (i * y);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant i <= x;\nloop invariant j >= (i * (y - 1)) + (x - i);\nloop invariant j <= (x * y);\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> j == x;\nloop invariant y == 1 ==> i == x;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= x * y;\nloop invariant i <= x + 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x*y;\nloop invariant y >= 1;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= x*y;\nloop invariant i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i * y;\nloop invariant 0 <= i <= x;\nloop invariant j == y * i + (y - 1) * i / 2;\nloop invariant i <= x;\nloop invariant j <= i * y;\nloop invariant i * y == j + (y - 1) * i / 2;\nloop invariant y == 1 ==> i == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (2 * i);\nloop invariant i == j / 2;\nloop invariant j == 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= x * y;\nloop invariant i >= 0;\nloop invariant y > 0;\nloop invariant j >= i * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j <= (i * y);\nloop invariant (i == 0 || j >= (i * y));\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y * (1 + i);\nloop invariant y == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= i * x;\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant j >= i * (y - 1);\nloop invariant j <= i * (y + 1);\nloop invariant i <= j / y;\nloop invariant j >= i * y;\nloop invariant i <= j / (y + 1);\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant i <= j;\nloop invariant j <= (x + (y - 1) * i + (i * (i - 1)) / 2);\nloop invariant (y == 1) ==> (i == j);\nloop invariant (y == 1) ==> (i <= x);\nloop invariant (y == 1) ==> (j <= (x + (y - 1) * i + (i * (i - 1)) / 2));\nloop invariant (y != 1) ==> (i <= x);\nloop invariant (y != 1) ==> (j <= (x + (y - 1) * i + (i * (i - 1)) / 2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j >= 0;\nloop invariant j <= (x * y);\nloop invariant j >= i * y;\nloop invariant 0 <= i <= x;\nloop invariant j >= 0;\nloop invariant j <= (x * y);\nloop invariant j >= i * y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x * y;\nloop invariant i * y <= j;\nloop invariant i == j / y;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * y + y - 1) / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j;\nloop invariant y > 0 ==> y == 1 ==> i == (y + 1) / 2;\nloop invariant y > 0 ==> y == 1 ==> j == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> x == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> j == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> x == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == j;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == (y + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant x >= 0;\nloop invariant y >= 1;\nloop invariant x >= i;\nloop invariant j >= 0;\nloop invariant j >= i * y;\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant x >= 0;\nloop invariant y >= 1;\nloop invariant x >= i;\nloop invariant j >= 0;\nloop invariant j >= i * y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= x;\nloop invariant j >= (i * y);\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant y >= 1;\nloop invariant y <= 2;\nloop invariant i <= x;\nloop invariant j >= (i * (y - 1)) + (x - i);\nloop invariant j <= (x * y);\nloop invariant y == 1 ==> i == j;\nloop invariant y == 1 ==> j == x;\nloop invariant y == 1 ==> i == x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\nloop invariant i2: j >= (i * y);\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: y >= 1;\nloop invariant i6: y <= 2;\n\n\n\nloop invariant i10: y == 1 ==> i == j;\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant j <= x * y;\nloop invariant i <= x + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\n\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x*y;\nloop invariant y >= 1;\nloop invariant i <= j;\nloop invariant i <= x;\nloop invariant j <= x*y;\nloop invariant i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: y >= 1;\nloop invariant i4: i <= j;\n\n\n\n\nloop invariant i9: i <= j <= x*y ==> y >= 1;\nloop invariant i10: i <= j <= x*y ==> j <= x*y;\nloop invariant i11: i <= j <= x*y ==> i <= j;\nloop invariant i12: i <= j <= x*y ==> i <= j <= x*y;\n\nloop invariant i14: i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i15: i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i16: i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i17: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\n\nloop invariant i19: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i20: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i21: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i22: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\n\nloop invariant i24: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i25: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i26: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i27: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\n\nloop invariant i29: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i30: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i31: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i32: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\n\nloop invariant i34: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i35: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i36: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i37: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i * y;\nloop invariant 0 <= i <= x;\nloop invariant j == y * i + (y - 1) * i / 2;\nloop invariant i <= x;\nloop invariant j <= i * y;\nloop invariant i * y == j + (y - 1) * i / 2;\nloop invariant y == 1 ==> i == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n\nloop invariant i5: j <= i * y;\n\nloop invariant i7: y == 1 ==> i == j;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (2 * i);\nloop invariant i == j / 2;\nloop invariant j == 2 * i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= x * y;\nloop invariant i >= 0;\nloop invariant y > 0;\nloop invariant j >= i * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: y > 0;\nloop invariant i4: j >= i * y;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j <= (i * y);\nloop invariant (i == 0 || j >= (i * y));\nloop invariant y > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\nloop invariant i2: j <= (i * y);\n\nloop invariant i4: y > 0;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= y * (1 + i);\nloop invariant y == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= i * x;\nloop invariant i <= x;\nloop invariant j >= i * y;\nloop invariant y >= 0;\nloop invariant j >= 0;\nloop invariant x >= 0;\nloop invariant i >= 0;\nloop invariant j >= i * (y - 1);\nloop invariant j <= i * (y + 1);\nloop invariant i <= j / y;\nloop invariant j >= i * y;\nloop invariant i <= j / (y + 1);\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\nloop invariant i <= j / y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: j >= i * y;\nloop invariant i4: y >= 0;\nloop invariant i5: j >= 0;\n\nloop invariant i7: i >= 0;\nloop invariant i8: j >= i * (y - 1);\nloop invariant i9: j <= i * (y + 1);\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant i <= j;\nloop invariant j <= (x + (y - 1) * i + (i * (i - 1)) / 2);\nloop invariant (y == 1) ==> (i == j);\nloop invariant (y == 1) ==> (i <= x);\nloop invariant (y == 1) ==> (j <= (x + (y - 1) * i + (i * (i - 1)) / 2));\nloop invariant (y != 1) ==> (i <= x);\nloop invariant (y != 1) ==> (j <= (x + (y - 1) * i + (i * (i - 1)) / 2));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\nloop invariant i4: (y == 1) ==> (i == j);\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant j >= 0;\nloop invariant j <= (x * y);\nloop invariant j >= i * y;\nloop invariant 0 <= i <= x;\nloop invariant j >= 0;\nloop invariant j <= (x * y);\nloop invariant j >= i * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\nloop invariant i4: j >= i * y;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= x * y;\nloop invariant i * y <= j;\nloop invariant i == j / y;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\nloop invariant i * y == j;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: i * y <= j;\n\nloop invariant i5: i * y == j;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= x;\nloop invariant 0 <= j <= (x * y + y - 1) / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j;\nloop invariant y > 0 ==> y == 1 ==> i == (y + 1) / 2;\nloop invariant y > 0 ==> y == 1 ==> j == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> x == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> j == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> x == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == j;\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == (y + 1) / 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: y > 0 ==> y == 1 ==> i == j;\n\n\nloop invariant i6: y > 0 ==> y == 1 ==> x == (y + 1) * y / 2;\n\nloop invariant i8: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j;\nloop invariant i9: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) / 2;\nloop invariant i10: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) * y / 2;\nloop invariant i11: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> j == (y + 1) * y / 2;\nloop invariant i12: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> x == (y + 1) * y / 2;\nloop invariant i13: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2;\nloop invariant i14: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == j;\nloop invariant i15: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == (y + 1) / 2;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant x >= 0;\nloop invariant y >= 1;\nloop invariant x >= i;\nloop invariant j >= 0;\nloop invariant j >= i * y;\nloop invariant 0 <= i <= 1;\nloop invariant 0 <= j <= 2;\nloop invariant x >= 0;\nloop invariant y >= 1;\nloop invariant x >= i;\nloop invariant j >= 0;\nloop invariant j >= i * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\nloop invariant i4: y >= 1;\n\nloop invariant i6: j >= 0;\nloop invariant i7: j >= i * y;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 1 <= i <= x is preserved but not established.\nloop invariant j >= (i * y) is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 2 is partially proven to be inductive.\nloop invariant i <= x is partially proven to be inductive.\nloop invariant j >= (i * (y - 1)) + (x - i) is partially proven to be inductive.\nloop invariant j <= (x * y) is partially proven to be inductive.\nloop invariant y == 1 ==> i == j is partially proven to be inductive.\nloop invariant y == 1 ==> j == x is partially proven to be inductive.\nloop invariant y == 1 ==> i == x is partially proven to be inductive.\nloop invariant j <= x * y is partially proven to be inductive.\nloop invariant i <= x + 1 is partially proven to be inductive.\nloop invariant 0 <= i <= x is partially proven to be inductive.\nloop invariant 0 <= j <= x*y is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= x is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> y >= 1 is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= x is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> y >= 1 is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1 is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1 is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1 is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1 is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j is partially proven to be inductive.\nloop invariant i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y is partially proven to be inductive.\nloop invariant 0 <= j <= i * y is partially proven to be inductive.\nloop invariant j == y * i + (y - 1) * i / 2 is partially proven to be inductive.\nloop invariant j <= i * y is partially proven to be inductive.\nloop invariant i * y == j + (y - 1) * i / 2 is partially proven to be inductive.\nloop invariant 0 <= j <= (2 * i) is partially proven to be inductive.\nloop invariant i == j / 2 is partially proven to be inductive.\nloop invariant j == 2 * i is partially proven to be inductive.\nloop invariant 0 <= j <= x * y is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant j >= i * y is partially proven to be inductive.\nloop invariant j <= (i * y) is partially proven to be inductive.\nloop invariant (i == 0 || j >= (i * y)) is partially proven to be inductive.\nloop invariant 0 <= j <= y * (1 + i) is partially proven to be inductive.\nloop invariant y == 1 is partially proven to be inductive.\nloop invariant 0 <= j <= i * x is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant j >= i * (y - 1) is partially proven to be inductive.\nloop invariant j <= i * (y + 1) is partially proven to be inductive.\nloop invariant i <= j / y is partially proven to be inductive.\nloop invariant i <= j / (y + 1) is partially proven to be inductive.\nloop invariant j <= (x + (y - 1) * i + (i * (i - 1)) / 2) is partially proven to be inductive.\nloop invariant (y == 1) ==> (i == j) is partially proven to be inductive.\nloop invariant (y == 1) ==> (i <= x) is partially proven to be inductive.\nloop invariant (y == 1) ==> (j <= (x + (y - 1) * i + (i * (i - 1)) / 2)) is partially proven to be inductive.\nloop invariant (y != 1) ==> (i <= x) is partially proven to be inductive.\nloop invariant (y != 1) ==> (j <= (x + (y - 1) * i + (i * (i - 1)) / 2)) is partially proven to be inductive.\nloop invariant i * y <= j is partially proven to be inductive.\nloop invariant i == j / y is partially proven to be inductive.\nloop invariant i * y == j is partially proven to be inductive.\nloop invariant 0 <= j <= (x * y + y - 1) / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> i == j is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> i == (y + 1) / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> j == (y + 1) * y / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> x == (y + 1) * y / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) * y / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == j is partially proven to be inductive.\nloop invariant y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == (y + 1) / 2 is partially proven to be inductive.\nloop invariant 0 <= i <= 1 is partially proven to be inductive.\nloop invariant 0 <= j <= 2 is partially proven to be inductive.\nloop invariant x >= i is partially proven to be inductive.\nAssertion i == j: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: 1 <= i <= x;\nloop invariant i2: j >= (i * y);\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: y >= 1;\nloop invariant i6: y <= 2;\nloop invariant i7: i <= x;\nloop invariant i8: j >= (i * (y - 1)) + (x - i);\nloop invariant i9: j <= (x * y);\nloop invariant i10: y == 1 ==> i == j;\nloop invariant i11: y == 1 ==> j == x;\nloop invariant i12: y == 1 ==> i == x;\nloop invariant i13: j <= x * y;\nloop invariant i14: i <= x + 1;\nloop invariant i15: 0 <= i <= x;\nloop invariant i16: 0 <= j <= x*y;\nloop invariant i17: i <= j;\nloop invariant i18: j <= x*y;\nloop invariant i19: i <= j <= x*y;\nloop invariant i20: i <= j <= x*y ==> i <= x;\nloop invariant i21: i <= j <= x*y ==> y >= 1;\nloop invariant i22: i <= j <= x*y ==> j <= x*y;\nloop invariant i23: i <= j <= x*y ==> i <= j;\nloop invariant i24: i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i25: i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i26: i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i27: i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i28: i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i29: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i30: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i31: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i32: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i33: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i34: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i35: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i36: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i37: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i38: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i39: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i40: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i41: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i42: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i43: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i44: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i45: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i46: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i47: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i48: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i49: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i50: 0 <= j <= i * y;\nloop invariant i51: j == y * i + (y - 1) * i / 2;\nloop invariant i52: j <= i * y;\nloop invariant i53: i * y == j + (y - 1) * i / 2;\nloop invariant i54: 0 <= j <= (2 * i);\nloop invariant i55: i == j / 2;\nloop invariant i56: j == 2 * i;\nloop invariant i57: 0 <= j <= x * y;\nloop invariant i58: y > 0;\nloop invariant i59: j >= i * y;\nloop invariant i60: j <= (i * y);\nloop invariant i61: (i == 0 || j >= (i * y));\nloop invariant i62: 0 <= j <= y * (1 + i);\nloop invariant i63: y == 1;\nloop invariant i64: 0 <= j <= i * x;\nloop invariant i65: y >= 0;\nloop invariant i66: x >= 0;\nloop invariant i67: j >= i * (y - 1);\nloop invariant i68: j <= i * (y + 1);\nloop invariant i69: i <= j / y;\nloop invariant i70: i <= j / (y + 1);\nloop invariant i71: j <= (x + (y - 1) * i + (i * (i - 1)) / 2);\nloop invariant i72: (y == 1) ==> (i == j);\nloop invariant i73: (y == 1) ==> (i <= x);\nloop invariant i74: (y == 1) ==> (j <= (x + (y - 1) * i + (i * (i - 1)) / 2));\nloop invariant i75: (y != 1) ==> (i <= x);\nloop invariant i76: (y != 1) ==> (j <= (x + (y - 1) * i + (i * (i - 1)) / 2));\nloop invariant i77: i * y <= j;\nloop invariant i78: i == j / y;\nloop invariant i79: i * y == j;\nloop invariant i80: 0 <= j <= (x * y + y - 1) / 2;\nloop invariant i81: y > 0 ==> y == 1 ==> i == j;\nloop invariant i82: y > 0 ==> y == 1 ==> i == (y + 1) / 2;\nloop invariant i83: y > 0 ==> y == 1 ==> j == (y + 1) * y / 2;\nloop invariant i84: y > 0 ==> y == 1 ==> x == (y + 1) * y / 2;\nloop invariant i85: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2;\nloop invariant i86: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j;\nloop invariant i87: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) / 2;\nloop invariant i88: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) * y / 2;\nloop invariant i89: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> j == (y + 1) * y / 2;\nloop invariant i90: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> x == (y + 1) * y / 2;\nloop invariant i91: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2;\nloop invariant i92: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == j;\nloop invariant i93: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == (y + 1) / 2;\nloop invariant i94: 0 <= i <= 1;\nloop invariant i95: 0 <= j <= 2;\nloop invariant i96: x >= i;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 12,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\nloop invariant i2: j >= (i * y);\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: y >= 1;\nloop invariant i6: y <= 2;\n\n\n\nloop invariant i10: y == 1 ==> i == j;\nloop invariant i11: y == 1 ==> j == x;\nloop invariant i12: y == 1 ==> i == x;\n\n\n\n\nloop invariant i17: i <= j;\n\n\nloop invariant i20: i <= j <= x*y ==> i <= x;\nloop invariant i21: i <= j <= x*y ==> y >= 1;\nloop invariant i22: i <= j <= x*y ==> j <= x*y;\nloop invariant i23: i <= j <= x*y ==> i <= j;\nloop invariant i24: i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i25: i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i26: i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i27: i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i28: i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i29: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i30: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i31: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i32: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i33: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i34: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i35: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i36: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i37: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i38: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i39: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i40: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i41: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i42: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i43: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i44: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i45: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= x;\nloop invariant i46: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> y >= 1;\nloop invariant i47: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> j <= x*y;\nloop invariant i48: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j;\nloop invariant i49: i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y ==> i <= j <= x*y;\nloop invariant i50: 0 <= j <= i * y;\n\nloop invariant i52: j <= i * y;\n\nloop invariant i54: 0 <= j <= (2 * i);\nloop invariant i55: i == j / 2;\nloop invariant i56: j == 2 * i;\n\nloop invariant i58: y > 0;\nloop invariant i59: j >= i * y;\nloop invariant i60: j <= (i * y);\nloop invariant i61: (i == 0 || j >= (i * y));\nloop invariant i62: 0 <= j <= y * (1 + i);\n\n\nloop invariant i65: y >= 0;\n\nloop invariant i67: j >= i * (y - 1);\nloop invariant i68: j <= i * (y + 1);\nloop invariant i69: i <= j / y;\n\n\nloop invariant i72: (y == 1) ==> (i == j);\nloop invariant i73: (y == 1) ==> (i <= x);\nloop invariant i74: (y == 1) ==> (j <= (x + (y - 1) * i + (i * (i - 1)) / 2));\n\n\nloop invariant i77: i * y <= j;\nloop invariant i78: i == j / y;\nloop invariant i79: i * y == j;\n\nloop invariant i81: y > 0 ==> y == 1 ==> i == j;\nloop invariant i82: y > 0 ==> y == 1 ==> i == (y + 1) / 2;\nloop invariant i83: y > 0 ==> y == 1 ==> j == (y + 1) * y / 2;\nloop invariant i84: y > 0 ==> y == 1 ==> x == (y + 1) * y / 2;\nloop invariant i85: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2;\nloop invariant i86: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j;\nloop invariant i87: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) / 2;\nloop invariant i88: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == (y + 1) * y / 2;\nloop invariant i89: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> j == (y + 1) * y / 2;\nloop invariant i90: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> x == (y + 1) * y / 2;\nloop invariant i91: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2;\nloop invariant i92: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == j;\nloop invariant i93: y > 0 ==> y == 1 ==> i == j && i == (y + 1) / 2 && i == (y + 1) * y / 2 && j == (y + 1) * y / 2 && x == (y + 1) * y / 2 ==> i == j ==> i == (y + 1) / 2 ==> i == (y + 1) * y / 2 ==> j == (y + 1) * y / 2 ==> x == (y + 1) * y / 2 ==> i == (y + 1) / 2;\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 83,
        "success_count": 73,
        "failure_count": 10,
        "success_rate": 0.8795180722891566
    }
}