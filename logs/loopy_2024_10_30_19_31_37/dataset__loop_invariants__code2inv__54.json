{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/54.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n ==> unknown() ==> c <= n);\nloop invariant (c <= n ==> !unknown() ==> c == 1);\nloop invariant (c == n ==> unknown() ==> c == n);\nloop invariant (c == n ==> !unknown() ==> c == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n + 1 ==> n == 0 || c == n + 1;\nloop invariant c <= n + 1 ==> c <= n || c == n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c <= n;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n+1;\nloop invariant c <= n ==> c == n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= c <= n;\nloop invariant c == 1 || c > n;\nloop invariant c == n || c < n;\nloop invariant c == n || c > 0;\nloop invariant c == n || c < n;\nloop invariant c == n || c >= 0;\nloop invariant c == n || c <= n;\nloop invariant c == n || c > n;\nloop invariant c == n || c < n;\nloop invariant c == n || c == 0;\nloop invariant c == n || c != 0;\nloop invariant c == n || c != 1;\nloop invariant c == n || c != n;\nloop invariant c == n || c == n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant (c == 1) ==> (c <= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c < n) ==> (c >= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == 1) ==> (n == 1);\nloop invariant (c > 1) ==> (c <= n);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\n*/\n```",
            "```\n/*@\nloop invariant 0 < c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 0 <= n;\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c < n) ==> (c <= n);\nloop invariant c == 0 ==> (0 <= c <= n);\nloop invariant c == n ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n > 0;\nloop invariant c == 0 ==> n > 0;\nloop invariant c == 0 ==> unknown();\nloop invariant c == 0 ==> c <= n;\nloop invariant c > 0 ==> (c <= n) && (c > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n ==> (c >= 1);\nloop invariant c <= n ==> (c <= n + 1);\nloop invariant c <= n ==> (c > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c != n) ==> (c <= n);\n*/\n```",
            "```\n/*@\nloop invariant ( c <= n );\nloop invariant ( c >= 0 );\nloop invariant ( n > 0 );\nloop invariant ( c != n ==> c < n );\nloop invariant ( c == 0 ==> c <= 1 );\nloop invariant ( c == n ==> c == 1 );\nloop invariant ( c == 0 ==> c != n );\nloop invariant ( c == 1 ==> c == n );\nloop invariant ( c == n ==> c == n );\nloop invariant ( c == 0 ==> c == 0 );\nloop invariant ( c == 0 ==> c != 0 );\nloop invariant ( c == 1 ==> c != 1 );\nloop invariant ( c == n ==> c != n );\n*/\n```",
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 0 ==> (v1 == v2) && (v2 == v3);\nloop invariant c == 0 ==> (v1 == 0);\nloop invariant c == 0 ==> (v2 == 0);\nloop invariant c == 0 ==> (v3 == 0);\nloop invariant c != 0 ==> (v1 == v2) && (v2 == v3);\nloop invariant c != 0 ==> (v1 == c);\nloop invariant c != 0 ==> (v2 == c);\nloop invariant c != 0 ==> (v3 == c);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 1 <= n;\nloop invariant 1 <= c;\nloop invariant c <= n;\nloop invariant n == 1 ==> c == 1;\nloop invariant n > 1 ==> c <= n;\nloop invariant n > 1 ==> c >= 1;\nloop invariant (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\n*/\n```",
            "```\n/*@\nloop invariant (unknown() ==> (c > n) ==> (c  = (c + 1)));\nloop invariant (unknown() ==> (c == n) ==> (c  = 1));\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c <= n ==> unknown() ==> c <= n);\nloop invariant (c <= n ==> !unknown() ==> c == 1);\nloop invariant (c == n ==> unknown() ==> c == n);\nloop invariant (c == n ==> !unknown() ==> c == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n + 1 ==> n == 0 || c == n + 1;\nloop invariant c <= n + 1 ==> c <= n || c == n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c <= n;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant c <= n + 1 ==> c == n + 1 || c != n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c <= n + 1 ==> c <= n || c == n + 1;\nloop invariant i4: c <= n + 1 ==> c == n + 1 || c <= n;\nloop invariant i5: c <= n + 1 ==> c == n + 1 || c != n + 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n+1;\nloop invariant c <= n ==> c == n;\nloop invariant c == n ==> c == 1;\nloop invariant c != n ==> c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c == n ==> c == 1;\nloop invariant i4: c != n ==> c <= n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= c <= n;\nloop invariant c == 1 || c > n;\nloop invariant c == n || c < n;\nloop invariant c == n || c > 0;\nloop invariant c == n || c < n;\nloop invariant c == n || c >= 0;\nloop invariant c == n || c <= n;\nloop invariant c == n || c > n;\nloop invariant c == n || c < n;\nloop invariant c == n || c == 0;\nloop invariant c == n || c != 0;\nloop invariant c == n || c != 1;\nloop invariant c == n || c != n;\nloop invariant c == n || c == n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\nloop invariant c == n || c == c;\nloop invariant c == n || c != c;\nloop invariant c == n || c == n;\nloop invariant c == n || c != n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= n;\n\n\n\n\nloop invariant i6: c == n || c >= 0;\n\n\n\n\n\nloop invariant i12: c == n || c != n;\n\nloop invariant i14: c == n || c == c;\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c >= 1;\nloop invariant (c == 1) ==> (c <= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c < n) ==> (c >= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\n\n\n\n\nloop invariant i6: (c == n) ==> (c <= n);\nloop invariant i7: (c == n) ==> (c >= n);\nloop invariant i8: (c > n) ==> (c >= n);\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == 1) ==> (n == 1);\nloop invariant (c > 1) ==> (c <= n);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\nloop invariant (c > 1) ==> (n > 1);\nloop invariant (c > 1) ==> (c > 1);\nloop invariant (c > 1) ==> (c <= n + 1);\nloop invariant (c > 1) ==> (n > c);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: (c > 1) ==> (c > 1);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 < c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\nloop invariant 0 <= c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 0 <= n;\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c < n) ==> (c <= n);\nloop invariant c == 0 ==> (0 <= c <= n);\nloop invariant c == n ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\nloop invariant (c > n) ==> (0 <= c <= n);\nloop invariant (c == 1) ==> (0 <= c <= n);\nloop invariant (c < 1) ==> (0 <= c <= n);\nloop invariant (c > 1) ==> (0 <= c <= n);\nloop invariant (c < n) ==> (0 <= c <= n);\nloop invariant (c == n) ==> (0 <= c <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 0 <= n;\nloop invariant i3: (c == n) ==> (c <= n);\nloop invariant i4: (c < n) ==> (c <= n);\nloop invariant i5: c == 0 ==> (0 <= c <= n);\nloop invariant i6: c == n ==> (0 <= c <= n);\n\n\nloop invariant i9: (c < 1) ==> (0 <= c <= n);\n\nloop invariant i11: (c < n) ==> (0 <= c <= n);\nloop invariant i12: (c == n) ==> (0 <= c <= n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant n > 0;\nloop invariant c == 0 ==> n > 0;\nloop invariant c == 0 ==> unknown();\nloop invariant c == 0 ==> c <= n;\nloop invariant c > 0 ==> (c <= n) && (c > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: n > 0;\nloop invariant i3: c == 0 ==> n > 0;\n\nloop invariant i5: c == 0 ==> c <= n;\nloop invariant i6: c > 0 ==> (c <= n) && (c > 0);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n ==> (c >= 1);\nloop invariant c <= n ==> (c <= n + 1);\nloop invariant c <= n ==> (c > 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: c <= n ==> (c <= n + 1);\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c != n) ==> (c <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant ( c <= n );\nloop invariant ( c >= 0 );\nloop invariant ( n > 0 );\nloop invariant ( c != n ==> c < n );\nloop invariant ( c == 0 ==> c <= 1 );\nloop invariant ( c == n ==> c == 1 );\nloop invariant ( c == 0 ==> c != n );\nloop invariant ( c == 1 ==> c == n );\nloop invariant ( c == n ==> c == n );\nloop invariant ( c == 0 ==> c == 0 );\nloop invariant ( c == 0 ==> c != 0 );\nloop invariant ( c == 1 ==> c != 1 );\nloop invariant ( c == n ==> c != n );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: ( c <= n );\nloop invariant i2: ( c >= 0 );\nloop invariant i3: ( n > 0 );\nloop invariant i4: ( c != n ==> c < n );\nloop invariant i5: ( c == 0 ==> c <= 1 );\nloop invariant i6: ( c == n ==> c == 1 );\nloop invariant i7: ( c == 0 ==> c != n );\nloop invariant i8: ( c == 1 ==> c == n );\nloop invariant i9: ( c == n ==> c == n );\nloop invariant i10: ( c == 0 ==> c == 0 );\n\nloop invariant i12: ( c == 1 ==> c != 1 );\nloop invariant i13: ( c == n ==> c != n );\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c == 0 ==> (v1 == v2) && (v2 == v3);\nloop invariant c == 0 ==> (v1 == 0);\nloop invariant c == 0 ==> (v2 == 0);\nloop invariant c == 0 ==> (v3 == 0);\nloop invariant c != 0 ==> (v1 == v2) && (v2 == v3);\nloop invariant c != 0 ==> (v1 == c);\nloop invariant c != 0 ==> (v2 == c);\nloop invariant c != 0 ==> (v3 == c);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c >= 0;\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant 1 <= n;\nloop invariant 1 <= c;\nloop invariant c <= n;\nloop invariant n == 1 ==> c == 1;\nloop invariant n > 1 ==> c <= n;\nloop invariant n > 1 ==> c >= 1;\nloop invariant (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c == n) ==> (c == 1);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: 1 <= n;\n\nloop invariant i4: c <= n;\n\nloop invariant i6: n > 1 ==> c <= n;\n\nloop invariant i8: (c > n) ==> (c <= n + 1);\nloop invariant i9: (c == n) ==> (c == 1) ==> (c == n) ==> (c == 1);\nloop invariant i10: (c == n) ==> (c == 1) ==> (c <= n);\nloop invariant i11: (c == n) ==> (c == 1) ==> (c >= 1);\nloop invariant i12: (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i13: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n);\nloop invariant i14: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n);\nloop invariant i15: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i16: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1);\nloop invariant i17: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1);\nloop invariant i18: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i19: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i20: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i21: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i22: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i23: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i24: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i25: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i26: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i27: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i28: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i29: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant (unknown() ==> (c > n) ==> (c  = (c + 1)));\nloop invariant (unknown() ==> (c == n) ==> (c  = 1));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c <= n ==> unknown() ==> c <= n);\nloop invariant i3: (c <= n ==> !unknown() ==> c == 1);\nloop invariant i4: (c == n ==> unknown() ==> c == n);\nloop invariant i5: (c == n ==> !unknown() ==> c == 1);\nloop invariant i6: c <= n + 1 ==> n == 0 || c == n + 1;\nloop invariant i7: c <= n + 1 ==> c <= n || c == n + 1;\nloop invariant i8: c <= n + 1 ==> c == n + 1 || c <= n;\nloop invariant i9: c <= n + 1 ==> c == n + 1 || c != n + 1;\nloop invariant i10: 1 <= c <= n+1;\nloop invariant i11: c <= n ==> c == n;\nloop invariant i12: c == n ==> c == 1;\nloop invariant i13: c != n ==> c <= n;\nloop invariant i14: 0 <= n;\nloop invariant i15: c == 1 || c > n;\nloop invariant i16: c == n || c < n;\nloop invariant i17: c == n || c > 0;\nloop invariant i18: c == n || c >= 0;\nloop invariant i19: c == n || c <= n;\nloop invariant i20: c == n || c > n;\nloop invariant i21: c == n || c == 0;\nloop invariant i22: c == n || c != 0;\nloop invariant i23: c == n || c != 1;\nloop invariant i24: c == n || c != n;\nloop invariant i25: c == n || c == n;\nloop invariant i26: c == n || c == c;\nloop invariant i27: c == n || c != c;\nloop invariant i28: 0 <= c;\nloop invariant i29: c <= n;\nloop invariant i30: c >= 1;\nloop invariant i31: (c == 1) ==> (c <= n);\nloop invariant i32: (c > n) ==> (c <= n);\nloop invariant i33: (c == n) ==> (c <= n);\nloop invariant i34: (c == n) ==> (c >= n);\nloop invariant i35: (c > n) ==> (c >= n);\nloop invariant i36: (c < n) ==> (c >= n);\nloop invariant i37: (c == 1) ==> (n == 1);\nloop invariant i38: (c > 1) ==> (c <= n);\nloop invariant i39: (c > 1) ==> (n > 1);\nloop invariant i40: (c > 1) ==> (c <= n + 1);\nloop invariant i41: (c > 1) ==> (n > c);\nloop invariant i42: (c > 1) ==> (c > 1);\nloop invariant i43: 0 < c <= n;\nloop invariant i44: 1 <= c <= n;\nloop invariant i45: (c < n) ==> (c <= n);\nloop invariant i46: c == 0 ==> (0 <= c <= n);\nloop invariant i47: c == n ==> (0 <= c <= n);\nloop invariant i48: (c > n) ==> (0 <= c <= n);\nloop invariant i49: (c == 1) ==> (0 <= c <= n);\nloop invariant i50: (c < 1) ==> (0 <= c <= n);\nloop invariant i51: (c > 1) ==> (0 <= c <= n);\nloop invariant i52: (c < n) ==> (0 <= c <= n);\nloop invariant i53: (c == n) ==> (0 <= c <= n);\nloop invariant i54: n > 0;\nloop invariant i55: c == 0 ==> n > 0;\nloop invariant i56: c == 0 ==> unknown();\nloop invariant i57: c == 0 ==> c <= n;\nloop invariant i58: c > 0 ==> (c <= n) && (c > 0);\nloop invariant i59: c <= n ==> (c >= 1);\nloop invariant i60: c <= n ==> (c <= n + 1);\nloop invariant i61: c <= n ==> (c > 0);\nloop invariant i62: (c != n) ==> (c <= n);\nloop invariant i63: ( c <= n );\nloop invariant i64: ( c >= 0 );\nloop invariant i65: ( n > 0 );\nloop invariant i66: ( c != n ==> c < n );\nloop invariant i67: ( c == 0 ==> c <= 1 );\nloop invariant i68: ( c == n ==> c == 1 );\nloop invariant i69: ( c == 0 ==> c != n );\nloop invariant i70: ( c == 1 ==> c == n );\nloop invariant i71: ( c == n ==> c == n );\nloop invariant i72: ( c == 0 ==> c == 0 );\nloop invariant i73: ( c == 0 ==> c != 0 );\nloop invariant i74: ( c == 1 ==> c != 1 );\nloop invariant i75: ( c == n ==> c != n );\nloop invariant i76: c >= 0;\nloop invariant i77: c == 0 ==> (v1 == v2) && (v2 == v3);\nloop invariant i78: c == 0 ==> (v1 == 0);\nloop invariant i79: c == 0 ==> (v2 == 0);\nloop invariant i80: c == 0 ==> (v3 == 0);\nloop invariant i81: c != 0 ==> (v1 == v2) && (v2 == v3);\nloop invariant i82: c != 0 ==> (v1 == c);\nloop invariant i83: c != 0 ==> (v2 == c);\nloop invariant i84: c != 0 ==> (v3 == c);\nloop invariant i85: 1 <= n;\nloop invariant i86: 1 <= c;\nloop invariant i87: n == 1 ==> c == 1;\nloop invariant i88: n > 1 ==> c <= n;\nloop invariant i89: n > 1 ==> c >= 1;\nloop invariant i90: (c > n) ==> (c <= n + 1);\nloop invariant i91: (c == n) ==> (c == 1) ==> (c == n) ==> (c == 1);\nloop invariant i92: (c == n) ==> (c == 1) ==> (c <= n);\nloop invariant i93: (c == n) ==> (c == 1) ==> (c >= 1);\nloop invariant i94: (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i95: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n);\nloop invariant i96: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n);\nloop invariant i97: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i98: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1);\nloop invariant i99: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1);\nloop invariant i100: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i101: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i102: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i103: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i104: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i105: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i106: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i107: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i108: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i109: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i110: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i111: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i112: (unknown() ==> (c > n) ==> (c  = (c + 1)));\nloop invariant i113: (unknown() ==> (c == n) ==> (c  = 1));\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 26,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\n\n\n\n\n\nloop invariant i7: c <= n + 1 ==> c <= n || c == n + 1;\nloop invariant i8: c <= n + 1 ==> c == n + 1 || c <= n;\nloop invariant i9: c <= n + 1 ==> c == n + 1 || c != n + 1;\n\n\nloop invariant i12: c == n ==> c == 1;\nloop invariant i13: c != n ==> c <= n;\nloop invariant i14: 0 <= n;\n\nloop invariant i16: c == n || c < n;\n\nloop invariant i18: c == n || c >= 0;\nloop invariant i19: c == n || c <= n;\n\nloop invariant i21: c == n || c == 0;\n\nloop invariant i23: c == n || c != 1;\nloop invariant i24: c == n || c != n;\n\nloop invariant i26: c == n || c == c;\n\nloop invariant i28: 0 <= c;\nloop invariant i29: c <= n;\n\nloop invariant i31: (c == 1) ==> (c <= n);\nloop invariant i32: (c > n) ==> (c <= n);\nloop invariant i33: (c == n) ==> (c <= n);\nloop invariant i34: (c == n) ==> (c >= n);\nloop invariant i35: (c > n) ==> (c >= n);\n\nloop invariant i37: (c == 1) ==> (n == 1);\nloop invariant i38: (c > 1) ==> (c <= n);\nloop invariant i39: (c > 1) ==> (n > 1);\nloop invariant i40: (c > 1) ==> (c <= n + 1);\nloop invariant i41: (c > 1) ==> (n > c);\nloop invariant i42: (c > 1) ==> (c > 1);\n\n\nloop invariant i45: (c < n) ==> (c <= n);\nloop invariant i46: c == 0 ==> (0 <= c <= n);\nloop invariant i47: c == n ==> (0 <= c <= n);\nloop invariant i48: (c > n) ==> (0 <= c <= n);\nloop invariant i49: (c == 1) ==> (0 <= c <= n);\nloop invariant i50: (c < 1) ==> (0 <= c <= n);\nloop invariant i51: (c > 1) ==> (0 <= c <= n);\nloop invariant i52: (c < n) ==> (0 <= c <= n);\nloop invariant i53: (c == n) ==> (0 <= c <= n);\nloop invariant i54: n > 0;\nloop invariant i55: c == 0 ==> n > 0;\n\nloop invariant i57: c == 0 ==> c <= n;\nloop invariant i58: c > 0 ==> (c <= n) && (c > 0);\n\nloop invariant i60: c <= n ==> (c <= n + 1);\n\nloop invariant i62: (c != n) ==> (c <= n);\nloop invariant i63: ( c <= n );\nloop invariant i64: ( c >= 0 );\nloop invariant i65: ( n > 0 );\nloop invariant i66: ( c != n ==> c < n );\nloop invariant i67: ( c == 0 ==> c <= 1 );\nloop invariant i68: ( c == n ==> c == 1 );\nloop invariant i69: ( c == 0 ==> c != n );\nloop invariant i70: ( c == 1 ==> c == n );\nloop invariant i71: ( c == n ==> c == n );\nloop invariant i72: ( c == 0 ==> c == 0 );\n\nloop invariant i74: ( c == 1 ==> c != 1 );\nloop invariant i75: ( c == n ==> c != n );\nloop invariant i76: c >= 0;\n\n\n\n\nloop invariant i81: c != 0 ==> (v1 == v2) && (v2 == v3);\nloop invariant i82: c != 0 ==> (v1 == c);\nloop invariant i83: c != 0 ==> (v2 == c);\nloop invariant i84: c != 0 ==> (v3 == c);\nloop invariant i85: 1 <= n;\n\n\nloop invariant i88: n > 1 ==> c <= n;\n\nloop invariant i90: (c > n) ==> (c <= n + 1);\nloop invariant i91: (c == n) ==> (c == 1) ==> (c == n) ==> (c == 1);\nloop invariant i92: (c == n) ==> (c == 1) ==> (c <= n);\nloop invariant i93: (c == n) ==> (c == 1) ==> (c >= 1);\nloop invariant i94: (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i95: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n);\nloop invariant i96: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n);\nloop invariant i97: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i98: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1);\nloop invariant i99: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1);\nloop invariant i100: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i101: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i102: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i103: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i104: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i105: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i106: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i107: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i108: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n);\nloop invariant i109: (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i110: (c == n) ==> (c == 1) ==> (c <= n) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\nloop invariant i111: (c == n) ==> (c == 1) ==> (c >= 1) ==> (c <= n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1) ==> (c > n) ==> (c <= n + 1);\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 47,
        "success_count": 43,
        "failure_count": 4,
        "success_rate": 0.9148936170212766
    }
}