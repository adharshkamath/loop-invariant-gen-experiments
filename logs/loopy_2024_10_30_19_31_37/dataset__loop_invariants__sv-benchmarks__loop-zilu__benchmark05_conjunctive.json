{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  while (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 1;\nloop invariant y >= x - 1;\nloop invariant x == y ==> x == n;\nloop invariant x <= y ==> x == n;\nloop invariant y >= x ==> y == n;\nloop invariant y <= x ==> y == n;\nloop invariant x + 1 == n ==> y == n;\nloop invariant y + 1 == n ==> x == n;\nloop invariant x >= 0 ==> x == n;\nloop invariant y >= 0 ==> y == n;\nloop invariant x == y ==> x == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> y <= n;\nloop invariant x <= n ==> y >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x + y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n;\nloop invariant y <= n;\nloop invariant y == n ==> x == n;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y <= n;\nloop invariant y >= x;\nloop invariant 0 <= y - x <= n - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x <= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y <= n;\nloop invariant x <= n;\nloop invariant y >= n;\nloop invariant n >= 1;\nloop invariant x == n;\nloop invariant y == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x == y || x == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= y;\nloop invariant y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant x < n;\nloop invariant x <= n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\n*/\n```",
            "```\n/*@\nloop invariant x < n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n; loop invariant x <= y <= n; loop invariant x <= n; loop invariant y <= n; loop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x <= y;\nloop invariant y >= x;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == y;\nloop invariant y == n ==> x <= y;\nloop invariant y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= y;\nloop invariant x <= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y + 1;\nloop invariant y >= x - 1;\nloop invariant x == y ==> x == n;\nloop invariant x <= y ==> x == n;\nloop invariant y >= x ==> y == n;\nloop invariant y <= x ==> y == n;\nloop invariant x + 1 == n ==> y == n;\nloop invariant y + 1 == n ==> x == n;\nloop invariant x >= 0 ==> x == n;\nloop invariant y >= 0 ==> y == n;\nloop invariant x == y ==> x == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\nloop invariant y == n ==> y == n;\nloop invariant x == n ==> x == y;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\nloop invariant i3: x <= y;\nloop invariant i4: x <= n;\nloop invariant i5: y <= n;\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: x <= y + 1;\nloop invariant i9: y >= x - 1;\n\n\n\n\n\n\n\n\nloop invariant i18: x == n ==> x == y;\nloop invariant i19: x == n ==> y == n;\nloop invariant i20: y == n ==> x == n;\nloop invariant i21: y == n ==> y == n;\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> y <= n;\nloop invariant x <= n ==> y >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x < n ==> y <= n;\nloop invariant i3: x <= n ==> y >= x;\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x >= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y >= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= x;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\n\nloop invariant i4: x <= n;\nloop invariant i5: y <= n;\nloop invariant i6: y >= 0;\nloop invariant i7: x >= 0;\n\nloop invariant i9: y >= x;\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x + y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y <= n;\nloop invariant i2: y <= n;\nloop invariant i3: x >= 0;\nloop invariant i4: x <= n;\n\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n;\nloop invariant y <= n;\nloop invariant y == n ==> x == n;\nloop invariant x >= 0;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= y <= n;\nloop invariant i3: y <= n;\nloop invariant i4: y == n ==> x == n;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y <= n;\nloop invariant y >= x;\nloop invariant 0 <= y - x <= n - x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: y <= n;\nloop invariant i3: y >= x;\nloop invariant i4: 0 <= y - x <= n - x;\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x <= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\nloop invariant x + y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x <= y;\nloop invariant i4: x <= n;\nloop invariant i5: y <= n;\n\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= y <= n;\nloop invariant i3: x <= n;\nloop invariant i4: y <= n;\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y <= n;\nloop invariant x <= n;\nloop invariant y >= n;\nloop invariant n >= 1;\nloop invariant x == n;\nloop invariant y == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= y <= n;\nloop invariant i2: x <= n;\n\nloop invariant i4: n >= 1;\n\n\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= y;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x == y || x == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x <= y;\nloop invariant i6: x <= n;\nloop invariant i7: y <= n;\n\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= y;\nloop invariant y <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\nloop invariant i3: y <= n;\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n;\nloop invariant y <= n;\nloop invariant x <= n;\nloop invariant x < n;\nloop invariant x <= n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\nloop invariant x < n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= y <= n;\nloop invariant i3: y <= n;\nloop invariant i4: x <= n;\n\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x < n;\nloop invariant y <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x <= y else x > y;\nloop invariant if x == y then x == y else x != y;\nloop invariant if x < y then x < y else x >= y;\nloop invariant if x == y then x == y else x != y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\n\nloop invariant i2: y <= n;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n\n\n\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant x <= y <= n; loop invariant x <= n; loop invariant y <= n; loop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n; loop invariant x <= y <= n; loop invariant x <= n; loop invariant y <= n; loop invariant x <= y;\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n;\nloop invariant x <= n;\nloop invariant y <= n;\nloop invariant x <= y;\nloop invariant y >= x;\nloop invariant x == n ==> y == n;\nloop invariant y == n ==> x == y;\nloop invariant y == n ==> x <= y;\nloop invariant y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= y <= n;\nloop invariant i3: x <= n;\nloop invariant i4: y <= n;\nloop invariant i5: x <= y;\nloop invariant i6: y >= x;\nloop invariant i7: x == n ==> y == n;\nloop invariant i8: y == n ==> x == y;\nloop invariant i9: y == n ==> x <= y;\nloop invariant i10: y == n ==> x == y ==> y == n;\nloop invariant i11: y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i12: y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i13: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i14: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i15: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i16: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i17: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i18: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i19: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i20: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i21: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i22: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i23: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i24: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i25: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i26: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i27: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 54: unexpected token 'x'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x >= y;\nloop invariant i3: x <= y;\nloop invariant i4: x <= n;\nloop invariant i5: y <= n;\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: x <= y + 1;\nloop invariant i9: y >= x - 1;\nloop invariant i10: x == y ==> x == n;\nloop invariant i11: x <= y ==> x == n;\nloop invariant i12: y >= x ==> y == n;\nloop invariant i13: y <= x ==> y == n;\nloop invariant i14: x + 1 == n ==> y == n;\nloop invariant i15: y + 1 == n ==> x == n;\nloop invariant i16: x >= 0 ==> x == n;\nloop invariant i17: y >= 0 ==> y == n;\nloop invariant i18: x == n ==> x == y;\nloop invariant i19: x == n ==> y == n;\nloop invariant i20: y == n ==> x == n;\nloop invariant i21: y == n ==> y == n;\nloop invariant i22: x < n ==> y <= n;\nloop invariant i23: x <= n ==> y >= x;\nloop invariant i24: 0 <= y <= n;\nloop invariant i25: y <= x;\nloop invariant i26: y >= x;\nloop invariant i27: 0 <= x <= y <= n;\nloop invariant i28: x + y <= n;\nloop invariant i29: x <= y <= n;\nloop invariant i30: 0 <= y - x <= n - x;\nloop invariant i31: y >= n;\nloop invariant i32: n >= 1;\nloop invariant i33: x == n;\nloop invariant i34: y == n;\nloop invariant i35: x == y || x == n;\nloop invariant i36: x < n;\nloop invariant i37: if x < y then x <= y else x > y;\nloop invariant i38: if x == y then x == y else x != y;\nloop invariant i39: if x < y then x < y else x >= y;\nloop invariant i40: 0 <= x <= n; loop invariant x <= y <= n; loop invariant x <= n; loop invariant y <= n; loop invariant x <= y;\nloop invariant i41: y == n ==> x == y;\nloop invariant i42: y == n ==> x <= y;\nloop invariant i43: y == n ==> x == y ==> y == n;\nloop invariant i44: y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i45: y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i46: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i47: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i48: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i49: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i50: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i51: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i52: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i53: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i54: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i55: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i56: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i57: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i58: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i59: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i60: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  /*@\nloop invariant i1: 0 <= x <= n;\n\nloop invariant i3: x <= y;\nloop invariant i4: x <= n;\nloop invariant i5: y <= n;\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: x <= y + 1;\nloop invariant i9: y >= x - 1;\n\n\n\n\n\n\n\n\nloop invariant i18: x == n ==> x == y;\nloop invariant i19: x == n ==> y == n;\nloop invariant i20: y == n ==> x == n;\nloop invariant i21: y == n ==> y == n;\nloop invariant i22: x < n ==> y <= n;\nloop invariant i23: x <= n ==> y >= x;\nloop invariant i24: 0 <= y <= n;\n\nloop invariant i26: y >= x;\nloop invariant i27: 0 <= x <= y <= n;\n\nloop invariant i29: x <= y <= n;\nloop invariant i30: 0 <= y - x <= n - x;\n\nloop invariant i32: n >= 1;\n\n\n\n\n\n\n\nloop invariant i40: 0 <= x <= n; loop invariant x <= y <= n; loop invariant x <= n; loop invariant y <= n; loop invariant x <= y;\nloop invariant i41: y == n ==> x == y;\nloop invariant i42: y == n ==> x <= y;\nloop invariant i43: y == n ==> x == y ==> y == n;\nloop invariant i44: y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i45: y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i46: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i47: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i48: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i49: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i50: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i51: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i52: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i53: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i54: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i55: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i56: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i57: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i58: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\nloop invariant i59: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n;\nloop invariant i60: y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y ==> y == n ==> x == y;\n*/\nwhile (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c"
        ],
        "skipped": [],
        "total": 127,
        "success_count": 111,
        "failure_count": 16,
        "success_rate": 0.8740157480314961
    }
}