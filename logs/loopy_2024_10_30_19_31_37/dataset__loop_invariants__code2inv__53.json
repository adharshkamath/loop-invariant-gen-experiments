{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/53.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant unknown() ==> (c <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant if (unknown()) then c != n else c >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= (n - 1) || c < n;\nloop invariant c <= n + 1;\nloop invariant c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c > n) ==> c == n + 1;\nloop invariant (c == n) ==> c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == 0) ==> unknown(); ==> (c != n);\nloop invariant (c > 0) ==> (c != n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c > n ==> c >= 1;\nloop invariant c == n ==> c == 1;\nloop invariant c < n ==> c == 0;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n;\nloop invariant c <= n ==> c > n ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0 ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n ==> c >= 0;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c < n ==> c >= 1;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c == n ==> c == n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n + 1;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c <= n + 1 ==> c >= 1;\nloop invariant c <= n + 1 ==> c <= n;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c >= 0 ==> c <= n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\n*/\n```",
            "```\n/*@\nloop invariant c >= n;\nloop invariant c <= n + 1;\nloop invariant c >= 1;\nloop invariant c <= 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= c <= n;\nloop invariant if (c > n) then (c == (n + 1));\nloop invariant if (c == n) then (c == 1);\nloop invariant if (c != n) then (c >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant if (n > 0) then (unknown ==> unknown ==> c == 1);\nloop invariant if (n <= 0) then (unknown ==> unknown ==> c == 0);\nloop invariant if (c > n) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 1) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 2) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 3) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 4) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 5) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 6) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 7) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 8) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 9) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 10) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 11) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 12) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 13) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 14) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 15) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 16) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 17) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 18) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 19) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 20) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 21) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 22) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 23) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 24) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 25) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 26) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 27) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 28) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 29) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 30) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 31) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 32) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 33) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 34) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 35) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 36) then (unknown ==> unknown ==> c == n + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= c =< n;\nloop invariant c == n || c == n - 1;\nloop invariant c == n || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\n*/\n```",
            "```\n/*@\nloop invariant ( ( c >= 0 ) && ( c <= n ) );\nloop invariant ( ( n >= 0 ) );\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant unknown() ==> (c <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c >= 0;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant if (unknown()) then c != n else c >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= (n - 1) || c < n;\nloop invariant c <= n + 1;\nloop invariant c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\nloop invariant c >= 0 && c <= n + 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c >= (n - 1) || c < n;\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c > n) ==> c == n + 1;\nloop invariant (c == n) ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c > n) ==> c == n + 1;\nloop invariant i3: (c == n) ==> c == 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == n) ==> (c == 1);\nloop invariant (c != n) ==> (c > 0);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\nloop invariant (c != n) ==> (c <= n);\nloop invariant (c != n) ==> (c < n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: (c == n) ==> (c == 1);\n\nloop invariant i4: (c != n) ==> (c <= n);\nloop invariant i5: (c != n) ==> (c < n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant (c == 0) ==> unknown(); ==> (c != n);\nloop invariant (c > 0) ==> (c != n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\nloop invariant i3: (c > 0) ==> (c != n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c;\nloop invariant c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c <= n;\nloop invariant c > n ==> c >= 1;\nloop invariant c == n ==> c == 1;\nloop invariant c < n ==> c == 0;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n;\nloop invariant c <= n ==> c > n ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0 ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n ==> c >= 0;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: c <= n;\nloop invariant i3: c >= 0;\nloop invariant i4: c > n ==> c >= 1;\nloop invariant i5: c == n ==> c == 1;\nloop invariant i6: c < n ==> c == 0;\nloop invariant i7: c <= n ==> c >= 0;\nloop invariant i8: c <= n ==> c <= n;\nloop invariant i9: c <= n ==> c > n ==> c >= 1;\nloop invariant i10: c <= n ==> c == n ==> c == 1;\nloop invariant i11: c <= n ==> c < n ==> c == 0;\nloop invariant i12: c <= n ==> c <= n ==> c >= 0;\nloop invariant i13: c <= n ==> c <= n ==> c <= n;\nloop invariant i14: c <= n ==> c > n ==> c >= 1 ==> c >= 1;\nloop invariant i15: c <= n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i16: c <= n ==> c < n ==> c == 0 ==> c == 0;\nloop invariant i17: c <= n ==> c <= n ==> c >= 0 ==> c >= 0;\nloop invariant i18: c <= n ==> c <= n ==> c <= n ==> c >= 0;\nloop invariant i19: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i20: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i21: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i22: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i23: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0;\nloop invariant i24: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i25: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i26: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i27: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i28: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i29: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i30: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i31: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i32: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i33: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i34: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i35: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i36: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i37: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i38: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i39: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i40: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c < n ==> c >= 1;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c == n ==> c == n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n + 1;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c <= n + 1 ==> c >= 0;\nloop invariant c <= n + 1 ==> c >= 1;\nloop invariant c <= n + 1 ==> c <= n;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\nloop invariant c >= 1 ==> c >= 0;\nloop invariant c >= 1 ==> c <= n;\nloop invariant c <= n ==> c >= 0;\nloop invariant c <= n ==> c <= n + 1;\nloop invariant c >= 0 ==> c <= n + 1;\nloop invariant c >= 0 ==> c >= 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\n\nloop invariant i3: c <= n ==> c <= n + 1;\nloop invariant i4: c == n ==> c == n + 1;\nloop invariant i5: c >= 0 ==> c <= n + 1;\n\nloop invariant i7: c >= 0 ==> c <= n;\nloop invariant i8: c >= 1 ==> c >= 0;\nloop invariant i9: c >= 1 ==> c <= n + 1;\nloop invariant i10: c <= n ==> c >= 0;\nloop invariant i11: c <= n + 1 ==> c >= 0;\n\nloop invariant i13: c <= n + 1 ==> c <= n;\nloop invariant i14: c >= 1 ==> c <= n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant c >= 0 ==> c <= n;\nloop invariant c >= 0 ==> c <= n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: c >= 0;\n\n\nloop invariant i5: c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i6: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant i7: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i8: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant i9: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i10: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant i11: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i12: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant c >= n;\nloop invariant c <= n + 1;\nloop invariant c >= 1;\nloop invariant c <= 2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= c <= n;\nloop invariant if (c > n) then (c == (n + 1));\nloop invariant if (c == n) then (c == 1);\nloop invariant if (c != n) then (c >= 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= n;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= c <= n;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\nloop invariant (c > n) ==> (c >= n);\nloop invariant (c > n) ==> (c <= n);\nloop invariant c >= 0;\nloop invariant c <= n;\nloop invariant (c >= n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c == n + 1);\nloop invariant (c > n) ==> (c == n + 1);\nloop invariant (c == n) ==> (c >= n);\nloop invariant (c == n) ==> (c <= n);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: c <= n;\nloop invariant i3: (c >= n) ==> (c == n + 1);\nloop invariant i4: (c == n) ==> (c == n + 1);\nloop invariant i5: (c > n) ==> (c == n + 1);\nloop invariant i6: (c == n) ==> (c >= n);\nloop invariant i7: (c == n) ==> (c <= n);\nloop invariant i8: (c > n) ==> (c >= n);\nloop invariant i9: (c > n) ==> (c <= n);\nloop invariant i10: c >= 0;\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 41,
                "annotations": "```\n/*@\nloop invariant 1 <= c <= n;\nloop invariant if (n > 0) then (unknown ==> unknown ==> c == 1);\nloop invariant if (n <= 0) then (unknown ==> unknown ==> c == 0);\nloop invariant if (c > n) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 1) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 2) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 3) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 4) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 5) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 6) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 7) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 8) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 9) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 10) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 11) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 12) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 13) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 14) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 15) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 16) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 17) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 18) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 19) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 20) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 21) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 22) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 23) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 24) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 25) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 26) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 27) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 28) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 29) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 30) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 31) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 32) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 33) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 34) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 35) then (unknown ==> unknown ==> c == n + 1);\nloop invariant if (c == n + 36) then (unknown ==> unknown ==> c == n + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= c =< n;\nloop invariant c == n || c == n - 1;\nloop invariant c == n || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant c == n || c == n - 1 || c == 1 || c == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( ( c >= 0 ) && ( c <= n ) );\nloop invariant ( ( n >= 0 ) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: ( ( n >= 0 ) );\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= n;\nloop invariant i3: unknown() ==> (c <= n);\nloop invariant i4: 0 <= c;\nloop invariant i5: if (unknown()) then c != n else c >= 1;\nloop invariant i6: 0 <= c <= n;\nloop invariant i7: c >= (n - 1) || c < n;\nloop invariant i8: c <= n + 1;\nloop invariant i9: c >= 0 && c <= n + 1;\nloop invariant i10: (c > n) ==> c == n + 1;\nloop invariant i11: (c == n) ==> c == 1;\nloop invariant i12: (c == n) ==> (c == 1);\nloop invariant i13: (c != n) ==> (c > 0);\nloop invariant i14: (c != n) ==> (c <= n);\nloop invariant i15: (c != n) ==> (c < n);\nloop invariant i16: (c == 0) ==> unknown(); ==> (c != n);\nloop invariant i17: (c > 0) ==> (c != n);\nloop invariant i18: c > n ==> c >= 1;\nloop invariant i19: c == n ==> c == 1;\nloop invariant i20: c < n ==> c == 0;\nloop invariant i21: c <= n ==> c >= 0;\nloop invariant i22: c <= n ==> c <= n;\nloop invariant i23: c <= n ==> c > n ==> c >= 1;\nloop invariant i24: c <= n ==> c == n ==> c == 1;\nloop invariant i25: c <= n ==> c < n ==> c == 0;\nloop invariant i26: c <= n ==> c <= n ==> c >= 0;\nloop invariant i27: c <= n ==> c <= n ==> c <= n;\nloop invariant i28: c <= n ==> c > n ==> c >= 1 ==> c >= 1;\nloop invariant i29: c <= n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i30: c <= n ==> c < n ==> c == 0 ==> c == 0;\nloop invariant i31: c <= n ==> c <= n ==> c >= 0 ==> c >= 0;\nloop invariant i32: c <= n ==> c <= n ==> c <= n ==> c >= 0;\nloop invariant i33: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i34: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i35: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i36: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i37: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0;\nloop invariant i38: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i39: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i40: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i41: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i42: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i43: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i44: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i45: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i46: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i47: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i48: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i49: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i50: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i51: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i52: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i53: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i54: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i55: c < n ==> c >= 1;\nloop invariant i56: c <= n ==> c <= n + 1;\nloop invariant i57: c == n ==> c == n + 1;\nloop invariant i58: c >= 0 ==> c <= n + 1;\nloop invariant i59: c >= 0 ==> c >= 1;\nloop invariant i60: c >= 0 ==> c <= n;\nloop invariant i61: c >= 1 ==> c >= 0;\nloop invariant i62: c >= 1 ==> c <= n + 1;\nloop invariant i63: c <= n + 1 ==> c >= 0;\nloop invariant i64: c <= n + 1 ==> c >= 1;\nloop invariant i65: c <= n + 1 ==> c <= n;\nloop invariant i66: c >= 1 ==> c <= n;\nloop invariant i67: c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i68: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant i69: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i70: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant i71: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i72: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant i73: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i74: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant i75: c >= n;\nloop invariant i76: c >= 1;\nloop invariant i77: c <= 2;\nloop invariant i78: 0 <= n;\nloop invariant i79: if (c > n) then (c == (n + 1));\nloop invariant i80: if (c == n) then (c == 1);\nloop invariant i81: if (c != n) then (c >= 0);\nloop invariant i82: (c >= n) ==> (c == n + 1);\nloop invariant i83: (c == n) ==> (c == n + 1);\nloop invariant i84: (c > n) ==> (c == n + 1);\nloop invariant i85: (c == n) ==> (c >= n);\nloop invariant i86: (c == n) ==> (c <= n);\nloop invariant i87: (c > n) ==> (c >= n);\nloop invariant i88: (c > n) ==> (c <= n);\nloop invariant i89: 1 <= c <= n;\nloop invariant i90: if (n > 0) then (unknown ==> unknown ==> c == 1);\nloop invariant i91: if (n <= 0) then (unknown ==> unknown ==> c == 0);\nloop invariant i92: if (c > n) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i93: if (c == n) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i94: if (c == n + 1) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i95: if (c == n + 2) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i96: if (c == n + 3) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i97: if (c == n + 4) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i98: if (c == n + 5) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i99: if (c == n + 6) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i100: if (c == n + 7) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i101: if (c == n + 8) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i102: if (c == n + 9) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i103: if (c == n + 10) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i104: if (c == n + 11) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i105: if (c == n + 12) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i106: if (c == n + 13) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i107: if (c == n + 14) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i108: if (c == n + 15) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i109: if (c == n + 16) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i110: if (c == n + 17) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i111: if (c == n + 18) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i112: if (c == n + 19) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i113: if (c == n + 20) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i114: if (c == n + 21) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i115: if (c == n + 22) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i116: if (c == n + 23) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i117: if (c == n + 24) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i118: if (c == n + 25) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i119: if (c == n + 26) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i120: if (c == n + 27) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i121: if (c == n + 28) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i122: if (c == n + 29) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i123: if (c == n + 30) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i124: if (c == n + 31) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i125: if (c == n + 32) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i126: if (c == n + 33) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i127: if (c == n + 34) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i128: if (c == n + 35) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i129: if (c == n + 36) then (unknown ==> unknown ==> c == n + 1);\nloop invariant i130: 0 <= c =< n;\nloop invariant i131: c == n || c == n - 1;\nloop invariant i132: c == n || c == 1 || c == 0;\nloop invariant i133: c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant i134: ( ( c >= 0 ) && ( c <= n ) );\nloop invariant i135: ( ( n >= 0 ) );\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 56,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= n;\n\nloop invariant i4: 0 <= c;\n\nloop invariant i6: 0 <= c <= n;\nloop invariant i7: c >= (n - 1) || c < n;\nloop invariant i8: c <= n + 1;\nloop invariant i9: c >= 0 && c <= n + 1;\nloop invariant i10: (c > n) ==> c == n + 1;\nloop invariant i11: (c == n) ==> c == 1;\nloop invariant i12: (c == n) ==> (c == 1);\n\nloop invariant i14: (c != n) ==> (c <= n);\nloop invariant i15: (c != n) ==> (c < n);\n\nloop invariant i17: (c > 0) ==> (c != n);\nloop invariant i18: c > n ==> c >= 1;\nloop invariant i19: c == n ==> c == 1;\nloop invariant i20: c < n ==> c == 0;\nloop invariant i21: c <= n ==> c >= 0;\nloop invariant i22: c <= n ==> c <= n;\nloop invariant i23: c <= n ==> c > n ==> c >= 1;\nloop invariant i24: c <= n ==> c == n ==> c == 1;\nloop invariant i25: c <= n ==> c < n ==> c == 0;\nloop invariant i26: c <= n ==> c <= n ==> c >= 0;\nloop invariant i27: c <= n ==> c <= n ==> c <= n;\nloop invariant i28: c <= n ==> c > n ==> c >= 1 ==> c >= 1;\nloop invariant i29: c <= n ==> c == n ==> c == 1 ==> c == 1;\nloop invariant i30: c <= n ==> c < n ==> c == 0 ==> c == 0;\nloop invariant i31: c <= n ==> c <= n ==> c >= 0 ==> c >= 0;\nloop invariant i32: c <= n ==> c <= n ==> c <= n ==> c >= 0;\nloop invariant i33: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i34: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i35: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i36: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i37: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0;\nloop invariant i38: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i39: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i40: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i41: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i42: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i43: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i44: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i45: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i46: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i47: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i48: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i49: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\nloop invariant i50: c <= n ==> c < n ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0 ==> c == 0;\nloop invariant i51: c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i52: c <= n ==> c <= n ==> c <= n ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0 ==> c >= 0;\nloop invariant i53: c <= n ==> c > n ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1 ==> c >= 1;\nloop invariant i54: c <= n ==> c == n ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1 ==> c == 1;\n\nloop invariant i56: c <= n ==> c <= n + 1;\nloop invariant i57: c == n ==> c == n + 1;\nloop invariant i58: c >= 0 ==> c <= n + 1;\n\nloop invariant i60: c >= 0 ==> c <= n;\nloop invariant i61: c >= 1 ==> c >= 0;\nloop invariant i62: c >= 1 ==> c <= n + 1;\nloop invariant i63: c <= n + 1 ==> c >= 0;\n\nloop invariant i65: c <= n + 1 ==> c <= n;\nloop invariant i66: c >= 1 ==> c <= n;\nloop invariant i67: c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i68: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant i69: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i70: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant i71: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i72: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\nloop invariant i73: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0;\nloop invariant i74: c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n ==> c >= 0 ==> c <= n;\n\n\nloop invariant i77: c <= 2;\nloop invariant i78: 0 <= n;\n\n\n\nloop invariant i82: (c >= n) ==> (c == n + 1);\nloop invariant i83: (c == n) ==> (c == n + 1);\nloop invariant i84: (c > n) ==> (c == n + 1);\nloop invariant i85: (c == n) ==> (c >= n);\nloop invariant i86: (c == n) ==> (c <= n);\nloop invariant i87: (c > n) ==> (c >= n);\nloop invariant i88: (c > n) ==> (c <= n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i132: c == n || c == 1 || c == 0;\nloop invariant i133: c == n || c == n - 1 || c == 1 || c == 0;\nloop invariant i134: ( ( c >= 0 ) && ( c <= n ) );\nloop invariant i135: ( ( n >= 0 ) );\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c"
        ],
        "skipped": [],
        "total": 46,
        "success_count": 42,
        "failure_count": 4,
        "success_rate": 0.9130434782608695
    }
}