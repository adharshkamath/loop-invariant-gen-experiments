{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  while (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= x <= y / x;\nloop invariant x * x <= y;\nloop invariant x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant x == y ==> x >= sqrt(y);\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2;\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2;\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2;\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1)/2 <= y < (x + 1)^2/2;\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1)/2 <= y < (x + 1)^2/2 ==> x(x + 1)/2 + (x + 1)/2 <= y < (x + 1)^2/2 + (x + 1)/2;\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1)/2 <= y < (x + 1)^2/2 ==> x(x + 1)/2 + (x + 1)/2 <= y < (x + 1)^2/2 + (x + 1)/2 ==> x(x + 1)/2 + (x + 1)/2 <= y < (x + 1)^2/2 + (x + 1)/2 ==> x^2 + 3x/2 + 1/2 <= y < (x + 1)^2/2 + (x + 1)/2;\n*/\n```",
            "```\n/*@\nloop invariant y > 0;\nloop invariant x > 0;\nloop invariant y >= x;\nloop invariant x * x <= y;\nloop invariant (x < y / x ==> x * x <= y && x <= y);\nloop invariant (! (x < y / x) ==> x == y);\n*/\n```",
            "```\n/*@\nloop invariant x >= 1;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x < y ==> x * x < y;\nloop invariant x >= y ==> x * x >= y;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\n*/\n```",
            "```\n/*@\nloop invariant 0 < x < y < 2^32;\nloop invariant x <= y;\nloop invariant x * x >= y;\nloop invariant x * x < y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < y;\nloop invariant x * x >= y;\nloop invariant y <= x * x;\nloop invariant x * x < y || x == y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y;\nloop invariant x >= 1;\nloop invariant x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 1 <= y;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant x * x >= y;\nloop invariant x <= y;\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x * x >= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 < x <= y;\nloop invariant y > 0;\nloop invariant y is a power of 2;\nloop invariant x is a power of 2;\nloop invariant x <= y / x;\nloop invariant x * x <= y;\nloop invariant x * x > y / x;\nloop invariant x * x * x <= y;\nloop invariant x * x * x > y / x;\nloop invariant x * x * x * x <= y;\nloop invariant x * x * x * x > y / x;\nloop invariant x * x * x * x * x <= y;\nloop invariant x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\n*/\n```",
            "```\n/*@\nloop invariant y > 0;\nloop invariant x >= 1;\nloop invariant x <= y;\nloop invariant \\at(x, Pre) <= x;\nloop invariant x < y ==> \\at(y, Pre) >= pow(2, log2(x));\nloop invariant \\at(y, Pre) < x ==> y > x / y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= y;\nloop invariant x^2 <= y;\n*/\n```",
            "```\n/*@\nloop invariant x >= 1;\nloop invariant y > 0;\nloop invariant y > x;\nloop invariant x <= y;\nloop invariant x * x <= y;\nloop invariant x > y / x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y && y <= 100000;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= x <= y / x;\nloop invariant x * x <= y;\nloop invariant x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\nloop invariant x < y ==> x * x < y;\nloop invariant x < y ==> x++;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\n\n\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant x == y ==> x >= sqrt(y);\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2;\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2;\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2;\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1)/2 <= y < (x + 1)^2/2;\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1)/2 <= y < (x + 1)^2/2 ==> x(x + 1)/2 + (x + 1)/2 <= y < (x + 1)^2/2 + (x + 1)/2;\nloop invariant x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1)/2 <= y < (x + 1)^2/2 ==> x(x + 1)/2 + (x + 1)/2 <= y < (x + 1)^2/2 + (x + 1)/2 ==> x(x + 1)/2 + (x + 1)/2 <= y < (x + 1)^2/2 + (x + 1)/2 ==> x^2 + 3x/2 + 1/2 <= y < (x + 1)^2/2 + (x + 1)/2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 1 <= x <= y;\n\n\n\n\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant y > 0;\nloop invariant x > 0;\nloop invariant y >= x;\nloop invariant x * x <= y;\nloop invariant (x < y / x ==> x * x <= y && x <= y);\nloop invariant (! (x < y / x) ==> x == y);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: y > 0;\nloop invariant i2: x > 0;\nloop invariant i3: y >= x;\n\nloop invariant i5: (x < y / x ==> x * x <= y && x <= y);\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x < y ==> x * x < y;\nloop invariant x >= y ==> x * x >= y;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\nloop invariant x >= y ==> x - 1 == y / x;\nloop invariant x < y ==> x == y / x + 1;\nloop invariant x >= y ==> x - 1 == y / x + 1;\nloop invariant x < y ==> x == y / x - 1;\nloop invariant x >= y ==> x - 1 == y / x - 1;\nloop invariant x < y ==> x == y / x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= y;\nloop invariant i3: y > 0;\n\nloop invariant i5: x >= y ==> x * x >= y;\n\n\n\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 < x < y < 2^32;\nloop invariant x <= y;\nloop invariant x * x >= y;\nloop invariant x * x < y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\n\nloop invariant i2: x <= y;\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x < y;\nloop invariant x * x >= y;\nloop invariant y <= x * x;\nloop invariant x * x < y || x == y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\n\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= y;\nloop invariant x >= 1;\nloop invariant x <= y;\nloop invariant x * x >= y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\nloop invariant x * x <= y * y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 1 <= y;\nloop invariant i2: x >= 1;\nloop invariant i3: x <= y;\n\nloop invariant i5: x * x <= y * y;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant 1 <= y;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant x * x >= y;\nloop invariant x <= y;\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\nloop invariant x * x <= y * y / (y - 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 1 <= x <= y;\nloop invariant i2: 1 <= y;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= 1;\n\nloop invariant i6: x <= y;\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y;\nloop invariant x <= y;\nloop invariant x * x >= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: 0 <= y;\nloop invariant i3: x <= y;\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x * x >= x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: x * x >= x;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 26,
                "annotations": "```\n/*@\nloop invariant 0 < x <= y;\nloop invariant y > 0;\nloop invariant y is a power of 2;\nloop invariant x is a power of 2;\nloop invariant x <= y / x;\nloop invariant x * x <= y;\nloop invariant x * x > y / x;\nloop invariant x * x * x <= y;\nloop invariant x * x * x > y / x;\nloop invariant x * x * x * x <= y;\nloop invariant x * x * x * x > y / x;\nloop invariant x * x * x * x * x <= y;\nloop invariant x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 < x <= y;\nloop invariant i2: y > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant y > 0;\nloop invariant x >= 1;\nloop invariant x <= y;\nloop invariant \\at(x, Pre) <= x;\nloop invariant x < y ==> \\at(y, Pre) >= pow(2, log2(x));\nloop invariant \\at(y, Pre) < x ==> y > x / y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: y > 0;\nloop invariant i2: x >= 1;\nloop invariant i3: x <= y;\n\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= y;\nloop invariant x^2 <= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= y;\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant y > 0;\nloop invariant y > x;\nloop invariant x <= y;\nloop invariant x * x <= y;\nloop invariant x > y / x;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y > 0;\n\nloop invariant i4: x <= y;\n\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y && y <= 100000;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant y <= 100000;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\n\n\n\nloop invariant i4: x >= 1;\nloop invariant i5: y >= 1;\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: unexpected token ';'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\nloop invariant i2: 0 <= x <= y / x;\nloop invariant i3: x * x <= y;\nloop invariant i4: x++;\nloop invariant i5: x < y ==> x * x < y;\nloop invariant i6: x < y ==> x++;\nloop invariant i7: 1 <= x <= y;\nloop invariant i8: x == y ==> x >= sqrt(y);\nloop invariant i9: x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2;\nloop invariant i10: x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2;\nloop invariant i11: x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2;\nloop invariant i12: x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1)/2 <= y < (x + 1)^2/2;\nloop invariant i13: x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1)/2 <= y < (x + 1)^2/2 ==> x(x + 1)/2 + (x + 1)/2 <= y < (x + 1)^2/2 + (x + 1)/2;\nloop invariant i14: x == y ==> x < sqrt(y) ==> x^2 <= y < (x + 1)^2 ==> x^2 + x <= y < (x + 1)^2 ==> x(x + 1) <= y < (x + 1)^2 ==> x(x + 1)/2 <= y < (x + 1)^2/2 ==> x(x + 1)/2 + (x + 1)/2 <= y < (x + 1)^2/2 + (x + 1)/2 ==> x(x + 1)/2 + (x + 1)/2 <= y < (x + 1)^2/2 + (x + 1)/2 ==> x^2 + 3x/2 + 1/2 <= y < (x + 1)^2/2 + (x + 1)/2;\nloop invariant i15: y > 0;\nloop invariant i16: x > 0;\nloop invariant i17: y >= x;\nloop invariant i18: (x < y / x ==> x * x <= y && x <= y);\nloop invariant i19: (! (x < y / x) ==> x == y);\nloop invariant i20: x >= 1;\nloop invariant i21: x <= y;\nloop invariant i22: x >= y ==> x * x >= y;\nloop invariant i23: x < y ==> x == y / x;\nloop invariant i24: x >= y ==> x - 1 == y / x;\nloop invariant i25: x < y ==> x == y / x + 1;\nloop invariant i26: x >= y ==> x - 1 == y / x + 1;\nloop invariant i27: x < y ==> x == y / x - 1;\nloop invariant i28: x >= y ==> x - 1 == y / x - 1;\nloop invariant i29: 0 < x < y < 2^32;\nloop invariant i30: x * x >= y;\nloop invariant i31: x * x < y;\nloop invariant i32: 0 <= x < y;\nloop invariant i33: y <= x * x;\nloop invariant i34: x * x < y || x == y;\nloop invariant i35: 1 <= y;\nloop invariant i36: x * x <= y * y;\nloop invariant i37: y >= 0;\nloop invariant i38: x * x <= y * y / (y - 1);\nloop invariant i39: 0 <= y;\nloop invariant i40: x * x >= x;\nloop invariant i41: 0 < x <= y;\nloop invariant i42: y is a power of 2;\nloop invariant i43: x is a power of 2;\nloop invariant i44: x <= y / x;\nloop invariant i45: x * x > y / x;\nloop invariant i46: x * x * x <= y;\nloop invariant i47: x * x * x > y / x;\nloop invariant i48: x * x * x * x <= y;\nloop invariant i49: x * x * x * x > y / x;\nloop invariant i50: x * x * x * x * x <= y;\nloop invariant i51: x * x * x * x * x > y / x;\nloop invariant i52: x * x * x * x * x * x <= y;\nloop invariant i53: x * x * x * x * x * x > y / x;\nloop invariant i54: x * x * x * x * x * x * x <= y;\nloop invariant i55: x * x * x * x * x * x * x > y / x;\nloop invariant i56: x * x * x * x * x * x * x * x <= y;\nloop invariant i57: x * x * x * x * x * x * x * x > y / x;\nloop invariant i58: x * x * x * x * x * x * x * x * x <= y;\nloop invariant i59: x * x * x * x * x * x * x * x * x > y / x;\nloop invariant i60: x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant i61: x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant i62: x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant i63: x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant i64: x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant i65: x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant i66: x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant i67: x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant i68: x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant i69: x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant i70: x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant i71: x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant i72: x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant i73: x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant i74: x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant i75: x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant i76: x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant i77: x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant i78: x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x <= y;\nloop invariant i79: x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x > y / x;\nloop invariant i80: \\at(x, Pre) <= x;\nloop invariant i81: x < y ==> \\at(y, Pre) >= pow(2, log2(x));\nloop invariant i82: \\at(y, Pre) < x ==> y > x / y;\nloop invariant i83: 0 <= x;\nloop invariant i84: x^2 <= y;\nloop invariant i85: y > x;\nloop invariant i86: x > y / x;\nloop invariant i87: 0 <= y && y <= 100000;\nloop invariant i88: x >= 1 + (y - 1) * y / 2;\nloop invariant i89: y <= 100000;\nloop invariant i90: y >= 1;\nloop invariant i91: x >= y;\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
        "combined_annotation_num_solver_calls": 48,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  /*@\nloop invariant i1: 0 <= x <= y;\n\n\n\n\n\nloop invariant i7: 1 <= x <= y;\n\n\n\n\n\n\n\nloop invariant i15: y > 0;\nloop invariant i16: x > 0;\nloop invariant i17: y >= x;\nloop invariant i18: (x < y / x ==> x * x <= y && x <= y);\n\nloop invariant i20: x >= 1;\nloop invariant i21: x <= y;\nloop invariant i22: x >= y ==> x * x >= y;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: 1 <= y;\nloop invariant i36: x * x <= y * y;\nloop invariant i37: y >= 0;\n\nloop invariant i39: 0 <= y;\nloop invariant i40: x * x >= x;\nloop invariant i41: 0 < x <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i83: 0 <= x;\n\n\n\n\n\n\nloop invariant i90: y >= 1;\n\n*/\nwhile (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 89,
        "success_count": 79,
        "failure_count": 10,
        "success_rate": 0.8876404494382022
    }
}