{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops/for_infinite_loop_2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i % 2 == 0 ==> x == 0;\nloop invariant i % 2 == 1 ==> x == 1;\nloop invariant x == 1;\nloop invariant y == n;\nloop invariant i == n;\nloop invariant x >= y;\nloop invariant i >= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= unknown_int();\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant n > 0;\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == y * (i + 1);\nloop invariant i < n ==> x == y * (i + 1);\nloop invariant i == n ==> x == y * (n + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= x <= (n * i);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant x == 0;\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant unknown_int() > 0 ==> x != 0;\nloop invariant unknown_int() > 0 ==> i == n;\nloop invariant x == 0;\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant unknown_int() > 0 ==> x != 0;\nloop invariant unknown_int() > 0 ==> i == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n; loop invariant x == 0; loop invariant y == 0; loop invariant n > 0; loop invariant i == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= n;\nloop invariant x + y <= 3*n;\nloop invariant i <= n;\nloop invariant x + y >= i;\nloop invariant x + y <= i + n;\nloop invariant x + y >= i - n;\nloop invariant x + y <= i + 2*n;\nloop invariant x + y >= i - 2*n;\nloop invariant x + y >= i + n;\nloop invariant x + y <= i + 3*n;\nloop invariant x + y >= i - 3*n;\nloop invariant x + y >= i + 2*n;\nloop invariant x + y <= i + 4*n;\nloop invariant x + y >= i - 4*n;\nloop invariant x + y >= i + 3*n;\nloop invariant x + y <= i + 5*n;\nloop invariant x + y >= i - 5*n;\nloop invariant x + y >= i + 4*n;\nloop invariant x + y <= i + 6*n;\nloop invariant x + y >= i - 6*n;\nloop invariant x + y >= i + 5*n;\nloop invariant x + y <= i + 7*n;\nloop invariant x + y >= i - 7*n;\nloop invariant x + y >= i + 6*n;\nloop invariant x + y <= i + 8*n;\nloop invariant x + y >= i - 8*n;\nloop invariant x + y >= i + 7*n;\nloop invariant x + y <= i + 9*n;\nloop invariant x + y >= i - 9*n;\nloop invariant x + y >= i + 8*n;\nloop invariant x + y <= i + 10*n;\nloop invariant x + y >= i - 10*n;\nloop invariant x + y >= i + 9*n;\nloop invariant x + y <= i + 11*n;\nloop invariant x + y >= i - 11*n;\nloop invariant x + y >= i + 10*n;\nloop invariant x + y <= i + 12*n;\nloop invariant x + y >= i - 12*n;\nloop invariant x + y >= i + 11*n;\nloop invariant x + y <= i + 13*n;\nloop invariant x + y >= i - 13*n;\nloop invariant x + y >= i + 12*n;\nloop invariant x + y <= i + 14*n;\nloop invariant x + y >= i - 14*n;\nloop invariant x + y >= i + 13*n;\nloop invariant x + y <= i + 15*n;\nloop invariant x + y >= i - 15*n;\nloop invariant x + y >= i + 14*n;\nloop invariant x + y <= i + 16*n;\nloop invariant x + y >= i - 16*n;\nloop invariant x + y >= i + 15*n;\nloop invariant x + y <= i + 17*n;\nloop invariant x + y >= i - 17*n;\nloop invariant x + y >= i + 16*n;\nloop invariant x + y <= i + 18*n;\nloop invariant x + y >= i - 18*n;\nloop invariant x + y >= i + 17*n;\nloop invariant x + y <= i + 19*n;\nloop invariant x + y >= i - 19*n;\nloop invariant x + y >= i + 18*n;\nloop invariant x + y <= i + 20*n;\nloop invariant x + y >= i - 20*n;\nloop invariant x + y >= i + 19*n;\nloop invariant x + y <= i + 21*n;\nloop invariant x + y >= i - 21*n;\nloop invariant x + y >= i + 20*n;\nloop invariant x + y <= i + 22*n;\nloop invariant x + y >= i - 22*n;\nloop invariant x + y >= i + 21*n;\nloop invariant x + y <= i + 23*n;\nloop invariant x + y >= i - 23*n;\nloop invariant x + y >= i + 22*n;\nloop invariant x + y <= i + 24*n;\nloop invariant x + y >= i - 24*n;\nloop invariant x + y >= i + 23*n;\nloop invariant x + y <= i + 25*n;\nloop invariant x + y >= i - 25*n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant x == (i * (i - 1)) / 2;\nloop invariant y == i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n ==> x==0;\nloop invariant 0 <= i < n ==> x!=0;\nloop invariant 0 <= i <= n ==> x==0;\nloop invariant 0 <= i < n ==> x!=0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant y <= n - i;\nloop invariant x >= y + i;\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant y <= n - i;\nloop invariant x >= y + i;\nloop invariant x >= y;\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant y <= n - i;\nloop invariant x >= y + i;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant i <= n ==> x == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant y == 0 ==> i <= n;\nloop invariant i <= n ==> y == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> y >= 0;\nloop invariant y >= 0 ==> i <= n;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> y >= 0;\nloop invariant y >= 0 ==> i <= n;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> y >= 0;\nloop invariant y >= 0 ==> i <= n;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> y >= 0;\nloop invariant y >= 0 ==> i <= n;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x == i;\nloop invariant y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant x <= y;\nloop invariant x + y <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i % 2 == 0 ==> x == 0;\nloop invariant i % 2 == 1 ==> x == 1;\nloop invariant x == 1;\nloop invariant y == n;\nloop invariant i == n;\nloop invariant x >= y;\nloop invariant i >= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 1;\nloop invariant y >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\n\nloop invariant i3: i >= 0;\n\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: i % 2 == 0 ==> x == 0;\n\n\n\n\nloop invariant i12: x >= y;\n\n\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= unknown_int();\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant n > 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\n\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\nloop invariant i4: n > 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant x == y * (i + 1);\nloop invariant i < n ==> x == y * (i + 1);\nloop invariant i == n ==> x == y * (n + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: x == 0;\nloop invariant i4: y == 0;\nloop invariant i5: x == y * (i + 1);\nloop invariant i6: i < n ==> x == y * (i + 1);\nloop invariant i7: i == n ==> x == y * (n + 1);\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= x <= (n * i);\nloop invariant y == 0;\nloop invariant x == 0;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: y == 0;\nloop invariant i4: x == 0;\n\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x == 0;\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant unknown_int() > 0 ==> x != 0;\nloop invariant unknown_int() > 0 ==> i == n;\nloop invariant x == 0;\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant unknown_int() > 0 ==> x != 0;\nloop invariant unknown_int() > 0 ==> i == n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\nloop invariant i1: x == 0;\nloop invariant i2: 0 <= i;\n\n\n\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n; loop invariant x == 0; loop invariant y == 0; loop invariant n > 0; loop invariant i == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n; loop invariant x == 0; loop invariant y == 0; loop invariant n > 0; loop invariant i == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 52,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y >= 0;\nloop invariant x + y <= 2*n;\nloop invariant x + y >= n;\nloop invariant x + y <= 3*n;\nloop invariant i <= n;\nloop invariant x + y >= i;\nloop invariant x + y <= i + n;\nloop invariant x + y >= i - n;\nloop invariant x + y <= i + 2*n;\nloop invariant x + y >= i - 2*n;\nloop invariant x + y >= i + n;\nloop invariant x + y <= i + 3*n;\nloop invariant x + y >= i - 3*n;\nloop invariant x + y >= i + 2*n;\nloop invariant x + y <= i + 4*n;\nloop invariant x + y >= i - 4*n;\nloop invariant x + y >= i + 3*n;\nloop invariant x + y <= i + 5*n;\nloop invariant x + y >= i - 5*n;\nloop invariant x + y >= i + 4*n;\nloop invariant x + y <= i + 6*n;\nloop invariant x + y >= i - 6*n;\nloop invariant x + y >= i + 5*n;\nloop invariant x + y <= i + 7*n;\nloop invariant x + y >= i - 7*n;\nloop invariant x + y >= i + 6*n;\nloop invariant x + y <= i + 8*n;\nloop invariant x + y >= i - 8*n;\nloop invariant x + y >= i + 7*n;\nloop invariant x + y <= i + 9*n;\nloop invariant x + y >= i - 9*n;\nloop invariant x + y >= i + 8*n;\nloop invariant x + y <= i + 10*n;\nloop invariant x + y >= i - 10*n;\nloop invariant x + y >= i + 9*n;\nloop invariant x + y <= i + 11*n;\nloop invariant x + y >= i - 11*n;\nloop invariant x + y >= i + 10*n;\nloop invariant x + y <= i + 12*n;\nloop invariant x + y >= i - 12*n;\nloop invariant x + y >= i + 11*n;\nloop invariant x + y <= i + 13*n;\nloop invariant x + y >= i - 13*n;\nloop invariant x + y >= i + 12*n;\nloop invariant x + y <= i + 14*n;\nloop invariant x + y >= i - 14*n;\nloop invariant x + y >= i + 13*n;\nloop invariant x + y <= i + 15*n;\nloop invariant x + y >= i - 15*n;\nloop invariant x + y >= i + 14*n;\nloop invariant x + y <= i + 16*n;\nloop invariant x + y >= i - 16*n;\nloop invariant x + y >= i + 15*n;\nloop invariant x + y <= i + 17*n;\nloop invariant x + y >= i - 17*n;\nloop invariant x + y >= i + 16*n;\nloop invariant x + y <= i + 18*n;\nloop invariant x + y >= i - 18*n;\nloop invariant x + y >= i + 17*n;\nloop invariant x + y <= i + 19*n;\nloop invariant x + y >= i - 19*n;\nloop invariant x + y >= i + 18*n;\nloop invariant x + y <= i + 20*n;\nloop invariant x + y >= i - 20*n;\nloop invariant x + y >= i + 19*n;\nloop invariant x + y <= i + 21*n;\nloop invariant x + y >= i - 21*n;\nloop invariant x + y >= i + 20*n;\nloop invariant x + y <= i + 22*n;\nloop invariant x + y >= i - 22*n;\nloop invariant x + y >= i + 21*n;\nloop invariant x + y <= i + 23*n;\nloop invariant x + y >= i - 23*n;\nloop invariant x + y >= i + 22*n;\nloop invariant x + y <= i + 24*n;\nloop invariant x + y >= i - 24*n;\nloop invariant x + y >= i + 23*n;\nloop invariant x + y <= i + 25*n;\nloop invariant x + y >= i - 25*n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x + y >= 0;\nloop invariant i5: x + y <= 2*n;\n\nloop invariant i7: x + y <= 3*n;\n\n\n\n\nloop invariant i12: x + y <= i + 2*n;\n\n\nloop invariant i15: x + y <= i + 3*n;\n\n\nloop invariant i18: x + y <= i + 4*n;\n\n\nloop invariant i21: x + y <= i + 5*n;\n\n\nloop invariant i24: x + y <= i + 6*n;\n\n\nloop invariant i27: x + y <= i + 7*n;\n\n\nloop invariant i30: x + y <= i + 8*n;\n\n\nloop invariant i33: x + y <= i + 9*n;\n\n\nloop invariant i36: x + y <= i + 10*n;\n\n\nloop invariant i39: x + y <= i + 11*n;\n\n\nloop invariant i42: x + y <= i + 12*n;\n\n\nloop invariant i45: x + y <= i + 13*n;\n\n\nloop invariant i48: x + y <= i + 14*n;\n\n\nloop invariant i51: x + y <= i + 15*n;\n\n\nloop invariant i54: x + y <= i + 16*n;\n\n\nloop invariant i57: x + y <= i + 17*n;\n\n\nloop invariant i60: x + y <= i + 18*n;\n\n\nloop invariant i63: x + y <= i + 19*n;\n\n\nloop invariant i66: x + y <= i + 20*n;\n\n\nloop invariant i69: x + y <= i + 21*n;\n\n\nloop invariant i72: x + y <= i + 22*n;\n\n\nloop invariant i75: x + y <= i + 23*n;\n\n\nloop invariant i78: x + y <= i + 24*n;\n\n\nloop invariant i81: x + y <= i + 25*n;\n\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 2147483647;\nloop invariant x == (i * (i - 1)) / 2;\nloop invariant y == i;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\n\n\n\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n ==> x==0;\nloop invariant 0 <= i < n ==> x!=0;\nloop invariant 0 <= i <= n ==> x==0;\nloop invariant 0 <= i < n ==> x!=0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n ==> x==0;\n\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant y <= n - i;\nloop invariant x >= y + i;\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant y <= n - i;\nloop invariant x >= y + i;\nloop invariant x >= y;\nloop invariant 0 <= i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x >= y;\nloop invariant y >= 1;\nloop invariant y <= n - i;\nloop invariant x >= y + i;\nloop invariant x >= y;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: i >= 0;\n\nloop invariant i6: y <= n;\nloop invariant i7: x >= y;\n\n\n\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x == 0;\nloop invariant y == 0;\nloop invariant i <= n ==> x == 0;\nloop invariant x == 0 ==> i >= 0;\nloop invariant y == 0 ==> i <= n;\nloop invariant i <= n ==> y == 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> y >= 0;\nloop invariant y >= 0 ==> i <= n;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> y >= 0;\nloop invariant y >= 0 ==> i <= n;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> y >= 0;\nloop invariant y >= 0 ==> i <= n;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> y >= 0;\nloop invariant y >= 0 ==> i <= n;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x >= 0;\nloop invariant i <= n ==> x >= 0;\nloop invariant x >= 0 ==> i <= n;\nloop invariant i <= n ==> x <= n * (n + 1) / 2;\nloop invariant x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant y <= n ==> i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\n\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\nloop invariant i4: i <= n ==> x == 0;\nloop invariant i5: x == 0 ==> i >= 0;\n\nloop invariant i7: i <= n ==> y == 0;\nloop invariant i8: x == 0 ==> y == 0;\nloop invariant i9: i <= n ==> x <= n * (n + 1) / 2;\n\nloop invariant i11: x <= n * (n + 1) / 2 ==> y <= n;\n\nloop invariant i13: i <= n ==> x >= 0;\n\nloop invariant i15: i <= n ==> y >= 0;\n\nloop invariant i17: x >= 0 ==> y >= 0;\nloop invariant i18: y >= 0 ==> x >= 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\n\n\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant x == i;\nloop invariant y == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\n\n\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\n\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= x <= 1;\nloop invariant 0 <= y <= 1;\nloop invariant x <= y;\nloop invariant x + y <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\nloop invariant i <= n;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\n\nloop invariant i2: 0 <= x <= 1;\nloop invariant i3: 0 <= y <= 1;\nloop invariant i4: x <= y;\nloop invariant i5: x + y <= n;\n\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 29: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: i >= 0;\nloop invariant i4: i <= n;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: i % 2 == 0 ==> x == 0;\nloop invariant i8: i % 2 == 1 ==> x == 1;\nloop invariant i9: x == 1;\nloop invariant i10: y == n;\nloop invariant i11: i == n;\nloop invariant i12: x >= y;\nloop invariant i13: i >= n;\nloop invariant i14: x >= 1;\nloop invariant i15: 0 <= i <= unknown_int();\nloop invariant i16: x == 0;\nloop invariant i17: y == 0;\nloop invariant i18: n > 0;\nloop invariant i19: x == y * (i + 1);\nloop invariant i20: i < n ==> x == y * (i + 1);\nloop invariant i21: i == n ==> x == y * (n + 1);\nloop invariant i22: 0 <= i;\nloop invariant i23: 0 <= x <= (n * i);\nloop invariant i24: unknown_int() > 0 ==> x != 0;\nloop invariant i25: unknown_int() > 0 ==> i == n;\nloop invariant i26: 0 <= i <= n; loop invariant x == 0; loop invariant y == 0; loop invariant n > 0; loop invariant i == 0;\nloop invariant i27: 0 <= i <= n;\nloop invariant i28: x + y >= 0;\nloop invariant i29: x + y <= 2*n;\nloop invariant i30: x + y >= n;\nloop invariant i31: x + y <= 3*n;\nloop invariant i32: x + y >= i;\nloop invariant i33: x + y <= i + n;\nloop invariant i34: x + y >= i - n;\nloop invariant i35: x + y <= i + 2*n;\nloop invariant i36: x + y >= i - 2*n;\nloop invariant i37: x + y >= i + n;\nloop invariant i38: x + y <= i + 3*n;\nloop invariant i39: x + y >= i - 3*n;\nloop invariant i40: x + y >= i + 2*n;\nloop invariant i41: x + y <= i + 4*n;\nloop invariant i42: x + y >= i - 4*n;\nloop invariant i43: x + y >= i + 3*n;\nloop invariant i44: x + y <= i + 5*n;\nloop invariant i45: x + y >= i - 5*n;\nloop invariant i46: x + y >= i + 4*n;\nloop invariant i47: x + y <= i + 6*n;\nloop invariant i48: x + y >= i - 6*n;\nloop invariant i49: x + y >= i + 5*n;\nloop invariant i50: x + y <= i + 7*n;\nloop invariant i51: x + y >= i - 7*n;\nloop invariant i52: x + y >= i + 6*n;\nloop invariant i53: x + y <= i + 8*n;\nloop invariant i54: x + y >= i - 8*n;\nloop invariant i55: x + y >= i + 7*n;\nloop invariant i56: x + y <= i + 9*n;\nloop invariant i57: x + y >= i - 9*n;\nloop invariant i58: x + y >= i + 8*n;\nloop invariant i59: x + y <= i + 10*n;\nloop invariant i60: x + y >= i - 10*n;\nloop invariant i61: x + y >= i + 9*n;\nloop invariant i62: x + y <= i + 11*n;\nloop invariant i63: x + y >= i - 11*n;\nloop invariant i64: x + y >= i + 10*n;\nloop invariant i65: x + y <= i + 12*n;\nloop invariant i66: x + y >= i - 12*n;\nloop invariant i67: x + y >= i + 11*n;\nloop invariant i68: x + y <= i + 13*n;\nloop invariant i69: x + y >= i - 13*n;\nloop invariant i70: x + y >= i + 12*n;\nloop invariant i71: x + y <= i + 14*n;\nloop invariant i72: x + y >= i - 14*n;\nloop invariant i73: x + y >= i + 13*n;\nloop invariant i74: x + y <= i + 15*n;\nloop invariant i75: x + y >= i - 15*n;\nloop invariant i76: x + y >= i + 14*n;\nloop invariant i77: x + y <= i + 16*n;\nloop invariant i78: x + y >= i - 16*n;\nloop invariant i79: x + y >= i + 15*n;\nloop invariant i80: x + y <= i + 17*n;\nloop invariant i81: x + y >= i - 17*n;\nloop invariant i82: x + y >= i + 16*n;\nloop invariant i83: x + y <= i + 18*n;\nloop invariant i84: x + y >= i - 18*n;\nloop invariant i85: x + y >= i + 17*n;\nloop invariant i86: x + y <= i + 19*n;\nloop invariant i87: x + y >= i - 19*n;\nloop invariant i88: x + y >= i + 18*n;\nloop invariant i89: x + y <= i + 20*n;\nloop invariant i90: x + y >= i - 20*n;\nloop invariant i91: x + y >= i + 19*n;\nloop invariant i92: x + y <= i + 21*n;\nloop invariant i93: x + y >= i - 21*n;\nloop invariant i94: x + y >= i + 20*n;\nloop invariant i95: x + y <= i + 22*n;\nloop invariant i96: x + y >= i - 22*n;\nloop invariant i97: x + y >= i + 21*n;\nloop invariant i98: x + y <= i + 23*n;\nloop invariant i99: x + y >= i - 23*n;\nloop invariant i100: x + y >= i + 22*n;\nloop invariant i101: x + y <= i + 24*n;\nloop invariant i102: x + y >= i - 24*n;\nloop invariant i103: x + y >= i + 23*n;\nloop invariant i104: x + y <= i + 25*n;\nloop invariant i105: x + y >= i - 25*n;\nloop invariant i106: 0 <= i <= 2147483647;\nloop invariant i107: x == (i * (i - 1)) / 2;\nloop invariant i108: y == i;\nloop invariant i109: 0 <= i <= n ==> x==0;\nloop invariant i110: 0 <= i < n ==> x!=0;\nloop invariant i111: y <= n;\nloop invariant i112: y >= 1;\nloop invariant i113: y <= n - i;\nloop invariant i114: x >= y + i;\nloop invariant i115: i <= n ==> x == 0;\nloop invariant i116: x == 0 ==> i >= 0;\nloop invariant i117: y == 0 ==> i <= n;\nloop invariant i118: i <= n ==> y == 0;\nloop invariant i119: x == 0 ==> y == 0;\nloop invariant i120: i <= n ==> x <= n * (n + 1) / 2;\nloop invariant i121: x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant i122: x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant i123: y <= n ==> i <= n;\nloop invariant i124: i <= n ==> x >= 0;\nloop invariant i125: x >= 0 ==> i <= n;\nloop invariant i126: i <= n ==> y >= 0;\nloop invariant i127: y >= 0 ==> i <= n;\nloop invariant i128: x >= 0 ==> y >= 0;\nloop invariant i129: y >= 0 ==> x >= 0;\nloop invariant i130: i1;\nloop invariant i131: i2;\nloop invariant i132: x == i;\nloop invariant i133: 0 <= x <= 1;\nloop invariant i134: 0 <= y <= 1;\nloop invariant i135: x <= y;\nloop invariant i136: x + y <= n;\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 40,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  /*@\nloop invariant i1: 0 <= y <= 100000;\n\nloop invariant i3: i >= 0;\nloop invariant i4: i <= n;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: i % 2 == 0 ==> x == 0;\n\n\n\n\nloop invariant i12: x >= y;\n\n\n\nloop invariant i16: x == 0;\nloop invariant i17: y == 0;\nloop invariant i18: n > 0;\nloop invariant i19: x == y * (i + 1);\nloop invariant i20: i < n ==> x == y * (i + 1);\nloop invariant i21: i == n ==> x == y * (n + 1);\nloop invariant i22: 0 <= i;\nloop invariant i23: 0 <= x <= (n * i);\n\n\nloop invariant i26: 0 <= i <= n; loop invariant x == 0; loop invariant y == 0; loop invariant n > 0; loop invariant i == 0;\nloop invariant i27: 0 <= i <= n;\nloop invariant i28: x + y >= 0;\nloop invariant i29: x + y <= 2*n;\n\nloop invariant i31: x + y <= 3*n;\nloop invariant i32: x + y >= i;\nloop invariant i33: x + y <= i + n;\nloop invariant i34: x + y >= i - n;\nloop invariant i35: x + y <= i + 2*n;\nloop invariant i36: x + y >= i - 2*n;\n\nloop invariant i38: x + y <= i + 3*n;\nloop invariant i39: x + y >= i - 3*n;\n\nloop invariant i41: x + y <= i + 4*n;\nloop invariant i42: x + y >= i - 4*n;\n\nloop invariant i44: x + y <= i + 5*n;\nloop invariant i45: x + y >= i - 5*n;\n\nloop invariant i47: x + y <= i + 6*n;\nloop invariant i48: x + y >= i - 6*n;\n\nloop invariant i50: x + y <= i + 7*n;\nloop invariant i51: x + y >= i - 7*n;\n\nloop invariant i53: x + y <= i + 8*n;\nloop invariant i54: x + y >= i - 8*n;\n\nloop invariant i56: x + y <= i + 9*n;\nloop invariant i57: x + y >= i - 9*n;\n\nloop invariant i59: x + y <= i + 10*n;\nloop invariant i60: x + y >= i - 10*n;\n\nloop invariant i62: x + y <= i + 11*n;\nloop invariant i63: x + y >= i - 11*n;\n\nloop invariant i65: x + y <= i + 12*n;\nloop invariant i66: x + y >= i - 12*n;\n\nloop invariant i68: x + y <= i + 13*n;\nloop invariant i69: x + y >= i - 13*n;\n\nloop invariant i71: x + y <= i + 14*n;\nloop invariant i72: x + y >= i - 14*n;\n\nloop invariant i74: x + y <= i + 15*n;\nloop invariant i75: x + y >= i - 15*n;\n\nloop invariant i77: x + y <= i + 16*n;\nloop invariant i78: x + y >= i - 16*n;\n\nloop invariant i80: x + y <= i + 17*n;\nloop invariant i81: x + y >= i - 17*n;\n\nloop invariant i83: x + y <= i + 18*n;\nloop invariant i84: x + y >= i - 18*n;\n\nloop invariant i86: x + y <= i + 19*n;\nloop invariant i87: x + y >= i - 19*n;\n\nloop invariant i89: x + y <= i + 20*n;\nloop invariant i90: x + y >= i - 20*n;\n\nloop invariant i92: x + y <= i + 21*n;\nloop invariant i93: x + y >= i - 21*n;\n\nloop invariant i95: x + y <= i + 22*n;\nloop invariant i96: x + y >= i - 22*n;\n\nloop invariant i98: x + y <= i + 23*n;\nloop invariant i99: x + y >= i - 23*n;\n\nloop invariant i101: x + y <= i + 24*n;\nloop invariant i102: x + y >= i - 24*n;\n\nloop invariant i104: x + y <= i + 25*n;\nloop invariant i105: x + y >= i - 25*n;\nloop invariant i106: 0 <= i <= 2147483647;\nloop invariant i107: x == (i * (i - 1)) / 2;\nloop invariant i108: y == i;\nloop invariant i109: 0 <= i <= n ==> x==0;\n\nloop invariant i111: y <= n;\n\nloop invariant i113: y <= n - i;\nloop invariant i114: x >= y + i;\nloop invariant i115: i <= n ==> x == 0;\nloop invariant i116: x == 0 ==> i >= 0;\nloop invariant i117: y == 0 ==> i <= n;\nloop invariant i118: i <= n ==> y == 0;\nloop invariant i119: x == 0 ==> y == 0;\nloop invariant i120: i <= n ==> x <= n * (n + 1) / 2;\nloop invariant i121: x <= n * (n + 1) / 2 ==> i <= n;\nloop invariant i122: x <= n * (n + 1) / 2 ==> y <= n;\nloop invariant i123: y <= n ==> i <= n;\nloop invariant i124: i <= n ==> x >= 0;\nloop invariant i125: x >= 0 ==> i <= n;\nloop invariant i126: i <= n ==> y >= 0;\nloop invariant i127: y >= 0 ==> i <= n;\nloop invariant i128: x >= 0 ==> y >= 0;\nloop invariant i129: y >= 0 ==> x >= 0;\n\n\nloop invariant i132: x == i;\nloop invariant i133: 0 <= x <= 1;\nloop invariant i134: 0 <= y <= 1;\nloop invariant i135: x <= y;\nloop invariant i136: x + y <= n;\n*/\nfor(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n\n  }\n  {;\n//@ assert(x!=0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv3.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sum_natnum.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt3.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt4.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt5.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt6.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt7.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt8.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt9.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/count_up_down-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/for_infinite_loop_2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_9.c"
        ],
        "skipped": [],
        "total": 192,
        "success_count": 172,
        "failure_count": 20,
        "success_rate": 0.8958333333333334
    }
}