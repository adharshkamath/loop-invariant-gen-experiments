{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops/trex03-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= d1 <= x1, 0 <= d2 <= x2, 0 <= d3 <= x3;\nloop invariant x1-d1 >= 0, x2-d2 >= 0, x3-d3 >= 0;\nloop invariant x1 >= x2, x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1-d1 == x1 && x2-d2 == x2 && x3-d3 == x3 ==> x1 == 0 || x2 == 0 || x3 == 0;\nloop invariant !((x1-d1 == x1 && x2-d2 == x2 && x3-d3 == x3) ==> x1 == 0 || x2 == 0 || x3 == 0) ==> x1 != 0 && x2 != 0 && x3 != 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint() && 0 <= x2 <= unknown_uint() && 0 <= x3 <= unknown_uint();\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 1 <= d1 <= unknown_uint();\nloop invariant 1 <= d2 <= unknown_uint();\nloop invariant 1 <= d3 <= unknown_uint();\nloop invariant 0 <= c1 <= 1;\nloop invariant 0 <= c2 <= 1;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 > 0 ==> c1 || c2;\nloop invariant x2 > 0 ==> c2;\nloop invariant x3 > 0 ==> !c1 && !c2;\nloop invariant x1 > 0 ==> x1 >= d1;\nloop invariant x2 > 0 ==> x2 >= d2;\nloop invariant x3 > 0 ==> x3 >= d3;\nloop invariant x1 > 0 ==> x1 <= unknown_uint();\nloop invariant x2 > 0 ==> x2 <= unknown_uint();\nloop invariant x3 > 0 ==> x3 <= unknown_uint();\nloop invariant x1 > 0 ==> d1 <= x1;\nloop invariant x2 > 0 ==> d2 <= x2;\nloop invariant x3 > 0 ==> d3 <= x3;\nloop invariant x1 > 0 ==> d1 >= 1;\nloop invariant x2 > 0 ==> d2 >= 1;\nloop invariant x3 > 0 ==> d3 >= 1;\nloop invariant x1 > 0 ==> c1 || c2;\nloop invariant x2 > 0 ==> c2;\nloop invariant x3 > 0 ==> !c1 && !c2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint(), 0 <= x2 <= unknown_uint(), 0 <= x3 <= unknown_uint();\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant -unknown_uint() <= x1 <= unknown_uint(), -unknown_uint() <= x2 <= unknown_uint(), -unknown_uint() <= x3 <= unknown_uint();\nloop invariant c1 ==> (x1 >= d1), c2 ==> (x2 >= d2);\nloop invariant !c1 ==> (x1 >= d1), !c2 ==> (x2 >= d2);\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 >= 0, d2 >= 0, d3 >= 0;\nloop invariant -unknown_uint() <= d1 <= unknown_uint(), -unknown_uint() <= d2 <= unknown_uint(), -unknown_uint() <= d3 <= unknown_uint();\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint(); loop invariant 0 <= x2 <= unknown_uint(); loop invariant 0 <= x3 <= unknown_uint(); loop invariant d1 >= 1; loop invariant d2 >= 1; loop invariant d3 >= 1; loop invariant c1 == 1 || c1 == 0; loop invariant c2 == 1 || c2 == 0; loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (0 - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (0 - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (0 - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) >= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) >= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) >= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= d1 <= x1;\nloop invariant 1 <= d2 <= x2;\nloop invariant 1 <= d3 <= x3;\nloop invariant (x1 == 0) ==> (x2 == 0 && x3 == 0);\nloop invariant (x1 == 0) ==> (c1 == 0 && c2 == 1);\nloop invariant (x2 == 0) ==> (c2 == 0 && c1 == 1);\nloop invariant (x3 == 0) ==> (c1 == 0 && c2 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 1 <= d1 <= 1;\nloop invariant 1 <= d2 <= 1;\nloop invariant 1 <= d3 <= 1;\nloop invariant c1 || c2;\nloop invariant !(c1 && c2);\nloop invariant x1 + x2 + x3 > 0;\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 - d1 >= 0 && x2 - d2 >= 0 && x3 - d3 >= 0);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0);\nloop invariant (x1 == 0 && x2 == 0 && x3 == 0) ==> (x1 == 0 && x2 == 0 && x3 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 0 <= d1 <= 4294967295;\nloop invariant 0 <= d2 <= 4294967295;\nloop invariant 0 <= d3 <= 4294967295;\nloop invariant c1 == 1 || c1 == 0;\nloop invariant c2 == 1 || c2 == 0;\nloop invariant ((x1 > 0 || x2 > 0 || x3 > 0) ==> (((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1)) && ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3))));\nloop invariant ((x1 > 0 || x2 > 0 || x3 > 0) ==> (((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0)) && ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0))));\nloop invariant (((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1)) ==> ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3)));\nloop invariant (((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0)) ==> ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0)));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 1 <= d1 <= unknown_uint();\nloop invariant 1 <= d2 <= unknown_uint();\nloop invariant 1 <= d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant unknown_bool() ==> (x1 > 0 && x2 > 0 && x3 > 0);\nloop invariant (unknown_bool() && c1) ==> (x1 >= d1);\nloop invariant (unknown_bool() && c2) ==> (x2 >= d2);\nloop invariant unknown_bool() ==> (x3 >= d3);\nloop invariant unknown_bool() ==> (x1 - d1 >= 0);\nloop invariant unknown_bool() ==> (x2 - d2 >= 0);\nloop invariant unknown_bool() ==> (x3 - d3 >= 0);\nloop invariant unknown_bool() ==> (x1 <= unknown_uint());\nloop invariant unknown_bool() ==> (x2 <= unknown_uint());\nloop invariant unknown_bool() ==> (x3 <= unknown_uint());\nloop invariant unknown_bool() ==> (d1 <= unknown_uint());\nloop invariant unknown_bool() ==> (d2 <= unknown_uint());\nloop invariant unknown_bool() ==> (d3 <= unknown_uint());\nloop invariant unknown_bool() ==> (c1 == unknown_bool());\nloop invariant unknown_bool() ==> (c2 == unknown_bool());\nloop invariant unknown_bool() ==> ((x1 - d1 <= x1) && (x1 - d1 >= 0));\nloop invariant unknown_bool() ==> ((x2 - d2 <= x2) && (x2 - d2 >= 0));\nloop invariant unknown_bool() ==> ((x3 - d3 <= x3) && (x3 - d3 >= 0));\nloop invariant unknown_bool() ==> ((d1 - d1 <= d1) && (d1 - d1 >= 0));\nloop invariant unknown_bool() ==> ((d2 - d2 <= d2) && (d2 - d2 >= 0));\nloop invariant unknown_bool() ==> ((d3 - d3 <= d3) && (d3 - d3 >= 0));\nloop invariant unknown_bool() ==> ((1 - 1 <= 1) && (1 - 1 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= x1) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= x2) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= x3) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= d1) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= d2) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= d3) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 1) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((x1 - x1 <= x1) && (x1 - x1 >= 0));\nloop invariant unknown_bool() ==> ((x2 - x2 <= x2) && (x2 - x2 >= 0));\nloop invariant unknown_bool() ==> ((x3 - x3 <= x3) && (x3 - x3 >= 0));\nloop invariant unknown_bool() ==> ((d1 - d1 <= d1) && (d1 - d1 >= 0));\nloop invariant unknown_bool() ==> ((d2 - d2 <= d2) && (d2 - d2 >= 0));\nloop invariant unknown_bool() ==> ((d3 - d3 <= d3) && (d3 - d3 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 1) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 0) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 0) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 0) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 0) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 0) && (0 - 0 >= 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 <= x1 + d1;\nloop invariant x2 <= x2 + d2;\nloop invariant x3 <= x3 + d3;\nloop invariant x1 >= x1 - d1;\nloop invariant x2 >= x2 - d2;\nloop invariant x3 >= x3 - d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= d1 <= x1;\nloop invariant 0 <= d2 <= x2;\nloop invariant 0 <= d3 <= x3;\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 0 < d1 <= unknown_uint();\nloop invariant 0 < d2 <= unknown_uint();\nloop invariant 0 < d3 <= unknown_uint();\nloop invariant c1 || c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 0 <= d1 <= 4294967295;\nloop invariant 0 <= d2 <= 4294967295;\nloop invariant 0 <= d3 <= 4294967295;\nloop invariant c1 == 0 || c1 == 1;\nloop invariant c2 == 0 || c2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\nloop invariant (x1 < x2 ==> x1 <= x3) ==> (x1 == 0);\nloop invariant (x2 < x3 ==> x2 <= x1) ==> (x2 == 0);\nloop invariant (x3 < x1 ==> x3 <= x2) ==> (x3 == 0);\nloop invariant !c1 || x1 >= d1;\nloop invariant !c2 || x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > d1 || x2 > d2 || x3 > d3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= 4294967295;\nloop invariant x2 <= 4294967295;\nloop invariant x3 <= 4294967295;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant d1 <= 4294967295;\nloop invariant d2 <= 4294967295;\nloop invariant d3 <= 4294967295;\nloop invariant c1 ==> (x1 == (x1 - d1));\nloop invariant c2 ==> (x2 == (x2 - d2));\nloop invariant !c1 && !c2 ==> (x3 == (x3 - d3));\nloop invariant c1 ==> (x1 >= 0);\nloop invariant c2 ==> (x2 >= 0);\nloop invariant !c1 && !c2 ==> (x3 >= 0);\nloop invariant c1 ==> (x1 <= 4294967295);\nloop invariant c2 ==> (x2 <= 4294967295);\nloop invariant !c1 && !c2 ==> (x3 <= 4294967295);\nloop invariant c1 ==> (x1 >= x1 - d1);\nloop invariant c2 ==> (x2 >= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 >= x3 - d3);\nloop invariant c1 ==> (x1 <= x1 - d1);\nloop invariant c2 ==> (x2 <= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 <= x3 - d3);\nloop invariant c1 ==> (x1 >= 0);\nloop invariant c2 ==> (x2 >= 0);\nloop invariant !c1 && !c2 ==> (x3 >= 0);\nloop invariant c1 ==> (x1 <= 4294967295);\nloop invariant c2 ==> (x2 <= 4294967295);\nloop invariant !c1 && !c2 ==> (x3 <= 4294967295);\nloop invariant c1 ==> (x1 >= x1 - d1);\nloop invariant c2 ==> (x2 >= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 >= x3 - d3);\nloop invariant c1 ==> (x1 <= x1 - d1);\nloop invariant c2 ==> (x2 <= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 <= x3 - d3);\nloop invariant c1 ==> (x1 >= 0);\nloop invariant c2 ==> (x2 >= 0);\nloop invariant !c1 && !c2 ==> (x3 >= 0);\nloop invariant c1 ==> (x1 <= 4294967295);\nloop invariant c2 ==> (x2 <= 4294967295);\nloop invariant !c1 && !c2 ==> (x3 <= 4294967295);\nloop invariant c1 ==> (x1 >= x1 - d1);\nloop invariant c2 ==> (x2 >= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 >= x3 - d3);\nloop invariant c1 ==> (x1 <= x1 - d1);\nloop invariant c2 ==> (x2 <= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 <= x3 - d3);\nloop invariant c1 ==> (x1 >= 0);\nloop invariant c2 ==> (x2 >= 0);\nloop invariant !c1 && !c2 ==> (x3 >= 0);\nloop invariant c1 ==> (x1 <= 4294967295);\nloop invariant c2 ==> (x2 <= 4294967295);\nloop invariant !c1 && !c2 ==> (x3 <= 4294967295);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= d1 <= x1, 0 <= d2 <= x2, 0 <= d3 <= x3;\nloop invariant x1-d1 >= 0, x2-d2 >= 0, x3-d3 >= 0;\nloop invariant x1 >= x2, x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1-d1 == x1 && x2-d2 == x2 && x3-d3 == x3 ==> x1 == 0 || x2 == 0 || x3 == 0;\nloop invariant !((x1-d1 == x1 && x2-d2 == x2 && x3-d3 == x3) ==> x1 == 0 || x2 == 0 || x3 == 0) ==> x1 != 0 && x2 != 0 && x3 != 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\nloop invariant i5: x1-d1 == x1 && x2-d2 == x2 && x3-d3 == x3 ==> x1 == 0 || x2 == 0 || x3 == 0;\nloop invariant i6: !((x1-d1 == x1 && x2-d2 == x2 && x3-d3 == x3) ==> x1 == 0 || x2 == 0 || x3 == 0) ==> x1 != 0 && x2 != 0 && x3 != 0;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint() && 0 <= x2 <= unknown_uint() && 0 <= x3 <= unknown_uint();\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant x1 >= 0 && x2 >= 0 && x3 >= 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\nloop invariant i2: x1 >= 0 && x2 >= 0 && x3 >= 0;\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 1 <= d1 <= unknown_uint();\nloop invariant 1 <= d2 <= unknown_uint();\nloop invariant 1 <= d3 <= unknown_uint();\nloop invariant 0 <= c1 <= 1;\nloop invariant 0 <= c2 <= 1;\nloop invariant x1 >= d1;\nloop invariant x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant x1 > 0 ==> c1 || c2;\nloop invariant x2 > 0 ==> c2;\nloop invariant x3 > 0 ==> !c1 && !c2;\nloop invariant x1 > 0 ==> x1 >= d1;\nloop invariant x2 > 0 ==> x2 >= d2;\nloop invariant x3 > 0 ==> x3 >= d3;\nloop invariant x1 > 0 ==> x1 <= unknown_uint();\nloop invariant x2 > 0 ==> x2 <= unknown_uint();\nloop invariant x3 > 0 ==> x3 <= unknown_uint();\nloop invariant x1 > 0 ==> d1 <= x1;\nloop invariant x2 > 0 ==> d2 <= x2;\nloop invariant x3 > 0 ==> d3 <= x3;\nloop invariant x1 > 0 ==> d1 >= 1;\nloop invariant x2 > 0 ==> d2 >= 1;\nloop invariant x3 > 0 ==> d3 >= 1;\nloop invariant x1 > 0 ==> c1 || c2;\nloop invariant x2 > 0 ==> c2;\nloop invariant x3 > 0 ==> !c1 && !c2;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: 0 <= c1 <= 1;\nloop invariant i8: 0 <= c2 <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i24: x1 > 0 ==> d1 >= 1;\nloop invariant i25: x2 > 0 ==> d2 >= 1;\nloop invariant i26: x3 > 0 ==> d3 >= 1;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint(), 0 <= x2 <= unknown_uint(), 0 <= x3 <= unknown_uint();\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant -unknown_uint() <= x1 <= unknown_uint(), -unknown_uint() <= x2 <= unknown_uint(), -unknown_uint() <= x3 <= unknown_uint();\nloop invariant c1 ==> (x1 >= d1), c2 ==> (x2 >= d2);\nloop invariant !c1 ==> (x1 >= d1), !c2 ==> (x2 >= d2);\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 >= 0, d2 >= 0, d3 >= 0;\nloop invariant -unknown_uint() <= d1 <= unknown_uint(), -unknown_uint() <= d2 <= unknown_uint(), -unknown_uint() <= d3 <= unknown_uint();\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant x1 >= d1, x2 >= d2, x3 >= d3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint(); loop invariant 0 <= x2 <= unknown_uint(); loop invariant 0 <= x3 <= unknown_uint(); loop invariant d1 >= 1; loop invariant d2 >= 1; loop invariant d3 >= 1; loop invariant c1 == 1 || c1 == 0; loop invariant c2 == 1 || c2 == 0; loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (0 - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (0 - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (0 - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) >= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) >= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) >= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= d1 <= x1;\nloop invariant 1 <= d2 <= x2;\nloop invariant 1 <= d3 <= x3;\nloop invariant (x1 == 0) ==> (x2 == 0 && x3 == 0);\nloop invariant (x1 == 0) ==> (c1 == 0 && c2 == 1);\nloop invariant (x2 == 0) ==> (c2 == 0 && c1 == 1);\nloop invariant (x3 == 0) ==> (c1 == 0 && c2 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 1 <= d1 <= 1;\nloop invariant 1 <= d2 <= 1;\nloop invariant 1 <= d3 <= 1;\nloop invariant c1 || c2;\nloop invariant !(c1 && c2);\nloop invariant x1 + x2 + x3 > 0;\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 - d1 >= 0 && x2 - d2 >= 0 && x3 - d3 >= 0);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0);\nloop invariant (x1 == 0 && x2 == 0 && x3 == 0) ==> (x1 == 0 && x2 == 0 && x3 == 0);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= 4294967295;\nloop invariant i2: 0 <= x2 <= 4294967295;\nloop invariant i3: 0 <= x3 <= 4294967295;\nloop invariant i4: 1 <= d1 <= 1;\nloop invariant i5: 1 <= d2 <= 1;\nloop invariant i6: 1 <= d3 <= 1;\n\n\n\nloop invariant i10: (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 - d1 >= 0 && x2 - d2 >= 0 && x3 - d3 >= 0);\nloop invariant i11: (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0);\nloop invariant i12: (x1 == 0 && x2 == 0 && x3 == 0) ==> (x1 == 0 && x2 == 0 && x3 == 0);\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 0 <= d1 <= 4294967295;\nloop invariant 0 <= d2 <= 4294967295;\nloop invariant 0 <= d3 <= 4294967295;\nloop invariant c1 == 1 || c1 == 0;\nloop invariant c2 == 1 || c2 == 0;\nloop invariant ((x1 > 0 || x2 > 0 || x3 > 0) ==> (((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1)) && ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3))));\nloop invariant ((x1 > 0 || x2 > 0 || x3 > 0) ==> (((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0)) && ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0))));\nloop invariant (((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1)) ==> ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3)));\nloop invariant (((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0)) ==> ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0)));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= 4294967295;\nloop invariant i2: 0 <= x2 <= 4294967295;\nloop invariant i3: 0 <= x3 <= 4294967295;\nloop invariant i4: 0 <= d1 <= 4294967295;\nloop invariant i5: 0 <= d2 <= 4294967295;\nloop invariant i6: 0 <= d3 <= 4294967295;\nloop invariant i7: c1 == 1 || c1 == 0;\nloop invariant i8: c2 == 1 || c2 == 0;\nloop invariant i9: ((x1 > 0 || x2 > 0 || x3 > 0) ==> (((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1)) && ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3))));\nloop invariant i10: ((x1 > 0 || x2 > 0 || x3 > 0) ==> (((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0)) && ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0))));\nloop invariant i11: (((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1)) ==> ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3)));\nloop invariant i12: (((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0)) ==> ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0)));\nloop invariant i13: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1));\nloop invariant i14: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0));\nloop invariant i15: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0));\nloop invariant i16: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3));\nloop invariant i17: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 41,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 1 <= d1 <= unknown_uint();\nloop invariant 1 <= d2 <= unknown_uint();\nloop invariant 1 <= d3 <= unknown_uint();\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\nloop invariant unknown_bool() ==> (x1 > 0 && x2 > 0 && x3 > 0);\nloop invariant (unknown_bool() && c1) ==> (x1 >= d1);\nloop invariant (unknown_bool() && c2) ==> (x2 >= d2);\nloop invariant unknown_bool() ==> (x3 >= d3);\nloop invariant unknown_bool() ==> (x1 - d1 >= 0);\nloop invariant unknown_bool() ==> (x2 - d2 >= 0);\nloop invariant unknown_bool() ==> (x3 - d3 >= 0);\nloop invariant unknown_bool() ==> (x1 <= unknown_uint());\nloop invariant unknown_bool() ==> (x2 <= unknown_uint());\nloop invariant unknown_bool() ==> (x3 <= unknown_uint());\nloop invariant unknown_bool() ==> (d1 <= unknown_uint());\nloop invariant unknown_bool() ==> (d2 <= unknown_uint());\nloop invariant unknown_bool() ==> (d3 <= unknown_uint());\nloop invariant unknown_bool() ==> (c1 == unknown_bool());\nloop invariant unknown_bool() ==> (c2 == unknown_bool());\nloop invariant unknown_bool() ==> ((x1 - d1 <= x1) && (x1 - d1 >= 0));\nloop invariant unknown_bool() ==> ((x2 - d2 <= x2) && (x2 - d2 >= 0));\nloop invariant unknown_bool() ==> ((x3 - d3 <= x3) && (x3 - d3 >= 0));\nloop invariant unknown_bool() ==> ((d1 - d1 <= d1) && (d1 - d1 >= 0));\nloop invariant unknown_bool() ==> ((d2 - d2 <= d2) && (d2 - d2 >= 0));\nloop invariant unknown_bool() ==> ((d3 - d3 <= d3) && (d3 - d3 >= 0));\nloop invariant unknown_bool() ==> ((1 - 1 <= 1) && (1 - 1 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= x1) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= x2) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= x3) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= d1) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= d2) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= d3) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 1) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((x1 - x1 <= x1) && (x1 - x1 >= 0));\nloop invariant unknown_bool() ==> ((x2 - x2 <= x2) && (x2 - x2 >= 0));\nloop invariant unknown_bool() ==> ((x3 - x3 <= x3) && (x3 - x3 >= 0));\nloop invariant unknown_bool() ==> ((d1 - d1 <= d1) && (d1 - d1 >= 0));\nloop invariant unknown_bool() ==> ((d2 - d2 <= d2) && (d2 - d2 >= 0));\nloop invariant unknown_bool() ==> ((d3 - d3 <= d3) && (d3 - d3 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 1) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 0) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 0) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 0) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 0) && (0 - 0 >= 0));\nloop invariant unknown_bool() ==> ((0 - 0 <= 0) && (0 - 0 >= 0));\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant x1 <= x1 + d1;\nloop invariant x2 <= x2 + d2;\nloop invariant x3 <= x3 + d3;\nloop invariant x1 >= x1 - d1;\nloop invariant x2 >= x2 - d2;\nloop invariant x3 >= x3 - d3;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\nloop invariant x2 <= x2 + d2 * unknown_uint();\nloop invariant x3 <= x3 + d3 * unknown_uint();\nloop invariant x1 >= x1 - d1 * unknown_uint();\nloop invariant x2 >= x2 - d2 * unknown_uint();\nloop invariant x3 >= x3 - d3 * unknown_uint();\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= x1 + d1 * unknown_uint();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1;\nloop invariant i2: 0 <= x2;\nloop invariant i3: 0 <= x3;\nloop invariant i4: x1 <= x1 + d1;\nloop invariant i5: x2 <= x2 + d2;\nloop invariant i6: x3 <= x3 + d3;\nloop invariant i7: x1 >= x1 - d1;\nloop invariant i8: x2 >= x2 - d2;\nloop invariant i9: x3 >= x3 - d3;\nloop invariant i10: x1 >= 0;\nloop invariant i11: x2 >= 0;\nloop invariant i12: x3 >= 0;\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= d1 <= x1;\nloop invariant 0 <= d2 <= x2;\nloop invariant 0 <= d3 <= x3;\nloop invariant 0 <= x1;\nloop invariant 0 <= x2;\nloop invariant 0 <= x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\nloop invariant i4: 0 <= x1;\nloop invariant i5: 0 <= x2;\nloop invariant i6: 0 <= x3;\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= unknown_uint();\nloop invariant 0 <= x2 <= unknown_uint();\nloop invariant 0 <= x3 <= unknown_uint();\nloop invariant 0 < d1 <= unknown_uint();\nloop invariant 0 < d2 <= unknown_uint();\nloop invariant 0 < d3 <= unknown_uint();\nloop invariant c1 || c2;\nloop invariant c1 == unknown_bool();\nloop invariant c2 == unknown_bool();\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant 0 <= d1 <= 4294967295;\nloop invariant 0 <= d2 <= 4294967295;\nloop invariant 0 <= d3 <= 4294967295;\nloop invariant c1 == 0 || c1 == 1;\nloop invariant c2 == 0 || c2 == 1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= 4294967295;\nloop invariant i2: 0 <= x2 <= 4294967295;\nloop invariant i3: 0 <= x3 <= 4294967295;\nloop invariant i4: 0 <= d1 <= 4294967295;\nloop invariant i5: 0 <= d2 <= 4294967295;\nloop invariant i6: 0 <= d3 <= 4294967295;\nloop invariant i7: c1 == 0 || c1 == 1;\nloop invariant i8: c2 == 0 || c2 == 1;\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x1 == 0 || x2 == 0 || x3 == 0;\nloop invariant (x1 < x2 ==> x1 <= x3) ==> (x1 == 0);\nloop invariant (x2 < x3 ==> x2 <= x1) ==> (x2 == 0);\nloop invariant (x3 < x1 ==> x3 <= x2) ==> (x3 == 0);\nloop invariant !c1 || x1 >= d1;\nloop invariant !c2 || x2 >= d2;\nloop invariant x3 >= d3;\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > d1 || x2 > d2 || x3 > d3);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 4294967295;\nloop invariant 0 <= x2 <= 4294967295;\nloop invariant 0 <= x3 <= 4294967295;\nloop invariant x1 >= 0;\nloop invariant x2 >= 0;\nloop invariant x3 >= 0;\nloop invariant x1 <= 4294967295;\nloop invariant x2 <= 4294967295;\nloop invariant x3 <= 4294967295;\nloop invariant d1 >= 1;\nloop invariant d2 >= 1;\nloop invariant d3 >= 1;\nloop invariant d1 <= 4294967295;\nloop invariant d2 <= 4294967295;\nloop invariant d3 <= 4294967295;\nloop invariant c1 ==> (x1 == (x1 - d1));\nloop invariant c2 ==> (x2 == (x2 - d2));\nloop invariant !c1 && !c2 ==> (x3 == (x3 - d3));\nloop invariant c1 ==> (x1 >= 0);\nloop invariant c2 ==> (x2 >= 0);\nloop invariant !c1 && !c2 ==> (x3 >= 0);\nloop invariant c1 ==> (x1 <= 4294967295);\nloop invariant c2 ==> (x2 <= 4294967295);\nloop invariant !c1 && !c2 ==> (x3 <= 4294967295);\nloop invariant c1 ==> (x1 >= x1 - d1);\nloop invariant c2 ==> (x2 >= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 >= x3 - d3);\nloop invariant c1 ==> (x1 <= x1 - d1);\nloop invariant c2 ==> (x2 <= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 <= x3 - d3);\nloop invariant c1 ==> (x1 >= 0);\nloop invariant c2 ==> (x2 >= 0);\nloop invariant !c1 && !c2 ==> (x3 >= 0);\nloop invariant c1 ==> (x1 <= 4294967295);\nloop invariant c2 ==> (x2 <= 4294967295);\nloop invariant !c1 && !c2 ==> (x3 <= 4294967295);\nloop invariant c1 ==> (x1 >= x1 - d1);\nloop invariant c2 ==> (x2 >= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 >= x3 - d3);\nloop invariant c1 ==> (x1 <= x1 - d1);\nloop invariant c2 ==> (x2 <= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 <= x3 - d3);\nloop invariant c1 ==> (x1 >= 0);\nloop invariant c2 ==> (x2 >= 0);\nloop invariant !c1 && !c2 ==> (x3 >= 0);\nloop invariant c1 ==> (x1 <= 4294967295);\nloop invariant c2 ==> (x2 <= 4294967295);\nloop invariant !c1 && !c2 ==> (x3 <= 4294967295);\nloop invariant c1 ==> (x1 >= x1 - d1);\nloop invariant c2 ==> (x2 >= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 >= x3 - d3);\nloop invariant c1 ==> (x1 <= x1 - d1);\nloop invariant c2 ==> (x2 <= x2 - d2);\nloop invariant !c1 && !c2 ==> (x3 <= x3 - d3);\nloop invariant c1 ==> (x1 >= 0);\nloop invariant c2 ==> (x2 >= 0);\nloop invariant !c1 && !c2 ==> (x3 >= 0);\nloop invariant c1 ==> (x1 <= 4294967295);\nloop invariant c2 ==> (x2 <= 4294967295);\nloop invariant !c1 && !c2 ==> (x3 <= 4294967295);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= x1 <= 4294967295;\nloop invariant i2: 0 <= x2 <= 4294967295;\nloop invariant i3: 0 <= x3 <= 4294967295;\nloop invariant i4: x1 >= 0;\nloop invariant i5: x2 >= 0;\nloop invariant i6: x3 >= 0;\nloop invariant i7: x1 <= 4294967295;\nloop invariant i8: x2 <= 4294967295;\nloop invariant i9: x3 <= 4294967295;\nloop invariant i10: d1 >= 1;\nloop invariant i11: d2 >= 1;\nloop invariant i12: d3 >= 1;\nloop invariant i13: d1 <= 4294967295;\nloop invariant i14: d2 <= 4294967295;\nloop invariant i15: d3 <= 4294967295;\n\n\n\nloop invariant i19: c1 ==> (x1 >= 0);\nloop invariant i20: c2 ==> (x2 >= 0);\nloop invariant i21: !c1 && !c2 ==> (x3 >= 0);\nloop invariant i22: c1 ==> (x1 <= 4294967295);\nloop invariant i23: c2 ==> (x2 <= 4294967295);\nloop invariant i24: !c1 && !c2 ==> (x3 <= 4294967295);\nloop invariant i25: c1 ==> (x1 >= x1 - d1);\nloop invariant i26: c2 ==> (x2 >= x2 - d2);\nloop invariant i27: !c1 && !c2 ==> (x3 >= x3 - d3);\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token ','",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\nloop invariant i1: 0 <= d1 <= x1, 0 <= d2 <= x2, 0 <= d3 <= x3;\nloop invariant i2: x1-d1 >= 0, x2-d2 >= 0, x3-d3 >= 0;\nloop invariant i3: x1 >= x2, x1 >= x3;\nloop invariant i4: x2 >= x3;\nloop invariant i5: x1-d1 == x1 && x2-d2 == x2 && x3-d3 == x3 ==> x1 == 0 || x2 == 0 || x3 == 0;\nloop invariant i6: !((x1-d1 == x1 && x2-d2 == x2 && x3-d3 == x3) ==> x1 == 0 || x2 == 0 || x3 == 0) ==> x1 != 0 && x2 != 0 && x3 != 0;\nloop invariant i7: 0 <= x1 <= unknown_uint() && 0 <= x2 <= unknown_uint() && 0 <= x3 <= unknown_uint();\nloop invariant i8: x1 >= 0 && x2 >= 0 && x3 >= 0;\nloop invariant i9: x1 >= unknown_uint() - d1 * c1 && x2 >= unknown_uint() - d2 * c2 && x3 >= unknown_uint() - d3 * (1 - c1 - c2);\nloop invariant i10: 0 <= x1 <= unknown_uint();\nloop invariant i11: 0 <= x2 <= unknown_uint();\nloop invariant i12: 0 <= x3 <= unknown_uint();\nloop invariant i13: 1 <= d1 <= unknown_uint();\nloop invariant i14: 1 <= d2 <= unknown_uint();\nloop invariant i15: 1 <= d3 <= unknown_uint();\nloop invariant i16: 0 <= c1 <= 1;\nloop invariant i17: 0 <= c2 <= 1;\nloop invariant i18: x1 >= d1;\nloop invariant i19: x2 >= d2;\nloop invariant i20: x3 >= d3;\nloop invariant i21: x1 > 0 ==> c1 || c2;\nloop invariant i22: x2 > 0 ==> c2;\nloop invariant i23: x3 > 0 ==> !c1 && !c2;\nloop invariant i24: x1 > 0 ==> x1 >= d1;\nloop invariant i25: x2 > 0 ==> x2 >= d2;\nloop invariant i26: x3 > 0 ==> x3 >= d3;\nloop invariant i27: x1 > 0 ==> x1 <= unknown_uint();\nloop invariant i28: x2 > 0 ==> x2 <= unknown_uint();\nloop invariant i29: x3 > 0 ==> x3 <= unknown_uint();\nloop invariant i30: x1 > 0 ==> d1 <= x1;\nloop invariant i31: x2 > 0 ==> d2 <= x2;\nloop invariant i32: x3 > 0 ==> d3 <= x3;\nloop invariant i33: x1 > 0 ==> d1 >= 1;\nloop invariant i34: x2 > 0 ==> d2 >= 1;\nloop invariant i35: x3 > 0 ==> d3 >= 1;\nloop invariant i36: 0 <= x1 <= unknown_uint(), 0 <= x2 <= unknown_uint(), 0 <= x3 <= unknown_uint();\nloop invariant i37: d1 <= 1, d2 <= 1, d3 <= 1;\nloop invariant i38: -unknown_uint() <= x1 <= unknown_uint(), -unknown_uint() <= x2 <= unknown_uint(), -unknown_uint() <= x3 <= unknown_uint();\nloop invariant i39: c1 ==> (x1 >= d1), c2 ==> (x2 >= d2);\nloop invariant i40: !c1 ==> (x1 >= d1), !c2 ==> (x2 >= d2);\nloop invariant i41: x1 >= 0, x2 >= 0, x3 >= 0;\nloop invariant i42: d1 >= 0, d2 >= 0, d3 >= 0;\nloop invariant i43: -unknown_uint() <= d1 <= unknown_uint(), -unknown_uint() <= d2 <= unknown_uint(), -unknown_uint() <= d3 <= unknown_uint();\nloop invariant i44: x1 >= d1, x2 >= d2, x3 >= d3;\nloop invariant i45: 0 <= x1 <= unknown_uint(); loop invariant 0 <= x2 <= unknown_uint(); loop invariant 0 <= x3 <= unknown_uint(); loop invariant d1 >= 1; loop invariant d2 >= 1; loop invariant d3 >= 1; loop invariant c1 == 1 || c1 == 0; loop invariant c2 == 1 || c2 == 0; loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (0 - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (0 - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (0 - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) >= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) >= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) >= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1); loop invariant x1 - d1 * (unknown_uint() - x1 + 1) <= x1 - d1 * (unknown_uint() - x1 + 1); loop invariant x2 - d2 * (unknown_uint() - x2 + 1) <= x2 - d2 * (unknown_uint() - x2 + 1); loop invariant x3 - d3 * (unknown_uint() - x3 + 1) <= x3 - d3 * (unknown_uint() - x3 + 1);\nloop invariant i46: 1 <= d1 <= x1;\nloop invariant i47: 1 <= d2 <= x2;\nloop invariant i48: 1 <= d3 <= x3;\nloop invariant i49: (x1 == 0) ==> (x2 == 0 && x3 == 0);\nloop invariant i50: (x1 == 0) ==> (c1 == 0 && c2 == 1);\nloop invariant i51: (x2 == 0) ==> (c2 == 0 && c1 == 1);\nloop invariant i52: (x3 == 0) ==> (c1 == 0 && c2 == 0);\nloop invariant i53: 0 <= x1 <= 4294967295;\nloop invariant i54: 0 <= x2 <= 4294967295;\nloop invariant i55: 0 <= x3 <= 4294967295;\nloop invariant i56: 1 <= d1 <= 1;\nloop invariant i57: 1 <= d2 <= 1;\nloop invariant i58: 1 <= d3 <= 1;\nloop invariant i59: c1 || c2;\nloop invariant i60: !(c1 && c2);\nloop invariant i61: x1 + x2 + x3 > 0;\nloop invariant i62: (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 - d1 >= 0 && x2 - d2 >= 0 && x3 - d3 >= 0);\nloop invariant i63: (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0);\nloop invariant i64: (x1 == 0 && x2 == 0 && x3 == 0) ==> (x1 == 0 && x2 == 0 && x3 == 0);\nloop invariant i65: 0 <= d1 <= 4294967295;\nloop invariant i66: 0 <= d2 <= 4294967295;\nloop invariant i67: 0 <= d3 <= 4294967295;\nloop invariant i68: c1 == 1 || c1 == 0;\nloop invariant i69: c2 == 1 || c2 == 0;\nloop invariant i70: ((x1 > 0 || x2 > 0 || x3 > 0) ==> (((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1)) && ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3))));\nloop invariant i71: ((x1 > 0 || x2 > 0 || x3 > 0) ==> (((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0)) && ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0))));\nloop invariant i72: (((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1)) ==> ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3)));\nloop invariant i73: (((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0)) ==> ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0)));\nloop invariant i74: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1));\nloop invariant i75: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0));\nloop invariant i76: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0));\nloop invariant i77: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3));\nloop invariant i78: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\nloop invariant i79: c1 == unknown_bool();\nloop invariant i80: c2 == unknown_bool();\nloop invariant i81: unknown_bool() ==> (x1 > 0 && x2 > 0 && x3 > 0);\nloop invariant i82: (unknown_bool() && c1) ==> (x1 >= d1);\nloop invariant i83: (unknown_bool() && c2) ==> (x2 >= d2);\nloop invariant i84: unknown_bool() ==> (x3 >= d3);\nloop invariant i85: unknown_bool() ==> (x1 - d1 >= 0);\nloop invariant i86: unknown_bool() ==> (x2 - d2 >= 0);\nloop invariant i87: unknown_bool() ==> (x3 - d3 >= 0);\nloop invariant i88: unknown_bool() ==> (x1 <= unknown_uint());\nloop invariant i89: unknown_bool() ==> (x2 <= unknown_uint());\nloop invariant i90: unknown_bool() ==> (x3 <= unknown_uint());\nloop invariant i91: unknown_bool() ==> (d1 <= unknown_uint());\nloop invariant i92: unknown_bool() ==> (d2 <= unknown_uint());\nloop invariant i93: unknown_bool() ==> (d3 <= unknown_uint());\nloop invariant i94: unknown_bool() ==> (c1 == unknown_bool());\nloop invariant i95: unknown_bool() ==> (c2 == unknown_bool());\nloop invariant i96: unknown_bool() ==> ((x1 - d1 <= x1) && (x1 - d1 >= 0));\nloop invariant i97: unknown_bool() ==> ((x2 - d2 <= x2) && (x2 - d2 >= 0));\nloop invariant i98: unknown_bool() ==> ((x3 - d3 <= x3) && (x3 - d3 >= 0));\nloop invariant i99: unknown_bool() ==> ((d1 - d1 <= d1) && (d1 - d1 >= 0));\nloop invariant i100: unknown_bool() ==> ((d2 - d2 <= d2) && (d2 - d2 >= 0));\nloop invariant i101: unknown_bool() ==> ((d3 - d3 <= d3) && (d3 - d3 >= 0));\nloop invariant i102: unknown_bool() ==> ((1 - 1 <= 1) && (1 - 1 >= 0));\nloop invariant i103: unknown_bool() ==> ((0 - 0 <= x1) && (0 - 0 >= 0));\nloop invariant i104: unknown_bool() ==> ((0 - 0 <= x2) && (0 - 0 >= 0));\nloop invariant i105: unknown_bool() ==> ((0 - 0 <= x3) && (0 - 0 >= 0));\nloop invariant i106: unknown_bool() ==> ((0 - 0 <= d1) && (0 - 0 >= 0));\nloop invariant i107: unknown_bool() ==> ((0 - 0 <= d2) && (0 - 0 >= 0));\nloop invariant i108: unknown_bool() ==> ((0 - 0 <= d3) && (0 - 0 >= 0));\nloop invariant i109: unknown_bool() ==> ((0 - 0 <= 1) && (0 - 0 >= 0));\nloop invariant i110: unknown_bool() ==> ((x1 - x1 <= x1) && (x1 - x1 >= 0));\nloop invariant i111: unknown_bool() ==> ((x2 - x2 <= x2) && (x2 - x2 >= 0));\nloop invariant i112: unknown_bool() ==> ((x3 - x3 <= x3) && (x3 - x3 >= 0));\nloop invariant i113: unknown_bool() ==> ((0 - 0 <= 0) && (0 - 0 >= 0));\nloop invariant i114: 0 <= x1;\nloop invariant i115: 0 <= x2;\nloop invariant i116: 0 <= x3;\nloop invariant i117: x1 <= x1 + d1;\nloop invariant i118: x2 <= x2 + d2;\nloop invariant i119: x3 <= x3 + d3;\nloop invariant i120: x1 >= x1 - d1;\nloop invariant i121: x2 >= x2 - d2;\nloop invariant i122: x3 >= x3 - d3;\nloop invariant i123: x1 >= 0;\nloop invariant i124: x2 >= 0;\nloop invariant i125: x3 >= 0;\nloop invariant i126: x1 <= x1 + d1 * unknown_uint();\nloop invariant i127: x2 <= x2 + d2 * unknown_uint();\nloop invariant i128: x3 <= x3 + d3 * unknown_uint();\nloop invariant i129: x1 >= x1 - d1 * unknown_uint();\nloop invariant i130: x2 >= x2 - d2 * unknown_uint();\nloop invariant i131: x3 >= x3 - d3 * unknown_uint();\nloop invariant i132: 0 <= d1 <= x1;\nloop invariant i133: 0 <= d2 <= x2;\nloop invariant i134: 0 <= d3 <= x3;\nloop invariant i135: d1 + d2 + d3 > 0 ==> x1 + x2 + x3 > 0;\nloop invariant i136: d1 + d2 + d3 > 0 ==> x1 + x2 + x3 <= 3 * x3;\nloop invariant i137: x1 + x2 + x3 > 0 ==> d1 + d2 + d3 <= x1 + x2 + x3;\nloop invariant i138: 0 < d1 <= unknown_uint();\nloop invariant i139: 0 < d2 <= unknown_uint();\nloop invariant i140: 0 < d3 <= unknown_uint();\nloop invariant i141: c1 == 0 || c1 == 1;\nloop invariant i142: c2 == 0 || c2 == 1;\nloop invariant i143: x1 == 0 || x2 == 0 || x3 == 0;\nloop invariant i144: (x1 < x2 ==> x1 <= x3) ==> (x1 == 0);\nloop invariant i145: (x2 < x3 ==> x2 <= x1) ==> (x2 == 0);\nloop invariant i146: (x3 < x1 ==> x3 <= x2) ==> (x3 == 0);\nloop invariant i147: !c1 || x1 >= d1;\nloop invariant i148: !c2 || x2 >= d2;\nloop invariant i149: (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\nloop invariant i150: (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > d1 || x2 > d2 || x3 > d3);\nloop invariant i151: x1 <= 4294967295;\nloop invariant i152: x2 <= 4294967295;\nloop invariant i153: x3 <= 4294967295;\nloop invariant i154: d1 >= 1;\nloop invariant i155: d2 >= 1;\nloop invariant i156: d3 >= 1;\nloop invariant i157: d1 <= 4294967295;\nloop invariant i158: d2 <= 4294967295;\nloop invariant i159: d3 <= 4294967295;\nloop invariant i160: c1 ==> (x1 == (x1 - d1));\nloop invariant i161: c2 ==> (x2 == (x2 - d2));\nloop invariant i162: !c1 && !c2 ==> (x3 == (x3 - d3));\nloop invariant i163: c1 ==> (x1 >= 0);\nloop invariant i164: c2 ==> (x2 >= 0);\nloop invariant i165: !c1 && !c2 ==> (x3 >= 0);\nloop invariant i166: c1 ==> (x1 <= 4294967295);\nloop invariant i167: c2 ==> (x2 <= 4294967295);\nloop invariant i168: !c1 && !c2 ==> (x3 <= 4294967295);\nloop invariant i169: c1 ==> (x1 >= x1 - d1);\nloop invariant i170: c2 ==> (x2 >= x2 - d2);\nloop invariant i171: !c1 && !c2 ==> (x3 >= x3 - d3);\nloop invariant i172: c1 ==> (x1 <= x1 - d1);\nloop invariant i173: c2 ==> (x2 <= x2 - d2);\nloop invariant i174: !c1 && !c2 ==> (x3 <= x3 - d3);\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 74,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  /*@\n\n\n\n\nloop invariant i5: x1-d1 == x1 && x2-d2 == x2 && x3-d3 == x3 ==> x1 == 0 || x2 == 0 || x3 == 0;\nloop invariant i6: !((x1-d1 == x1 && x2-d2 == x2 && x3-d3 == x3) ==> x1 == 0 || x2 == 0 || x3 == 0) ==> x1 != 0 && x2 != 0 && x3 != 0;\n\nloop invariant i8: x1 >= 0 && x2 >= 0 && x3 >= 0;\n\n\n\n\n\n\n\nloop invariant i16: 0 <= c1 <= 1;\nloop invariant i17: 0 <= c2 <= 1;\n\n\n\n\n\n\nloop invariant i24: x1 > 0 ==> x1 >= d1;\nloop invariant i25: x2 > 0 ==> x2 >= d2;\nloop invariant i26: x3 > 0 ==> x3 >= d3;\n\n\n\nloop invariant i30: x1 > 0 ==> d1 <= x1;\nloop invariant i31: x2 > 0 ==> d2 <= x2;\nloop invariant i32: x3 > 0 ==> d3 <= x3;\nloop invariant i33: x1 > 0 ==> d1 >= 1;\nloop invariant i34: x2 > 0 ==> d2 >= 1;\nloop invariant i35: x3 > 0 ==> d3 >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i53: 0 <= x1 <= 4294967295;\nloop invariant i54: 0 <= x2 <= 4294967295;\nloop invariant i55: 0 <= x3 <= 4294967295;\nloop invariant i56: 1 <= d1 <= 1;\nloop invariant i57: 1 <= d2 <= 1;\nloop invariant i58: 1 <= d3 <= 1;\n\n\n\nloop invariant i62: (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 - d1 >= 0 && x2 - d2 >= 0 && x3 - d3 >= 0);\nloop invariant i63: (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0);\nloop invariant i64: (x1 == 0 && x2 == 0 && x3 == 0) ==> (x1 == 0 && x2 == 0 && x3 == 0);\nloop invariant i65: 0 <= d1 <= 4294967295;\nloop invariant i66: 0 <= d2 <= 4294967295;\nloop invariant i67: 0 <= d3 <= 4294967295;\nloop invariant i68: c1 == 1 || c1 == 0;\nloop invariant i69: c2 == 1 || c2 == 0;\nloop invariant i70: ((x1 > 0 || x2 > 0 || x3 > 0) ==> (((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1)) && ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3))));\nloop invariant i71: ((x1 > 0 || x2 > 0 || x3 > 0) ==> (((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0)) && ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0))));\nloop invariant i72: (((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1)) ==> ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3)));\nloop invariant i73: (((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0)) ==> ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0)));\nloop invariant i74: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (d1 >= 1 && d2 >= 1 && d3 >= 1));\nloop invariant i75: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c1 == 1 || c1 == 0));\nloop invariant i76: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (c2 == 1 || c2 == 0));\nloop invariant i77: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= x1 - d1 && x2 >= x2 - d2 && x3 >= x3 - d3));\nloop invariant i78: ((x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 > 0 && x2 > 0 && x3 > 0));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i114: 0 <= x1;\nloop invariant i115: 0 <= x2;\nloop invariant i116: 0 <= x3;\nloop invariant i117: x1 <= x1 + d1;\nloop invariant i118: x2 <= x2 + d2;\nloop invariant i119: x3 <= x3 + d3;\nloop invariant i120: x1 >= x1 - d1;\nloop invariant i121: x2 >= x2 - d2;\nloop invariant i122: x3 >= x3 - d3;\nloop invariant i123: x1 >= 0;\nloop invariant i124: x2 >= 0;\nloop invariant i125: x3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i141: c1 == 0 || c1 == 1;\nloop invariant i142: c2 == 0 || c2 == 1;\n\n\n\n\n\n\nloop invariant i149: (x1 > 0 && x2 > 0 && x3 > 0) ==> (x1 >= d1 && x2 >= d2 && x3 >= d3);\n\nloop invariant i151: x1 <= 4294967295;\nloop invariant i152: x2 <= 4294967295;\nloop invariant i153: x3 <= 4294967295;\nloop invariant i154: d1 >= 1;\nloop invariant i155: d2 >= 1;\nloop invariant i156: d3 >= 1;\nloop invariant i157: d1 <= 4294967295;\nloop invariant i158: d2 <= 4294967295;\nloop invariant i159: d3 <= 4294967295;\n\n\n\nloop invariant i163: c1 ==> (x1 >= 0);\nloop invariant i164: c2 ==> (x2 >= 0);\nloop invariant i165: !c1 && !c2 ==> (x3 >= 0);\nloop invariant i166: c1 ==> (x1 <= 4294967295);\nloop invariant i167: c2 ==> (x2 <= 4294967295);\nloop invariant i168: !c1 && !c2 ==> (x3 <= 4294967295);\nloop invariant i169: c1 ==> (x1 >= x1 - d1);\nloop invariant i170: c2 ==> (x2 >= x2 - d2);\nloop invariant i171: !c1 && !c2 ==> (x3 >= x3 - d3);\n\n\n\n*/\nwhile(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/eq2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/afnp2014.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/bhmr2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/css2003.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gj2007b.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/hhk2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_k.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/gauss_sum.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-simple/nested_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/loopv3.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sum_natnum.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt3.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt4.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt5.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt6.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt7.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt8.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/sumt9.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/count_up_down-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum04-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/terminator_02-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/terminator_03-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/trex03-2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/const.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/cggmp2005.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gr2006.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-new/count_by_nondet.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_9.c"
        ],
        "skipped": [],
        "total": 196,
        "success_count": 176,
        "failure_count": 20,
        "success_rate": 0.8979591836734694
    }
}