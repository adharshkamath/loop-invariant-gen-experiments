{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x == y + (y < 0xfff0 ? 1 : 2);\nloop invariant 0 <= y <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant (x < 0xfff0) ==> (x % 2 == 0 && x < 0x0fffffff);\nloop invariant (x >= 0xfff0) ==> (x % 2 == 0 && x <= 0x0fffffff);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant if (0 <= x < 0xfff0) then (x % 2 == 0);\nloop invariant if (0xfff0 <= x < 0x0fffffff) then (x % 2 == 1);\n*/\n```",
            "```\n/*@\nloop invariant y <= x <= 0x0fffffff;\nloop invariant y % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant y <= 2 * x;\nloop invariant (y <= x) && (x <= 0x0fffffff);\nloop invariant (y % 2 == 0) && (x % 2 == 0);\nloop invariant (y <= 2 * x);\nloop invariant y <= x <= 0x0fffffff;\nloop invariant y % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant y <= 2 * x;\nloop invariant (y <= x) && (x <= 0x0fffffff);\nloop invariant (y % 2 == 0) && (x % 2 == 0);\nloop invariant (y <= 2 * x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2 == 0);\nloop invariant (x < 0xfff0) ==> (x == 0);\nloop invariant !( (x < 0xfff0) && (x % 2 == 1) );\nloop invariant !( (x >= 0xfff0) && (x % 2 == 0) );\nloop invariant (x >= 0xfff0) ==> (x % 2 == 0);\nloop invariant (x % 2 == 1) ==> (x < 0xfff0);\nloop invariant (x <= 0x0fffffff) ==> (!(x % 2 == 0) || !(x < 0xfff0));\nloop invariant (x <= 0x0fffffff) ==> (!(x % 2 == 1) || !(x >= 0xfff0));\nloop invariant (x > 0x0fffffff) ==> (x % 2 == 0);\nloop invariant (x % 2 == 0) ==> (x <= 0x0fffffff);\nloop invariant !( (x % 2 == 1) && (x <= 0x0fffffff) );\nloop invariant !( (x % 2 == 0) && (x > 0x0fffffff) );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x < 0x1fffffff;\n*/\n```",
            "```\n/*@\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x >= 0x0fffffff;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x >= 0x0fffffff;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 0x0fffffff;\nloop invariant (x % 2) == 0 ==> !(x % 2);\nloop invariant x % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\nloop invariant (x >= 0x0fffffff) ==> (x % 2) == 0;\nloop invariant (x < 0xfff0) ==> (x % 2) == 0;\nloop invariant (x >= 0xfff0) ==> (x % 2) == 0;\nloop invariant (x >= 0xfff0) ==> (x % 2) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x <= 0xfff;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x <= 0xfff;\nloop invariant x % 2 == 1 ==> x >= 0xfff1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant if x < 0xfff0 then x < 0x0fffffff else x <= 0xffffffff;\nloop invariant if x < 0xfff0 then x >= 0 else x >= 2;\nloop invariant if x < 0xfff0 then x % 2 == 0 else x % 2 == 1;\nloop invariant x % 2 == 0 ==> !(x % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x == y + (y < 0xfff0 ? 1 : 2);\nloop invariant 0 <= y <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0;\nloop invariant (x < 0xfff0) ==> (x % 2 == 0 && x < 0x0fffffff);\nloop invariant (x >= 0xfff0) ==> (x % 2 == 0 && x <= 0x0fffffff);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant if (0 <= x < 0xfff0) then (x % 2 == 0);\nloop invariant if (0xfff0 <= x < 0x0fffffff) then (x % 2 == 1);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant y <= x <= 0x0fffffff;\nloop invariant y % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant y <= 2 * x;\nloop invariant (y <= x) && (x <= 0x0fffffff);\nloop invariant (y % 2 == 0) && (x % 2 == 0);\nloop invariant (y <= 2 * x);\nloop invariant y <= x <= 0x0fffffff;\nloop invariant y % 2 == 0;\nloop invariant x % 2 == 0;\nloop invariant y <= 2 * x;\nloop invariant (y <= x) && (x <= 0x0fffffff);\nloop invariant (y % 2 == 0) && (x % 2 == 0);\nloop invariant (y <= 2 * x);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2 == 0);\nloop invariant (x < 0xfff0) ==> (x == 0);\nloop invariant !( (x < 0xfff0) && (x % 2 == 1) );\nloop invariant !( (x >= 0xfff0) && (x % 2 == 0) );\nloop invariant (x >= 0xfff0) ==> (x % 2 == 0);\nloop invariant (x % 2 == 1) ==> (x < 0xfff0);\nloop invariant (x <= 0x0fffffff) ==> (!(x % 2 == 0) || !(x < 0xfff0));\nloop invariant (x <= 0x0fffffff) ==> (!(x % 2 == 1) || !(x >= 0xfff0));\nloop invariant (x > 0x0fffffff) ==> (x % 2 == 0);\nloop invariant (x % 2 == 0) ==> (x <= 0x0fffffff);\nloop invariant !( (x % 2 == 1) && (x <= 0x0fffffff) );\nloop invariant !( (x % 2 == 0) && (x > 0x0fffffff) );\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n\n\nloop invariant i6: (x >= 0xfff0) ==> (x % 2 == 0);\nloop invariant i7: (x % 2 == 1) ==> (x < 0xfff0);\n\nloop invariant i9: (x <= 0x0fffffff) ==> (!(x % 2 == 1) || !(x >= 0xfff0));\nloop invariant i10: (x > 0x0fffffff) ==> (x % 2 == 0);\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 1 ==> x < 0xfff0;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 0 ==> x < 0x1fffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x % 2 == 1 ==> x < 0xfff0;\n\nloop invariant i4: x % 2 == 0 ==> x < 0x1fffffff;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x >= 0x0fffffff;\nloop invariant x == 0;\nloop invariant x >= 0;\nloop invariant x >= 0x0fffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 0x0fffffff;\nloop invariant (x % 2) == 0 ==> !(x % 2);\nloop invariant x % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: (x % 2) == 0 ==> !(x % 2);\nloop invariant i4: x % 2 == 1 ==> x % 2 == 1;\nloop invariant i5: x % 2 == 0 ==> x % 2 == 0;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\nloop invariant (x >= 0x0fffffff) ==> (x % 2) == 0;\nloop invariant (x < 0xfff0) ==> (x % 2) == 0;\nloop invariant (x >= 0xfff0) ==> (x % 2) == 0;\nloop invariant (x >= 0xfff0) ==> (x % 2) == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\nloop invariant i3: (x >= 0x0fffffff) ==> (x % 2) == 0;\n\nloop invariant i5: (x >= 0xfff0) ==> (x % 2) == 0;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x <= 0xfff;\nloop invariant x % 2 == 0 ==> x >= 0xfff0;\nloop invariant x % 2 == 1 ==> x <= 0xfff;\nloop invariant x % 2 == 1 ==> x >= 0xfff1;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant if x < 0xfff0 then x < 0x0fffffff else x <= 0xffffffff;\nloop invariant if x < 0xfff0 then x >= 0 else x >= 2;\nloop invariant if x < 0xfff0 then x % 2 == 0 else x % 2 == 1;\nloop invariant x % 2 == 0 ==> !(x % 2);\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n\nloop invariant i5: x % 2 == 0 ==> !(x % 2);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x % 2) == 0;\n*/\n```",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: 0 <= x <= 0x0fffffff;\nloop invariant i2: x == y + (y < 0xfff0 ? 1 : 2);\nloop invariant i3: 0 <= y <= 0x0fffffff;\nloop invariant i4: x % 2 == 0;\nloop invariant i5: (x < 0xfff0) ==> (x % 2 == 0 && x < 0x0fffffff);\nloop invariant i6: (x >= 0xfff0) ==> (x % 2 == 0 && x <= 0x0fffffff);\nloop invariant i7: if (0 <= x < 0xfff0) then (x % 2 == 0);\nloop invariant i8: if (0xfff0 <= x < 0x0fffffff) then (x % 2 == 1);\nloop invariant i9: y <= x <= 0x0fffffff;\nloop invariant i10: y % 2 == 0;\nloop invariant i11: y <= 2 * x;\nloop invariant i12: (y <= x) && (x <= 0x0fffffff);\nloop invariant i13: (y % 2 == 0) && (x % 2 == 0);\nloop invariant i14: (y <= 2 * x);\nloop invariant i15: (x % 2 == 0);\nloop invariant i16: (x < 0xfff0) ==> (x == 0);\nloop invariant i17: !( (x < 0xfff0) && (x % 2 == 1) );\nloop invariant i18: !( (x >= 0xfff0) && (x % 2 == 0) );\nloop invariant i19: (x >= 0xfff0) ==> (x % 2 == 0);\nloop invariant i20: (x % 2 == 1) ==> (x < 0xfff0);\nloop invariant i21: (x <= 0x0fffffff) ==> (!(x % 2 == 0) || !(x < 0xfff0));\nloop invariant i22: (x <= 0x0fffffff) ==> (!(x % 2 == 1) || !(x >= 0xfff0));\nloop invariant i23: (x > 0x0fffffff) ==> (x % 2 == 0);\nloop invariant i24: (x % 2 == 0) ==> (x <= 0x0fffffff);\nloop invariant i25: !( (x % 2 == 1) && (x <= 0x0fffffff) );\nloop invariant i26: !( (x % 2 == 0) && (x > 0x0fffffff) );\nloop invariant i27: x % 2 == 1 ==> x < 0xfff0;\nloop invariant i28: x % 2 == 0 ==> x >= 0xfff0;\nloop invariant i29: x % 2 == 0 ==> x < 0x1fffffff;\nloop invariant i30: x == 0;\nloop invariant i31: x >= 0;\nloop invariant i32: x >= 0x0fffffff;\nloop invariant i33: x <= 0x0fffffff;\nloop invariant i34: x < 0x0fffffff;\nloop invariant i35: (x % 2) == 0 ==> !(x % 2);\nloop invariant i36: x % 2 == 1 ==> x % 2 == 1;\nloop invariant i37: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i38: (x % 2) == 0;\nloop invariant i39: (x >= 0x0fffffff) ==> (x % 2) == 0;\nloop invariant i40: (x < 0xfff0) ==> (x % 2) == 0;\nloop invariant i41: (x >= 0xfff0) ==> (x % 2) == 0;\nloop invariant i42: x % 2 == 0 ==> x <= 0xfff;\nloop invariant i43: x % 2 == 1 ==> x <= 0xfff;\nloop invariant i44: x % 2 == 1 ==> x >= 0xfff1;\nloop invariant i45: if x < 0xfff0 then x < 0x0fffffff else x <= 0xffffffff;\nloop invariant i46: if x < 0xfff0 then x >= 0 else x >= 2;\nloop invariant i47: if x < 0xfff0 then x % 2 == 0 else x % 2 == 1;\nloop invariant i48: x % 2 == 0 ==> !(x % 2);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 36,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: (x >= 0xfff0) ==> (x % 2 == 0);\nloop invariant i20: (x % 2 == 1) ==> (x < 0xfff0);\n\nloop invariant i22: (x <= 0x0fffffff) ==> (!(x % 2 == 1) || !(x >= 0xfff0));\nloop invariant i23: (x > 0x0fffffff) ==> (x % 2 == 0);\n\n\n\nloop invariant i27: x % 2 == 1 ==> x < 0xfff0;\n\nloop invariant i29: x % 2 == 0 ==> x < 0x1fffffff;\n\nloop invariant i31: x >= 0;\n\n\n\nloop invariant i35: (x % 2) == 0 ==> !(x % 2);\nloop invariant i36: x % 2 == 1 ==> x % 2 == 1;\nloop invariant i37: x % 2 == 0 ==> x % 2 == 0;\n\nloop invariant i39: (x >= 0x0fffffff) ==> (x % 2) == 0;\n\nloop invariant i41: (x >= 0xfff0) ==> (x % 2) == 0;\n\n\n\n\n\n\nloop invariant i48: x % 2 == 0 ==> !(x % 2);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/124.c",
            "../dataset/loop_invariants/code2inv/125.c",
            "../dataset/loop_invariants/code2inv/126.c",
            "../dataset/loop_invariants/code2inv/127.c",
            "../dataset/loop_invariants/code2inv/128.c",
            "../dataset/loop_invariants/code2inv/129.c",
            "../dataset/loop_invariants/code2inv/13.c",
            "../dataset/loop_invariants/code2inv/132.c",
            "../dataset/loop_invariants/code2inv/133.c",
            "../dataset/loop_invariants/code2inv/14.c",
            "../dataset/loop_invariants/code2inv/16.c",
            "../dataset/loop_invariants/code2inv/18.c",
            "../dataset/loop_invariants/code2inv/19.c",
            "../dataset/loop_invariants/code2inv/2.c",
            "../dataset/loop_invariants/code2inv/20.c",
            "../dataset/loop_invariants/code2inv/21.c",
            "../dataset/loop_invariants/code2inv/22.c",
            "../dataset/loop_invariants/code2inv/25.c",
            "../dataset/loop_invariants/code2inv/29.c",
            "../dataset/loop_invariants/code2inv/3.c",
            "../dataset/loop_invariants/code2inv/30.c",
            "../dataset/loop_invariants/code2inv/35.c",
            "../dataset/loop_invariants/code2inv/36.c",
            "../dataset/loop_invariants/code2inv/37.c",
            "../dataset/loop_invariants/code2inv/38.c",
            "../dataset/loop_invariants/code2inv/39.c",
            "../dataset/loop_invariants/code2inv/4.c",
            "../dataset/loop_invariants/code2inv/40.c",
            "../dataset/loop_invariants/code2inv/41.c",
            "../dataset/loop_invariants/code2inv/42.c",
            "../dataset/loop_invariants/code2inv/43.c",
            "../dataset/loop_invariants/code2inv/44.c",
            "../dataset/loop_invariants/code2inv/45.c",
            "../dataset/loop_invariants/code2inv/46.c",
            "../dataset/loop_invariants/code2inv/47.c",
            "../dataset/loop_invariants/code2inv/48.c",
            "../dataset/loop_invariants/code2inv/49.c",
            "../dataset/loop_invariants/code2inv/5.c",
            "../dataset/loop_invariants/code2inv/50.c",
            "../dataset/loop_invariants/code2inv/51.c",
            "../dataset/loop_invariants/code2inv/52.c",
            "../dataset/loop_invariants/code2inv/53.c",
            "../dataset/loop_invariants/code2inv/54.c",
            "../dataset/loop_invariants/code2inv/55.c",
            "../dataset/loop_invariants/code2inv/56.c",
            "../dataset/loop_invariants/code2inv/57.c",
            "../dataset/loop_invariants/code2inv/58.c",
            "../dataset/loop_invariants/code2inv/59.c",
            "../dataset/loop_invariants/code2inv/60.c",
            "../dataset/loop_invariants/code2inv/7.c",
            "../dataset/loop_invariants/code2inv/71.c",
            "../dataset/loop_invariants/code2inv/73.c",
            "../dataset/loop_invariants/code2inv/74.c",
            "../dataset/loop_invariants/code2inv/76.c",
            "../dataset/loop_invariants/code2inv/77.c",
            "../dataset/loop_invariants/code2inv/78.c",
            "../dataset/loop_invariants/code2inv/79.c",
            "../dataset/loop_invariants/code2inv/8.c",
            "../dataset/loop_invariants/code2inv/80.c",
            "../dataset/loop_invariants/code2inv/81.c",
            "../dataset/loop_invariants/code2inv/82.c",
            "../dataset/loop_invariants/code2inv/87.c",
            "../dataset/loop_invariants/code2inv/88.c",
            "../dataset/loop_invariants/code2inv/89.c",
            "../dataset/loop_invariants/code2inv/9.c",
            "../dataset/loop_invariants/code2inv/90.c",
            "../dataset/loop_invariants/code2inv/91.c",
            "../dataset/loop_invariants/code2inv/92.c",
            "../dataset/loop_invariants/code2inv/93.c",
            "../dataset/loop_invariants/code2inv/94.c",
            "../dataset/loop_invariants/code2inv/95.c",
            "../dataset/loop_invariants/code2inv/96.c",
            "../dataset/loop_invariants/code2inv/97.c",
            "../dataset/loop_invariants/code2inv/98.c",
            "../dataset/loop_invariants/code2inv/99.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/phases_1-1.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/131.c",
            "../dataset/loop_invariants/code2inv/15.c",
            "../dataset/loop_invariants/code2inv/23.c",
            "../dataset/loop_invariants/code2inv/34.c",
            "../dataset/loop_invariants/code2inv/6.c",
            "../dataset/loop_invariants/code2inv/63.c",
            "../dataset/loop_invariants/code2inv/64.c",
            "../dataset/loop_invariants/code2inv/67.c",
            "../dataset/loop_invariants/code2inv/68.c",
            "../dataset/loop_invariants/code2inv/83.c"
        ],
        "skipped": [],
        "total": 88,
        "success_count": 78,
        "failure_count": 10,
        "success_rate": 0.8863636363636364
    }
}