{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x < 0;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= 0;\nloop invariant x + y <= 0;\n*/\n```",
            "```\n/*@\nloop invariant x + y >= 0;\nloop invariant y >= 1;\nloop invariant y <= 50;\nloop invariant v1 <= 10;\nloop invariant v2 <= 10;\nloop invariant v3 <= 10;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant y <= x + y;\nloop invariant x <= y + 50;\nloop invariant y + 1 <= y + 49;\nloop invariant v1 + v2 + v3 <= 30;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant x + y >= 0;\nloop invariant y >= 1;\nloop invariant y <= 50;\nloop invariant v1 <= 10;\nloop invariant v2 <= 10;\nloop invariant v3 <= 10;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant y <= x + y;\nloop invariant x <= y + 50;\nloop invariant y + 1 <= y + 49;\nloop invariant v1 + v2 + v3 <= 30;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y < 100000;\nloop invariant x == 1 + (y * (y - 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x;\nloop invariant y >= 0;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\nloop invariant x == unknown_int() || x == v1 || x == v2 || x == v3;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= x + y; loop invariant x >= -50; loop invariant y >= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 + v2 + v3 <= 3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= 3; loop invariant v1 * v2 * v3 <= 1; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= 0; loop invariant v1 * v2 * v3 >= 0; loop invariant v1 + v2 + v3 >= 0; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= v1 + v2 + v3; loop invariant v1 * v2 * v3 <= v1 + v2 + v3; loop invariant v1 + v2 + v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 * v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 + v2 + v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= y;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant y <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 50;\nloop invariant x + y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (-50 + y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant x <= -50 + y * (y - 1);\nloop invariant y <= 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x + y >= 0;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == y;\nloop invariant v2 == y;\nloop invariant v3 == y;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 100000;\nloop invariant v2 <= 100000;\nloop invariant v3 <= 100000;\nloop invariant v1 >= -50;\nloop invariant v2 >= -50;\nloop invariant v3 >= -50;\nloop invariant v1 <= 50;\nloop invariant v2 <= 50;\nloop invariant v3 <= 50;\nloop invariant v1 != 0;\nloop invariant v2 != 0;\nloop invariant v3 != 0;\nloop invariant y != 0;\nloop invariant x != -50;\nloop invariant x != 0;\nloop invariant x != 1;\nloop invariant x != 2;\nloop invariant x != 3;\nloop invariant x != 4;\nloop invariant x != 5;\nloop invariant x != 6;\nloop invariant x != 7;\nloop invariant x != 8;\nloop invariant x != 9;\nloop invariant x != 10;\nloop invariant x != 11;\nloop invariant x != 12;\nloop invariant x != 13;\nloop invariant x != 14;\nloop invariant x != 15;\nloop invariant x != 16;\nloop invariant x != 17;\nloop invariant x != 18;\nloop invariant x != 19;\nloop invariant x != 20;\nloop invariant x != 21;\nloop invariant x != 22;\nloop invariant x != 23;\nloop invariant x != 24;\nloop invariant x != 25;\nloop invariant x != 26;\nloop invariant x != 27;\nloop invariant x != 28;\nloop invariant x != 29;\nloop invariant x != 30;\nloop invariant x != 31;\nloop invariant x != 32;\nloop invariant x != 33;\nloop invariant x != 34;\nloop invariant x != 35;\nloop invariant x != 36;\nloop invariant x != 37;\nloop invariant x != 38;\nloop invariant x != 39;\nloop invariant x != 40;\nloop invariant x != 41;\nloop invariant x != 42;\nloop invariant x != 43;\nloop invariant x != 44;\nloop invariant x != 45;\nloop invariant x != 46;\nloop invariant x != 47;\nloop invariant x != 48;\nloop invariant x != 49;\nloop invariant x != 50;\nloop invariant x != 51;\nloop invariant x != 52;\nloop invariant x != 53;\nloop invariant x != 54;\nloop invariant x != 55;\nloop invariant x != 56;\nloop invariant x != 57;\nloop invariant x != 58;\nloop invariant x != 59;\nloop invariant x != 60;\nloop invariant x != 61;\nloop invariant x != 62;\nloop invariant x != 63;\nloop invariant x != 64;\nloop invariant x != 65;\nloop invariant x != 66;\nloop invariant x != 67;\nloop invariant x != 68;\nloop invariant x != 69;\nloop invariant x != 70;\nloop invariant x != 71;\nloop invariant x != 72;\nloop invariant x != 73;\nloop invariant x != 74;\nloop invariant x != 75;\nloop invariant x != 76;\nloop invariant x != 77;\nloop invariant x != 78;\nloop invariant x != 79;\nloop invariant x != 80;\nloop invariant x != 81;\nloop invariant x != 82;\nloop invariant x != 83;\nloop invariant x != 84;\nloop invariant x != 85;\nloop invariant x != 86;\nloop invariant x != 87;\nloop invariant x != 88;\nloop invariant x != 89;\nloop invariant x != 90;\nloop invariant x != 91;\nloop invariant x != 92;\nloop invariant x != 93;\nloop invariant x != 94;\nloop invariant x != 95;\nloop invariant x != 96;\nloop invariant x != 97;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= y; loop invariant x >= y - 50; loop invariant y <= x + 50; loop invariant y <= x; loop invariant y <= x - y; loop invariant y <= x - y + 1; loop invariant y <= x - y + 1 - y; loop invariant y <= x - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant x < 0;\nloop invariant y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x < 0 is established but not preserved.\nloop invariant y >= 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= 0;\nloop invariant x + y <= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x <= 0 is partially proven to be inductive.\nloop invariant x + y <= 0 is neither established nor preserved.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x + y >= 0;\nloop invariant y >= 1;\nloop invariant y <= 50;\nloop invariant v1 <= 10;\nloop invariant v2 <= 10;\nloop invariant v3 <= 10;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant y <= x + y;\nloop invariant x <= y + 50;\nloop invariant y + 1 <= y + 49;\nloop invariant v1 + v2 + v3 <= 30;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant x + y >= 0;\nloop invariant y >= 1;\nloop invariant y <= 50;\nloop invariant v1 <= 10;\nloop invariant v2 <= 10;\nloop invariant v3 <= 10;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant y <= x + y;\nloop invariant x <= y + 50;\nloop invariant y + 1 <= y + 49;\nloop invariant v1 + v2 + v3 <= 30;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x + y >= 0 is preserved but not established.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 50 is preserved but not established.\nloop invariant v1 <= 10 is preserved but not established.\nloop invariant v2 <= 10 is preserved but not established.\nloop invariant v3 <= 10 is preserved but not established.\nloop invariant v1 >= 0 is preserved but not established.\nloop invariant v2 >= 0 is preserved but not established.\nloop invariant v3 >= 0 is preserved but not established.\nloop invariant y <= x + y is preserved but not established.\nloop invariant x <= y + 50 is partially proven to be inductive.\nloop invariant y + 1 <= y + 49 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 <= 30 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 >= 0 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 <= 10 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: y + 1 <= y + 49;\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y < 100000;\nloop invariant x == 1 + (y * (y - 1)) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y < 100000 is preserved but not established.\nloop invariant x == 1 + (y * (y - 1)) / 2 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x;\nloop invariant y >= 0;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\nloop invariant x == unknown_int() || x == v1 || x == v2 || x == v3;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= x + y; loop invariant x >= -50; loop invariant y >= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 + v2 + v3 <= 3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= 3; loop invariant v1 * v2 * v3 <= 1; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= 0; loop invariant v1 * v2 * v3 >= 0; loop invariant v1 + v2 + v3 >= 0; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= v1 + v2 + v3; loop invariant v1 * v2 * v3 <= v1 + v2 + v3; loop invariant v1 + v2 + v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 * v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 + v2 + v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= x + y; loop invariant x >= -50; loop invariant y >= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 + v2 + v3 <= 3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= 3; loop invariant v1 * v2 * v3 <= 1; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= 0; loop invariant v1 * v2 * v3 >= 0; loop invariant v1 + v2 + v3 >= 0; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= v1 + v2 + v3; loop invariant v1 * v2 * v3 <= v1 + v2 + v3; loop invariant v1 + v2 + v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 * v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 + v2 + v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= y;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant y <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 50;\nloop invariant x + y == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant 0 <= y <= 50 is partially proven to be inductive.\nloop invariant x + y == 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (-50 + y);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= (-50 + y) is neither established nor preserved.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant x <= -50 + y * (y - 1);\nloop invariant y <= 50;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x < 0 is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant x <= -50 + y * (y - 1) is partially proven to be inductive.\nloop invariant y <= 50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x + y >= 0;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == y;\nloop invariant v2 == y;\nloop invariant v3 == y;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 100000;\nloop invariant v2 <= 100000;\nloop invariant v3 <= 100000;\nloop invariant v1 >= -50;\nloop invariant v2 >= -50;\nloop invariant v3 >= -50;\nloop invariant v1 <= 50;\nloop invariant v2 <= 50;\nloop invariant v3 <= 50;\nloop invariant v1 != 0;\nloop invariant v2 != 0;\nloop invariant v3 != 0;\nloop invariant y != 0;\nloop invariant x != -50;\nloop invariant x != 0;\nloop invariant x != 1;\nloop invariant x != 2;\nloop invariant x != 3;\nloop invariant x != 4;\nloop invariant x != 5;\nloop invariant x != 6;\nloop invariant x != 7;\nloop invariant x != 8;\nloop invariant x != 9;\nloop invariant x != 10;\nloop invariant x != 11;\nloop invariant x != 12;\nloop invariant x != 13;\nloop invariant x != 14;\nloop invariant x != 15;\nloop invariant x != 16;\nloop invariant x != 17;\nloop invariant x != 18;\nloop invariant x != 19;\nloop invariant x != 20;\nloop invariant x != 21;\nloop invariant x != 22;\nloop invariant x != 23;\nloop invariant x != 24;\nloop invariant x != 25;\nloop invariant x != 26;\nloop invariant x != 27;\nloop invariant x != 28;\nloop invariant x != 29;\nloop invariant x != 30;\nloop invariant x != 31;\nloop invariant x != 32;\nloop invariant x != 33;\nloop invariant x != 34;\nloop invariant x != 35;\nloop invariant x != 36;\nloop invariant x != 37;\nloop invariant x != 38;\nloop invariant x != 39;\nloop invariant x != 40;\nloop invariant x != 41;\nloop invariant x != 42;\nloop invariant x != 43;\nloop invariant x != 44;\nloop invariant x != 45;\nloop invariant x != 46;\nloop invariant x != 47;\nloop invariant x != 48;\nloop invariant x != 49;\nloop invariant x != 50;\nloop invariant x != 51;\nloop invariant x != 52;\nloop invariant x != 53;\nloop invariant x != 54;\nloop invariant x != 55;\nloop invariant x != 56;\nloop invariant x != 57;\nloop invariant x != 58;\nloop invariant x != 59;\nloop invariant x != 60;\nloop invariant x != 61;\nloop invariant x != 62;\nloop invariant x != 63;\nloop invariant x != 64;\nloop invariant x != 65;\nloop invariant x != 66;\nloop invariant x != 67;\nloop invariant x != 68;\nloop invariant x != 69;\nloop invariant x != 70;\nloop invariant x != 71;\nloop invariant x != 72;\nloop invariant x != 73;\nloop invariant x != 74;\nloop invariant x != 75;\nloop invariant x != 76;\nloop invariant x != 77;\nloop invariant x != 78;\nloop invariant x != 79;\nloop invariant x != 80;\nloop invariant x != 81;\nloop invariant x != 82;\nloop invariant x != 83;\nloop invariant x != 84;\nloop invariant x != 85;\nloop invariant x != 86;\nloop invariant x != 87;\nloop invariant x != 88;\nloop invariant x != 89;\nloop invariant x != 90;\nloop invariant x != 91;\nloop invariant x != 92;\nloop invariant x != 93;\nloop invariant x != 94;\nloop invariant x != 95;\nloop invariant x != 96;\nloop invariant x != 97;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 50 is preserved but not established.\nloop invariant x + y >= 0 is preserved but not established.\nloop invariant v1 == v2 is preserved but not established.\nloop invariant v2 == v3 is preserved but not established.\nloop invariant v3 == v1 is partially proven to be inductive.\nloop invariant v1 == y is preserved but not established.\nloop invariant v2 == y is partially proven to be inductive.\nloop invariant v3 == y is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 100000 is partially proven to be inductive.\nloop invariant v2 <= 100000 is partially proven to be inductive.\nloop invariant v3 <= 100000 is partially proven to be inductive.\nloop invariant v1 >= -50 is partially proven to be inductive.\nloop invariant v2 >= -50 is partially proven to be inductive.\nloop invariant v3 >= -50 is partially proven to be inductive.\nloop invariant v1 <= 50 is partially proven to be inductive.\nloop invariant v2 <= 50 is partially proven to be inductive.\nloop invariant v3 <= 50 is partially proven to be inductive.\nloop invariant v1 != 0 is partially proven to be inductive.\nloop invariant v2 != 0 is partially proven to be inductive.\nloop invariant v3 != 0 is partially proven to be inductive.\nloop invariant y != 0 is partially proven to be inductive.\nloop invariant x != -50 is preserved but not established.\nloop invariant x != 0 is partially proven to be inductive.\nloop invariant x != 1 is partially proven to be inductive.\nloop invariant x != 2 is partially proven to be inductive.\nloop invariant x != 3 is partially proven to be inductive.\nloop invariant x != 4 is partially proven to be inductive.\nloop invariant x != 5 is partially proven to be inductive.\nloop invariant x != 6 is partially proven to be inductive.\nloop invariant x != 7 is partially proven to be inductive.\nloop invariant x != 8 is partially proven to be inductive.\nloop invariant x != 9 is partially proven to be inductive.\nloop invariant x != 10 is partially proven to be inductive.\nloop invariant x != 11 is partially proven to be inductive.\nloop invariant x != 12 is partially proven to be inductive.\nloop invariant x != 13 is partially proven to be inductive.\nloop invariant x != 14 is partially proven to be inductive.\nloop invariant x != 15 is partially proven to be inductive.\nloop invariant x != 16 is partially proven to be inductive.\nloop invariant x != 17 is partially proven to be inductive.\nloop invariant x != 18 is partially proven to be inductive.\nloop invariant x != 19 is partially proven to be inductive.\nloop invariant x != 20 is partially proven to be inductive.\nloop invariant x != 21 is partially proven to be inductive.\nloop invariant x != 22 is partially proven to be inductive.\nloop invariant x != 23 is partially proven to be inductive.\nloop invariant x != 24 is partially proven to be inductive.\nloop invariant x != 25 is partially proven to be inductive.\nloop invariant x != 26 is partially proven to be inductive.\nloop invariant x != 27 is partially proven to be inductive.\nloop invariant x != 28 is partially proven to be inductive.\nloop invariant x != 29 is partially proven to be inductive.\nloop invariant x != 30 is partially proven to be inductive.\nloop invariant x != 31 is partially proven to be inductive.\nloop invariant x != 32 is partially proven to be inductive.\nloop invariant x != 33 is partially proven to be inductive.\nloop invariant x != 34 is partially proven to be inductive.\nloop invariant x != 35 is partially proven to be inductive.\nloop invariant x != 36 is partially proven to be inductive.\nloop invariant x != 37 is partially proven to be inductive.\nloop invariant x != 38 is partially proven to be inductive.\nloop invariant x != 39 is partially proven to be inductive.\nloop invariant x != 40 is partially proven to be inductive.\nloop invariant x != 41 is partially proven to be inductive.\nloop invariant x != 42 is partially proven to be inductive.\nloop invariant x != 43 is partially proven to be inductive.\nloop invariant x != 44 is partially proven to be inductive.\nloop invariant x != 45 is partially proven to be inductive.\nloop invariant x != 46 is partially proven to be inductive.\nloop invariant x != 47 is partially proven to be inductive.\nloop invariant x != 48 is partially proven to be inductive.\nloop invariant x != 49 is partially proven to be inductive.\nloop invariant x != 50 is partially proven to be inductive.\nloop invariant x != 51 is partially proven to be inductive.\nloop invariant x != 52 is partially proven to be inductive.\nloop invariant x != 53 is partially proven to be inductive.\nloop invariant x != 54 is partially proven to be inductive.\nloop invariant x != 55 is partially proven to be inductive.\nloop invariant x != 56 is partially proven to be inductive.\nloop invariant x != 57 is partially proven to be inductive.\nloop invariant x != 58 is partially proven to be inductive.\nloop invariant x != 59 is partially proven to be inductive.\nloop invariant x != 60 is partially proven to be inductive.\nloop invariant x != 61 is partially proven to be inductive.\nloop invariant x != 62 is partially proven to be inductive.\nloop invariant x != 63 is partially proven to be inductive.\nloop invariant x != 64 is partially proven to be inductive.\nloop invariant x != 65 is partially proven to be inductive.\nloop invariant x != 66 is partially proven to be inductive.\nloop invariant x != 67 is partially proven to be inductive.\nloop invariant x != 68 is partially proven to be inductive.\nloop invariant x != 69 is partially proven to be inductive.\nloop invariant x != 70 is partially proven to be inductive.\nloop invariant x != 71 is partially proven to be inductive.\nloop invariant x != 72 is partially proven to be inductive.\nloop invariant x != 73 is partially proven to be inductive.\nloop invariant x != 74 is partially proven to be inductive.\nloop invariant x != 75 is partially proven to be inductive.\nloop invariant x != 76 is partially proven to be inductive.\nloop invariant x != 77 is partially proven to be inductive.\nloop invariant x != 78 is partially proven to be inductive.\nloop invariant x != 79 is partially proven to be inductive.\nloop invariant x != 80 is partially proven to be inductive.\nloop invariant x != 81 is partially proven to be inductive.\nloop invariant x != 82 is partially proven to be inductive.\nloop invariant x != 83 is partially proven to be inductive.\nloop invariant x != 84 is partially proven to be inductive.\nloop invariant x != 85 is partially proven to be inductive.\nloop invariant x != 86 is partially proven to be inductive.\nloop invariant x != 87 is partially proven to be inductive.\nloop invariant x != 88 is partially proven to be inductive.\nloop invariant x != 89 is partially proven to be inductive.\nloop invariant x != 90 is partially proven to be inductive.\nloop invariant x != 91 is partially proven to be inductive.\nloop invariant x != 92 is partially proven to be inductive.\nloop invariant x != 93 is partially proven to be inductive.\nloop invariant x != 94 is partially proven to be inductive.\nloop invariant x != 95 is partially proven to be inductive.\nloop invariant x != 96 is partially proven to be inductive.\nloop invariant x != 97 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= y; loop invariant x >= y - 50; loop invariant y <= x + 50; loop invariant y <= x; loop invariant y <= x - y; loop invariant y <= x - y + 1; loop invariant y <= x - y + 1 - y; loop invariant y <= x - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= y; loop invariant x >= y - 50; loop invariant y <= x + 50; loop invariant y <= x; loop invariant y <= x - y; loop invariant y <= x - y + 1; loop invariant y <= x - y + 1 - y; loop invariant y <= x - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 40: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\nloop invariant i1: x < 0;\nloop invariant i2: y >= 0;\nloop invariant i3: 0 <= y;\nloop invariant i4: x <= 0;\nloop invariant i5: x + y <= 0;\nloop invariant i6: x + y >= 0;\nloop invariant i7: y >= 1;\nloop invariant i8: y <= 50;\nloop invariant i9: v1 <= 10;\nloop invariant i10: v2 <= 10;\nloop invariant i11: v3 <= 10;\nloop invariant i12: v1 >= 0;\nloop invariant i13: v2 >= 0;\nloop invariant i14: v3 >= 0;\nloop invariant i15: y <= x + y;\nloop invariant i16: x <= y + 50;\nloop invariant i17: y + 1 <= y + 49;\nloop invariant i18: v1 + v2 + v3 <= 30;\nloop invariant i19: v1 + v2 + v3 >= 0;\nloop invariant i20: v1 + v2 + v3 <= 10;\nloop invariant i21: 0 <= y < 100000;\nloop invariant i22: x == 1 + (y * (y - 1)) / 2;\nloop invariant i23: 0 <= y <= 100000;\nloop invariant i24: x >= (1 + (y - 1) * y / 2);\nloop invariant i25: 0 <= x;\nloop invariant i26: y == unknown_int() || y == v1 || y == v2 || y == v3;\nloop invariant i27: x == unknown_int() || x == v1 || x == v2 || x == v3;\nloop invariant i28: 1 <= y <= 100000;\nloop invariant i29: x >= -50;\nloop invariant i30: 0 <= y <= x + y; loop invariant x >= -50; loop invariant y >= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 + v2 + v3 <= 3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= 3; loop invariant v1 * v2 * v3 <= 1; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= 0; loop invariant v1 * v2 * v3 >= 0; loop invariant v1 + v2 + v3 >= 0; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= v1 + v2 + v3; loop invariant v1 * v2 * v3 <= v1 + v2 + v3; loop invariant v1 + v2 + v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 * v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 + v2 + v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3;\nloop invariant i31: 0 <= x <= -50;\nloop invariant i32: x >= y;\nloop invariant i33: y <= 100000;\nloop invariant i34: 0 <= y <= 50;\nloop invariant i35: x + y == 0;\nloop invariant i36: x >= (-50 + y);\nloop invariant i37: y > 0;\nloop invariant i38: 0 <= x < 0;\nloop invariant i39: x <= -50 + y * (y - 1);\nloop invariant i40: v1 == v2;\nloop invariant i41: v2 == v3;\nloop invariant i42: v3 == v1;\nloop invariant i43: v1 == y;\nloop invariant i44: v2 == y;\nloop invariant i45: v3 == y;\nloop invariant i46: v1 <= 100000;\nloop invariant i47: v2 <= 100000;\nloop invariant i48: v3 <= 100000;\nloop invariant i49: v1 >= -50;\nloop invariant i50: v2 >= -50;\nloop invariant i51: v3 >= -50;\nloop invariant i52: v1 <= 50;\nloop invariant i53: v2 <= 50;\nloop invariant i54: v3 <= 50;\nloop invariant i55: v1 != 0;\nloop invariant i56: v2 != 0;\nloop invariant i57: v3 != 0;\nloop invariant i58: y != 0;\nloop invariant i59: x != -50;\nloop invariant i60: x != 0;\nloop invariant i61: x != 1;\nloop invariant i62: x != 2;\nloop invariant i63: x != 3;\nloop invariant i64: x != 4;\nloop invariant i65: x != 5;\nloop invariant i66: x != 6;\nloop invariant i67: x != 7;\nloop invariant i68: x != 8;\nloop invariant i69: x != 9;\nloop invariant i70: x != 10;\nloop invariant i71: x != 11;\nloop invariant i72: x != 12;\nloop invariant i73: x != 13;\nloop invariant i74: x != 14;\nloop invariant i75: x != 15;\nloop invariant i76: x != 16;\nloop invariant i77: x != 17;\nloop invariant i78: x != 18;\nloop invariant i79: x != 19;\nloop invariant i80: x != 20;\nloop invariant i81: x != 21;\nloop invariant i82: x != 22;\nloop invariant i83: x != 23;\nloop invariant i84: x != 24;\nloop invariant i85: x != 25;\nloop invariant i86: x != 26;\nloop invariant i87: x != 27;\nloop invariant i88: x != 28;\nloop invariant i89: x != 29;\nloop invariant i90: x != 30;\nloop invariant i91: x != 31;\nloop invariant i92: x != 32;\nloop invariant i93: x != 33;\nloop invariant i94: x != 34;\nloop invariant i95: x != 35;\nloop invariant i96: x != 36;\nloop invariant i97: x != 37;\nloop invariant i98: x != 38;\nloop invariant i99: x != 39;\nloop invariant i100: x != 40;\nloop invariant i101: x != 41;\nloop invariant i102: x != 42;\nloop invariant i103: x != 43;\nloop invariant i104: x != 44;\nloop invariant i105: x != 45;\nloop invariant i106: x != 46;\nloop invariant i107: x != 47;\nloop invariant i108: x != 48;\nloop invariant i109: x != 49;\nloop invariant i110: x != 50;\nloop invariant i111: x != 51;\nloop invariant i112: x != 52;\nloop invariant i113: x != 53;\nloop invariant i114: x != 54;\nloop invariant i115: x != 55;\nloop invariant i116: x != 56;\nloop invariant i117: x != 57;\nloop invariant i118: x != 58;\nloop invariant i119: x != 59;\nloop invariant i120: x != 60;\nloop invariant i121: x != 61;\nloop invariant i122: x != 62;\nloop invariant i123: x != 63;\nloop invariant i124: x != 64;\nloop invariant i125: x != 65;\nloop invariant i126: x != 66;\nloop invariant i127: x != 67;\nloop invariant i128: x != 68;\nloop invariant i129: x != 69;\nloop invariant i130: x != 70;\nloop invariant i131: x != 71;\nloop invariant i132: x != 72;\nloop invariant i133: x != 73;\nloop invariant i134: x != 74;\nloop invariant i135: x != 75;\nloop invariant i136: x != 76;\nloop invariant i137: x != 77;\nloop invariant i138: x != 78;\nloop invariant i139: x != 79;\nloop invariant i140: x != 80;\nloop invariant i141: x != 81;\nloop invariant i142: x != 82;\nloop invariant i143: x != 83;\nloop invariant i144: x != 84;\nloop invariant i145: x != 85;\nloop invariant i146: x != 86;\nloop invariant i147: x != 87;\nloop invariant i148: x != 88;\nloop invariant i149: x != 89;\nloop invariant i150: x != 90;\nloop invariant i151: x != 91;\nloop invariant i152: x != 92;\nloop invariant i153: x != 93;\nloop invariant i154: x != 94;\nloop invariant i155: x != 95;\nloop invariant i156: x != 96;\nloop invariant i157: x != 97;\nloop invariant i158: 1 <= y; loop invariant x >= y - 50; loop invariant y <= x + 50; loop invariant y <= x; loop invariant y <= x - y; loop invariant y <= x - y + 1; loop invariant y <= x - y + 1 - y; loop invariant y <= x - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y;\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 18,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: y + 1 <= y + 49;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c"
        ],
        "skipped": [],
        "total": 8,
        "success_count": 1,
        "failure_count": 7,
        "success_rate": 0.125
    }
}