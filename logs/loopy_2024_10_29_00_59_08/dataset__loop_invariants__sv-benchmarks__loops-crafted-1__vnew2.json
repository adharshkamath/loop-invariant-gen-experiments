{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == j % 3;\nloop invariant i % 3 == k % 3;\nloop invariant i % 3 == 0;\nloop invariant i % 3 == 3 * x;\nloop invariant i % 3 == 3 * y;\nloop invariant i % 3 == 3 * z;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n * 3;\nloop invariant 0 <= j <= n * 3;\nloop invariant 0 <= k <= n * 3;\nloop invariant i >= j && j >= k;\nloop invariant i >= k && j >= k;\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0 ==> n > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= SIZE;\nloop invariant 0 <= i <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant (i + 3 * n) == (k + 3 * n);\nloop invariant (i + 3 * n) == (j + 3 * n);\nloop invariant (k + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == 0;\nloop invariant j == i;\nloop invariant k == i;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i >= j && j >= k;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j + 3 * i;\nloop invariant i == k + 3 * i;\nloop invariant i == n;\nloop invariant j == i;\nloop invariant k == i;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= min(n, SIZE);\nloop invariant 0 <= j <= min(n, SIZE);\nloop invariant 0 <= k <= min(n, SIZE);\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i % 3 == 0;\nloop invariant i % 3 == j % 3 && j % 3 == k % 3;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (SIZE + 2) <= i <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % (SIZE + 2) == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (k + 3) % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % 3 == 0 ==> i % 3 == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % 3 == 0 ==> j % 3 == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;loop invariant 0 <= j <= n;loop invariant 0 <= k <= n;loop invariant i%3 == 0;loop invariant j%3 == 0;loop invariant k%3 == 0;loop invariant i <= j;loop invariant j <= k;loop invariant i <= k;loop invariant i >= n || (i < n && j < n && k < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n; loop invariant j >= i; loop invariant k >= j; loop invariant i <= SIZE;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i + j + k == 3 * n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i % (SIZE + 2) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i == n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == j % 3;\nloop invariant i % 3 == k % 3;\nloop invariant i % 3 == 0;\nloop invariant i % 3 == 3 * x;\nloop invariant i % 3 == 3 * y;\nloop invariant i % 3 == 3 * z;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 21: unbound logic variable x. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i % 3 == 0;\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n * 3;\nloop invariant 0 <= j <= n * 3;\nloop invariant 0 <= k <= n * 3;\nloop invariant i >= j && j >= k;\nloop invariant i >= k && j >= k;\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0 ==> n > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n * 3 is partially proven to be inductive.\nloop invariant 0 <= j <= n * 3 is partially proven to be inductive.\nloop invariant 0 <= k <= n * 3 is partially proven to be inductive.\nloop invariant i >= j && j >= k is partially proven to be inductive.\nloop invariant i >= k && j >= k is partially proven to be inductive.\nloop invariant i == j && j == k is partially proven to be inductive.\nloop invariant i % (SIZE + 2) == 0 ==> n > 0 is preserved but not established.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i <= n * 3;\nloop invariant i2: 0 <= j <= n * 3;\nloop invariant i3: 0 <= k <= n * 3;\nloop invariant i4: i >= j && j >= k;\nloop invariant i5: i >= k && j >= k;\nloop invariant i6: i == j && j == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i == j && j == k is partially proven to be inductive.\nloop invariant i % (SIZE + 2) == 0 is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i == j && j == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= SIZE;\nloop invariant 0 <= i <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant (i + 3 * n) == (k + 3 * n);\nloop invariant (i + 3 * n) == (j + 3 * n);\nloop invariant (k + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= SIZE is partially proven to be inductive.\nloop invariant 0 <= i <= n is established but not preserved.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant (i + 3 * n) == (k + 3 * n) is partially proven to be inductive.\nloop invariant (i + 3 * n) == (j + 3 * n) is partially proven to be inductive.\nloop invariant (k + 3 * n) == (j + 3 * n) is partially proven to be inductive.\nloop invariant (i + 3 * n) == (i + 3 * n) is partially proven to be inductive.\nloop invariant (k + 3 * n) == (k + 3 * n) is partially proven to be inductive.\nloop invariant (j + 3 * n) == (j + 3 * n) is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= n <= SIZE;\n\nloop invariant i3: i == j;\nloop invariant i4: j == k;\nloop invariant i5: (i + 3 * n) == (k + 3 * n);\nloop invariant i6: (i + 3 * n) == (j + 3 * n);\nloop invariant i7: (k + 3 * n) == (j + 3 * n);\nloop invariant i8: (i + 3 * n) == (i + 3 * n);\nloop invariant i9: (k + 3 * n) == (k + 3 * n);\nloop invariant i10: (j + 3 * n) == (j + 3 * n);\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == 0;\nloop invariant j == i;\nloop invariant k == i;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j == i is partially proven to be inductive.\nloop invariant k == i is partially proven to be inductive.\nloop invariant i + j + k == n * 3 is preserved but not established.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: i % 3 == 0;\nloop invariant i3: j == i;\nloop invariant i4: k == i;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i >= j && j >= k;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j % 3 == 0 is partially proven to be inductive.\nloop invariant k % 3 == 0 is partially proven to be inductive.\nloop invariant i >= j && j >= k is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i % 3 == 0;\nloop invariant i5: j % 3 == 0;\nloop invariant i6: k % 3 == 0;\nloop invariant i7: i >= j && j >= k;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j + 3 * i;\nloop invariant i == k + 3 * i;\nloop invariant i == n;\nloop invariant j == i;\nloop invariant k == i;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i == j + 3 * i is partially proven to be inductive.\nloop invariant i == k + 3 * i is partially proven to be inductive.\nloop invariant i == n is preserved but not established.\nloop invariant j == i is partially proven to be inductive.\nloop invariant k == i is partially proven to be inductive.\nloop invariant i % (SIZE + 2) == 0 is partially proven to be inductive.\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0) is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\nloop invariant i7: j == i;\nloop invariant i8: k == i;\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= min(n, SIZE);\nloop invariant 0 <= j <= min(n, SIZE);\nloop invariant 0 <= k <= min(n, SIZE);\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i % 3 == 0;\nloop invariant i % 3 == j % 3 && j % 3 == k % 3;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (SIZE + 2) <= i <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % (SIZE + 2) == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (k + 3) % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % 3 == 0 ==> i % 3 == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % 3 == 0 ==> j % 3 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic function min. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i == j && j == k;\n\n\nloop invariant i7: i % 3 == 0;\nloop invariant i8: i % 3 == j % 3 && j % 3 == k % 3;\nloop invariant i9: i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\nloop invariant i10: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % 3 == 0 ==> i % 3 == 0;\nloop invariant i27: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % 3 == 0 ==> j % 3 == 0;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;loop invariant 0 <= j <= n;loop invariant 0 <= k <= n;loop invariant i%3 == 0;loop invariant j%3 == 0;loop invariant k%3 == 0;loop invariant i <= j;loop invariant j <= k;loop invariant i <= k;loop invariant i >= n || (i < n && j < n && k < n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n;loop invariant 0 <= j <= n;loop invariant 0 <= k <= n;loop invariant i%3 == 0;loop invariant j%3 == 0;loop invariant k%3 == 0;loop invariant i <= j;loop invariant j <= k;loop invariant i <= k;loop invariant i >= n || (i < n && j < n && k < n) is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n; loop invariant j >= i; loop invariant k >= j; loop invariant i <= SIZE;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n; loop invariant j >= i; loop invariant k >= j; loop invariant i <= SIZE is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i + j + k == 3 * n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i + j + k == 3 * n is preserved but not established.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j % 3 == 0 is partially proven to be inductive.\nloop invariant k % 3 == 0 is partially proven to be inductive.\nloop invariant i <= SIZE is partially proven to be inductive.\nloop invariant j <= SIZE is partially proven to be inductive.\nloop invariant k <= SIZE is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0) is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\nloop invariant i5: i % 3 == 0;\nloop invariant i6: j % 3 == 0;\nloop invariant i7: k % 3 == 0;\n\n\n\nloop invariant i11: i >= 0;\nloop invariant i12: j >= 0;\nloop invariant i13: k >= 0;\nloop invariant i14: i == j;\nloop invariant i15: j == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i % (SIZE + 2) == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant i <= SIZE is established but not preserved.\nloop invariant j <= SIZE is partially proven to be inductive.\nloop invariant k <= SIZE is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j % 3 == 0 is partially proven to be inductive.\nloop invariant k % 3 == 0 is partially proven to be inductive.\nloop invariant i % (SIZE + 2) == 0 is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\nloop invariant i5: i == j;\nloop invariant i6: j == k;\nloop invariant i7: i % 3 == 0;\nloop invariant i8: j % 3 == 0;\nloop invariant i9: k % 3 == 0;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant j <= n is partially proven to be inductive.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant i == n is preserved but not established.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\nloop invariant i7: i == j;\nloop invariant i8: j == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unbound logic variable x. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: i % 3 == j % 3;\nloop invariant i3: i % 3 == k % 3;\nloop invariant i4: i % 3 == 0;\nloop invariant i5: i % 3 == 3 * x;\nloop invariant i6: i % 3 == 3 * y;\nloop invariant i7: i % 3 == 3 * z;\nloop invariant i8: i1;\nloop invariant i9: i2;\nloop invariant i10: i3;\nloop invariant i11: i4;\nloop invariant i12: i5;\nloop invariant i13: i6;\nloop invariant i14: i7;\nloop invariant i15: i8;\nloop invariant i16: i9;\nloop invariant i17: i10;\nloop invariant i18: i11;\nloop invariant i19: i12;\nloop invariant i20: i13;\nloop invariant i21: i14;\nloop invariant i22: i15;\nloop invariant i23: i16;\nloop invariant i24: i17;\nloop invariant i25: i18;\nloop invariant i26: i19;\nloop invariant i27: i20;\nloop invariant i28: i21;\nloop invariant i29: i22;\nloop invariant i30: i23;\nloop invariant i31: i24;\nloop invariant i32: i25;\nloop invariant i33: i26;\nloop invariant i34: i27;\nloop invariant i35: i28;\nloop invariant i36: i29;\nloop invariant i37: i30;\nloop invariant i38: i31;\nloop invariant i39: i32;\nloop invariant i40: i33;\nloop invariant i41: i34;\nloop invariant i42: i35;\nloop invariant i43: i36;\nloop invariant i44: i37;\nloop invariant i45: i38;\nloop invariant i46: i39;\nloop invariant i47: i40;\nloop invariant i48: i41;\nloop invariant i49: i42;\nloop invariant i50: i43;\nloop invariant i51: i44;\nloop invariant i52: i45;\nloop invariant i53: i46;\nloop invariant i54: i47;\nloop invariant i55: i48;\nloop invariant i56: i49;\nloop invariant i57: i50;\nloop invariant i58: i51;\nloop invariant i59: i52;\nloop invariant i60: i53;\nloop invariant i61: i54;\nloop invariant i62: i55;\nloop invariant i63: i56;\nloop invariant i64: i57;\nloop invariant i65: i58;\nloop invariant i66: i59;\nloop invariant i67: i60;\nloop invariant i68: i61;\nloop invariant i69: i62;\nloop invariant i70: i63;\nloop invariant i71: i64;\nloop invariant i72: i65;\nloop invariant i73: i66;\nloop invariant i74: i67;\nloop invariant i75: i68;\nloop invariant i76: i69;\nloop invariant i77: i70;\nloop invariant i78: i71;\nloop invariant i79: i72;\nloop invariant i80: i73;\nloop invariant i81: i74;\nloop invariant i82: i75;\nloop invariant i83: i76;\nloop invariant i84: i77;\nloop invariant i85: i78;\nloop invariant i86: i79;\nloop invariant i87: i80;\nloop invariant i88: i81;\nloop invariant i89: i82;\nloop invariant i90: i83;\nloop invariant i91: i84;\nloop invariant i92: i85;\nloop invariant i93: i86;\nloop invariant i94: i87;\nloop invariant i95: i88;\nloop invariant i96: i89;\nloop invariant i97: i90;\nloop invariant i98: i91;\nloop invariant i99: i92;\nloop invariant i100: i93;\nloop invariant i101: i94;\nloop invariant i102: i95;\nloop invariant i103: i96;\nloop invariant i104: i97;\nloop invariant i105: i98;\nloop invariant i106: i99;\nloop invariant i107: i100;\nloop invariant i108: i101;\nloop invariant i109: i102;\nloop invariant i110: i103;\nloop invariant i111: i104;\nloop invariant i112: i105;\nloop invariant i113: i106;\nloop invariant i114: i107;\nloop invariant i115: i108;\nloop invariant i116: i109;\nloop invariant i117: i110;\nloop invariant i118: i111;\nloop invariant i119: i112;\nloop invariant i120: i113;\nloop invariant i121: i114;\nloop invariant i122: i115;\nloop invariant i123: i116;\nloop invariant i124: i117;\nloop invariant i125: i118;\nloop invariant i126: i119;\nloop invariant i127: i120;\nloop invariant i128: i121;\nloop invariant i129: i122;\nloop invariant i130: i123;\nloop invariant i131: i124;\nloop invariant i132: i125;\nloop invariant i133: i126;\nloop invariant i134: i127;\nloop invariant i135: i128;\nloop invariant i136: i129;\nloop invariant i137: i130;\nloop invariant i138: i131;\nloop invariant i139: i132;\nloop invariant i140: i133;\nloop invariant i141: i134;\nloop invariant i142: i135;\nloop invariant i143: i136;\nloop invariant i144: i137;\nloop invariant i145: i138;\nloop invariant i146: i139;\nloop invariant i147: i140;\nloop invariant i148: i141;\nloop invariant i149: i142;\nloop invariant i150: i143;\nloop invariant i151: i144;\nloop invariant i152: i145;\nloop invariant i153: i146;\nloop invariant i154: i147;\nloop invariant i155: i148;\nloop invariant i156: i149;\nloop invariant i157: i150;\nloop invariant i158: i151;\nloop invariant i159: i152;\nloop invariant i160: i153;\nloop invariant i161: i154;\nloop invariant i162: i155;\nloop invariant i163: i156;\nloop invariant i164: i157;\nloop invariant i165: i158;\nloop invariant i166: 0 <= i <= n * 3;\nloop invariant i167: 0 <= j <= n * 3;\nloop invariant i168: 0 <= k <= n * 3;\nloop invariant i169: i >= j && j >= k;\nloop invariant i170: i >= k && j >= k;\nloop invariant i171: i == j && j == k;\nloop invariant i172: i % (SIZE + 2) == 0 ==> n > 0;\nloop invariant i173: 0 <= j <= n;\nloop invariant i174: 0 <= k <= n;\nloop invariant i175: i % (SIZE + 2) == 0;\nloop invariant i176: 0 <= n <= SIZE;\nloop invariant i177: i == j;\nloop invariant i178: j == k;\nloop invariant i179: (i + 3 * n) == (k + 3 * n);\nloop invariant i180: (i + 3 * n) == (j + 3 * n);\nloop invariant i181: (k + 3 * n) == (j + 3 * n);\nloop invariant i182: (i + 3 * n) == (i + 3 * n);\nloop invariant i183: (k + 3 * n) == (k + 3 * n);\nloop invariant i184: (j + 3 * n) == (j + 3 * n);\nloop invariant i185: j == i;\nloop invariant i186: k == i;\nloop invariant i187: i + j + k == n * 3;\nloop invariant i188: j % 3 == 0;\nloop invariant i189: k % 3 == 0;\nloop invariant i190: i == j + 3 * i;\nloop invariant i191: i == k + 3 * i;\nloop invariant i192: i == n;\nloop invariant i193: n > 0 ==> (i % (SIZE + 2) == 0);\nloop invariant i194: 0 <= i <= min(n, SIZE);\nloop invariant i195: 0 <= j <= min(n, SIZE);\nloop invariant i196: 0 <= k <= min(n, SIZE);\nloop invariant i197: SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i198: i % 3 == j % 3 && j % 3 == k % 3;\nloop invariant i199: i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\nloop invariant i200: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\nloop invariant i201: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i202: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i203: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i <= n;\nloop invariant i204: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j <= n;\nloop invariant i205: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k <= n;\nloop invariant i206: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (SIZE + 2) <= i <= min(n, SIZE);\nloop invariant i207: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= n;\nloop invariant i208: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= n;\nloop invariant i209: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= n;\nloop invariant i210: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= min(n, SIZE);\nloop invariant i211: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= min(n, SIZE);\nloop invariant i212: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= min(n, SIZE);\nloop invariant i213: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % (SIZE + 2) == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i214: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0;\nloop invariant i215: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (k + 3) % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0;\nloop invariant i216: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % 3 == 0 ==> i % 3 == 0;\nloop invariant i217: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % 3 == 0 ==> j % 3 == 0;\nloop invariant i218: 0 <= i <= n;loop invariant 0 <= j <= n;loop invariant 0 <= k <= n;loop invariant i%3 == 0;loop invariant j%3 == 0;loop invariant k%3 == 0;loop invariant i <= j;loop invariant j <= k;loop invariant i <= k;loop invariant i >= n || (i < n && j < n && k < n);\nloop invariant i219: 0 <= i <= n; loop invariant j >= i; loop invariant k >= j; loop invariant i <= SIZE;\nloop invariant i220: i + j + k == 3 * n;\nloop invariant i221: i <= SIZE;\nloop invariant i222: j <= SIZE;\nloop invariant i223: k <= SIZE;\nloop invariant i224: i >= 0;\nloop invariant i225: j >= 0;\nloop invariant i226: k >= 0;\nloop invariant i227: i <= n;\nloop invariant i228: j <= n;\nloop invariant i229: k <= n;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 188,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: i % 3 == j % 3;\nloop invariant i3: i % 3 == k % 3;\nloop invariant i4: i % 3 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i166: 0 <= i <= n * 3;\nloop invariant i167: 0 <= j <= n * 3;\nloop invariant i168: 0 <= k <= n * 3;\nloop invariant i169: i >= j && j >= k;\nloop invariant i170: i >= k && j >= k;\nloop invariant i171: i == j && j == k;\n\n\n\n\nloop invariant i176: 0 <= n <= SIZE;\nloop invariant i177: i == j;\nloop invariant i178: j == k;\nloop invariant i179: (i + 3 * n) == (k + 3 * n);\nloop invariant i180: (i + 3 * n) == (j + 3 * n);\nloop invariant i181: (k + 3 * n) == (j + 3 * n);\nloop invariant i182: (i + 3 * n) == (i + 3 * n);\nloop invariant i183: (k + 3 * n) == (k + 3 * n);\nloop invariant i184: (j + 3 * n) == (j + 3 * n);\nloop invariant i185: j == i;\nloop invariant i186: k == i;\n\nloop invariant i188: j % 3 == 0;\nloop invariant i189: k % 3 == 0;\n\n\n\n\n\n\n\n\nloop invariant i198: i % 3 == j % 3 && j % 3 == k % 3;\nloop invariant i199: i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\nloop invariant i200: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i216: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % 3 == 0 ==> i % 3 == 0;\nloop invariant i217: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % 3 == 0 ==> j % 3 == 0;\n\n\n\n\n\n\nloop invariant i224: i >= 0;\nloop invariant i225: j >= 0;\nloop invariant i226: k >= 0;\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c"
        ],
        "skipped": [],
        "total": 3,
        "success_count": 0,
        "failure_count": 3,
        "success_rate": 0.0
    }
}