{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  while (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 4 * (i + 1); ==> x % 4 == 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2147483647;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant (x % 4) == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4 * n;\nloop invariant x % 4 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 4 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4 * (unknown_int()) + 4;\nloop invariant x % 4 == 0;\nloop invariant unknown_int() == 0 ==> x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= x + 4; loop invariant x % 4 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 4 == 0 ==> x >= 4;\nloop invariant x % 4 == 1 ==> x >= 1;\nloop invariant x % 4 == 2 ==> x >= 2;\nloop invariant x % 4 == 3 ==> x >= 3;\nloop invariant x >= 0;\nloop invariant x % 4 == 0 ==> x <= INT_MAX - 4;\nloop invariant x % 4 == 1 ==> x <= INT_MAX - 1;\nloop invariant x % 4 == 2 ==> x <= INT_MAX - 2;\nloop invariant x % 4 == 3 ==> x <= INT_MAX - 3;\nloop invariant x <= INT_MAX;\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4 * n;\nloop invariant (x % 4) == 0;\nloop invariant unknown_int() == 0;\nloop invariant unknown_int() == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4 * (i + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant x % 4 == 0 ==> (x / 4 >= 0);\nloop invariant x % 4 == 1 ==> (x / 4 >= 1);\nloop invariant x % 4 == 2 ==> (x / 4 >= 2);\nloop invariant x % 4 == 3 ==> (x / 4 >= 3);\nloop invariant x % 4 == 0 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 1 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 2 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 3 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 0 ==> (x / 4 == 0);\nloop invariant x % 4 == 1 ==> (x / 4 == 1);\nloop invariant x % 4 == 2 ==> (x / 4 == 2);\nloop invariant x % 4 == 3 ==> (x / 4 == 3);\nloop invariant x % 4 == 0 ==> (x == 0);\nloop invariant x % 4 == 1 ==> (x == 1);\nloop invariant x % 4 == 2 ==> (x == 2);\nloop invariant x % 4 == 3 ==> (x == 3);\nloop invariant x % 4 == 0 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 1 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 2 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 3 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 0 ==> (x >= 0);\nloop invariant x % 4 == 1 ==> (x >= 1);\nloop invariant x % 4 == 2 ==> (x >= 2);\nloop invariant x % 4 == 3 ==> (x >= 3);\nloop invariant x % 4 == 0 ==> (x == 0);\nloop invariant x % 4 == 1 ==> (x == 1);\nloop invariant x % 4 == 2 ==> (x == 2);\nloop invariant x % 4 == 3 ==> (x == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2147483647;\nloop invariant 0 <= unknown_int() <= 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * (i + 1); ==> x % 4 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token '==>'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is established but not preserved.\nAssertion x % 4 == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant (x % 4) == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= UINT_MAX is partially proven to be inductive.\nloop invariant (x % 4) == 0 is established but not preserved.\nAssertion x % 4 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= UINT_MAX;\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * n;\nloop invariant x % 4 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable n. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 4 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x % 4 == 0 is established but not preserved.\nAssertion x % 4 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * (unknown_int()) + 4;\nloop invariant x % 4 == 0;\nloop invariant unknown_int() == 0 ==> x == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= x + 4; loop invariant x % 4 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= x + 4; loop invariant x % 4 == 0 is partially proven to be inductive.\nAssertion x % 4 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= x + 4; loop invariant x % 4 == 0;\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 4 == 0 ==> x >= 4;\nloop invariant x % 4 == 1 ==> x >= 1;\nloop invariant x % 4 == 2 ==> x >= 2;\nloop invariant x % 4 == 3 ==> x >= 3;\nloop invariant x >= 0;\nloop invariant x % 4 == 0 ==> x <= INT_MAX - 4;\nloop invariant x % 4 == 1 ==> x <= INT_MAX - 1;\nloop invariant x % 4 == 2 ==> x <= INT_MAX - 2;\nloop invariant x % 4 == 3 ==> x <= INT_MAX - 3;\nloop invariant x <= INT_MAX;\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> x >= 4 is preserved but not established.\nloop invariant x % 4 == 1 ==> x >= 1 is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> x >= 2 is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> x >= 3 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> x <= INT_MAX - 4 is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> x <= INT_MAX - 1 is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> x <= INT_MAX - 2 is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> x <= INT_MAX - 3 is partially proven to be inductive.\nloop invariant x <= INT_MAX is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4 is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4 is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4 is partially proven to be inductive.\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3 is partially proven to be inductive.\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4) is partially proven to be inductive.\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4 is partially proven to be inductive.\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4 is partially proven to be inductive.\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4 is partially proven to be inductive.\nloop invariant x >= 4 * (x / 4) is partially proven to be inductive.\nloop invariant x <= INT_MAX - 4 * (x / 4) is partially proven to be inductive.\nAssertion x % 4 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: x % 4 == 1 ==> x >= 1;\nloop invariant i4: x % 4 == 2 ==> x >= 2;\nloop invariant i5: x % 4 == 3 ==> x >= 3;\nloop invariant i6: x >= 0;\n\n\n\n\n\nloop invariant i12: x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant i13: x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant i14: x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant i15: x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\n\nloop invariant i17: x >= 4 ==> x == 4 * (x / 4) + (x % 4);\n\n\n\nloop invariant i21: x >= 4 * (x / 4);\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * n;\nloop invariant (x % 4) == 0;\nloop invariant unknown_int() == 0;\nloop invariant unknown_int() == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * (i + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable i. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant x % 4 == 0 ==> (x / 4 >= 0);\nloop invariant x % 4 == 1 ==> (x / 4 >= 1);\nloop invariant x % 4 == 2 ==> (x / 4 >= 2);\nloop invariant x % 4 == 3 ==> (x / 4 >= 3);\nloop invariant x % 4 == 0 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 1 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 2 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 3 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 0 ==> (x / 4 == 0);\nloop invariant x % 4 == 1 ==> (x / 4 == 1);\nloop invariant x % 4 == 2 ==> (x / 4 == 2);\nloop invariant x % 4 == 3 ==> (x / 4 == 3);\nloop invariant x % 4 == 0 ==> (x == 0);\nloop invariant x % 4 == 1 ==> (x == 1);\nloop invariant x % 4 == 2 ==> (x == 2);\nloop invariant x % 4 == 3 ==> (x == 3);\nloop invariant x % 4 == 0 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 1 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 2 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 3 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 0 ==> (x >= 0);\nloop invariant x % 4 == 1 ==> (x >= 1);\nloop invariant x % 4 == 2 ==> (x >= 2);\nloop invariant x % 4 == 3 ==> (x >= 3);\nloop invariant x % 4 == 0 ==> (x == 0);\nloop invariant x % 4 == 1 ==> (x == 1);\nloop invariant x % 4 == 2 ==> (x == 2);\nloop invariant x % 4 == 3 ==> (x == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= UINT_MAX is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x / 4 >= 0) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x / 4 >= 1) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x / 4 >= 2) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x / 4 >= 3) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x / 4 <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x / 4 <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x / 4 <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x / 4 <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x / 4 == 0) is established but not preserved.\nloop invariant x % 4 == 1 ==> (x / 4 == 1) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x / 4 == 2) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x / 4 == 3) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x == 0) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x == 1) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x == 2) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x == 3) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x >= 0) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x >= 1) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x >= 2) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x >= 3) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x % 4 == 0) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x % 4 == 1) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x % 4 == 2) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x % 4 == 3) is partially proven to be inductive.\nAssertion x % 4 == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= UINT_MAX;\nloop invariant i2: x % 4 == 0 ==> (x / 4 >= 0);\n\n\n\nloop invariant i6: x % 4 == 0 ==> (x / 4 <= UINT_MAX);\nloop invariant i7: x % 4 == 1 ==> (x / 4 <= UINT_MAX);\nloop invariant i8: x % 4 == 2 ==> (x / 4 <= UINT_MAX);\nloop invariant i9: x % 4 == 3 ==> (x / 4 <= UINT_MAX);\n\n\n\n\n\n\n\n\nloop invariant i18: x % 4 == 0 ==> (x <= UINT_MAX);\nloop invariant i19: x % 4 == 1 ==> (x <= UINT_MAX);\nloop invariant i20: x % 4 == 2 ==> (x <= UINT_MAX);\nloop invariant i21: x % 4 == 3 ==> (x <= UINT_MAX);\nloop invariant i22: x % 4 == 0 ==> (x >= 0);\nloop invariant i23: x % 4 == 1 ==> (x >= 1);\nloop invariant i24: x % 4 == 2 ==> (x >= 2);\nloop invariant i25: x % 4 == 3 ==> (x >= 3);\nloop invariant i26: x % 4 == 0 ==> (x % 4 == 0);\nloop invariant i27: x % 4 == 1 ==> (x % 4 == 1);\nloop invariant i28: x % 4 == 2 ==> (x % 4 == 2);\nloop invariant i29: x % 4 == 3 ==> (x % 4 == 3);\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2147483647;\nloop invariant 0 <= unknown_int() <= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 12: unexpected token '==>'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 4 * (i + 1); ==> x % 4 == 0;\nloop invariant i2: 0 <= x <= 2147483647;\nloop invariant i3: 0 <= x <= UINT_MAX;\nloop invariant i4: (x % 4) == 0;\nloop invariant i5: 0 <= x <= 4 * n;\nloop invariant i6: x % 4 == 0;\nloop invariant i7: 0 <= x;\nloop invariant i8: 0 <= x <= 4 * (unknown_int()) + 4;\nloop invariant i9: unknown_int() == 0 ==> x == 0;\nloop invariant i10: 0 <= x <= x + 4; loop invariant x % 4 == 0;\nloop invariant i11: x % 4 == 0 ==> x >= 4;\nloop invariant i12: x % 4 == 1 ==> x >= 1;\nloop invariant i13: x % 4 == 2 ==> x >= 2;\nloop invariant i14: x % 4 == 3 ==> x >= 3;\nloop invariant i15: x >= 0;\nloop invariant i16: x % 4 == 0 ==> x <= INT_MAX - 4;\nloop invariant i17: x % 4 == 1 ==> x <= INT_MAX - 1;\nloop invariant i18: x % 4 == 2 ==> x <= INT_MAX - 2;\nloop invariant i19: x % 4 == 3 ==> x <= INT_MAX - 3;\nloop invariant i20: x <= INT_MAX;\nloop invariant i21: x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant i22: x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant i23: x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant i24: x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant i25: x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant i26: x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant i27: x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant i28: x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant i29: x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant i30: x >= 4 * (x / 4);\nloop invariant i31: x <= INT_MAX - 4 * (x / 4);\nloop invariant i32: unknown_int() == 0;\nloop invariant i33: unknown_int() == 1;\nloop invariant i34: 0 <= x <= 4 * (i + 1);\nloop invariant i35: 0 <= y <= 100000;\nloop invariant i36: x >= (1 + (y - 1) * y / 2);\nloop invariant i37: x % 4 == 0 ==> (x / 4 >= 0);\nloop invariant i38: x % 4 == 1 ==> (x / 4 >= 1);\nloop invariant i39: x % 4 == 2 ==> (x / 4 >= 2);\nloop invariant i40: x % 4 == 3 ==> (x / 4 >= 3);\nloop invariant i41: x % 4 == 0 ==> (x / 4 <= UINT_MAX);\nloop invariant i42: x % 4 == 1 ==> (x / 4 <= UINT_MAX);\nloop invariant i43: x % 4 == 2 ==> (x / 4 <= UINT_MAX);\nloop invariant i44: x % 4 == 3 ==> (x / 4 <= UINT_MAX);\nloop invariant i45: x % 4 == 0 ==> (x / 4 == 0);\nloop invariant i46: x % 4 == 1 ==> (x / 4 == 1);\nloop invariant i47: x % 4 == 2 ==> (x / 4 == 2);\nloop invariant i48: x % 4 == 3 ==> (x / 4 == 3);\nloop invariant i49: x % 4 == 0 ==> (x == 0);\nloop invariant i50: x % 4 == 1 ==> (x == 1);\nloop invariant i51: x % 4 == 2 ==> (x == 2);\nloop invariant i52: x % 4 == 3 ==> (x == 3);\nloop invariant i53: x % 4 == 0 ==> (x <= UINT_MAX);\nloop invariant i54: x % 4 == 1 ==> (x <= UINT_MAX);\nloop invariant i55: x % 4 == 2 ==> (x <= UINT_MAX);\nloop invariant i56: x % 4 == 3 ==> (x <= UINT_MAX);\nloop invariant i57: x % 4 == 0 ==> (x >= 0);\nloop invariant i58: x % 4 == 1 ==> (x >= 1);\nloop invariant i59: x % 4 == 2 ==> (x >= 2);\nloop invariant i60: x % 4 == 3 ==> (x >= 3);\nloop invariant i61: x % 4 == 0 ==> (x % 4 == 0);\nloop invariant i62: x % 4 == 1 ==> (x % 4 == 1);\nloop invariant i63: x % 4 == 2 ==> (x % 4 == 2);\nloop invariant i64: x % 4 == 3 ==> (x % 4 == 3);\nloop invariant i65: 1 <= x <= 2147483647;\nloop invariant i66: 0 <= unknown_int() <= 1;\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 26,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\nloop invariant i3: 0 <= x <= UINT_MAX;\n\n\n\nloop invariant i7: 0 <= x;\n\n\nloop invariant i10: 0 <= x <= x + 4; loop invariant x % 4 == 0;\n\nloop invariant i12: x % 4 == 1 ==> x >= 1;\nloop invariant i13: x % 4 == 2 ==> x >= 2;\nloop invariant i14: x % 4 == 3 ==> x >= 3;\nloop invariant i15: x >= 0;\n\nloop invariant i17: x % 4 == 1 ==> x <= INT_MAX - 1;\nloop invariant i18: x % 4 == 2 ==> x <= INT_MAX - 2;\nloop invariant i19: x % 4 == 3 ==> x <= INT_MAX - 3;\n\nloop invariant i21: x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant i22: x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant i23: x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant i24: x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\n\nloop invariant i26: x >= 4 ==> x == 4 * (x / 4) + (x % 4);\n\n\n\nloop invariant i30: x >= 4 * (x / 4);\n\n\n\n\n\n\nloop invariant i37: x % 4 == 0 ==> (x / 4 >= 0);\nloop invariant i38: x % 4 == 1 ==> (x / 4 >= 1);\nloop invariant i39: x % 4 == 2 ==> (x / 4 >= 2);\nloop invariant i40: x % 4 == 3 ==> (x / 4 >= 3);\nloop invariant i41: x % 4 == 0 ==> (x / 4 <= UINT_MAX);\nloop invariant i42: x % 4 == 1 ==> (x / 4 <= UINT_MAX);\nloop invariant i43: x % 4 == 2 ==> (x / 4 <= UINT_MAX);\nloop invariant i44: x % 4 == 3 ==> (x / 4 <= UINT_MAX);\n\nloop invariant i46: x % 4 == 1 ==> (x / 4 == 1);\nloop invariant i47: x % 4 == 2 ==> (x / 4 == 2);\nloop invariant i48: x % 4 == 3 ==> (x / 4 == 3);\n\nloop invariant i50: x % 4 == 1 ==> (x == 1);\nloop invariant i51: x % 4 == 2 ==> (x == 2);\nloop invariant i52: x % 4 == 3 ==> (x == 3);\nloop invariant i53: x % 4 == 0 ==> (x <= UINT_MAX);\nloop invariant i54: x % 4 == 1 ==> (x <= UINT_MAX);\nloop invariant i55: x % 4 == 2 ==> (x <= UINT_MAX);\nloop invariant i56: x % 4 == 3 ==> (x <= UINT_MAX);\nloop invariant i57: x % 4 == 0 ==> (x >= 0);\nloop invariant i58: x % 4 == 1 ==> (x >= 1);\nloop invariant i59: x % 4 == 2 ==> (x >= 2);\nloop invariant i60: x % 4 == 3 ==> (x >= 3);\nloop invariant i61: x % 4 == 0 ==> (x % 4 == 0);\nloop invariant i62: x % 4 == 1 ==> (x % 4 == 1);\nloop invariant i63: x % 4 == 2 ==> (x % 4 == 2);\nloop invariant i64: x % 4 == 3 ==> (x % 4 == 3);\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c"
        ],
        "skipped": [],
        "total": 17,
        "success_count": 3,
        "failure_count": 14,
        "success_rate": 0.17647058823529413
    }
}