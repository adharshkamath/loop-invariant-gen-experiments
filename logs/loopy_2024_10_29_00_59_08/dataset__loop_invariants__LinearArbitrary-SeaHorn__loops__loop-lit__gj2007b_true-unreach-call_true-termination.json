{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    while(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant (m >= 0 || n <= 0) ==> (m >= 0);\nloop invariant (m < n || n <= 0) ==> (m < n);\nloop invariant (m >= 0 || n <= 0) ==> (m < n);\nloop invariant (m < n || n <= 0) ==> (m >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m >= x;\nloop invariant (m >= 0 ==> n <= 0);\nloop invariant (m < n ==> n <= 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= m <= n;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m <= x + 1;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> n <= m + 1;\nloop invariant m <= x ==> x + 1 <= m + 1;\nloop invariant x <= n ==> m <= x;\nloop invariant m <= x ==> x <= x + 1;\nloop invariant x <= m ==> m <= m;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant (m >= 0 ==> n > 0);\nloop invariant (m < n ==> n > 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> x >= m;\nloop invariant n <= 0 ==> x >= n;\nloop invariant m < n ==> x < n;\nloop invariant m >= 0 ==> m >= 0;\nloop invariant n <= 0 ==> n <= 0;\nloop invariant m < n ==> m < n;\nloop invariant m >= 0 ==> m <= x;\nloop invariant n <= 0 ==> n <= x;\nloop invariant m < n ==> m < x;\nloop invariant m >= 0 ==> m >= x;\nloop invariant n <= 0 ==> n >= x;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m >= m;\nloop invariant m >= 0 ==> m <= m;\nloop invariant n <= 0 ==> n >= n;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= m;\nloop invariant n <= 0 ==> n <= n;\nloop invariant m < n ==> m >= m;\nloop invariant m >= 0 ==> m <= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant x == n ==> m == x;\nloop invariant x < n ==> m < x;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant 0 <= m <= x;\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant (x < n || n <= 0) ==> (m >= 0);\nloop invariant (x < n || n <= 0) ==> (m < n);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (x < n ==> m < n);\nloop invariant (x >= n ==> m >= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (m == x) || (x == n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant 0 <= x <= n;\nloop invariant (x < n ==> m <= x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m < n ==> x == n;\nloop invariant m >= n ==> x < n;\nloop invariant m < n ==> m < x;\nloop invariant m >= n ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n ;\nloop invariant m <= x ;\nloop invariant x <= n ;\nloop invariant m >= 0 ;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m >= 0 is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant (m >= 0 || n <= 0) ==> (m >= 0);\nloop invariant (m < n || n <= 0) ==> (m < n);\nloop invariant (m >= 0 || n <= 0) ==> (m < n);\nloop invariant (m < n || n <= 0) ==> (m >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m >= 0 is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant (m >= 0 || n <= 0) ==> (m >= 0) is partially proven to be inductive.\nloop invariant (m < n || n <= 0) ==> (m < n) is preserved but not established.\nloop invariant (m >= 0 || n <= 0) ==> (m < n) is partially proven to be inductive.\nloop invariant (m < n || n <= 0) ==> (m >= 0) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\nloop invariant i5: (m >= 0 || n <= 0) ==> (m >= 0);\n\n\nloop invariant i8: (m < n || n <= 0) ==> (m >= 0);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m >= x;\nloop invariant (m >= 0 ==> n <= 0);\nloop invariant (m < n ==> n <= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant m >= x is partially proven to be inductive.\nloop invariant (m >= 0 ==> n <= 0) is preserved but not established.\nloop invariant (m < n ==> n <= 0) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= m <= n;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m <= x + 1;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> n <= m + 1;\nloop invariant m <= x ==> x + 1 <= m + 1;\nloop invariant x <= n ==> m <= x;\nloop invariant m <= x ==> x <= x + 1;\nloop invariant x <= m ==> m <= m;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant x >= m is partially proven to be inductive.\nloop invariant m <= x + 1 is partially proven to be inductive.\nloop invariant x < n ==> m <= n is partially proven to be inductive.\nloop invariant x < n ==> n <= m + 1 is preserved but not established.\nloop invariant m <= x ==> x + 1 <= m + 1 is established but not preserved.\nloop invariant x <= n ==> m <= x is partially proven to be inductive.\nloop invariant m <= x ==> x <= x + 1 is partially proven to be inductive.\nloop invariant x <= m ==> m <= m is partially proven to be inductive.\nloop invariant m <= x ==> x <= n is partially proven to be inductive.\nloop invariant x <= m ==> m <= n is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\nloop invariant i4: x >= m;\nloop invariant i5: m <= x + 1;\nloop invariant i6: x < n ==> m <= n;\n\n\nloop invariant i9: x <= n ==> m <= x;\nloop invariant i10: m <= x ==> x <= x + 1;\nloop invariant i11: x <= m ==> m <= m;\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant (m >= 0 ==> n > 0);\nloop invariant (m < n ==> n > 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= m <= x is partially proven to be inductive.\nloop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= m is partially proven to be inductive.\nloop invariant (m >= 0 ==> n > 0) is preserved but not established.\nloop invariant (m < n ==> n > 0) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= m <= x;\n\nloop invariant i3: x >= m;\n\nloop invariant i5: (m < n ==> n > 0);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> x >= m;\nloop invariant n <= 0 ==> x >= n;\nloop invariant m < n ==> x < n;\nloop invariant m >= 0 ==> m >= 0;\nloop invariant n <= 0 ==> n <= 0;\nloop invariant m < n ==> m < n;\nloop invariant m >= 0 ==> m <= x;\nloop invariant n <= 0 ==> n <= x;\nloop invariant m < n ==> m < x;\nloop invariant m >= 0 ==> m >= x;\nloop invariant n <= 0 ==> n >= x;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m >= m;\nloop invariant m >= 0 ==> m <= m;\nloop invariant n <= 0 ==> n >= n;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= m;\nloop invariant n <= 0 ==> n <= n;\nloop invariant m < n ==> m >= m;\nloop invariant m >= 0 ==> m <= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m >= 0 ==> x >= m is partially proven to be inductive.\nloop invariant n <= 0 ==> x >= n is partially proven to be inductive.\nloop invariant m < n ==> x < n is established but not preserved.\nloop invariant m >= 0 ==> m >= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> n <= 0 is partially proven to be inductive.\nloop invariant m < n ==> m < n is partially proven to be inductive.\nloop invariant m >= 0 ==> m <= x is partially proven to be inductive.\nloop invariant n <= 0 ==> n <= x is partially proven to be inductive.\nloop invariant m < n ==> m < x is preserved but not established.\nloop invariant m >= 0 ==> m >= x is established but not preserved.\nloop invariant n <= 0 ==> n >= x is partially proven to be inductive.\nloop invariant m < n ==> m <= n is partially proven to be inductive.\nloop invariant m >= 0 ==> m >= n is partially proven to be inductive.\nloop invariant n <= 0 ==> n >= m is partially proven to be inductive.\nloop invariant m < n ==> m >= m is partially proven to be inductive.\nloop invariant m >= 0 ==> m <= m is partially proven to be inductive.\nloop invariant n <= 0 ==> n >= n is partially proven to be inductive.\nloop invariant m >= 0 ==> m >= m is partially proven to be inductive.\nloop invariant n <= 0 ==> n <= n is partially proven to be inductive.\nloop invariant m >= 0 ==> m <= n is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0 ==> x >= m;\nloop invariant i3: n <= 0 ==> x >= n;\n\nloop invariant i5: m >= 0 ==> m >= 0;\nloop invariant i6: n <= 0 ==> n <= 0;\nloop invariant i7: m < n ==> m < n;\nloop invariant i8: m >= 0 ==> m <= x;\nloop invariant i9: n <= 0 ==> n <= x;\n\n\n\nloop invariant i13: m < n ==> m <= n;\n\n\nloop invariant i16: m < n ==> m >= m;\nloop invariant i17: m >= 0 ==> m <= m;\nloop invariant i18: n <= 0 ==> n >= n;\nloop invariant i19: m >= 0 ==> m >= m;\nloop invariant i20: n <= 0 ==> n <= n;\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant x == n ==> m == x;\nloop invariant x < n ==> m < x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant x == n ==> m == x is established but not preserved.\nloop invariant x < n ==> m < x is preserved but not established.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\nloop invariant i3: m <= x;\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant 0 <= m <= x;\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant (x < n || n <= 0) ==> (m >= 0);\nloop invariant (x < n || n <= 0) ==> (m < n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant (x < n || n <= 0) ==> (m >= 0) is partially proven to be inductive.\nloop invariant (x < n || n <= 0) ==> (m < n) is preserved but not established.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\nloop invariant i3: m <= x;\nloop invariant i4: (x < n || n <= 0) ==> (m >= 0);\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (x < n ==> m < n);\nloop invariant (x >= n ==> m >= n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nloop invariant m >= 0 is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant (x < n ==> m < n) is partially proven to be inductive.\nloop invariant (x >= n ==> m >= n) is established but not preserved.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: m >= 0;\nloop invariant i4: m <= x;\n\nloop invariant i6: (x < n ==> m < n);\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (m == x) || (x == n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant (m == x) || (x == n) is established but not preserved.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant 0 <= x <= n;\nloop invariant (x < n ==> m <= x);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= m <= x is partially proven to be inductive.\nloop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x < n ==> m <= x) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= m <= x;\n\nloop invariant i3: (x < n ==> m <= x);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m < n ==> x == n;\nloop invariant m >= n ==> x < n;\nloop invariant m < n ==> m < x;\nloop invariant m >= n ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= x is partially proven to be inductive.\nloop invariant m < n ==> x == n is preserved but not established.\nloop invariant m >= n ==> x < n is preserved but not established.\nloop invariant m < n ==> m < x is partially proven to be inductive.\nloop invariant m >= n ==> m >= x is partially proven to be inductive.\nloop invariant x < n ==> m < x is partially proven to be inductive.\nloop invariant m >= x ==> m >= x is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\n\n\nloop invariant i6: m >= n ==> m >= x;\n\nloop invariant i8: m >= x ==> m >= x;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n ;\nloop invariant m <= x ;\nloop invariant x <= n ;\nloop invariant m >= 0 ;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant m >= 0 is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= x <= n ;\nloop invariant i2: m <= x ;\nloop invariant i3: x <= n ;\nloop invariant i4: m >= 0 ;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 64: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\nloop invariant i4: m <= n;\nloop invariant i5: x <= n;\nloop invariant i6: (m >= 0 || n <= 0) ==> (m >= 0);\nloop invariant i7: (m < n || n <= 0) ==> (m < n);\nloop invariant i8: (m >= 0 || n <= 0) ==> (m < n);\nloop invariant i9: (m < n || n <= 0) ==> (m >= 0);\nloop invariant i10: 0 <= m <= n;\nloop invariant i11: m >= x;\nloop invariant i12: (m >= 0 ==> n <= 0);\nloop invariant i13: (m < n ==> n <= 0);\nloop invariant i14: 1 <= n;\nloop invariant i15: x >= m;\nloop invariant i16: m <= x + 1;\nloop invariant i17: x < n ==> m <= n;\nloop invariant i18: x < n ==> n <= m + 1;\nloop invariant i19: m <= x ==> x + 1 <= m + 1;\nloop invariant i20: x <= n ==> m <= x;\nloop invariant i21: m <= x ==> x <= x + 1;\nloop invariant i22: x <= m ==> m <= m;\nloop invariant i23: m <= x ==> x <= n;\nloop invariant i24: x <= m ==> m <= n;\nloop invariant i25: 0 <= m <= x;\nloop invariant i26: (m >= 0 ==> n > 0);\nloop invariant i27: (m < n ==> n > 0);\nloop invariant i28: m >= 0 ==> x >= m;\nloop invariant i29: n <= 0 ==> x >= n;\nloop invariant i30: m < n ==> x < n;\nloop invariant i31: m >= 0 ==> m >= 0;\nloop invariant i32: n <= 0 ==> n <= 0;\nloop invariant i33: m < n ==> m < n;\nloop invariant i34: m >= 0 ==> m <= x;\nloop invariant i35: n <= 0 ==> n <= x;\nloop invariant i36: m < n ==> m < x;\nloop invariant i37: m >= 0 ==> m >= x;\nloop invariant i38: n <= 0 ==> n >= x;\nloop invariant i39: m < n ==> m <= n;\nloop invariant i40: m >= 0 ==> m >= n;\nloop invariant i41: n <= 0 ==> n >= m;\nloop invariant i42: m < n ==> m >= m;\nloop invariant i43: m >= 0 ==> m <= m;\nloop invariant i44: n <= 0 ==> n >= n;\nloop invariant i45: m >= 0 ==> m >= m;\nloop invariant i46: n <= 0 ==> n <= n;\nloop invariant i47: m >= 0 ==> m <= n;\nloop invariant i48: x == n ==> m == x;\nloop invariant i49: x < n ==> m < x;\nloop invariant i50: 0 <= x < n;\nloop invariant i51: (unknown_int() ==> (x == m));\nloop invariant i52: (x < n || n <= 0) ==> (m >= 0);\nloop invariant i53: (x < n || n <= 0) ==> (m < n);\nloop invariant i54: x >= 0;\nloop invariant i55: (x < n ==> m < n);\nloop invariant i56: (x >= n ==> m >= n);\nloop invariant i57: (m == x) || (x == n);\nloop invariant i58: (x < n ==> m <= x);\nloop invariant i59: m < n ==> x == n;\nloop invariant i60: m >= n ==> x < n;\nloop invariant i61: m >= n ==> m >= x;\nloop invariant i62: m >= x ==> m >= x;\nloop invariant i63: 0 <= x <= n ;\nloop invariant i64: m <= x ;\nloop invariant i65: x <= n ;\nloop invariant i66: m >= 0 ;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\n\nloop invariant i6: (m >= 0 || n <= 0) ==> (m >= 0);\n\n\nloop invariant i9: (m < n || n <= 0) ==> (m >= 0);\n\n\n\n\n\nloop invariant i15: x >= m;\nloop invariant i16: m <= x + 1;\nloop invariant i17: x < n ==> m <= n;\n\n\nloop invariant i20: x <= n ==> m <= x;\nloop invariant i21: m <= x ==> x <= x + 1;\nloop invariant i22: x <= m ==> m <= m;\n\n\nloop invariant i25: 0 <= m <= x;\n\nloop invariant i27: (m < n ==> n > 0);\nloop invariant i28: m >= 0 ==> x >= m;\nloop invariant i29: n <= 0 ==> x >= n;\n\nloop invariant i31: m >= 0 ==> m >= 0;\nloop invariant i32: n <= 0 ==> n <= 0;\nloop invariant i33: m < n ==> m < n;\nloop invariant i34: m >= 0 ==> m <= x;\nloop invariant i35: n <= 0 ==> n <= x;\n\n\n\nloop invariant i39: m < n ==> m <= n;\n\n\nloop invariant i42: m < n ==> m >= m;\nloop invariant i43: m >= 0 ==> m <= m;\nloop invariant i44: n <= 0 ==> n >= n;\nloop invariant i45: m >= 0 ==> m >= m;\nloop invariant i46: n <= 0 ==> n <= n;\n\n\n\n\n\nloop invariant i52: (x < n || n <= 0) ==> (m >= 0);\n\nloop invariant i54: x >= 0;\nloop invariant i55: (x < n ==> m < n);\n\n\nloop invariant i58: (x < n ==> m <= x);\n\n\nloop invariant i61: m >= n ==> m >= x;\nloop invariant i62: m >= x ==> m >= x;\nloop invariant i63: 0 <= x <= n ;\nloop invariant i64: m <= x ;\nloop invariant i65: x <= n ;\nloop invariant i66: m >= 0 ;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 9,
        "success_count": 1,
        "failure_count": 8,
        "success_rate": 0.1111111111111111
    }
}