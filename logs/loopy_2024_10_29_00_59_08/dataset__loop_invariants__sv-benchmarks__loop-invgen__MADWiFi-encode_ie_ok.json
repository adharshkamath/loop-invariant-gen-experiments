{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 2*i + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant bufsize < bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= bufsize_0;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= bufsize - 2*i;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant p >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant i <= bufsize / 2;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p == bufsize_0 - bufsize + leader_len + 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= bufsize <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant leader_len >= 0;\nloop invariant bufsize_0 >= 0;\nloop invariant ielen >= 0;\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant p + 2*i <= bufsize;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize - 2*i >= 0;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize >= 0;\nloop invariant i >= 0;\nloop invariant ielen >= 0;\nloop invariant leader_len >= 0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= 2*i;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant p <= bufsize_0 - 2*i + leader_len;\nloop invariant bufsize - 2*i <= bufsize_0 - leader_len;\nloop invariant bufsize_0 - 2*i <= bufsize_0 - leader_len;\nloop invariant bufsize_0 - 2*i <= bufsize - leader_len;\nloop invariant bufsize - 2*i <= bufsize - leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant ielen <= i <= ielen;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 0;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len >= 0;\nloop invariant leader_len >= ielen;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize <= LARGE_INT;\nloop invariant 0 <= bufsize_0 <= LARGE_INT;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= leader_len <= LARGE_INT;\nloop invariant 0 <= ielen <= LARGE_INT;\nloop invariant 0 <= bufsize < bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2 * ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize + leader_len;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant bufsize >= bufsize - leader_len;\nloop invariant p >= p + 2;\nloop invariant bufsize >= bufsize - 2;\nloop invariant p >= p + 1;\nloop invariant bufsize >= bufsize - 1;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant bufsize >= bufsize - leader_len;\nloop invariant bufsize >= bufsize - 2*i;\nloop invariant p >= p + 2*i;\nloop invariant bufsize >= bufsize - 2*ielen;\nloop invariant p >= p + 2*ielen;\nloop invariant bufsize >= bufsize - 2*ielen;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p && p <= bufsize_0;\nloop invariant leader_len <= p && p <= bufsize_0;\nloop invariant 0 <= i && i <= ielen;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i && 2 <= bufsize;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant p + 1 < bufsize_0 ==> p < bufsize_0;\nloop invariant bufsize >= 2*i ==> i <= ielen;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + leader_len;\nloop invariant bufsize >= 2*i ==> bufsize - leader_len >= 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2;\nloop invariant bufsize >= 2*i ==> bufsize - 2 >= 2*i;\nloop invariant bufsize >= 2*i ==> bufsize/2 >= i;\nloop invariant bufsize >= 2*i ==> bufsize >= i + i;\nloop invariant bufsize >= 2*i ==> bufsize >= i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 - leader_len - 2 * i <= bufsize;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= 2*i + leader_len;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 2*i + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p >= 2*i + 2 * (ielen - i) is preserved but not established.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 * i is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= leader_len + 2 * (ielen - i) is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\nloop invariant i3: p <= bufsize_0;\n\nloop invariant i5: bufsize <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant bufsize < bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 1 <= bufsize_0 is established but not preserved.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant 0 <= ielen is partially proven to be inductive.\nloop invariant 0 <= p is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant bufsize < bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\n\nloop invariant i4: p <= bufsize_0;\nloop invariant i5: 0 <= bufsize <= bufsize_0;\nloop invariant i6: 0 <= bufsize_0;\nloop invariant i7: 0 <= i;\nloop invariant i8: 0 <= ielen;\nloop invariant i9: 0 <= p;\nloop invariant i10: 0 <= bufsize;\nloop invariant i11: bufsize < bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= bufsize_0;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= bufsize - 2*i;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant p >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant ielen <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 <= bufsize - 2*i is preserved but not established.\nloop invariant p <= bufsize_0 - 2*i is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: leader_len <= bufsize_0;\nloop invariant i4: ielen <= bufsize_0;\n\n\nloop invariant i7: p >= 0;\nloop invariant i8: i >= 0;\nloop invariant i9: i <= ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant i <= bufsize / 2;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p == bufsize_0 - bufsize + leader_len + 2 * i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant i <= bufsize / 2 is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p == bufsize_0 - bufsize + leader_len + 2 * i is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize_0;\nloop invariant i2: bufsize_0 <= LARGE_INT;\nloop invariant i3: 0 <= bufsize;\nloop invariant i4: bufsize <= bufsize_0 - leader_len;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= ielen;\n\nloop invariant i8: p >= 0;\nloop invariant i9: p <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= bufsize <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant leader_len >= 0;\nloop invariant bufsize_0 >= 0;\nloop invariant ielen >= 0;\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= 0 is partially proven to be inductive.\nloop invariant ielen >= 0 is partially proven to be inductive.\nloop invariant (leader_len < LARGE_INT) is partially proven to be inductive.\nloop invariant (bufsize < LARGE_INT) is partially proven to be inductive.\nloop invariant (ielen < LARGE_INT) is partially proven to be inductive.\nloop invariant (p <= bufsize_0) is partially proven to be inductive.\nloop invariant (p >= 0) is partially proven to be inductive.\nloop invariant (bufsize_0 - leader_len <= bufsize) is partially proven to be inductive.\nloop invariant (bufsize <= bufsize_0) is partially proven to be inductive.\nloop invariant (i >= 0) is partially proven to be inductive.\nloop invariant (i <= ielen) is partially proven to be inductive.\nloop invariant (bufsize >= 0) is partially proven to be inductive.\nloop invariant (leader_len >= 0) is partially proven to be inductive.\nloop invariant (bufsize_0 >= 0) is partially proven to be inductive.\nloop invariant (ielen >= 0) is partially proven to be inductive.\nloop invariant (ielen >= i) is partially proven to be inductive.\nloop invariant (p <= leader_len) is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize_0 - leader_len <= bufsize <= bufsize_0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= ielen;\nloop invariant i5: bufsize >= 0;\nloop invariant i6: bufsize <= bufsize_0;\nloop invariant i7: leader_len >= 0;\nloop invariant i8: bufsize_0 >= 0;\nloop invariant i9: ielen >= 0;\nloop invariant i10: (leader_len < LARGE_INT);\nloop invariant i11: (bufsize < LARGE_INT);\nloop invariant i12: (ielen < LARGE_INT);\nloop invariant i13: (p <= bufsize_0);\nloop invariant i14: (p >= 0);\nloop invariant i15: (bufsize_0 - leader_len <= bufsize);\nloop invariant i16: (bufsize <= bufsize_0);\nloop invariant i17: (i >= 0);\nloop invariant i18: (i <= ielen);\nloop invariant i19: (bufsize >= 0);\nloop invariant i20: (leader_len >= 0);\nloop invariant i21: (bufsize_0 >= 0);\nloop invariant i22: (ielen >= 0);\nloop invariant i23: (ielen >= i);\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant p + 2*i <= bufsize;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize - 2*i >= 0;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize >= 0;\nloop invariant i >= 0;\nloop invariant ielen >= 0;\nloop invariant leader_len >= 0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= 2*i;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant p <= bufsize_0 - 2*i + leader_len;\nloop invariant bufsize - 2*i <= bufsize_0 - leader_len;\nloop invariant bufsize_0 - 2*i <= bufsize_0 - leader_len;\nloop invariant bufsize_0 - 2*i <= bufsize - leader_len;\nloop invariant bufsize - 2*i <= bufsize - leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i < ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 2*i <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 2*i <= bufsize is preserved but not established.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize - 2*i >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= 0 is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant ielen >= 0 is partially proven to be inductive.\nloop invariant leader_len >= 0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*i is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2*i is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*i + leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2*i + leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2*i + leader_len is partially proven to be inductive.\nloop invariant bufsize - 2*i <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize_0 - 2*i <= bufsize_0 - leader_len is preserved but not established.\nloop invariant bufsize_0 - 2*i <= bufsize - leader_len is partially proven to be inductive.\nloop invariant bufsize - 2*i <= bufsize - leader_len is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: 0 <= bufsize <= bufsize_0;\n\n\nloop invariant i5: 0 <= p <= bufsize_0;\n\nloop invariant i7: bufsize_0 >= 0;\nloop invariant i8: bufsize >= 0;\nloop invariant i9: i >= 0;\nloop invariant i10: ielen >= 0;\nloop invariant i11: leader_len >= 0;\n\nloop invariant i13: bufsize_0 >= leader_len;\n\n\nloop invariant i16: p >= leader_len;\n\n\n\n\nloop invariant i21: bufsize - 2*i <= bufsize_0 - leader_len;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= ielen;\nloop invariant i4: p >= 0;\nloop invariant i5: p <= bufsize_0;\nloop invariant i6: bufsize >= 0;\nloop invariant i7: bufsize <= bufsize_0;\nloop invariant i8: bufsize >= 2*ielen;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant ielen <= i <= ielen;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 0;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len >= 0;\nloop invariant leader_len >= ielen;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant ielen <= i <= ielen is preserved but not established.\nloop invariant bufsize_0 <= bufsize is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= leader_len is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len >= 0 is partially proven to be inductive.\nloop invariant leader_len >= ielen is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 - 2*ielen is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 - 2 is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 - 1 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: leader_len <= p <= bufsize_0;\n\n\nloop invariant i5: bufsize <= bufsize_0;\nloop invariant i6: bufsize <= bufsize_0 - leader_len;\n\nloop invariant i8: bufsize >= 0;\nloop invariant i9: leader_len <= bufsize_0;\nloop invariant i10: leader_len >= 0;\n\n\nloop invariant i13: leader_len <= bufsize_0 - 2*ielen;\nloop invariant i14: leader_len <= bufsize_0 - 2;\nloop invariant i15: leader_len <= bufsize_0 - 1;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= LARGE_INT;\nloop invariant 0 <= bufsize_0 <= LARGE_INT;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= leader_len <= LARGE_INT;\nloop invariant 0 <= ielen <= LARGE_INT;\nloop invariant 0 <= bufsize < bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2 * ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize + leader_len;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= bufsize <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= leader_len <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= ielen <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= bufsize < bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nloop invariant bufsize >= 2 * ielen is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= LARGE_INT;\nloop invariant i2: 0 <= bufsize_0 <= LARGE_INT;\nloop invariant i3: 0 <= i <= ielen;\nloop invariant i4: 0 <= leader_len <= LARGE_INT;\nloop invariant i5: 0 <= ielen <= LARGE_INT;\nloop invariant i6: 0 <= bufsize < bufsize_0;\n\nloop invariant i8: bufsize >= 2 * ielen;\nloop invariant i9: p >= 0;\nloop invariant i10: p <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant bufsize >= bufsize - leader_len;\nloop invariant p >= p + 2;\nloop invariant bufsize >= bufsize - 2;\nloop invariant p >= p + 1;\nloop invariant bufsize >= bufsize - 1;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant bufsize >= bufsize - leader_len;\nloop invariant bufsize >= bufsize - 2*i;\nloop invariant p >= p + 2*i;\nloop invariant bufsize >= bufsize - 2*ielen;\nloop invariant p >= p + 2*ielen;\nloop invariant bufsize >= bufsize - 2*ielen;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize is preserved but not established.\nloop invariant bufsize >= bufsize - leader_len is partially proven to be inductive.\nloop invariant p >= p + 2 is preserved but not established.\nloop invariant bufsize >= bufsize - 2 is partially proven to be inductive.\nloop invariant p >= p + 1 is partially proven to be inductive.\nloop invariant bufsize >= bufsize - 1 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant bufsize >= bufsize - 2*i is partially proven to be inductive.\nloop invariant p >= p + 2*i is partially proven to be inductive.\nloop invariant bufsize >= bufsize - 2*ielen is partially proven to be inductive.\nloop invariant p >= p + 2*ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: p <= bufsize_0;\nloop invariant i3: bufsize <= bufsize_0;\n\nloop invariant i5: bufsize >= bufsize - leader_len;\n\nloop invariant i7: bufsize >= bufsize - 2;\n\nloop invariant i9: bufsize >= bufsize - 1;\nloop invariant i10: i <= ielen;\nloop invariant i11: i >= 0;\nloop invariant i12: bufsize >= bufsize - 2*i;\n\nloop invariant i14: bufsize >= bufsize - 2*ielen;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= p && p <= bufsize_0;\nloop invariant leader_len <= p && p <= bufsize_0;\nloop invariant 0 <= i && i <= ielen;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i && 2 <= bufsize;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p && p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= p && p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i && i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i is established but not preserved.\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i && 2 <= bufsize is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p && p <= bufsize_0;\nloop invariant i2: leader_len <= p && p <= bufsize_0;\nloop invariant i3: 0 <= i && i <= ielen;\nloop invariant i4: 0 <= bufsize && bufsize <= bufsize_0 - leader_len;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant p + 1 < bufsize_0 ==> p < bufsize_0;\nloop invariant bufsize >= 2*i ==> i <= ielen;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + leader_len;\nloop invariant bufsize >= 2*i ==> bufsize - leader_len >= 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2;\nloop invariant bufsize >= 2*i ==> bufsize - 2 >= 2*i;\nloop invariant bufsize >= 2*i ==> bufsize/2 >= i;\nloop invariant bufsize >= 2*i ==> bufsize >= i + i;\nloop invariant bufsize >= 2*i ==> bufsize >= i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant leader_len <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 ==> p < bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + leader_len is neither established nor preserved.\nloop invariant bufsize >= 2*i ==> bufsize - leader_len >= 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2 is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize - 2 >= 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize/2 >= i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= i + i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: leader_len <= p <= bufsize_0;\nloop invariant i3: bufsize >= 2;\nloop invariant i4: p + 1 < bufsize_0 ==> p < bufsize_0;\nloop invariant i5: bufsize >= 2*i ==> i <= ielen;\n\n\n\n\nloop invariant i10: bufsize >= 2*i ==> bufsize/2 >= i;\nloop invariant i11: bufsize >= 2*i ==> bufsize >= i + i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 - leader_len - 2 * i <= bufsize;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= p <= bufsize is neither established nor preserved.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len - 2 * i <= bufsize is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\nloop invariant i3: 0 <= i <= ielen;\nloop invariant i4: bufsize_0 - leader_len - 2 * i <= bufsize;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= 2*i + leader_len;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant bufsize_0 >= 2*i + leader_len is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\nloop invariant i2: p <= bufsize_0;\nloop invariant i3: 0 <= i;\nloop invariant i4: i <= ielen;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 167: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p >= 2*i + 2 * (ielen - i);\nloop invariant i3: p <= bufsize_0;\nloop invariant i4: bufsize >= 2 * i;\nloop invariant i5: bufsize <= bufsize_0;\nloop invariant i6: p >= leader_len + 2 * (ielen - i);\nloop invariant i7: 0 <= p <= bufsize_0;\nloop invariant i8: p + 1 <= bufsize_0;\nloop invariant i9: 0 <= bufsize <= bufsize_0;\nloop invariant i10: 0 <= bufsize_0;\nloop invariant i11: 0 <= i;\nloop invariant i12: 0 <= ielen;\nloop invariant i13: 0 <= p;\nloop invariant i14: 0 <= bufsize;\nloop invariant i15: bufsize < bufsize_0;\nloop invariant i16: leader_len <= bufsize_0;\nloop invariant i17: ielen <= bufsize_0;\nloop invariant i18: bufsize_0 <= bufsize - 2*i;\nloop invariant i19: p <= bufsize_0 - 2*i;\nloop invariant i20: p >= 0;\nloop invariant i21: i >= 0;\nloop invariant i22: i <= ielen;\nloop invariant i23: bufsize_0 <= LARGE_INT;\nloop invariant i24: bufsize <= bufsize_0 - leader_len;\nloop invariant i25: i <= bufsize / 2;\nloop invariant i26: p == bufsize_0 - bufsize + leader_len + 2 * i;\nloop invariant i27: bufsize_0 - leader_len <= bufsize <= bufsize_0;\nloop invariant i28: bufsize >= 0;\nloop invariant i29: leader_len >= 0;\nloop invariant i30: bufsize_0 >= 0;\nloop invariant i31: ielen >= 0;\nloop invariant i32: (leader_len < LARGE_INT);\nloop invariant i33: (bufsize < LARGE_INT);\nloop invariant i34: (ielen < LARGE_INT);\nloop invariant i35: (p <= bufsize_0);\nloop invariant i36: (p >= 0);\nloop invariant i37: (bufsize_0 - leader_len <= bufsize);\nloop invariant i38: (bufsize <= bufsize_0);\nloop invariant i39: (i >= 0);\nloop invariant i40: (i <= ielen);\nloop invariant i41: (bufsize >= 0);\nloop invariant i42: (leader_len >= 0);\nloop invariant i43: (bufsize_0 >= 0);\nloop invariant i44: (ielen >= 0);\nloop invariant i45: (ielen >= i);\nloop invariant i46: (p <= leader_len);\nloop invariant i47: 0 <= i < ielen;\nloop invariant i48: p + 2*i <= bufsize_0;\nloop invariant i49: p + 2*i <= bufsize;\nloop invariant i50: bufsize - 2*i >= 0;\nloop invariant i51: bufsize >= leader_len;\nloop invariant i52: bufsize_0 >= leader_len;\nloop invariant i53: bufsize >= 2*i;\nloop invariant i54: bufsize_0 >= 2*i;\nloop invariant i55: p >= leader_len;\nloop invariant i56: bufsize_0 >= 2*i + leader_len;\nloop invariant i57: bufsize >= 2*i + leader_len;\nloop invariant i58: p <= bufsize_0 - 2*i + leader_len;\nloop invariant i59: bufsize - 2*i <= bufsize_0 - leader_len;\nloop invariant i60: bufsize_0 - 2*i <= bufsize_0 - leader_len;\nloop invariant i61: bufsize_0 - 2*i <= bufsize - leader_len;\nloop invariant i62: bufsize - 2*i <= bufsize - leader_len;\nloop invariant i63: bufsize >= 2*ielen;\nloop invariant i64: leader_len <= p <= bufsize_0;\nloop invariant i65: ielen <= i <= ielen;\nloop invariant i66: bufsize_0 <= bufsize;\nloop invariant i67: leader_len >= ielen;\nloop invariant i68: leader_len <= bufsize_0 - leader_len;\nloop invariant i69: leader_len <= bufsize_0 - 2*ielen;\nloop invariant i70: leader_len <= bufsize_0 - 2;\nloop invariant i71: leader_len <= bufsize_0 - 1;\nloop invariant i72: 0 <= bufsize <= LARGE_INT;\nloop invariant i73: 0 <= bufsize_0 <= LARGE_INT;\nloop invariant i74: 0 <= leader_len <= LARGE_INT;\nloop invariant i75: 0 <= ielen <= LARGE_INT;\nloop invariant i76: 0 <= bufsize < bufsize_0;\nloop invariant i77: bufsize >= 2 * ielen;\nloop invariant i78: p <= bufsize + leader_len;\nloop invariant i79: p <= bufsize;\nloop invariant i80: bufsize >= bufsize - leader_len;\nloop invariant i81: p >= p + 2;\nloop invariant i82: bufsize >= bufsize - 2;\nloop invariant i83: p >= p + 1;\nloop invariant i84: bufsize >= bufsize - 1;\nloop invariant i85: bufsize >= bufsize - 2*i;\nloop invariant i86: p >= p + 2*i;\nloop invariant i87: bufsize >= bufsize - 2*ielen;\nloop invariant i88: p >= p + 2*ielen;\nloop invariant i89: 0 <= p && p <= bufsize_0;\nloop invariant i90: leader_len <= p && p <= bufsize_0;\nloop invariant i91: 0 <= i && i <= ielen;\nloop invariant i92: 0 <= bufsize && bufsize <= bufsize_0 - leader_len;\nloop invariant i93: 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i;\nloop invariant i94: 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i && 2 <= bufsize;\nloop invariant i95: bufsize >= 2;\nloop invariant i96: p + 1 < bufsize_0 ==> p < bufsize_0;\nloop invariant i97: bufsize >= 2*i ==> i <= ielen;\nloop invariant i98: bufsize >= 2*i ==> bufsize >= 2*i + leader_len;\nloop invariant i99: bufsize >= 2*i ==> bufsize - leader_len >= 2*i;\nloop invariant i100: bufsize >= 2*i ==> bufsize >= 2*i + 2;\nloop invariant i101: bufsize >= 2*i ==> bufsize - 2 >= 2*i;\nloop invariant i102: bufsize >= 2*i ==> bufsize/2 >= i;\nloop invariant i103: bufsize >= 2*i ==> bufsize >= i + i;\nloop invariant i104: bufsize >= 2*i ==> bufsize >= i + 2*i;\nloop invariant i105: bufsize >= 2*i ==> bufsize >= 2*i + 2*i;\nloop invariant i106: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i;\nloop invariant i107: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i;\nloop invariant i108: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i109: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i110: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i111: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i112: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i113: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i114: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i115: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i116: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i117: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i118: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i119: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i120: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i121: leader_len <= p <= bufsize;\nloop invariant i122: bufsize_0 - leader_len - 2 * i <= bufsize;\nloop invariant i123: i1;\nloop invariant i124: i2;\nloop invariant i125: i3;\nloop invariant i126: i4;\nloop invariant i127: i5;\nloop invariant i128: i6;\nloop invariant i129: i7;\nloop invariant i130: i8;\nloop invariant i131: i9;\nloop invariant i132: i10;\nloop invariant i133: i11;\nloop invariant i134: i12;\nloop invariant i135: i13;\nloop invariant i136: i14;\nloop invariant i137: i15;\nloop invariant i138: i16;\nloop invariant i139: i17;\nloop invariant i140: i18;\nloop invariant i141: i19;\nloop invariant i142: i20;\nloop invariant i143: i21;\nloop invariant i144: i22;\nloop invariant i145: i23;\nloop invariant i146: i24;\nloop invariant i147: i25;\nloop invariant i148: i26;\nloop invariant i149: i27;\nloop invariant i150: i28;\nloop invariant i151: i29;\nloop invariant i152: i30;\nloop invariant i153: i31;\nloop invariant i154: i32;\nloop invariant i155: i33;\nloop invariant i156: i34;\nloop invariant i157: i35;\nloop invariant i158: i36;\nloop invariant i159: i37;\nloop invariant i160: i38;\nloop invariant i161: i39;\nloop invariant i162: i40;\nloop invariant i163: i41;\nloop invariant i164: i42;\nloop invariant i165: i43;\nloop invariant i166: i44;\nloop invariant i167: i45;\nloop invariant i168: i46;\nloop invariant i169: i47;\nloop invariant i170: i48;\nloop invariant i171: i49;\nloop invariant i172: i50;\nloop invariant i173: i51;\nloop invariant i174: i52;\nloop invariant i175: i53;\nloop invariant i176: i54;\nloop invariant i177: i55;\nloop invariant i178: i56;\nloop invariant i179: i57;\nloop invariant i180: i58;\nloop invariant i181: i59;\nloop invariant i182: i60;\nloop invariant i183: i61;\nloop invariant i184: i62;\nloop invariant i185: i63;\nloop invariant i186: i64;\nloop invariant i187: i65;\nloop invariant i188: i66;\nloop invariant i189: i67;\nloop invariant i190: i68;\nloop invariant i191: i69;\nloop invariant i192: i70;\nloop invariant i193: i71;\nloop invariant i194: i72;\nloop invariant i195: i73;\nloop invariant i196: i74;\nloop invariant i197: i75;\nloop invariant i198: i76;\nloop invariant i199: i77;\nloop invariant i200: i78;\nloop invariant i201: i79;\nloop invariant i202: i80;\nloop invariant i203: i81;\nloop invariant i204: i82;\nloop invariant i205: i83;\nloop invariant i206: i84;\nloop invariant i207: i85;\nloop invariant i208: i86;\nloop invariant i209: i87;\nloop invariant i210: i88;\nloop invariant i211: i89;\nloop invariant i212: i90;\nloop invariant i213: i91;\nloop invariant i214: i92;\nloop invariant i215: i93;\nloop invariant i216: i94;\nloop invariant i217: i95;\nloop invariant i218: i96;\nloop invariant i219: i97;\nloop invariant i220: i98;\nloop invariant i221: i99;\nloop invariant i222: i100;\nloop invariant i223: i101;\nloop invariant i224: i102;\nloop invariant i225: i103;\nloop invariant i226: i104;\nloop invariant i227: i105;\nloop invariant i228: i106;\nloop invariant i229: i107;\nloop invariant i230: i108;\nloop invariant i231: i109;\nloop invariant i232: i110;\nloop invariant i233: i111;\nloop invariant i234: i112;\nloop invariant i235: i113;\nloop invariant i236: i114;\nloop invariant i237: i115;\nloop invariant i238: i116;\nloop invariant i239: i117;\nloop invariant i240: i118;\nloop invariant i241: i119;\nloop invariant i242: i120;\nloop invariant i243: i121;\nloop invariant i244: i122;\nloop invariant i245: i123;\nloop invariant i246: i124;\nloop invariant i247: i125;\nloop invariant i248: i126;\nloop invariant i249: i127;\nloop invariant i250: i128;\nloop invariant i251: i129;\nloop invariant i252: i130;\nloop invariant i253: i131;\nloop invariant i254: i132;\nloop invariant i255: i133;\nloop invariant i256: i134;\nloop invariant i257: i135;\nloop invariant i258: i136;\nloop invariant i259: i137;\nloop invariant i260: i138;\nloop invariant i261: i139;\nloop invariant i262: i140;\nloop invariant i263: i141;\nloop invariant i264: i142;\nloop invariant i265: i143;\nloop invariant i266: i144;\nloop invariant i267: i145;\nloop invariant i268: i146;\nloop invariant i269: i147;\nloop invariant i270: i148;\nloop invariant i271: i149;\nloop invariant i272: i150;\nloop invariant i273: i151;\nloop invariant i274: i152;\nloop invariant i275: i153;\nloop invariant i276: i154;\nloop invariant i277: i155;\nloop invariant i278: i156;\nloop invariant i279: i157;\nloop invariant i280: i158;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
        "combined_annotation_num_solver_calls": 177,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\nloop invariant i3: p <= bufsize_0;\nloop invariant i4: bufsize >= 2 * i;\nloop invariant i5: bufsize <= bufsize_0;\n\nloop invariant i7: 0 <= p <= bufsize_0;\n\nloop invariant i9: 0 <= bufsize <= bufsize_0;\nloop invariant i10: 0 <= bufsize_0;\nloop invariant i11: 0 <= i;\nloop invariant i12: 0 <= ielen;\nloop invariant i13: 0 <= p;\nloop invariant i14: 0 <= bufsize;\nloop invariant i15: bufsize < bufsize_0;\nloop invariant i16: leader_len <= bufsize_0;\nloop invariant i17: ielen <= bufsize_0;\n\n\nloop invariant i20: p >= 0;\nloop invariant i21: i >= 0;\nloop invariant i22: i <= ielen;\nloop invariant i23: bufsize_0 <= LARGE_INT;\nloop invariant i24: bufsize <= bufsize_0 - leader_len;\nloop invariant i25: i <= bufsize / 2;\n\nloop invariant i27: bufsize_0 - leader_len <= bufsize <= bufsize_0;\nloop invariant i28: bufsize >= 0;\nloop invariant i29: leader_len >= 0;\nloop invariant i30: bufsize_0 >= 0;\nloop invariant i31: ielen >= 0;\nloop invariant i32: (leader_len < LARGE_INT);\nloop invariant i33: (bufsize < LARGE_INT);\nloop invariant i34: (ielen < LARGE_INT);\nloop invariant i35: (p <= bufsize_0);\nloop invariant i36: (p >= 0);\nloop invariant i37: (bufsize_0 - leader_len <= bufsize);\nloop invariant i38: (bufsize <= bufsize_0);\nloop invariant i39: (i >= 0);\nloop invariant i40: (i <= ielen);\nloop invariant i41: (bufsize >= 0);\nloop invariant i42: (leader_len >= 0);\nloop invariant i43: (bufsize_0 >= 0);\nloop invariant i44: (ielen >= 0);\nloop invariant i45: (ielen >= i);\n\n\n\n\nloop invariant i50: bufsize - 2*i >= 0;\n\nloop invariant i52: bufsize_0 >= leader_len;\nloop invariant i53: bufsize >= 2*i;\nloop invariant i54: bufsize_0 >= 2*i;\nloop invariant i55: p >= leader_len;\nloop invariant i56: bufsize_0 >= 2*i + leader_len;\n\n\nloop invariant i59: bufsize - 2*i <= bufsize_0 - leader_len;\n\n\n\nloop invariant i63: bufsize >= 2*ielen;\nloop invariant i64: leader_len <= p <= bufsize_0;\n\n\n\n\nloop invariant i69: leader_len <= bufsize_0 - 2*ielen;\nloop invariant i70: leader_len <= bufsize_0 - 2;\nloop invariant i71: leader_len <= bufsize_0 - 1;\nloop invariant i72: 0 <= bufsize <= LARGE_INT;\nloop invariant i73: 0 <= bufsize_0 <= LARGE_INT;\nloop invariant i74: 0 <= leader_len <= LARGE_INT;\nloop invariant i75: 0 <= ielen <= LARGE_INT;\nloop invariant i76: 0 <= bufsize < bufsize_0;\nloop invariant i77: bufsize >= 2 * ielen;\nloop invariant i78: p <= bufsize + leader_len;\n\nloop invariant i80: bufsize >= bufsize - leader_len;\n\nloop invariant i82: bufsize >= bufsize - 2;\n\nloop invariant i84: bufsize >= bufsize - 1;\nloop invariant i85: bufsize >= bufsize - 2*i;\n\nloop invariant i87: bufsize >= bufsize - 2*ielen;\n\nloop invariant i89: 0 <= p && p <= bufsize_0;\nloop invariant i90: leader_len <= p && p <= bufsize_0;\nloop invariant i91: 0 <= i && i <= ielen;\nloop invariant i92: 0 <= bufsize && bufsize <= bufsize_0 - leader_len;\n\n\nloop invariant i95: bufsize >= 2;\nloop invariant i96: p + 1 < bufsize_0 ==> p < bufsize_0;\nloop invariant i97: bufsize >= 2*i ==> i <= ielen;\n\n\n\n\nloop invariant i102: bufsize >= 2*i ==> bufsize/2 >= i;\nloop invariant i103: bufsize >= 2*i ==> bufsize >= i + i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i122: bufsize_0 - leader_len - 2 * i <= bufsize;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c"
        ],
        "skipped": [],
        "total": 13,
        "success_count": 1,
        "failure_count": 12,
        "success_rate": 0.07692307692307693
    }
}