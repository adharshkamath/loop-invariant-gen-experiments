{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2*x;\nloop invariant z >= w;\nloop invariant z <= x;\nloop invariant w >= y;\nloop invariant x >= z;\nloop invariant y >= x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant (x >= z && w > y) ==> (x == -x && y == -y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant y >= 2*x;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant x == -x;\nloop invariant y == -y;\nloop invariant x < z;\nloop invariant w <= y;\nloop invariant w <= 3*x;\nloop invariant w >= y;\nloop invariant w == y;\nloop invariant w <= 0;\nloop invariant w >= 0;\nloop invariant w == 10;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant x != 4 ==> y == 2*x;\nloop invariant x == 4 ==> y == 3*x;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant w <= 2*y;\nloop invariant w >= 2*y;\nloop invariant 3*x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant z >= 0;\nloop invariant z <= 10;\nloop invariant w >= 0;\nloop invariant w <= 10;\nloop invariant x >= z;\nloop invariant w > y;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant 3*x >= y ==> (x >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 24;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant 3*x >= y;\nloop invariant 3*x >= y ==> x >= z && w > y || x < 4;\nloop invariant x >= z && w > y ==> x = -x && y = -y;\nloop invariant x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x >= 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x >= (3 * y);\nloop invariant x >= (3 * z);\nloop invariant w >= y;\nloop invariant x >= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4;\nloop invariant y <= 10;\nloop invariant z <= 10;\nloop invariant w <= 10;\nloop invariant x >= (3 * y) ==> x >= 0;\nloop invariant x >= (3 * z) ==> x >= 0;\nloop invariant w >= y ==> w >= 0;\nloop invariant x >= z ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 3;\nloop invariant -1000 <= y <= 1000;\nloop invariant -1000 <= z <= 1000;\nloop invariant -1000 <= w <= 1000;\n*/\n```",
            "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant w >= z;\nloop invariant w >= y;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x >= 0;\nloop invariant x >= z - 10;\nloop invariant x >= w - 10;\nloop invariant x >= 0 ==> x < 100000;\nloop invariant y >= 0 ==> y < 100000;\nloop invariant z >= 0 ==> z < 100000;\nloop invariant w >= 0 ==> w < 100000;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 2; loop invariant 0 <= y <= z; loop invariant 0 <= z; loop invariant 0 <= w; loop invariant 0 <= w <= z; loop invariant x + y + z + w >= 0; loop invariant x + y + z + w <= 100000; loop invariant x + y + z + w >= 3*x; loop invariant x + y + z + w >= 3*x + y; loop invariant x + y + z + w >= 3*x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant z >= 0;\nloop invariant z <= 4;\nloop invariant w >= 0;\nloop invariant w <= 10;\nloop invariant 3*x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\nloop invariant x <= 4;\nloop invariant y <= x;\nloop invariant w <= z;\nloop invariant y <= w;\nloop invariant 3*x <= y || w <= 3*x;\nloop invariant 3*x <= y || x <= 0;\nloop invariant x <= 0 || y <= x;\nloop invariant x <= 0 || 3*x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant w >= y;\nloop invariant 3*x >= y;\nloop invariant (unknown_int() ==> x >= 0);\nloop invariant (unknown_int() ==> y >= 0);\nloop invariant (unknown_int() ==> z >= 0);\nloop invariant (unknown_int() ==> w >= 0);\nloop invariant (unknown_int() ==> x <= 100000);\nloop invariant (unknown_int() ==> y <= 100000);\nloop invariant (unknown_int() ==> z <= 100000);\nloop invariant (unknown_int() ==> w <= 100000);\nloop invariant (unknown_int() ==> x >= y);\nloop invariant (unknown_int() ==> x >= z);\nloop invariant (unknown_int() ==> w >= y);\nloop invariant (unknown_int() ==> 3*x >= y);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 5;\nloop invariant 0 <= y <= 2*x;\nloop invariant 0 <= z <= x;\nloop invariant 0 <= w <= 10*x;\nloop invariant x >= z;\nloop invariant y >= -z;\nloop invariant y >= -x;\nloop invariant w >= x;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2*x;\nloop invariant z >= w;\nloop invariant z <= x;\nloop invariant w >= y;\nloop invariant x >= z;\nloop invariant y >= x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant (x >= z && w > y) ==> (x == -x && y == -y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is established but not preserved.\nloop invariant 0 <= y <= 2*x is partially proven to be inductive.\nloop invariant z >= w is partially proven to be inductive.\nloop invariant z <= x is partially proven to be inductive.\nloop invariant w >= y is established but not preserved.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant y >= x is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant (x >= z && w > y) ==> (x == -x && y == -y) is partially proven to be inductive.\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y) is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\nloop invariant i3: z >= w;\n\n\n\nloop invariant i7: y >= x;\n\nloop invariant i9: y >= 0;\nloop invariant i10: x >= 0;\nloop invariant i11: z >= 0;\nloop invariant i12: w >= 0;\nloop invariant i13: (x >= z && w > y) ==> (x == -x && y == -y);\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant y >= 2*x;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant x == -x;\nloop invariant y == -y;\nloop invariant x < z;\nloop invariant w <= y;\nloop invariant w <= 3*x;\nloop invariant w >= y;\nloop invariant w == y;\nloop invariant w <= 0;\nloop invariant w >= 0;\nloop invariant w == 10;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 4 is preserved but not established.\nloop invariant y >= 2*x is partially proven to be inductive.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant w == 0 is partially proven to be inductive.\nloop invariant x == -x is partially proven to be inductive.\nloop invariant y == -y is partially proven to be inductive.\nloop invariant x < z is partially proven to be inductive.\nloop invariant w <= y is partially proven to be inductive.\nloop invariant w <= 3*x is partially proven to be inductive.\nloop invariant w >= y is partially proven to be inductive.\nloop invariant w == y is partially proven to be inductive.\nloop invariant w <= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant w == 10 is partially proven to be inductive.\nloop invariant w == 100000 is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: w >= 0;\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant 0 <= z <= 100000 is partially proven to be inductive.\nloop invariant 0 <= w <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= (1 + (w - 1) * w / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant x != 4 ==> y == 2*x;\nloop invariant x == 4 ==> y == 3*x;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant w <= 2*y;\nloop invariant w >= 2*y;\nloop invariant 3*x >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is established but not preserved.\nloop invariant x != 4 ==> y == 2*x is partially proven to be inductive.\nloop invariant x == 4 ==> y == 3*x is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant w <= 2*y is partially proven to be inductive.\nloop invariant w >= 2*y is established but not preserved.\nloop invariant 3*x >= y is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\nloop invariant i5: z >= 0;\nloop invariant i6: w >= 0;\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant z >= 0;\nloop invariant z <= 10;\nloop invariant w >= 0;\nloop invariant w <= 10;\nloop invariant x >= z;\nloop invariant w > y;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant 3*x >= y ==> (x >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant 0 <= y <= 10 is partially proven to be inductive.\nloop invariant 0 <= z <= 10 is partially proven to be inductive.\nloop invariant 0 <= w <= 10 is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 10 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 10 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant w <= 10 is partially proven to be inductive.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant w > y is preserved but not established.\nloop invariant x >= -x is partially proven to be inductive.\nloop invariant y >= -y is partially proven to be inductive.\nloop invariant 3*x >= y ==> (x >= 0) is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\nloop invariant i9: z >= 0;\n\nloop invariant i11: w >= 0;\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 14,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 24;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant 3*x >= y;\nloop invariant 3*x >= y ==> x >= z && w > y || x < 4;\nloop invariant x >= z && w > y ==> x = -x && y = -y;\nloop invariant x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x >= 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\nloop invariant i8: x < 4 ==> x >= z && w > y || x < 4;\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x >= (3 * y);\nloop invariant x >= (3 * z);\nloop invariant w >= y;\nloop invariant x >= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4;\nloop invariant y <= 10;\nloop invariant z <= 10;\nloop invariant w <= 10;\nloop invariant x >= (3 * y) ==> x >= 0;\nloop invariant x >= (3 * z) ==> x >= 0;\nloop invariant w >= y ==> w >= 0;\nloop invariant x >= z ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 4 is preserved but not established.\nloop invariant 0 <= y <= 10 is partially proven to be inductive.\nloop invariant 0 <= z <= 10 is partially proven to be inductive.\nloop invariant 0 <= w <= 10 is partially proven to be inductive.\nloop invariant x >= (3 * y) is partially proven to be inductive.\nloop invariant x >= (3 * z) is partially proven to be inductive.\nloop invariant w >= y is partially proven to be inductive.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y <= 10 is partially proven to be inductive.\nloop invariant z <= 10 is partially proven to be inductive.\nloop invariant w <= 10 is partially proven to be inductive.\nloop invariant x >= (3 * y) ==> x >= 0 is partially proven to be inductive.\nloop invariant x >= (3 * z) ==> x >= 0 is partially proven to be inductive.\nloop invariant w >= y ==> w >= 0 is partially proven to be inductive.\nloop invariant x >= z ==> x >= 0 is partially proven to be inductive.\nloop invariant x >= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 ==> z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 ==> w >= 0 is partially proven to be inductive.\nloop invariant x <= 4 ==> x <= 4 is partially proven to be inductive.\nloop invariant y <= 10 ==> y <= 10 is partially proven to be inductive.\nloop invariant z <= 10 ==> z <= 10 is partially proven to be inductive.\nloop invariant w <= 10 ==> w <= 10 is partially proven to be inductive.\nloop invariant x >= (3 * y) ==> x >= (3 * y) is partially proven to be inductive.\nloop invariant x >= (3 * z) ==> x >= (3 * z) is partially proven to be inductive.\nloop invariant w >= y ==> w >= y is partially proven to be inductive.\nloop invariant x >= z ==> x >= z is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: z >= 0;\nloop invariant i12: w >= 0;\n\n\n\n\n\nloop invariant i18: x >= (3 * z) ==> x >= 0;\nloop invariant i19: w >= y ==> w >= 0;\nloop invariant i20: x >= z ==> x >= 0;\nloop invariant i21: x >= 0 ==> x >= 0;\nloop invariant i22: y >= 0 ==> y >= 0;\nloop invariant i23: z >= 0 ==> z >= 0;\nloop invariant i24: w >= 0 ==> w >= 0;\nloop invariant i25: x <= 4 ==> x <= 4;\nloop invariant i26: y <= 10 ==> y <= 10;\nloop invariant i27: z <= 10 ==> z <= 10;\nloop invariant i28: w <= 10 ==> w <= 10;\nloop invariant i29: x >= (3 * y) ==> x >= (3 * y);\nloop invariant i30: x >= (3 * z) ==> x >= (3 * z);\nloop invariant i31: w >= y ==> w >= y;\nloop invariant i32: x >= z ==> x >= z;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 3;\nloop invariant -1000 <= y <= 1000;\nloop invariant -1000 <= z <= 1000;\nloop invariant -1000 <= w <= 1000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 3 is established but not preserved.\nloop invariant -1000 <= y <= 1000 is established but not preserved.\nloop invariant -1000 <= z <= 1000 is partially proven to be inductive.\nloop invariant -1000 <= w <= 1000 is partially proven to be inductive.\nAssertion 3 * x >= y: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant w >= z;\nloop invariant w >= y;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x >= 0;\nloop invariant x >= z - 10;\nloop invariant x >= w - 10;\nloop invariant x >= 0 ==> x < 100000;\nloop invariant y >= 0 ==> y < 100000;\nloop invariant z >= 0 ==> z < 100000;\nloop invariant w >= 0 ==> w < 100000;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y >= 0 is established but not preserved.\nloop invariant y <= 100000 is established but not preserved.\nloop invariant x >= y is established but not preserved.\nloop invariant w >= z is partially proven to be inductive.\nloop invariant w >= y is established but not preserved.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x >= z - 10 is established but not preserved.\nloop invariant x >= w - 10 is established but not preserved.\nloop invariant x >= 0 ==> x < 100000 is established but not preserved.\nloop invariant y >= 0 ==> y < 100000 is partially proven to be inductive.\nloop invariant z >= 0 ==> z < 100000 is established but not preserved.\nloop invariant w >= 0 ==> w < 100000 is established but not preserved.\nloop invariant x >= 0 ==> x <= 100000 is partially proven to be inductive.\nloop invariant y >= 0 ==> y <= 100000 is partially proven to be inductive.\nloop invariant z >= 0 ==> z <= 100000 is partially proven to be inductive.\nloop invariant w >= 0 ==> w <= 100000 is partially proven to be inductive.\nloop invariant x >= 0 ==> x >= z - 10 is partially proven to be inductive.\nloop invariant x >= 0 ==> x >= w - 10 is partially proven to be inductive.\nloop invariant y >= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 ==> z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 ==> w >= 0 is partially proven to be inductive.\nloop invariant x >= 0 ==> x >= 0 is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\nloop invariant i4: w >= z;\n\nloop invariant i6: z >= 0;\nloop invariant i7: w >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: y >= 0 ==> y >= 0;\nloop invariant i22: z >= 0 ==> z >= 0;\nloop invariant i23: w >= 0 ==> w >= 0;\nloop invariant i24: x >= 0 ==> x >= 0;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is established but not preserved.\nloop invariant 0 <= z <= 10 is partially proven to be inductive.\nloop invariant 0 <= w <= 10 is partially proven to be inductive.\nloop invariant y >= 0 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y <= 100000 is established but not preserved.\nAssertion 3 * x >= y: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 2; loop invariant 0 <= y <= z; loop invariant 0 <= z; loop invariant 0 <= w; loop invariant 0 <= w <= z; loop invariant x + y + z + w >= 0; loop invariant x + y + z + w <= 100000; loop invariant x + y + z + w >= 3*x; loop invariant x + y + z + w >= 3*x + y; loop invariant x + y + z + w >= 3*x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 2; loop invariant 0 <= y <= z; loop invariant 0 <= z; loop invariant 0 <= w; loop invariant 0 <= w <= z; loop invariant x + y + z + w >= 0; loop invariant x + y + z + w <= 100000; loop invariant x + y + z + w >= 3*x; loop invariant x + y + z + w >= 3*x + y; loop invariant x + y + z + w >= 3*x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w is preserved but not established.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant z >= 0;\nloop invariant z <= 4;\nloop invariant w >= 0;\nloop invariant w <= 10;\nloop invariant 3*x >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is established but not preserved.\nloop invariant x <= 4 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 10 is established but not preserved.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 4 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant w <= 10 is partially proven to be inductive.\nloop invariant 3*x >= y is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\nloop invariant i5: z >= 0;\n\nloop invariant i7: w >= 0;\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\nloop invariant x <= 4;\nloop invariant y <= x;\nloop invariant w <= z;\nloop invariant y <= w;\nloop invariant 3*x <= y || w <= 3*x;\nloop invariant 3*x <= y || x <= 0;\nloop invariant x <= 0 || y <= x;\nloop invariant x <= 0 || 3*x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= z is partially proven to be inductive.\nloop invariant 0 <= w is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y <= x is established but not preserved.\nloop invariant w <= z is partially proven to be inductive.\nloop invariant y <= w is partially proven to be inductive.\nloop invariant 3*x <= y || w <= 3*x is partially proven to be inductive.\nloop invariant 3*x <= y || x <= 0 is partially proven to be inductive.\nloop invariant x <= 0 || y <= x is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= w;\n\n\nloop invariant i7: w <= z;\n\n\n\n\n\n\n\nloop invariant i15: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z;\nloop invariant i16: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y;\nloop invariant i17: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x;\nloop invariant i18: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w;\nloop invariant i19: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z;\nloop invariant i20: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y;\nloop invariant i21: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w;\nloop invariant i22: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i23: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i24: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i25: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i26: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i27: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i28: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i29: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant w >= y;\nloop invariant 3*x >= y;\nloop invariant (unknown_int() ==> x >= 0);\nloop invariant (unknown_int() ==> y >= 0);\nloop invariant (unknown_int() ==> z >= 0);\nloop invariant (unknown_int() ==> w >= 0);\nloop invariant (unknown_int() ==> x <= 100000);\nloop invariant (unknown_int() ==> y <= 100000);\nloop invariant (unknown_int() ==> z <= 100000);\nloop invariant (unknown_int() ==> w <= 100000);\nloop invariant (unknown_int() ==> x >= y);\nloop invariant (unknown_int() ==> x >= z);\nloop invariant (unknown_int() ==> w >= y);\nloop invariant (unknown_int() ==> 3*x >= y);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 33: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\nloop invariant i7: z >= 0;\nloop invariant i8: w >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 5;\nloop invariant 0 <= y <= 2*x;\nloop invariant 0 <= z <= x;\nloop invariant 0 <= w <= 10*x;\nloop invariant x >= z;\nloop invariant y >= -z;\nloop invariant y >= -x;\nloop invariant w >= x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 5 is preserved but not established.\nloop invariant 0 <= y <= 2*x is partially proven to be inductive.\nloop invariant 0 <= z <= x is partially proven to be inductive.\nloop invariant 0 <= w <= 10*x is partially proven to be inductive.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant y >= -z is partially proven to be inductive.\nloop invariant y >= -x is partially proven to be inductive.\nloop invariant w >= x is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 69: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\nloop invariant i1: 0 <= x <= 4;\nloop invariant i2: 0 <= y <= 2*x;\nloop invariant i3: z >= w;\nloop invariant i4: z <= x;\nloop invariant i5: w >= y;\nloop invariant i6: x >= z;\nloop invariant i7: y >= x;\nloop invariant i8: x >= y;\nloop invariant i9: y >= 0;\nloop invariant i10: x >= 0;\nloop invariant i11: z >= 0;\nloop invariant i12: w >= 0;\nloop invariant i13: (x >= z && w > y) ==> (x == -x && y == -y);\nloop invariant i14: (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant i15: 1 <= x <= 4;\nloop invariant i16: y >= 2*x;\nloop invariant i17: z == 0;\nloop invariant i18: w == 0;\nloop invariant i19: x == -x;\nloop invariant i20: y == -y;\nloop invariant i21: x < z;\nloop invariant i22: w <= y;\nloop invariant i23: w <= 3*x;\nloop invariant i24: w == y;\nloop invariant i25: w <= 0;\nloop invariant i26: w == 10;\nloop invariant i27: w == 100000;\nloop invariant i28: 0 <= x <= 100000;\nloop invariant i29: 0 <= y <= 100000;\nloop invariant i30: 0 <= z <= 100000;\nloop invariant i31: 0 <= w <= 100000;\nloop invariant i32: x >= (1 + (y - 1) * y / 2);\nloop invariant i33: x >= (1 + (w - 1) * w / 2);\nloop invariant i34: x >= (1 + (z - 1) * z / 2);\nloop invariant i35: x != 4 ==> y == 2*x;\nloop invariant i36: x == 4 ==> y == 3*x;\nloop invariant i37: w <= 2*y;\nloop invariant i38: w >= 2*y;\nloop invariant i39: 3*x >= y;\nloop invariant i40: 0 <= y <= 10;\nloop invariant i41: 0 <= z <= 10;\nloop invariant i42: 0 <= w <= 10;\nloop invariant i43: x <= 4;\nloop invariant i44: y <= 10;\nloop invariant i45: z <= 10;\nloop invariant i46: w <= 10;\nloop invariant i47: w > y;\nloop invariant i48: x >= -x;\nloop invariant i49: y >= -y;\nloop invariant i50: 3*x >= y ==> (x >= 0);\nloop invariant i51: 0 <= y <= 24;\nloop invariant i52: 3*x >= y ==> x >= z && w > y || x < 4;\nloop invariant i53: x >= z && w > y ==> x = -x && y = -y;\nloop invariant i54: x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i55: x >= 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10;\nloop invariant i56: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4;\nloop invariant i57: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i58: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i59: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i60: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i61: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i62: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i63: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i64: x >= (3 * y);\nloop invariant i65: x >= (3 * z);\nloop invariant i66: x >= (3 * y) ==> x >= 0;\nloop invariant i67: x >= (3 * z) ==> x >= 0;\nloop invariant i68: w >= y ==> w >= 0;\nloop invariant i69: x >= z ==> x >= 0;\nloop invariant i70: x >= 0 ==> x >= 0;\nloop invariant i71: y >= 0 ==> y >= 0;\nloop invariant i72: z >= 0 ==> z >= 0;\nloop invariant i73: w >= 0 ==> w >= 0;\nloop invariant i74: x <= 4 ==> x <= 4;\nloop invariant i75: y <= 10 ==> y <= 10;\nloop invariant i76: z <= 10 ==> z <= 10;\nloop invariant i77: w <= 10 ==> w <= 10;\nloop invariant i78: x >= (3 * y) ==> x >= (3 * y);\nloop invariant i79: x >= (3 * z) ==> x >= (3 * z);\nloop invariant i80: w >= y ==> w >= y;\nloop invariant i81: x >= z ==> x >= z;\nloop invariant i82: 0 <= x <= 3;\nloop invariant i83: -1000 <= y <= 1000;\nloop invariant i84: -1000 <= z <= 1000;\nloop invariant i85: -1000 <= w <= 1000;\nloop invariant i86: y <= 100000;\nloop invariant i87: w >= z;\nloop invariant i88: x >= z - 10;\nloop invariant i89: x >= w - 10;\nloop invariant i90: x >= 0 ==> x < 100000;\nloop invariant i91: y >= 0 ==> y < 100000;\nloop invariant i92: z >= 0 ==> z < 100000;\nloop invariant i93: w >= 0 ==> w < 100000;\nloop invariant i94: x >= 0 ==> x <= 100000;\nloop invariant i95: y >= 0 ==> y <= 100000;\nloop invariant i96: z >= 0 ==> z <= 100000;\nloop invariant i97: w >= 0 ==> w <= 100000;\nloop invariant i98: x >= 0 ==> x >= z - 10;\nloop invariant i99: x >= 0 ==> x >= w - 10;\nloop invariant i100: 1 <= x <= 2; loop invariant 0 <= y <= z; loop invariant 0 <= z; loop invariant 0 <= w; loop invariant 0 <= w <= z; loop invariant x + y + z + w >= 0; loop invariant x + y + z + w <= 100000; loop invariant x + y + z + w >= 3*x; loop invariant x + y + z + w >= 3*x + y; loop invariant x + y + z + w >= 3*x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w;\nloop invariant i101: 0 <= x;\nloop invariant i102: z <= 4;\nloop invariant i103: 0 <= y;\nloop invariant i104: 0 <= z;\nloop invariant i105: 0 <= w;\nloop invariant i106: y <= x;\nloop invariant i107: w <= z;\nloop invariant i108: y <= w;\nloop invariant i109: 3*x <= y || w <= 3*x;\nloop invariant i110: 3*x <= y || x <= 0;\nloop invariant i111: x <= 0 || y <= x;\nloop invariant i112: x <= 0 || 3*x <= y;\nloop invariant i113: x <= 0 || 3*x <= y || w <= 3*x;\nloop invariant i114: x <= 0 || 3*x <= y || w <= 3*x || x <= y;\nloop invariant i115: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z;\nloop invariant i116: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y;\nloop invariant i117: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x;\nloop invariant i118: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w;\nloop invariant i119: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z;\nloop invariant i120: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y;\nloop invariant i121: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w;\nloop invariant i122: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i123: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i124: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i125: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i126: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i127: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i128: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i129: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i130: x <= 100000;\nloop invariant i131: z <= 100000;\nloop invariant i132: w <= 100000;\nloop invariant i133: (unknown_int() ==> x >= 0);\nloop invariant i134: (unknown_int() ==> y >= 0);\nloop invariant i135: (unknown_int() ==> z >= 0);\nloop invariant i136: (unknown_int() ==> w >= 0);\nloop invariant i137: (unknown_int() ==> x <= 100000);\nloop invariant i138: (unknown_int() ==> y <= 100000);\nloop invariant i139: (unknown_int() ==> z <= 100000);\nloop invariant i140: (unknown_int() ==> w <= 100000);\nloop invariant i141: (unknown_int() ==> x >= y);\nloop invariant i142: (unknown_int() ==> x >= z);\nloop invariant i143: (unknown_int() ==> w >= y);\nloop invariant i144: (unknown_int() ==> 3*x >= y);\nloop invariant i145: 1 <= x <= 5;\nloop invariant i146: 0 <= z <= x;\nloop invariant i147: 0 <= w <= 10*x;\nloop invariant i148: y >= -z;\nloop invariant i149: y >= -x;\nloop invariant i150: w >= x;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
        "combined_annotation_num_solver_calls": 69,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\nloop invariant i3: z >= w;\n\n\n\nloop invariant i7: y >= x;\n\nloop invariant i9: y >= 0;\nloop invariant i10: x >= 0;\nloop invariant i11: z >= 0;\nloop invariant i12: w >= 0;\nloop invariant i13: (x >= z && w > y) ==> (x == -x && y == -y);\n\n\nloop invariant i16: y >= 2*x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i39: 3*x >= y;\n\n\n\n\n\n\n\n\nloop invariant i48: x >= -x;\nloop invariant i49: y >= -y;\nloop invariant i50: 3*x >= y ==> (x >= 0);\n\n\n\nloop invariant i54: x < 4 ==> x >= z && w > y || x < 4;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i66: x >= (3 * y) ==> x >= 0;\nloop invariant i67: x >= (3 * z) ==> x >= 0;\nloop invariant i68: w >= y ==> w >= 0;\nloop invariant i69: x >= z ==> x >= 0;\nloop invariant i70: x >= 0 ==> x >= 0;\nloop invariant i71: y >= 0 ==> y >= 0;\nloop invariant i72: z >= 0 ==> z >= 0;\nloop invariant i73: w >= 0 ==> w >= 0;\nloop invariant i74: x <= 4 ==> x <= 4;\nloop invariant i75: y <= 10 ==> y <= 10;\nloop invariant i76: z <= 10 ==> z <= 10;\nloop invariant i77: w <= 10 ==> w <= 10;\nloop invariant i78: x >= (3 * y) ==> x >= (3 * y);\nloop invariant i79: x >= (3 * z) ==> x >= (3 * z);\nloop invariant i80: w >= y ==> w >= y;\nloop invariant i81: x >= z ==> x >= z;\n\n\n\n\n\nloop invariant i87: w >= z;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i101: 0 <= x;\n\nloop invariant i103: 0 <= y;\nloop invariant i104: 0 <= z;\nloop invariant i105: 0 <= w;\n\nloop invariant i107: w <= z;\n\n\n\n\n\n\nloop invariant i114: x <= 0 || 3*x <= y || w <= 3*x || x <= y;\nloop invariant i115: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z;\nloop invariant i116: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y;\nloop invariant i117: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x;\nloop invariant i118: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w;\nloop invariant i119: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z;\nloop invariant i120: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y;\nloop invariant i121: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w;\nloop invariant i122: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i123: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i124: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i125: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i126: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i127: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i128: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i129: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i147: 0 <= w <= 10*x;\nloop invariant i148: y >= -z;\nloop invariant i149: y >= -x;\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c"
        ],
        "skipped": [],
        "total": 4,
        "success_count": 1,
        "failure_count": 3,
        "success_rate": 0.25
    }
}