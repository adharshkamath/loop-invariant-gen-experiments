{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant 2*i <= bufsize;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p >= 2*i;\nloop invariant p <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= p + 1 < bufsize_0;\nloop invariant bufsize > 2;\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant i <= ielen;\nloop invariant bufsize > 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize_0 > 2*i;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 > 2*ielen;\nloop invariant bufsize_0 >= 2*ielen;\nloop invariant 2*i < bufsize_0;\nloop invariant 2*ielen < bufsize_0;\nloop invariant 2*i < bufsize;\nloop invariant 2*ielen < bufsize;\nloop invariant bufsize > 2*i + 2;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize > 2*ielen + 2;\nloop invariant bufsize >= 2*ielen + 2;\nloop invariant bufsize_0 > 2*i + 2;\nloop invariant bufsize_0 >= 2*i + 2;\nloop invariant bufsize_0 > 2*ielen + 2;\nloop invariant bufsize_0 >= 2*ielen + 2;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= leader_len <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*ielen;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize + leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p = 0 + i * 2;\nloop invariant bufsize = bufsize_0 - leader_len - i * 2;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= p <= bufsize_0 - leader_len - i * 2;\nloop invariant p < bufsize;\nloop invariant p >= 0;\nloop invariant bufsize < bufsize_0 - leader_len;\nloop invariant bufsize >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 0;\nloop invariant ielen >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant 0 <= bufsize - 2*i <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant p >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0;\nloop invariant bufsize_0 - bufsize + leader_len <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant i > 0 ==> 2 <= bufsize;\nloop invariant i > 0 ==> p+1 < bufsize_0;\nloop invariant i > 0 ==> 2 <= bufsize - 2*i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len - 2 * ielen;\nloop invariant bufsize < 2 * ielen ==> i == ielen;\nloop invariant bufsize >= 2 * ielen ==> i < ielen;\nloop invariant 0 <= p <= bufsize_0 ==> i < ielen;\nloop invariant p + 1 < bufsize_0 ==> i < ielen;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant i > 0 ==> i < ielen;\nloop invariant i > 0 ==> bufsize >= 2;\nloop invariant i > 0 ==> bufsize <= 2*iilen;\nloop invariant i > 0 ==> p <= bufsize_0 - (2*iilen - i);\nloop invariant i > 0 ==> p >= bufsize_0 - 2*iilen + i;\nloop invariant i > 0 ==> bufsize >= 2*i;\nloop invariant i > 0 ==> bufsize <= 2*i + 2;\nloop invariant i > 0 ==> p > 0;\nloop invariant i > 0 ==> p < bufsize_0;\n*/\n```",
            "```\n/*@\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p >= p@Pre;\nloop invariant p + 1 < bufsize_0;\nloop invariant p + 1 <= bufsize;\nloop invariant p + 1 >= p@Pre + 1;\nloop invariant p + 2 < bufsize_0;\nloop invariant p + 2 <= bufsize;\nloop invariant p + 2 >= p@Pre + 2;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant i >= i@Pre;\nloop invariant i <= ielen@Pre;\nloop invariant p@Pre <= p@LoopVariant;\nloop invariant i@Pre <= i@LoopVariant;\nloop invariant bufsize@Pre <= bufsize@LoopVariant;\nloop invariant bufsize_0@Pre <= bufsize_0@LoopVariant;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= leader_len;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= i <= bufsize_0;\nloop invariant i <= bufsize_0;\nloop invariant 0 <= i <= bufsize_0 - 2;\nloop invariant 2 <= i <= bufsize_0 - 2;\nloop invariant 2 <= i <= bufsize_0 - 2 * i;\nloop invariant i <= bufsize_0 - 2 * i;\nloop invariant 0 <= i * 2 <= bufsize_0 - 2;\nloop invariant 0 <= i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize_0 <= bufsize + i*2;\nloop invariant bufsize >= bufsize_0 - i*2;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize >= leader_len + i*2;\nloop invariant bufsize_0 >= leader_len + i*2;\nloop invariant bufsize >= bufsize_0 - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i = 0 ==> 0 <= p <= bufsize_0;\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p <= bufsize_0);\nloop invariant (i = ielen) ==> (p = bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant 2*i <= bufsize;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p >= 2*i;\nloop invariant p <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i < ielen is established but not preserved.\nloop invariant 2*i <= bufsize is established but not preserved.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= 2*i is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: p >= 2*i;\nloop invariant i5: p <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= p + 1 < bufsize_0;\nloop invariant bufsize > 2;\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant i <= ielen;\nloop invariant bufsize > 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize_0 > 2*i;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 > 2*ielen;\nloop invariant bufsize_0 >= 2*ielen;\nloop invariant 2*i < bufsize_0;\nloop invariant 2*ielen < bufsize_0;\nloop invariant 2*i < bufsize;\nloop invariant 2*ielen < bufsize;\nloop invariant bufsize > 2*i + 2;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize > 2*ielen + 2;\nloop invariant bufsize >= 2*ielen + 2;\nloop invariant bufsize_0 > 2*i + 2;\nloop invariant bufsize_0 >= 2*i + 2;\nloop invariant bufsize_0 > 2*ielen + 2;\nloop invariant bufsize_0 >= 2*ielen + 2;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= p + 1 < bufsize_0 is established but not preserved.\nloop invariant bufsize > 2 is preserved but not established.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < ielen is established but not preserved.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize > 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize_0 > 2*i is partially proven to be inductive.\nloop invariant bufsize_0 >= 2 is partially proven to be inductive.\nloop invariant bufsize_0 > 2*ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*ielen is partially proven to be inductive.\nloop invariant 2*i < bufsize_0 is partially proven to be inductive.\nloop invariant 2*ielen < bufsize_0 is partially proven to be inductive.\nloop invariant 2*i < bufsize is partially proven to be inductive.\nloop invariant 2*ielen < bufsize is preserved but not established.\nloop invariant bufsize > 2*i + 2 is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 is partially proven to be inductive.\nloop invariant bufsize > 2*ielen + 2 is preserved but not established.\nloop invariant bufsize >= 2*ielen + 2 is partially proven to be inductive.\nloop invariant bufsize_0 > 2*i + 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*i + 2 is partially proven to be inductive.\nloop invariant bufsize_0 > 2*ielen + 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*ielen + 2 is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize is neither established nor preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\n\nloop invariant i4: i >= 0;\n\nloop invariant i6: i <= ielen;\n\nloop invariant i8: bufsize >= 2;\nloop invariant i9: bufsize_0 > 2*i;\nloop invariant i10: bufsize_0 >= 2;\nloop invariant i11: bufsize_0 > 2*ielen;\nloop invariant i12: bufsize_0 >= 2*ielen;\nloop invariant i13: 2*i < bufsize_0;\nloop invariant i14: 2*ielen < bufsize_0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i25: p >= 0;\nloop invariant i26: p <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= leader_len <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*ielen;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize + leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len is established but not preserved.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize <= 2*i + 2 is preserved but not established.\nloop invariant p <= bufsize + leader_len + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 is established but not preserved.\nloop invariant p <= bufsize + leader_len + 2*ielen is partially proven to be inductive.\nloop invariant bufsize <= 2*ielen is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= bufsize <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\nloop invariant i4: 0 <= leader_len <= bufsize_0;\n\nloop invariant i6: bufsize >= 2*ielen;\nloop invariant i7: p >= leader_len;\nloop invariant i8: p <= bufsize_0;\n\nloop invariant i10: bufsize >= 2*i;\n\nloop invariant i12: p <= bufsize + leader_len + 2*i;\n\nloop invariant i14: p <= bufsize + leader_len + 2*ielen;\n\nloop invariant i16: i <= ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p = 0 + i * 2;\nloop invariant bufsize = bufsize_0 - leader_len - i * 2;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= p <= bufsize_0 - leader_len - i * 2;\nloop invariant p < bufsize;\nloop invariant p >= 0;\nloop invariant bufsize < bufsize_0 - leader_len;\nloop invariant bufsize >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 0;\nloop invariant ielen >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 35: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\n\nloop invariant i4: 0 <= bufsize <= bufsize_0 - leader_len;\n\n\nloop invariant i7: p >= 0;\n\nloop invariant i9: bufsize >= 0;\nloop invariant i10: i >= 0;\nloop invariant i11: i <= ielen;\nloop invariant i12: bufsize_0 >= leader_len;\nloop invariant i13: bufsize_0 >= 0;\nloop invariant i14: ielen >= 0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant 0 <= bufsize - 2*i <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant p >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize - 2*i <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= bufsize_0 - 2*i is preserved but not established.\nloop invariant bufsize <= bufsize_0 - 2*i is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2*i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\n\nloop invariant i5: bufsize <= bufsize_0;\n\nloop invariant i7: p <= bufsize_0;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p + 2 * i <= bufsize_0 is established but not preserved.\nloop invariant p + 2 * i <= bufsize is neither established nor preserved.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\n\nloop invariant i4: i <= ielen;\nloop invariant i5: 0 <= i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0;\nloop invariant bufsize_0 - bufsize + leader_len <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant i > 0 ==> 2 <= bufsize;\nloop invariant i > 0 ==> p+1 < bufsize_0;\nloop invariant i > 0 ==> 2 <= bufsize - 2*i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 - bufsize + leader_len <= p <= bufsize_0 is preserved but not established.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant i > 0 ==> 2 <= bufsize is partially proven to be inductive.\nloop invariant i > 0 ==> p+1 < bufsize_0 is partially proven to be inductive.\nloop invariant i > 0 ==> 2 <= bufsize - 2*i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0;\n\nloop invariant i4: 0 <= i <= ielen;\nloop invariant i5: i > 0 ==> 2 <= bufsize;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len - 2 * ielen;\nloop invariant bufsize < 2 * ielen ==> i == ielen;\nloop invariant bufsize >= 2 * ielen ==> i < ielen;\nloop invariant 0 <= p <= bufsize_0 ==> i < ielen;\nloop invariant p + 1 < bufsize_0 ==> i < ielen;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize == bufsize_0 - leader_len - 2 * i is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len - 2 * ielen is preserved but not established.\nloop invariant bufsize < 2 * ielen ==> i == ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 * ielen ==> i < ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 ==> i < ielen is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 ==> i < ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\n\n\nloop invariant i5: bufsize < 2 * ielen ==> i == ielen;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 36: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\n\n\nloop invariant i5: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i6: i >= 0;\nloop invariant i7: i <= ielen;\n\nloop invariant i9: p <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant i > 0 ==> i < ielen;\nloop invariant i > 0 ==> bufsize >= 2;\nloop invariant i > 0 ==> bufsize <= 2*iilen;\nloop invariant i > 0 ==> p <= bufsize_0 - (2*iilen - i);\nloop invariant i > 0 ==> p >= bufsize_0 - 2*iilen + i;\nloop invariant i > 0 ==> bufsize >= 2*i;\nloop invariant i > 0 ==> bufsize <= 2*i + 2;\nloop invariant i > 0 ==> p > 0;\nloop invariant i > 0 ==> p < bufsize_0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 39: unbound logic variable iilen. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\n\nloop invariant i5: i > 0 ==> bufsize >= 2;\n\n\n\n\n\nloop invariant i11: i > 0 ==> p > 0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 19,
                "annotations": "```\n/*@\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p >= p@Pre;\nloop invariant p + 1 < bufsize_0;\nloop invariant p + 1 <= bufsize;\nloop invariant p + 1 >= p@Pre + 1;\nloop invariant p + 2 < bufsize_0;\nloop invariant p + 2 <= bufsize;\nloop invariant p + 2 >= p@Pre + 2;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant i >= i@Pre;\nloop invariant i <= ielen@Pre;\nloop invariant p@Pre <= p@LoopVariant;\nloop invariant i@Pre <= i@LoopVariant;\nloop invariant bufsize@Pre <= bufsize@LoopVariant;\nloop invariant bufsize_0@Pre <= bufsize_0@LoopVariant;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= leader_len;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 37: unexpected token 'Pre'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: p >= 0;\nloop invariant i2: p <= bufsize_0;\n\n\n\n\n\n\n\n\nloop invariant i11: i >= 0;\nloop invariant i12: i <= ielen;\n\n\n\n\n\n\nloop invariant i19: 0 <= ielen;\nloop invariant i20: 0 <= bufsize;\nloop invariant i21: 0 <= bufsize_0;\nloop invariant i22: 0 <= leader_len;\n\nloop invariant i24: leader_len <= bufsize_0;\n\n\n\n\nloop invariant i29: leader_len <= p;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= i <= bufsize_0;\nloop invariant i <= bufsize_0;\nloop invariant 0 <= i <= bufsize_0 - 2;\nloop invariant 2 <= i <= bufsize_0 - 2;\nloop invariant 2 <= i <= bufsize_0 - 2 * i;\nloop invariant i <= bufsize_0 - 2 * i;\nloop invariant 0 <= i * 2 <= bufsize_0 - 2;\nloop invariant 0 <= i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len <= p <= bufsize_0 is preserved but not established.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= i <= bufsize_0 is partially proven to be inductive.\nloop invariant i <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= bufsize_0 - 2 is partially proven to be inductive.\nloop invariant 2 <= i <= bufsize_0 - 2 is preserved but not established.\nloop invariant 2 <= i <= bufsize_0 - 2 * i is partially proven to be inductive.\nloop invariant i <= bufsize_0 - 2 * i is partially proven to be inductive.\nloop invariant 0 <= i * 2 <= bufsize_0 - 2 is partially proven to be inductive.\nloop invariant 0 <= i * 2 <= bufsize_0 - 2 * i is partially proven to be inductive.\nloop invariant i * 2 <= bufsize_0 - 2 * i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: leader_len <= p <= bufsize_0;\n\nloop invariant i4: i <= ielen;\nloop invariant i5: 0 <= i <= ielen;\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 34: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize_0 <= bufsize + i*2;\nloop invariant bufsize >= bufsize_0 - i*2;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize >= leader_len + i*2;\nloop invariant bufsize_0 >= leader_len + i*2;\nloop invariant bufsize >= bufsize_0 - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize_0 <= bufsize + i*2 is preserved but not established.\nloop invariant bufsize >= bufsize_0 - i*2 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize >= leader_len + i*2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + i*2 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - leader_len - i*2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: bufsize >= 2*ielen;\nloop invariant i4: bufsize >= 2;\n\n\n\nloop invariant i8: bufsize_0 >= leader_len;\n\n\nloop invariant i11: bufsize >= bufsize_0 - leader_len;\nloop invariant i12: bufsize >= bufsize_0 - leader_len - i*2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i = 0 ==> 0 <= p <= bufsize_0;\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p <= bufsize_0);\nloop invariant (i = ielen) ==> (p = bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 35: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\nloop invariant i3: (i != 0 && i < ielen) ==> (0 <= p && p <= bufsize_0);\n\nloop invariant i5: (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 76: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i < ielen;\nloop invariant i2: 2*i <= bufsize;\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: p >= 2*i;\nloop invariant i5: p <= bufsize_0;\nloop invariant i6: p <= p + 1 < bufsize_0;\nloop invariant i7: bufsize > 2;\nloop invariant i8: i >= 0;\nloop invariant i9: i < ielen;\nloop invariant i10: i <= ielen;\nloop invariant i11: bufsize > 2*i;\nloop invariant i12: bufsize >= 2;\nloop invariant i13: bufsize_0 > 2*i;\nloop invariant i14: bufsize_0 >= 2;\nloop invariant i15: bufsize_0 > 2*ielen;\nloop invariant i16: bufsize_0 >= 2*ielen;\nloop invariant i17: 2*i < bufsize_0;\nloop invariant i18: 2*ielen < bufsize_0;\nloop invariant i19: 2*i < bufsize;\nloop invariant i20: 2*ielen < bufsize;\nloop invariant i21: bufsize > 2*i + 2;\nloop invariant i22: bufsize >= 2*i + 2;\nloop invariant i23: bufsize > 2*ielen + 2;\nloop invariant i24: bufsize >= 2*ielen + 2;\nloop invariant i25: bufsize_0 > 2*i + 2;\nloop invariant i26: bufsize_0 >= 2*i + 2;\nloop invariant i27: bufsize_0 > 2*ielen + 2;\nloop invariant i28: bufsize_0 >= 2*ielen + 2;\nloop invariant i29: p >= 0;\nloop invariant i30: p <= bufsize;\nloop invariant i31: 0 <= bufsize <= bufsize_0;\nloop invariant i32: 0 <= i <= ielen;\nloop invariant i33: 0 <= leader_len <= bufsize_0;\nloop invariant i34: bufsize >= leader_len;\nloop invariant i35: bufsize >= 2*ielen;\nloop invariant i36: p >= leader_len;\nloop invariant i37: p <= bufsize + leader_len;\nloop invariant i38: bufsize >= 2*i;\nloop invariant i39: bufsize <= 2*i + 2;\nloop invariant i40: p <= bufsize + leader_len + 2*i;\nloop invariant i41: p <= bufsize + leader_len + 2*ielen;\nloop invariant i42: bufsize <= 2*ielen;\nloop invariant i43: p = 0 + i * 2;\nloop invariant i44: bufsize = bufsize_0 - leader_len - i * 2;\nloop invariant i45: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i46: 0 <= p <= bufsize_0 - leader_len - i * 2;\nloop invariant i47: p < bufsize;\nloop invariant i48: bufsize < bufsize_0 - leader_len;\nloop invariant i49: bufsize >= 0;\nloop invariant i50: bufsize_0 >= leader_len;\nloop invariant i51: bufsize_0 >= 0;\nloop invariant i52: ielen >= 0;\nloop invariant i53: bufsize <= bufsize_0;\nloop invariant i54: 0 <= bufsize - 2*i <= bufsize_0;\nloop invariant i55: p >= bufsize_0 - 2*i;\nloop invariant i56: bufsize <= bufsize_0 - 2*i;\nloop invariant i57: bufsize >= bufsize_0 - 2*i;\nloop invariant i58: p + 2 * i <= bufsize_0;\nloop invariant i59: p + 2 * i <= bufsize;\nloop invariant i60: 0 <= i;\nloop invariant i61: p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0;\nloop invariant i62: bufsize_0 - bufsize + leader_len <= p <= bufsize_0;\nloop invariant i63: i > 0 ==> 2 <= bufsize;\nloop invariant i64: i > 0 ==> p+1 < bufsize_0;\nloop invariant i65: i > 0 ==> 2 <= bufsize - 2*i;\nloop invariant i66: bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant i67: 0 <= bufsize <= bufsize_0 - leader_len - 2 * ielen;\nloop invariant i68: bufsize < 2 * ielen ==> i == ielen;\nloop invariant i69: bufsize >= 2 * ielen ==> i < ielen;\nloop invariant i70: 0 <= p <= bufsize_0 ==> i < ielen;\nloop invariant i71: p + 1 < bufsize_0 ==> i < ielen;\nloop invariant i72: p = p_0 + 2 * i;\nloop invariant i73: bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant i74: p >= p_0;\nloop invariant i75: i > 0 ==> i < ielen;\nloop invariant i76: i > 0 ==> bufsize >= 2;\nloop invariant i77: i > 0 ==> bufsize <= 2*iilen;\nloop invariant i78: i > 0 ==> p <= bufsize_0 - (2*iilen - i);\nloop invariant i79: i > 0 ==> p >= bufsize_0 - 2*iilen + i;\nloop invariant i80: i > 0 ==> bufsize >= 2*i;\nloop invariant i81: i > 0 ==> bufsize <= 2*i + 2;\nloop invariant i82: i > 0 ==> p > 0;\nloop invariant i83: i > 0 ==> p < bufsize_0;\nloop invariant i84: p >= p@Pre;\nloop invariant i85: p + 1 < bufsize_0;\nloop invariant i86: p + 1 <= bufsize;\nloop invariant i87: p + 1 >= p@Pre + 1;\nloop invariant i88: p + 2 < bufsize_0;\nloop invariant i89: p + 2 <= bufsize;\nloop invariant i90: p + 2 >= p@Pre + 2;\nloop invariant i91: i >= i@Pre;\nloop invariant i92: i <= ielen@Pre;\nloop invariant i93: p@Pre <= p@LoopVariant;\nloop invariant i94: i@Pre <= i@LoopVariant;\nloop invariant i95: bufsize@Pre <= bufsize@LoopVariant;\nloop invariant i96: bufsize_0@Pre <= bufsize_0@LoopVariant;\nloop invariant i97: 0 <= ielen;\nloop invariant i98: 0 <= bufsize;\nloop invariant i99: 0 <= bufsize_0;\nloop invariant i100: 0 <= leader_len;\nloop invariant i101: leader_len <= bufsize;\nloop invariant i102: leader_len <= bufsize_0;\nloop invariant i103: leader_len <= bufsize@Pre;\nloop invariant i104: leader_len <= bufsize_0@Pre;\nloop invariant i105: leader_len <= bufsize@LoopVariant;\nloop invariant i106: leader_len <= bufsize_0@LoopVariant;\nloop invariant i107: leader_len <= p;\nloop invariant i108: leader_len <= p@Pre;\nloop invariant i109: leader_len <= p@LoopVariant;\nloop invariant i110: leader_len <= p <= bufsize_0;\nloop invariant i111: bufsize_0 - leader_len <= p <= bufsize_0;\nloop invariant i112: 0 <= i <= bufsize_0;\nloop invariant i113: i <= bufsize_0;\nloop invariant i114: 0 <= i <= bufsize_0 - 2;\nloop invariant i115: 2 <= i <= bufsize_0 - 2;\nloop invariant i116: 2 <= i <= bufsize_0 - 2 * i;\nloop invariant i117: i <= bufsize_0 - 2 * i;\nloop invariant i118: 0 <= i * 2 <= bufsize_0 - 2;\nloop invariant i119: 0 <= i * 2 <= bufsize_0 - 2 * i;\nloop invariant i120: i * 2 <= bufsize_0 - 2 * i;\nloop invariant i121: i1;\nloop invariant i122: i2;\nloop invariant i123: i3;\nloop invariant i124: i4;\nloop invariant i125: i5;\nloop invariant i126: i6;\nloop invariant i127: i7;\nloop invariant i128: i8;\nloop invariant i129: i9;\nloop invariant i130: i10;\nloop invariant i131: i11;\nloop invariant i132: i12;\nloop invariant i133: i13;\nloop invariant i134: i14;\nloop invariant i135: i15;\nloop invariant i136: i16;\nloop invariant i137: i17;\nloop invariant i138: i18;\nloop invariant i139: i19;\nloop invariant i140: i20;\nloop invariant i141: i21;\nloop invariant i142: i22;\nloop invariant i143: i23;\nloop invariant i144: i24;\nloop invariant i145: i25;\nloop invariant i146: i26;\nloop invariant i147: i27;\nloop invariant i148: i28;\nloop invariant i149: i29;\nloop invariant i150: i30;\nloop invariant i151: i31;\nloop invariant i152: i32;\nloop invariant i153: i33;\nloop invariant i154: i34;\nloop invariant i155: i35;\nloop invariant i156: i36;\nloop invariant i157: i37;\nloop invariant i158: i38;\nloop invariant i159: i39;\nloop invariant i160: i40;\nloop invariant i161: i41;\nloop invariant i162: i42;\nloop invariant i163: i43;\nloop invariant i164: i44;\nloop invariant i165: i45;\nloop invariant i166: i46;\nloop invariant i167: i47;\nloop invariant i168: i48;\nloop invariant i169: i49;\nloop invariant i170: i50;\nloop invariant i171: i51;\nloop invariant i172: i52;\nloop invariant i173: i53;\nloop invariant i174: i54;\nloop invariant i175: i55;\nloop invariant i176: i56;\nloop invariant i177: i57;\nloop invariant i178: i58;\nloop invariant i179: i59;\nloop invariant i180: i60;\nloop invariant i181: i61;\nloop invariant i182: i62;\nloop invariant i183: i63;\nloop invariant i184: i64;\nloop invariant i185: i65;\nloop invariant i186: i66;\nloop invariant i187: i67;\nloop invariant i188: i68;\nloop invariant i189: i69;\nloop invariant i190: i70;\nloop invariant i191: i71;\nloop invariant i192: i72;\nloop invariant i193: i73;\nloop invariant i194: i74;\nloop invariant i195: i75;\nloop invariant i196: i76;\nloop invariant i197: i77;\nloop invariant i198: i78;\nloop invariant i199: i79;\nloop invariant i200: i80;\nloop invariant i201: i81;\nloop invariant i202: i82;\nloop invariant i203: i83;\nloop invariant i204: i84;\nloop invariant i205: i85;\nloop invariant i206: i86;\nloop invariant i207: i87;\nloop invariant i208: i88;\nloop invariant i209: i89;\nloop invariant i210: i90;\nloop invariant i211: i91;\nloop invariant i212: i92;\nloop invariant i213: i93;\nloop invariant i214: i94;\nloop invariant i215: i95;\nloop invariant i216: i96;\nloop invariant i217: i97;\nloop invariant i218: i98;\nloop invariant i219: i99;\nloop invariant i220: i100;\nloop invariant i221: i101;\nloop invariant i222: i102;\nloop invariant i223: i103;\nloop invariant i224: i104;\nloop invariant i225: i105;\nloop invariant i226: i106;\nloop invariant i227: i107;\nloop invariant i228: i108;\nloop invariant i229: i109;\nloop invariant i230: i110;\nloop invariant i231: i111;\nloop invariant i232: i112;\nloop invariant i233: i113;\nloop invariant i234: i114;\nloop invariant i235: i115;\nloop invariant i236: i116;\nloop invariant i237: i117;\nloop invariant i238: i118;\nloop invariant i239: i119;\nloop invariant i240: i120;\nloop invariant i241: i121;\nloop invariant i242: i122;\nloop invariant i243: i123;\nloop invariant i244: i124;\nloop invariant i245: i125;\nloop invariant i246: i126;\nloop invariant i247: i127;\nloop invariant i248: i128;\nloop invariant i249: i129;\nloop invariant i250: i130;\nloop invariant i251: i131;\nloop invariant i252: i132;\nloop invariant i253: i133;\nloop invariant i254: i134;\nloop invariant i255: i135;\nloop invariant i256: i136;\nloop invariant i257: i137;\nloop invariant i258: i138;\nloop invariant i259: i139;\nloop invariant i260: i140;\nloop invariant i261: i141;\nloop invariant i262: i142;\nloop invariant i263: i143;\nloop invariant i264: i144;\nloop invariant i265: i145;\nloop invariant i266: i146;\nloop invariant i267: i147;\nloop invariant i268: i148;\nloop invariant i269: i149;\nloop invariant i270: i150;\nloop invariant i271: i151;\nloop invariant i272: i152;\nloop invariant i273: i153;\nloop invariant i274: i154;\nloop invariant i275: i155;\nloop invariant i276: i156;\nloop invariant i277: i157;\nloop invariant i278: i158;\nloop invariant i279: bufsize_0 <= bufsize + i*2;\nloop invariant i280: bufsize >= bufsize_0 - i*2;\nloop invariant i281: bufsize >= leader_len + i*2;\nloop invariant i282: bufsize_0 >= leader_len + i*2;\nloop invariant i283: bufsize >= bufsize_0 - leader_len;\nloop invariant i284: bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant i285: i = 0 ==> 0 <= p <= bufsize_0;\nloop invariant i286: (i != 0 && i < ielen) ==> (0 <= p && p <= bufsize_0);\nloop invariant i287: (i = ielen) ==> (p = bufsize_0);\nloop invariant i288: (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant i289: (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "combined_annotation_num_solver_calls": 203,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: 2*i <= bufsize;\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: p >= 2*i;\nloop invariant i5: p <= bufsize_0;\n\n\nloop invariant i8: i >= 0;\n\nloop invariant i10: i <= ielen;\n\nloop invariant i12: bufsize >= 2;\nloop invariant i13: bufsize_0 > 2*i;\nloop invariant i14: bufsize_0 >= 2;\nloop invariant i15: bufsize_0 > 2*ielen;\nloop invariant i16: bufsize_0 >= 2*ielen;\nloop invariant i17: 2*i < bufsize_0;\nloop invariant i18: 2*ielen < bufsize_0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i29: p >= 0;\n\nloop invariant i31: 0 <= bufsize <= bufsize_0;\nloop invariant i32: 0 <= i <= ielen;\nloop invariant i33: 0 <= leader_len <= bufsize_0;\n\nloop invariant i35: bufsize >= 2*ielen;\nloop invariant i36: p >= leader_len;\nloop invariant i37: p <= bufsize + leader_len;\nloop invariant i38: bufsize >= 2*i;\n\nloop invariant i40: p <= bufsize + leader_len + 2*i;\nloop invariant i41: p <= bufsize + leader_len + 2*ielen;\n\n\n\nloop invariant i45: 0 <= bufsize <= bufsize_0 - leader_len;\n\n\n\nloop invariant i49: bufsize >= 0;\nloop invariant i50: bufsize_0 >= leader_len;\nloop invariant i51: bufsize_0 >= 0;\nloop invariant i52: ielen >= 0;\nloop invariant i53: bufsize <= bufsize_0;\nloop invariant i54: 0 <= bufsize - 2*i <= bufsize_0;\n\n\n\n\n\nloop invariant i60: 0 <= i;\nloop invariant i61: p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0;\n\nloop invariant i63: i > 0 ==> 2 <= bufsize;\n\n\n\n\nloop invariant i68: bufsize < 2 * ielen ==> i == ielen;\n\n\n\n\n\n\n\nloop invariant i76: i > 0 ==> bufsize >= 2;\n\n\n\nloop invariant i80: i > 0 ==> bufsize >= 2*i;\n\nloop invariant i82: i > 0 ==> p > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i97: 0 <= ielen;\nloop invariant i98: 0 <= bufsize;\nloop invariant i99: 0 <= bufsize_0;\nloop invariant i100: 0 <= leader_len;\n\nloop invariant i102: leader_len <= bufsize_0;\n\n\n\n\nloop invariant i107: leader_len <= p;\n\n\nloop invariant i110: leader_len <= p <= bufsize_0;\n\nloop invariant i112: 0 <= i <= bufsize_0;\nloop invariant i113: i <= bufsize_0;\nloop invariant i114: 0 <= i <= bufsize_0 - 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i282: bufsize_0 >= leader_len + i*2;\nloop invariant i283: bufsize >= bufsize_0 - leader_len;\nloop invariant i284: bufsize >= bufsize_0 - leader_len - i*2;\n\nloop invariant i286: (i != 0 && i < ielen) ==> (0 <= p && p <= bufsize_0);\n\nloop invariant i288: (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c"
        ],
        "skipped": [],
        "total": 2,
        "success_count": 0,
        "failure_count": 2,
        "success_rate": 0.0
    }
}