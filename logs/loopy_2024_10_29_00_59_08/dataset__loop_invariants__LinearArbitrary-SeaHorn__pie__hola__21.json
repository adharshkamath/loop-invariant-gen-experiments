{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  while( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n \\* (c1 + c2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i * c1;\nloop invariant k <= i * c2;\nloop invariant i * c1 <= k <= i * c2;\nloop invariant k >= i * c1 ==> k >= n;\nloop invariant k <= i * c2 ==> k >= n;\nloop invariant k >= n ==> k >= i * c1;\nloop invariant k >= n ==> k <= i * c2;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= k;\nloop invariant k <= n * c1 + n * c2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k;\nloop invariant (k <= (n * c1)) ==> (i == n && c2 > c1);\nloop invariant (k <= (n * c2)) ==> (i == n && c1 > c2);\nloop invariant (k <= (n * c1)) ==> (i < n && c2 >= c1);\nloop invariant (k <= (n * c2)) ==> (i < n && c1 >= c2);\nloop invariant (k >= (n * c1)) ==> (i == n && c2 <= c1);\nloop invariant (k >= (n * c2)) ==> (i == n && c1 <= c2);\nloop invariant (k >= (n * c1)) ==> (i < n && c2 < c1);\nloop invariant (k >= (n * c2)) ==> (i < n && c1 < c2);\nloop invariant (k == (i * c1)) ==> (c2 > c1);\nloop invariant (k == (i * c2)) ==> (c1 > c2);\nloop invariant (k == (i * c1)) ==> (c2 >= c1);\nloop invariant (k == (i * c2)) ==> (c1 >= c2);\nloop invariant (k == (i * c1)) ==> (i == n);\nloop invariant (k == (i * c2)) ==> (i == n);\nloop invariant (k == (i * c1)) ==> (i < n);\nloop invariant (k == (i * c2)) ==> (i < n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= (2 * c1 * n);\nloop invariant (k - c1 * i) % c1 <= 0;\nloop invariant (k - c2 * i) % c2 <= 0;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant n > 0;\nloop invariant n < 10;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= n * (c1 + c2);\nloop invariant k >= n * c1 || k <= n * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * max(c1, c2);\nloop invariant (k + c1) * (n - i) >= 0 ==> i < n;\nloop invariant (k + c2) * (n - i) >= 0 ==> i < n;\nloop invariant k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant k + c2 * (n - i) >= c1 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= 4000 * n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= v <= 1;\nloop invariant v == 0 ==> k <= (i * c1);\nloop invariant v == 1 ==> k <= (i * c2);\nloop invariant (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2);\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\n*/\n```",
            "```\n/*@\nloop invariant 1. k >= 0;\nloop invariant 2. 0 <= i <= n;\nloop invariant 3. n > 0;\nloop invariant 4. n < 10;\nloop invariant 5. (v == 0) ==> (k >= c1);\nloop invariant 6. (v == 1) ==> (k >= c2);\nloop invariant 7. (v == 0) ==> (k >= c1 + c2 * (i - 1));\nloop invariant 8. (v == 1) ==> (k >= c2 + c1 * (i - 1));\nloop invariant 9. (v == 0) ==> (k <= c1 + c2 * i);\nloop invariant 10. (v == 1) ==> (k <= c2 + c1 * i);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= (c1 + c2) * n;\nloop invariant (k == (c1 * i) + (c2 * (n - i)));\n*/\n```",
            "```\n/*@\nloop invariant k >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant k >= i * c2;\nloop invariant k <= (i * c1) + (n - i) * c2;\nloop invariant k <= n * c1;\nloop invariant n <= 9;\nloop invariant 0 < n;\nloop invariant n >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k == (c1 + c2) * i;\nloop invariant v == (unknown2() % 2 == 0);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant c1 <= c2;\nloop invariant unknown2() % 2 == 0;\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * (max(c1, c2));\nloop invariant k >= c1 * max(0, i - n) + c2 * max(0, i - n);\nloop invariant k <= c1 * i + c2 * i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (k == k + c1 * (i - 1) + c2 * (n - i));\nloop invariant (k >= 0);\nloop invariant (k <= n * (c1 + c2));\nloop invariant (k >= c1 * i);\nloop invariant (k <= c2 * i);\nloop invariant (k >= c1 * (n - i));\nloop invariant (k <= c2 * (n - i));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= n * c1;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant n > 0;\nloop invariant n < 10;\nloop invariant c1 > 0;\nloop invariant c2 > 0;\nloop invariant k >= (c1 * i);\nloop invariant k >= (c2 * i);\nloop invariant k <= (c1 * i) + (c2 * i);\nloop invariant k <= (c1 * n);\nloop invariant k <= (c2 * n);\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant v == 0 || v == 1;\nloop invariant v == (unknown2() % 2 == 0 ? 0 : 1);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 : 0) + (unknown2() % 2 == 0 ? c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n \\* (c1 + c2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: lexical error, illegal character \\",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i * c1;\nloop invariant k <= i * c2;\nloop invariant i * c1 <= k <= i * c2;\nloop invariant k >= i * c1 ==> k >= n;\nloop invariant k <= i * c2 ==> k >= n;\nloop invariant k >= n ==> k >= i * c1;\nloop invariant k >= n ==> k <= i * c2;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k >= i * c1 is partially proven to be inductive.\nloop invariant k <= i * c2 is partially proven to be inductive.\nloop invariant i * c1 <= k <= i * c2 is partially proven to be inductive.\nloop invariant k >= i * c1 ==> k >= n is preserved but not established.\nloop invariant k <= i * c2 ==> k >= n is partially proven to be inductive.\nloop invariant k >= n ==> k >= i * c1 is partially proven to be inductive.\nloop invariant k >= n ==> k <= i * c2 is partially proven to be inductive.\nloop invariant k >= n ==> k >= n is partially proven to be inductive.\nloop invariant k >= n ==> k <= n is partially proven to be inductive.\nAssertion k > n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\nloop invariant i9: k >= n ==> k >= n;\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= k;\nloop invariant k <= n * c1 + n * c2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant i <= k is established but not preserved.\nloop invariant k <= n * c1 + n * c2 is established but not preserved.\nAssertion k > n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k;\nloop invariant (k <= (n * c1)) ==> (i == n && c2 > c1);\nloop invariant (k <= (n * c2)) ==> (i == n && c1 > c2);\nloop invariant (k <= (n * c1)) ==> (i < n && c2 >= c1);\nloop invariant (k <= (n * c2)) ==> (i < n && c1 >= c2);\nloop invariant (k >= (n * c1)) ==> (i == n && c2 <= c1);\nloop invariant (k >= (n * c2)) ==> (i == n && c1 <= c2);\nloop invariant (k >= (n * c1)) ==> (i < n && c2 < c1);\nloop invariant (k >= (n * c2)) ==> (i < n && c1 < c2);\nloop invariant (k == (i * c1)) ==> (c2 > c1);\nloop invariant (k == (i * c2)) ==> (c1 > c2);\nloop invariant (k == (i * c1)) ==> (c2 >= c1);\nloop invariant (k == (i * c2)) ==> (c1 >= c2);\nloop invariant (k == (i * c1)) ==> (i == n);\nloop invariant (k == (i * c2)) ==> (i == n);\nloop invariant (k == (i * c1)) ==> (i < n);\nloop invariant (k == (i * c2)) ==> (i < n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= k is partially proven to be inductive.\nloop invariant (k <= (n * c1)) ==> (i == n && c2 > c1) is preserved but not established.\nloop invariant (k <= (n * c2)) ==> (i == n && c1 > c2) is partially proven to be inductive.\nloop invariant (k <= (n * c1)) ==> (i < n && c2 >= c1) is partially proven to be inductive.\nloop invariant (k <= (n * c2)) ==> (i < n && c1 >= c2) is partially proven to be inductive.\nloop invariant (k >= (n * c1)) ==> (i == n && c2 <= c1) is partially proven to be inductive.\nloop invariant (k >= (n * c2)) ==> (i == n && c1 <= c2) is partially proven to be inductive.\nloop invariant (k >= (n * c1)) ==> (i < n && c2 < c1) is partially proven to be inductive.\nloop invariant (k >= (n * c2)) ==> (i < n && c1 < c2) is partially proven to be inductive.\nloop invariant (k == (i * c1)) ==> (c2 > c1) is partially proven to be inductive.\nloop invariant (k == (i * c2)) ==> (c1 > c2) is partially proven to be inductive.\nloop invariant (k == (i * c1)) ==> (c2 >= c1) is partially proven to be inductive.\nloop invariant (k == (i * c2)) ==> (c1 >= c2) is partially proven to be inductive.\nloop invariant (k == (i * c1)) ==> (i == n) is partially proven to be inductive.\nloop invariant (k == (i * c2)) ==> (i == n) is partially proven to be inductive.\nloop invariant (k == (i * c1)) ==> (i < n) is partially proven to be inductive.\nloop invariant (k == (i * c2)) ==> (i < n) is partially proven to be inductive.\nAssertion k > n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= (2 * c1 * n);\nloop invariant (k - c1 * i) % c1 <= 0;\nloop invariant (k - c2 * i) % c2 <= 0;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant n > 0;\nloop invariant n < 10;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= (2 * c1 * n) is established but not preserved.\nloop invariant (k - c1 * i) % c1 <= 0 is established but not preserved.\nloop invariant (k - c2 * i) % c2 <= 0 is established but not preserved.\nloop invariant c1 >= 0 is partially proven to be inductive.\nloop invariant c2 >= 0 is partially proven to be inductive.\nloop invariant n > 0 is partially proven to be inductive.\nloop invariant n < 10 is partially proven to be inductive.\nAssertion k > n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: k >= 0;\n\n\n\nloop invariant i6: c1 >= 0;\nloop invariant i7: c2 >= 0;\nloop invariant i8: n > 0;\nloop invariant i9: n < 10;\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= n * (c1 + c2);\nloop invariant k >= n * c1 || k <= n * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= n * (c1 + c2) is partially proven to be inductive.\nloop invariant k >= n * c1 || k <= n * c2 is partially proven to be inductive.\nloop invariant k >= i * c1 + (n - i) * c2 is preserved but not established.\nloop invariant k <= i * c2 + (n - i) * c1 is partially proven to be inductive.\nloop invariant k >= i * (c1 + c2) is partially proven to be inductive.\nloop invariant k <= (i + 1) * (c1 + c2) is partially proven to be inductive.\nloop invariant k >= c1 || k <= c2 is partially proven to be inductive.\nloop invariant k >= i * c1 is partially proven to be inductive.\nloop invariant k <= n * c1 is partially proven to be inductive.\nloop invariant k >= n * c2 is partially proven to be inductive.\nloop invariant k <= i * c2 is partially proven to be inductive.\nloop invariant k >= (n - i) * c1 is partially proven to be inductive.\nloop invariant k <= (n - i) * c2 is partially proven to be inductive.\nAssertion k > n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * max(c1, c2);\nloop invariant (k + c1) * (n - i) >= 0 ==> i < n;\nloop invariant (k + c2) * (n - i) >= 0 ==> i < n;\nloop invariant k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant k + c2 * (n - i) >= c1 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: unbound logic function max. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\nloop invariant i9: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i);\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= 4000 * n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= v <= 1;\nloop invariant v == 0 ==> k <= (i * c1);\nloop invariant v == 1 ==> k <= (i * c2);\nloop invariant (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2);\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= 4000 * n is established but not preserved.\nloop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= v <= 1 is preserved but not established.\nloop invariant v == 0 ==> k <= (i * c1) is established but not preserved.\nloop invariant v == 1 ==> k <= (i * c2) is established but not preserved.\nloop invariant (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2) is partially proven to be inductive.\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2)) is partially proven to be inductive.\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2)) is partially proven to be inductive.\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2)) is partially proven to be inductive.\nAssertion k > n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\nloop invariant i2: 0 <= i <= n;\n\n\n\nloop invariant i6: (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2);\nloop invariant i7: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2));\nloop invariant i8: (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant i9: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 1. k >= 0;\nloop invariant 2. 0 <= i <= n;\nloop invariant 3. n > 0;\nloop invariant 4. n < 10;\nloop invariant 5. (v == 0) ==> (k >= c1);\nloop invariant 6. (v == 1) ==> (k >= c2);\nloop invariant 7. (v == 0) ==> (k >= c1 + c2 * (i - 1));\nloop invariant 8. (v == 1) ==> (k >= c2 + c1 * (i - 1));\nloop invariant 9. (v == 0) ==> (k <= c1 + c2 * i);\nloop invariant 10. (v == 1) ==> (k <= c2 + c1 * i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unexpected token 'k'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= (c1 + c2) * n;\nloop invariant (k == (c1 * i) + (c2 * (n - i)));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\n\n\nloop invariant i4: 0 <= i <= n;\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant k >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant k >= i * c2;\nloop invariant k <= (i * c1) + (n - i) * c2;\nloop invariant k <= n * c1;\nloop invariant n <= 9;\nloop invariant 0 < n;\nloop invariant n >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant k >= 0 is established but not preserved.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant k >= i * c2 is established but not preserved.\nloop invariant k <= (i * c1) + (n - i) * c2 is established but not preserved.\nloop invariant k <= n * c1 is established but not preserved.\nloop invariant n <= 9 is partially proven to be inductive.\nloop invariant 0 < n is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nAssertion k > n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: i <= n;\n\n\n\nloop invariant i7: n <= 9;\nloop invariant i8: 0 < n;\nloop invariant i9: n >= 1;\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k == (c1 + c2) * i;\nloop invariant v == (unknown2() % 2 == 0);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant c1 <= c2;\nloop invariant unknown2() % 2 == 0;\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 25: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * (max(c1, c2));\nloop invariant k >= c1 * max(0, i - n) + c2 * max(0, i - n);\nloop invariant k <= c1 * i + c2 * i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: unbound logic function max. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (k == k + c1 * (i - 1) + c2 * (n - i));\nloop invariant (k >= 0);\nloop invariant (k <= n * (c1 + c2));\nloop invariant (k >= c1 * i);\nloop invariant (k <= c2 * i);\nloop invariant (k >= c1 * (n - i));\nloop invariant (k <= c2 * (n - i));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant (k == k + c1 * (i - 1) + c2 * (n - i)) is preserved but not established.\nloop invariant (k >= 0) is partially proven to be inductive.\nloop invariant (k <= n * (c1 + c2)) is partially proven to be inductive.\nloop invariant (k >= c1 * i) is partially proven to be inductive.\nloop invariant (k <= c2 * i) is partially proven to be inductive.\nloop invariant (k >= c1 * (n - i)) is preserved but not established.\nloop invariant (k <= c2 * (n - i)) is partially proven to be inductive.\nAssertion k > n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 16,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= n * c1;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant n > 0;\nloop invariant n < 10;\nloop invariant c1 > 0;\nloop invariant c2 > 0;\nloop invariant k >= (c1 * i);\nloop invariant k >= (c2 * i);\nloop invariant k <= (c1 * i) + (c2 * i);\nloop invariant k <= (c1 * n);\nloop invariant k <= (c2 * n);\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant v == 0 || v == 1;\nloop invariant v == (unknown2() % 2 == 0 ? 0 : 1);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 : 0) + (unknown2() % 2 == 0 ? c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 38: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\nloop invariant i2: 0 <= i <= n;\n\nloop invariant i4: n > 0;\nloop invariant i5: n < 10;\nloop invariant i6: c1 > 0;\nloop invariant i7: c2 > 0;\n\n\nloop invariant i10: k <= (c1 * i) + (c2 * i);\n\n\nloop invariant i13: i <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 24: lexical error, illegal character \\",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= k <= n \\* (c1 + c2);\nloop invariant i3: k >= i * c1;\nloop invariant i4: k <= i * c2;\nloop invariant i5: i * c1 <= k <= i * c2;\nloop invariant i6: k >= i * c1 ==> k >= n;\nloop invariant i7: k <= i * c2 ==> k >= n;\nloop invariant i8: k >= n ==> k >= i * c1;\nloop invariant i9: k >= n ==> k <= i * c2;\nloop invariant i10: k >= n ==> k >= n;\nloop invariant i11: k >= n ==> k <= n;\nloop invariant i12: i <= k;\nloop invariant i13: k <= n * c1 + n * c2;\nloop invariant i14: 0 <= k;\nloop invariant i15: (k <= (n * c1)) ==> (i == n && c2 > c1);\nloop invariant i16: (k <= (n * c2)) ==> (i == n && c1 > c2);\nloop invariant i17: (k <= (n * c1)) ==> (i < n && c2 >= c1);\nloop invariant i18: (k <= (n * c2)) ==> (i < n && c1 >= c2);\nloop invariant i19: (k >= (n * c1)) ==> (i == n && c2 <= c1);\nloop invariant i20: (k >= (n * c2)) ==> (i == n && c1 <= c2);\nloop invariant i21: (k >= (n * c1)) ==> (i < n && c2 < c1);\nloop invariant i22: (k >= (n * c2)) ==> (i < n && c1 < c2);\nloop invariant i23: (k == (i * c1)) ==> (c2 > c1);\nloop invariant i24: (k == (i * c2)) ==> (c1 > c2);\nloop invariant i25: (k == (i * c1)) ==> (c2 >= c1);\nloop invariant i26: (k == (i * c2)) ==> (c1 >= c2);\nloop invariant i27: (k == (i * c1)) ==> (i == n);\nloop invariant i28: (k == (i * c2)) ==> (i == n);\nloop invariant i29: (k == (i * c1)) ==> (i < n);\nloop invariant i30: (k == (i * c2)) ==> (i < n);\nloop invariant i31: k >= 0;\nloop invariant i32: k <= (2 * c1 * n);\nloop invariant i33: (k - c1 * i) % c1 <= 0;\nloop invariant i34: (k - c2 * i) % c2 <= 0;\nloop invariant i35: c1 >= 0;\nloop invariant i36: c2 >= 0;\nloop invariant i37: n > 0;\nloop invariant i38: n < 10;\nloop invariant i39: k <= n * (c1 + c2);\nloop invariant i40: k >= n * c1 || k <= n * c2;\nloop invariant i41: k >= i * c1 + (n - i) * c2;\nloop invariant i42: k <= i * c2 + (n - i) * c1;\nloop invariant i43: k >= i * (c1 + c2);\nloop invariant i44: k <= (i + 1) * (c1 + c2);\nloop invariant i45: k >= c1 || k <= c2;\nloop invariant i46: k <= n * c1;\nloop invariant i47: k >= n * c2;\nloop invariant i48: k >= (n - i) * c1;\nloop invariant i49: k <= (n - i) * c2;\nloop invariant i50: 0 <= k <= n * max(c1, c2);\nloop invariant i51: (k + c1) * (n - i) >= 0 ==> i < n;\nloop invariant i52: (k + c2) * (n - i) >= 0 ==> i < n;\nloop invariant i53: k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant i54: k + c2 * (n - i) >= c1 * (n - i) ==> i < n;\nloop invariant i55: c1 * (n - i) <= k <= c2 * (n - i) ==> i < n;\nloop invariant i56: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant i57: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i);\nloop invariant i58: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c2 * (n - i);\nloop invariant i59: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant i60: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant i61: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant i62: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant i63: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant i64: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant i65: 0 <= k <= 4000 * n;\nloop invariant i66: 0 <= v <= 1;\nloop invariant i67: v == 0 ==> k <= (i * c1);\nloop invariant i68: v == 1 ==> k <= (i * c2);\nloop invariant i69: (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2);\nloop invariant i70: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2));\nloop invariant i71: (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant i72: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant i73: 1. k >= 0;\nloop invariant i74: 2. 0 <= i <= n;\nloop invariant i75: 3. n > 0;\nloop invariant i76: 4. n < 10;\nloop invariant i77: 5. (v == 0) ==> (k >= c1);\nloop invariant i78: 6. (v == 1) ==> (k >= c2);\nloop invariant i79: 7. (v == 0) ==> (k >= c1 + c2 * (i - 1));\nloop invariant i80: 8. (v == 1) ==> (k >= c2 + c1 * (i - 1));\nloop invariant i81: 9. (v == 0) ==> (k <= c1 + c2 * i);\nloop invariant i82: 10. (v == 1) ==> (k <= c2 + c1 * i);\nloop invariant i83: i1;\nloop invariant i84: i2;\nloop invariant i85: i3;\nloop invariant i86: 0 <= k <= (c1 + c2) * n;\nloop invariant i87: (k == (c1 * i) + (c2 * (n - i)));\nloop invariant i88: i >= 0;\nloop invariant i89: i <= n;\nloop invariant i90: k >= i * c2;\nloop invariant i91: k <= (i * c1) + (n - i) * c2;\nloop invariant i92: n <= 9;\nloop invariant i93: 0 < n;\nloop invariant i94: n >= 1;\nloop invariant i95: k == (c1 + c2) * i;\nloop invariant i96: v == (unknown2() % 2 == 0);\nloop invariant i97: k == (c1 * i) + (c2 * i);\nloop invariant i98: c1 <= c2;\nloop invariant i99: unknown2() % 2 == 0;\nloop invariant i100: 0 <= k <= n * (max(c1, c2));\nloop invariant i101: k >= c1 * max(0, i - n) + c2 * max(0, i - n);\nloop invariant i102: k <= c1 * i + c2 * i;\nloop invariant i103: (k == k + c1 * (i - 1) + c2 * (n - i));\nloop invariant i104: (k >= 0);\nloop invariant i105: (k <= n * (c1 + c2));\nloop invariant i106: (k >= c1 * i);\nloop invariant i107: (k <= c2 * i);\nloop invariant i108: (k >= c1 * (n - i));\nloop invariant i109: (k <= c2 * (n - i));\nloop invariant i110: 0 <= k <= n * c1;\nloop invariant i111: 0 <= j <= n;\nloop invariant i112: c1 > 0;\nloop invariant i113: c2 > 0;\nloop invariant i114: k >= (c1 * i);\nloop invariant i115: k >= (c2 * i);\nloop invariant i116: k <= (c1 * i) + (c2 * i);\nloop invariant i117: k <= (c1 * n);\nloop invariant i118: k <= (c2 * n);\nloop invariant i119: j <= n;\nloop invariant i120: v == 0 || v == 1;\nloop invariant i121: v == (unknown2() % 2 == 0 ? 0 : 1);\nloop invariant i122: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2);\nloop invariant i123: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant i124: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 : 0) + (unknown2() % 2 == 0 ? c2 : 0);\nloop invariant i125: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant i126: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant i127: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant i128: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant i129: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant i130: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant i131: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant i132: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 61,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\nloop invariant i10: k >= n ==> k >= n;\n\nloop invariant i12: i <= k;\nloop invariant i13: k <= n * c1 + n * c2;\nloop invariant i14: 0 <= k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i31: k >= 0;\n\n\n\nloop invariant i35: c1 >= 0;\nloop invariant i36: c2 >= 0;\nloop invariant i37: n > 0;\nloop invariant i38: n < 10;\nloop invariant i39: k <= n * (c1 + c2);\n\n\n\n\nloop invariant i44: k <= (i + 1) * (c1 + c2);\n\n\n\n\n\n\n\n\n\n\nloop invariant i55: c1 * (n - i) <= k <= c2 * (n - i) ==> i < n;\nloop invariant i56: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant i57: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i);\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i69: (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2);\nloop invariant i70: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2));\nloop invariant i71: (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant i72: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i86: 0 <= k <= (c1 + c2) * n;\n\nloop invariant i88: i >= 0;\nloop invariant i89: i <= n;\n\n\nloop invariant i92: n <= 9;\nloop invariant i93: 0 < n;\nloop invariant i94: n >= 1;\n\n\n\n\n\n\n\nloop invariant i102: k <= c1 * i + c2 * i;\n\nloop invariant i104: (k >= 0);\nloop invariant i105: (k <= n * (c1 + c2));\n\n\n\n\n\n\nloop invariant i112: c1 > 0;\nloop invariant i113: c2 > 0;\n\n\nloop invariant i116: k <= (c1 * i) + (c2 * i);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c"
        ],
        "skipped": [],
        "total": 11,
        "success_count": 1,
        "failure_count": 10,
        "success_rate": 0.09090909090909091
    }
}