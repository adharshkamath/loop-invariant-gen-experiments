{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/84.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant y > 0 ==> y <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y <= 0;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x + y >= -49;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y <= x;\nloop invariant x + y >= 0;\nloop invariant y < 51;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= (y + 1);\nloop invariant x <= 0;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x <= (y * y - 1) / 2;\nloop invariant y >= x + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (y - 50);\n*/\n```",
            "```\n/*@\nloop invariant y > 0;\nloop invariant x >= -50;\nloop invariant x <= -50 + y * y;\nloop invariant (x < 0) ==> (y > 0 && x >= -50 && x <= -50 + y * y);\n*/\n```",
            "```\n/*@\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant 1 <= y;\nloop invariant y <= 50;\nloop invariant x + (y * (y - 1) / 2) <= 0;\nloop invariant x + (y * (y - 1) / 2) >= -50;\nloop invariant x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2;\nloop invariant x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2;\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y and y <= -x;\nloop invariant x <= -y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\nloop invariant y >= x + 50;\nloop invariant x + y >= 0;\nloop invariant x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y <= 0;\nloop invariant x + y - 1 >= y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= -50;\nloop invariant 0 <= y <= 50;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y > 0 ==> x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant y < 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant y > 0 ==> y <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y > 0 ==> y <= 100000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y <= 0;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x + y >= -49;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x + y <= 0 is neither established nor preserved.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant x + y >= -49 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y <= x;\nloop invariant x + y >= 0;\nloop invariant y < 51;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant y <= x is preserved but not established.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant y < 51 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= (y + 1);\nloop invariant x <= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x <= (y + 1) is partially proven to be inductive.\nloop invariant x <= 0 is established but not preserved.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x <= (y * y - 1) / 2;\nloop invariant y >= x + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= -50 is preserved but not established.\nloop invariant x <= (y * y - 1) / 2 is partially proven to be inductive.\nloop invariant y >= x + 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\nloop invariant i2: x <= (y * y - 1) / 2;\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (y - 50);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= (y - 50) is neither established nor preserved.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant y > 0;\nloop invariant x >= -50;\nloop invariant x <= -50 + y * y;\nloop invariant (x < 0) ==> (y > 0 && x >= -50 && x <= -50 + y * y);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y > 0 is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x <= -50 + y * y is partially proven to be inductive.\nloop invariant (x < 0) ==> (y > 0 && x >= -50 && x <= -50 + y * y) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant 1 <= y;\nloop invariant y <= 50;\nloop invariant x + (y * (y - 1) / 2) <= 0;\nloop invariant x + (y * (y - 1) / 2) >= -50;\nloop invariant x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2;\nloop invariant x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2;\nloop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= -50 is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant 1 <= y is preserved but not established.\nloop invariant y <= 50 is preserved but not established.\nloop invariant x + (y * (y - 1) / 2) <= 0 is preserved but not established.\nloop invariant x + (y * (y - 1) / 2) >= -50 is partially proven to be inductive.\nloop invariant x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2 is neither established nor preserved.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y and y <= -x;\nloop invariant x <= -y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token 'and'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\nloop invariant y >= x + 50;\nloop invariant x + y >= 0;\nloop invariant x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant y >= x + 50 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50;\nloop invariant i8: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i9: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i10: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i11: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i12: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i13: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i14: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i15: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i16: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i17: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i18: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i19: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y <= 0;\nloop invariant x + y - 1 >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x + y <= 0 is preserved but not established.\nloop invariant x + y - 1 >= y is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= -50;\nloop invariant 0 <= y <= 50;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y > 0 ==> x >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= -50 is preserved but not established.\nloop invariant 0 <= y <= 50 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> x >= y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant y < 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant y < 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 51: unexpected token 'and'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= y;\nloop invariant i6: y > 0 ==> y <= 100000;\nloop invariant i7: 0 <= y;\nloop invariant i8: x + y <= 0;\nloop invariant i9: x >= -50;\nloop invariant i10: y >= 1;\nloop invariant i11: x + y >= -49;\nloop invariant i12: x < 0;\nloop invariant i13: y <= x;\nloop invariant i14: x + y >= 0;\nloop invariant i15: y < 51;\nloop invariant i16: x <= (y + 1);\nloop invariant i17: x <= 0;\nloop invariant i18: i1;\nloop invariant i19: i2;\nloop invariant i20: i3;\nloop invariant i21: i4;\nloop invariant i22: i5;\nloop invariant i23: i6;\nloop invariant i24: i7;\nloop invariant i25: 0 <= y <= -50;\nloop invariant i26: x <= (y * y - 1) / 2;\nloop invariant i27: y >= x + 1;\nloop invariant i28: x >= (y - 50);\nloop invariant i29: y > 0;\nloop invariant i30: x <= -50 + y * y;\nloop invariant i31: (x < 0) ==> (y > 0 && x >= -50 && x <= -50 + y * y);\nloop invariant i32: 1 <= y;\nloop invariant i33: y <= 50;\nloop invariant i34: x + (y * (y - 1) / 2) <= 0;\nloop invariant i35: x + (y * (y - 1) / 2) >= -50;\nloop invariant i36: x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2;\nloop invariant i37: 0 <= y and y <= -x;\nloop invariant i38: x <= -y;\nloop invariant i39: 0 <= x <= -50;\nloop invariant i40: y >= x + 50;\nloop invariant i41: x + y < 0 ==> y < 2;\nloop invariant i42: x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i43: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50;\nloop invariant i44: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i45: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i46: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i47: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i48: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i49: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i50: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i51: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i52: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i53: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i54: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i55: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i56: x + y - 1 >= y;\nloop invariant i57: 1 <= x <= -50;\nloop invariant i58: 0 <= y <= 50;\nloop invariant i59: x >= (y - 1) * y / 2;\nloop invariant i60: y > 0 ==> x >= y;\nloop invariant i61: y < 100000;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 23,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: x <= (y * y - 1) / 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i43: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50;\nloop invariant i44: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i45: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i46: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i47: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i48: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i49: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i50: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i51: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i52: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i53: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i54: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i55: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c"
        ],
        "skipped": [],
        "total": 7,
        "success_count": 1,
        "failure_count": 6,
        "success_rate": 0.14285714285714285
    }
}