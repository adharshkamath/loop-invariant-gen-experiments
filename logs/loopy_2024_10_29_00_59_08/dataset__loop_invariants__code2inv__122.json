{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/122.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant (sn == (i - 1) ==> sn == 0);\nloop invariant (sn == i ==> sn == size);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn == size ==> i == size + 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant sn <= size;\nloop invariant i <= size;\nloop invariant sn + i - 1 <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= (size - (i - 1));\nloop invariant sn >= (i - 1);\nloop invariant (sn == size) ==> (i == size + 1);\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn;\nloop invariant 0 <= i <= size + 1;\nloop invariant sn <= size;\nloop invariant i <= size + 1;\nloop invariant sn == i - 1;\nloop invariant sn == size - (size - i + 1);\nloop invariant sn >= 1;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 1 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i - 1;\nloop invariant i <= size + 1;\nloop invariant sn <= size;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant sn == 0 ==> size == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == size ==> sn == size;\nloop invariant sn == 0 ==> i == size + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant (i <= size) ==> (sn == i - 1);\nloop invariant (i > size) ==> (sn == size);\nloop invariant (sn != size) ==> (sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant (sn == (i - 1));\nloop invariant (i <= (sn + 1));\nloop invariant (sn <= i);\nloop invariant (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == 0);\nloop invariant (sn != size) ==> (i == size + 1);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant (i - 1) <= size;\nloop invariant (sn - 1) <= (i - 1);\nloop invariant (size - sn) == (size - (i - 1));\nloop invariant (sn == i - 1);\nloop invariant (sn == 0) ==> (size == 0);\nloop invariant (sn == 0) ==> (i == 1);\nloop invariant (sn == 0) ==> (sn == i - 1);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - i + 1;\nloop invariant sn == 0;\nloop invariant i == size + 1;\nloop invariant sn == 0 ==> (sn == size - i + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant i = size + 1;\nloop invariant sn = size;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i <= size + 1;\nloop invariant i >= 1;\nloop invariant sn = sn + 1;\nloop invariant i = size + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant i >= sn;\nloop invariant (if (i <= size) then sn == 0 else sn == size);\nloop invariant (if (i <= size) then i == size + 1 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 1 else sn == 0);\nloop invariant (if (i <= size) then sn == i - 1 else sn == size);\nloop invariant (if (i <= size) then i == sn + 1 else i == 1);\nloop invariant (if (i <= size) then sn == size - i else sn == 0);\nloop invariant (if (i <= size) then i == sn + 2 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 2 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 3 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 3 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 4 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 4 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 5 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 5 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 6 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 6 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 7 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 7 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 8 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 8 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 9 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 9 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 10 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 10 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 11 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 11 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 12 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 12 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 13 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 13 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 14 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 14 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 15 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 15 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 16 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 16 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 17 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 17 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 18 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 18 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 19 else i == 1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant (sn == (i - 1) ==> sn == 0);\nloop invariant (sn == i ==> sn == size);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn == size ==> i == size + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant (sn == (i - 1) ==> sn == 0) is established but not preserved.\nloop invariant (sn == i ==> sn == size) is partially proven to be inductive.\nloop invariant (sn == 0 ==> i == 1) is partially proven to be inductive.\nloop invariant (sn == size ==> i == size + 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn >= i - 1;\nloop invariant i5: sn <= i;\n\nloop invariant i7: (sn == i ==> sn == size);\nloop invariant i8: (sn == 0 ==> i == 1);\nloop invariant i9: (sn == size ==> i == size + 1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant sn <= size;\nloop invariant i <= size;\nloop invariant sn + i - 1 <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nloop invariant sn + i - 1 <= size is established but not preserved.\nloop invariant sn + size - i + 1 <= size is partially proven to be inductive.\nloop invariant sn + size - i <= size is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i;\n\n\n\nloop invariant i7: sn + size - i + 1 <= size;\nloop invariant i8: sn + size - i <= size;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= (size - (i - 1));\nloop invariant sn >= (i - 1);\nloop invariant (sn == size) ==> (i == size + 1);\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn <= (size - (i - 1)) is partially proven to be inductive.\nloop invariant sn >= (i - 1) is partially proven to be inductive.\nloop invariant (sn == size) ==> (i == size + 1) is partially proven to be inductive.\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size)) is partially proven to be inductive.\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn == (size - (i - 1))) is preserved but not established.\nloop invariant (sn != size) ==> (i == (size + 1 - sn)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (i == (sn + 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn == (i - 1)) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i >= 1;\n\nloop invariant i6: sn >= (i - 1);\nloop invariant i7: (sn == size) ==> (i == size + 1);\n\n\n\n\nloop invariant i12: (sn != size) ==> (i == (sn + 1));\nloop invariant i13: (sn != size) ==> (sn == (i - 1));\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn;\nloop invariant 0 <= i <= size + 1;\nloop invariant sn <= size;\nloop invariant i <= size + 1;\nloop invariant sn == i - 1;\nloop invariant sn == size - (size - i + 1);\nloop invariant sn >= 1;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn is partially proven to be inductive.\nloop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == size - (size - i + 1) is partially proven to be inductive.\nloop invariant sn >= 1 is preserved but not established.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn <= size - (size - i + 1) is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= sn;\n\n\n\nloop invariant i5: sn == i - 1;\nloop invariant i6: sn == size - (size - i + 1);\n\nloop invariant i8: sn <= i - 1;\nloop invariant i9: sn <= size - (size - i + 1);\nloop invariant i10: sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 1 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size is preserved but not established.\nloop invariant 1 <= sn <= size is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i - 1;\nloop invariant i <= size + 1;\nloop invariant sn <= size;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nAssertion sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i - 1;\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant sn == 0 ==> size == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == size ==> sn == size;\nloop invariant sn == 0 ==> i == size + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant i == size + 1 ==> sn == size is partially proven to be inductive.\nloop invariant sn == 0 ==> size == 0 is preserved but not established.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn == 0 ==> i == size + 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\nloop invariant i4: sn == 0 ==> sn == 0;\n\n\n\nloop invariant i8: sn == size ==> sn == size;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant (i <= size) ==> (sn == i - 1);\nloop invariant (i > size) ==> (sn == size);\nloop invariant (sn != size) ==> (sn == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant (i <= size) ==> (sn == i - 1) is partially proven to be inductive.\nloop invariant (i > size) ==> (sn == size) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn == 0) is established but not preserved.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: (i <= size) ==> (sn == i - 1);\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant (sn == (i - 1));\nloop invariant (i <= (sn + 1));\nloop invariant (sn <= i);\nloop invariant (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == 0);\nloop invariant (sn != size) ==> (i == size + 1);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant (sn == (i - 1)) is partially proven to be inductive.\nloop invariant (i <= (sn + 1)) is partially proven to be inductive.\nloop invariant (sn <= i) is partially proven to be inductive.\nloop invariant (i == (sn + 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn == 0) is partially proven to be inductive.\nloop invariant (sn != size) ==> (i == size + 1) is preserved but not established.\nloop invariant (sn != size) ==> (i == (sn + 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (i <= (sn + 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn <= i) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn != i) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn <= (i - 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn >= (i - 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn == (i - 1)) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: (sn == (i - 1));\nloop invariant i4: (i <= (sn + 1));\nloop invariant i5: (sn <= i);\nloop invariant i6: (i == (sn + 1));\n\n\nloop invariant i9: (sn != size) ==> (i == (sn + 1));\nloop invariant i10: (sn != size) ==> (i <= (sn + 1));\nloop invariant i11: (sn != size) ==> (sn <= i);\nloop invariant i12: (sn != size) ==> (sn != i);\nloop invariant i13: (sn != size) ==> (sn <= (i - 1));\nloop invariant i14: (sn != size) ==> (sn >= (i - 1));\nloop invariant i15: (sn != size) ==> (sn == (i - 1));\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant (i - 1) <= size;\nloop invariant (sn - 1) <= (i - 1);\nloop invariant (size - sn) == (size - (i - 1));\nloop invariant (sn == i - 1);\nloop invariant (sn == 0) ==> (size == 0);\nloop invariant (sn == 0) ==> (i == 1);\nloop invariant (sn == 0) ==> (sn == i - 1);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant (i - 1) <= size is partially proven to be inductive.\nloop invariant (sn - 1) <= (i - 1) is partially proven to be inductive.\nloop invariant (size - sn) == (size - (i - 1)) is partially proven to be inductive.\nloop invariant (sn == i - 1) is partially proven to be inductive.\nloop invariant (sn == 0) ==> (size == 0) is preserved but not established.\nloop invariant (sn == 0) ==> (i == 1) is partially proven to be inductive.\nloop invariant (sn == 0) ==> (sn == i - 1) is partially proven to be inductive.\nloop invariant (i <= size) ==> (sn <= i) is partially proven to be inductive.\nloop invariant (i <= size) ==> (0 <= sn) is partially proven to be inductive.\nloop invariant (i <= size) ==> (sn <= size) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n\nloop invariant i5: (sn - 1) <= (i - 1);\nloop invariant i6: (size - sn) == (size - (i - 1));\nloop invariant i7: (sn == i - 1);\n\nloop invariant i9: (sn == 0) ==> (i == 1);\nloop invariant i10: (sn == 0) ==> (sn == i - 1);\nloop invariant i11: (i <= size) ==> (sn <= i);\nloop invariant i12: (i <= size) ==> (0 <= sn);\nloop invariant i13: (i <= size) ==> (sn <= size);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - i + 1;\nloop invariant sn == 0;\nloop invariant i == size + 1;\nloop invariant sn == 0 ==> (sn == size - i + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == size - i + 1 is preserved but not established.\nloop invariant sn == 0 is partially proven to be inductive.\nloop invariant i == size + 1 is partially proven to be inductive.\nloop invariant sn == 0 ==> (sn == size - i + 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant i = size + 1;\nloop invariant sn = size;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i <= size + 1;\nloop invariant i >= 1;\nloop invariant sn = sn + 1;\nloop invariant i = size + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 21: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\nloop invariant i5: sn >= 0;\n\nloop invariant i7: i >= 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 44,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant i >= sn;\nloop invariant (if (i <= size) then sn == 0 else sn == size);\nloop invariant (if (i <= size) then i == size + 1 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 1 else sn == 0);\nloop invariant (if (i <= size) then sn == i - 1 else sn == size);\nloop invariant (if (i <= size) then i == sn + 1 else i == 1);\nloop invariant (if (i <= size) then sn == size - i else sn == 0);\nloop invariant (if (i <= size) then i == sn + 2 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 2 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 3 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 3 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 4 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 4 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 5 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 5 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 6 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 6 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 7 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 7 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 8 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 8 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 9 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 9 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 10 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 10 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 11 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 11 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 12 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 12 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 13 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 13 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 14 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 14 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 15 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 15 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 16 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 16 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 17 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 17 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 18 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 18 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 19 else i == 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i >= sn;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 88: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= size + 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= size;\nloop invariant i4: sn >= i - 1;\nloop invariant i5: sn <= i;\nloop invariant i6: (sn == (i - 1) ==> sn == 0);\nloop invariant i7: (sn == i ==> sn == size);\nloop invariant i8: (sn == 0 ==> i == 1);\nloop invariant i9: (sn == size ==> i == size + 1);\nloop invariant i10: 1 <= i <= size;\nloop invariant i11: i <= size;\nloop invariant i12: sn + i - 1 <= size;\nloop invariant i13: sn + size - i + 1 <= size;\nloop invariant i14: sn + size - i <= size;\nloop invariant i15: 0 <= i <= size;\nloop invariant i16: i >= 1;\nloop invariant i17: sn <= (size - (i - 1));\nloop invariant i18: sn >= (i - 1);\nloop invariant i19: (sn == size) ==> (i == size + 1);\nloop invariant i20: (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant i21: (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant i22: (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant i23: (sn != size) ==> (i == (size + 1 - sn));\nloop invariant i24: (sn != size) ==> (i == (sn + 1));\nloop invariant i25: (sn != size) ==> (sn == (i - 1));\nloop invariant i26: 0 <= sn;\nloop invariant i27: i <= size + 1;\nloop invariant i28: sn == i - 1;\nloop invariant i29: sn == size - (size - i + 1);\nloop invariant i30: sn >= 1;\nloop invariant i31: sn <= i - 1;\nloop invariant i32: sn <= size - (size - i + 1);\nloop invariant i33: 1 <= sn <= size;\nloop invariant i34: 0 <= sn <= size;\nloop invariant i35: sn == 0 ==> sn == 0;\nloop invariant i36: i == size + 1 ==> sn == size;\nloop invariant i37: sn == 0 ==> size == 0;\nloop invariant i38: sn == 0 ==> i == 1;\nloop invariant i39: sn == size ==> sn == size;\nloop invariant i40: sn == 0 ==> i == size + 1;\nloop invariant i41: (i <= size) ==> (sn == i - 1);\nloop invariant i42: (i > size) ==> (sn == size);\nloop invariant i43: (sn != size) ==> (sn == 0);\nloop invariant i44: 1 <= i <= size + 1;\nloop invariant i45: (sn == (i - 1));\nloop invariant i46: (i <= (sn + 1));\nloop invariant i47: (sn <= i);\nloop invariant i48: (i == (sn + 1));\nloop invariant i49: (sn != size) ==> (i == size + 1);\nloop invariant i50: (sn != size) ==> (i <= (sn + 1));\nloop invariant i51: (sn != size) ==> (sn <= i);\nloop invariant i52: (sn != size) ==> (sn != i);\nloop invariant i53: (sn != size) ==> (sn <= (i - 1));\nloop invariant i54: (sn != size) ==> (sn >= (i - 1));\nloop invariant i55: (i - 1) <= size;\nloop invariant i56: (sn - 1) <= (i - 1);\nloop invariant i57: (size - sn) == (size - (i - 1));\nloop invariant i58: (sn == i - 1);\nloop invariant i59: (sn == 0) ==> (size == 0);\nloop invariant i60: (sn == 0) ==> (i == 1);\nloop invariant i61: (sn == 0) ==> (sn == i - 1);\nloop invariant i62: (i <= size) ==> (sn <= i);\nloop invariant i63: (i <= size) ==> (0 <= sn);\nloop invariant i64: (i <= size) ==> (sn <= size);\nloop invariant i65: sn == size - i + 1;\nloop invariant i66: sn == 0;\nloop invariant i67: i == size + 1;\nloop invariant i68: sn == 0 ==> (sn == size - i + 1);\nloop invariant i69: i = size + 1;\nloop invariant i70: sn = size;\nloop invariant i71: sn = sn + 1;\nloop invariant i72: i >= sn;\nloop invariant i73: (if (i <= size) then sn == 0 else sn == size);\nloop invariant i74: (if (i <= size) then i == size + 1 else i == 1);\nloop invariant i75: (if (i <= size) then sn == size - i + 1 else sn == 0);\nloop invariant i76: (if (i <= size) then sn == i - 1 else sn == size);\nloop invariant i77: (if (i <= size) then i == sn + 1 else i == 1);\nloop invariant i78: (if (i <= size) then sn == size - i else sn == 0);\nloop invariant i79: (if (i <= size) then i == sn + 2 else i == 1);\nloop invariant i80: (if (i <= size) then sn == size - i + 2 else sn == 0);\nloop invariant i81: (if (i <= size) then i == sn + 3 else i == 1);\nloop invariant i82: (if (i <= size) then sn == size - i + 3 else sn == 0);\nloop invariant i83: (if (i <= size) then i == sn + 4 else i == 1);\nloop invariant i84: (if (i <= size) then sn == size - i + 4 else sn == 0);\nloop invariant i85: (if (i <= size) then i == sn + 5 else i == 1);\nloop invariant i86: (if (i <= size) then sn == size - i + 5 else sn == 0);\nloop invariant i87: (if (i <= size) then i == sn + 6 else i == 1);\nloop invariant i88: (if (i <= size) then sn == size - i + 6 else sn == 0);\nloop invariant i89: (if (i <= size) then i == sn + 7 else i == 1);\nloop invariant i90: (if (i <= size) then sn == size - i + 7 else sn == 0);\nloop invariant i91: (if (i <= size) then i == sn + 8 else i == 1);\nloop invariant i92: (if (i <= size) then sn == size - i + 8 else sn == 0);\nloop invariant i93: (if (i <= size) then i == sn + 9 else i == 1);\nloop invariant i94: (if (i <= size) then sn == size - i + 9 else sn == 0);\nloop invariant i95: (if (i <= size) then i == sn + 10 else i == 1);\nloop invariant i96: (if (i <= size) then sn == size - i + 10 else sn == 0);\nloop invariant i97: (if (i <= size) then i == sn + 11 else i == 1);\nloop invariant i98: (if (i <= size) then sn == size - i + 11 else sn == 0);\nloop invariant i99: (if (i <= size) then i == sn + 12 else i == 1);\nloop invariant i100: (if (i <= size) then sn == size - i + 12 else sn == 0);\nloop invariant i101: (if (i <= size) then i == sn + 13 else i == 1);\nloop invariant i102: (if (i <= size) then sn == size - i + 13 else sn == 0);\nloop invariant i103: (if (i <= size) then i == sn + 14 else i == 1);\nloop invariant i104: (if (i <= size) then sn == size - i + 14 else sn == 0);\nloop invariant i105: (if (i <= size) then i == sn + 15 else i == 1);\nloop invariant i106: (if (i <= size) then sn == size - i + 15 else sn == 0);\nloop invariant i107: (if (i <= size) then i == sn + 16 else i == 1);\nloop invariant i108: (if (i <= size) then sn == size - i + 16 else sn == 0);\nloop invariant i109: (if (i <= size) then i == sn + 17 else i == 1);\nloop invariant i110: (if (i <= size) then sn == size - i + 17 else sn == 0);\nloop invariant i111: (if (i <= size) then i == sn + 18 else i == 1);\nloop invariant i112: (if (i <= size) then sn == size - i + 18 else sn == 0);\nloop invariant i113: (if (i <= size) then i == sn + 19 else i == 1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 59,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn >= i - 1;\nloop invariant i5: sn <= i;\n\nloop invariant i7: (sn == i ==> sn == size);\nloop invariant i8: (sn == 0 ==> i == 1);\nloop invariant i9: (sn == size ==> i == size + 1);\n\n\n\nloop invariant i13: sn + size - i + 1 <= size;\nloop invariant i14: sn + size - i <= size;\n\nloop invariant i16: i >= 1;\n\nloop invariant i18: sn >= (i - 1);\nloop invariant i19: (sn == size) ==> (i == size + 1);\n\n\n\n\nloop invariant i24: (sn != size) ==> (i == (sn + 1));\nloop invariant i25: (sn != size) ==> (sn == (i - 1));\nloop invariant i26: 0 <= sn;\n\nloop invariant i28: sn == i - 1;\nloop invariant i29: sn == size - (size - i + 1);\n\nloop invariant i31: sn <= i - 1;\nloop invariant i32: sn <= size - (size - i + 1);\n\n\nloop invariant i35: sn == 0 ==> sn == 0;\nloop invariant i36: i == size + 1 ==> sn == size;\n\nloop invariant i38: sn == 0 ==> i == 1;\nloop invariant i39: sn == size ==> sn == size;\n\nloop invariant i41: (i <= size) ==> (sn == i - 1);\n\n\n\nloop invariant i45: (sn == (i - 1));\nloop invariant i46: (i <= (sn + 1));\nloop invariant i47: (sn <= i);\nloop invariant i48: (i == (sn + 1));\n\nloop invariant i50: (sn != size) ==> (i <= (sn + 1));\nloop invariant i51: (sn != size) ==> (sn <= i);\nloop invariant i52: (sn != size) ==> (sn != i);\nloop invariant i53: (sn != size) ==> (sn <= (i - 1));\nloop invariant i54: (sn != size) ==> (sn >= (i - 1));\n\nloop invariant i56: (sn - 1) <= (i - 1);\nloop invariant i57: (size - sn) == (size - (i - 1));\nloop invariant i58: (sn == i - 1);\n\nloop invariant i60: (sn == 0) ==> (i == 1);\nloop invariant i61: (sn == 0) ==> (sn == i - 1);\nloop invariant i62: (i <= size) ==> (sn <= i);\nloop invariant i63: (i <= size) ==> (0 <= sn);\nloop invariant i64: (i <= size) ==> (sn <= size);\n\n\n\n\n\n\n\nloop invariant i72: i >= sn;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../dataset/loop_invariants/code2inv/28.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/20.c",
            "../dataset/loop_invariants/code2inv/122.c"
        ],
        "skipped": [],
        "total": 20,
        "success_count": 4,
        "failure_count": 16,
        "success_rate": 0.2
    }
}