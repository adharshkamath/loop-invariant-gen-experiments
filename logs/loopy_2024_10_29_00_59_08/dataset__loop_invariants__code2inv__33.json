{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/33.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant n <= 0;\nloop invariant n >= x;\nloop invariant n >= -1;\nloop invariant n <= 1;\nloop invariant n >= -2;\nloop invariant n <= 2;\nloop invariant n >= -3;\nloop invariant n <= 3;\nloop invariant n >= -4;\nloop invariant n <= 4;\nloop invariant n >= -5;\nloop invariant n <= 5;\nloop invariant n >= -6;\nloop invariant n <= 6;\nloop invariant n >= -7;\nloop invariant n <= 7;\nloop invariant n >= -8;\nloop invariant n <= 8;\nloop invariant n >= -9;\nloop invariant n <= 9;\nloop invariant n >= -10;\nloop invariant n <= 10;\nloop invariant n >= -11;\nloop invariant n <= 11;\nloop invariant n >= -12;\nloop invariant n <= 12;\nloop invariant n >= -13;\nloop invariant n <= 13;\nloop invariant n >= -14;\nloop invariant n <= 14;\nloop invariant n >= -15;\nloop invariant n <= 15;\nloop invariant n >= -16;\nloop invariant n <= 16;\nloop invariant n >= -17;\nloop invariant n <= 17;\nloop invariant n >= -18;\nloop invariant n <= 18;\nloop invariant n >= -19;\nloop invariant n <= 19;\nloop invariant n >= -20;\nloop invariant n <= 20;\nloop invariant n >= -21;\nloop invariant n <= 21;\nloop invariant n >= -22;\nloop invariant n <= 22;\nloop invariant n >= -23;\nloop invariant n <= 23;\nloop invariant n >= -24;\nloop invariant n <= 24;\nloop invariant n >= -25;\nloop invariant n <= 25;\nloop invariant n >= -26;\nloop invariant n <= 26;\nloop invariant n >= -27;\nloop invariant n <= 27;\nloop invariant n >= -28;\nloop invariant n <= 28;\nloop invariant n >= -29;\nloop invariant n <= 29;\nloop invariant n >= -30;\nloop invariant n <= 30;\nloop invariant n >= -31;\nloop invariant n <= 31;\nloop invariant n >= -32;\nloop invariant n <= 32;\nloop invariant n >= -33;\nloop invariant n <= 33;\nloop invariant n >= -34;\nloop invariant n <= 34;\nloop invariant n >= -35;\nloop invariant n <= 35;\nloop invariant n >= -36;\nloop invariant n <= 36;\nloop invariant n >= -37;\nloop invariant n <= 37;\nloop invariant n >= -38;\nloop invariant n <= 38;\nloop invariant n >= -39;\nloop invariant n <= 39;\nloop invariant n >= -40;\nloop invariant n <= 40;\nloop invariant n >= -41;\nloop invariant n <= 41;\nloop invariant n >= -42;\nloop invariant n <= 42;\nloop invariant n >= -43;\nloop invariant n <= 43;\nloop invariant n >= -44;\nloop invariant n <= 44;\nloop invariant n >= -45;\nloop invariant n <= 45;\nloop invariant n >= -46;\nloop invariant n <= 46;\nloop invariant n >= -47;\nloop invariant n <= 47;\nloop invariant n >= -48;\nloop invariant n <= 48;\nloop invariant n >= -49;\nloop invariant n <= 49;\nloop invariant n >= -50;\nloop invariant n <= 50;\nloop invariant n >= -51;\nloop invariant n <= 51;\nloop invariant n >= -52;\nloop invariant n <= 52;\nloop invariant n >= -53;\nloop invariant n <= 53;\nloop invariant n >= -54;\nloop invariant n <= 54;\nloop invariant n >= -55;\nloop invariant n <= 55;\nloop invariant n >= -56;\nloop invariant n <= 56;\nloop invariant n >= -57;\nloop invariant n <= 57;\nloop invariant n >= -58;\nloop invariant n <= 58;\nloop invariant n >= -59;\nloop invariant n <= 59;\nloop invariant n >= -60;\nloop invariant n <= 60;\nloop invariant n >= -61;\nloop invariant n <= 61;\nloop invariant n >= -62;\nloop invariant n <= 62;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - i, where i is the number of iterations;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n <= x <= 2147483647;\nloop invariant x - n >= 0;\nloop invariant n <= 0 ==> x == 0;\nloop invariant x == 0 ==> n <= 0;\nloop invariant n < 0 ==> x == 0;\nloop invariant x == 0 ==> n < 0;\nloop invariant n > 0 ==> x > 0;\nloop invariant x > 0 ==> n > 0;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= n <= x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant ( n > 0 ) ==> ( x >= 0 );\nloop invariant ( n > 0 ) ==> ( x <= n );\nloop invariant ( n > 0 ) ==> ( n >= 0 );\nloop invariant ( n > 0 ) ==> ( n <= 0 );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v1 <= n;\nloop invariant 0 <= v2 <= n;\nloop invariant 0 <= v3 <= n;\nloop invariant 0 <= x <= n;\nloop invariant x = n - v1 - v2 - v3;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant n >= x >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x == n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 65,
                "annotations": "```\n/*@\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant n <= 0;\nloop invariant n >= x;\nloop invariant n >= -1;\nloop invariant n <= 1;\nloop invariant n >= -2;\nloop invariant n <= 2;\nloop invariant n >= -3;\nloop invariant n <= 3;\nloop invariant n >= -4;\nloop invariant n <= 4;\nloop invariant n >= -5;\nloop invariant n <= 5;\nloop invariant n >= -6;\nloop invariant n <= 6;\nloop invariant n >= -7;\nloop invariant n <= 7;\nloop invariant n >= -8;\nloop invariant n <= 8;\nloop invariant n >= -9;\nloop invariant n <= 9;\nloop invariant n >= -10;\nloop invariant n <= 10;\nloop invariant n >= -11;\nloop invariant n <= 11;\nloop invariant n >= -12;\nloop invariant n <= 12;\nloop invariant n >= -13;\nloop invariant n <= 13;\nloop invariant n >= -14;\nloop invariant n <= 14;\nloop invariant n >= -15;\nloop invariant n <= 15;\nloop invariant n >= -16;\nloop invariant n <= 16;\nloop invariant n >= -17;\nloop invariant n <= 17;\nloop invariant n >= -18;\nloop invariant n <= 18;\nloop invariant n >= -19;\nloop invariant n <= 19;\nloop invariant n >= -20;\nloop invariant n <= 20;\nloop invariant n >= -21;\nloop invariant n <= 21;\nloop invariant n >= -22;\nloop invariant n <= 22;\nloop invariant n >= -23;\nloop invariant n <= 23;\nloop invariant n >= -24;\nloop invariant n <= 24;\nloop invariant n >= -25;\nloop invariant n <= 25;\nloop invariant n >= -26;\nloop invariant n <= 26;\nloop invariant n >= -27;\nloop invariant n <= 27;\nloop invariant n >= -28;\nloop invariant n <= 28;\nloop invariant n >= -29;\nloop invariant n <= 29;\nloop invariant n >= -30;\nloop invariant n <= 30;\nloop invariant n >= -31;\nloop invariant n <= 31;\nloop invariant n >= -32;\nloop invariant n <= 32;\nloop invariant n >= -33;\nloop invariant n <= 33;\nloop invariant n >= -34;\nloop invariant n <= 34;\nloop invariant n >= -35;\nloop invariant n <= 35;\nloop invariant n >= -36;\nloop invariant n <= 36;\nloop invariant n >= -37;\nloop invariant n <= 37;\nloop invariant n >= -38;\nloop invariant n <= 38;\nloop invariant n >= -39;\nloop invariant n <= 39;\nloop invariant n >= -40;\nloop invariant n <= 40;\nloop invariant n >= -41;\nloop invariant n <= 41;\nloop invariant n >= -42;\nloop invariant n <= 42;\nloop invariant n >= -43;\nloop invariant n <= 43;\nloop invariant n >= -44;\nloop invariant n <= 44;\nloop invariant n >= -45;\nloop invariant n <= 45;\nloop invariant n >= -46;\nloop invariant n <= 46;\nloop invariant n >= -47;\nloop invariant n <= 47;\nloop invariant n >= -48;\nloop invariant n <= 48;\nloop invariant n >= -49;\nloop invariant n <= 49;\nloop invariant n >= -50;\nloop invariant n <= 50;\nloop invariant n >= -51;\nloop invariant n <= 51;\nloop invariant n >= -52;\nloop invariant n <= 52;\nloop invariant n >= -53;\nloop invariant n <= 53;\nloop invariant n >= -54;\nloop invariant n <= 54;\nloop invariant n >= -55;\nloop invariant n <= 55;\nloop invariant n >= -56;\nloop invariant n <= 56;\nloop invariant n >= -57;\nloop invariant n <= 57;\nloop invariant n >= -58;\nloop invariant n <= 58;\nloop invariant n >= -59;\nloop invariant n <= 59;\nloop invariant n >= -60;\nloop invariant n <= 60;\nloop invariant n >= -61;\nloop invariant n <= 61;\nloop invariant n >= -62;\nloop invariant n <= 62;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n >= 0 is preserved but not established.\nloop invariant n <= x is partially proven to be inductive.\nloop invariant n <= 0 is preserved but not established.\nloop invariant n >= x is partially proven to be inductive.\nloop invariant n >= -1 is partially proven to be inductive.\nloop invariant n <= 1 is partially proven to be inductive.\nloop invariant n >= -2 is partially proven to be inductive.\nloop invariant n <= 2 is partially proven to be inductive.\nloop invariant n >= -3 is partially proven to be inductive.\nloop invariant n <= 3 is partially proven to be inductive.\nloop invariant n >= -4 is partially proven to be inductive.\nloop invariant n <= 4 is partially proven to be inductive.\nloop invariant n >= -5 is partially proven to be inductive.\nloop invariant n <= 5 is partially proven to be inductive.\nloop invariant n >= -6 is partially proven to be inductive.\nloop invariant n <= 6 is partially proven to be inductive.\nloop invariant n >= -7 is partially proven to be inductive.\nloop invariant n <= 7 is partially proven to be inductive.\nloop invariant n >= -8 is partially proven to be inductive.\nloop invariant n <= 8 is partially proven to be inductive.\nloop invariant n >= -9 is partially proven to be inductive.\nloop invariant n <= 9 is partially proven to be inductive.\nloop invariant n >= -10 is partially proven to be inductive.\nloop invariant n <= 10 is partially proven to be inductive.\nloop invariant n >= -11 is partially proven to be inductive.\nloop invariant n <= 11 is partially proven to be inductive.\nloop invariant n >= -12 is partially proven to be inductive.\nloop invariant n <= 12 is partially proven to be inductive.\nloop invariant n >= -13 is partially proven to be inductive.\nloop invariant n <= 13 is partially proven to be inductive.\nloop invariant n >= -14 is partially proven to be inductive.\nloop invariant n <= 14 is partially proven to be inductive.\nloop invariant n >= -15 is partially proven to be inductive.\nloop invariant n <= 15 is partially proven to be inductive.\nloop invariant n >= -16 is partially proven to be inductive.\nloop invariant n <= 16 is partially proven to be inductive.\nloop invariant n >= -17 is partially proven to be inductive.\nloop invariant n <= 17 is partially proven to be inductive.\nloop invariant n >= -18 is partially proven to be inductive.\nloop invariant n <= 18 is partially proven to be inductive.\nloop invariant n >= -19 is partially proven to be inductive.\nloop invariant n <= 19 is partially proven to be inductive.\nloop invariant n >= -20 is partially proven to be inductive.\nloop invariant n <= 20 is partially proven to be inductive.\nloop invariant n >= -21 is partially proven to be inductive.\nloop invariant n <= 21 is partially proven to be inductive.\nloop invariant n >= -22 is partially proven to be inductive.\nloop invariant n <= 22 is partially proven to be inductive.\nloop invariant n >= -23 is partially proven to be inductive.\nloop invariant n <= 23 is partially proven to be inductive.\nloop invariant n >= -24 is partially proven to be inductive.\nloop invariant n <= 24 is partially proven to be inductive.\nloop invariant n >= -25 is partially proven to be inductive.\nloop invariant n <= 25 is partially proven to be inductive.\nloop invariant n >= -26 is partially proven to be inductive.\nloop invariant n <= 26 is partially proven to be inductive.\nloop invariant n >= -27 is partially proven to be inductive.\nloop invariant n <= 27 is partially proven to be inductive.\nloop invariant n >= -28 is partially proven to be inductive.\nloop invariant n <= 28 is partially proven to be inductive.\nloop invariant n >= -29 is partially proven to be inductive.\nloop invariant n <= 29 is partially proven to be inductive.\nloop invariant n >= -30 is partially proven to be inductive.\nloop invariant n <= 30 is partially proven to be inductive.\nloop invariant n >= -31 is partially proven to be inductive.\nloop invariant n <= 31 is partially proven to be inductive.\nloop invariant n >= -32 is partially proven to be inductive.\nloop invariant n <= 32 is partially proven to be inductive.\nloop invariant n >= -33 is partially proven to be inductive.\nloop invariant n <= 33 is partially proven to be inductive.\nloop invariant n >= -34 is partially proven to be inductive.\nloop invariant n <= 34 is partially proven to be inductive.\nloop invariant n >= -35 is partially proven to be inductive.\nloop invariant n <= 35 is partially proven to be inductive.\nloop invariant n >= -36 is partially proven to be inductive.\nloop invariant n <= 36 is partially proven to be inductive.\nloop invariant n >= -37 is partially proven to be inductive.\nloop invariant n <= 37 is partially proven to be inductive.\nloop invariant n >= -38 is partially proven to be inductive.\nloop invariant n <= 38 is partially proven to be inductive.\nloop invariant n >= -39 is partially proven to be inductive.\nloop invariant n <= 39 is partially proven to be inductive.\nloop invariant n >= -40 is partially proven to be inductive.\nloop invariant n <= 40 is partially proven to be inductive.\nloop invariant n >= -41 is partially proven to be inductive.\nloop invariant n <= 41 is partially proven to be inductive.\nloop invariant n >= -42 is partially proven to be inductive.\nloop invariant n <= 42 is partially proven to be inductive.\nloop invariant n >= -43 is partially proven to be inductive.\nloop invariant n <= 43 is partially proven to be inductive.\nloop invariant n >= -44 is partially proven to be inductive.\nloop invariant n <= 44 is partially proven to be inductive.\nloop invariant n >= -45 is partially proven to be inductive.\nloop invariant n <= 45 is partially proven to be inductive.\nloop invariant n >= -46 is partially proven to be inductive.\nloop invariant n <= 46 is partially proven to be inductive.\nloop invariant n >= -47 is partially proven to be inductive.\nloop invariant n <= 47 is partially proven to be inductive.\nloop invariant n >= -48 is partially proven to be inductive.\nloop invariant n <= 48 is partially proven to be inductive.\nloop invariant n >= -49 is partially proven to be inductive.\nloop invariant n <= 49 is partially proven to be inductive.\nloop invariant n >= -50 is partially proven to be inductive.\nloop invariant n <= 50 is partially proven to be inductive.\nloop invariant n >= -51 is partially proven to be inductive.\nloop invariant n <= 51 is partially proven to be inductive.\nloop invariant n >= -52 is partially proven to be inductive.\nloop invariant n <= 52 is partially proven to be inductive.\nloop invariant n >= -53 is partially proven to be inductive.\nloop invariant n <= 53 is partially proven to be inductive.\nloop invariant n >= -54 is partially proven to be inductive.\nloop invariant n <= 54 is partially proven to be inductive.\nloop invariant n >= -55 is partially proven to be inductive.\nloop invariant n <= 55 is partially proven to be inductive.\nloop invariant n >= -56 is partially proven to be inductive.\nloop invariant n <= 56 is partially proven to be inductive.\nloop invariant n >= -57 is partially proven to be inductive.\nloop invariant n <= 57 is partially proven to be inductive.\nloop invariant n >= -58 is partially proven to be inductive.\nloop invariant n <= 58 is partially proven to be inductive.\nloop invariant n >= -59 is partially proven to be inductive.\nloop invariant n <= 59 is partially proven to be inductive.\nloop invariant n >= -60 is partially proven to be inductive.\nloop invariant n <= 60 is partially proven to be inductive.\nloop invariant n >= -61 is partially proven to be inductive.\nloop invariant n <= 61 is partially proven to be inductive.\nloop invariant n >= -62 is partially proven to be inductive.\nloop invariant n <= 62 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\nloop invariant i4: n >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - i, where i is the number of iterations;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ','",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= n <= x <= 2147483647;\nloop invariant x - n >= 0;\nloop invariant n <= 0 ==> x == 0;\nloop invariant x == 0 ==> n <= 0;\nloop invariant n < 0 ==> x == 0;\nloop invariant x == 0 ==> n < 0;\nloop invariant n > 0 ==> x > 0;\nloop invariant x > 0 ==> n > 0;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= n <= x <= 2147483647 is neither established nor preserved.\nloop invariant x - n >= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> n <= 0 is partially proven to be inductive.\nloop invariant n < 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> n < 0 is partially proven to be inductive.\nloop invariant n > 0 ==> x > 0 is partially proven to be inductive.\nloop invariant x > 0 ==> n > 0 is partially proven to be inductive.\nloop invariant n == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> n == 0 is partially proven to be inductive.\nloop invariant n >= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant x >= 0 ==> n >= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> x <= 0 is partially proven to be inductive.\nloop invariant x <= 0 ==> n <= 0 is partially proven to be inductive.\nloop invariant n >= -2147483647 ==> x >= -2147483647 is partially proven to be inductive.\nloop invariant x >= -2147483647 ==> n >= -2147483647 is partially proven to be inductive.\nloop invariant n <= 2147483647 ==> x <= 2147483647 is partially proven to be inductive.\nloop invariant x <= 2147483647 ==> n <= 2147483647 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\n\n\n\n\nloop invariant i8: x > 0 ==> n > 0;\nloop invariant i9: n == 0 ==> x == 0;\n\nloop invariant i11: n >= 0 ==> x >= 0;\nloop invariant i12: x >= 0 ==> n >= 0;\nloop invariant i13: n <= 0 ==> x <= 0;\n\nloop invariant i15: n >= -2147483647 ==> x >= -2147483647;\nloop invariant i16: x >= -2147483647 ==> n >= -2147483647;\nloop invariant i17: n <= 2147483647 ==> x <= 2147483647;\nloop invariant i18: x <= 2147483647 ==> n <= 2147483647;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= n <= x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n is neither established nor preserved.\nloop invariant 0 <= n <= x is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n <= x is partially proven to be inductive.\nloop invariant x > 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\nloop invariant i4: x <= n;\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == n is established but not preserved.\nloop invariant x >= 0 is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( n > 0 ) ==> ( x >= 0 );\nloop invariant ( n > 0 ) ==> ( x <= n );\nloop invariant ( n > 0 ) ==> ( n >= 0 );\nloop invariant ( n > 0 ) ==> ( n <= 0 );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( n > 0 ) ==> ( x >= 0 ) is partially proven to be inductive.\nloop invariant ( n > 0 ) ==> ( x <= n ) is partially proven to be inductive.\nloop invariant ( n > 0 ) ==> ( n >= 0 ) is partially proven to be inductive.\nloop invariant ( n > 0 ) ==> ( n <= 0 ) is preserved but not established.\nAssertion n < 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\nloop invariant i1: ( n > 0 ) ==> ( x >= 0 );\nloop invariant i2: ( n > 0 ) ==> ( x <= n );\nloop invariant i3: ( n > 0 ) ==> ( n >= 0 );\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= v1 <= n;\nloop invariant 0 <= v2 <= n;\nloop invariant 0 <= v3 <= n;\nloop invariant 0 <= x <= n;\nloop invariant x = n - v1 - v2 - v3;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\n\n\n\n\nloop invariant i8: x <= n;\n\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant n >= x >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n >= x >= 0 is preserved but not established.\nloop invariant v1 >= 0 is preserved but not established.\nloop invariant v2 >= 0 is preserved but not established.\nloop invariant v3 >= 0 is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant v1 <= n is preserved but not established.\nloop invariant v2 <= n is preserved but not established.\nloop invariant v3 <= n is preserved but not established.\nloop invariant v1 >= v2 is preserved but not established.\nloop invariant v2 >= v3 is preserved but not established.\nloop invariant v1 <= v3 is preserved but not established.\nloop invariant v1 == (v2 + v3) is preserved but not established.\nloop invariant v2 == (v1 - v3) is partially proven to be inductive.\nloop invariant v3 == (v1 - v2) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: x <= n;\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x == n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x == n is established but not preserved.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\nloop invariant i4: x <= n;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 149: unexpected token ','",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\nloop invariant i1: 1 <= n;\nloop invariant i2: 0 <= x <= n;\nloop invariant i3: x <= n;\nloop invariant i4: n >= 0;\nloop invariant i5: n <= x;\nloop invariant i6: n <= 0;\nloop invariant i7: n >= x;\nloop invariant i8: n >= -1;\nloop invariant i9: n <= 1;\nloop invariant i10: n >= -2;\nloop invariant i11: n <= 2;\nloop invariant i12: n >= -3;\nloop invariant i13: n <= 3;\nloop invariant i14: n >= -4;\nloop invariant i15: n <= 4;\nloop invariant i16: n >= -5;\nloop invariant i17: n <= 5;\nloop invariant i18: n >= -6;\nloop invariant i19: n <= 6;\nloop invariant i20: n >= -7;\nloop invariant i21: n <= 7;\nloop invariant i22: n >= -8;\nloop invariant i23: n <= 8;\nloop invariant i24: n >= -9;\nloop invariant i25: n <= 9;\nloop invariant i26: n >= -10;\nloop invariant i27: n <= 10;\nloop invariant i28: n >= -11;\nloop invariant i29: n <= 11;\nloop invariant i30: n >= -12;\nloop invariant i31: n <= 12;\nloop invariant i32: n >= -13;\nloop invariant i33: n <= 13;\nloop invariant i34: n >= -14;\nloop invariant i35: n <= 14;\nloop invariant i36: n >= -15;\nloop invariant i37: n <= 15;\nloop invariant i38: n >= -16;\nloop invariant i39: n <= 16;\nloop invariant i40: n >= -17;\nloop invariant i41: n <= 17;\nloop invariant i42: n >= -18;\nloop invariant i43: n <= 18;\nloop invariant i44: n >= -19;\nloop invariant i45: n <= 19;\nloop invariant i46: n >= -20;\nloop invariant i47: n <= 20;\nloop invariant i48: n >= -21;\nloop invariant i49: n <= 21;\nloop invariant i50: n >= -22;\nloop invariant i51: n <= 22;\nloop invariant i52: n >= -23;\nloop invariant i53: n <= 23;\nloop invariant i54: n >= -24;\nloop invariant i55: n <= 24;\nloop invariant i56: n >= -25;\nloop invariant i57: n <= 25;\nloop invariant i58: n >= -26;\nloop invariant i59: n <= 26;\nloop invariant i60: n >= -27;\nloop invariant i61: n <= 27;\nloop invariant i62: n >= -28;\nloop invariant i63: n <= 28;\nloop invariant i64: n >= -29;\nloop invariant i65: n <= 29;\nloop invariant i66: n >= -30;\nloop invariant i67: n <= 30;\nloop invariant i68: n >= -31;\nloop invariant i69: n <= 31;\nloop invariant i70: n >= -32;\nloop invariant i71: n <= 32;\nloop invariant i72: n >= -33;\nloop invariant i73: n <= 33;\nloop invariant i74: n >= -34;\nloop invariant i75: n <= 34;\nloop invariant i76: n >= -35;\nloop invariant i77: n <= 35;\nloop invariant i78: n >= -36;\nloop invariant i79: n <= 36;\nloop invariant i80: n >= -37;\nloop invariant i81: n <= 37;\nloop invariant i82: n >= -38;\nloop invariant i83: n <= 38;\nloop invariant i84: n >= -39;\nloop invariant i85: n <= 39;\nloop invariant i86: n >= -40;\nloop invariant i87: n <= 40;\nloop invariant i88: n >= -41;\nloop invariant i89: n <= 41;\nloop invariant i90: n >= -42;\nloop invariant i91: n <= 42;\nloop invariant i92: n >= -43;\nloop invariant i93: n <= 43;\nloop invariant i94: n >= -44;\nloop invariant i95: n <= 44;\nloop invariant i96: n >= -45;\nloop invariant i97: n <= 45;\nloop invariant i98: n >= -46;\nloop invariant i99: n <= 46;\nloop invariant i100: n >= -47;\nloop invariant i101: n <= 47;\nloop invariant i102: n >= -48;\nloop invariant i103: n <= 48;\nloop invariant i104: n >= -49;\nloop invariant i105: n <= 49;\nloop invariant i106: n >= -50;\nloop invariant i107: n <= 50;\nloop invariant i108: n >= -51;\nloop invariant i109: n <= 51;\nloop invariant i110: n >= -52;\nloop invariant i111: n <= 52;\nloop invariant i112: n >= -53;\nloop invariant i113: n <= 53;\nloop invariant i114: n >= -54;\nloop invariant i115: n <= 54;\nloop invariant i116: n >= -55;\nloop invariant i117: n <= 55;\nloop invariant i118: n >= -56;\nloop invariant i119: n <= 56;\nloop invariant i120: n >= -57;\nloop invariant i121: n <= 57;\nloop invariant i122: n >= -58;\nloop invariant i123: n <= 58;\nloop invariant i124: n >= -59;\nloop invariant i125: n <= 59;\nloop invariant i126: n >= -60;\nloop invariant i127: n <= 60;\nloop invariant i128: n >= -61;\nloop invariant i129: n <= 61;\nloop invariant i130: n >= -62;\nloop invariant i131: n <= 62;\nloop invariant i132: x == n - i, where i is the number of iterations;\nloop invariant i133: x >= 0;\nloop invariant i134: x == n - y;\nloop invariant i135: 1 <= n <= x <= 2147483647;\nloop invariant i136: x - n >= 0;\nloop invariant i137: n <= 0 ==> x == 0;\nloop invariant i138: x == 0 ==> n <= 0;\nloop invariant i139: n < 0 ==> x == 0;\nloop invariant i140: x == 0 ==> n < 0;\nloop invariant i141: n > 0 ==> x > 0;\nloop invariant i142: x > 0 ==> n > 0;\nloop invariant i143: n == 0 ==> x == 0;\nloop invariant i144: x == 0 ==> n == 0;\nloop invariant i145: n >= 0 ==> x >= 0;\nloop invariant i146: x >= 0 ==> n >= 0;\nloop invariant i147: n <= 0 ==> x <= 0;\nloop invariant i148: x <= 0 ==> n <= 0;\nloop invariant i149: n >= -2147483647 ==> x >= -2147483647;\nloop invariant i150: x >= -2147483647 ==> n >= -2147483647;\nloop invariant i151: n <= 2147483647 ==> x <= 2147483647;\nloop invariant i152: x <= 2147483647 ==> n <= 2147483647;\nloop invariant i153: 1 <= x <= n;\nloop invariant i154: 0 <= n <= x;\nloop invariant i155: x > 0;\nloop invariant i156: x == n;\nloop invariant i157: ( n > 0 ) ==> ( x >= 0 );\nloop invariant i158: ( n > 0 ) ==> ( x <= n );\nloop invariant i159: ( n > 0 ) ==> ( n >= 0 );\nloop invariant i160: ( n > 0 ) ==> ( n <= 0 );\nloop invariant i161: 0 <= v1 <= n;\nloop invariant i162: 0 <= v2 <= n;\nloop invariant i163: 0 <= v3 <= n;\nloop invariant i164: x = n - v1 - v2 - v3;\nloop invariant i165: v1 + v2 + v3 = n;\nloop invariant i166: v1 >= 0;\nloop invariant i167: v1 <= n;\nloop invariant i168: v2 >= 0;\nloop invariant i169: v2 <= n;\nloop invariant i170: v3 >= 0;\nloop invariant i171: v3 <= n;\nloop invariant i172: x - v1 - v2 - v3 = 0;\nloop invariant i173: n >= x >= 0;\nloop invariant i174: v1 >= v2;\nloop invariant i175: v2 >= v3;\nloop invariant i176: v1 <= v3;\nloop invariant i177: v1 == (v2 + v3);\nloop invariant i178: v2 == (v1 - v3);\nloop invariant i179: v3 == (v1 - v2);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 71,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n\n\n\nloop invariant i7: n >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i142: x > 0 ==> n > 0;\nloop invariant i143: n == 0 ==> x == 0;\n\nloop invariant i145: n >= 0 ==> x >= 0;\nloop invariant i146: x >= 0 ==> n >= 0;\nloop invariant i147: n <= 0 ==> x <= 0;\n\nloop invariant i149: n >= -2147483647 ==> x >= -2147483647;\nloop invariant i150: x >= -2147483647 ==> n >= -2147483647;\nloop invariant i151: n <= 2147483647 ==> x <= 2147483647;\nloop invariant i152: x <= 2147483647 ==> n <= 2147483647;\n\n\n\n\nloop invariant i157: ( n > 0 ) ==> ( x >= 0 );\nloop invariant i158: ( n > 0 ) ==> ( x <= n );\nloop invariant i159: ( n > 0 ) ==> ( n >= 0 );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/code2inv/33.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c"
        ],
        "skipped": [],
        "total": 14,
        "success_count": 2,
        "failure_count": 12,
        "success_rate": 0.14285714285714285
    }
}