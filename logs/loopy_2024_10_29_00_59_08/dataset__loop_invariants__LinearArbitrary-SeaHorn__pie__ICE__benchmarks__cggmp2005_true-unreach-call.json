{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 0 <= i <= 10;\nloop invariant j <= 10 - i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant j >= i;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= -5;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == -1 + 10 - i/2;\nloop invariant i <= j;\n*/\n```",
            "```\n/*@\nloop invariant i <= 11;\nloop invariant j >= -9;\nloop invariant i >= j - 1;\nloop invariant i % 2 == 0;\nloop invariant i >= 1;\nloop invariant i <= 10;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant j == 10 - i / 2;\nloop invariant i == 10 - j / 2;\nloop invariant i % 2 == 0 ==> i <= j;\nloop invariant i % 2 == 0 ==> i >= j - 1;\nloop invariant i == 10 - j / 2 ==> i <= j;\nloop invariant i == 10 - j / 2 ==> i >= j - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= j <= 10;\nloop invariant i >= 1;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant j == -1 + 10;\nloop invariant j == 6;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i <= 11;\nloop invariant i <= j + 1;\nloop invariant i <= (j + 1) * 2 - 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= 2 * j - 1;\nloop invariant i >= j;\nloop invariant (j <= 10 ==> i <= 11);\nloop invariant (i <= 11 ==> j >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 11;\nloop invariant 0 <= j <= 9;\nloop invariant i <= j;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant i >= 1;\nloop invariant j >= -1;\nloop invariant (i >= 1) ==> (j >= 6);\nloop invariant (i < 11) ==> (j >= 1);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i <= 11;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= j;\nloop invariant i - j >= 1;\nloop invariant i - j <= 10;\nloop invariant i + j == 11;\nloop invariant i * j == 10;\nloop invariant i / j == 1;\nloop invariant i % j == 1;\nloop invariant i * j % 10 == 10;\nloop invariant i * j % 11 == 0;\nloop invariant i * j % 2 == 0;\nloop invariant i * j % 3 == 0;\nloop invariant i * j % 4 == 0;\nloop invariant i * j % 5 == 0;\nloop invariant i * j % 6 == 0;\nloop invariant i * j % 7 == 0;\nloop invariant i * j % 8 == 0;\nloop invariant i * j % 9 == 0;\nloop invariant i * j % 10 == 0;\nloop invariant i * j % 11 == 0;\nloop invariant i * j % 12 == 0;\nloop invariant i * j % 13 == 0;\nloop invariant i * j % 14 == 0;\nloop invariant i * j % 15 == 0;\nloop invariant i * j % 16 == 0;\nloop invariant i * j % 17 == 0;\nloop invariant i * j % 18 == 0;\nloop invariant i * j % 19 == 0;\nloop invariant i * j % 20 == 0;\nloop invariant i * j % 21 == 0;\nloop invariant i * j % 22 == 0;\nloop invariant i * j % 23 == 0;\nloop invariant i * j % 24 == 0;\nloop invariant i * j % 25 == 0;\nloop invariant i * j % 26 == 0;\nloop invariant i * j % 27 == 0;\nloop invariant i * j % 28 == 0;\nloop invariant i * j % 29 == 0;\nloop invariant i * j % 30 == 0;\nloop invariant i * j % 31 == 0;\nloop invariant i * j % 32 == 0;\nloop invariant i * j % 33 == 0;\nloop invariant i * j % 34 == 0;\nloop invariant i * j % 35 == 0;\nloop invariant i * j % 36 == 0;\nloop invariant i * j % 37 == 0;\nloop invariant i * j % 38 == 0;\nloop invariant i * j % 39 == 0;\nloop invariant i * j % 40 == 0;\nloop invariant i * j % 41 == 0;\nloop invariant i * j % 42 == 0;\nloop invariant i * j % 43 == 0;\nloop invariant i * j % 44 == 0;\nloop invariant i * j % 45 == 0;\nloop invariant i * j % 46 == 0;\nloop invariant i * j % 47 == 0;\nloop invariant i * j % 48 == 0;\nloop invariant i * j % 49 == 0;\nloop invariant i * j % 50 == 0;\nloop invariant i * j % 51 == 0;\nloop invariant i * j % 52 == 0;\nloop invariant i * j % 53 == 0;\nloop invariant i * j % 54 == 0;\nloop invariant i * j % 55 == 0;\nloop invariant i * j % 56 == 0;\nloop invariant i * j % 57 == 0;\nloop invariant i * j % 58 == 0;\nloop invariant i * j % 59 == 0;\nloop invariant i * j % 60 == 0;\nloop invariant i * j % 61 == 0;\nloop invariant i * j % 62 == 0;\nloop invariant i * j % 63 == 0;\nloop invariant i * j % 64 == 0;\nloop invariant i * j % 65 == 0;\nloop invariant i * j % 66 == 0;\nloop invariant i * j % 67 == 0;\nloop invariant i * j % 68 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= j;\nloop invariant j - i >= 0;\nloop invariant j - i <= 9;\nloop invariant j - i == 6;\nloop invariant i == 1;\nloop invariant j == 6;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 10 <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - i;\nloop invariant i <= j;\nloop invariant j <= 10;\nloop invariant i >= 1;\nloop invariant j >= 0;\nloop invariant j >= -1 + j;\nloop invariant j + 1 <= 10;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant j == 10 - i;\nloop invariant i % 2 == 1;\nloop invariant (i - 1) / 2 == j;\nloop invariant (i * (i + 1) / 2) <= j;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j >= 6;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant j >= i;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant j >= 10;\nloop invariant j <= i + 8;\nloop invariant i <= 18;\nloop invariant j == 10 - i + 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 0 <= i <= 10;\nloop invariant j <= 10 - i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant j <= 10 - i is preserved but not established.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant j >= i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 11 is established but not preserved.\nloop invariant j >= i is established but not preserved.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= -5;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == -1 + 10 - i/2;\nloop invariant i <= j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant j >= -5 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == -1 + 10 - i/2 is preserved but not established.\nloop invariant i <= j is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i >= 1;\nloop invariant i2: i <= 11;\nloop invariant i3: j >= -5;\nloop invariant i4: j <= 10;\nloop invariant i5: i % 2 == 1;\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant i <= 11;\nloop invariant j >= -9;\nloop invariant i >= j - 1;\nloop invariant i % 2 == 0;\nloop invariant i >= 1;\nloop invariant i <= 10;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant j == 10 - i / 2;\nloop invariant i == 10 - j / 2;\nloop invariant i % 2 == 0 ==> i <= j;\nloop invariant i % 2 == 0 ==> i >= j - 1;\nloop invariant i == 10 - j / 2 ==> i <= j;\nloop invariant i == 10 - j / 2 ==> i >= j - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i <= 11 is partially proven to be inductive.\nloop invariant j >= -9 is partially proven to be inductive.\nloop invariant i >= j - 1 is preserved but not established.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant j <= 9 is partially proven to be inductive.\nloop invariant j == 10 - i / 2 is partially proven to be inductive.\nloop invariant i == 10 - j / 2 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i <= j is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i >= j - 1 is partially proven to be inductive.\nloop invariant i == 10 - j / 2 ==> i <= j is partially proven to be inductive.\nloop invariant i == 10 - j / 2 ==> i >= j - 1 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i <= 11;\nloop invariant i2: j >= -9;\n\n\nloop invariant i5: i >= 1;\nloop invariant i6: i <= 10;\nloop invariant i7: j >= 1;\n\nloop invariant i9: j == 10 - i / 2;\n\n\nloop invariant i12: i % 2 == 0 ==> i >= j - 1;\nloop invariant i13: i == 10 - j / 2 ==> i <= j;\nloop invariant i14: i == 10 - j / 2 ==> i >= j - 1;\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= j <= 10;\nloop invariant i >= 1;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant j == -1 + 10;\nloop invariant j == 6;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant j == -1 + 10 is preserved but not established.\nloop invariant j == 6 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: i % 2 == 1;\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i <= 11;\nloop invariant i <= j + 1;\nloop invariant i <= (j + 1) * 2 - 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= 2 * j - 1;\nloop invariant i >= j;\nloop invariant (j <= 10 ==> i <= 11);\nloop invariant (i <= 11 ==> j >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant i <= (j + 1) * 2 - 1 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant i <= 2 * j - 1 is partially proven to be inductive.\nloop invariant i >= j is preserved but not established.\nloop invariant (j <= 10 ==> i <= 11) is partially proven to be inductive.\nloop invariant (i <= 11 ==> j >= 0) is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: i <= 11;\n\n\nloop invariant i5: i % 2 == 1;\n\n\n\nloop invariant i9: (j <= 10 ==> i <= 11);\nloop invariant i10: (i <= 11 ==> j >= 0);\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= j is established but not preserved.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is established but not preserved.\nloop invariant i < j is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\nloop invariant i2: i % 2 == 1;\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i;\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 11;\nloop invariant 0 <= j <= 9;\nloop invariant i <= j;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant i >= 1;\nloop invariant j >= -1;\nloop invariant (i >= 1) ==> (j >= 6);\nloop invariant (i < 11) ==> (j >= 1);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 11 is partially proven to be inductive.\nloop invariant 0 <= j <= 9 is preserved but not established.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= -1 is partially proven to be inductive.\nloop invariant (i >= 1) ==> (j >= 6) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 1) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 0) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= -1) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 6) is partially proven to be inductive.\nloop invariant (i < 11) ==> (i <= j) is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\nloop invariant i4: j >= 0;\nloop invariant i5: i >= 0;\nloop invariant i6: i >= 1;\nloop invariant i7: j >= -1;\n\n\nloop invariant i10: (i < 11) ==> (j >= 0);\nloop invariant i11: (i < 11) ==> (j >= -1);\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 76,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i <= 11;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= j;\nloop invariant i - j >= 1;\nloop invariant i - j <= 10;\nloop invariant i + j == 11;\nloop invariant i * j == 10;\nloop invariant i / j == 1;\nloop invariant i % j == 1;\nloop invariant i * j % 10 == 10;\nloop invariant i * j % 11 == 0;\nloop invariant i * j % 2 == 0;\nloop invariant i * j % 3 == 0;\nloop invariant i * j % 4 == 0;\nloop invariant i * j % 5 == 0;\nloop invariant i * j % 6 == 0;\nloop invariant i * j % 7 == 0;\nloop invariant i * j % 8 == 0;\nloop invariant i * j % 9 == 0;\nloop invariant i * j % 10 == 0;\nloop invariant i * j % 11 == 0;\nloop invariant i * j % 12 == 0;\nloop invariant i * j % 13 == 0;\nloop invariant i * j % 14 == 0;\nloop invariant i * j % 15 == 0;\nloop invariant i * j % 16 == 0;\nloop invariant i * j % 17 == 0;\nloop invariant i * j % 18 == 0;\nloop invariant i * j % 19 == 0;\nloop invariant i * j % 20 == 0;\nloop invariant i * j % 21 == 0;\nloop invariant i * j % 22 == 0;\nloop invariant i * j % 23 == 0;\nloop invariant i * j % 24 == 0;\nloop invariant i * j % 25 == 0;\nloop invariant i * j % 26 == 0;\nloop invariant i * j % 27 == 0;\nloop invariant i * j % 28 == 0;\nloop invariant i * j % 29 == 0;\nloop invariant i * j % 30 == 0;\nloop invariant i * j % 31 == 0;\nloop invariant i * j % 32 == 0;\nloop invariant i * j % 33 == 0;\nloop invariant i * j % 34 == 0;\nloop invariant i * j % 35 == 0;\nloop invariant i * j % 36 == 0;\nloop invariant i * j % 37 == 0;\nloop invariant i * j % 38 == 0;\nloop invariant i * j % 39 == 0;\nloop invariant i * j % 40 == 0;\nloop invariant i * j % 41 == 0;\nloop invariant i * j % 42 == 0;\nloop invariant i * j % 43 == 0;\nloop invariant i * j % 44 == 0;\nloop invariant i * j % 45 == 0;\nloop invariant i * j % 46 == 0;\nloop invariant i * j % 47 == 0;\nloop invariant i * j % 48 == 0;\nloop invariant i * j % 49 == 0;\nloop invariant i * j % 50 == 0;\nloop invariant i * j % 51 == 0;\nloop invariant i * j % 52 == 0;\nloop invariant i * j % 53 == 0;\nloop invariant i * j % 54 == 0;\nloop invariant i * j % 55 == 0;\nloop invariant i * j % 56 == 0;\nloop invariant i * j % 57 == 0;\nloop invariant i * j % 58 == 0;\nloop invariant i * j % 59 == 0;\nloop invariant i * j % 60 == 0;\nloop invariant i * j % 61 == 0;\nloop invariant i * j % 62 == 0;\nloop invariant i * j % 63 == 0;\nloop invariant i * j % 64 == 0;\nloop invariant i * j % 65 == 0;\nloop invariant i * j % 66 == 0;\nloop invariant i * j % 67 == 0;\nloop invariant i * j % 68 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant i >= j is preserved but not established.\nloop invariant i - j >= 1 is partially proven to be inductive.\nloop invariant i - j <= 10 is partially proven to be inductive.\nloop invariant i + j == 11 is partially proven to be inductive.\nloop invariant i * j == 10 is partially proven to be inductive.\nloop invariant i / j == 1 is partially proven to be inductive.\nloop invariant i % j == 1 is partially proven to be inductive.\nloop invariant i * j % 10 == 10 is partially proven to be inductive.\nloop invariant i * j % 11 == 0 is partially proven to be inductive.\nloop invariant i * j % 2 == 0 is partially proven to be inductive.\nloop invariant i * j % 3 == 0 is partially proven to be inductive.\nloop invariant i * j % 4 == 0 is partially proven to be inductive.\nloop invariant i * j % 5 == 0 is partially proven to be inductive.\nloop invariant i * j % 6 == 0 is partially proven to be inductive.\nloop invariant i * j % 7 == 0 is partially proven to be inductive.\nloop invariant i * j % 8 == 0 is partially proven to be inductive.\nloop invariant i * j % 9 == 0 is partially proven to be inductive.\nloop invariant i * j % 10 == 0 is partially proven to be inductive.\nloop invariant i * j % 12 == 0 is partially proven to be inductive.\nloop invariant i * j % 13 == 0 is partially proven to be inductive.\nloop invariant i * j % 14 == 0 is partially proven to be inductive.\nloop invariant i * j % 15 == 0 is partially proven to be inductive.\nloop invariant i * j % 16 == 0 is partially proven to be inductive.\nloop invariant i * j % 17 == 0 is partially proven to be inductive.\nloop invariant i * j % 18 == 0 is partially proven to be inductive.\nloop invariant i * j % 19 == 0 is partially proven to be inductive.\nloop invariant i * j % 20 == 0 is partially proven to be inductive.\nloop invariant i * j % 21 == 0 is partially proven to be inductive.\nloop invariant i * j % 22 == 0 is partially proven to be inductive.\nloop invariant i * j % 23 == 0 is partially proven to be inductive.\nloop invariant i * j % 24 == 0 is partially proven to be inductive.\nloop invariant i * j % 25 == 0 is partially proven to be inductive.\nloop invariant i * j % 26 == 0 is partially proven to be inductive.\nloop invariant i * j % 27 == 0 is partially proven to be inductive.\nloop invariant i * j % 28 == 0 is partially proven to be inductive.\nloop invariant i * j % 29 == 0 is partially proven to be inductive.\nloop invariant i * j % 30 == 0 is partially proven to be inductive.\nloop invariant i * j % 31 == 0 is partially proven to be inductive.\nloop invariant i * j % 32 == 0 is partially proven to be inductive.\nloop invariant i * j % 33 == 0 is partially proven to be inductive.\nloop invariant i * j % 34 == 0 is partially proven to be inductive.\nloop invariant i * j % 35 == 0 is partially proven to be inductive.\nloop invariant i * j % 36 == 0 is partially proven to be inductive.\nloop invariant i * j % 37 == 0 is partially proven to be inductive.\nloop invariant i * j % 38 == 0 is partially proven to be inductive.\nloop invariant i * j % 39 == 0 is partially proven to be inductive.\nloop invariant i * j % 40 == 0 is partially proven to be inductive.\nloop invariant i * j % 41 == 0 is partially proven to be inductive.\nloop invariant i * j % 42 == 0 is partially proven to be inductive.\nloop invariant i * j % 43 == 0 is partially proven to be inductive.\nloop invariant i * j % 44 == 0 is partially proven to be inductive.\nloop invariant i * j % 45 == 0 is partially proven to be inductive.\nloop invariant i * j % 46 == 0 is partially proven to be inductive.\nloop invariant i * j % 47 == 0 is partially proven to be inductive.\nloop invariant i * j % 48 == 0 is partially proven to be inductive.\nloop invariant i * j % 49 == 0 is partially proven to be inductive.\nloop invariant i * j % 50 == 0 is partially proven to be inductive.\nloop invariant i * j % 51 == 0 is partially proven to be inductive.\nloop invariant i * j % 52 == 0 is partially proven to be inductive.\nloop invariant i * j % 53 == 0 is partially proven to be inductive.\nloop invariant i * j % 54 == 0 is partially proven to be inductive.\nloop invariant i * j % 55 == 0 is partially proven to be inductive.\nloop invariant i * j % 56 == 0 is partially proven to be inductive.\nloop invariant i * j % 57 == 0 is partially proven to be inductive.\nloop invariant i * j % 58 == 0 is partially proven to be inductive.\nloop invariant i * j % 59 == 0 is partially proven to be inductive.\nloop invariant i * j % 60 == 0 is partially proven to be inductive.\nloop invariant i * j % 61 == 0 is partially proven to be inductive.\nloop invariant i * j % 62 == 0 is partially proven to be inductive.\nloop invariant i * j % 63 == 0 is partially proven to be inductive.\nloop invariant i * j % 64 == 0 is partially proven to be inductive.\nloop invariant i * j % 65 == 0 is partially proven to be inductive.\nloop invariant i * j % 66 == 0 is partially proven to be inductive.\nloop invariant i * j % 67 == 0 is partially proven to be inductive.\nloop invariant i * j % 68 == 0 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: i <= 11;\nloop invariant i3: i % 2 == 1;\n\n\n\nloop invariant i7: i - j <= 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= j;\nloop invariant j - i >= 0;\nloop invariant j - i <= 9;\nloop invariant j - i == 6;\nloop invariant i == 1;\nloop invariant j == 6;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= j is partially proven to be inductive.\nloop invariant j - i >= 0 is partially proven to be inductive.\nloop invariant j - i <= 9 is partially proven to be inductive.\nloop invariant j - i == 6 is preserved but not established.\nloop invariant i == 1 is partially proven to be inductive.\nloop invariant j == 6 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\nloop invariant i3: j - i <= 9;\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 10 <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - i;\nloop invariant i <= j;\nloop invariant j <= 10;\nloop invariant i >= 1;\nloop invariant j >= 0;\nloop invariant j >= -1 + j;\nloop invariant j + 1 <= 10;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 10 <= j <= 10 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == 10 - i is preserved but not established.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant j >= -1 + j is partially proven to be inductive.\nloop invariant j + 1 <= 10 is partially proven to be inductive.\nloop invariant j + 1 >= 1 is partially proven to be inductive.\nloop invariant j + 1 >= 0 is partially proven to be inductive.\nloop invariant j + 1 >= -1 + j is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\nloop invariant i3: i % 2 == 1;\n\n\nloop invariant i6: j <= 10;\nloop invariant i7: i >= 1;\nloop invariant i8: j >= 0;\nloop invariant i9: j >= -1 + j;\n\nloop invariant i11: j + 1 >= 1;\nloop invariant i12: j + 1 >= 0;\nloop invariant i13: j + 1 >= -1 + j;\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant j == 10 - i;\nloop invariant i % 2 == 1;\nloop invariant (i - 1) / 2 == j;\nloop invariant (i * (i + 1) / 2) <= j;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j >= 6;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant j == 10 - i is preserved but not established.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant (i - 1) / 2 == j is partially proven to be inductive.\nloop invariant (i * (i + 1) / 2) <= j is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 6 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\nloop invariant i3: i % 2 == 1;\n\n\n\nloop invariant i7: i >= 1;\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant j >= i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 11 is established but not preserved.\nloop invariant j >= i is established but not preserved.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant j >= 10;\nloop invariant j <= i + 8;\nloop invariant i <= 18;\nloop invariant j == 10 - i + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 10 is partially proven to be inductive.\nloop invariant j <= i + 8 is preserved but not established.\nloop invariant i <= 18 is partially proven to be inductive.\nloop invariant j == 10 - i + 1 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i >= 1;\n\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant j <= 10 - i is preserved but not established.\nloop invariant 1 <= i <= 11 is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant j >= -5 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == -1 + 10 - i/2 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant j >= -9 is partially proven to be inductive.\nloop invariant i >= j - 1 is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant j <= 9 is partially proven to be inductive.\nloop invariant j == 10 - i / 2 is partially proven to be inductive.\nloop invariant i == 10 - j / 2 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i <= j is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i >= j - 1 is partially proven to be inductive.\nloop invariant i == 10 - j / 2 ==> i <= j is partially proven to be inductive.\nloop invariant i == 10 - j / 2 ==> i >= j - 1 is partially proven to be inductive.\nloop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant j == -1 + 10 is partially proven to be inductive.\nloop invariant j == 6 is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant i <= (j + 1) * 2 - 1 is partially proven to be inductive.\nloop invariant i <= 2 * j - 1 is partially proven to be inductive.\nloop invariant i >= j is partially proven to be inductive.\nloop invariant (j <= 10 ==> i <= 11) is partially proven to be inductive.\nloop invariant (i <= 11 ==> j >= 0) is partially proven to be inductive.\nloop invariant 0 <= i <= j is partially proven to be inductive.\nloop invariant i < j is partially proven to be inductive.\nloop invariant 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i is partially proven to be inductive.\nloop invariant 0 <= j <= 9 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= -1 is partially proven to be inductive.\nloop invariant (i >= 1) ==> (j >= 6) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 1) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 0) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= -1) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 6) is partially proven to be inductive.\nloop invariant (i < 11) ==> (i <= j) is partially proven to be inductive.\nloop invariant i - j >= 1 is partially proven to be inductive.\nloop invariant i - j <= 10 is partially proven to be inductive.\nloop invariant i + j == 11 is partially proven to be inductive.\nloop invariant i * j == 10 is partially proven to be inductive.\nloop invariant i / j == 1 is partially proven to be inductive.\nloop invariant i % j == 1 is partially proven to be inductive.\nloop invariant i * j % 10 == 10 is partially proven to be inductive.\nloop invariant i * j % 11 == 0 is partially proven to be inductive.\nloop invariant i * j % 2 == 0 is partially proven to be inductive.\nloop invariant i * j % 3 == 0 is partially proven to be inductive.\nloop invariant i * j % 4 == 0 is partially proven to be inductive.\nloop invariant i * j % 5 == 0 is partially proven to be inductive.\nloop invariant i * j % 6 == 0 is partially proven to be inductive.\nloop invariant i * j % 7 == 0 is partially proven to be inductive.\nloop invariant i * j % 8 == 0 is partially proven to be inductive.\nloop invariant i * j % 9 == 0 is partially proven to be inductive.\nloop invariant i * j % 10 == 0 is partially proven to be inductive.\nloop invariant i * j % 12 == 0 is partially proven to be inductive.\nloop invariant i * j % 13 == 0 is partially proven to be inductive.\nloop invariant i * j % 14 == 0 is partially proven to be inductive.\nloop invariant i * j % 15 == 0 is partially proven to be inductive.\nloop invariant i * j % 16 == 0 is partially proven to be inductive.\nloop invariant i * j % 17 == 0 is partially proven to be inductive.\nloop invariant i * j % 18 == 0 is partially proven to be inductive.\nloop invariant i * j % 19 == 0 is partially proven to be inductive.\nloop invariant i * j % 20 == 0 is partially proven to be inductive.\nloop invariant i * j % 21 == 0 is partially proven to be inductive.\nloop invariant i * j % 22 == 0 is partially proven to be inductive.\nloop invariant i * j % 23 == 0 is partially proven to be inductive.\nloop invariant i * j % 24 == 0 is partially proven to be inductive.\nloop invariant i * j % 25 == 0 is partially proven to be inductive.\nloop invariant i * j % 26 == 0 is partially proven to be inductive.\nloop invariant i * j % 27 == 0 is partially proven to be inductive.\nloop invariant i * j % 28 == 0 is partially proven to be inductive.\nloop invariant i * j % 29 == 0 is partially proven to be inductive.\nloop invariant i * j % 30 == 0 is partially proven to be inductive.\nloop invariant i * j % 31 == 0 is partially proven to be inductive.\nloop invariant i * j % 32 == 0 is partially proven to be inductive.\nloop invariant i * j % 33 == 0 is partially proven to be inductive.\nloop invariant i * j % 34 == 0 is partially proven to be inductive.\nloop invariant i * j % 35 == 0 is partially proven to be inductive.\nloop invariant i * j % 36 == 0 is partially proven to be inductive.\nloop invariant i * j % 37 == 0 is partially proven to be inductive.\nloop invariant i * j % 38 == 0 is partially proven to be inductive.\nloop invariant i * j % 39 == 0 is partially proven to be inductive.\nloop invariant i * j % 40 == 0 is partially proven to be inductive.\nloop invariant i * j % 41 == 0 is partially proven to be inductive.\nloop invariant i * j % 42 == 0 is partially proven to be inductive.\nloop invariant i * j % 43 == 0 is partially proven to be inductive.\nloop invariant i * j % 44 == 0 is partially proven to be inductive.\nloop invariant i * j % 45 == 0 is partially proven to be inductive.\nloop invariant i * j % 46 == 0 is partially proven to be inductive.\nloop invariant i * j % 47 == 0 is partially proven to be inductive.\nloop invariant i * j % 48 == 0 is partially proven to be inductive.\nloop invariant i * j % 49 == 0 is partially proven to be inductive.\nloop invariant i * j % 50 == 0 is partially proven to be inductive.\nloop invariant i * j % 51 == 0 is partially proven to be inductive.\nloop invariant i * j % 52 == 0 is partially proven to be inductive.\nloop invariant i * j % 53 == 0 is partially proven to be inductive.\nloop invariant i * j % 54 == 0 is partially proven to be inductive.\nloop invariant i * j % 55 == 0 is partially proven to be inductive.\nloop invariant i * j % 56 == 0 is partially proven to be inductive.\nloop invariant i * j % 57 == 0 is partially proven to be inductive.\nloop invariant i * j % 58 == 0 is partially proven to be inductive.\nloop invariant i * j % 59 == 0 is partially proven to be inductive.\nloop invariant i * j % 60 == 0 is partially proven to be inductive.\nloop invariant i * j % 61 == 0 is partially proven to be inductive.\nloop invariant i * j % 62 == 0 is partially proven to be inductive.\nloop invariant i * j % 63 == 0 is partially proven to be inductive.\nloop invariant i * j % 64 == 0 is partially proven to be inductive.\nloop invariant i * j % 65 == 0 is partially proven to be inductive.\nloop invariant i * j % 66 == 0 is partially proven to be inductive.\nloop invariant i * j % 67 == 0 is partially proven to be inductive.\nloop invariant i * j % 68 == 0 is partially proven to be inductive.\nloop invariant 1 <= i <= j is partially proven to be inductive.\nloop invariant j - i >= 0 is partially proven to be inductive.\nloop invariant j - i <= 9 is partially proven to be inductive.\nloop invariant j - i == 6 is partially proven to be inductive.\nloop invariant i == 1 is partially proven to be inductive.\nloop invariant 10 <= j <= 10 is partially proven to be inductive.\nloop invariant j == 10 - i is partially proven to be inductive.\nloop invariant j >= -1 + j is partially proven to be inductive.\nloop invariant j + 1 <= 10 is partially proven to be inductive.\nloop invariant j + 1 >= 1 is partially proven to be inductive.\nloop invariant j + 1 >= 0 is partially proven to be inductive.\nloop invariant j + 1 >= -1 + j is partially proven to be inductive.\nloop invariant (i - 1) / 2 == j is partially proven to be inductive.\nloop invariant (i * (i + 1) / 2) <= j is partially proven to be inductive.\nloop invariant j >= 6 is partially proven to be inductive.\nloop invariant j >= 10 is partially proven to be inductive.\nloop invariant j <= i + 8 is partially proven to be inductive.\nloop invariant i <= 18 is partially proven to be inductive.\nloop invariant j == 10 - i + 1 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: 0 <= i <= 10;\nloop invariant i3: j <= 10 - i;\nloop invariant i4: 1 <= i <= 11;\nloop invariant i5: j >= i;\nloop invariant i6: i >= 1;\nloop invariant i7: i <= 11;\nloop invariant i8: j >= -5;\nloop invariant i9: j <= 10;\nloop invariant i10: i % 2 == 1;\nloop invariant i11: j == -1 + 10 - i/2;\nloop invariant i12: i <= j;\nloop invariant i13: j >= -9;\nloop invariant i14: i >= j - 1;\nloop invariant i15: i % 2 == 0;\nloop invariant i16: i <= 10;\nloop invariant i17: j >= 1;\nloop invariant i18: j <= 9;\nloop invariant i19: j == 10 - i / 2;\nloop invariant i20: i == 10 - j / 2;\nloop invariant i21: i % 2 == 0 ==> i <= j;\nloop invariant i22: i % 2 == 0 ==> i >= j - 1;\nloop invariant i23: i == 10 - j / 2 ==> i <= j;\nloop invariant i24: i == 10 - j / 2 ==> i >= j - 1;\nloop invariant i25: 1 <= j <= 10;\nloop invariant i26: j % 2 == 0;\nloop invariant i27: j == -1 + 10;\nloop invariant i28: j == 6;\nloop invariant i29: i <= j + 1;\nloop invariant i30: i <= (j + 1) * 2 - 1;\nloop invariant i31: i <= 2 * j - 1;\nloop invariant i32: i >= j;\nloop invariant i33: (j <= 10 ==> i <= 11);\nloop invariant i34: (i <= 11 ==> j >= 0);\nloop invariant i35: 0 <= i <= j;\nloop invariant i36: i < j;\nloop invariant i37: 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i;\nloop invariant i38: 0 <= j <= 9;\nloop invariant i39: j >= 0;\nloop invariant i40: i >= 0;\nloop invariant i41: j >= -1;\nloop invariant i42: (i >= 1) ==> (j >= 6);\nloop invariant i43: (i < 11) ==> (j >= 1);\nloop invariant i44: (i < 11) ==> (j >= 0);\nloop invariant i45: (i < 11) ==> (j >= -1);\nloop invariant i46: (i < 11) ==> (j >= 6);\nloop invariant i47: (i < 11) ==> (i <= j);\nloop invariant i48: i - j >= 1;\nloop invariant i49: i - j <= 10;\nloop invariant i50: i + j == 11;\nloop invariant i51: i * j == 10;\nloop invariant i52: i / j == 1;\nloop invariant i53: i % j == 1;\nloop invariant i54: i * j % 10 == 10;\nloop invariant i55: i * j % 11 == 0;\nloop invariant i56: i * j % 2 == 0;\nloop invariant i57: i * j % 3 == 0;\nloop invariant i58: i * j % 4 == 0;\nloop invariant i59: i * j % 5 == 0;\nloop invariant i60: i * j % 6 == 0;\nloop invariant i61: i * j % 7 == 0;\nloop invariant i62: i * j % 8 == 0;\nloop invariant i63: i * j % 9 == 0;\nloop invariant i64: i * j % 10 == 0;\nloop invariant i65: i * j % 12 == 0;\nloop invariant i66: i * j % 13 == 0;\nloop invariant i67: i * j % 14 == 0;\nloop invariant i68: i * j % 15 == 0;\nloop invariant i69: i * j % 16 == 0;\nloop invariant i70: i * j % 17 == 0;\nloop invariant i71: i * j % 18 == 0;\nloop invariant i72: i * j % 19 == 0;\nloop invariant i73: i * j % 20 == 0;\nloop invariant i74: i * j % 21 == 0;\nloop invariant i75: i * j % 22 == 0;\nloop invariant i76: i * j % 23 == 0;\nloop invariant i77: i * j % 24 == 0;\nloop invariant i78: i * j % 25 == 0;\nloop invariant i79: i * j % 26 == 0;\nloop invariant i80: i * j % 27 == 0;\nloop invariant i81: i * j % 28 == 0;\nloop invariant i82: i * j % 29 == 0;\nloop invariant i83: i * j % 30 == 0;\nloop invariant i84: i * j % 31 == 0;\nloop invariant i85: i * j % 32 == 0;\nloop invariant i86: i * j % 33 == 0;\nloop invariant i87: i * j % 34 == 0;\nloop invariant i88: i * j % 35 == 0;\nloop invariant i89: i * j % 36 == 0;\nloop invariant i90: i * j % 37 == 0;\nloop invariant i91: i * j % 38 == 0;\nloop invariant i92: i * j % 39 == 0;\nloop invariant i93: i * j % 40 == 0;\nloop invariant i94: i * j % 41 == 0;\nloop invariant i95: i * j % 42 == 0;\nloop invariant i96: i * j % 43 == 0;\nloop invariant i97: i * j % 44 == 0;\nloop invariant i98: i * j % 45 == 0;\nloop invariant i99: i * j % 46 == 0;\nloop invariant i100: i * j % 47 == 0;\nloop invariant i101: i * j % 48 == 0;\nloop invariant i102: i * j % 49 == 0;\nloop invariant i103: i * j % 50 == 0;\nloop invariant i104: i * j % 51 == 0;\nloop invariant i105: i * j % 52 == 0;\nloop invariant i106: i * j % 53 == 0;\nloop invariant i107: i * j % 54 == 0;\nloop invariant i108: i * j % 55 == 0;\nloop invariant i109: i * j % 56 == 0;\nloop invariant i110: i * j % 57 == 0;\nloop invariant i111: i * j % 58 == 0;\nloop invariant i112: i * j % 59 == 0;\nloop invariant i113: i * j % 60 == 0;\nloop invariant i114: i * j % 61 == 0;\nloop invariant i115: i * j % 62 == 0;\nloop invariant i116: i * j % 63 == 0;\nloop invariant i117: i * j % 64 == 0;\nloop invariant i118: i * j % 65 == 0;\nloop invariant i119: i * j % 66 == 0;\nloop invariant i120: i * j % 67 == 0;\nloop invariant i121: i * j % 68 == 0;\nloop invariant i122: 1 <= i <= j;\nloop invariant i123: j - i >= 0;\nloop invariant i124: j - i <= 9;\nloop invariant i125: j - i == 6;\nloop invariant i126: i == 1;\nloop invariant i127: 10 <= j <= 10;\nloop invariant i128: j == 10 - i;\nloop invariant i129: j >= -1 + j;\nloop invariant i130: j + 1 <= 10;\nloop invariant i131: j + 1 >= 1;\nloop invariant i132: j + 1 >= 0;\nloop invariant i133: j + 1 >= -1 + j;\nloop invariant i134: (i - 1) / 2 == j;\nloop invariant i135: (i * (i + 1) / 2) <= j;\nloop invariant i136: j >= 6;\nloop invariant i137: j >= 10;\nloop invariant i138: j <= i + 8;\nloop invariant i139: i <= 18;\nloop invariant i140: j == 10 - i + 1;\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
        "combined_annotation_num_solver_calls": 101,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: 0 <= i <= 10;\n\nloop invariant i4: 1 <= i <= 11;\n\nloop invariant i6: i >= 1;\nloop invariant i7: i <= 11;\nloop invariant i8: j >= -5;\nloop invariant i9: j <= 10;\nloop invariant i10: i % 2 == 1;\n\n\nloop invariant i13: j >= -9;\n\n\nloop invariant i16: i <= 10;\nloop invariant i17: j >= 1;\n\nloop invariant i19: j == 10 - i / 2;\n\nloop invariant i21: i % 2 == 0 ==> i <= j;\nloop invariant i22: i % 2 == 0 ==> i >= j - 1;\nloop invariant i23: i == 10 - j / 2 ==> i <= j;\nloop invariant i24: i == 10 - j / 2 ==> i >= j - 1;\nloop invariant i25: 1 <= j <= 10;\n\n\n\n\nloop invariant i30: i <= (j + 1) * 2 - 1;\nloop invariant i31: i <= 2 * j - 1;\n\nloop invariant i33: (j <= 10 ==> i <= 11);\nloop invariant i34: (i <= 11 ==> j >= 0);\n\n\nloop invariant i37: 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i;\n\nloop invariant i39: j >= 0;\nloop invariant i40: i >= 0;\nloop invariant i41: j >= -1;\nloop invariant i42: (i >= 1) ==> (j >= 6);\nloop invariant i43: (i < 11) ==> (j >= 1);\nloop invariant i44: (i < 11) ==> (j >= 0);\nloop invariant i45: (i < 11) ==> (j >= -1);\nloop invariant i46: (i < 11) ==> (j >= 6);\nloop invariant i47: (i < 11) ==> (i <= j);\n\nloop invariant i49: i - j <= 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i122: 1 <= i <= j;\nloop invariant i123: j - i >= 0;\nloop invariant i124: j - i <= 9;\n\n\n\n\nloop invariant i129: j >= -1 + j;\n\nloop invariant i131: j + 1 >= 1;\nloop invariant i132: j + 1 >= 0;\nloop invariant i133: j + 1 >= -1 + j;\n\n\nloop invariant i136: j >= 6;\n\n\nloop invariant i139: i <= 18;\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c"
        ],
        "skipped": [],
        "total": 6,
        "success_count": 1,
        "failure_count": 5,
        "success_rate": 0.16666666666666666
    }
}