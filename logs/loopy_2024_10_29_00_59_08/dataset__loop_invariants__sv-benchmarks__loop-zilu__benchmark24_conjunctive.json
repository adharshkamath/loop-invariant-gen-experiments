{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  while (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i < n; loop invariant i <= n; loop invariant 0 <= k <= n; loop invariant k <= n; loop invariant i % 2 == 0; loop invariant 0 <= k-i <= n-i; loop invariant 2*k >= n-1 ==> i == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant k >= i/2;\nloop invariant k <= (n-i)/2;\nloop invariant k >= i/2 ==> k <= (n-i)/2;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 2 == 0;\nloop invariant k >= n;\nloop invariant n >= 0;\nloop invariant i < n ==> k == n - i/2;\nloop invariant loop invariant 0 <= i <= n; ensures that i remains within the bounds of the loop. The loop invariant loop invariant 0 <= k <= n; ensures that k remains within the bounds of the loop. The loop invariant loop invariant i % 2 == 0; ensures that i is always even. The loop invariant loop invariant k >= n; ensures that k is always greater than or equal to n. The loop invariant loop invariant n >= 0; ensures that n is always non-negative. The loop invariant loop invariant i < n ==> k == n - i/2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant i <= n;\nloop invariant i == 2 * (i / 2);\nloop invariant i == (i+1) - 1;\nloop invariant k == n - i;\nloop invariant k == k - 1;\nloop invariant i <= 2 * (i / 2);\nloop invariant i <= (i+1) - 1;\nloop invariant i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2);\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2);\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i && i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k = n - i / 2;\nloop invariant 0 <= k <= n / 2;\nloop invariant 2*k >= n-1;\n*/\n```",
            "```\n/*@\nloop invariant k = n - (i - 1) / 2;\nloop invariant k >= 1;\nloop invariant k >= 1;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 1;\n*/\n```",
            "```\n/*@\nloop invariant ( ( i + k ) == n );\nloop invariant ( ( i >= 0 ) && ( i < n ) );\nloop invariant ( ( k >= 0 ) && ( k < n ) );\nloop invariant ( ( n >= 0 ) && ( n == ( n - ( n - i ) ) ) );\nloop invariant ( ( ( i + k ) == n ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( i + k ) == n ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= n - 1;\nloop invariant i <= n;\nloop invariant k <= 0;\nloop invariant i == 2 * k + 1;\nloop invariant i == n - 1 || i == n;\nloop invariant i == n - 1 || k == 0;\nloop invariant i == n - 1 || i == n && k == 0;\n*/\n```",
            "```\n/*@\nloop invariant \\(i \\leq n\\);\nloop invariant \\(k \\geq n - (n - i + 1)\\);\nloop invariant \\(2k \\geq n - 1\\);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i%2==0;\nloop invariant k==n-i/2-1;\nloop invariant k>=0;\nloop invariant 2*k>=n-i-1 ==> i<n;\nloop invariant 2*k>=n-i-1 ==> i%2==0;\nloop invariant 2*k>=n-i-1 ==> k>=0;\nloop invariant 2*k>=n-i-1 ==> 2*k>=n-1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant i == 0 || i%2 == 0;\nloop invariant i >= 0 && i <= n;\nloop invariant i <= k * 2;\nloop invariant i >= k * 2 - n;\nloop invariant i%2 == 0 || i%2 == 1 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 1;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k >= (i - 1 + n) / 2;\nloop invariant k <= (n - 1) / 2;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= n-1;\nloop invariant i >= 0;\nloop invariant i <= 2*(n-1);\nloop invariant i%2 == 1;\nloop invariant k == n - i/2 - 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i < n; loop invariant i <= n; loop invariant 0 <= k <= n; loop invariant k <= n; loop invariant i % 2 == 0; loop invariant 0 <= k-i <= n-i; loop invariant 2*k >= n-1 ==> i == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i < n; loop invariant i <= n; loop invariant 0 <= k <= n; loop invariant k <= n; loop invariant i % 2 == 0; loop invariant 0 <= k-i <= n-i; loop invariant 2*k >= n-1 ==> i == n is preserved but not established.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant k >= i/2;\nloop invariant k <= (n-i)/2;\nloop invariant k >= i/2 ==> k <= (n-i)/2;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant k >= 0 is established but not preserved.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant k >= i/2 is established but not preserved.\nloop invariant k <= (n-i)/2 is preserved but not established.\nloop invariant k >= i/2 ==> k <= (n-i)/2 is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k <= n is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\nloop invariant i2: n >= 0;\n\n\nloop invariant i5: k <= n;\n\n\n\nloop invariant i9: k >= i/2 ==> k <= (n-i)/2 ==> k <= n;\n\nloop invariant i11: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n;\nloop invariant i12: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i13: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i14: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i15: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i16: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i17: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i18: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 2 == 0;\nloop invariant k >= n;\nloop invariant n >= 0;\nloop invariant i < n ==> k == n - i/2;\nloop invariant loop invariant 0 <= i <= n; ensures that i remains within the bounds of the loop. The loop invariant loop invariant 0 <= k <= n; ensures that k remains within the bounds of the loop. The loop invariant loop invariant i % 2 == 0; ensures that i is always even. The loop invariant loop invariant k >= n; ensures that k is always greater than or equal to n. The loop invariant loop invariant n >= 0; ensures that n is always non-negative. The loop invariant loop invariant i < n ==> k == n - i/2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 24: unexpected token 'invariant'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\nloop invariant i2: 0 <= k <= n;\nloop invariant i3: i % 2 == 0;\n\nloop invariant i5: n >= 0;\nloop invariant i6: i < n ==> k == n - i/2;\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant i <= n;\nloop invariant i == 2 * (i / 2);\nloop invariant i == (i+1) - 1;\nloop invariant k == n - i;\nloop invariant k == k - 1;\nloop invariant i <= 2 * (i / 2);\nloop invariant i <= (i+1) - 1;\nloop invariant i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2);\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2);\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i && i <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) is partially proven to be inductive.\nloop invariant i == (i+1) - 1 is partially proven to be inductive.\nloop invariant k == n - i is partially proven to be inductive.\nloop invariant k == k - 1 is preserved but not established.\nloop invariant i <= 2 * (i / 2) is partially proven to be inductive.\nloop invariant i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant i <= 2 * (i / 2) && i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i && i <= n is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\nloop invariant i3: i == 2 * (i / 2);\nloop invariant i4: i == (i+1) - 1;\n\n\nloop invariant i7: i <= 2 * (i / 2);\nloop invariant i8: i <= (i+1) - 1;\nloop invariant i9: i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i10: i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i11: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2);\nloop invariant i12: i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1;\nloop invariant i13: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i14: i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\n\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k = n - i / 2;\nloop invariant 0 <= k <= n / 2;\nloop invariant 2*k >= n-1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant k = n - (i - 1) / 2;\nloop invariant k >= 1;\nloop invariant k >= 1;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant ( ( i + k ) == n );\nloop invariant ( ( i >= 0 ) && ( i < n ) );\nloop invariant ( ( k >= 0 ) && ( k < n ) );\nloop invariant ( ( n >= 0 ) && ( n == ( n - ( n - i ) ) ) );\nloop invariant ( ( ( i + k ) == n ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( i + k ) == n ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( ( i + k ) == n ) is partially proven to be inductive.\nloop invariant ( ( i >= 0 ) && ( i < n ) ) is preserved but not established.\nloop invariant ( ( k >= 0 ) && ( k < n ) ) is preserved but not established.\nloop invariant ( ( n >= 0 ) && ( n == ( n - ( n - i ) ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( i + k ) == n ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( i + k ) == n ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i10: ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i11: ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i12: ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) );\n\n\nloop invariant i15: ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i16: ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i17: ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i18: ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\n\n\nloop invariant i21: ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i22: ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i23: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i24: ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i25: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= n - 1;\nloop invariant i <= n;\nloop invariant k <= 0;\nloop invariant i == 2 * k + 1;\nloop invariant i == n - 1 || i == n;\nloop invariant i == n - 1 || k == 0;\nloop invariant i == n - 1 || i == n && k == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant k >= n - 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant k <= 0 is preserved but not established.\nloop invariant i == 2 * k + 1 is preserved but not established.\nloop invariant i == n - 1 || i == n is partially proven to be inductive.\nloop invariant i == n - 1 || k == 0 is partially proven to be inductive.\nloop invariant i == n - 1 || i == n && k == 0 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant \\(i \\leq n\\);\nloop invariant \\(k \\geq n - (n - i + 1)\\);\nloop invariant \\(2k \\geq n - 1\\);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: lexical error, illegal character \\",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i%2==0;\nloop invariant k==n-i/2-1;\nloop invariant k>=0;\nloop invariant 2*k>=n-i-1 ==> i<n;\nloop invariant 2*k>=n-i-1 ==> i%2==0;\nloop invariant 2*k>=n-i-1 ==> k>=0;\nloop invariant 2*k>=n-i-1 ==> 2*k>=n-1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant i%2==0 is partially proven to be inductive.\nloop invariant k==n-i/2-1 is preserved but not established.\nloop invariant k>=0 is partially proven to be inductive.\nloop invariant 2*k>=n-i-1 ==> i<n is partially proven to be inductive.\nloop invariant 2*k>=n-i-1 ==> i%2==0 is partially proven to be inductive.\nloop invariant 2*k>=n-i-1 ==> k>=0 is partially proven to be inductive.\nloop invariant 2*k>=n-i-1 ==> 2*k>=n-1 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\nloop invariant i2: i%2==0;\n\n\n\nloop invariant i6: 2*k>=n-i-1 ==> i%2==0;\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant i == 0 || i%2 == 0;\nloop invariant i >= 0 && i <= n;\nloop invariant i <= k * 2;\nloop invariant i >= k * 2 - n;\nloop invariant i%2 == 0 || i%2 == 1 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 1;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i == 0 || i%2 == 0 is partially proven to be inductive.\nloop invariant i >= 0 && i <= n is partially proven to be inductive.\nloop invariant i <= k * 2 is established but not preserved.\nloop invariant i >= k * 2 - n is preserved but not established.\nloop invariant i%2 == 0 || i%2 == 1 && i > 0 is partially proven to be inductive.\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 1 is established but not preserved.\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0 is partially proven to be inductive.\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\nloop invariant i2: i == 0 || i%2 == 0;\n\n\n\nloop invariant i6: i%2 == 0 || i%2 == 1 && i > 0;\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k >= (i - 1 + n) / 2;\nloop invariant k <= (n - 1) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant k >= 0 is established but not preserved.\nloop invariant k >= (i - 1 + n) / 2 is established but not preserved.\nloop invariant k <= (n - 1) / 2 is preserved but not established.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= n-1;\nloop invariant i >= 0;\nloop invariant i <= 2*(n-1);\nloop invariant i%2 == 1;\nloop invariant k == n - i/2 - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= n-1 is preserved but not established.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= 2*(n-1) is partially proven to be inductive.\nloop invariant i%2 == 1 is partially proven to be inductive.\nloop invariant k == n - i/2 - 1 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\nloop invariant i4: i >= 0;\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 41: unexpected token 'invariant'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\nloop invariant i1: 0 <= i < n; loop invariant i <= n; loop invariant 0 <= k <= n; loop invariant k <= n; loop invariant i % 2 == 0; loop invariant 0 <= k-i <= n-i; loop invariant 2*k >= n-1 ==> i == n;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: n >= 0;\nloop invariant i4: i <= n;\nloop invariant i5: k >= 0;\nloop invariant i6: k <= n;\nloop invariant i7: k >= i/2;\nloop invariant i8: k <= (n-i)/2;\nloop invariant i9: k >= i/2 ==> k <= (n-i)/2;\nloop invariant i10: k >= i/2 ==> k <= (n-i)/2 ==> k <= n;\nloop invariant i11: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0;\nloop invariant i12: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n;\nloop invariant i13: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i14: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i15: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i16: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i17: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i18: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i19: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i20: 0 <= k <= n;\nloop invariant i21: i % 2 == 0;\nloop invariant i22: k >= n;\nloop invariant i23: i < n ==> k == n - i/2;\nloop invariant i24: loop invariant 0 <= i <= n; ensures that i remains within the bounds of the loop. The loop invariant loop invariant 0 <= k <= n; ensures that k remains within the bounds of the loop. The loop invariant loop invariant i % 2 == 0; ensures that i is always even. The loop invariant loop invariant k >= n; ensures that k is always greater than or equal to n. The loop invariant loop invariant n >= 0; ensures that n is always non-negative. The loop invariant loop invariant i < n ==> k == n - i/2;\nloop invariant i25: i == 2 * (i / 2);\nloop invariant i26: i == (i+1) - 1;\nloop invariant i27: k == n - i;\nloop invariant i28: k == k - 1;\nloop invariant i29: i <= 2 * (i / 2);\nloop invariant i30: i <= (i+1) - 1;\nloop invariant i31: i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i32: i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i33: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2);\nloop invariant i34: i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1;\nloop invariant i35: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i36: i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i37: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i38: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i;\nloop invariant i39: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n;\nloop invariant i40: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2);\nloop invariant i41: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i42: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i;\nloop invariant i43: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i;\nloop invariant i44: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i && i <= n;\nloop invariant i45: k = n - i / 2;\nloop invariant i46: 0 <= k <= n / 2;\nloop invariant i47: 2*k >= n-1;\nloop invariant i48: k = n - (i - 1) / 2;\nloop invariant i49: k >= 1;\nloop invariant i50: i >= 1;\nloop invariant i51: ( ( i + k ) == n );\nloop invariant i52: ( ( i >= 0 ) && ( i < n ) );\nloop invariant i53: ( ( k >= 0 ) && ( k < n ) );\nloop invariant i54: ( ( n >= 0 ) && ( n == ( n - ( n - i ) ) ) );\nloop invariant i55: ( ( ( i + k ) == n ) ==> ( i == ( i + 2 ) ) );\nloop invariant i56: ( ( ( i + k ) == n ) ==> ( k == ( k - 1 ) ) );\nloop invariant i57: ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i58: ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i59: ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i60: ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i61: ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i62: ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i63: ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i64: ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i65: ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i66: ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i67: ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i68: ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i69: ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i70: ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i71: ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i72: ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i73: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i74: ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i75: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i76: i >= 0;\nloop invariant i77: k >= n - 1;\nloop invariant i78: k <= 0;\nloop invariant i79: i == 2 * k + 1;\nloop invariant i80: i == n - 1 || i == n;\nloop invariant i81: i == n - 1 || k == 0;\nloop invariant i82: i == n - 1 || i == n && k == 0;\nloop invariant i83: \\(i \\leq n\\);\nloop invariant i84: \\(k \\geq n - (n - i + 1)\\);\nloop invariant i85: \\(2k \\geq n - 1\\);\nloop invariant i86: i%2==0;\nloop invariant i87: k==n-i/2-1;\nloop invariant i88: k>=0;\nloop invariant i89: 2*k>=n-i-1 ==> i<n;\nloop invariant i90: 2*k>=n-i-1 ==> i%2==0;\nloop invariant i91: 2*k>=n-i-1 ==> k>=0;\nloop invariant i92: 2*k>=n-i-1 ==> 2*k>=n-1;\nloop invariant i93: i == 0 || i%2 == 0;\nloop invariant i94: i >= 0 && i <= n;\nloop invariant i95: i <= k * 2;\nloop invariant i96: i >= k * 2 - n;\nloop invariant i97: i%2 == 0 || i%2 == 1 && i > 0;\nloop invariant i98: i == k * 2 - n || i < k * 2 - n && i%2 == 1;\nloop invariant i99: i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i100: i == k * 2 - n || i < k * 2 - n && i%2 == 0;\nloop invariant i101: k >= (i - 1 + n) / 2;\nloop invariant i102: k <= (n - 1) / 2;\nloop invariant i103: k <= n-1;\nloop invariant i104: i <= 2*(n-1);\nloop invariant i105: i%2 == 1;\nloop invariant i106: k == n - i/2 - 1;\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 34,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\nloop invariant i3: n >= 0;\n\nloop invariant i5: k >= 0;\nloop invariant i6: k <= n;\n\n\n\nloop invariant i10: k >= i/2 ==> k <= (n-i)/2 ==> k <= n;\nloop invariant i11: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0;\nloop invariant i12: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n;\nloop invariant i13: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i14: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i15: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i16: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i17: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i18: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i19: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i20: 0 <= k <= n;\nloop invariant i21: i % 2 == 0;\n\nloop invariant i23: i < n ==> k == n - i/2;\n\nloop invariant i25: i == 2 * (i / 2);\nloop invariant i26: i == (i+1) - 1;\n\n\nloop invariant i29: i <= 2 * (i / 2);\nloop invariant i30: i <= (i+1) - 1;\nloop invariant i31: i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i32: i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i33: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2);\nloop invariant i34: i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1;\nloop invariant i35: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i36: i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i47: 2*k >= n-1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i59: ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i60: ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i61: ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i62: ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i63: ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i64: ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i65: ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i66: ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i67: ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i68: ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i69: ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i70: ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i71: ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i72: ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i73: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i74: ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i75: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i76: i >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i86: i%2==0;\n\nloop invariant i88: k>=0;\n\nloop invariant i90: 2*k>=n-i-1 ==> i%2==0;\nloop invariant i91: 2*k>=n-i-1 ==> k>=0;\nloop invariant i92: 2*k>=n-i-1 ==> 2*k>=n-1;\nloop invariant i93: i == 0 || i%2 == 0;\n\n\n\nloop invariant i97: i%2 == 0 || i%2 == 1 && i > 0;\n\n\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c"
        ],
        "skipped": [],
        "total": 16,
        "success_count": 3,
        "failure_count": 13,
        "success_rate": 0.1875
    }
}