{
    "params": {
        "cli_args": {
            "config_file": "../config/loop_invariants.yaml",
            "no_preprocess": false,
            "termination_analysis": false,
            "recursive_functions": false,
            "loop_invariants": false,
            "loop_invariants_prompt": null,
            "repair_invariants": false,
            "repair_input": "",
            "repair_retries": 5,
            "repair_from_k": 0,
            "max_benchmarks": 20,
            "start_index": 20,
            "debug": false,
            "check_only": true,
            "input_log": "../../syncode/loopy_expts/logs/2024_10_27_22_10_15_expt_logs_processed.json"
        },
        "config_file_args": {
            "checker": "frama-c",
            "model": "gpt-4-32k",
            "benchmarks": "syncode/benchmarks.txt",
            "benchmark_features": "one_loop_one_method",
            "debug": true
        }
    },
    "logs": [
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant ( 0 <= p <= bufsize_0 );\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * (i + 1);\nloop invariant bufsize >= 2 * i;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 2*i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p < bufsize_0;\nloop invariant (i <= ielen);\nloop invariant (p + 2 * i) <= bufsize;\nloop invariant (p + 2 * i) < bufsize_0;\nloop invariant (p + 1) < bufsize_0;\nloop invariant (p >= p - 2 * i);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize_0 >= bufsize;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize + leader_len;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 1 <= p <= bufsize_0;\nloop invariant 1 <= i <= ielen;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant 2*i <= bufsize <= bufsize_0;\nloop invariant 2*i + 2 <= p + 2 <= bufsize_0;\nloop invariant i * 2 <= p <= bufsize_0;\nloop invariant 0 <= bufsize - leader_len <= bufsize_0;\nloop invariant 0 <= bufsize_0 - p <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - p <= bufsize_0;\nloop invariant 0 <= p - leader_len <= bufsize_0;\nloop invariant 0 <= bufsize_0 - p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= bufsize_0 - p + 2 <= bufsize_0;\nloop invariant 0 <= bufsize_0 - p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 2 * i >= leader_len;\nloop invariant bufsize >= leader_len - (leader_len + 1) * (leader_len - 1) / 2 - (2 * i + 1) * (i + 1) / 2;\nloop invariant bufsize <= bufsize_0 - 2 * i;\nloop invariant i * 2 >= ielen;\nloop invariant i * 2 <= ielen;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant leader_len >= 1;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 1 <= bufsize;\nloop invariant p + 2 <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i + 1 <= bufsize;\nloop invariant p + 2 * i + 2 <= bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize < 2 * ielen;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant p = p + 2;\nloop invariant p == bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant bufsize >= 0;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize >= bufsize_0 - ielen;\nloop invariant p <= bufsize_0;\nloop invariant p <= ielen * 2;\nloop invariant p <= bufsize_0 - 2 * i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\n*/\n```",
                "```\n/*@\nloop invariant ( p + 2 * i <= bufsize_0 );\nloop invariant ( 0 <= p );\nloop invariant ( 0 <= i );\nloop invariant ( i <= ielen );\nloop invariant ( bufsize >= 2 * i );\nloop invariant ( bufsize < bufsize_0 );\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant ( 0 <= p <= bufsize_0 );\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * (i + 1);\nloop invariant bufsize >= 2 * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( 0 <= p <= bufsize_0 ) is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2 * (i + 1) is established but not preserved.\nloop invariant bufsize >= 2 * i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: ( 0 <= p <= bufsize_0 );\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: 0 <= bufsize <= bufsize_0 - leader_len;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*i is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: leader_len <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\n\n\nloop invariant i6: bufsize_0 >= leader_len;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= p < bufsize_0;\nloop invariant (i <= ielen);\nloop invariant (p + 2 * i) <= bufsize;\nloop invariant (p + 2 * i) < bufsize_0;\nloop invariant (p + 1) < bufsize_0;\nloop invariant (p >= p - 2 * i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p < bufsize_0 is established but not preserved.\nloop invariant (i <= ielen) is partially proven to be inductive.\nloop invariant (p + 2 * i) <= bufsize is neither established nor preserved.\nloop invariant (p + 2 * i) < bufsize_0 is established but not preserved.\nloop invariant (p + 1) < bufsize_0 is partially proven to be inductive.\nloop invariant (p >= p - 2 * i) is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: (i <= ielen);\n\n\n\nloop invariant i6: (p >= p - 2 * i);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize_0 >= bufsize;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize + leader_len;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= bufsize is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: bufsize >= 0;\nloop invariant i4: bufsize_0 >= bufsize;\nloop invariant i5: p >= 0;\nloop invariant i6: p <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 45: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= p <= bufsize_0;\nloop invariant 1 <= i <= ielen;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant 2*i <= bufsize <= bufsize_0;\nloop invariant 2*i + 2 <= p + 2 <= bufsize_0;\nloop invariant i * 2 <= p <= bufsize_0;\nloop invariant 0 <= bufsize - leader_len <= bufsize_0;\nloop invariant 0 <= bufsize_0 - p <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - p <= bufsize_0;\nloop invariant 0 <= p - leader_len <= bufsize_0;\nloop invariant 0 <= bufsize_0 - p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= bufsize_0 - p + 2 <= bufsize_0;\nloop invariant 0 <= bufsize_0 - p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\nloop invariant 0 <= p + 2 <= bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 1 <= i <= ielen is preserved but not established.\nloop invariant leader_len <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 2*i <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 2*i + 2 <= p + 2 <= bufsize_0 is partially proven to be inductive.\nloop invariant i * 2 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize - leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 - p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 - p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p - leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 - p + 2 <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p + 2 <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 1 <= p <= bufsize_0;\n\nloop invariant i3: leader_len <= p <= bufsize_0;\n\n\nloop invariant i6: i * 2 <= p <= bufsize_0;\n\nloop invariant i8: 0 <= bufsize_0 - p <= bufsize_0;\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 2 * i >= leader_len;\nloop invariant bufsize >= leader_len - (leader_len + 1) * (leader_len - 1) / 2 - (2 * i + 1) * (i + 1) / 2;\nloop invariant bufsize <= bufsize_0 - 2 * i;\nloop invariant i * 2 >= ielen;\nloop invariant i * 2 <= ielen;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 2 * i >= leader_len is partially proven to be inductive.\nloop invariant bufsize >= leader_len - (leader_len + 1) * (leader_len - 1) / 2 - (2 * i + 1) * (i + 1) / 2 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - 2 * i is partially proven to be inductive.\nloop invariant i * 2 >= ielen is preserved but not established.\nloop invariant i * 2 <= ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: p + 2 * i >= leader_len;\nloop invariant i4: bufsize >= leader_len - (leader_len + 1) * (leader_len - 1) / 2 - (2 * i + 1) * (i + 1) / 2;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant leader_len >= 1;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize_0 >= leader_len + ielen * 2;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant bufsize <= LARGE_INT;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant leader_len >= 1;\nloop invariant bufsize >= bufsize_0 - p;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= 2 * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - p is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2 * i is established but not preserved.\nloop invariant leader_len >= 1 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + ielen * 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= ielen * 2 is partially proven to be inductive.\nloop invariant bufsize_0 <= LARGE_INT is partially proven to be inductive.\nloop invariant bufsize <= LARGE_INT is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: bufsize >= bufsize_0 - p;\nloop invariant i4: bufsize <= bufsize_0 - leader_len;\n\nloop invariant i6: leader_len >= 1;\nloop invariant i7: bufsize_0 >= leader_len + ielen * 2;\nloop invariant i8: bufsize_0 >= leader_len;\nloop invariant i9: bufsize_0 >= ielen * 2;\nloop invariant i10: bufsize_0 <= LARGE_INT;\nloop invariant i11: bufsize <= LARGE_INT;\nloop invariant i12: i <= ielen;\nloop invariant i13: i >= 0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 1 <= bufsize;\nloop invariant p + 2 <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i + 1 <= bufsize;\nloop invariant p + 2 * i + 2 <= bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 1 <= bufsize is neither established nor preserved.\nloop invariant p + 2 <= bufsize_0 is established but not preserved.\nloop invariant p + 2 * i <= bufsize is established but not preserved.\nloop invariant p + 2 * i + 1 <= bufsize is established but not preserved.\nloop invariant p + 2 * i + 2 <= bufsize_0 is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize < 2 * ielen;\nloop invariant 0 <= i < ielen;\nloop invariant bufsize >= 2;\nloop invariant p = p + 2;\nloop invariant p == bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 49: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\n\nloop invariant i4: bufsize >= 2;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 0;\nloop invariant bufsize >= 0;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= ielen * 2;\nloop invariant bufsize >= bufsize_0 - ielen;\nloop invariant p <= bufsize_0;\nloop invariant p <= ielen * 2;\nloop invariant p <= bufsize_0 - 2 * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= ielen * 2 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - ielen is preserved but not established.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= ielen * 2 is established but not preserved.\nloop invariant p <= bufsize_0 - 2 * i is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p >= 0;\nloop invariant i3: bufsize >= 0;\nloop invariant i4: bufsize_0 >= leader_len;\nloop invariant i5: bufsize_0 >= ielen * 2;\n\nloop invariant i7: p <= bufsize_0;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p + 1 >= 0;\nloop invariant i >= 0;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= leader_len + 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len + 2*i is established but not preserved.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant p + 1 <= bufsize_0 is established but not preserved.\nloop invariant p + 1 >= 0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\n\nloop invariant i4: 0 <= p <= bufsize_0;\nloop invariant i5: i >= 0;\nloop invariant i6: p >= 0;\nloop invariant i7: p <= bufsize_0;\n\nloop invariant i9: bufsize <= bufsize_0;\nloop invariant i10: i <= ielen;\n\nloop invariant i12: p + 1 >= 0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( p + 2 * i <= bufsize_0 );\nloop invariant ( 0 <= p );\nloop invariant ( 0 <= i );\nloop invariant ( i <= ielen );\nloop invariant ( bufsize >= 2 * i );\nloop invariant ( bufsize < bufsize_0 );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( p + 2 * i <= bufsize_0 ) is established but not preserved.\nloop invariant ( 0 <= p ) is partially proven to be inductive.\nloop invariant ( 0 <= i ) is partially proven to be inductive.\nloop invariant ( i <= ielen ) is partially proven to be inductive.\nloop invariant ( bufsize >= 2 * i ) is established but not preserved.\nloop invariant ( bufsize < bufsize_0 ) is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: ( 0 <= p );\nloop invariant i3: ( 0 <= i );\nloop invariant i4: ( i <= ielen );\n\nloop invariant i6: ( bufsize < bufsize_0 );\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 259: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: ( 0 <= p <= bufsize_0 );\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i4: bufsize >= 2 * (i + 1);\nloop invariant i5: bufsize >= 2 * i;\nloop invariant i6: 0 <= p <= bufsize_0;\nloop invariant i7: leader_len <= bufsize_0;\nloop invariant i8: bufsize >= leader_len;\nloop invariant i9: bufsize >= 2*i;\nloop invariant i10: bufsize_0 >= leader_len;\nloop invariant i11: bufsize_0 >= 2*i;\nloop invariant i12: 0 <= p < bufsize_0;\nloop invariant i13: (i <= ielen);\nloop invariant i14: (p + 2 * i) <= bufsize;\nloop invariant i15: (p + 2 * i) < bufsize_0;\nloop invariant i16: (p + 1) < bufsize_0;\nloop invariant i17: (p >= p - 2 * i);\nloop invariant i18: bufsize >= 0;\nloop invariant i19: bufsize_0 >= bufsize;\nloop invariant i20: p >= 0;\nloop invariant i21: p <= bufsize_0;\nloop invariant i22: p <= bufsize + leader_len;\nloop invariant i23: i1;\nloop invariant i24: i2;\nloop invariant i25: i3;\nloop invariant i26: i4;\nloop invariant i27: i5;\nloop invariant i28: i6;\nloop invariant i29: i7;\nloop invariant i30: i8;\nloop invariant i31: i9;\nloop invariant i32: i10;\nloop invariant i33: i11;\nloop invariant i34: i12;\nloop invariant i35: i13;\nloop invariant i36: i14;\nloop invariant i37: i15;\nloop invariant i38: i16;\nloop invariant i39: i17;\nloop invariant i40: i18;\nloop invariant i41: i19;\nloop invariant i42: i20;\nloop invariant i43: i21;\nloop invariant i44: i22;\nloop invariant i45: i23;\nloop invariant i46: i24;\nloop invariant i47: i25;\nloop invariant i48: i26;\nloop invariant i49: i27;\nloop invariant i50: i28;\nloop invariant i51: i29;\nloop invariant i52: i30;\nloop invariant i53: i31;\nloop invariant i54: i32;\nloop invariant i55: i33;\nloop invariant i56: i34;\nloop invariant i57: i35;\nloop invariant i58: i36;\nloop invariant i59: i37;\nloop invariant i60: i38;\nloop invariant i61: i39;\nloop invariant i62: i40;\nloop invariant i63: i41;\nloop invariant i64: i42;\nloop invariant i65: i43;\nloop invariant i66: i44;\nloop invariant i67: i45;\nloop invariant i68: i46;\nloop invariant i69: i47;\nloop invariant i70: i48;\nloop invariant i71: i49;\nloop invariant i72: i50;\nloop invariant i73: i51;\nloop invariant i74: i52;\nloop invariant i75: i53;\nloop invariant i76: i54;\nloop invariant i77: i55;\nloop invariant i78: i56;\nloop invariant i79: i57;\nloop invariant i80: i58;\nloop invariant i81: i59;\nloop invariant i82: i60;\nloop invariant i83: i61;\nloop invariant i84: i62;\nloop invariant i85: i63;\nloop invariant i86: i64;\nloop invariant i87: i65;\nloop invariant i88: i66;\nloop invariant i89: i67;\nloop invariant i90: i68;\nloop invariant i91: i69;\nloop invariant i92: i70;\nloop invariant i93: i71;\nloop invariant i94: i72;\nloop invariant i95: i73;\nloop invariant i96: i74;\nloop invariant i97: i75;\nloop invariant i98: i76;\nloop invariant i99: i77;\nloop invariant i100: i78;\nloop invariant i101: i79;\nloop invariant i102: i80;\nloop invariant i103: i81;\nloop invariant i104: i82;\nloop invariant i105: i83;\nloop invariant i106: i84;\nloop invariant i107: i85;\nloop invariant i108: i86;\nloop invariant i109: i87;\nloop invariant i110: i88;\nloop invariant i111: i89;\nloop invariant i112: i90;\nloop invariant i113: i91;\nloop invariant i114: i92;\nloop invariant i115: i93;\nloop invariant i116: i94;\nloop invariant i117: i95;\nloop invariant i118: i96;\nloop invariant i119: i97;\nloop invariant i120: i98;\nloop invariant i121: i99;\nloop invariant i122: i100;\nloop invariant i123: i101;\nloop invariant i124: i102;\nloop invariant i125: i103;\nloop invariant i126: i104;\nloop invariant i127: i105;\nloop invariant i128: i106;\nloop invariant i129: i107;\nloop invariant i130: i108;\nloop invariant i131: i109;\nloop invariant i132: i110;\nloop invariant i133: i111;\nloop invariant i134: i112;\nloop invariant i135: i113;\nloop invariant i136: i114;\nloop invariant i137: i115;\nloop invariant i138: i116;\nloop invariant i139: i117;\nloop invariant i140: i118;\nloop invariant i141: i119;\nloop invariant i142: i120;\nloop invariant i143: i121;\nloop invariant i144: i122;\nloop invariant i145: i123;\nloop invariant i146: i124;\nloop invariant i147: i125;\nloop invariant i148: i126;\nloop invariant i149: i127;\nloop invariant i150: i128;\nloop invariant i151: i129;\nloop invariant i152: i130;\nloop invariant i153: i131;\nloop invariant i154: i132;\nloop invariant i155: i133;\nloop invariant i156: i134;\nloop invariant i157: i135;\nloop invariant i158: i136;\nloop invariant i159: i137;\nloop invariant i160: i138;\nloop invariant i161: i139;\nloop invariant i162: i140;\nloop invariant i163: i141;\nloop invariant i164: i142;\nloop invariant i165: i143;\nloop invariant i166: i144;\nloop invariant i167: i145;\nloop invariant i168: i146;\nloop invariant i169: i147;\nloop invariant i170: i148;\nloop invariant i171: i149;\nloop invariant i172: i150;\nloop invariant i173: i151;\nloop invariant i174: i152;\nloop invariant i175: i153;\nloop invariant i176: i154;\nloop invariant i177: i155;\nloop invariant i178: i156;\nloop invariant i179: i157;\nloop invariant i180: i158;\nloop invariant i181: 1 <= p <= bufsize_0;\nloop invariant i182: 1 <= i <= ielen;\nloop invariant i183: leader_len <= p <= bufsize_0;\nloop invariant i184: 2*i <= bufsize <= bufsize_0;\nloop invariant i185: 2*i + 2 <= p + 2 <= bufsize_0;\nloop invariant i186: i * 2 <= p <= bufsize_0;\nloop invariant i187: 0 <= bufsize - leader_len <= bufsize_0;\nloop invariant i188: 0 <= bufsize_0 - p <= bufsize_0;\nloop invariant i189: leader_len <= bufsize_0 - p <= bufsize_0;\nloop invariant i190: 0 <= p - leader_len <= bufsize_0;\nloop invariant i191: 0 <= bufsize_0 - p + 2 <= bufsize_0;\nloop invariant i192: 0 <= p + 2 <= bufsize_0;\nloop invariant i193: p + 2 * i >= leader_len;\nloop invariant i194: bufsize >= leader_len - (leader_len + 1) * (leader_len - 1) / 2 - (2 * i + 1) * (i + 1) / 2;\nloop invariant i195: bufsize <= bufsize_0 - 2 * i;\nloop invariant i196: i * 2 >= ielen;\nloop invariant i197: i * 2 <= ielen;\nloop invariant i198: bufsize >= bufsize_0 - p;\nloop invariant i199: bufsize <= bufsize_0 - leader_len;\nloop invariant i200: leader_len >= 1;\nloop invariant i201: bufsize_0 >= leader_len + ielen * 2;\nloop invariant i202: bufsize_0 >= ielen * 2;\nloop invariant i203: bufsize_0 <= LARGE_INT;\nloop invariant i204: bufsize <= LARGE_INT;\nloop invariant i205: i <= ielen;\nloop invariant i206: i >= 0;\nloop invariant i207: p + 1 <= bufsize;\nloop invariant i208: p + 2 <= bufsize_0;\nloop invariant i209: p + 2 * i <= bufsize;\nloop invariant i210: p + 2 * i + 1 <= bufsize;\nloop invariant i211: p + 2 * i + 2 <= bufsize_0;\nloop invariant i212: bufsize < 2 * ielen;\nloop invariant i213: 0 <= i < ielen;\nloop invariant i214: bufsize >= 2;\nloop invariant i215: p = p + 2;\nloop invariant i216: p == bufsize_0;\nloop invariant i217: bufsize >= bufsize_0 - ielen;\nloop invariant i218: p <= ielen * 2;\nloop invariant i219: p <= bufsize_0 - 2 * i;\nloop invariant i220: bufsize >= leader_len + 2*i;\nloop invariant i221: bufsize <= bufsize_0;\nloop invariant i222: p + 1 <= bufsize_0;\nloop invariant i223: p + 1 >= 0;\nloop invariant i224: ( p + 2 * i <= bufsize_0 );\nloop invariant i225: ( 0 <= p );\nloop invariant i226: ( 0 <= i );\nloop invariant i227: ( i <= ielen );\nloop invariant i228: ( bufsize >= 2 * i );\nloop invariant i229: ( bufsize < bufsize_0 );\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
            "combined_annotation_num_solver_calls": 171,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: ( 0 <= p <= bufsize_0 );\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: 0 <= bufsize <= bufsize_0 - leader_len;\n\n\nloop invariant i6: 0 <= p <= bufsize_0;\nloop invariant i7: leader_len <= bufsize_0;\n\n\nloop invariant i10: bufsize_0 >= leader_len;\nloop invariant i11: bufsize_0 >= 2*i;\n\nloop invariant i13: (i <= ielen);\n\n\n\nloop invariant i17: (p >= p - 2 * i);\nloop invariant i18: bufsize >= 0;\nloop invariant i19: bufsize_0 >= bufsize;\nloop invariant i20: p >= 0;\nloop invariant i21: p <= bufsize_0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i181: 1 <= p <= bufsize_0;\n\nloop invariant i183: leader_len <= p <= bufsize_0;\n\n\nloop invariant i186: i * 2 <= p <= bufsize_0;\n\nloop invariant i188: 0 <= bufsize_0 - p <= bufsize_0;\n\nloop invariant i190: 0 <= p - leader_len <= bufsize_0;\n\n\nloop invariant i193: p + 2 * i >= leader_len;\nloop invariant i194: bufsize >= leader_len - (leader_len + 1) * (leader_len - 1) / 2 - (2 * i + 1) * (i + 1) / 2;\n\n\n\nloop invariant i198: bufsize >= bufsize_0 - p;\nloop invariant i199: bufsize <= bufsize_0 - leader_len;\nloop invariant i200: leader_len >= 1;\nloop invariant i201: bufsize_0 >= leader_len + ielen * 2;\nloop invariant i202: bufsize_0 >= ielen * 2;\nloop invariant i203: bufsize_0 <= LARGE_INT;\nloop invariant i204: bufsize <= LARGE_INT;\nloop invariant i205: i <= ielen;\nloop invariant i206: i >= 0;\n\n\n\n\n\n\n\nloop invariant i214: bufsize >= 2;\n\n\n\n\n\n\nloop invariant i221: bufsize <= bufsize_0;\n\nloop invariant i223: p + 1 >= 0;\n\nloop invariant i225: ( 0 <= p );\nloop invariant i226: ( 0 <= i );\nloop invariant i227: ( i <= ielen );\n\nloop invariant i229: ( bufsize < bufsize_0 );\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant 2*i <= bufsize;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p >= 2*i;\nloop invariant p <= bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= p + 1 < bufsize_0;\nloop invariant bufsize > 2;\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant i <= ielen;\nloop invariant bufsize > 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize_0 > 2*i;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 > 2*ielen;\nloop invariant bufsize_0 >= 2*ielen;\nloop invariant 2*i < bufsize_0;\nloop invariant 2*ielen < bufsize_0;\nloop invariant 2*i < bufsize;\nloop invariant 2*ielen < bufsize;\nloop invariant bufsize > 2*i + 2;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize > 2*ielen + 2;\nloop invariant bufsize >= 2*ielen + 2;\nloop invariant bufsize_0 > 2*i + 2;\nloop invariant bufsize_0 >= 2*i + 2;\nloop invariant bufsize_0 > 2*ielen + 2;\nloop invariant bufsize_0 >= 2*ielen + 2;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= leader_len <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*ielen;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize + leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p = 0 + i * 2;\nloop invariant bufsize = bufsize_0 - leader_len - i * 2;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= p <= bufsize_0 - leader_len - i * 2;\nloop invariant p < bufsize;\nloop invariant p >= 0;\nloop invariant bufsize < bufsize_0 - leader_len;\nloop invariant bufsize >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 0;\nloop invariant ielen >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant 0 <= bufsize - 2*i <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant p >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0;\nloop invariant bufsize_0 - bufsize + leader_len <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant i > 0 ==> 2 <= bufsize;\nloop invariant i > 0 ==> p+1 < bufsize_0;\nloop invariant i > 0 ==> 2 <= bufsize - 2*i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len - 2 * ielen;\nloop invariant bufsize < 2 * ielen ==> i == ielen;\nloop invariant bufsize >= 2 * ielen ==> i < ielen;\nloop invariant 0 <= p <= bufsize_0 ==> i < ielen;\nloop invariant p + 1 < bufsize_0 ==> i < ielen;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant i > 0 ==> i < ielen;\nloop invariant i > 0 ==> bufsize >= 2;\nloop invariant i > 0 ==> bufsize <= 2*iilen;\nloop invariant i > 0 ==> p <= bufsize_0 - (2*iilen - i);\nloop invariant i > 0 ==> p >= bufsize_0 - 2*iilen + i;\nloop invariant i > 0 ==> bufsize >= 2*i;\nloop invariant i > 0 ==> bufsize <= 2*i + 2;\nloop invariant i > 0 ==> p > 0;\nloop invariant i > 0 ==> p < bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p >= p@Pre;\nloop invariant p + 1 < bufsize_0;\nloop invariant p + 1 <= bufsize;\nloop invariant p + 1 >= p@Pre + 1;\nloop invariant p + 2 < bufsize_0;\nloop invariant p + 2 <= bufsize;\nloop invariant p + 2 >= p@Pre + 2;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant i >= i@Pre;\nloop invariant i <= ielen@Pre;\nloop invariant p@Pre <= p@LoopVariant;\nloop invariant i@Pre <= i@LoopVariant;\nloop invariant bufsize@Pre <= bufsize@LoopVariant;\nloop invariant bufsize_0@Pre <= bufsize_0@LoopVariant;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= leader_len;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= i <= bufsize_0;\nloop invariant i <= bufsize_0;\nloop invariant 0 <= i <= bufsize_0 - 2;\nloop invariant 2 <= i <= bufsize_0 - 2;\nloop invariant 2 <= i <= bufsize_0 - 2 * i;\nloop invariant i <= bufsize_0 - 2 * i;\nloop invariant 0 <= i * 2 <= bufsize_0 - 2;\nloop invariant 0 <= i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize_0 <= bufsize + i*2;\nloop invariant bufsize >= bufsize_0 - i*2;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize >= leader_len + i*2;\nloop invariant bufsize_0 >= leader_len + i*2;\nloop invariant bufsize >= bufsize_0 - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i = 0 ==> 0 <= p <= bufsize_0;\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p <= bufsize_0);\nloop invariant (i = ielen) ==> (p = bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant 2*i <= bufsize;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p >= 2*i;\nloop invariant p <= bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i < ielen is established but not preserved.\nloop invariant 2*i <= bufsize is established but not preserved.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= 2*i is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: p >= 2*i;\nloop invariant i5: p <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= p + 1 < bufsize_0;\nloop invariant bufsize > 2;\nloop invariant i >= 0;\nloop invariant i < ielen;\nloop invariant i <= ielen;\nloop invariant bufsize > 2*i;\nloop invariant bufsize >= 2;\nloop invariant bufsize_0 > 2*i;\nloop invariant bufsize_0 >= 2;\nloop invariant bufsize_0 > 2*ielen;\nloop invariant bufsize_0 >= 2*ielen;\nloop invariant 2*i < bufsize_0;\nloop invariant 2*ielen < bufsize_0;\nloop invariant 2*i < bufsize;\nloop invariant 2*ielen < bufsize;\nloop invariant bufsize > 2*i + 2;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize > 2*ielen + 2;\nloop invariant bufsize >= 2*ielen + 2;\nloop invariant bufsize_0 > 2*i + 2;\nloop invariant bufsize_0 >= 2*i + 2;\nloop invariant bufsize_0 > 2*ielen + 2;\nloop invariant bufsize_0 >= 2*ielen + 2;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= p + 1 < bufsize_0 is established but not preserved.\nloop invariant bufsize > 2 is preserved but not established.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i < ielen is established but not preserved.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize > 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize_0 > 2*i is partially proven to be inductive.\nloop invariant bufsize_0 >= 2 is partially proven to be inductive.\nloop invariant bufsize_0 > 2*ielen is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*ielen is partially proven to be inductive.\nloop invariant 2*i < bufsize_0 is partially proven to be inductive.\nloop invariant 2*ielen < bufsize_0 is partially proven to be inductive.\nloop invariant 2*i < bufsize is partially proven to be inductive.\nloop invariant 2*ielen < bufsize is preserved but not established.\nloop invariant bufsize > 2*i + 2 is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 is partially proven to be inductive.\nloop invariant bufsize > 2*ielen + 2 is preserved but not established.\nloop invariant bufsize >= 2*ielen + 2 is partially proven to be inductive.\nloop invariant bufsize_0 > 2*i + 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*i + 2 is partially proven to be inductive.\nloop invariant bufsize_0 > 2*ielen + 2 is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*ielen + 2 is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize is neither established nor preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\n\nloop invariant i4: i >= 0;\n\nloop invariant i6: i <= ielen;\n\nloop invariant i8: bufsize >= 2;\nloop invariant i9: bufsize_0 > 2*i;\nloop invariant i10: bufsize_0 >= 2;\nloop invariant i11: bufsize_0 > 2*ielen;\nloop invariant i12: bufsize_0 >= 2*ielen;\nloop invariant i13: 2*i < bufsize_0;\nloop invariant i14: 2*ielen < bufsize_0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i25: p >= 0;\nloop invariant i26: p <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= leader_len <= bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2*ielen;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize + leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant bufsize >= 2*i + 2;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize <= 2*ielen;\nloop invariant p <= bufsize + leader_len + 2*ielen;\nloop invariant p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= 2*i + 2;\nloop invariant p <= bufsize + leader_len + 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len is established but not preserved.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize <= 2*i + 2 is preserved but not established.\nloop invariant p <= bufsize + leader_len + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i + 2 is established but not preserved.\nloop invariant p <= bufsize + leader_len + 2*ielen is partially proven to be inductive.\nloop invariant bufsize <= 2*ielen is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= bufsize <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\nloop invariant i4: 0 <= leader_len <= bufsize_0;\n\nloop invariant i6: bufsize >= 2*ielen;\nloop invariant i7: p >= leader_len;\nloop invariant i8: p <= bufsize_0;\n\nloop invariant i10: bufsize >= 2*i;\n\nloop invariant i12: p <= bufsize + leader_len + 2*i;\n\nloop invariant i14: p <= bufsize + leader_len + 2*ielen;\n\nloop invariant i16: i <= ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p = 0 + i * 2;\nloop invariant bufsize = bufsize_0 - leader_len - i * 2;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= p <= bufsize_0 - leader_len - i * 2;\nloop invariant p < bufsize;\nloop invariant p >= 0;\nloop invariant bufsize < bufsize_0 - leader_len;\nloop invariant bufsize >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize_0 >= 0;\nloop invariant ielen >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 35: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\n\nloop invariant i4: 0 <= bufsize <= bufsize_0 - leader_len;\n\n\nloop invariant i7: p >= 0;\n\nloop invariant i9: bufsize >= 0;\nloop invariant i10: i >= 0;\nloop invariant i11: i <= ielen;\nloop invariant i12: bufsize_0 >= leader_len;\nloop invariant i13: bufsize_0 >= 0;\nloop invariant i14: ielen >= 0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize <= bufsize_0;\nloop invariant 0 <= bufsize - 2*i <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant p >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\nloop invariant bufsize <= bufsize_0 - 2*i;\nloop invariant bufsize >= bufsize_0 - 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize - 2*i <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= bufsize_0 - 2*i is preserved but not established.\nloop invariant bufsize <= bufsize_0 - 2*i is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - 2*i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\n\nloop invariant i5: bufsize <= bufsize_0;\n\nloop invariant i7: p <= bufsize_0;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant p + 2 * i <= bufsize;\nloop invariant p + 2 * i <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i;\nloop invariant p + 2 * i <= bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p + 2 * i <= bufsize_0 is established but not preserved.\nloop invariant p + 2 * i <= bufsize is neither established nor preserved.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\n\nloop invariant i4: i <= ielen;\nloop invariant i5: 0 <= i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0;\nloop invariant bufsize_0 - bufsize + leader_len <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant i > 0 ==> 2 <= bufsize;\nloop invariant i > 0 ==> p+1 < bufsize_0;\nloop invariant i > 0 ==> 2 <= bufsize - 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 - bufsize + leader_len <= p <= bufsize_0 is preserved but not established.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant i > 0 ==> 2 <= bufsize is partially proven to be inductive.\nloop invariant i > 0 ==> p+1 < bufsize_0 is partially proven to be inductive.\nloop invariant i > 0 ==> 2 <= bufsize - 2*i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0;\n\nloop invariant i4: 0 <= i <= ielen;\nloop invariant i5: i > 0 ==> 2 <= bufsize;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len - 2 * ielen;\nloop invariant bufsize < 2 * ielen ==> i == ielen;\nloop invariant bufsize >= 2 * ielen ==> i < ielen;\nloop invariant 0 <= p <= bufsize_0 ==> i < ielen;\nloop invariant p + 1 < bufsize_0 ==> i < ielen;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize == bufsize_0 - leader_len - 2 * i is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len - 2 * ielen is preserved but not established.\nloop invariant bufsize < 2 * ielen ==> i == ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 * ielen ==> i < ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 ==> i < ielen is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 ==> i < ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\n\n\nloop invariant i5: bufsize < 2 * ielen ==> i == ielen;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant p >= p_0;\nloop invariant p <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p = p_0 + 2 * i;\nloop invariant bufsize = bufsize_0 - leader_len - 2 * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 36: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\n\n\nloop invariant i5: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i6: i >= 0;\nloop invariant i7: i <= ielen;\n\nloop invariant i9: p <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant i > 0 ==> i < ielen;\nloop invariant i > 0 ==> bufsize >= 2;\nloop invariant i > 0 ==> bufsize <= 2*iilen;\nloop invariant i > 0 ==> p <= bufsize_0 - (2*iilen - i);\nloop invariant i > 0 ==> p >= bufsize_0 - 2*iilen + i;\nloop invariant i > 0 ==> bufsize >= 2*i;\nloop invariant i > 0 ==> bufsize <= 2*i + 2;\nloop invariant i > 0 ==> p > 0;\nloop invariant i > 0 ==> p < bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 39: unbound logic variable iilen. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= bufsize_0;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: 0 <= i <= ielen;\n\nloop invariant i5: i > 0 ==> bufsize >= 2;\n\n\n\n\n\nloop invariant i11: i > 0 ==> p > 0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 19,
                    "annotations": "```\n/*@\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant p >= p@Pre;\nloop invariant p + 1 < bufsize_0;\nloop invariant p + 1 <= bufsize;\nloop invariant p + 1 >= p@Pre + 1;\nloop invariant p + 2 < bufsize_0;\nloop invariant p + 2 <= bufsize;\nloop invariant p + 2 >= p@Pre + 2;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant i >= i@Pre;\nloop invariant i <= ielen@Pre;\nloop invariant p@Pre <= p@LoopVariant;\nloop invariant i@Pre <= i@LoopVariant;\nloop invariant bufsize@Pre <= bufsize@LoopVariant;\nloop invariant bufsize_0@Pre <= bufsize_0@LoopVariant;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= leader_len;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= p;\nloop invariant leader_len <= p@Pre;\nloop invariant leader_len <= p@LoopVariant;\nloop invariant leader_len <= bufsize;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0@Pre;\nloop invariant leader_len <= bufsize_0@LoopVariant;\nloop invariant leader_len <= bufsize@Pre;\nloop invariant leader_len <= bufsize@LoopVariant;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 37: unexpected token 'Pre'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: p >= 0;\nloop invariant i2: p <= bufsize_0;\n\n\n\n\n\n\n\n\nloop invariant i11: i >= 0;\nloop invariant i12: i <= ielen;\n\n\n\n\n\n\nloop invariant i19: 0 <= ielen;\nloop invariant i20: 0 <= bufsize;\nloop invariant i21: 0 <= bufsize_0;\nloop invariant i22: 0 <= leader_len;\n\nloop invariant i24: leader_len <= bufsize_0;\n\n\n\n\nloop invariant i29: leader_len <= p;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= p <= bufsize_0;\nloop invariant i <= ielen;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= i <= bufsize_0;\nloop invariant i <= bufsize_0;\nloop invariant 0 <= i <= bufsize_0 - 2;\nloop invariant 2 <= i <= bufsize_0 - 2;\nloop invariant 2 <= i <= bufsize_0 - 2 * i;\nloop invariant i <= bufsize_0 - 2 * i;\nloop invariant 0 <= i * 2 <= bufsize_0 - 2;\nloop invariant 0 <= i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\nloop invariant i * 2 <= bufsize_0 - 2 * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len <= p <= bufsize_0 is preserved but not established.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= i <= bufsize_0 is partially proven to be inductive.\nloop invariant i <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= bufsize_0 - 2 is partially proven to be inductive.\nloop invariant 2 <= i <= bufsize_0 - 2 is preserved but not established.\nloop invariant 2 <= i <= bufsize_0 - 2 * i is partially proven to be inductive.\nloop invariant i <= bufsize_0 - 2 * i is partially proven to be inductive.\nloop invariant 0 <= i * 2 <= bufsize_0 - 2 is partially proven to be inductive.\nloop invariant 0 <= i * 2 <= bufsize_0 - 2 * i is partially proven to be inductive.\nloop invariant i * 2 <= bufsize_0 - 2 * i is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: leader_len <= p <= bufsize_0;\n\nloop invariant i4: i <= ielen;\nloop invariant i5: 0 <= i <= ielen;\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 34: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= 2;\nloop invariant bufsize_0 <= bufsize + i*2;\nloop invariant bufsize >= bufsize_0 - i*2;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize >= leader_len + i*2;\nloop invariant bufsize_0 >= leader_len + i*2;\nloop invariant bufsize >= bufsize_0 - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant bufsize >= bufsize_0 - leader_len - i*2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant bufsize_0 <= bufsize + i*2 is preserved but not established.\nloop invariant bufsize >= bufsize_0 - i*2 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize >= leader_len + i*2 is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len + i*2 is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= bufsize_0 - leader_len - i*2 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: 0 <= i <= ielen;\nloop invariant i3: bufsize >= 2*ielen;\nloop invariant i4: bufsize >= 2;\n\n\n\nloop invariant i8: bufsize_0 >= leader_len;\n\n\nloop invariant i11: bufsize >= bufsize_0 - leader_len;\nloop invariant i12: bufsize >= bufsize_0 - leader_len - i*2;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant i = 0 ==> 0 <= p <= bufsize_0;\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p <= bufsize_0);\nloop invariant (i = ielen) ==> (p = bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\nloop invariant (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 35: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\nloop invariant i3: (i != 0 && i < ielen) ==> (0 <= p && p <= bufsize_0);\n\nloop invariant i5: (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 76: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i < ielen;\nloop invariant i2: 2*i <= bufsize;\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: p >= 2*i;\nloop invariant i5: p <= bufsize_0;\nloop invariant i6: p <= p + 1 < bufsize_0;\nloop invariant i7: bufsize > 2;\nloop invariant i8: i >= 0;\nloop invariant i9: i < ielen;\nloop invariant i10: i <= ielen;\nloop invariant i11: bufsize > 2*i;\nloop invariant i12: bufsize >= 2;\nloop invariant i13: bufsize_0 > 2*i;\nloop invariant i14: bufsize_0 >= 2;\nloop invariant i15: bufsize_0 > 2*ielen;\nloop invariant i16: bufsize_0 >= 2*ielen;\nloop invariant i17: 2*i < bufsize_0;\nloop invariant i18: 2*ielen < bufsize_0;\nloop invariant i19: 2*i < bufsize;\nloop invariant i20: 2*ielen < bufsize;\nloop invariant i21: bufsize > 2*i + 2;\nloop invariant i22: bufsize >= 2*i + 2;\nloop invariant i23: bufsize > 2*ielen + 2;\nloop invariant i24: bufsize >= 2*ielen + 2;\nloop invariant i25: bufsize_0 > 2*i + 2;\nloop invariant i26: bufsize_0 >= 2*i + 2;\nloop invariant i27: bufsize_0 > 2*ielen + 2;\nloop invariant i28: bufsize_0 >= 2*ielen + 2;\nloop invariant i29: p >= 0;\nloop invariant i30: p <= bufsize;\nloop invariant i31: 0 <= bufsize <= bufsize_0;\nloop invariant i32: 0 <= i <= ielen;\nloop invariant i33: 0 <= leader_len <= bufsize_0;\nloop invariant i34: bufsize >= leader_len;\nloop invariant i35: bufsize >= 2*ielen;\nloop invariant i36: p >= leader_len;\nloop invariant i37: p <= bufsize + leader_len;\nloop invariant i38: bufsize >= 2*i;\nloop invariant i39: bufsize <= 2*i + 2;\nloop invariant i40: p <= bufsize + leader_len + 2*i;\nloop invariant i41: p <= bufsize + leader_len + 2*ielen;\nloop invariant i42: bufsize <= 2*ielen;\nloop invariant i43: p = 0 + i * 2;\nloop invariant i44: bufsize = bufsize_0 - leader_len - i * 2;\nloop invariant i45: 0 <= bufsize <= bufsize_0 - leader_len;\nloop invariant i46: 0 <= p <= bufsize_0 - leader_len - i * 2;\nloop invariant i47: p < bufsize;\nloop invariant i48: bufsize < bufsize_0 - leader_len;\nloop invariant i49: bufsize >= 0;\nloop invariant i50: bufsize_0 >= leader_len;\nloop invariant i51: bufsize_0 >= 0;\nloop invariant i52: ielen >= 0;\nloop invariant i53: bufsize <= bufsize_0;\nloop invariant i54: 0 <= bufsize - 2*i <= bufsize_0;\nloop invariant i55: p >= bufsize_0 - 2*i;\nloop invariant i56: bufsize <= bufsize_0 - 2*i;\nloop invariant i57: bufsize >= bufsize_0 - 2*i;\nloop invariant i58: p + 2 * i <= bufsize_0;\nloop invariant i59: p + 2 * i <= bufsize;\nloop invariant i60: 0 <= i;\nloop invariant i61: p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0;\nloop invariant i62: bufsize_0 - bufsize + leader_len <= p <= bufsize_0;\nloop invariant i63: i > 0 ==> 2 <= bufsize;\nloop invariant i64: i > 0 ==> p+1 < bufsize_0;\nloop invariant i65: i > 0 ==> 2 <= bufsize - 2*i;\nloop invariant i66: bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant i67: 0 <= bufsize <= bufsize_0 - leader_len - 2 * ielen;\nloop invariant i68: bufsize < 2 * ielen ==> i == ielen;\nloop invariant i69: bufsize >= 2 * ielen ==> i < ielen;\nloop invariant i70: 0 <= p <= bufsize_0 ==> i < ielen;\nloop invariant i71: p + 1 < bufsize_0 ==> i < ielen;\nloop invariant i72: p = p_0 + 2 * i;\nloop invariant i73: bufsize = bufsize_0 - leader_len - 2 * i;\nloop invariant i74: p >= p_0;\nloop invariant i75: i > 0 ==> i < ielen;\nloop invariant i76: i > 0 ==> bufsize >= 2;\nloop invariant i77: i > 0 ==> bufsize <= 2*iilen;\nloop invariant i78: i > 0 ==> p <= bufsize_0 - (2*iilen - i);\nloop invariant i79: i > 0 ==> p >= bufsize_0 - 2*iilen + i;\nloop invariant i80: i > 0 ==> bufsize >= 2*i;\nloop invariant i81: i > 0 ==> bufsize <= 2*i + 2;\nloop invariant i82: i > 0 ==> p > 0;\nloop invariant i83: i > 0 ==> p < bufsize_0;\nloop invariant i84: p >= p@Pre;\nloop invariant i85: p + 1 < bufsize_0;\nloop invariant i86: p + 1 <= bufsize;\nloop invariant i87: p + 1 >= p@Pre + 1;\nloop invariant i88: p + 2 < bufsize_0;\nloop invariant i89: p + 2 <= bufsize;\nloop invariant i90: p + 2 >= p@Pre + 2;\nloop invariant i91: i >= i@Pre;\nloop invariant i92: i <= ielen@Pre;\nloop invariant i93: p@Pre <= p@LoopVariant;\nloop invariant i94: i@Pre <= i@LoopVariant;\nloop invariant i95: bufsize@Pre <= bufsize@LoopVariant;\nloop invariant i96: bufsize_0@Pre <= bufsize_0@LoopVariant;\nloop invariant i97: 0 <= ielen;\nloop invariant i98: 0 <= bufsize;\nloop invariant i99: 0 <= bufsize_0;\nloop invariant i100: 0 <= leader_len;\nloop invariant i101: leader_len <= bufsize;\nloop invariant i102: leader_len <= bufsize_0;\nloop invariant i103: leader_len <= bufsize@Pre;\nloop invariant i104: leader_len <= bufsize_0@Pre;\nloop invariant i105: leader_len <= bufsize@LoopVariant;\nloop invariant i106: leader_len <= bufsize_0@LoopVariant;\nloop invariant i107: leader_len <= p;\nloop invariant i108: leader_len <= p@Pre;\nloop invariant i109: leader_len <= p@LoopVariant;\nloop invariant i110: leader_len <= p <= bufsize_0;\nloop invariant i111: bufsize_0 - leader_len <= p <= bufsize_0;\nloop invariant i112: 0 <= i <= bufsize_0;\nloop invariant i113: i <= bufsize_0;\nloop invariant i114: 0 <= i <= bufsize_0 - 2;\nloop invariant i115: 2 <= i <= bufsize_0 - 2;\nloop invariant i116: 2 <= i <= bufsize_0 - 2 * i;\nloop invariant i117: i <= bufsize_0 - 2 * i;\nloop invariant i118: 0 <= i * 2 <= bufsize_0 - 2;\nloop invariant i119: 0 <= i * 2 <= bufsize_0 - 2 * i;\nloop invariant i120: i * 2 <= bufsize_0 - 2 * i;\nloop invariant i121: i1;\nloop invariant i122: i2;\nloop invariant i123: i3;\nloop invariant i124: i4;\nloop invariant i125: i5;\nloop invariant i126: i6;\nloop invariant i127: i7;\nloop invariant i128: i8;\nloop invariant i129: i9;\nloop invariant i130: i10;\nloop invariant i131: i11;\nloop invariant i132: i12;\nloop invariant i133: i13;\nloop invariant i134: i14;\nloop invariant i135: i15;\nloop invariant i136: i16;\nloop invariant i137: i17;\nloop invariant i138: i18;\nloop invariant i139: i19;\nloop invariant i140: i20;\nloop invariant i141: i21;\nloop invariant i142: i22;\nloop invariant i143: i23;\nloop invariant i144: i24;\nloop invariant i145: i25;\nloop invariant i146: i26;\nloop invariant i147: i27;\nloop invariant i148: i28;\nloop invariant i149: i29;\nloop invariant i150: i30;\nloop invariant i151: i31;\nloop invariant i152: i32;\nloop invariant i153: i33;\nloop invariant i154: i34;\nloop invariant i155: i35;\nloop invariant i156: i36;\nloop invariant i157: i37;\nloop invariant i158: i38;\nloop invariant i159: i39;\nloop invariant i160: i40;\nloop invariant i161: i41;\nloop invariant i162: i42;\nloop invariant i163: i43;\nloop invariant i164: i44;\nloop invariant i165: i45;\nloop invariant i166: i46;\nloop invariant i167: i47;\nloop invariant i168: i48;\nloop invariant i169: i49;\nloop invariant i170: i50;\nloop invariant i171: i51;\nloop invariant i172: i52;\nloop invariant i173: i53;\nloop invariant i174: i54;\nloop invariant i175: i55;\nloop invariant i176: i56;\nloop invariant i177: i57;\nloop invariant i178: i58;\nloop invariant i179: i59;\nloop invariant i180: i60;\nloop invariant i181: i61;\nloop invariant i182: i62;\nloop invariant i183: i63;\nloop invariant i184: i64;\nloop invariant i185: i65;\nloop invariant i186: i66;\nloop invariant i187: i67;\nloop invariant i188: i68;\nloop invariant i189: i69;\nloop invariant i190: i70;\nloop invariant i191: i71;\nloop invariant i192: i72;\nloop invariant i193: i73;\nloop invariant i194: i74;\nloop invariant i195: i75;\nloop invariant i196: i76;\nloop invariant i197: i77;\nloop invariant i198: i78;\nloop invariant i199: i79;\nloop invariant i200: i80;\nloop invariant i201: i81;\nloop invariant i202: i82;\nloop invariant i203: i83;\nloop invariant i204: i84;\nloop invariant i205: i85;\nloop invariant i206: i86;\nloop invariant i207: i87;\nloop invariant i208: i88;\nloop invariant i209: i89;\nloop invariant i210: i90;\nloop invariant i211: i91;\nloop invariant i212: i92;\nloop invariant i213: i93;\nloop invariant i214: i94;\nloop invariant i215: i95;\nloop invariant i216: i96;\nloop invariant i217: i97;\nloop invariant i218: i98;\nloop invariant i219: i99;\nloop invariant i220: i100;\nloop invariant i221: i101;\nloop invariant i222: i102;\nloop invariant i223: i103;\nloop invariant i224: i104;\nloop invariant i225: i105;\nloop invariant i226: i106;\nloop invariant i227: i107;\nloop invariant i228: i108;\nloop invariant i229: i109;\nloop invariant i230: i110;\nloop invariant i231: i111;\nloop invariant i232: i112;\nloop invariant i233: i113;\nloop invariant i234: i114;\nloop invariant i235: i115;\nloop invariant i236: i116;\nloop invariant i237: i117;\nloop invariant i238: i118;\nloop invariant i239: i119;\nloop invariant i240: i120;\nloop invariant i241: i121;\nloop invariant i242: i122;\nloop invariant i243: i123;\nloop invariant i244: i124;\nloop invariant i245: i125;\nloop invariant i246: i126;\nloop invariant i247: i127;\nloop invariant i248: i128;\nloop invariant i249: i129;\nloop invariant i250: i130;\nloop invariant i251: i131;\nloop invariant i252: i132;\nloop invariant i253: i133;\nloop invariant i254: i134;\nloop invariant i255: i135;\nloop invariant i256: i136;\nloop invariant i257: i137;\nloop invariant i258: i138;\nloop invariant i259: i139;\nloop invariant i260: i140;\nloop invariant i261: i141;\nloop invariant i262: i142;\nloop invariant i263: i143;\nloop invariant i264: i144;\nloop invariant i265: i145;\nloop invariant i266: i146;\nloop invariant i267: i147;\nloop invariant i268: i148;\nloop invariant i269: i149;\nloop invariant i270: i150;\nloop invariant i271: i151;\nloop invariant i272: i152;\nloop invariant i273: i153;\nloop invariant i274: i154;\nloop invariant i275: i155;\nloop invariant i276: i156;\nloop invariant i277: i157;\nloop invariant i278: i158;\nloop invariant i279: bufsize_0 <= bufsize + i*2;\nloop invariant i280: bufsize >= bufsize_0 - i*2;\nloop invariant i281: bufsize >= leader_len + i*2;\nloop invariant i282: bufsize_0 >= leader_len + i*2;\nloop invariant i283: bufsize >= bufsize_0 - leader_len;\nloop invariant i284: bufsize >= bufsize_0 - leader_len - i*2;\nloop invariant i285: i = 0 ==> 0 <= p <= bufsize_0;\nloop invariant i286: (i != 0 && i < ielen) ==> (0 <= p && p <= bufsize_0);\nloop invariant i287: (i = ielen) ==> (p = bufsize_0);\nloop invariant i288: (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\nloop invariant i289: (i != 0 && i < ielen) ==> (0 <= p && p < bufsize_0);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
            "combined_annotation_num_solver_calls": 203,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: 2*i <= bufsize;\nloop invariant i3: 0 <= p <= bufsize_0;\nloop invariant i4: p >= 2*i;\nloop invariant i5: p <= bufsize_0;\n\n\nloop invariant i8: i >= 0;\n\nloop invariant i10: i <= ielen;\n\nloop invariant i12: bufsize >= 2;\nloop invariant i13: bufsize_0 > 2*i;\nloop invariant i14: bufsize_0 >= 2;\nloop invariant i15: bufsize_0 > 2*ielen;\nloop invariant i16: bufsize_0 >= 2*ielen;\nloop invariant i17: 2*i < bufsize_0;\nloop invariant i18: 2*ielen < bufsize_0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i29: p >= 0;\n\nloop invariant i31: 0 <= bufsize <= bufsize_0;\nloop invariant i32: 0 <= i <= ielen;\nloop invariant i33: 0 <= leader_len <= bufsize_0;\n\nloop invariant i35: bufsize >= 2*ielen;\nloop invariant i36: p >= leader_len;\nloop invariant i37: p <= bufsize + leader_len;\nloop invariant i38: bufsize >= 2*i;\n\nloop invariant i40: p <= bufsize + leader_len + 2*i;\nloop invariant i41: p <= bufsize + leader_len + 2*ielen;\n\n\n\nloop invariant i45: 0 <= bufsize <= bufsize_0 - leader_len;\n\n\n\nloop invariant i49: bufsize >= 0;\nloop invariant i50: bufsize_0 >= leader_len;\nloop invariant i51: bufsize_0 >= 0;\nloop invariant i52: ielen >= 0;\nloop invariant i53: bufsize <= bufsize_0;\nloop invariant i54: 0 <= bufsize - 2*i <= bufsize_0;\n\n\n\n\n\nloop invariant i60: 0 <= i;\nloop invariant i61: p+1 < bufsize_0 ==> 0 <= bufsize <= bufsize_0;\n\nloop invariant i63: i > 0 ==> 2 <= bufsize;\n\n\n\n\nloop invariant i68: bufsize < 2 * ielen ==> i == ielen;\n\n\n\n\n\n\n\nloop invariant i76: i > 0 ==> bufsize >= 2;\n\n\n\nloop invariant i80: i > 0 ==> bufsize >= 2*i;\n\nloop invariant i82: i > 0 ==> p > 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i97: 0 <= ielen;\nloop invariant i98: 0 <= bufsize;\nloop invariant i99: 0 <= bufsize_0;\nloop invariant i100: 0 <= leader_len;\n\nloop invariant i102: leader_len <= bufsize_0;\n\n\n\n\nloop invariant i107: leader_len <= p;\n\n\nloop invariant i110: leader_len <= p <= bufsize_0;\n\nloop invariant i112: 0 <= i <= bufsize_0;\nloop invariant i113: i <= bufsize_0;\nloop invariant i114: 0 <= i <= bufsize_0 - 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i282: bufsize_0 >= leader_len + i*2;\nloop invariant i283: bufsize >= bufsize_0 - leader_len;\nloop invariant i284: bufsize >= bufsize_0 - leader_len - i*2;\n\nloop invariant i286: (i != 0 && i < ielen) ==> (0 <= p && p <= bufsize_0);\n\nloop invariant i288: (i != 0 && i < ielen) ==> (0 <= i && i < ielen);\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == j % 3;\nloop invariant i % 3 == k % 3;\nloop invariant i % 3 == 0;\nloop invariant i % 3 == 3 * x;\nloop invariant i % 3 == 3 * y;\nloop invariant i % 3 == 3 * z;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n * 3;\nloop invariant 0 <= j <= n * 3;\nloop invariant 0 <= k <= n * 3;\nloop invariant i >= j && j >= k;\nloop invariant i >= k && j >= k;\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0 ==> n > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= SIZE;\nloop invariant 0 <= i <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant (i + 3 * n) == (k + 3 * n);\nloop invariant (i + 3 * n) == (j + 3 * n);\nloop invariant (k + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == 0;\nloop invariant j == i;\nloop invariant k == i;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i >= j && j >= k;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j + 3 * i;\nloop invariant i == k + 3 * i;\nloop invariant i == n;\nloop invariant j == i;\nloop invariant k == i;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= min(n, SIZE);\nloop invariant 0 <= j <= min(n, SIZE);\nloop invariant 0 <= k <= min(n, SIZE);\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i % 3 == 0;\nloop invariant i % 3 == j % 3 && j % 3 == k % 3;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (SIZE + 2) <= i <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % (SIZE + 2) == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (k + 3) % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % 3 == 0 ==> i % 3 == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % 3 == 0 ==> j % 3 == 0;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;loop invariant 0 <= j <= n;loop invariant 0 <= k <= n;loop invariant i%3 == 0;loop invariant j%3 == 0;loop invariant k%3 == 0;loop invariant i <= j;loop invariant j <= k;loop invariant i <= k;loop invariant i >= n || (i < n && j < n && k < n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n; loop invariant j >= i; loop invariant k >= j; loop invariant i <= SIZE;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i + j + k == 3 * n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i % (SIZE + 2) == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i == n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == j % 3;\nloop invariant i % 3 == k % 3;\nloop invariant i % 3 == 0;\nloop invariant i % 3 == 3 * x;\nloop invariant i % 3 == 3 * y;\nloop invariant i % 3 == 3 * z;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 21: unbound logic variable x. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i % 3 == 0;\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n * 3;\nloop invariant 0 <= j <= n * 3;\nloop invariant 0 <= k <= n * 3;\nloop invariant i >= j && j >= k;\nloop invariant i >= k && j >= k;\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0 ==> n > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n * 3 is partially proven to be inductive.\nloop invariant 0 <= j <= n * 3 is partially proven to be inductive.\nloop invariant 0 <= k <= n * 3 is partially proven to be inductive.\nloop invariant i >= j && j >= k is partially proven to be inductive.\nloop invariant i >= k && j >= k is partially proven to be inductive.\nloop invariant i == j && j == k is partially proven to be inductive.\nloop invariant i % (SIZE + 2) == 0 ==> n > 0 is preserved but not established.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i <= n * 3;\nloop invariant i2: 0 <= j <= n * 3;\nloop invariant i3: 0 <= k <= n * 3;\nloop invariant i4: i >= j && j >= k;\nloop invariant i5: i >= k && j >= k;\nloop invariant i6: i == j && j == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i == j && j == k is partially proven to be inductive.\nloop invariant i % (SIZE + 2) == 0 is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i == j && j == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= SIZE;\nloop invariant 0 <= i <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant (i + 3 * n) == (k + 3 * n);\nloop invariant (i + 3 * n) == (j + 3 * n);\nloop invariant (k + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\nloop invariant (i + 3 * n) == (i + 3 * n);\nloop invariant (k + 3 * n) == (k + 3 * n);\nloop invariant (j + 3 * n) == (j + 3 * n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= SIZE is partially proven to be inductive.\nloop invariant 0 <= i <= n is established but not preserved.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant (i + 3 * n) == (k + 3 * n) is partially proven to be inductive.\nloop invariant (i + 3 * n) == (j + 3 * n) is partially proven to be inductive.\nloop invariant (k + 3 * n) == (j + 3 * n) is partially proven to be inductive.\nloop invariant (i + 3 * n) == (i + 3 * n) is partially proven to be inductive.\nloop invariant (k + 3 * n) == (k + 3 * n) is partially proven to be inductive.\nloop invariant (j + 3 * n) == (j + 3 * n) is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= n <= SIZE;\n\nloop invariant i3: i == j;\nloop invariant i4: j == k;\nloop invariant i5: (i + 3 * n) == (k + 3 * n);\nloop invariant i6: (i + 3 * n) == (j + 3 * n);\nloop invariant i7: (k + 3 * n) == (j + 3 * n);\nloop invariant i8: (i + 3 * n) == (i + 3 * n);\nloop invariant i9: (k + 3 * n) == (k + 3 * n);\nloop invariant i10: (j + 3 * n) == (j + 3 * n);\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i % 3 == 0;\nloop invariant j == i;\nloop invariant k == i;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\nloop invariant i + j + k == n * 3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j == i is partially proven to be inductive.\nloop invariant k == i is partially proven to be inductive.\nloop invariant i + j + k == n * 3 is preserved but not established.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: i % 3 == 0;\nloop invariant i3: j == i;\nloop invariant i4: k == i;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i >= j && j >= k;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j % 3 == 0 is partially proven to be inductive.\nloop invariant k % 3 == 0 is partially proven to be inductive.\nloop invariant i >= j && j >= k is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i % 3 == 0;\nloop invariant i5: j % 3 == 0;\nloop invariant i6: k % 3 == 0;\nloop invariant i7: i >= j && j >= k;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i == j + 3 * i;\nloop invariant i == k + 3 * i;\nloop invariant i == n;\nloop invariant j == i;\nloop invariant k == i;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i == j + 3 * i is partially proven to be inductive.\nloop invariant i == k + 3 * i is partially proven to be inductive.\nloop invariant i == n is preserved but not established.\nloop invariant j == i is partially proven to be inductive.\nloop invariant k == i is partially proven to be inductive.\nloop invariant i % (SIZE + 2) == 0 is partially proven to be inductive.\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0) is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\nloop invariant i7: j == i;\nloop invariant i8: k == i;\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 17,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= min(n, SIZE);\nloop invariant 0 <= j <= min(n, SIZE);\nloop invariant 0 <= k <= min(n, SIZE);\nloop invariant i == j && j == k;\nloop invariant i % (SIZE + 2) == 0;\nloop invariant SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i % 3 == 0;\nloop invariant i % 3 == j % 3 && j % 3 == k % 3;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (SIZE + 2) <= i <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= n;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= min(n, SIZE);\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % (SIZE + 2) == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (k + 3) % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % 3 == 0 ==> i % 3 == 0;\nloop invariant i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % 3 == 0 ==> j % 3 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic function min. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\nloop invariant i4: i == j && j == k;\n\n\nloop invariant i7: i % 3 == 0;\nloop invariant i8: i % 3 == j % 3 && j % 3 == k % 3;\nloop invariant i9: i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\nloop invariant i10: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % 3 == 0 ==> i % 3 == 0;\nloop invariant i27: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % 3 == 0 ==> j % 3 == 0;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;loop invariant 0 <= j <= n;loop invariant 0 <= k <= n;loop invariant i%3 == 0;loop invariant j%3 == 0;loop invariant k%3 == 0;loop invariant i <= j;loop invariant j <= k;loop invariant i <= k;loop invariant i >= n || (i < n && j < n && k < n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n;loop invariant 0 <= j <= n;loop invariant 0 <= k <= n;loop invariant i%3 == 0;loop invariant j%3 == 0;loop invariant k%3 == 0;loop invariant i <= j;loop invariant j <= k;loop invariant i <= k;loop invariant i >= n || (i < n && j < n && k < n) is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n; loop invariant j >= i; loop invariant k >= j; loop invariant i <= SIZE;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n; loop invariant j >= i; loop invariant k >= j; loop invariant i <= SIZE is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i + j + k == 3 * n;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant i >= 0;\nloop invariant j >= 0;\nloop invariant k >= 0;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i + j + k == 3 * n is preserved but not established.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j % 3 == 0 is partially proven to be inductive.\nloop invariant k % 3 == 0 is partially proven to be inductive.\nloop invariant i <= SIZE is partially proven to be inductive.\nloop invariant j <= SIZE is partially proven to be inductive.\nloop invariant k <= SIZE is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant n > 0 ==> (i % (SIZE + 2) == 0) is partially proven to be inductive.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\nloop invariant i5: i % 3 == 0;\nloop invariant i6: j % 3 == 0;\nloop invariant i7: k % 3 == 0;\n\n\n\nloop invariant i11: i >= 0;\nloop invariant i12: j >= 0;\nloop invariant i13: k >= 0;\nloop invariant i14: i == j;\nloop invariant i15: j == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= SIZE;\nloop invariant j <= SIZE;\nloop invariant k <= SIZE;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i % 3 == 0;\nloop invariant j % 3 == 0;\nloop invariant k % 3 == 0;\nloop invariant i % (SIZE + 2) == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant i <= SIZE is established but not preserved.\nloop invariant j <= SIZE is partially proven to be inductive.\nloop invariant k <= SIZE is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant i % 3 == 0 is partially proven to be inductive.\nloop invariant j % 3 == 0 is partially proven to be inductive.\nloop invariant k % 3 == 0 is partially proven to be inductive.\nloop invariant i % (SIZE + 2) == 0 is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\nloop invariant i5: i == j;\nloop invariant i6: j == k;\nloop invariant i7: i % 3 == 0;\nloop invariant i8: j % 3 == 0;\nloop invariant i9: k % 3 == 0;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant 0 <= k <= n;\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant k <= n;\nloop invariant i == j;\nloop invariant j == k;\nloop invariant i == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= j <= n is partially proven to be inductive.\nloop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant j <= n is partially proven to be inductive.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant i == j is partially proven to be inductive.\nloop invariant j == k is partially proven to be inductive.\nloop invariant i == n is preserved but not established.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\nloop invariant i7: i == j;\nloop invariant i8: j == k;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 21: unbound logic variable x. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: i % 3 == j % 3;\nloop invariant i3: i % 3 == k % 3;\nloop invariant i4: i % 3 == 0;\nloop invariant i5: i % 3 == 3 * x;\nloop invariant i6: i % 3 == 3 * y;\nloop invariant i7: i % 3 == 3 * z;\nloop invariant i8: i1;\nloop invariant i9: i2;\nloop invariant i10: i3;\nloop invariant i11: i4;\nloop invariant i12: i5;\nloop invariant i13: i6;\nloop invariant i14: i7;\nloop invariant i15: i8;\nloop invariant i16: i9;\nloop invariant i17: i10;\nloop invariant i18: i11;\nloop invariant i19: i12;\nloop invariant i20: i13;\nloop invariant i21: i14;\nloop invariant i22: i15;\nloop invariant i23: i16;\nloop invariant i24: i17;\nloop invariant i25: i18;\nloop invariant i26: i19;\nloop invariant i27: i20;\nloop invariant i28: i21;\nloop invariant i29: i22;\nloop invariant i30: i23;\nloop invariant i31: i24;\nloop invariant i32: i25;\nloop invariant i33: i26;\nloop invariant i34: i27;\nloop invariant i35: i28;\nloop invariant i36: i29;\nloop invariant i37: i30;\nloop invariant i38: i31;\nloop invariant i39: i32;\nloop invariant i40: i33;\nloop invariant i41: i34;\nloop invariant i42: i35;\nloop invariant i43: i36;\nloop invariant i44: i37;\nloop invariant i45: i38;\nloop invariant i46: i39;\nloop invariant i47: i40;\nloop invariant i48: i41;\nloop invariant i49: i42;\nloop invariant i50: i43;\nloop invariant i51: i44;\nloop invariant i52: i45;\nloop invariant i53: i46;\nloop invariant i54: i47;\nloop invariant i55: i48;\nloop invariant i56: i49;\nloop invariant i57: i50;\nloop invariant i58: i51;\nloop invariant i59: i52;\nloop invariant i60: i53;\nloop invariant i61: i54;\nloop invariant i62: i55;\nloop invariant i63: i56;\nloop invariant i64: i57;\nloop invariant i65: i58;\nloop invariant i66: i59;\nloop invariant i67: i60;\nloop invariant i68: i61;\nloop invariant i69: i62;\nloop invariant i70: i63;\nloop invariant i71: i64;\nloop invariant i72: i65;\nloop invariant i73: i66;\nloop invariant i74: i67;\nloop invariant i75: i68;\nloop invariant i76: i69;\nloop invariant i77: i70;\nloop invariant i78: i71;\nloop invariant i79: i72;\nloop invariant i80: i73;\nloop invariant i81: i74;\nloop invariant i82: i75;\nloop invariant i83: i76;\nloop invariant i84: i77;\nloop invariant i85: i78;\nloop invariant i86: i79;\nloop invariant i87: i80;\nloop invariant i88: i81;\nloop invariant i89: i82;\nloop invariant i90: i83;\nloop invariant i91: i84;\nloop invariant i92: i85;\nloop invariant i93: i86;\nloop invariant i94: i87;\nloop invariant i95: i88;\nloop invariant i96: i89;\nloop invariant i97: i90;\nloop invariant i98: i91;\nloop invariant i99: i92;\nloop invariant i100: i93;\nloop invariant i101: i94;\nloop invariant i102: i95;\nloop invariant i103: i96;\nloop invariant i104: i97;\nloop invariant i105: i98;\nloop invariant i106: i99;\nloop invariant i107: i100;\nloop invariant i108: i101;\nloop invariant i109: i102;\nloop invariant i110: i103;\nloop invariant i111: i104;\nloop invariant i112: i105;\nloop invariant i113: i106;\nloop invariant i114: i107;\nloop invariant i115: i108;\nloop invariant i116: i109;\nloop invariant i117: i110;\nloop invariant i118: i111;\nloop invariant i119: i112;\nloop invariant i120: i113;\nloop invariant i121: i114;\nloop invariant i122: i115;\nloop invariant i123: i116;\nloop invariant i124: i117;\nloop invariant i125: i118;\nloop invariant i126: i119;\nloop invariant i127: i120;\nloop invariant i128: i121;\nloop invariant i129: i122;\nloop invariant i130: i123;\nloop invariant i131: i124;\nloop invariant i132: i125;\nloop invariant i133: i126;\nloop invariant i134: i127;\nloop invariant i135: i128;\nloop invariant i136: i129;\nloop invariant i137: i130;\nloop invariant i138: i131;\nloop invariant i139: i132;\nloop invariant i140: i133;\nloop invariant i141: i134;\nloop invariant i142: i135;\nloop invariant i143: i136;\nloop invariant i144: i137;\nloop invariant i145: i138;\nloop invariant i146: i139;\nloop invariant i147: i140;\nloop invariant i148: i141;\nloop invariant i149: i142;\nloop invariant i150: i143;\nloop invariant i151: i144;\nloop invariant i152: i145;\nloop invariant i153: i146;\nloop invariant i154: i147;\nloop invariant i155: i148;\nloop invariant i156: i149;\nloop invariant i157: i150;\nloop invariant i158: i151;\nloop invariant i159: i152;\nloop invariant i160: i153;\nloop invariant i161: i154;\nloop invariant i162: i155;\nloop invariant i163: i156;\nloop invariant i164: i157;\nloop invariant i165: i158;\nloop invariant i166: 0 <= i <= n * 3;\nloop invariant i167: 0 <= j <= n * 3;\nloop invariant i168: 0 <= k <= n * 3;\nloop invariant i169: i >= j && j >= k;\nloop invariant i170: i >= k && j >= k;\nloop invariant i171: i == j && j == k;\nloop invariant i172: i % (SIZE + 2) == 0 ==> n > 0;\nloop invariant i173: 0 <= j <= n;\nloop invariant i174: 0 <= k <= n;\nloop invariant i175: i % (SIZE + 2) == 0;\nloop invariant i176: 0 <= n <= SIZE;\nloop invariant i177: i == j;\nloop invariant i178: j == k;\nloop invariant i179: (i + 3 * n) == (k + 3 * n);\nloop invariant i180: (i + 3 * n) == (j + 3 * n);\nloop invariant i181: (k + 3 * n) == (j + 3 * n);\nloop invariant i182: (i + 3 * n) == (i + 3 * n);\nloop invariant i183: (k + 3 * n) == (k + 3 * n);\nloop invariant i184: (j + 3 * n) == (j + 3 * n);\nloop invariant i185: j == i;\nloop invariant i186: k == i;\nloop invariant i187: i + j + k == n * 3;\nloop invariant i188: j % 3 == 0;\nloop invariant i189: k % 3 == 0;\nloop invariant i190: i == j + 3 * i;\nloop invariant i191: i == k + 3 * i;\nloop invariant i192: i == n;\nloop invariant i193: n > 0 ==> (i % (SIZE + 2) == 0);\nloop invariant i194: 0 <= i <= min(n, SIZE);\nloop invariant i195: 0 <= j <= min(n, SIZE);\nloop invariant i196: 0 <= k <= min(n, SIZE);\nloop invariant i197: SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i198: i % 3 == j % 3 && j % 3 == k % 3;\nloop invariant i199: i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\nloop invariant i200: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\nloop invariant i201: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i202: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> SIZE + 2 <= i <= min(n, SIZE);\nloop invariant i203: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i <= n;\nloop invariant i204: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j <= n;\nloop invariant i205: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k <= n;\nloop invariant i206: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (SIZE + 2) <= i <= min(n, SIZE);\nloop invariant i207: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= n;\nloop invariant i208: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= n;\nloop invariant i209: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= n;\nloop invariant i210: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i < n ==> i + 3 <= min(n, SIZE);\nloop invariant i211: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> j < n ==> j + 3 <= min(n, SIZE);\nloop invariant i212: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> k < n ==> k + 3 <= min(n, SIZE);\nloop invariant i213: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % (SIZE + 2) == 0 ==> i % (SIZE + 2) == 0;\nloop invariant i214: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % (SIZE + 2) == 0 ==> j % (SIZE + 2) == 0;\nloop invariant i215: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (k + 3) % (SIZE + 2) == 0 ==> k % (SIZE + 2) == 0;\nloop invariant i216: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % 3 == 0 ==> i % 3 == 0;\nloop invariant i217: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % 3 == 0 ==> j % 3 == 0;\nloop invariant i218: 0 <= i <= n;loop invariant 0 <= j <= n;loop invariant 0 <= k <= n;loop invariant i%3 == 0;loop invariant j%3 == 0;loop invariant k%3 == 0;loop invariant i <= j;loop invariant j <= k;loop invariant i <= k;loop invariant i >= n || (i < n && j < n && k < n);\nloop invariant i219: 0 <= i <= n; loop invariant j >= i; loop invariant k >= j; loop invariant i <= SIZE;\nloop invariant i220: i + j + k == 3 * n;\nloop invariant i221: i <= SIZE;\nloop invariant i222: j <= SIZE;\nloop invariant i223: k <= SIZE;\nloop invariant i224: i >= 0;\nloop invariant i225: j >= 0;\nloop invariant i226: k >= 0;\nloop invariant i227: i <= n;\nloop invariant i228: j <= n;\nloop invariant i229: k <= n;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
            "combined_annotation_num_solver_calls": 188,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: i % 3 == j % 3;\nloop invariant i3: i % 3 == k % 3;\nloop invariant i4: i % 3 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i166: 0 <= i <= n * 3;\nloop invariant i167: 0 <= j <= n * 3;\nloop invariant i168: 0 <= k <= n * 3;\nloop invariant i169: i >= j && j >= k;\nloop invariant i170: i >= k && j >= k;\nloop invariant i171: i == j && j == k;\n\n\n\n\nloop invariant i176: 0 <= n <= SIZE;\nloop invariant i177: i == j;\nloop invariant i178: j == k;\nloop invariant i179: (i + 3 * n) == (k + 3 * n);\nloop invariant i180: (i + 3 * n) == (j + 3 * n);\nloop invariant i181: (k + 3 * n) == (j + 3 * n);\nloop invariant i182: (i + 3 * n) == (i + 3 * n);\nloop invariant i183: (k + 3 * n) == (k + 3 * n);\nloop invariant i184: (j + 3 * n) == (j + 3 * n);\nloop invariant i185: j == i;\nloop invariant i186: k == i;\n\nloop invariant i188: j % 3 == 0;\nloop invariant i189: k % 3 == 0;\n\n\n\n\n\n\n\n\nloop invariant i198: i % 3 == j % 3 && j % 3 == k % 3;\nloop invariant i199: i % 3 == 0 && j % 3 == 0 && k % 3 == 0;\nloop invariant i200: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> i == j && j == k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i216: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (i + 3) % 3 == 0 ==> i % 3 == 0;\nloop invariant i217: i % 3 == 0 && j % 3 == 0 && k % 3 == 0 ==> (j + 3) % 3 == 0 ==> j % 3 == 0;\n\n\n\n\n\n\nloop invariant i224: i >= 0;\nloop invariant i225: j >= 0;\nloop invariant i226: k >= 0;\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2*x;\nloop invariant z >= w;\nloop invariant z <= x;\nloop invariant w >= y;\nloop invariant x >= z;\nloop invariant y >= x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant (x >= z && w > y) ==> (x == -x && y == -y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant y >= 2*x;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant x == -x;\nloop invariant y == -y;\nloop invariant x < z;\nloop invariant w <= y;\nloop invariant w <= 3*x;\nloop invariant w >= y;\nloop invariant w == y;\nloop invariant w <= 0;\nloop invariant w >= 0;\nloop invariant w == 10;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant x != 4 ==> y == 2*x;\nloop invariant x == 4 ==> y == 3*x;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant w <= 2*y;\nloop invariant w >= 2*y;\nloop invariant 3*x >= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant z >= 0;\nloop invariant z <= 10;\nloop invariant w >= 0;\nloop invariant w <= 10;\nloop invariant x >= z;\nloop invariant w > y;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant 3*x >= y ==> (x >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 24;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant 3*x >= y;\nloop invariant 3*x >= y ==> x >= z && w > y || x < 4;\nloop invariant x >= z && w > y ==> x = -x && y = -y;\nloop invariant x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x >= 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x >= (3 * y);\nloop invariant x >= (3 * z);\nloop invariant w >= y;\nloop invariant x >= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4;\nloop invariant y <= 10;\nloop invariant z <= 10;\nloop invariant w <= 10;\nloop invariant x >= (3 * y) ==> x >= 0;\nloop invariant x >= (3 * z) ==> x >= 0;\nloop invariant w >= y ==> w >= 0;\nloop invariant x >= z ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 3;\nloop invariant -1000 <= y <= 1000;\nloop invariant -1000 <= z <= 1000;\nloop invariant -1000 <= w <= 1000;\n*/\n```",
                "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant w >= z;\nloop invariant w >= y;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x >= 0;\nloop invariant x >= z - 10;\nloop invariant x >= w - 10;\nloop invariant x >= 0 ==> x < 100000;\nloop invariant y >= 0 ==> y < 100000;\nloop invariant z >= 0 ==> z < 100000;\nloop invariant w >= 0 ==> w < 100000;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 100000;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 2; loop invariant 0 <= y <= z; loop invariant 0 <= z; loop invariant 0 <= w; loop invariant 0 <= w <= z; loop invariant x + y + z + w >= 0; loop invariant x + y + z + w <= 100000; loop invariant x + y + z + w >= 3*x; loop invariant x + y + z + w >= 3*x + y; loop invariant x + y + z + w >= 3*x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant z >= 0;\nloop invariant z <= 4;\nloop invariant w >= 0;\nloop invariant w <= 10;\nloop invariant 3*x >= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\nloop invariant x <= 4;\nloop invariant y <= x;\nloop invariant w <= z;\nloop invariant y <= w;\nloop invariant 3*x <= y || w <= 3*x;\nloop invariant 3*x <= y || x <= 0;\nloop invariant x <= 0 || y <= x;\nloop invariant x <= 0 || 3*x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant w >= y;\nloop invariant 3*x >= y;\nloop invariant (unknown_int() ==> x >= 0);\nloop invariant (unknown_int() ==> y >= 0);\nloop invariant (unknown_int() ==> z >= 0);\nloop invariant (unknown_int() ==> w >= 0);\nloop invariant (unknown_int() ==> x <= 100000);\nloop invariant (unknown_int() ==> y <= 100000);\nloop invariant (unknown_int() ==> z <= 100000);\nloop invariant (unknown_int() ==> w <= 100000);\nloop invariant (unknown_int() ==> x >= y);\nloop invariant (unknown_int() ==> x >= z);\nloop invariant (unknown_int() ==> w >= y);\nloop invariant (unknown_int() ==> 3*x >= y);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 5;\nloop invariant 0 <= y <= 2*x;\nloop invariant 0 <= z <= x;\nloop invariant 0 <= w <= 10*x;\nloop invariant x >= z;\nloop invariant y >= -z;\nloop invariant y >= -x;\nloop invariant w >= x;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= y <= 2*x;\nloop invariant z >= w;\nloop invariant z <= x;\nloop invariant w >= y;\nloop invariant x >= z;\nloop invariant y >= x;\nloop invariant x >= y;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant (x >= z && w > y) ==> (x == -x && y == -y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is established but not preserved.\nloop invariant 0 <= y <= 2*x is partially proven to be inductive.\nloop invariant z >= w is partially proven to be inductive.\nloop invariant z <= x is partially proven to be inductive.\nloop invariant w >= y is established but not preserved.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant y >= x is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant (x >= z && w > y) ==> (x == -x && y == -y) is partially proven to be inductive.\nloop invariant (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y) is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\nloop invariant i3: z >= w;\n\n\n\nloop invariant i7: y >= x;\n\nloop invariant i9: y >= 0;\nloop invariant i10: x >= 0;\nloop invariant i11: z >= 0;\nloop invariant i12: w >= 0;\nloop invariant i13: (x >= z && w > y) ==> (x == -x && y == -y);\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 15,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant y >= 2*x;\nloop invariant z == 0;\nloop invariant w == 0;\nloop invariant x == -x;\nloop invariant y == -y;\nloop invariant x < z;\nloop invariant w <= y;\nloop invariant w <= 3*x;\nloop invariant w >= y;\nloop invariant w == y;\nloop invariant w <= 0;\nloop invariant w >= 0;\nloop invariant w == 10;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\nloop invariant w == 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 4 is preserved but not established.\nloop invariant y >= 2*x is partially proven to be inductive.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant w == 0 is partially proven to be inductive.\nloop invariant x == -x is partially proven to be inductive.\nloop invariant y == -y is partially proven to be inductive.\nloop invariant x < z is partially proven to be inductive.\nloop invariant w <= y is partially proven to be inductive.\nloop invariant w <= 3*x is partially proven to be inductive.\nloop invariant w >= y is partially proven to be inductive.\nloop invariant w == y is partially proven to be inductive.\nloop invariant w <= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant w == 10 is partially proven to be inductive.\nloop invariant w == 100000 is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i13: w >= 0;\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (w - 1) * w / 2);\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100000 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant 0 <= z <= 100000 is partially proven to be inductive.\nloop invariant 0 <= w <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= (1 + (w - 1) * w / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant x != 4 ==> y == 2*x;\nloop invariant x == 4 ==> y == 3*x;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant w <= 2*y;\nloop invariant w >= 2*y;\nloop invariant 3*x >= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is established but not preserved.\nloop invariant x != 4 ==> y == 2*x is partially proven to be inductive.\nloop invariant x == 4 ==> y == 3*x is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant w <= 2*y is partially proven to be inductive.\nloop invariant w >= 2*y is established but not preserved.\nloop invariant 3*x >= y is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\nloop invariant i5: z >= 0;\nloop invariant i6: w >= 0;\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x >= 0;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant z >= 0;\nloop invariant z <= 10;\nloop invariant w >= 0;\nloop invariant w <= 10;\nloop invariant x >= z;\nloop invariant w > y;\nloop invariant x >= -x;\nloop invariant y >= -y;\nloop invariant 3*x >= y ==> (x >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant 0 <= y <= 10 is partially proven to be inductive.\nloop invariant 0 <= z <= 10 is partially proven to be inductive.\nloop invariant 0 <= w <= 10 is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 10 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 10 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant w <= 10 is partially proven to be inductive.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant w > y is preserved but not established.\nloop invariant x >= -x is partially proven to be inductive.\nloop invariant y >= -y is partially proven to be inductive.\nloop invariant 3*x >= y ==> (x >= 0) is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\nloop invariant i9: z >= 0;\n\nloop invariant i11: w >= 0;\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 14,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 24;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant 3*x >= y;\nloop invariant 3*x >= y ==> x >= z && w > y || x < 4;\nloop invariant x >= z && w > y ==> x = -x && y = -y;\nloop invariant x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x >= 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 23: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\nloop invariant i8: x < 4 ==> x >= z && w > y || x < 4;\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 0 <= y <= 10;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant x >= (3 * y);\nloop invariant x >= (3 * z);\nloop invariant w >= y;\nloop invariant x >= z;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 4;\nloop invariant y <= 10;\nloop invariant z <= 10;\nloop invariant w <= 10;\nloop invariant x >= (3 * y) ==> x >= 0;\nloop invariant x >= (3 * z) ==> x >= 0;\nloop invariant w >= y ==> w >= 0;\nloop invariant x >= z ==> x >= 0;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant x <= 4 ==> x <= 4;\nloop invariant y <= 10 ==> y <= 10;\nloop invariant z <= 10 ==> z <= 10;\nloop invariant w <= 10 ==> w <= 10;\nloop invariant x >= (3 * y) ==> x >= (3 * y);\nloop invariant x >= (3 * z) ==> x >= (3 * z);\nloop invariant w >= y ==> w >= y;\nloop invariant x >= z ==> x >= z;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant z >= 0 ==> z >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 4 is preserved but not established.\nloop invariant 0 <= y <= 10 is partially proven to be inductive.\nloop invariant 0 <= z <= 10 is partially proven to be inductive.\nloop invariant 0 <= w <= 10 is partially proven to be inductive.\nloop invariant x >= (3 * y) is partially proven to be inductive.\nloop invariant x >= (3 * z) is partially proven to be inductive.\nloop invariant w >= y is partially proven to be inductive.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y <= 10 is partially proven to be inductive.\nloop invariant z <= 10 is partially proven to be inductive.\nloop invariant w <= 10 is partially proven to be inductive.\nloop invariant x >= (3 * y) ==> x >= 0 is partially proven to be inductive.\nloop invariant x >= (3 * z) ==> x >= 0 is partially proven to be inductive.\nloop invariant w >= y ==> w >= 0 is partially proven to be inductive.\nloop invariant x >= z ==> x >= 0 is partially proven to be inductive.\nloop invariant x >= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 ==> z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 ==> w >= 0 is partially proven to be inductive.\nloop invariant x <= 4 ==> x <= 4 is partially proven to be inductive.\nloop invariant y <= 10 ==> y <= 10 is partially proven to be inductive.\nloop invariant z <= 10 ==> z <= 10 is partially proven to be inductive.\nloop invariant w <= 10 ==> w <= 10 is partially proven to be inductive.\nloop invariant x >= (3 * y) ==> x >= (3 * y) is partially proven to be inductive.\nloop invariant x >= (3 * z) ==> x >= (3 * z) is partially proven to be inductive.\nloop invariant w >= y ==> w >= y is partially proven to be inductive.\nloop invariant x >= z ==> x >= z is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: z >= 0;\nloop invariant i12: w >= 0;\n\n\n\n\n\nloop invariant i18: x >= (3 * z) ==> x >= 0;\nloop invariant i19: w >= y ==> w >= 0;\nloop invariant i20: x >= z ==> x >= 0;\nloop invariant i21: x >= 0 ==> x >= 0;\nloop invariant i22: y >= 0 ==> y >= 0;\nloop invariant i23: z >= 0 ==> z >= 0;\nloop invariant i24: w >= 0 ==> w >= 0;\nloop invariant i25: x <= 4 ==> x <= 4;\nloop invariant i26: y <= 10 ==> y <= 10;\nloop invariant i27: z <= 10 ==> z <= 10;\nloop invariant i28: w <= 10 ==> w <= 10;\nloop invariant i29: x >= (3 * y) ==> x >= (3 * y);\nloop invariant i30: x >= (3 * z) ==> x >= (3 * z);\nloop invariant i31: w >= y ==> w >= y;\nloop invariant i32: x >= z ==> x >= z;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 3;\nloop invariant -1000 <= y <= 1000;\nloop invariant -1000 <= z <= 1000;\nloop invariant -1000 <= w <= 1000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 3 is established but not preserved.\nloop invariant -1000 <= y <= 1000 is established but not preserved.\nloop invariant -1000 <= z <= 1000 is partially proven to be inductive.\nloop invariant -1000 <= w <= 1000 is partially proven to be inductive.\nAssertion 3 * x >= y: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant y >= 0;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant w >= z;\nloop invariant w >= y;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x >= 0;\nloop invariant x >= z - 10;\nloop invariant x >= w - 10;\nloop invariant x >= 0 ==> x < 100000;\nloop invariant y >= 0 ==> y < 100000;\nloop invariant z >= 0 ==> z < 100000;\nloop invariant w >= 0 ==> w < 100000;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\nloop invariant x >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant x >= 0 ==> x >= z - 10;\nloop invariant x >= 0 ==> x >= w - 10;\nloop invariant x >= 0 ==> x <= 100000;\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100000;\nloop invariant z >= 0 ==> z >= 0;\nloop invariant z >= 0 ==> z <= 100000;\nloop invariant w >= 0 ==> w >= 0;\nloop invariant w >= 0 ==> w <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y >= 0 is established but not preserved.\nloop invariant y <= 100000 is established but not preserved.\nloop invariant x >= y is established but not preserved.\nloop invariant w >= z is partially proven to be inductive.\nloop invariant w >= y is established but not preserved.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x >= z - 10 is established but not preserved.\nloop invariant x >= w - 10 is established but not preserved.\nloop invariant x >= 0 ==> x < 100000 is established but not preserved.\nloop invariant y >= 0 ==> y < 100000 is partially proven to be inductive.\nloop invariant z >= 0 ==> z < 100000 is established but not preserved.\nloop invariant w >= 0 ==> w < 100000 is established but not preserved.\nloop invariant x >= 0 ==> x <= 100000 is partially proven to be inductive.\nloop invariant y >= 0 ==> y <= 100000 is partially proven to be inductive.\nloop invariant z >= 0 ==> z <= 100000 is partially proven to be inductive.\nloop invariant w >= 0 ==> w <= 100000 is partially proven to be inductive.\nloop invariant x >= 0 ==> x >= z - 10 is partially proven to be inductive.\nloop invariant x >= 0 ==> x >= w - 10 is partially proven to be inductive.\nloop invariant y >= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant z >= 0 ==> z >= 0 is partially proven to be inductive.\nloop invariant w >= 0 ==> w >= 0 is partially proven to be inductive.\nloop invariant x >= 0 ==> x >= 0 is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\nloop invariant i4: w >= z;\n\nloop invariant i6: z >= 0;\nloop invariant i7: w >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: y >= 0 ==> y >= 0;\nloop invariant i22: z >= 0 ==> z >= 0;\nloop invariant i23: w >= 0 ==> w >= 0;\nloop invariant i24: x >= 0 ==> x >= 0;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 0 <= z <= 10;\nloop invariant 0 <= w <= 10;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant y <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is established but not preserved.\nloop invariant 0 <= z <= 10 is partially proven to be inductive.\nloop invariant 0 <= w <= 10 is partially proven to be inductive.\nloop invariant y >= 0 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y <= 100000 is established but not preserved.\nAssertion 3 * x >= y: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 2; loop invariant 0 <= y <= z; loop invariant 0 <= z; loop invariant 0 <= w; loop invariant 0 <= w <= z; loop invariant x + y + z + w >= 0; loop invariant x + y + z + w <= 100000; loop invariant x + y + z + w >= 3*x; loop invariant x + y + z + w >= 3*x + y; loop invariant x + y + z + w >= 3*x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 2; loop invariant 0 <= y <= z; loop invariant 0 <= z; loop invariant 0 <= w; loop invariant 0 <= w <= z; loop invariant x + y + z + w >= 0; loop invariant x + y + z + w <= 100000; loop invariant x + y + z + w >= 3*x; loop invariant x + y + z + w >= 3*x + y; loop invariant x + y + z + w >= 3*x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w is preserved but not established.\nAssertion 3 * x >= y: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 4;\nloop invariant y >= 0;\nloop invariant y <= 10;\nloop invariant z >= 0;\nloop invariant z <= 4;\nloop invariant w >= 0;\nloop invariant w <= 10;\nloop invariant 3*x >= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is established but not preserved.\nloop invariant x <= 4 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 10 is established but not preserved.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 4 is partially proven to be inductive.\nloop invariant w >= 0 is partially proven to be inductive.\nloop invariant w <= 10 is partially proven to be inductive.\nloop invariant 3*x >= y is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\nloop invariant i5: z >= 0;\n\nloop invariant i7: w >= 0;\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\nloop invariant x <= 4;\nloop invariant y <= x;\nloop invariant w <= z;\nloop invariant y <= w;\nloop invariant 3*x <= y || w <= 3*x;\nloop invariant 3*x <= y || x <= 0;\nloop invariant x <= 0 || y <= x;\nloop invariant x <= 0 || 3*x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant 0 <= z is partially proven to be inductive.\nloop invariant 0 <= w is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y <= x is established but not preserved.\nloop invariant w <= z is partially proven to be inductive.\nloop invariant y <= w is partially proven to be inductive.\nloop invariant 3*x <= y || w <= 3*x is partially proven to be inductive.\nloop invariant 3*x <= y || x <= 0 is partially proven to be inductive.\nloop invariant x <= 0 || y <= x is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z is partially proven to be inductive.\nloop invariant x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\nloop invariant i3: 0 <= z;\nloop invariant i4: 0 <= w;\n\n\nloop invariant i7: w <= z;\n\n\n\n\n\n\n\nloop invariant i15: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z;\nloop invariant i16: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y;\nloop invariant i17: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x;\nloop invariant i18: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w;\nloop invariant i19: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z;\nloop invariant i20: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y;\nloop invariant i21: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w;\nloop invariant i22: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i23: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i24: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i25: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i26: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i27: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i28: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i29: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 17,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant 0 <= y <= 100000;\nloop invariant 0 <= z <= 100000;\nloop invariant 0 <= w <= 100000;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant w >= 0;\nloop invariant x <= 100000;\nloop invariant y <= 100000;\nloop invariant z <= 100000;\nloop invariant w <= 100000;\nloop invariant x >= y;\nloop invariant x >= z;\nloop invariant w >= y;\nloop invariant 3*x >= y;\nloop invariant (unknown_int() ==> x >= 0);\nloop invariant (unknown_int() ==> y >= 0);\nloop invariant (unknown_int() ==> z >= 0);\nloop invariant (unknown_int() ==> w >= 0);\nloop invariant (unknown_int() ==> x <= 100000);\nloop invariant (unknown_int() ==> y <= 100000);\nloop invariant (unknown_int() ==> z <= 100000);\nloop invariant (unknown_int() ==> w <= 100000);\nloop invariant (unknown_int() ==> x >= y);\nloop invariant (unknown_int() ==> x >= z);\nloop invariant (unknown_int() ==> w >= y);\nloop invariant (unknown_int() ==> 3*x >= y);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 33: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\nloop invariant i7: z >= 0;\nloop invariant i8: w >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 5;\nloop invariant 0 <= y <= 2*x;\nloop invariant 0 <= z <= x;\nloop invariant 0 <= w <= 10*x;\nloop invariant x >= z;\nloop invariant y >= -z;\nloop invariant y >= -x;\nloop invariant w >= x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 5 is preserved but not established.\nloop invariant 0 <= y <= 2*x is partially proven to be inductive.\nloop invariant 0 <= z <= x is partially proven to be inductive.\nloop invariant 0 <= w <= 10*x is partially proven to be inductive.\nloop invariant x >= z is partially proven to be inductive.\nloop invariant y >= -z is partially proven to be inductive.\nloop invariant y >= -x is partially proven to be inductive.\nloop invariant w >= x is partially proven to be inductive.\nAssertion 3 * x >= y: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 69: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\nloop invariant i1: 0 <= x <= 4;\nloop invariant i2: 0 <= y <= 2*x;\nloop invariant i3: z >= w;\nloop invariant i4: z <= x;\nloop invariant i5: w >= y;\nloop invariant i6: x >= z;\nloop invariant i7: y >= x;\nloop invariant i8: x >= y;\nloop invariant i9: y >= 0;\nloop invariant i10: x >= 0;\nloop invariant i11: z >= 0;\nloop invariant i12: w >= 0;\nloop invariant i13: (x >= z && w > y) ==> (x == -x && y == -y);\nloop invariant i14: (x >= 4) ==> (x >= 4 && y >= x && x >= z && z >= 0 && w >= y);\nloop invariant i15: 1 <= x <= 4;\nloop invariant i16: y >= 2*x;\nloop invariant i17: z == 0;\nloop invariant i18: w == 0;\nloop invariant i19: x == -x;\nloop invariant i20: y == -y;\nloop invariant i21: x < z;\nloop invariant i22: w <= y;\nloop invariant i23: w <= 3*x;\nloop invariant i24: w == y;\nloop invariant i25: w <= 0;\nloop invariant i26: w == 10;\nloop invariant i27: w == 100000;\nloop invariant i28: 0 <= x <= 100000;\nloop invariant i29: 0 <= y <= 100000;\nloop invariant i30: 0 <= z <= 100000;\nloop invariant i31: 0 <= w <= 100000;\nloop invariant i32: x >= (1 + (y - 1) * y / 2);\nloop invariant i33: x >= (1 + (w - 1) * w / 2);\nloop invariant i34: x >= (1 + (z - 1) * z / 2);\nloop invariant i35: x != 4 ==> y == 2*x;\nloop invariant i36: x == 4 ==> y == 3*x;\nloop invariant i37: w <= 2*y;\nloop invariant i38: w >= 2*y;\nloop invariant i39: 3*x >= y;\nloop invariant i40: 0 <= y <= 10;\nloop invariant i41: 0 <= z <= 10;\nloop invariant i42: 0 <= w <= 10;\nloop invariant i43: x <= 4;\nloop invariant i44: y <= 10;\nloop invariant i45: z <= 10;\nloop invariant i46: w <= 10;\nloop invariant i47: w > y;\nloop invariant i48: x >= -x;\nloop invariant i49: y >= -y;\nloop invariant i50: 3*x >= y ==> (x >= 0);\nloop invariant i51: 0 <= y <= 24;\nloop invariant i52: 3*x >= y ==> x >= z && w > y || x < 4;\nloop invariant i53: x >= z && w > y ==> x = -x && y = -y;\nloop invariant i54: x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i55: x >= 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10;\nloop invariant i56: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4;\nloop invariant i57: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i58: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i59: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i60: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i61: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i62: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i63: x < 4 ==> x = x + 1 && y = y + 3 && z = z + 10 && w = w + 10 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4 ==> x >= z && w > y || x < 4;\nloop invariant i64: x >= (3 * y);\nloop invariant i65: x >= (3 * z);\nloop invariant i66: x >= (3 * y) ==> x >= 0;\nloop invariant i67: x >= (3 * z) ==> x >= 0;\nloop invariant i68: w >= y ==> w >= 0;\nloop invariant i69: x >= z ==> x >= 0;\nloop invariant i70: x >= 0 ==> x >= 0;\nloop invariant i71: y >= 0 ==> y >= 0;\nloop invariant i72: z >= 0 ==> z >= 0;\nloop invariant i73: w >= 0 ==> w >= 0;\nloop invariant i74: x <= 4 ==> x <= 4;\nloop invariant i75: y <= 10 ==> y <= 10;\nloop invariant i76: z <= 10 ==> z <= 10;\nloop invariant i77: w <= 10 ==> w <= 10;\nloop invariant i78: x >= (3 * y) ==> x >= (3 * y);\nloop invariant i79: x >= (3 * z) ==> x >= (3 * z);\nloop invariant i80: w >= y ==> w >= y;\nloop invariant i81: x >= z ==> x >= z;\nloop invariant i82: 0 <= x <= 3;\nloop invariant i83: -1000 <= y <= 1000;\nloop invariant i84: -1000 <= z <= 1000;\nloop invariant i85: -1000 <= w <= 1000;\nloop invariant i86: y <= 100000;\nloop invariant i87: w >= z;\nloop invariant i88: x >= z - 10;\nloop invariant i89: x >= w - 10;\nloop invariant i90: x >= 0 ==> x < 100000;\nloop invariant i91: y >= 0 ==> y < 100000;\nloop invariant i92: z >= 0 ==> z < 100000;\nloop invariant i93: w >= 0 ==> w < 100000;\nloop invariant i94: x >= 0 ==> x <= 100000;\nloop invariant i95: y >= 0 ==> y <= 100000;\nloop invariant i96: z >= 0 ==> z <= 100000;\nloop invariant i97: w >= 0 ==> w <= 100000;\nloop invariant i98: x >= 0 ==> x >= z - 10;\nloop invariant i99: x >= 0 ==> x >= w - 10;\nloop invariant i100: 1 <= x <= 2; loop invariant 0 <= y <= z; loop invariant 0 <= z; loop invariant 0 <= w; loop invariant 0 <= w <= z; loop invariant x + y + z + w >= 0; loop invariant x + y + z + w <= 100000; loop invariant x + y + z + w >= 3*x; loop invariant x + y + z + w >= 3*x + y; loop invariant x + y + z + w >= 3*x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z; loop invariant x + y + z + w >= 3*x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w + x + y + z + w - x - y - z - w;\nloop invariant i101: 0 <= x;\nloop invariant i102: z <= 4;\nloop invariant i103: 0 <= y;\nloop invariant i104: 0 <= z;\nloop invariant i105: 0 <= w;\nloop invariant i106: y <= x;\nloop invariant i107: w <= z;\nloop invariant i108: y <= w;\nloop invariant i109: 3*x <= y || w <= 3*x;\nloop invariant i110: 3*x <= y || x <= 0;\nloop invariant i111: x <= 0 || y <= x;\nloop invariant i112: x <= 0 || 3*x <= y;\nloop invariant i113: x <= 0 || 3*x <= y || w <= 3*x;\nloop invariant i114: x <= 0 || 3*x <= y || w <= 3*x || x <= y;\nloop invariant i115: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z;\nloop invariant i116: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y;\nloop invariant i117: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x;\nloop invariant i118: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w;\nloop invariant i119: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z;\nloop invariant i120: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y;\nloop invariant i121: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w;\nloop invariant i122: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i123: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i124: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i125: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i126: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i127: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i128: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i129: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i130: x <= 100000;\nloop invariant i131: z <= 100000;\nloop invariant i132: w <= 100000;\nloop invariant i133: (unknown_int() ==> x >= 0);\nloop invariant i134: (unknown_int() ==> y >= 0);\nloop invariant i135: (unknown_int() ==> z >= 0);\nloop invariant i136: (unknown_int() ==> w >= 0);\nloop invariant i137: (unknown_int() ==> x <= 100000);\nloop invariant i138: (unknown_int() ==> y <= 100000);\nloop invariant i139: (unknown_int() ==> z <= 100000);\nloop invariant i140: (unknown_int() ==> w <= 100000);\nloop invariant i141: (unknown_int() ==> x >= y);\nloop invariant i142: (unknown_int() ==> x >= z);\nloop invariant i143: (unknown_int() ==> w >= y);\nloop invariant i144: (unknown_int() ==> 3*x >= y);\nloop invariant i145: 1 <= x <= 5;\nloop invariant i146: 0 <= z <= x;\nloop invariant i147: 0 <= w <= 10*x;\nloop invariant i148: y >= -z;\nloop invariant i149: y >= -x;\nloop invariant i150: w >= x;\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
            "combined_annotation_num_solver_calls": 69,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\n/*@\n\n\nloop invariant i3: z >= w;\n\n\n\nloop invariant i7: y >= x;\n\nloop invariant i9: y >= 0;\nloop invariant i10: x >= 0;\nloop invariant i11: z >= 0;\nloop invariant i12: w >= 0;\nloop invariant i13: (x >= z && w > y) ==> (x == -x && y == -y);\n\n\nloop invariant i16: y >= 2*x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i39: 3*x >= y;\n\n\n\n\n\n\n\n\nloop invariant i48: x >= -x;\nloop invariant i49: y >= -y;\nloop invariant i50: 3*x >= y ==> (x >= 0);\n\n\n\nloop invariant i54: x < 4 ==> x >= z && w > y || x < 4;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i66: x >= (3 * y) ==> x >= 0;\nloop invariant i67: x >= (3 * z) ==> x >= 0;\nloop invariant i68: w >= y ==> w >= 0;\nloop invariant i69: x >= z ==> x >= 0;\nloop invariant i70: x >= 0 ==> x >= 0;\nloop invariant i71: y >= 0 ==> y >= 0;\nloop invariant i72: z >= 0 ==> z >= 0;\nloop invariant i73: w >= 0 ==> w >= 0;\nloop invariant i74: x <= 4 ==> x <= 4;\nloop invariant i75: y <= 10 ==> y <= 10;\nloop invariant i76: z <= 10 ==> z <= 10;\nloop invariant i77: w <= 10 ==> w <= 10;\nloop invariant i78: x >= (3 * y) ==> x >= (3 * y);\nloop invariant i79: x >= (3 * z) ==> x >= (3 * z);\nloop invariant i80: w >= y ==> w >= y;\nloop invariant i81: x >= z ==> x >= z;\n\n\n\n\n\nloop invariant i87: w >= z;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i101: 0 <= x;\n\nloop invariant i103: 0 <= y;\nloop invariant i104: 0 <= z;\nloop invariant i105: 0 <= w;\n\nloop invariant i107: w <= z;\n\n\n\n\n\n\nloop invariant i114: x <= 0 || 3*x <= y || w <= 3*x || x <= y;\nloop invariant i115: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z;\nloop invariant i116: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y;\nloop invariant i117: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x;\nloop invariant i118: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w;\nloop invariant i119: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z;\nloop invariant i120: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y;\nloop invariant i121: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w;\nloop invariant i122: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i123: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i124: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i125: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i126: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\nloop invariant i127: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w;\nloop invariant i128: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z;\nloop invariant i129: x <= 0 || 3*x <= y || w <= 3*x || x <= y || x <= z || w <= y || w <= 3*x || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y || x <= w || x <= z || x <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i147: 0 <= w <= 10*x;\nloop invariant i148: y >= -z;\nloop invariant i149: y >= -x;\n\n*/\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  while (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant x & 5 == 5 ==> x % 5 == 5;\nloop invariant x & 5 != 5 ==> x % 5 != 5;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x % 8 == 5;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant x % 8 == 5;\nloop invariant x < 20 ==> unknown_int();\nloop invariant x >= 5 ==> !unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant x % 8 == 5;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 5 == 5;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant !unknown_int() ==> x = 5;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 5 <= x;\nloop invariant x & 7 == 5;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= unknown_int();\nloop invariant x >= 5;\nloop invariant x <= 13;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x % 5 == 5;\nloop invariant x & 5 == 5;\nloop invariant x & 0xf == 5;\nloop invariant x & 0xff == 5;\nloop invariant x & 0xfff == 5;\nloop invariant x & 0xffff == 5;\nloop invariant x & 0xffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\n*/\n```",
                "```\n/*@\nloop invariant x >= 5;\nloop invariant x % 8 == 5;\nloop invariant x == 5 + 8 * i;\nloop invariant i >= 0;\nloop invariant i <= n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100001;\nloop invariant 1 <= y <= 100000;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x % 5 == 5;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant (x & 5) == 5;\nloop invariant x >= 8;\nloop invariant x <= 13;\nloop invariant x == 5 || x == 8 || x == 13;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant ( x >= 5 );\nloop invariant ( x % 8 == 5 );\nloop invariant ( unknown_int() );\nloop invariant ( x <= 134217727 );\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant x & 5 == 5 ==> x % 5 == 5;\nloop invariant x & 5 != 5 ==> x % 5 != 5;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: invalid operands to binary &; unexpected unsigned int and 𝔹. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x % 8 == 5;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is established but not preserved.\nloop invariant x % 8 == 5 is partially proven to be inductive.\nAssertion (x & 5) == 5: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant x % 8 == 5;\nloop invariant x < 20 ==> unknown_int();\nloop invariant x >= 5 ==> !unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant x % 8 == 5;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= UINT_MAX is partially proven to be inductive.\nloop invariant x % 8 == 5 is established but not preserved.\nAssertion (x & 5) == 5: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\nloop invariant i1: 0 <= x <= UINT_MAX;\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 5 == 5;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x % 5 == 5 is preserved but not established.\nAssertion (x & 5) == 5: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant !unknown_int() ==> x = 5;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 5 <= x;\nloop invariant x & 7 == 5;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= unknown_int();\nloop invariant x >= 5;\nloop invariant x <= 13;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x % 5 == 5;\nloop invariant x & 5 == 5;\nloop invariant x & 0xf == 5;\nloop invariant x & 0xff == 5;\nloop invariant x & 0xfff == 5;\nloop invariant x & 0xffff == 5;\nloop invariant x & 0xffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\nloop invariant x & 0x7fffffff == 5;\nloop invariant x & 0xffffffff == 5;\nloop invariant x & 0x1fffffff == 5;\nloop invariant x & 0x3fffffff == 5;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: invalid operands to binary &; unexpected unsigned int and 𝔹. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is established but not preserved.\nAssertion (x & 5) == 5: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant x >= 5;\nloop invariant x % 8 == 5;\nloop invariant x == 5 + 8 * i;\nloop invariant i >= 0;\nloop invariant i <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100001;\nloop invariant 1 <= y <= 100000;\nloop invariant x >= y;\nloop invariant x >= 1 + (y - 1) * y / 2;\nloop invariant x % 5 == 5;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant (x & 5) == 5;\nloop invariant x >= 8;\nloop invariant x <= 13;\nloop invariant x == 5 || x == 8 || x == 13;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant (x & 5) == 5 is partially proven to be inductive.\nloop invariant x >= 8 is preserved but not established.\nloop invariant x <= 13 is partially proven to be inductive.\nloop invariant x == 5 || x == 8 || x == 13 is partially proven to be inductive.\nAssertion (x & 5) == 5: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\nloop invariant i1: 0 <= x;\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant ( x >= 5 );\nloop invariant ( x % 8 == 5 );\nloop invariant ( unknown_int() );\nloop invariant ( x <= 134217727 );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\nloop invariant i1: 0 <= x <= 4;\nloop invariant i2: x & 5 == 5 ==> x % 5 == 5;\nloop invariant i3: x & 5 != 5 ==> x % 5 != 5;\nloop invariant i4: 0 <= x <= 2147483647;\nloop invariant i5: x % 8 == 5;\nloop invariant i6: 0 <= x <= 20;\nloop invariant i7: x < 20 ==> unknown_int();\nloop invariant i8: x >= 5 ==> !unknown_int();\nloop invariant i9: 0 <= x <= UINT_MAX;\nloop invariant i10: 0 <= x;\nloop invariant i11: x % 5 == 5;\nloop invariant i12: !unknown_int() ==> x = 5;\nloop invariant i13: 0 <= x <= 100000;\nloop invariant i14: x >= (1 + (y - 1) * y / 2);\nloop invariant i15: 5 <= x;\nloop invariant i16: x & 7 == 5;\nloop invariant i17: 1 <= unknown_int();\nloop invariant i18: x >= 5;\nloop invariant i19: x <= 13;\nloop invariant i20: x & 5 == 5;\nloop invariant i21: x & 0xf == 5;\nloop invariant i22: x & 0xff == 5;\nloop invariant i23: x & 0xfff == 5;\nloop invariant i24: x & 0xffff == 5;\nloop invariant i25: x & 0xffffff == 5;\nloop invariant i26: x & 0x7fffffff == 5;\nloop invariant i27: x & 0xffffffff == 5;\nloop invariant i28: x & 0x1fffffff == 5;\nloop invariant i29: x & 0x3fffffff == 5;\nloop invariant i30: x == 5 + 8 * i;\nloop invariant i31: i >= 0;\nloop invariant i32: i <= n;\nloop invariant i33: 1 <= x <= 100001;\nloop invariant i34: 1 <= y <= 100000;\nloop invariant i35: x >= y;\nloop invariant i36: x >= 1 + (y - 1) * y / 2;\nloop invariant i37: (x & 5) == 5;\nloop invariant i38: x >= 8;\nloop invariant i39: x == 5 || x == 8 || x == 13;\nloop invariant i40: ( x >= 5 );\nloop invariant i41: ( x % 8 == 5 );\nloop invariant i42: ( unknown_int() );\nloop invariant i43: ( x <= 134217727 );\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
            "combined_annotation_num_solver_calls": 41,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 5;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: 0 <= x <= UINT_MAX;\nloop invariant i10: 0 <= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n\n  return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 0 <= i <= 10;\nloop invariant j <= 10 - i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant j >= i;\n*/\n```",
                "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= -5;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == -1 + 10 - i/2;\nloop invariant i <= j;\n*/\n```",
                "```\n/*@\nloop invariant i <= 11;\nloop invariant j >= -9;\nloop invariant i >= j - 1;\nloop invariant i % 2 == 0;\nloop invariant i >= 1;\nloop invariant i <= 10;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant j == 10 - i / 2;\nloop invariant i == 10 - j / 2;\nloop invariant i % 2 == 0 ==> i <= j;\nloop invariant i % 2 == 0 ==> i >= j - 1;\nloop invariant i == 10 - j / 2 ==> i <= j;\nloop invariant i == 10 - j / 2 ==> i >= j - 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= j <= 10;\nloop invariant i >= 1;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant j == -1 + 10;\nloop invariant j == 6;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i <= 11;\nloop invariant i <= j + 1;\nloop invariant i <= (j + 1) * 2 - 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= 2 * j - 1;\nloop invariant i >= j;\nloop invariant (j <= 10 ==> i <= 11);\nloop invariant (i <= 11 ==> j >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 11;\nloop invariant 0 <= j <= 9;\nloop invariant i <= j;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant i >= 1;\nloop invariant j >= -1;\nloop invariant (i >= 1) ==> (j >= 6);\nloop invariant (i < 11) ==> (j >= 1);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i <= 11;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= j;\nloop invariant i - j >= 1;\nloop invariant i - j <= 10;\nloop invariant i + j == 11;\nloop invariant i * j == 10;\nloop invariant i / j == 1;\nloop invariant i % j == 1;\nloop invariant i * j % 10 == 10;\nloop invariant i * j % 11 == 0;\nloop invariant i * j % 2 == 0;\nloop invariant i * j % 3 == 0;\nloop invariant i * j % 4 == 0;\nloop invariant i * j % 5 == 0;\nloop invariant i * j % 6 == 0;\nloop invariant i * j % 7 == 0;\nloop invariant i * j % 8 == 0;\nloop invariant i * j % 9 == 0;\nloop invariant i * j % 10 == 0;\nloop invariant i * j % 11 == 0;\nloop invariant i * j % 12 == 0;\nloop invariant i * j % 13 == 0;\nloop invariant i * j % 14 == 0;\nloop invariant i * j % 15 == 0;\nloop invariant i * j % 16 == 0;\nloop invariant i * j % 17 == 0;\nloop invariant i * j % 18 == 0;\nloop invariant i * j % 19 == 0;\nloop invariant i * j % 20 == 0;\nloop invariant i * j % 21 == 0;\nloop invariant i * j % 22 == 0;\nloop invariant i * j % 23 == 0;\nloop invariant i * j % 24 == 0;\nloop invariant i * j % 25 == 0;\nloop invariant i * j % 26 == 0;\nloop invariant i * j % 27 == 0;\nloop invariant i * j % 28 == 0;\nloop invariant i * j % 29 == 0;\nloop invariant i * j % 30 == 0;\nloop invariant i * j % 31 == 0;\nloop invariant i * j % 32 == 0;\nloop invariant i * j % 33 == 0;\nloop invariant i * j % 34 == 0;\nloop invariant i * j % 35 == 0;\nloop invariant i * j % 36 == 0;\nloop invariant i * j % 37 == 0;\nloop invariant i * j % 38 == 0;\nloop invariant i * j % 39 == 0;\nloop invariant i * j % 40 == 0;\nloop invariant i * j % 41 == 0;\nloop invariant i * j % 42 == 0;\nloop invariant i * j % 43 == 0;\nloop invariant i * j % 44 == 0;\nloop invariant i * j % 45 == 0;\nloop invariant i * j % 46 == 0;\nloop invariant i * j % 47 == 0;\nloop invariant i * j % 48 == 0;\nloop invariant i * j % 49 == 0;\nloop invariant i * j % 50 == 0;\nloop invariant i * j % 51 == 0;\nloop invariant i * j % 52 == 0;\nloop invariant i * j % 53 == 0;\nloop invariant i * j % 54 == 0;\nloop invariant i * j % 55 == 0;\nloop invariant i * j % 56 == 0;\nloop invariant i * j % 57 == 0;\nloop invariant i * j % 58 == 0;\nloop invariant i * j % 59 == 0;\nloop invariant i * j % 60 == 0;\nloop invariant i * j % 61 == 0;\nloop invariant i * j % 62 == 0;\nloop invariant i * j % 63 == 0;\nloop invariant i * j % 64 == 0;\nloop invariant i * j % 65 == 0;\nloop invariant i * j % 66 == 0;\nloop invariant i * j % 67 == 0;\nloop invariant i * j % 68 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= j;\nloop invariant j - i >= 0;\nloop invariant j - i <= 9;\nloop invariant j - i == 6;\nloop invariant i == 1;\nloop invariant j == 6;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 10 <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - i;\nloop invariant i <= j;\nloop invariant j <= 10;\nloop invariant i >= 1;\nloop invariant j >= 0;\nloop invariant j >= -1 + j;\nloop invariant j + 1 <= 10;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant j == 10 - i;\nloop invariant i % 2 == 1;\nloop invariant (i - 1) / 2 == j;\nloop invariant (i * (i + 1) / 2) <= j;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j >= 6;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant j >= i;\n*/\n```",
                "```\n/*@\nloop invariant i >= 1;\nloop invariant j >= 10;\nloop invariant j <= i + 8;\nloop invariant i <= 18;\nloop invariant j == 10 - i + 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 0 <= i <= 10;\nloop invariant j <= 10 - i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant j <= 10 - i is preserved but not established.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant j >= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 11 is established but not preserved.\nloop invariant j >= i is established but not preserved.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= 11;\nloop invariant j >= -5;\nloop invariant j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == -1 + 10 - i/2;\nloop invariant i <= j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant j >= -5 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == -1 + 10 - i/2 is preserved but not established.\nloop invariant i <= j is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i >= 1;\nloop invariant i2: i <= 11;\nloop invariant i3: j >= -5;\nloop invariant i4: j <= 10;\nloop invariant i5: i % 2 == 1;\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant i <= 11;\nloop invariant j >= -9;\nloop invariant i >= j - 1;\nloop invariant i % 2 == 0;\nloop invariant i >= 1;\nloop invariant i <= 10;\nloop invariant j >= 1;\nloop invariant j <= 9;\nloop invariant j == 10 - i / 2;\nloop invariant i == 10 - j / 2;\nloop invariant i % 2 == 0 ==> i <= j;\nloop invariant i % 2 == 0 ==> i >= j - 1;\nloop invariant i == 10 - j / 2 ==> i <= j;\nloop invariant i == 10 - j / 2 ==> i >= j - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i <= 11 is partially proven to be inductive.\nloop invariant j >= -9 is partially proven to be inductive.\nloop invariant i >= j - 1 is preserved but not established.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant j <= 9 is partially proven to be inductive.\nloop invariant j == 10 - i / 2 is partially proven to be inductive.\nloop invariant i == 10 - j / 2 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i <= j is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i >= j - 1 is partially proven to be inductive.\nloop invariant i == 10 - j / 2 ==> i <= j is partially proven to be inductive.\nloop invariant i == 10 - j / 2 ==> i >= j - 1 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i <= 11;\nloop invariant i2: j >= -9;\n\n\nloop invariant i5: i >= 1;\nloop invariant i6: i <= 10;\nloop invariant i7: j >= 1;\n\nloop invariant i9: j == 10 - i / 2;\n\n\nloop invariant i12: i % 2 == 0 ==> i >= j - 1;\nloop invariant i13: i == 10 - j / 2 ==> i <= j;\nloop invariant i14: i == 10 - j / 2 ==> i >= j - 1;\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= j <= 10;\nloop invariant i >= 1;\nloop invariant j >= i;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant j == -1 + 10;\nloop invariant j == 6;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant j == -1 + 10 is preserved but not established.\nloop invariant j == 6 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: i % 2 == 1;\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i <= 11;\nloop invariant i <= j + 1;\nloop invariant i <= (j + 1) * 2 - 1;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i <= 2 * j - 1;\nloop invariant i >= j;\nloop invariant (j <= 10 ==> i <= 11);\nloop invariant (i <= 11 ==> j >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant i <= (j + 1) * 2 - 1 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant i <= 2 * j - 1 is partially proven to be inductive.\nloop invariant i >= j is preserved but not established.\nloop invariant (j <= 10 ==> i <= 11) is partially proven to be inductive.\nloop invariant (i <= 11 ==> j >= 0) is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: i <= 11;\n\n\nloop invariant i5: i % 2 == 1;\n\n\n\nloop invariant i9: (j <= 10 ==> i <= 11);\nloop invariant i10: (i <= 11 ==> j >= 0);\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\nloop invariant 0 <= i <= j;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i < j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= j is established but not preserved.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is established but not preserved.\nloop invariant i < j is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\nloop invariant i2: i % 2 == 1;\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i;\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 11;\nloop invariant 0 <= j <= 9;\nloop invariant i <= j;\nloop invariant j >= 0;\nloop invariant i >= 0;\nloop invariant i >= 1;\nloop invariant j >= -1;\nloop invariant (i >= 1) ==> (j >= 6);\nloop invariant (i < 11) ==> (j >= 1);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\nloop invariant (i < 11) ==> (j >= 6);\nloop invariant (i < 11) ==> (i <= j);\nloop invariant (i < 11) ==> (j >= 0);\nloop invariant (i < 11) ==> (j >= -1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= 11 is partially proven to be inductive.\nloop invariant 0 <= j <= 9 is preserved but not established.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= -1 is partially proven to be inductive.\nloop invariant (i >= 1) ==> (j >= 6) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 1) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 0) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= -1) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 6) is partially proven to be inductive.\nloop invariant (i < 11) ==> (i <= j) is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\nloop invariant i4: j >= 0;\nloop invariant i5: i >= 0;\nloop invariant i6: i >= 1;\nloop invariant i7: j >= -1;\n\n\nloop invariant i10: (i < 11) ==> (j >= 0);\nloop invariant i11: (i < 11) ==> (j >= -1);\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 76,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant i <= 11;\nloop invariant i % 2 == 1;\nloop invariant j % 2 == 0;\nloop invariant i >= j;\nloop invariant i - j >= 1;\nloop invariant i - j <= 10;\nloop invariant i + j == 11;\nloop invariant i * j == 10;\nloop invariant i / j == 1;\nloop invariant i % j == 1;\nloop invariant i * j % 10 == 10;\nloop invariant i * j % 11 == 0;\nloop invariant i * j % 2 == 0;\nloop invariant i * j % 3 == 0;\nloop invariant i * j % 4 == 0;\nloop invariant i * j % 5 == 0;\nloop invariant i * j % 6 == 0;\nloop invariant i * j % 7 == 0;\nloop invariant i * j % 8 == 0;\nloop invariant i * j % 9 == 0;\nloop invariant i * j % 10 == 0;\nloop invariant i * j % 11 == 0;\nloop invariant i * j % 12 == 0;\nloop invariant i * j % 13 == 0;\nloop invariant i * j % 14 == 0;\nloop invariant i * j % 15 == 0;\nloop invariant i * j % 16 == 0;\nloop invariant i * j % 17 == 0;\nloop invariant i * j % 18 == 0;\nloop invariant i * j % 19 == 0;\nloop invariant i * j % 20 == 0;\nloop invariant i * j % 21 == 0;\nloop invariant i * j % 22 == 0;\nloop invariant i * j % 23 == 0;\nloop invariant i * j % 24 == 0;\nloop invariant i * j % 25 == 0;\nloop invariant i * j % 26 == 0;\nloop invariant i * j % 27 == 0;\nloop invariant i * j % 28 == 0;\nloop invariant i * j % 29 == 0;\nloop invariant i * j % 30 == 0;\nloop invariant i * j % 31 == 0;\nloop invariant i * j % 32 == 0;\nloop invariant i * j % 33 == 0;\nloop invariant i * j % 34 == 0;\nloop invariant i * j % 35 == 0;\nloop invariant i * j % 36 == 0;\nloop invariant i * j % 37 == 0;\nloop invariant i * j % 38 == 0;\nloop invariant i * j % 39 == 0;\nloop invariant i * j % 40 == 0;\nloop invariant i * j % 41 == 0;\nloop invariant i * j % 42 == 0;\nloop invariant i * j % 43 == 0;\nloop invariant i * j % 44 == 0;\nloop invariant i * j % 45 == 0;\nloop invariant i * j % 46 == 0;\nloop invariant i * j % 47 == 0;\nloop invariant i * j % 48 == 0;\nloop invariant i * j % 49 == 0;\nloop invariant i * j % 50 == 0;\nloop invariant i * j % 51 == 0;\nloop invariant i * j % 52 == 0;\nloop invariant i * j % 53 == 0;\nloop invariant i * j % 54 == 0;\nloop invariant i * j % 55 == 0;\nloop invariant i * j % 56 == 0;\nloop invariant i * j % 57 == 0;\nloop invariant i * j % 58 == 0;\nloop invariant i * j % 59 == 0;\nloop invariant i * j % 60 == 0;\nloop invariant i * j % 61 == 0;\nloop invariant i * j % 62 == 0;\nloop invariant i * j % 63 == 0;\nloop invariant i * j % 64 == 0;\nloop invariant i * j % 65 == 0;\nloop invariant i * j % 66 == 0;\nloop invariant i * j % 67 == 0;\nloop invariant i * j % 68 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant i >= j is preserved but not established.\nloop invariant i - j >= 1 is partially proven to be inductive.\nloop invariant i - j <= 10 is partially proven to be inductive.\nloop invariant i + j == 11 is partially proven to be inductive.\nloop invariant i * j == 10 is partially proven to be inductive.\nloop invariant i / j == 1 is partially proven to be inductive.\nloop invariant i % j == 1 is partially proven to be inductive.\nloop invariant i * j % 10 == 10 is partially proven to be inductive.\nloop invariant i * j % 11 == 0 is partially proven to be inductive.\nloop invariant i * j % 2 == 0 is partially proven to be inductive.\nloop invariant i * j % 3 == 0 is partially proven to be inductive.\nloop invariant i * j % 4 == 0 is partially proven to be inductive.\nloop invariant i * j % 5 == 0 is partially proven to be inductive.\nloop invariant i * j % 6 == 0 is partially proven to be inductive.\nloop invariant i * j % 7 == 0 is partially proven to be inductive.\nloop invariant i * j % 8 == 0 is partially proven to be inductive.\nloop invariant i * j % 9 == 0 is partially proven to be inductive.\nloop invariant i * j % 10 == 0 is partially proven to be inductive.\nloop invariant i * j % 12 == 0 is partially proven to be inductive.\nloop invariant i * j % 13 == 0 is partially proven to be inductive.\nloop invariant i * j % 14 == 0 is partially proven to be inductive.\nloop invariant i * j % 15 == 0 is partially proven to be inductive.\nloop invariant i * j % 16 == 0 is partially proven to be inductive.\nloop invariant i * j % 17 == 0 is partially proven to be inductive.\nloop invariant i * j % 18 == 0 is partially proven to be inductive.\nloop invariant i * j % 19 == 0 is partially proven to be inductive.\nloop invariant i * j % 20 == 0 is partially proven to be inductive.\nloop invariant i * j % 21 == 0 is partially proven to be inductive.\nloop invariant i * j % 22 == 0 is partially proven to be inductive.\nloop invariant i * j % 23 == 0 is partially proven to be inductive.\nloop invariant i * j % 24 == 0 is partially proven to be inductive.\nloop invariant i * j % 25 == 0 is partially proven to be inductive.\nloop invariant i * j % 26 == 0 is partially proven to be inductive.\nloop invariant i * j % 27 == 0 is partially proven to be inductive.\nloop invariant i * j % 28 == 0 is partially proven to be inductive.\nloop invariant i * j % 29 == 0 is partially proven to be inductive.\nloop invariant i * j % 30 == 0 is partially proven to be inductive.\nloop invariant i * j % 31 == 0 is partially proven to be inductive.\nloop invariant i * j % 32 == 0 is partially proven to be inductive.\nloop invariant i * j % 33 == 0 is partially proven to be inductive.\nloop invariant i * j % 34 == 0 is partially proven to be inductive.\nloop invariant i * j % 35 == 0 is partially proven to be inductive.\nloop invariant i * j % 36 == 0 is partially proven to be inductive.\nloop invariant i * j % 37 == 0 is partially proven to be inductive.\nloop invariant i * j % 38 == 0 is partially proven to be inductive.\nloop invariant i * j % 39 == 0 is partially proven to be inductive.\nloop invariant i * j % 40 == 0 is partially proven to be inductive.\nloop invariant i * j % 41 == 0 is partially proven to be inductive.\nloop invariant i * j % 42 == 0 is partially proven to be inductive.\nloop invariant i * j % 43 == 0 is partially proven to be inductive.\nloop invariant i * j % 44 == 0 is partially proven to be inductive.\nloop invariant i * j % 45 == 0 is partially proven to be inductive.\nloop invariant i * j % 46 == 0 is partially proven to be inductive.\nloop invariant i * j % 47 == 0 is partially proven to be inductive.\nloop invariant i * j % 48 == 0 is partially proven to be inductive.\nloop invariant i * j % 49 == 0 is partially proven to be inductive.\nloop invariant i * j % 50 == 0 is partially proven to be inductive.\nloop invariant i * j % 51 == 0 is partially proven to be inductive.\nloop invariant i * j % 52 == 0 is partially proven to be inductive.\nloop invariant i * j % 53 == 0 is partially proven to be inductive.\nloop invariant i * j % 54 == 0 is partially proven to be inductive.\nloop invariant i * j % 55 == 0 is partially proven to be inductive.\nloop invariant i * j % 56 == 0 is partially proven to be inductive.\nloop invariant i * j % 57 == 0 is partially proven to be inductive.\nloop invariant i * j % 58 == 0 is partially proven to be inductive.\nloop invariant i * j % 59 == 0 is partially proven to be inductive.\nloop invariant i * j % 60 == 0 is partially proven to be inductive.\nloop invariant i * j % 61 == 0 is partially proven to be inductive.\nloop invariant i * j % 62 == 0 is partially proven to be inductive.\nloop invariant i * j % 63 == 0 is partially proven to be inductive.\nloop invariant i * j % 64 == 0 is partially proven to be inductive.\nloop invariant i * j % 65 == 0 is partially proven to be inductive.\nloop invariant i * j % 66 == 0 is partially proven to be inductive.\nloop invariant i * j % 67 == 0 is partially proven to be inductive.\nloop invariant i * j % 68 == 0 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: i <= 11;\nloop invariant i3: i % 2 == 1;\n\n\n\nloop invariant i7: i - j <= 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= j;\nloop invariant j - i >= 0;\nloop invariant j - i <= 9;\nloop invariant j - i == 6;\nloop invariant i == 1;\nloop invariant j == 6;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= j is partially proven to be inductive.\nloop invariant j - i >= 0 is partially proven to be inductive.\nloop invariant j - i <= 9 is partially proven to be inductive.\nloop invariant j - i == 6 is preserved but not established.\nloop invariant i == 1 is partially proven to be inductive.\nloop invariant j == 6 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\nloop invariant i3: j - i <= 9;\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 10 <= j <= 10;\nloop invariant i % 2 == 1;\nloop invariant j == 10 - i;\nloop invariant i <= j;\nloop invariant j <= 10;\nloop invariant i >= 1;\nloop invariant j >= 0;\nloop invariant j >= -1 + j;\nloop invariant j + 1 <= 10;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\nloop invariant j + 1 >= 0;\nloop invariant j + 1 >= -1 + j;\nloop invariant j + 1 >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 10 <= j <= 10 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == 10 - i is preserved but not established.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant j >= -1 + j is partially proven to be inductive.\nloop invariant j + 1 <= 10 is partially proven to be inductive.\nloop invariant j + 1 >= 1 is partially proven to be inductive.\nloop invariant j + 1 >= 0 is partially proven to be inductive.\nloop invariant j + 1 >= -1 + j is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\nloop invariant i3: i % 2 == 1;\n\n\nloop invariant i6: j <= 10;\nloop invariant i7: i >= 1;\nloop invariant i8: j >= 0;\nloop invariant i9: j >= -1 + j;\n\nloop invariant i11: j + 1 >= 1;\nloop invariant i12: j + 1 >= 0;\nloop invariant i13: j + 1 >= -1 + j;\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant j == 10 - i;\nloop invariant i % 2 == 1;\nloop invariant (i - 1) / 2 == j;\nloop invariant (i * (i + 1) / 2) <= j;\nloop invariant i <= j;\nloop invariant i >= 1;\nloop invariant j >= 6;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant j == 10 - i is preserved but not established.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant (i - 1) / 2 == j is partially proven to be inductive.\nloop invariant (i * (i + 1) / 2) <= j is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 6 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\nloop invariant i3: i % 2 == 1;\n\n\n\nloop invariant i7: i >= 1;\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= 10;\nloop invariant 1 <= i <= 11;\nloop invariant j >= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 1 <= i <= 11 is established but not preserved.\nloop invariant j >= i is established but not preserved.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant j >= 10;\nloop invariant j <= i + 8;\nloop invariant i <= 18;\nloop invariant j == 10 - i + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 10 is partially proven to be inductive.\nloop invariant j <= i + 8 is preserved but not established.\nloop invariant i <= 18 is partially proven to be inductive.\nloop invariant j == 10 - i + 1 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i >= 1;\n\n\n\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 0 <= j <= 10 is partially proven to be inductive.\nloop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant j <= 10 - i is preserved but not established.\nloop invariant 1 <= i <= 11 is partially proven to be inductive.\nloop invariant j >= i is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= 11 is partially proven to be inductive.\nloop invariant j >= -5 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i % 2 == 1 is partially proven to be inductive.\nloop invariant j == -1 + 10 - i/2 is partially proven to be inductive.\nloop invariant i <= j is partially proven to be inductive.\nloop invariant j >= -9 is partially proven to be inductive.\nloop invariant i >= j - 1 is partially proven to be inductive.\nloop invariant i % 2 == 0 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant j >= 1 is partially proven to be inductive.\nloop invariant j <= 9 is partially proven to be inductive.\nloop invariant j == 10 - i / 2 is partially proven to be inductive.\nloop invariant i == 10 - j / 2 is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i <= j is partially proven to be inductive.\nloop invariant i % 2 == 0 ==> i >= j - 1 is partially proven to be inductive.\nloop invariant i == 10 - j / 2 ==> i <= j is partially proven to be inductive.\nloop invariant i == 10 - j / 2 ==> i >= j - 1 is partially proven to be inductive.\nloop invariant 1 <= j <= 10 is partially proven to be inductive.\nloop invariant j % 2 == 0 is partially proven to be inductive.\nloop invariant j == -1 + 10 is partially proven to be inductive.\nloop invariant j == 6 is partially proven to be inductive.\nloop invariant i <= j + 1 is partially proven to be inductive.\nloop invariant i <= (j + 1) * 2 - 1 is partially proven to be inductive.\nloop invariant i <= 2 * j - 1 is partially proven to be inductive.\nloop invariant i >= j is partially proven to be inductive.\nloop invariant (j <= 10 ==> i <= 11) is partially proven to be inductive.\nloop invariant (i <= 11 ==> j >= 0) is partially proven to be inductive.\nloop invariant 0 <= i <= j is partially proven to be inductive.\nloop invariant i < j is partially proven to be inductive.\nloop invariant 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i is partially proven to be inductive.\nloop invariant 0 <= j <= 9 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= -1 is partially proven to be inductive.\nloop invariant (i >= 1) ==> (j >= 6) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 1) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 0) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= -1) is partially proven to be inductive.\nloop invariant (i < 11) ==> (j >= 6) is partially proven to be inductive.\nloop invariant (i < 11) ==> (i <= j) is partially proven to be inductive.\nloop invariant i - j >= 1 is partially proven to be inductive.\nloop invariant i - j <= 10 is partially proven to be inductive.\nloop invariant i + j == 11 is partially proven to be inductive.\nloop invariant i * j == 10 is partially proven to be inductive.\nloop invariant i / j == 1 is partially proven to be inductive.\nloop invariant i % j == 1 is partially proven to be inductive.\nloop invariant i * j % 10 == 10 is partially proven to be inductive.\nloop invariant i * j % 11 == 0 is partially proven to be inductive.\nloop invariant i * j % 2 == 0 is partially proven to be inductive.\nloop invariant i * j % 3 == 0 is partially proven to be inductive.\nloop invariant i * j % 4 == 0 is partially proven to be inductive.\nloop invariant i * j % 5 == 0 is partially proven to be inductive.\nloop invariant i * j % 6 == 0 is partially proven to be inductive.\nloop invariant i * j % 7 == 0 is partially proven to be inductive.\nloop invariant i * j % 8 == 0 is partially proven to be inductive.\nloop invariant i * j % 9 == 0 is partially proven to be inductive.\nloop invariant i * j % 10 == 0 is partially proven to be inductive.\nloop invariant i * j % 12 == 0 is partially proven to be inductive.\nloop invariant i * j % 13 == 0 is partially proven to be inductive.\nloop invariant i * j % 14 == 0 is partially proven to be inductive.\nloop invariant i * j % 15 == 0 is partially proven to be inductive.\nloop invariant i * j % 16 == 0 is partially proven to be inductive.\nloop invariant i * j % 17 == 0 is partially proven to be inductive.\nloop invariant i * j % 18 == 0 is partially proven to be inductive.\nloop invariant i * j % 19 == 0 is partially proven to be inductive.\nloop invariant i * j % 20 == 0 is partially proven to be inductive.\nloop invariant i * j % 21 == 0 is partially proven to be inductive.\nloop invariant i * j % 22 == 0 is partially proven to be inductive.\nloop invariant i * j % 23 == 0 is partially proven to be inductive.\nloop invariant i * j % 24 == 0 is partially proven to be inductive.\nloop invariant i * j % 25 == 0 is partially proven to be inductive.\nloop invariant i * j % 26 == 0 is partially proven to be inductive.\nloop invariant i * j % 27 == 0 is partially proven to be inductive.\nloop invariant i * j % 28 == 0 is partially proven to be inductive.\nloop invariant i * j % 29 == 0 is partially proven to be inductive.\nloop invariant i * j % 30 == 0 is partially proven to be inductive.\nloop invariant i * j % 31 == 0 is partially proven to be inductive.\nloop invariant i * j % 32 == 0 is partially proven to be inductive.\nloop invariant i * j % 33 == 0 is partially proven to be inductive.\nloop invariant i * j % 34 == 0 is partially proven to be inductive.\nloop invariant i * j % 35 == 0 is partially proven to be inductive.\nloop invariant i * j % 36 == 0 is partially proven to be inductive.\nloop invariant i * j % 37 == 0 is partially proven to be inductive.\nloop invariant i * j % 38 == 0 is partially proven to be inductive.\nloop invariant i * j % 39 == 0 is partially proven to be inductive.\nloop invariant i * j % 40 == 0 is partially proven to be inductive.\nloop invariant i * j % 41 == 0 is partially proven to be inductive.\nloop invariant i * j % 42 == 0 is partially proven to be inductive.\nloop invariant i * j % 43 == 0 is partially proven to be inductive.\nloop invariant i * j % 44 == 0 is partially proven to be inductive.\nloop invariant i * j % 45 == 0 is partially proven to be inductive.\nloop invariant i * j % 46 == 0 is partially proven to be inductive.\nloop invariant i * j % 47 == 0 is partially proven to be inductive.\nloop invariant i * j % 48 == 0 is partially proven to be inductive.\nloop invariant i * j % 49 == 0 is partially proven to be inductive.\nloop invariant i * j % 50 == 0 is partially proven to be inductive.\nloop invariant i * j % 51 == 0 is partially proven to be inductive.\nloop invariant i * j % 52 == 0 is partially proven to be inductive.\nloop invariant i * j % 53 == 0 is partially proven to be inductive.\nloop invariant i * j % 54 == 0 is partially proven to be inductive.\nloop invariant i * j % 55 == 0 is partially proven to be inductive.\nloop invariant i * j % 56 == 0 is partially proven to be inductive.\nloop invariant i * j % 57 == 0 is partially proven to be inductive.\nloop invariant i * j % 58 == 0 is partially proven to be inductive.\nloop invariant i * j % 59 == 0 is partially proven to be inductive.\nloop invariant i * j % 60 == 0 is partially proven to be inductive.\nloop invariant i * j % 61 == 0 is partially proven to be inductive.\nloop invariant i * j % 62 == 0 is partially proven to be inductive.\nloop invariant i * j % 63 == 0 is partially proven to be inductive.\nloop invariant i * j % 64 == 0 is partially proven to be inductive.\nloop invariant i * j % 65 == 0 is partially proven to be inductive.\nloop invariant i * j % 66 == 0 is partially proven to be inductive.\nloop invariant i * j % 67 == 0 is partially proven to be inductive.\nloop invariant i * j % 68 == 0 is partially proven to be inductive.\nloop invariant 1 <= i <= j is partially proven to be inductive.\nloop invariant j - i >= 0 is partially proven to be inductive.\nloop invariant j - i <= 9 is partially proven to be inductive.\nloop invariant j - i == 6 is partially proven to be inductive.\nloop invariant i == 1 is partially proven to be inductive.\nloop invariant 10 <= j <= 10 is partially proven to be inductive.\nloop invariant j == 10 - i is partially proven to be inductive.\nloop invariant j >= -1 + j is partially proven to be inductive.\nloop invariant j + 1 <= 10 is partially proven to be inductive.\nloop invariant j + 1 >= 1 is partially proven to be inductive.\nloop invariant j + 1 >= 0 is partially proven to be inductive.\nloop invariant j + 1 >= -1 + j is partially proven to be inductive.\nloop invariant (i - 1) / 2 == j is partially proven to be inductive.\nloop invariant (i * (i + 1) / 2) <= j is partially proven to be inductive.\nloop invariant j >= 6 is partially proven to be inductive.\nloop invariant j >= 10 is partially proven to be inductive.\nloop invariant j <= i + 8 is partially proven to be inductive.\nloop invariant i <= 18 is partially proven to be inductive.\nloop invariant j == 10 - i + 1 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: 0 <= i <= 10;\nloop invariant i3: j <= 10 - i;\nloop invariant i4: 1 <= i <= 11;\nloop invariant i5: j >= i;\nloop invariant i6: i >= 1;\nloop invariant i7: i <= 11;\nloop invariant i8: j >= -5;\nloop invariant i9: j <= 10;\nloop invariant i10: i % 2 == 1;\nloop invariant i11: j == -1 + 10 - i/2;\nloop invariant i12: i <= j;\nloop invariant i13: j >= -9;\nloop invariant i14: i >= j - 1;\nloop invariant i15: i % 2 == 0;\nloop invariant i16: i <= 10;\nloop invariant i17: j >= 1;\nloop invariant i18: j <= 9;\nloop invariant i19: j == 10 - i / 2;\nloop invariant i20: i == 10 - j / 2;\nloop invariant i21: i % 2 == 0 ==> i <= j;\nloop invariant i22: i % 2 == 0 ==> i >= j - 1;\nloop invariant i23: i == 10 - j / 2 ==> i <= j;\nloop invariant i24: i == 10 - j / 2 ==> i >= j - 1;\nloop invariant i25: 1 <= j <= 10;\nloop invariant i26: j % 2 == 0;\nloop invariant i27: j == -1 + 10;\nloop invariant i28: j == 6;\nloop invariant i29: i <= j + 1;\nloop invariant i30: i <= (j + 1) * 2 - 1;\nloop invariant i31: i <= 2 * j - 1;\nloop invariant i32: i >= j;\nloop invariant i33: (j <= 10 ==> i <= 11);\nloop invariant i34: (i <= 11 ==> j >= 0);\nloop invariant i35: 0 <= i <= j;\nloop invariant i36: i < j;\nloop invariant i37: 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i;\nloop invariant i38: 0 <= j <= 9;\nloop invariant i39: j >= 0;\nloop invariant i40: i >= 0;\nloop invariant i41: j >= -1;\nloop invariant i42: (i >= 1) ==> (j >= 6);\nloop invariant i43: (i < 11) ==> (j >= 1);\nloop invariant i44: (i < 11) ==> (j >= 0);\nloop invariant i45: (i < 11) ==> (j >= -1);\nloop invariant i46: (i < 11) ==> (j >= 6);\nloop invariant i47: (i < 11) ==> (i <= j);\nloop invariant i48: i - j >= 1;\nloop invariant i49: i - j <= 10;\nloop invariant i50: i + j == 11;\nloop invariant i51: i * j == 10;\nloop invariant i52: i / j == 1;\nloop invariant i53: i % j == 1;\nloop invariant i54: i * j % 10 == 10;\nloop invariant i55: i * j % 11 == 0;\nloop invariant i56: i * j % 2 == 0;\nloop invariant i57: i * j % 3 == 0;\nloop invariant i58: i * j % 4 == 0;\nloop invariant i59: i * j % 5 == 0;\nloop invariant i60: i * j % 6 == 0;\nloop invariant i61: i * j % 7 == 0;\nloop invariant i62: i * j % 8 == 0;\nloop invariant i63: i * j % 9 == 0;\nloop invariant i64: i * j % 10 == 0;\nloop invariant i65: i * j % 12 == 0;\nloop invariant i66: i * j % 13 == 0;\nloop invariant i67: i * j % 14 == 0;\nloop invariant i68: i * j % 15 == 0;\nloop invariant i69: i * j % 16 == 0;\nloop invariant i70: i * j % 17 == 0;\nloop invariant i71: i * j % 18 == 0;\nloop invariant i72: i * j % 19 == 0;\nloop invariant i73: i * j % 20 == 0;\nloop invariant i74: i * j % 21 == 0;\nloop invariant i75: i * j % 22 == 0;\nloop invariant i76: i * j % 23 == 0;\nloop invariant i77: i * j % 24 == 0;\nloop invariant i78: i * j % 25 == 0;\nloop invariant i79: i * j % 26 == 0;\nloop invariant i80: i * j % 27 == 0;\nloop invariant i81: i * j % 28 == 0;\nloop invariant i82: i * j % 29 == 0;\nloop invariant i83: i * j % 30 == 0;\nloop invariant i84: i * j % 31 == 0;\nloop invariant i85: i * j % 32 == 0;\nloop invariant i86: i * j % 33 == 0;\nloop invariant i87: i * j % 34 == 0;\nloop invariant i88: i * j % 35 == 0;\nloop invariant i89: i * j % 36 == 0;\nloop invariant i90: i * j % 37 == 0;\nloop invariant i91: i * j % 38 == 0;\nloop invariant i92: i * j % 39 == 0;\nloop invariant i93: i * j % 40 == 0;\nloop invariant i94: i * j % 41 == 0;\nloop invariant i95: i * j % 42 == 0;\nloop invariant i96: i * j % 43 == 0;\nloop invariant i97: i * j % 44 == 0;\nloop invariant i98: i * j % 45 == 0;\nloop invariant i99: i * j % 46 == 0;\nloop invariant i100: i * j % 47 == 0;\nloop invariant i101: i * j % 48 == 0;\nloop invariant i102: i * j % 49 == 0;\nloop invariant i103: i * j % 50 == 0;\nloop invariant i104: i * j % 51 == 0;\nloop invariant i105: i * j % 52 == 0;\nloop invariant i106: i * j % 53 == 0;\nloop invariant i107: i * j % 54 == 0;\nloop invariant i108: i * j % 55 == 0;\nloop invariant i109: i * j % 56 == 0;\nloop invariant i110: i * j % 57 == 0;\nloop invariant i111: i * j % 58 == 0;\nloop invariant i112: i * j % 59 == 0;\nloop invariant i113: i * j % 60 == 0;\nloop invariant i114: i * j % 61 == 0;\nloop invariant i115: i * j % 62 == 0;\nloop invariant i116: i * j % 63 == 0;\nloop invariant i117: i * j % 64 == 0;\nloop invariant i118: i * j % 65 == 0;\nloop invariant i119: i * j % 66 == 0;\nloop invariant i120: i * j % 67 == 0;\nloop invariant i121: i * j % 68 == 0;\nloop invariant i122: 1 <= i <= j;\nloop invariant i123: j - i >= 0;\nloop invariant i124: j - i <= 9;\nloop invariant i125: j - i == 6;\nloop invariant i126: i == 1;\nloop invariant i127: 10 <= j <= 10;\nloop invariant i128: j == 10 - i;\nloop invariant i129: j >= -1 + j;\nloop invariant i130: j + 1 <= 10;\nloop invariant i131: j + 1 >= 1;\nloop invariant i132: j + 1 >= 0;\nloop invariant i133: j + 1 >= -1 + j;\nloop invariant i134: (i - 1) / 2 == j;\nloop invariant i135: (i * (i + 1) / 2) <= j;\nloop invariant i136: j >= 6;\nloop invariant i137: j >= 10;\nloop invariant i138: j <= i + 8;\nloop invariant i139: i <= 18;\nloop invariant i140: j == 10 - i + 1;\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
            "combined_annotation_num_solver_calls": 101,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: 0 <= j <= 10;\nloop invariant i2: 0 <= i <= 10;\n\nloop invariant i4: 1 <= i <= 11;\n\nloop invariant i6: i >= 1;\nloop invariant i7: i <= 11;\nloop invariant i8: j >= -5;\nloop invariant i9: j <= 10;\nloop invariant i10: i % 2 == 1;\n\n\nloop invariant i13: j >= -9;\n\n\nloop invariant i16: i <= 10;\nloop invariant i17: j >= 1;\n\nloop invariant i19: j == 10 - i / 2;\n\nloop invariant i21: i % 2 == 0 ==> i <= j;\nloop invariant i22: i % 2 == 0 ==> i >= j - 1;\nloop invariant i23: i == 10 - j / 2 ==> i <= j;\nloop invariant i24: i == 10 - j / 2 ==> i >= j - 1;\nloop invariant i25: 1 <= j <= 10;\n\n\n\n\nloop invariant i30: i <= (j + 1) * 2 - 1;\nloop invariant i31: i <= 2 * j - 1;\n\nloop invariant i33: (j <= 10 ==> i <= 11);\nloop invariant i34: (i <= 11 ==> j >= 0);\n\n\nloop invariant i37: 0 <= j <= 10; loop invariant 1 <= i <= 11; loop invariant j >= i;\n\nloop invariant i39: j >= 0;\nloop invariant i40: i >= 0;\nloop invariant i41: j >= -1;\nloop invariant i42: (i >= 1) ==> (j >= 6);\nloop invariant i43: (i < 11) ==> (j >= 1);\nloop invariant i44: (i < 11) ==> (j >= 0);\nloop invariant i45: (i < 11) ==> (j >= -1);\nloop invariant i46: (i < 11) ==> (j >= 6);\nloop invariant i47: (i < 11) ==> (i <= j);\n\nloop invariant i49: i - j <= 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i122: 1 <= i <= j;\nloop invariant i123: j - i >= 0;\nloop invariant i124: j - i <= 9;\n\n\n\n\nloop invariant i129: j >= -1 + j;\n\nloop invariant i131: j + 1 >= 1;\nloop invariant i132: j + 1 >= 0;\nloop invariant i133: j + 1 >= -1 + j;\n\n\nloop invariant i136: j >= 6;\n\n\nloop invariant i139: i <= 18;\n\n*/\nwhile (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/84.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant y > 0 ==> y <= 100000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y <= 0;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x + y >= -49;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y <= x;\nloop invariant x + y >= 0;\nloop invariant y < 51;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= (y + 1);\nloop invariant x <= 0;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x <= (y * y - 1) / 2;\nloop invariant y >= x + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (y - 50);\n*/\n```",
                "```\n/*@\nloop invariant y > 0;\nloop invariant x >= -50;\nloop invariant x <= -50 + y * y;\nloop invariant (x < 0) ==> (y > 0 && x >= -50 && x <= -50 + y * y);\n*/\n```",
                "```\n/*@\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant 1 <= y;\nloop invariant y <= 50;\nloop invariant x + (y * (y - 1) / 2) <= 0;\nloop invariant x + (y * (y - 1) / 2) >= -50;\nloop invariant x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2;\nloop invariant x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2;\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y and y <= -x;\nloop invariant x <= -y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\nloop invariant y >= x + 50;\nloop invariant x + y >= 0;\nloop invariant x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y <= 0;\nloop invariant x + y - 1 >= y;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= -50;\nloop invariant 0 <= y <= 50;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y > 0 ==> x >= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant y < 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x >= y;\nloop invariant y > 0 ==> y <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y > 0 ==> y <= 100000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y <= 0;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x + y >= -49;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x + y <= 0 is neither established nor preserved.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant x + y >= -49 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y <= x;\nloop invariant x + y >= 0;\nloop invariant y < 51;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant y <= x is preserved but not established.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant y < 51 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= (y + 1);\nloop invariant x <= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x <= (y + 1) is partially proven to be inductive.\nloop invariant x <= 0 is established but not preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= -50;\nloop invariant x <= (y * y - 1) / 2;\nloop invariant y >= x + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= -50 is preserved but not established.\nloop invariant x <= (y * y - 1) / 2 is partially proven to be inductive.\nloop invariant y >= x + 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\nloop invariant i2: x <= (y * y - 1) / 2;\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (y - 50);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= (y - 50) is neither established nor preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant y > 0;\nloop invariant x >= -50;\nloop invariant x <= -50 + y * y;\nloop invariant (x < 0) ==> (y > 0 && x >= -50 && x <= -50 + y * y);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y > 0 is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x <= -50 + y * y is partially proven to be inductive.\nloop invariant (x < 0) ==> (y > 0 && x >= -50 && x <= -50 + y * y) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant 1 <= y;\nloop invariant y <= 50;\nloop invariant x + (y * (y - 1) / 2) <= 0;\nloop invariant x + (y * (y - 1) / 2) >= -50;\nloop invariant x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2;\nloop invariant x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2;\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= -50 is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant 1 <= y is preserved but not established.\nloop invariant y <= 50 is preserved but not established.\nloop invariant x + (y * (y - 1) / 2) <= 0 is preserved but not established.\nloop invariant x + (y * (y - 1) / 2) >= -50 is partially proven to be inductive.\nloop invariant x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2 is neither established nor preserved.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y and y <= -x;\nloop invariant x <= -y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token 'and'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\nloop invariant y >= x + 50;\nloop invariant x + y >= 0;\nloop invariant x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant y >= x + 50 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50;\nloop invariant i8: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i9: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i10: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i11: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i12: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i13: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i14: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i15: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i16: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i17: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i18: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i19: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x + y <= 0;\nloop invariant x + y - 1 >= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x + y <= 0 is preserved but not established.\nloop invariant x + y - 1 >= y is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= -50;\nloop invariant 0 <= y <= 50;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y > 0 ==> x >= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= -50 is preserved but not established.\nloop invariant 0 <= y <= 50 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> x >= y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant y < 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant y < 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 51: unexpected token 'and'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= y;\nloop invariant i6: y > 0 ==> y <= 100000;\nloop invariant i7: 0 <= y;\nloop invariant i8: x + y <= 0;\nloop invariant i9: x >= -50;\nloop invariant i10: y >= 1;\nloop invariant i11: x + y >= -49;\nloop invariant i12: x < 0;\nloop invariant i13: y <= x;\nloop invariant i14: x + y >= 0;\nloop invariant i15: y < 51;\nloop invariant i16: x <= (y + 1);\nloop invariant i17: x <= 0;\nloop invariant i18: i1;\nloop invariant i19: i2;\nloop invariant i20: i3;\nloop invariant i21: i4;\nloop invariant i22: i5;\nloop invariant i23: i6;\nloop invariant i24: i7;\nloop invariant i25: 0 <= y <= -50;\nloop invariant i26: x <= (y * y - 1) / 2;\nloop invariant i27: y >= x + 1;\nloop invariant i28: x >= (y - 50);\nloop invariant i29: y > 0;\nloop invariant i30: x <= -50 + y * y;\nloop invariant i31: (x < 0) ==> (y > 0 && x >= -50 && x <= -50 + y * y);\nloop invariant i32: 1 <= y;\nloop invariant i33: y <= 50;\nloop invariant i34: x + (y * (y - 1) / 2) <= 0;\nloop invariant i35: x + (y * (y - 1) / 2) >= -50;\nloop invariant i36: x + (y * (y - 1) / 2) == -50 * y + y * (y - 1) / 2;\nloop invariant i37: 0 <= y and y <= -x;\nloop invariant i38: x <= -y;\nloop invariant i39: 0 <= x <= -50;\nloop invariant i40: y >= x + 50;\nloop invariant i41: x + y < 0 ==> y < 2;\nloop invariant i42: x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i43: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50;\nloop invariant i44: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i45: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i46: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i47: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i48: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i49: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i50: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i51: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i52: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i53: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i54: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i55: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i56: x + y - 1 >= y;\nloop invariant i57: 1 <= x <= -50;\nloop invariant i58: 0 <= y <= 50;\nloop invariant i59: x >= (y - 1) * y / 2;\nloop invariant i60: y > 0 ==> x >= y;\nloop invariant i61: y < 100000;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 23,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: x <= (y * y - 1) / 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i43: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50;\nloop invariant i44: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i45: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i46: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i47: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i48: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i49: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i50: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i51: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i52: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\nloop invariant i53: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0;\nloop invariant i54: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2;\nloop invariant i55: x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50 ==> x + y < 0 ==> y < 2 ==> x + y >= -50;\n\n\n\n\n\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant x < 0;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= 0;\nloop invariant x + y <= 0;\n*/\n```",
                "```\n/*@\nloop invariant x + y >= 0;\nloop invariant y >= 1;\nloop invariant y <= 50;\nloop invariant v1 <= 10;\nloop invariant v2 <= 10;\nloop invariant v3 <= 10;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant y <= x + y;\nloop invariant x <= y + 50;\nloop invariant y + 1 <= y + 49;\nloop invariant v1 + v2 + v3 <= 30;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant x + y >= 0;\nloop invariant y >= 1;\nloop invariant y <= 50;\nloop invariant v1 <= 10;\nloop invariant v2 <= 10;\nloop invariant v3 <= 10;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant y <= x + y;\nloop invariant x <= y + 50;\nloop invariant y + 1 <= y + 49;\nloop invariant v1 + v2 + v3 <= 30;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y < 100000;\nloop invariant x == 1 + (y * (y - 1)) / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x;\nloop invariant y >= 0;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\nloop invariant x == unknown_int() || x == v1 || x == v2 || x == v3;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= x + y; loop invariant x >= -50; loop invariant y >= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 + v2 + v3 <= 3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= 3; loop invariant v1 * v2 * v3 <= 1; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= 0; loop invariant v1 * v2 * v3 >= 0; loop invariant v1 + v2 + v3 >= 0; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= v1 + v2 + v3; loop invariant v1 * v2 * v3 <= v1 + v2 + v3; loop invariant v1 + v2 + v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 * v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 + v2 + v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= y;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant y <= 100000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 50;\nloop invariant x + y == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (-50 + y);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant x <= -50 + y * (y - 1);\nloop invariant y <= 50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x + y >= 0;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == y;\nloop invariant v2 == y;\nloop invariant v3 == y;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 100000;\nloop invariant v2 <= 100000;\nloop invariant v3 <= 100000;\nloop invariant v1 >= -50;\nloop invariant v2 >= -50;\nloop invariant v3 >= -50;\nloop invariant v1 <= 50;\nloop invariant v2 <= 50;\nloop invariant v3 <= 50;\nloop invariant v1 != 0;\nloop invariant v2 != 0;\nloop invariant v3 != 0;\nloop invariant y != 0;\nloop invariant x != -50;\nloop invariant x != 0;\nloop invariant x != 1;\nloop invariant x != 2;\nloop invariant x != 3;\nloop invariant x != 4;\nloop invariant x != 5;\nloop invariant x != 6;\nloop invariant x != 7;\nloop invariant x != 8;\nloop invariant x != 9;\nloop invariant x != 10;\nloop invariant x != 11;\nloop invariant x != 12;\nloop invariant x != 13;\nloop invariant x != 14;\nloop invariant x != 15;\nloop invariant x != 16;\nloop invariant x != 17;\nloop invariant x != 18;\nloop invariant x != 19;\nloop invariant x != 20;\nloop invariant x != 21;\nloop invariant x != 22;\nloop invariant x != 23;\nloop invariant x != 24;\nloop invariant x != 25;\nloop invariant x != 26;\nloop invariant x != 27;\nloop invariant x != 28;\nloop invariant x != 29;\nloop invariant x != 30;\nloop invariant x != 31;\nloop invariant x != 32;\nloop invariant x != 33;\nloop invariant x != 34;\nloop invariant x != 35;\nloop invariant x != 36;\nloop invariant x != 37;\nloop invariant x != 38;\nloop invariant x != 39;\nloop invariant x != 40;\nloop invariant x != 41;\nloop invariant x != 42;\nloop invariant x != 43;\nloop invariant x != 44;\nloop invariant x != 45;\nloop invariant x != 46;\nloop invariant x != 47;\nloop invariant x != 48;\nloop invariant x != 49;\nloop invariant x != 50;\nloop invariant x != 51;\nloop invariant x != 52;\nloop invariant x != 53;\nloop invariant x != 54;\nloop invariant x != 55;\nloop invariant x != 56;\nloop invariant x != 57;\nloop invariant x != 58;\nloop invariant x != 59;\nloop invariant x != 60;\nloop invariant x != 61;\nloop invariant x != 62;\nloop invariant x != 63;\nloop invariant x != 64;\nloop invariant x != 65;\nloop invariant x != 66;\nloop invariant x != 67;\nloop invariant x != 68;\nloop invariant x != 69;\nloop invariant x != 70;\nloop invariant x != 71;\nloop invariant x != 72;\nloop invariant x != 73;\nloop invariant x != 74;\nloop invariant x != 75;\nloop invariant x != 76;\nloop invariant x != 77;\nloop invariant x != 78;\nloop invariant x != 79;\nloop invariant x != 80;\nloop invariant x != 81;\nloop invariant x != 82;\nloop invariant x != 83;\nloop invariant x != 84;\nloop invariant x != 85;\nloop invariant x != 86;\nloop invariant x != 87;\nloop invariant x != 88;\nloop invariant x != 89;\nloop invariant x != 90;\nloop invariant x != 91;\nloop invariant x != 92;\nloop invariant x != 93;\nloop invariant x != 94;\nloop invariant x != 95;\nloop invariant x != 96;\nloop invariant x != 97;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= y; loop invariant x >= y - 50; loop invariant y <= x + 50; loop invariant y <= x; loop invariant y <= x - y; loop invariant y <= x - y + 1; loop invariant y <= x - y + 1 - y; loop invariant y <= x - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant x < 0;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x < 0 is established but not preserved.\nloop invariant y >= 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x <= 0;\nloop invariant x + y <= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x <= 0 is partially proven to be inductive.\nloop invariant x + y <= 0 is neither established nor preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant x + y >= 0;\nloop invariant y >= 1;\nloop invariant y <= 50;\nloop invariant v1 <= 10;\nloop invariant v2 <= 10;\nloop invariant v3 <= 10;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant y <= x + y;\nloop invariant x <= y + 50;\nloop invariant y + 1 <= y + 49;\nloop invariant v1 + v2 + v3 <= 30;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant x + y >= 0;\nloop invariant y >= 1;\nloop invariant y <= 50;\nloop invariant v1 <= 10;\nloop invariant v2 <= 10;\nloop invariant v3 <= 10;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant y <= x + y;\nloop invariant x <= y + 50;\nloop invariant y + 1 <= y + 49;\nloop invariant v1 + v2 + v3 <= 30;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 10;\nloop invariant v1 + v2 + v3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x + y >= 0 is preserved but not established.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 50 is preserved but not established.\nloop invariant v1 <= 10 is preserved but not established.\nloop invariant v2 <= 10 is preserved but not established.\nloop invariant v3 <= 10 is preserved but not established.\nloop invariant v1 >= 0 is preserved but not established.\nloop invariant v2 >= 0 is preserved but not established.\nloop invariant v3 >= 0 is preserved but not established.\nloop invariant y <= x + y is preserved but not established.\nloop invariant x <= y + 50 is partially proven to be inductive.\nloop invariant y + 1 <= y + 49 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 <= 30 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 >= 0 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 <= 10 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: y + 1 <= y + 49;\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y < 100000;\nloop invariant x == 1 + (y * (y - 1)) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y < 100000 is preserved but not established.\nloop invariant x == 1 + (y * (y - 1)) / 2 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x;\nloop invariant y >= 0;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\nloop invariant x == unknown_int() || x == v1 || x == v2 || x == v3;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\nloop invariant y == unknown_int() || y == v1 || y == v2 || y == v3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= x + y; loop invariant x >= -50; loop invariant y >= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 + v2 + v3 <= 3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= 3; loop invariant v1 * v2 * v3 <= 1; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= 0; loop invariant v1 * v2 * v3 >= 0; loop invariant v1 + v2 + v3 >= 0; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= v1 + v2 + v3; loop invariant v1 * v2 * v3 <= v1 + v2 + v3; loop invariant v1 + v2 + v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 * v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 + v2 + v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= x + y; loop invariant x >= -50; loop invariant y >= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 + v2 + v3 <= 3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= 3; loop invariant v1 * v2 * v3 <= 1; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= 0; loop invariant v1 * v2 * v3 >= 0; loop invariant v1 + v2 + v3 >= 0; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= v1 + v2 + v3; loop invariant v1 * v2 * v3 <= v1 + v2 + v3; loop invariant v1 + v2 + v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 * v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 + v2 + v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= y;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant y <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 50;\nloop invariant x + y == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant 0 <= y <= 50 is partially proven to be inductive.\nloop invariant x + y == 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (-50 + y);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= (-50 + y) is neither established nor preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x < 0;\nloop invariant y >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant x <= -50 + y * (y - 1);\nloop invariant y <= 50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x < 0 is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant x <= -50 + y * (y - 1) is partially proven to be inductive.\nloop invariant y <= 50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x + y >= 0;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v3 == v1;\nloop invariant v1 == y;\nloop invariant v2 == y;\nloop invariant v3 == y;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 100000;\nloop invariant v2 <= 100000;\nloop invariant v3 <= 100000;\nloop invariant v1 >= -50;\nloop invariant v2 >= -50;\nloop invariant v3 >= -50;\nloop invariant v1 <= 50;\nloop invariant v2 <= 50;\nloop invariant v3 <= 50;\nloop invariant v1 != 0;\nloop invariant v2 != 0;\nloop invariant v3 != 0;\nloop invariant y != 0;\nloop invariant x != -50;\nloop invariant x != 0;\nloop invariant x != 1;\nloop invariant x != 2;\nloop invariant x != 3;\nloop invariant x != 4;\nloop invariant x != 5;\nloop invariant x != 6;\nloop invariant x != 7;\nloop invariant x != 8;\nloop invariant x != 9;\nloop invariant x != 10;\nloop invariant x != 11;\nloop invariant x != 12;\nloop invariant x != 13;\nloop invariant x != 14;\nloop invariant x != 15;\nloop invariant x != 16;\nloop invariant x != 17;\nloop invariant x != 18;\nloop invariant x != 19;\nloop invariant x != 20;\nloop invariant x != 21;\nloop invariant x != 22;\nloop invariant x != 23;\nloop invariant x != 24;\nloop invariant x != 25;\nloop invariant x != 26;\nloop invariant x != 27;\nloop invariant x != 28;\nloop invariant x != 29;\nloop invariant x != 30;\nloop invariant x != 31;\nloop invariant x != 32;\nloop invariant x != 33;\nloop invariant x != 34;\nloop invariant x != 35;\nloop invariant x != 36;\nloop invariant x != 37;\nloop invariant x != 38;\nloop invariant x != 39;\nloop invariant x != 40;\nloop invariant x != 41;\nloop invariant x != 42;\nloop invariant x != 43;\nloop invariant x != 44;\nloop invariant x != 45;\nloop invariant x != 46;\nloop invariant x != 47;\nloop invariant x != 48;\nloop invariant x != 49;\nloop invariant x != 50;\nloop invariant x != 51;\nloop invariant x != 52;\nloop invariant x != 53;\nloop invariant x != 54;\nloop invariant x != 55;\nloop invariant x != 56;\nloop invariant x != 57;\nloop invariant x != 58;\nloop invariant x != 59;\nloop invariant x != 60;\nloop invariant x != 61;\nloop invariant x != 62;\nloop invariant x != 63;\nloop invariant x != 64;\nloop invariant x != 65;\nloop invariant x != 66;\nloop invariant x != 67;\nloop invariant x != 68;\nloop invariant x != 69;\nloop invariant x != 70;\nloop invariant x != 71;\nloop invariant x != 72;\nloop invariant x != 73;\nloop invariant x != 74;\nloop invariant x != 75;\nloop invariant x != 76;\nloop invariant x != 77;\nloop invariant x != 78;\nloop invariant x != 79;\nloop invariant x != 80;\nloop invariant x != 81;\nloop invariant x != 82;\nloop invariant x != 83;\nloop invariant x != 84;\nloop invariant x != 85;\nloop invariant x != 86;\nloop invariant x != 87;\nloop invariant x != 88;\nloop invariant x != 89;\nloop invariant x != 90;\nloop invariant x != 91;\nloop invariant x != 92;\nloop invariant x != 93;\nloop invariant x != 94;\nloop invariant x != 95;\nloop invariant x != 96;\nloop invariant x != 97;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 50 is preserved but not established.\nloop invariant x + y >= 0 is preserved but not established.\nloop invariant v1 == v2 is preserved but not established.\nloop invariant v2 == v3 is preserved but not established.\nloop invariant v3 == v1 is partially proven to be inductive.\nloop invariant v1 == y is preserved but not established.\nloop invariant v2 == y is partially proven to be inductive.\nloop invariant v3 == y is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 100000 is partially proven to be inductive.\nloop invariant v2 <= 100000 is partially proven to be inductive.\nloop invariant v3 <= 100000 is partially proven to be inductive.\nloop invariant v1 >= -50 is partially proven to be inductive.\nloop invariant v2 >= -50 is partially proven to be inductive.\nloop invariant v3 >= -50 is partially proven to be inductive.\nloop invariant v1 <= 50 is partially proven to be inductive.\nloop invariant v2 <= 50 is partially proven to be inductive.\nloop invariant v3 <= 50 is partially proven to be inductive.\nloop invariant v1 != 0 is partially proven to be inductive.\nloop invariant v2 != 0 is partially proven to be inductive.\nloop invariant v3 != 0 is partially proven to be inductive.\nloop invariant y != 0 is partially proven to be inductive.\nloop invariant x != -50 is preserved but not established.\nloop invariant x != 0 is partially proven to be inductive.\nloop invariant x != 1 is partially proven to be inductive.\nloop invariant x != 2 is partially proven to be inductive.\nloop invariant x != 3 is partially proven to be inductive.\nloop invariant x != 4 is partially proven to be inductive.\nloop invariant x != 5 is partially proven to be inductive.\nloop invariant x != 6 is partially proven to be inductive.\nloop invariant x != 7 is partially proven to be inductive.\nloop invariant x != 8 is partially proven to be inductive.\nloop invariant x != 9 is partially proven to be inductive.\nloop invariant x != 10 is partially proven to be inductive.\nloop invariant x != 11 is partially proven to be inductive.\nloop invariant x != 12 is partially proven to be inductive.\nloop invariant x != 13 is partially proven to be inductive.\nloop invariant x != 14 is partially proven to be inductive.\nloop invariant x != 15 is partially proven to be inductive.\nloop invariant x != 16 is partially proven to be inductive.\nloop invariant x != 17 is partially proven to be inductive.\nloop invariant x != 18 is partially proven to be inductive.\nloop invariant x != 19 is partially proven to be inductive.\nloop invariant x != 20 is partially proven to be inductive.\nloop invariant x != 21 is partially proven to be inductive.\nloop invariant x != 22 is partially proven to be inductive.\nloop invariant x != 23 is partially proven to be inductive.\nloop invariant x != 24 is partially proven to be inductive.\nloop invariant x != 25 is partially proven to be inductive.\nloop invariant x != 26 is partially proven to be inductive.\nloop invariant x != 27 is partially proven to be inductive.\nloop invariant x != 28 is partially proven to be inductive.\nloop invariant x != 29 is partially proven to be inductive.\nloop invariant x != 30 is partially proven to be inductive.\nloop invariant x != 31 is partially proven to be inductive.\nloop invariant x != 32 is partially proven to be inductive.\nloop invariant x != 33 is partially proven to be inductive.\nloop invariant x != 34 is partially proven to be inductive.\nloop invariant x != 35 is partially proven to be inductive.\nloop invariant x != 36 is partially proven to be inductive.\nloop invariant x != 37 is partially proven to be inductive.\nloop invariant x != 38 is partially proven to be inductive.\nloop invariant x != 39 is partially proven to be inductive.\nloop invariant x != 40 is partially proven to be inductive.\nloop invariant x != 41 is partially proven to be inductive.\nloop invariant x != 42 is partially proven to be inductive.\nloop invariant x != 43 is partially proven to be inductive.\nloop invariant x != 44 is partially proven to be inductive.\nloop invariant x != 45 is partially proven to be inductive.\nloop invariant x != 46 is partially proven to be inductive.\nloop invariant x != 47 is partially proven to be inductive.\nloop invariant x != 48 is partially proven to be inductive.\nloop invariant x != 49 is partially proven to be inductive.\nloop invariant x != 50 is partially proven to be inductive.\nloop invariant x != 51 is partially proven to be inductive.\nloop invariant x != 52 is partially proven to be inductive.\nloop invariant x != 53 is partially proven to be inductive.\nloop invariant x != 54 is partially proven to be inductive.\nloop invariant x != 55 is partially proven to be inductive.\nloop invariant x != 56 is partially proven to be inductive.\nloop invariant x != 57 is partially proven to be inductive.\nloop invariant x != 58 is partially proven to be inductive.\nloop invariant x != 59 is partially proven to be inductive.\nloop invariant x != 60 is partially proven to be inductive.\nloop invariant x != 61 is partially proven to be inductive.\nloop invariant x != 62 is partially proven to be inductive.\nloop invariant x != 63 is partially proven to be inductive.\nloop invariant x != 64 is partially proven to be inductive.\nloop invariant x != 65 is partially proven to be inductive.\nloop invariant x != 66 is partially proven to be inductive.\nloop invariant x != 67 is partially proven to be inductive.\nloop invariant x != 68 is partially proven to be inductive.\nloop invariant x != 69 is partially proven to be inductive.\nloop invariant x != 70 is partially proven to be inductive.\nloop invariant x != 71 is partially proven to be inductive.\nloop invariant x != 72 is partially proven to be inductive.\nloop invariant x != 73 is partially proven to be inductive.\nloop invariant x != 74 is partially proven to be inductive.\nloop invariant x != 75 is partially proven to be inductive.\nloop invariant x != 76 is partially proven to be inductive.\nloop invariant x != 77 is partially proven to be inductive.\nloop invariant x != 78 is partially proven to be inductive.\nloop invariant x != 79 is partially proven to be inductive.\nloop invariant x != 80 is partially proven to be inductive.\nloop invariant x != 81 is partially proven to be inductive.\nloop invariant x != 82 is partially proven to be inductive.\nloop invariant x != 83 is partially proven to be inductive.\nloop invariant x != 84 is partially proven to be inductive.\nloop invariant x != 85 is partially proven to be inductive.\nloop invariant x != 86 is partially proven to be inductive.\nloop invariant x != 87 is partially proven to be inductive.\nloop invariant x != 88 is partially proven to be inductive.\nloop invariant x != 89 is partially proven to be inductive.\nloop invariant x != 90 is partially proven to be inductive.\nloop invariant x != 91 is partially proven to be inductive.\nloop invariant x != 92 is partially proven to be inductive.\nloop invariant x != 93 is partially proven to be inductive.\nloop invariant x != 94 is partially proven to be inductive.\nloop invariant x != 95 is partially proven to be inductive.\nloop invariant x != 96 is partially proven to be inductive.\nloop invariant x != 97 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= y; loop invariant x >= y - 50; loop invariant y <= x + 50; loop invariant y <= x; loop invariant y <= x - y; loop invariant y <= x - y + 1; loop invariant y <= x - y + 1 - y; loop invariant y <= x - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= y; loop invariant x >= y - 50; loop invariant y <= x + 50; loop invariant y <= x; loop invariant y <= x - y; loop invariant y <= x - y + 1; loop invariant y <= x - y + 1 - y; loop invariant y <= x - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 40: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\nloop invariant i1: x < 0;\nloop invariant i2: y >= 0;\nloop invariant i3: 0 <= y;\nloop invariant i4: x <= 0;\nloop invariant i5: x + y <= 0;\nloop invariant i6: x + y >= 0;\nloop invariant i7: y >= 1;\nloop invariant i8: y <= 50;\nloop invariant i9: v1 <= 10;\nloop invariant i10: v2 <= 10;\nloop invariant i11: v3 <= 10;\nloop invariant i12: v1 >= 0;\nloop invariant i13: v2 >= 0;\nloop invariant i14: v3 >= 0;\nloop invariant i15: y <= x + y;\nloop invariant i16: x <= y + 50;\nloop invariant i17: y + 1 <= y + 49;\nloop invariant i18: v1 + v2 + v3 <= 30;\nloop invariant i19: v1 + v2 + v3 >= 0;\nloop invariant i20: v1 + v2 + v3 <= 10;\nloop invariant i21: 0 <= y < 100000;\nloop invariant i22: x == 1 + (y * (y - 1)) / 2;\nloop invariant i23: 0 <= y <= 100000;\nloop invariant i24: x >= (1 + (y - 1) * y / 2);\nloop invariant i25: 0 <= x;\nloop invariant i26: y == unknown_int() || y == v1 || y == v2 || y == v3;\nloop invariant i27: x == unknown_int() || x == v1 || x == v2 || x == v3;\nloop invariant i28: 1 <= y <= 100000;\nloop invariant i29: x >= -50;\nloop invariant i30: 0 <= y <= x + y; loop invariant x >= -50; loop invariant y >= 0; loop invariant v1 >= 0; loop invariant v2 >= 0; loop invariant v3 >= 0; loop invariant v1 <= 1; loop invariant v2 <= 1; loop invariant v3 <= 1; loop invariant v1 + v2 + v3 <= 3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= 3; loop invariant v1 * v2 * v3 <= 1; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= 0; loop invariant v1 * v2 * v3 >= 0; loop invariant v1 + v2 + v3 >= 0; loop invariant v1 * v2 + v1 * v3 + v2 * v3 <= v1 + v2 + v3; loop invariant v1 * v2 * v3 <= v1 + v2 + v3; loop invariant v1 + v2 + v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 * v3 <= v1 * v2 + v1 * v3 + v2 * v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 + v2 + v3; loop invariant v1 * v2 + v1 * v3 + v2 * v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3; loop invariant v1 + v2 + v3 >= v1 * v2 * v3;\nloop invariant i31: 0 <= x <= -50;\nloop invariant i32: x >= y;\nloop invariant i33: y <= 100000;\nloop invariant i34: 0 <= y <= 50;\nloop invariant i35: x + y == 0;\nloop invariant i36: x >= (-50 + y);\nloop invariant i37: y > 0;\nloop invariant i38: 0 <= x < 0;\nloop invariant i39: x <= -50 + y * (y - 1);\nloop invariant i40: v1 == v2;\nloop invariant i41: v2 == v3;\nloop invariant i42: v3 == v1;\nloop invariant i43: v1 == y;\nloop invariant i44: v2 == y;\nloop invariant i45: v3 == y;\nloop invariant i46: v1 <= 100000;\nloop invariant i47: v2 <= 100000;\nloop invariant i48: v3 <= 100000;\nloop invariant i49: v1 >= -50;\nloop invariant i50: v2 >= -50;\nloop invariant i51: v3 >= -50;\nloop invariant i52: v1 <= 50;\nloop invariant i53: v2 <= 50;\nloop invariant i54: v3 <= 50;\nloop invariant i55: v1 != 0;\nloop invariant i56: v2 != 0;\nloop invariant i57: v3 != 0;\nloop invariant i58: y != 0;\nloop invariant i59: x != -50;\nloop invariant i60: x != 0;\nloop invariant i61: x != 1;\nloop invariant i62: x != 2;\nloop invariant i63: x != 3;\nloop invariant i64: x != 4;\nloop invariant i65: x != 5;\nloop invariant i66: x != 6;\nloop invariant i67: x != 7;\nloop invariant i68: x != 8;\nloop invariant i69: x != 9;\nloop invariant i70: x != 10;\nloop invariant i71: x != 11;\nloop invariant i72: x != 12;\nloop invariant i73: x != 13;\nloop invariant i74: x != 14;\nloop invariant i75: x != 15;\nloop invariant i76: x != 16;\nloop invariant i77: x != 17;\nloop invariant i78: x != 18;\nloop invariant i79: x != 19;\nloop invariant i80: x != 20;\nloop invariant i81: x != 21;\nloop invariant i82: x != 22;\nloop invariant i83: x != 23;\nloop invariant i84: x != 24;\nloop invariant i85: x != 25;\nloop invariant i86: x != 26;\nloop invariant i87: x != 27;\nloop invariant i88: x != 28;\nloop invariant i89: x != 29;\nloop invariant i90: x != 30;\nloop invariant i91: x != 31;\nloop invariant i92: x != 32;\nloop invariant i93: x != 33;\nloop invariant i94: x != 34;\nloop invariant i95: x != 35;\nloop invariant i96: x != 36;\nloop invariant i97: x != 37;\nloop invariant i98: x != 38;\nloop invariant i99: x != 39;\nloop invariant i100: x != 40;\nloop invariant i101: x != 41;\nloop invariant i102: x != 42;\nloop invariant i103: x != 43;\nloop invariant i104: x != 44;\nloop invariant i105: x != 45;\nloop invariant i106: x != 46;\nloop invariant i107: x != 47;\nloop invariant i108: x != 48;\nloop invariant i109: x != 49;\nloop invariant i110: x != 50;\nloop invariant i111: x != 51;\nloop invariant i112: x != 52;\nloop invariant i113: x != 53;\nloop invariant i114: x != 54;\nloop invariant i115: x != 55;\nloop invariant i116: x != 56;\nloop invariant i117: x != 57;\nloop invariant i118: x != 58;\nloop invariant i119: x != 59;\nloop invariant i120: x != 60;\nloop invariant i121: x != 61;\nloop invariant i122: x != 62;\nloop invariant i123: x != 63;\nloop invariant i124: x != 64;\nloop invariant i125: x != 65;\nloop invariant i126: x != 66;\nloop invariant i127: x != 67;\nloop invariant i128: x != 68;\nloop invariant i129: x != 69;\nloop invariant i130: x != 70;\nloop invariant i131: x != 71;\nloop invariant i132: x != 72;\nloop invariant i133: x != 73;\nloop invariant i134: x != 74;\nloop invariant i135: x != 75;\nloop invariant i136: x != 76;\nloop invariant i137: x != 77;\nloop invariant i138: x != 78;\nloop invariant i139: x != 79;\nloop invariant i140: x != 80;\nloop invariant i141: x != 81;\nloop invariant i142: x != 82;\nloop invariant i143: x != 83;\nloop invariant i144: x != 84;\nloop invariant i145: x != 85;\nloop invariant i146: x != 86;\nloop invariant i147: x != 87;\nloop invariant i148: x != 88;\nloop invariant i149: x != 89;\nloop invariant i150: x != 90;\nloop invariant i151: x != 91;\nloop invariant i152: x != 92;\nloop invariant i153: x != 93;\nloop invariant i154: x != 94;\nloop invariant i155: x != 95;\nloop invariant i156: x != 96;\nloop invariant i157: x != 97;\nloop invariant i158: 1 <= y; loop invariant x >= y - 50; loop invariant y <= x + 50; loop invariant y <= x; loop invariant y <= x - y; loop invariant y <= x - y + 1; loop invariant y <= x - y + 1 - y; loop invariant y <= x - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1; loop invariant y <= x - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y + 1 - y;\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 18,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: y + 1 <= y + 49;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    while(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant (m >= 0 || n <= 0) ==> (m >= 0);\nloop invariant (m < n || n <= 0) ==> (m < n);\nloop invariant (m >= 0 || n <= 0) ==> (m < n);\nloop invariant (m < n || n <= 0) ==> (m >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m >= x;\nloop invariant (m >= 0 ==> n <= 0);\nloop invariant (m < n ==> n <= 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= m <= n;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m <= x + 1;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> n <= m + 1;\nloop invariant m <= x ==> x + 1 <= m + 1;\nloop invariant x <= n ==> m <= x;\nloop invariant m <= x ==> x <= x + 1;\nloop invariant x <= m ==> m <= m;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant (m >= 0 ==> n > 0);\nloop invariant (m < n ==> n > 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> x >= m;\nloop invariant n <= 0 ==> x >= n;\nloop invariant m < n ==> x < n;\nloop invariant m >= 0 ==> m >= 0;\nloop invariant n <= 0 ==> n <= 0;\nloop invariant m < n ==> m < n;\nloop invariant m >= 0 ==> m <= x;\nloop invariant n <= 0 ==> n <= x;\nloop invariant m < n ==> m < x;\nloop invariant m >= 0 ==> m >= x;\nloop invariant n <= 0 ==> n >= x;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m >= m;\nloop invariant m >= 0 ==> m <= m;\nloop invariant n <= 0 ==> n >= n;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= m;\nloop invariant n <= 0 ==> n <= n;\nloop invariant m < n ==> m >= m;\nloop invariant m >= 0 ==> m <= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant x == n ==> m == x;\nloop invariant x < n ==> m < x;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant 0 <= m <= x;\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant (x < n || n <= 0) ==> (m >= 0);\nloop invariant (x < n || n <= 0) ==> (m < n);\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (x < n ==> m < n);\nloop invariant (x >= n ==> m >= n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (m == x) || (x == n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant 0 <= x <= n;\nloop invariant (x < n ==> m <= x);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m < n ==> x == n;\nloop invariant m >= n ==> x < n;\nloop invariant m < n ==> m < x;\nloop invariant m >= n ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n ;\nloop invariant m <= x ;\nloop invariant x <= n ;\nloop invariant m >= 0 ;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m >= 0 is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant (m >= 0 || n <= 0) ==> (m >= 0);\nloop invariant (m < n || n <= 0) ==> (m < n);\nloop invariant (m >= 0 || n <= 0) ==> (m < n);\nloop invariant (m < n || n <= 0) ==> (m >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m >= 0 is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant (m >= 0 || n <= 0) ==> (m >= 0) is partially proven to be inductive.\nloop invariant (m < n || n <= 0) ==> (m < n) is preserved but not established.\nloop invariant (m >= 0 || n <= 0) ==> (m < n) is partially proven to be inductive.\nloop invariant (m < n || n <= 0) ==> (m >= 0) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\nloop invariant i5: (m >= 0 || n <= 0) ==> (m >= 0);\n\n\nloop invariant i8: (m < n || n <= 0) ==> (m >= 0);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m >= x;\nloop invariant (m >= 0 ==> n <= 0);\nloop invariant (m < n ==> n <= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant m >= x is partially proven to be inductive.\nloop invariant (m >= 0 ==> n <= 0) is preserved but not established.\nloop invariant (m < n ==> n <= 0) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= m <= n;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m <= x + 1;\nloop invariant x < n ==> m <= n;\nloop invariant x < n ==> n <= m + 1;\nloop invariant m <= x ==> x + 1 <= m + 1;\nloop invariant x <= n ==> m <= x;\nloop invariant m <= x ==> x <= x + 1;\nloop invariant x <= m ==> m <= m;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant x <= m ==> m <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\nloop invariant m <= x ==> x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant x >= m is partially proven to be inductive.\nloop invariant m <= x + 1 is partially proven to be inductive.\nloop invariant x < n ==> m <= n is partially proven to be inductive.\nloop invariant x < n ==> n <= m + 1 is preserved but not established.\nloop invariant m <= x ==> x + 1 <= m + 1 is established but not preserved.\nloop invariant x <= n ==> m <= x is partially proven to be inductive.\nloop invariant m <= x ==> x <= x + 1 is partially proven to be inductive.\nloop invariant x <= m ==> m <= m is partially proven to be inductive.\nloop invariant m <= x ==> x <= n is partially proven to be inductive.\nloop invariant x <= m ==> m <= n is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\nloop invariant i4: x >= m;\nloop invariant i5: m <= x + 1;\nloop invariant i6: x < n ==> m <= n;\n\n\nloop invariant i9: x <= n ==> m <= x;\nloop invariant i10: m <= x ==> x <= x + 1;\nloop invariant i11: x <= m ==> m <= m;\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant (m >= 0 ==> n > 0);\nloop invariant (m < n ==> n > 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= m <= x is partially proven to be inductive.\nloop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= m is partially proven to be inductive.\nloop invariant (m >= 0 ==> n > 0) is preserved but not established.\nloop invariant (m < n ==> n > 0) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= m <= x;\n\nloop invariant i3: x >= m;\n\nloop invariant i5: (m < n ==> n > 0);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 0 ==> x >= m;\nloop invariant n <= 0 ==> x >= n;\nloop invariant m < n ==> x < n;\nloop invariant m >= 0 ==> m >= 0;\nloop invariant n <= 0 ==> n <= 0;\nloop invariant m < n ==> m < n;\nloop invariant m >= 0 ==> m <= x;\nloop invariant n <= 0 ==> n <= x;\nloop invariant m < n ==> m < x;\nloop invariant m >= 0 ==> m >= x;\nloop invariant n <= 0 ==> n >= x;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m >= m;\nloop invariant m >= 0 ==> m <= m;\nloop invariant n <= 0 ==> n >= n;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= m;\nloop invariant n <= 0 ==> n <= n;\nloop invariant m < n ==> m >= m;\nloop invariant m >= 0 ==> m <= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\nloop invariant m < n ==> m <= n;\nloop invariant m >= 0 ==> m >= n;\nloop invariant n <= 0 ==> n >= m;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m >= 0 ==> x >= m is partially proven to be inductive.\nloop invariant n <= 0 ==> x >= n is partially proven to be inductive.\nloop invariant m < n ==> x < n is established but not preserved.\nloop invariant m >= 0 ==> m >= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> n <= 0 is partially proven to be inductive.\nloop invariant m < n ==> m < n is partially proven to be inductive.\nloop invariant m >= 0 ==> m <= x is partially proven to be inductive.\nloop invariant n <= 0 ==> n <= x is partially proven to be inductive.\nloop invariant m < n ==> m < x is preserved but not established.\nloop invariant m >= 0 ==> m >= x is established but not preserved.\nloop invariant n <= 0 ==> n >= x is partially proven to be inductive.\nloop invariant m < n ==> m <= n is partially proven to be inductive.\nloop invariant m >= 0 ==> m >= n is partially proven to be inductive.\nloop invariant n <= 0 ==> n >= m is partially proven to be inductive.\nloop invariant m < n ==> m >= m is partially proven to be inductive.\nloop invariant m >= 0 ==> m <= m is partially proven to be inductive.\nloop invariant n <= 0 ==> n >= n is partially proven to be inductive.\nloop invariant m >= 0 ==> m >= m is partially proven to be inductive.\nloop invariant n <= 0 ==> n <= n is partially proven to be inductive.\nloop invariant m >= 0 ==> m <= n is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0 ==> x >= m;\nloop invariant i3: n <= 0 ==> x >= n;\n\nloop invariant i5: m >= 0 ==> m >= 0;\nloop invariant i6: n <= 0 ==> n <= 0;\nloop invariant i7: m < n ==> m < n;\nloop invariant i8: m >= 0 ==> m <= x;\nloop invariant i9: n <= 0 ==> n <= x;\n\n\n\nloop invariant i13: m < n ==> m <= n;\n\n\nloop invariant i16: m < n ==> m >= m;\nloop invariant i17: m >= 0 ==> m <= m;\nloop invariant i18: n <= 0 ==> n >= n;\nloop invariant i19: m >= 0 ==> m >= m;\nloop invariant i20: n <= 0 ==> n <= n;\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant x == n ==> m == x;\nloop invariant x < n ==> m < x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant x == n ==> m == x is established but not preserved.\nloop invariant x < n ==> m < x is preserved but not established.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\nloop invariant i3: m <= x;\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x < n;\nloop invariant 0 <= m <= x;\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\nloop invariant (unknown_int() ==> (x == m));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\nloop invariant (x < n || n <= 0) ==> (m >= 0);\nloop invariant (x < n || n <= 0) ==> (m < n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant (x < n || n <= 0) ==> (m >= 0) is partially proven to be inductive.\nloop invariant (x < n || n <= 0) ==> (m < n) is preserved but not established.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\nloop invariant i3: m <= x;\nloop invariant i4: (x < n || n <= 0) ==> (m >= 0);\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant m >= 0;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (x < n ==> m < n);\nloop invariant (x >= n ==> m >= n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nloop invariant m >= 0 is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant (x < n ==> m < n) is partially proven to be inductive.\nloop invariant (x >= n ==> m >= n) is established but not preserved.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: m >= 0;\nloop invariant i4: m <= x;\n\nloop invariant i6: (x < n ==> m < n);\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant (m == x) || (x == n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant (m == x) || (x == n) is established but not preserved.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\n\n\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant 0 <= x <= n;\nloop invariant (x < n ==> m <= x);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= m <= x is partially proven to be inductive.\nloop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x < n ==> m <= x) is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= m <= x;\n\nloop invariant i3: (x < n ==> m <= x);\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= x;\nloop invariant m < n ==> x == n;\nloop invariant m >= n ==> x < n;\nloop invariant m < n ==> m < x;\nloop invariant m >= n ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\nloop invariant x < n ==> m < x;\nloop invariant m >= x ==> m >= x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= x is partially proven to be inductive.\nloop invariant m < n ==> x == n is preserved but not established.\nloop invariant m >= n ==> x < n is preserved but not established.\nloop invariant m < n ==> m < x is partially proven to be inductive.\nloop invariant m >= n ==> m >= x is partially proven to be inductive.\nloop invariant x < n ==> m < x is partially proven to be inductive.\nloop invariant m >= x ==> m >= x is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: 0 <= m <= x;\n\n\n\nloop invariant i6: m >= n ==> m >= x;\n\nloop invariant i8: m >= x ==> m >= x;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n ;\nloop invariant m <= x ;\nloop invariant x <= n ;\nloop invariant m >= 0 ;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant m >= 0 is partially proven to be inductive.\nAssertion m >= 0 || n <= 0: Partially proven\nAssertion m < n || n <= 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= x <= n ;\nloop invariant i2: m <= x ;\nloop invariant i3: x <= n ;\nloop invariant i4: m >= 0 ;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 64: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\nloop invariant i4: m <= n;\nloop invariant i5: x <= n;\nloop invariant i6: (m >= 0 || n <= 0) ==> (m >= 0);\nloop invariant i7: (m < n || n <= 0) ==> (m < n);\nloop invariant i8: (m >= 0 || n <= 0) ==> (m < n);\nloop invariant i9: (m < n || n <= 0) ==> (m >= 0);\nloop invariant i10: 0 <= m <= n;\nloop invariant i11: m >= x;\nloop invariant i12: (m >= 0 ==> n <= 0);\nloop invariant i13: (m < n ==> n <= 0);\nloop invariant i14: 1 <= n;\nloop invariant i15: x >= m;\nloop invariant i16: m <= x + 1;\nloop invariant i17: x < n ==> m <= n;\nloop invariant i18: x < n ==> n <= m + 1;\nloop invariant i19: m <= x ==> x + 1 <= m + 1;\nloop invariant i20: x <= n ==> m <= x;\nloop invariant i21: m <= x ==> x <= x + 1;\nloop invariant i22: x <= m ==> m <= m;\nloop invariant i23: m <= x ==> x <= n;\nloop invariant i24: x <= m ==> m <= n;\nloop invariant i25: 0 <= m <= x;\nloop invariant i26: (m >= 0 ==> n > 0);\nloop invariant i27: (m < n ==> n > 0);\nloop invariant i28: m >= 0 ==> x >= m;\nloop invariant i29: n <= 0 ==> x >= n;\nloop invariant i30: m < n ==> x < n;\nloop invariant i31: m >= 0 ==> m >= 0;\nloop invariant i32: n <= 0 ==> n <= 0;\nloop invariant i33: m < n ==> m < n;\nloop invariant i34: m >= 0 ==> m <= x;\nloop invariant i35: n <= 0 ==> n <= x;\nloop invariant i36: m < n ==> m < x;\nloop invariant i37: m >= 0 ==> m >= x;\nloop invariant i38: n <= 0 ==> n >= x;\nloop invariant i39: m < n ==> m <= n;\nloop invariant i40: m >= 0 ==> m >= n;\nloop invariant i41: n <= 0 ==> n >= m;\nloop invariant i42: m < n ==> m >= m;\nloop invariant i43: m >= 0 ==> m <= m;\nloop invariant i44: n <= 0 ==> n >= n;\nloop invariant i45: m >= 0 ==> m >= m;\nloop invariant i46: n <= 0 ==> n <= n;\nloop invariant i47: m >= 0 ==> m <= n;\nloop invariant i48: x == n ==> m == x;\nloop invariant i49: x < n ==> m < x;\nloop invariant i50: 0 <= x < n;\nloop invariant i51: (unknown_int() ==> (x == m));\nloop invariant i52: (x < n || n <= 0) ==> (m >= 0);\nloop invariant i53: (x < n || n <= 0) ==> (m < n);\nloop invariant i54: x >= 0;\nloop invariant i55: (x < n ==> m < n);\nloop invariant i56: (x >= n ==> m >= n);\nloop invariant i57: (m == x) || (x == n);\nloop invariant i58: (x < n ==> m <= x);\nloop invariant i59: m < n ==> x == n;\nloop invariant i60: m >= n ==> x < n;\nloop invariant i61: m >= n ==> m >= x;\nloop invariant i62: m >= x ==> m >= x;\nloop invariant i63: 0 <= x <= n ;\nloop invariant i64: m <= x ;\nloop invariant i65: x <= n ;\nloop invariant i66: m >= 0 ;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 14,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    /*@\n\nloop invariant i2: m >= 0;\nloop invariant i3: m <= x;\n\n\nloop invariant i6: (m >= 0 || n <= 0) ==> (m >= 0);\n\n\nloop invariant i9: (m < n || n <= 0) ==> (m >= 0);\n\n\n\n\n\nloop invariant i15: x >= m;\nloop invariant i16: m <= x + 1;\nloop invariant i17: x < n ==> m <= n;\n\n\nloop invariant i20: x <= n ==> m <= x;\nloop invariant i21: m <= x ==> x <= x + 1;\nloop invariant i22: x <= m ==> m <= m;\n\n\nloop invariant i25: 0 <= m <= x;\n\nloop invariant i27: (m < n ==> n > 0);\nloop invariant i28: m >= 0 ==> x >= m;\nloop invariant i29: n <= 0 ==> x >= n;\n\nloop invariant i31: m >= 0 ==> m >= 0;\nloop invariant i32: n <= 0 ==> n <= 0;\nloop invariant i33: m < n ==> m < n;\nloop invariant i34: m >= 0 ==> m <= x;\nloop invariant i35: n <= 0 ==> n <= x;\n\n\n\nloop invariant i39: m < n ==> m <= n;\n\n\nloop invariant i42: m < n ==> m >= m;\nloop invariant i43: m >= 0 ==> m <= m;\nloop invariant i44: n <= 0 ==> n >= n;\nloop invariant i45: m >= 0 ==> m >= m;\nloop invariant i46: n <= 0 ==> n <= n;\n\n\n\n\n\nloop invariant i52: (x < n || n <= 0) ==> (m >= 0);\n\nloop invariant i54: x >= 0;\nloop invariant i55: (x < n ==> m < n);\n\n\nloop invariant i58: (x < n ==> m <= x);\n\n\nloop invariant i61: m >= n ==> m >= x;\nloop invariant i62: m >= x ==> m >= x;\nloop invariant i63: 0 <= x <= n ;\nloop invariant i64: m <= x ;\nloop invariant i65: x <= n ;\nloop invariant i66: m >= 0 ;\n*/\nwhile(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n\n    {;\n//@ assert((m < n || n <= 0));\n}\n\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/70.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant x <= n + 1 - (x - 1);\nloop invariant y <= n - (x - 1);\nloop invariant y <= n;\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant y = n - x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= n - x;\nloop invariant (n > 0 && x <= n) ==> (y < n);\nloop invariant x >= 1;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant x > 0 ==> y < n;\nloop invariant x > 0 ==> y >= 0;\nloop invariant x <= n ==> y <= n - x;\nloop invariant x <= n ==> y >= 0;\nloop invariant x <= n ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant x <= n ==> y >= (x - 1) * x / 2;\nloop invariant x <= n ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n > 0 ==> y < n;\nloop invariant n > 0 ==> y >= 0;\nloop invariant n > 0 ==> y <= n - x;\nloop invariant n > 0 ==> y >= 0;\nloop invariant n > 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n > 0 ==> y >= (x - 1) * x / 2;\nloop invariant n > 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n <= 0 ==> x <= 0;\nloop invariant n <= 0 ==> x >= 0;\nloop invariant n <= 0 ==> y <= 0;\nloop invariant n <= 0 ==> y >= 0;\nloop invariant n <= 0 ==> y <= n - x;\nloop invariant n <= 0 ==> y >= 0;\nloop invariant n <= 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n <= 0 ==> y >= (x - 1) * x / 2;\nloop invariant n <= 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant (n > 0 ==> y < n && n - x > 0);\nloop invariant x + y == n;\nloop invariant (x <= n ==> x == n && y == 0);\nloop invariant (x > n ==> x == n + 1 && y == 0);\nloop invariant (n > 0 ==> y < n);\nloop invariant (n <= 0 ==> y == n && x == n + 1);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant y + x > 0 ==> y < n;\nloop invariant y + x <= 0 ==> y == n;\nloop invariant y + x > 0 ==> y >= 0;\nloop invariant y + x <= 0 ==> y <= n;\nloop invariant y + x > 0 ==> x <= n;\nloop invariant y + x <= 0 ==> x >= 1;\nloop invariant y + x > 0 ==> y + x <= n;\nloop invariant y + x <= 0 ==> x + y >= n;\nloop invariant y + x > 0 ==> y + x >= 1;\nloop invariant y + x <= 0 ==> x + y <= n - 1;\nloop invariant y + x > 0 ==> x + y <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n+1;\nloop invariant n - x <= y <= n;\nloop invariant x <= n+1 ==> y <= n;\nloop invariant x <= n+1 ==> y >= 0;\nloop invariant x <= n ==> y == n - x;\nloop invariant x <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant y + x <= n;\nloop invariant x + y == n;\nloop invariant x + y == n ==> y < n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant y = n - x;\nloop invariant n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant x == 1;\nloop invariant x + 1 == x;\nloop invariant y == n - x;\nloop invariant x > n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y = n - x;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n - x;\nloop invariant x <= n;\nloop invariant n <= y <= n - x;\nloop invariant x ==> y < n;\nloop invariant n ==> y < n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant x <= n + 1 - (x - 1);\nloop invariant y <= n - (x - 1);\nloop invariant y <= n;\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n + 1 is preserved but not established.\nloop invariant x <= n + 1 - (x - 1) is established but not preserved.\nloop invariant y <= n - (x - 1) is preserved but not established.\nloop invariant y <= n is partially proven to be inductive.\nloop invariant y >= n - x is preserved but not established.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y >= n - (n + 1 - (x - 1)) is partially proven to be inductive.\nAssertion y < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant y = n - x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= n - x;\nloop invariant (n > 0 && x <= n) ==> (y < n);\nloop invariant x >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant (n > 0 && x <= n) ==> (y < n) is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nAssertion y < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\nloop invariant i3: x >= 1;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant x > 0 ==> y < n;\nloop invariant x > 0 ==> y >= 0;\nloop invariant x <= n ==> y <= n - x;\nloop invariant x <= n ==> y >= 0;\nloop invariant x <= n ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant x <= n ==> y >= (x - 1) * x / 2;\nloop invariant x <= n ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n > 0 ==> y < n;\nloop invariant n > 0 ==> y >= 0;\nloop invariant n > 0 ==> y <= n - x;\nloop invariant n > 0 ==> y >= 0;\nloop invariant n > 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n > 0 ==> y >= (x - 1) * x / 2;\nloop invariant n > 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n <= 0 ==> x <= 0;\nloop invariant n <= 0 ==> x >= 0;\nloop invariant n <= 0 ==> y <= 0;\nloop invariant n <= 0 ==> y >= 0;\nloop invariant n <= 0 ==> y <= n - x;\nloop invariant n <= 0 ==> y >= 0;\nloop invariant n <= 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n <= 0 ==> y >= (x - 1) * x / 2;\nloop invariant n <= 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1) is preserved but not established.\nloop invariant x > 0 ==> y < n is partially proven to be inductive.\nloop invariant x > 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y <= n - x is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nloop invariant x <= n ==> y >= (x - 1) * x / 2 is partially proven to be inductive.\nloop invariant x <= n ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nloop invariant n > 0 ==> y < n is partially proven to be inductive.\nloop invariant n > 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant n > 0 ==> y <= n - x is partially proven to be inductive.\nloop invariant n > 0 ==> y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nloop invariant n > 0 ==> y >= (x - 1) * x / 2 is partially proven to be inductive.\nloop invariant n > 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nloop invariant n <= 0 ==> x <= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> y <= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> y <= n - x is partially proven to be inductive.\nloop invariant n <= 0 ==> y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nloop invariant n <= 0 ==> y >= (x - 1) * x / 2 is partially proven to be inductive.\nloop invariant n <= 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nAssertion y < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: n <= 0 ==> x >= 0;\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant (n > 0 ==> y < n && n - x > 0);\nloop invariant x + y == n;\nloop invariant (x <= n ==> x == n && y == 0);\nloop invariant (x > n ==> x == n + 1 && y == 0);\nloop invariant (n > 0 ==> y < n);\nloop invariant (n <= 0 ==> y == n && x == n + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant 0 <= y <= n - x is preserved but not established.\nloop invariant (n > 0 ==> y < n && n - x > 0) is preserved but not established.\nloop invariant x + y == n is preserved but not established.\nloop invariant (x <= n ==> x == n && y == 0) is preserved but not established.\nloop invariant (x > n ==> x == n + 1 && y == 0) is partially proven to be inductive.\nloop invariant (n > 0 ==> y < n) is partially proven to be inductive.\nloop invariant (n <= 0 ==> y == n && x == n + 1) is partially proven to be inductive.\nAssertion y < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant y + x > 0 ==> y < n;\nloop invariant y + x <= 0 ==> y == n;\nloop invariant y + x > 0 ==> y >= 0;\nloop invariant y + x <= 0 ==> y <= n;\nloop invariant y + x > 0 ==> x <= n;\nloop invariant y + x <= 0 ==> x >= 1;\nloop invariant y + x > 0 ==> y + x <= n;\nloop invariant y + x <= 0 ==> x + y >= n;\nloop invariant y + x > 0 ==> y + x >= 1;\nloop invariant y + x <= 0 ==> x + y <= n - 1;\nloop invariant y + x > 0 ==> x + y <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n + 1 is preserved but not established.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant y + x > 0 ==> y < n is partially proven to be inductive.\nloop invariant y + x <= 0 ==> y == n is partially proven to be inductive.\nloop invariant y + x > 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant y + x <= 0 ==> y <= n is partially proven to be inductive.\nloop invariant y + x > 0 ==> x <= n is partially proven to be inductive.\nloop invariant y + x <= 0 ==> x >= 1 is partially proven to be inductive.\nloop invariant y + x > 0 ==> y + x <= n is partially proven to be inductive.\nloop invariant y + x <= 0 ==> x + y >= n is partially proven to be inductive.\nloop invariant y + x > 0 ==> y + x >= 1 is partially proven to be inductive.\nloop invariant y + x <= 0 ==> x + y <= n - 1 is partially proven to be inductive.\nloop invariant y + x > 0 ==> x + y <= n is partially proven to be inductive.\nAssertion y < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\nloop invariant i5: y + x > 0 ==> y >= 0;\n\n\n\n\n\nloop invariant i11: y + x > 0 ==> y + x >= 1;\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n+1;\nloop invariant n - x <= y <= n;\nloop invariant x <= n+1 ==> y <= n;\nloop invariant x <= n+1 ==> y >= 0;\nloop invariant x <= n ==> y == n - x;\nloop invariant x <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n+1 is preserved but not established.\nloop invariant n - x <= y <= n is preserved but not established.\nloop invariant x <= n+1 ==> y <= n is partially proven to be inductive.\nloop invariant x <= n+1 ==> y >= 0 is preserved but not established.\nloop invariant x <= n ==> y == n - x is neither established nor preserved.\nloop invariant x <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nAssertion y < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: x <= n ==> y == n - x ==> y <= n;\nloop invariant i8: x <= n ==> y == n - x ==> y >= 0;\nloop invariant i9: x <= n ==> y == n - x ==> y >= 0 ==> y <= n;\nloop invariant i10: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0;\nloop invariant i11: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i12: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i13: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i14: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i15: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i16: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i17: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i18: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i19: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i20: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i21: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i22: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i23: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant y + x <= n;\nloop invariant x + y == n;\nloop invariant x + y == n ==> y < n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n is neither established nor preserved.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant y + x <= n is partially proven to be inductive.\nloop invariant x + y == n is preserved but not established.\nloop invariant x + y == n ==> y < n is partially proven to be inductive.\nAssertion y < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\nloop invariant i5: x + y == n ==> y < n;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant y = n - x;\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x == 1;\nloop invariant x + 1 == x;\nloop invariant y == n - x;\nloop invariant x > n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x == 1 is partially proven to be inductive.\nloop invariant x + 1 == x is preserved but not established.\nloop invariant y == n - x is partially proven to be inductive.\nloop invariant x > n is partially proven to be inductive.\nAssertion y < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n + 1 is preserved but not established.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= n + 1 is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y <= n - 1 is partially proven to be inductive.\nAssertion y < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\nloop invariant i5: x >= 1;\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y = n - x;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n - x;\nloop invariant x <= n;\nloop invariant n <= y <= n - x;\nloop invariant x ==> y < n;\nloop invariant n ==> y < n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= y <= n - x is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n <= y <= n - x is preserved but not established.\nloop invariant x ==> y < n is partially proven to be inductive.\nloop invariant n ==> y < n is partially proven to be inductive.\nloop invariant x ==> y <= n - x is partially proven to be inductive.\nloop invariant n ==> y <= n - x is partially proven to be inductive.\nloop invariant x ==> n - x <= y <= n is partially proven to be inductive.\nloop invariant n ==> n - x <= y <= n is partially proven to be inductive.\nloop invariant x ==> y <= n is partially proven to be inductive.\nloop invariant n ==> y <= n is partially proven to be inductive.\nAssertion y < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant 0 <= y <= n is preserved but not established.\nAssertion y < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 0 <= x <= n + 1;\nloop invariant i2: x <= n + 1 - (x - 1);\nloop invariant i3: y <= n - (x - 1);\nloop invariant i4: y <= n;\nloop invariant i5: y >= n - x;\nloop invariant i6: y >= 0;\nloop invariant i7: y >= n - (n + 1 - (x - 1));\nloop invariant i8: y = n - x;\nloop invariant i9: 0 <= y <= n - x;\nloop invariant i10: (n > 0 && x <= n) ==> (y < n);\nloop invariant i11: x >= 1;\nloop invariant i12: 0 <= x <= n;\nloop invariant i13: (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i14: x > 0 ==> y < n;\nloop invariant i15: x > 0 ==> y >= 0;\nloop invariant i16: x <= n ==> y <= n - x;\nloop invariant i17: x <= n ==> y >= 0;\nloop invariant i18: x <= n ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i19: x <= n ==> y >= (x - 1) * x / 2;\nloop invariant i20: x <= n ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i21: n > 0 ==> y < n;\nloop invariant i22: n > 0 ==> y >= 0;\nloop invariant i23: n > 0 ==> y <= n - x;\nloop invariant i24: n > 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i25: n > 0 ==> y >= (x - 1) * x / 2;\nloop invariant i26: n > 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i27: n <= 0 ==> x <= 0;\nloop invariant i28: n <= 0 ==> x >= 0;\nloop invariant i29: n <= 0 ==> y <= 0;\nloop invariant i30: n <= 0 ==> y >= 0;\nloop invariant i31: n <= 0 ==> y <= n - x;\nloop invariant i32: n <= 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i33: n <= 0 ==> y >= (x - 1) * x / 2;\nloop invariant i34: n <= 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i35: 1 <= x <= n;\nloop invariant i36: (n > 0 ==> y < n && n - x > 0);\nloop invariant i37: x + y == n;\nloop invariant i38: (x <= n ==> x == n && y == 0);\nloop invariant i39: (x > n ==> x == n + 1 && y == 0);\nloop invariant i40: (n > 0 ==> y < n);\nloop invariant i41: (n <= 0 ==> y == n && x == n + 1);\nloop invariant i42: 1 <= x <= n + 1;\nloop invariant i43: y + x > 0 ==> y < n;\nloop invariant i44: y + x <= 0 ==> y == n;\nloop invariant i45: y + x > 0 ==> y >= 0;\nloop invariant i46: y + x <= 0 ==> y <= n;\nloop invariant i47: y + x > 0 ==> x <= n;\nloop invariant i48: y + x <= 0 ==> x >= 1;\nloop invariant i49: y + x > 0 ==> y + x <= n;\nloop invariant i50: y + x <= 0 ==> x + y >= n;\nloop invariant i51: y + x > 0 ==> y + x >= 1;\nloop invariant i52: y + x <= 0 ==> x + y <= n - 1;\nloop invariant i53: y + x > 0 ==> x + y <= n;\nloop invariant i54: 0 <= x <= n+1;\nloop invariant i55: n - x <= y <= n;\nloop invariant i56: x <= n+1 ==> y <= n;\nloop invariant i57: x <= n+1 ==> y >= 0;\nloop invariant i58: x <= n ==> y == n - x;\nloop invariant i59: x <= n ==> y >= 0 ==> y == n - x;\nloop invariant i60: x <= n ==> y == n - x ==> y <= n;\nloop invariant i61: x <= n ==> y == n - x ==> y >= 0;\nloop invariant i62: x <= n ==> y == n - x ==> y >= 0 ==> y <= n;\nloop invariant i63: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0;\nloop invariant i64: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i65: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i66: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i67: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i68: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i69: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i70: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i71: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i72: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i73: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i74: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i75: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i76: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i77: y + x <= n;\nloop invariant i78: x + y == n ==> y < n;\nloop invariant i79: n >= 0;\nloop invariant i80: x == 1;\nloop invariant i81: x + 1 == x;\nloop invariant i82: y == n - x;\nloop invariant i83: x > n;\nloop invariant i84: x <= n + 1;\nloop invariant i85: y <= n - 1;\nloop invariant i86: x <= n;\nloop invariant i87: x <= y <= n - x;\nloop invariant i88: n <= y <= n - x;\nloop invariant i89: x ==> y < n;\nloop invariant i90: n ==> y < n;\nloop invariant i91: x ==> y <= n - x;\nloop invariant i92: n ==> y <= n - x;\nloop invariant i93: x ==> n - x <= y <= n;\nloop invariant i94: n ==> n - x <= y <= n;\nloop invariant i95: x ==> y <= n;\nloop invariant i96: n ==> y <= n;\nloop invariant i97: 0 <= y <= n;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
            "combined_annotation_num_solver_calls": 16,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i28: n <= 0 ==> x >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i45: y + x > 0 ==> y >= 0;\n\n\nloop invariant i48: y + x <= 0 ==> x >= 1;\n\n\nloop invariant i51: y + x > 0 ==> y + x >= 1;\n\n\n\n\n\n\n\n\nloop invariant i60: x <= n ==> y == n - x ==> y <= n;\nloop invariant i61: x <= n ==> y == n - x ==> y >= 0;\nloop invariant i62: x <= n ==> y == n - x ==> y >= 0 ==> y <= n;\nloop invariant i63: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0;\nloop invariant i64: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i65: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i66: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i67: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i68: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i69: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i70: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i71: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i72: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i73: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i74: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i75: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i76: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\n\nloop invariant i78: x + y == n ==> y < n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  while( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n \\* (c1 + c2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i * c1;\nloop invariant k <= i * c2;\nloop invariant i * c1 <= k <= i * c2;\nloop invariant k >= i * c1 ==> k >= n;\nloop invariant k <= i * c2 ==> k >= n;\nloop invariant k >= n ==> k >= i * c1;\nloop invariant k >= n ==> k <= i * c2;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= k;\nloop invariant k <= n * c1 + n * c2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k;\nloop invariant (k <= (n * c1)) ==> (i == n && c2 > c1);\nloop invariant (k <= (n * c2)) ==> (i == n && c1 > c2);\nloop invariant (k <= (n * c1)) ==> (i < n && c2 >= c1);\nloop invariant (k <= (n * c2)) ==> (i < n && c1 >= c2);\nloop invariant (k >= (n * c1)) ==> (i == n && c2 <= c1);\nloop invariant (k >= (n * c2)) ==> (i == n && c1 <= c2);\nloop invariant (k >= (n * c1)) ==> (i < n && c2 < c1);\nloop invariant (k >= (n * c2)) ==> (i < n && c1 < c2);\nloop invariant (k == (i * c1)) ==> (c2 > c1);\nloop invariant (k == (i * c2)) ==> (c1 > c2);\nloop invariant (k == (i * c1)) ==> (c2 >= c1);\nloop invariant (k == (i * c2)) ==> (c1 >= c2);\nloop invariant (k == (i * c1)) ==> (i == n);\nloop invariant (k == (i * c2)) ==> (i == n);\nloop invariant (k == (i * c1)) ==> (i < n);\nloop invariant (k == (i * c2)) ==> (i < n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= (2 * c1 * n);\nloop invariant (k - c1 * i) % c1 <= 0;\nloop invariant (k - c2 * i) % c2 <= 0;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant n > 0;\nloop invariant n < 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= n * (c1 + c2);\nloop invariant k >= n * c1 || k <= n * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * max(c1, c2);\nloop invariant (k + c1) * (n - i) >= 0 ==> i < n;\nloop invariant (k + c2) * (n - i) >= 0 ==> i < n;\nloop invariant k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant k + c2 * (n - i) >= c1 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k <= 4000 * n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= v <= 1;\nloop invariant v == 0 ==> k <= (i * c1);\nloop invariant v == 1 ==> k <= (i * c2);\nloop invariant (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2);\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\n*/\n```",
                "```\n/*@\nloop invariant 1. k >= 0;\nloop invariant 2. 0 <= i <= n;\nloop invariant 3. n > 0;\nloop invariant 4. n < 10;\nloop invariant 5. (v == 0) ==> (k >= c1);\nloop invariant 6. (v == 1) ==> (k >= c2);\nloop invariant 7. (v == 0) ==> (k >= c1 + c2 * (i - 1));\nloop invariant 8. (v == 1) ==> (k >= c2 + c1 * (i - 1));\nloop invariant 9. (v == 0) ==> (k <= c1 + c2 * i);\nloop invariant 10. (v == 1) ==> (k <= c2 + c1 * i);\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= (c1 + c2) * n;\nloop invariant (k == (c1 * i) + (c2 * (n - i)));\n*/\n```",
                "```\n/*@\nloop invariant k >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant k >= i * c2;\nloop invariant k <= (i * c1) + (n - i) * c2;\nloop invariant k <= n * c1;\nloop invariant n <= 9;\nloop invariant 0 < n;\nloop invariant n >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k == (c1 + c2) * i;\nloop invariant v == (unknown2() % 2 == 0);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant c1 <= c2;\nloop invariant unknown2() % 2 == 0;\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * (max(c1, c2));\nloop invariant k >= c1 * max(0, i - n) + c2 * max(0, i - n);\nloop invariant k <= c1 * i + c2 * i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (k == k + c1 * (i - 1) + c2 * (n - i));\nloop invariant (k >= 0);\nloop invariant (k <= n * (c1 + c2));\nloop invariant (k >= c1 * i);\nloop invariant (k <= c2 * i);\nloop invariant (k >= c1 * (n - i));\nloop invariant (k <= c2 * (n - i));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k <= n * c1;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant n > 0;\nloop invariant n < 10;\nloop invariant c1 > 0;\nloop invariant c2 > 0;\nloop invariant k >= (c1 * i);\nloop invariant k >= (c2 * i);\nloop invariant k <= (c1 * i) + (c2 * i);\nloop invariant k <= (c1 * n);\nloop invariant k <= (c2 * n);\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant v == 0 || v == 1;\nloop invariant v == (unknown2() % 2 == 0 ? 0 : 1);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 : 0) + (unknown2() % 2 == 0 ? c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n \\* (c1 + c2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 24: lexical error, illegal character \\",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= i * c1;\nloop invariant k <= i * c2;\nloop invariant i * c1 <= k <= i * c2;\nloop invariant k >= i * c1 ==> k >= n;\nloop invariant k <= i * c2 ==> k >= n;\nloop invariant k >= n ==> k >= i * c1;\nloop invariant k >= n ==> k <= i * c2;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\nloop invariant k >= n ==> k >= n;\nloop invariant k >= n ==> k <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k >= i * c1 is partially proven to be inductive.\nloop invariant k <= i * c2 is partially proven to be inductive.\nloop invariant i * c1 <= k <= i * c2 is partially proven to be inductive.\nloop invariant k >= i * c1 ==> k >= n is preserved but not established.\nloop invariant k <= i * c2 ==> k >= n is partially proven to be inductive.\nloop invariant k >= n ==> k >= i * c1 is partially proven to be inductive.\nloop invariant k >= n ==> k <= i * c2 is partially proven to be inductive.\nloop invariant k >= n ==> k >= n is partially proven to be inductive.\nloop invariant k >= n ==> k <= n is partially proven to be inductive.\nAssertion k > n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\nloop invariant i9: k >= n ==> k >= n;\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i <= k;\nloop invariant k <= n * c1 + n * c2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant i <= k is established but not preserved.\nloop invariant k <= n * c1 + n * c2 is established but not preserved.\nAssertion k > n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k;\nloop invariant (k <= (n * c1)) ==> (i == n && c2 > c1);\nloop invariant (k <= (n * c2)) ==> (i == n && c1 > c2);\nloop invariant (k <= (n * c1)) ==> (i < n && c2 >= c1);\nloop invariant (k <= (n * c2)) ==> (i < n && c1 >= c2);\nloop invariant (k >= (n * c1)) ==> (i == n && c2 <= c1);\nloop invariant (k >= (n * c2)) ==> (i == n && c1 <= c2);\nloop invariant (k >= (n * c1)) ==> (i < n && c2 < c1);\nloop invariant (k >= (n * c2)) ==> (i < n && c1 < c2);\nloop invariant (k == (i * c1)) ==> (c2 > c1);\nloop invariant (k == (i * c2)) ==> (c1 > c2);\nloop invariant (k == (i * c1)) ==> (c2 >= c1);\nloop invariant (k == (i * c2)) ==> (c1 >= c2);\nloop invariant (k == (i * c1)) ==> (i == n);\nloop invariant (k == (i * c2)) ==> (i == n);\nloop invariant (k == (i * c1)) ==> (i < n);\nloop invariant (k == (i * c2)) ==> (i < n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= k is partially proven to be inductive.\nloop invariant (k <= (n * c1)) ==> (i == n && c2 > c1) is preserved but not established.\nloop invariant (k <= (n * c2)) ==> (i == n && c1 > c2) is partially proven to be inductive.\nloop invariant (k <= (n * c1)) ==> (i < n && c2 >= c1) is partially proven to be inductive.\nloop invariant (k <= (n * c2)) ==> (i < n && c1 >= c2) is partially proven to be inductive.\nloop invariant (k >= (n * c1)) ==> (i == n && c2 <= c1) is partially proven to be inductive.\nloop invariant (k >= (n * c2)) ==> (i == n && c1 <= c2) is partially proven to be inductive.\nloop invariant (k >= (n * c1)) ==> (i < n && c2 < c1) is partially proven to be inductive.\nloop invariant (k >= (n * c2)) ==> (i < n && c1 < c2) is partially proven to be inductive.\nloop invariant (k == (i * c1)) ==> (c2 > c1) is partially proven to be inductive.\nloop invariant (k == (i * c2)) ==> (c1 > c2) is partially proven to be inductive.\nloop invariant (k == (i * c1)) ==> (c2 >= c1) is partially proven to be inductive.\nloop invariant (k == (i * c2)) ==> (c1 >= c2) is partially proven to be inductive.\nloop invariant (k == (i * c1)) ==> (i == n) is partially proven to be inductive.\nloop invariant (k == (i * c2)) ==> (i == n) is partially proven to be inductive.\nloop invariant (k == (i * c1)) ==> (i < n) is partially proven to be inductive.\nloop invariant (k == (i * c2)) ==> (i < n) is partially proven to be inductive.\nAssertion k > n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= (2 * c1 * n);\nloop invariant (k - c1 * i) % c1 <= 0;\nloop invariant (k - c2 * i) % c2 <= 0;\nloop invariant c1 >= 0;\nloop invariant c2 >= 0;\nloop invariant n > 0;\nloop invariant n < 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= (2 * c1 * n) is established but not preserved.\nloop invariant (k - c1 * i) % c1 <= 0 is established but not preserved.\nloop invariant (k - c2 * i) % c2 <= 0 is established but not preserved.\nloop invariant c1 >= 0 is partially proven to be inductive.\nloop invariant c2 >= 0 is partially proven to be inductive.\nloop invariant n > 0 is partially proven to be inductive.\nloop invariant n < 10 is partially proven to be inductive.\nAssertion k > n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: k >= 0;\n\n\n\nloop invariant i6: c1 >= 0;\nloop invariant i7: c2 >= 0;\nloop invariant i8: n > 0;\nloop invariant i9: n < 10;\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= n * (c1 + c2);\nloop invariant k >= n * c1 || k <= n * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\nloop invariant k <= i * c2;\nloop invariant k >= (n - i) * c1;\nloop invariant k <= (n - i) * c2;\nloop invariant k >= i * c1 + (n - i) * c2;\nloop invariant k <= i * c2 + (n - i) * c1;\nloop invariant k >= i * (c1 + c2);\nloop invariant k <= (i + 1) * (c1 + c2);\nloop invariant k >= c1 || k <= c2;\nloop invariant k >= i * c1;\nloop invariant k <= n * c1;\nloop invariant k >= n * c2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= n * (c1 + c2) is partially proven to be inductive.\nloop invariant k >= n * c1 || k <= n * c2 is partially proven to be inductive.\nloop invariant k >= i * c1 + (n - i) * c2 is preserved but not established.\nloop invariant k <= i * c2 + (n - i) * c1 is partially proven to be inductive.\nloop invariant k >= i * (c1 + c2) is partially proven to be inductive.\nloop invariant k <= (i + 1) * (c1 + c2) is partially proven to be inductive.\nloop invariant k >= c1 || k <= c2 is partially proven to be inductive.\nloop invariant k >= i * c1 is partially proven to be inductive.\nloop invariant k <= n * c1 is partially proven to be inductive.\nloop invariant k >= n * c2 is partially proven to be inductive.\nloop invariant k <= i * c2 is partially proven to be inductive.\nloop invariant k >= (n - i) * c1 is partially proven to be inductive.\nloop invariant k <= (n - i) * c2 is partially proven to be inductive.\nAssertion k > n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * max(c1, c2);\nloop invariant (k + c1) * (n - i) >= 0 ==> i < n;\nloop invariant (k + c2) * (n - i) >= 0 ==> i < n;\nloop invariant k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant k + c2 * (n - i) >= c1 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 24: unbound logic function max. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\nloop invariant i9: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i);\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= k <= 4000 * n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= v <= 1;\nloop invariant v == 0 ==> k <= (i * c1);\nloop invariant v == 1 ==> k <= (i * c2);\nloop invariant (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2);\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= k <= 4000 * n is established but not preserved.\nloop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 0 <= v <= 1 is preserved but not established.\nloop invariant v == 0 ==> k <= (i * c1) is established but not preserved.\nloop invariant v == 1 ==> k <= (i * c2) is established but not preserved.\nloop invariant (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2) is partially proven to be inductive.\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2)) is partially proven to be inductive.\nloop invariant (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2)) is partially proven to be inductive.\nloop invariant (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2)) is partially proven to be inductive.\nAssertion k > n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\nloop invariant i2: 0 <= i <= n;\n\n\n\nloop invariant i6: (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2);\nloop invariant i7: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2));\nloop invariant i8: (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant i9: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 1. k >= 0;\nloop invariant 2. 0 <= i <= n;\nloop invariant 3. n > 0;\nloop invariant 4. n < 10;\nloop invariant 5. (v == 0) ==> (k >= c1);\nloop invariant 6. (v == 1) ==> (k >= c2);\nloop invariant 7. (v == 0) ==> (k >= c1 + c2 * (i - 1));\nloop invariant 8. (v == 1) ==> (k >= c2 + c1 * (i - 1));\nloop invariant 9. (v == 0) ==> (k <= c1 + c2 * i);\nloop invariant 10. (v == 1) ==> (k <= c2 + c1 * i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 23: unexpected token 'k'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= (c1 + c2) * n;\nloop invariant (k == (c1 * i) + (c2 * (n - i)));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 23: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\n\n\nloop invariant i4: 0 <= i <= n;\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant k >= 0;\nloop invariant i >= 0;\nloop invariant i <= n;\nloop invariant k >= i * c2;\nloop invariant k <= (i * c1) + (n - i) * c2;\nloop invariant k <= n * c1;\nloop invariant n <= 9;\nloop invariant 0 < n;\nloop invariant n >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant k >= 0 is established but not preserved.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant k >= i * c2 is established but not preserved.\nloop invariant k <= (i * c1) + (n - i) * c2 is established but not preserved.\nloop invariant k <= n * c1 is established but not preserved.\nloop invariant n <= 9 is partially proven to be inductive.\nloop invariant 0 < n is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nAssertion k > n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: i <= n;\n\n\n\nloop invariant i7: n <= 9;\nloop invariant i8: 0 < n;\nloop invariant i9: n >= 1;\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k == (c1 + c2) * i;\nloop invariant v == (unknown2() % 2 == 0);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant c1 <= c2;\nloop invariant unknown2() % 2 == 0;\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n * (max(c1, c2));\nloop invariant k >= c1 * max(0, i - n) + c2 * max(0, i - n);\nloop invariant k <= c1 * i + c2 * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 24: unbound logic function max. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant (k == k + c1 * (i - 1) + c2 * (n - i));\nloop invariant (k >= 0);\nloop invariant (k <= n * (c1 + c2));\nloop invariant (k >= c1 * i);\nloop invariant (k <= c2 * i);\nloop invariant (k >= c1 * (n - i));\nloop invariant (k <= c2 * (n - i));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant (k == k + c1 * (i - 1) + c2 * (n - i)) is preserved but not established.\nloop invariant (k >= 0) is partially proven to be inductive.\nloop invariant (k <= n * (c1 + c2)) is partially proven to be inductive.\nloop invariant (k >= c1 * i) is partially proven to be inductive.\nloop invariant (k <= c2 * i) is partially proven to be inductive.\nloop invariant (k >= c1 * (n - i)) is preserved but not established.\nloop invariant (k <= c2 * (n - i)) is partially proven to be inductive.\nAssertion k > n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 16,
                    "annotations": "```\n/*@\nloop invariant 0 <= k <= n * c1;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= j <= n;\nloop invariant n > 0;\nloop invariant n < 10;\nloop invariant c1 > 0;\nloop invariant c2 > 0;\nloop invariant k >= (c1 * i);\nloop invariant k >= (c2 * i);\nloop invariant k <= (c1 * i) + (c2 * i);\nloop invariant k <= (c1 * n);\nloop invariant k <= (c2 * n);\nloop invariant i <= n;\nloop invariant j <= n;\nloop invariant v == 0 || v == 1;\nloop invariant v == (unknown2() % 2 == 0 ? 0 : 1);\nloop invariant k == (c1 * i) + (c2 * i);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 : 0) + (unknown2() % 2 == 0 ? c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 38: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\n\nloop invariant i2: 0 <= i <= n;\n\nloop invariant i4: n > 0;\nloop invariant i5: n < 10;\nloop invariant i6: c1 > 0;\nloop invariant i7: c2 > 0;\n\n\nloop invariant i10: k <= (c1 * i) + (c2 * i);\n\n\nloop invariant i13: i <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 24: lexical error, illegal character \\",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= k <= n \\* (c1 + c2);\nloop invariant i3: k >= i * c1;\nloop invariant i4: k <= i * c2;\nloop invariant i5: i * c1 <= k <= i * c2;\nloop invariant i6: k >= i * c1 ==> k >= n;\nloop invariant i7: k <= i * c2 ==> k >= n;\nloop invariant i8: k >= n ==> k >= i * c1;\nloop invariant i9: k >= n ==> k <= i * c2;\nloop invariant i10: k >= n ==> k >= n;\nloop invariant i11: k >= n ==> k <= n;\nloop invariant i12: i <= k;\nloop invariant i13: k <= n * c1 + n * c2;\nloop invariant i14: 0 <= k;\nloop invariant i15: (k <= (n * c1)) ==> (i == n && c2 > c1);\nloop invariant i16: (k <= (n * c2)) ==> (i == n && c1 > c2);\nloop invariant i17: (k <= (n * c1)) ==> (i < n && c2 >= c1);\nloop invariant i18: (k <= (n * c2)) ==> (i < n && c1 >= c2);\nloop invariant i19: (k >= (n * c1)) ==> (i == n && c2 <= c1);\nloop invariant i20: (k >= (n * c2)) ==> (i == n && c1 <= c2);\nloop invariant i21: (k >= (n * c1)) ==> (i < n && c2 < c1);\nloop invariant i22: (k >= (n * c2)) ==> (i < n && c1 < c2);\nloop invariant i23: (k == (i * c1)) ==> (c2 > c1);\nloop invariant i24: (k == (i * c2)) ==> (c1 > c2);\nloop invariant i25: (k == (i * c1)) ==> (c2 >= c1);\nloop invariant i26: (k == (i * c2)) ==> (c1 >= c2);\nloop invariant i27: (k == (i * c1)) ==> (i == n);\nloop invariant i28: (k == (i * c2)) ==> (i == n);\nloop invariant i29: (k == (i * c1)) ==> (i < n);\nloop invariant i30: (k == (i * c2)) ==> (i < n);\nloop invariant i31: k >= 0;\nloop invariant i32: k <= (2 * c1 * n);\nloop invariant i33: (k - c1 * i) % c1 <= 0;\nloop invariant i34: (k - c2 * i) % c2 <= 0;\nloop invariant i35: c1 >= 0;\nloop invariant i36: c2 >= 0;\nloop invariant i37: n > 0;\nloop invariant i38: n < 10;\nloop invariant i39: k <= n * (c1 + c2);\nloop invariant i40: k >= n * c1 || k <= n * c2;\nloop invariant i41: k >= i * c1 + (n - i) * c2;\nloop invariant i42: k <= i * c2 + (n - i) * c1;\nloop invariant i43: k >= i * (c1 + c2);\nloop invariant i44: k <= (i + 1) * (c1 + c2);\nloop invariant i45: k >= c1 || k <= c2;\nloop invariant i46: k <= n * c1;\nloop invariant i47: k >= n * c2;\nloop invariant i48: k >= (n - i) * c1;\nloop invariant i49: k <= (n - i) * c2;\nloop invariant i50: 0 <= k <= n * max(c1, c2);\nloop invariant i51: (k + c1) * (n - i) >= 0 ==> i < n;\nloop invariant i52: (k + c2) * (n - i) >= 0 ==> i < n;\nloop invariant i53: k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant i54: k + c2 * (n - i) >= c1 * (n - i) ==> i < n;\nloop invariant i55: c1 * (n - i) <= k <= c2 * (n - i) ==> i < n;\nloop invariant i56: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant i57: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i);\nloop invariant i58: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c2 * (n - i);\nloop invariant i59: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant i60: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant i61: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant i62: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant i63: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i);\nloop invariant i64: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i) && k >= c2 * (n - i) && k >= c1 * (n - i);\nloop invariant i65: 0 <= k <= 4000 * n;\nloop invariant i66: 0 <= v <= 1;\nloop invariant i67: v == 0 ==> k <= (i * c1);\nloop invariant i68: v == 1 ==> k <= (i * c2);\nloop invariant i69: (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2);\nloop invariant i70: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2));\nloop invariant i71: (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant i72: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant i73: 1. k >= 0;\nloop invariant i74: 2. 0 <= i <= n;\nloop invariant i75: 3. n > 0;\nloop invariant i76: 4. n < 10;\nloop invariant i77: 5. (v == 0) ==> (k >= c1);\nloop invariant i78: 6. (v == 1) ==> (k >= c2);\nloop invariant i79: 7. (v == 0) ==> (k >= c1 + c2 * (i - 1));\nloop invariant i80: 8. (v == 1) ==> (k >= c2 + c1 * (i - 1));\nloop invariant i81: 9. (v == 0) ==> (k <= c1 + c2 * i);\nloop invariant i82: 10. (v == 1) ==> (k <= c2 + c1 * i);\nloop invariant i83: i1;\nloop invariant i84: i2;\nloop invariant i85: i3;\nloop invariant i86: 0 <= k <= (c1 + c2) * n;\nloop invariant i87: (k == (c1 * i) + (c2 * (n - i)));\nloop invariant i88: i >= 0;\nloop invariant i89: i <= n;\nloop invariant i90: k >= i * c2;\nloop invariant i91: k <= (i * c1) + (n - i) * c2;\nloop invariant i92: n <= 9;\nloop invariant i93: 0 < n;\nloop invariant i94: n >= 1;\nloop invariant i95: k == (c1 + c2) * i;\nloop invariant i96: v == (unknown2() % 2 == 0);\nloop invariant i97: k == (c1 * i) + (c2 * i);\nloop invariant i98: c1 <= c2;\nloop invariant i99: unknown2() % 2 == 0;\nloop invariant i100: 0 <= k <= n * (max(c1, c2));\nloop invariant i101: k >= c1 * max(0, i - n) + c2 * max(0, i - n);\nloop invariant i102: k <= c1 * i + c2 * i;\nloop invariant i103: (k == k + c1 * (i - 1) + c2 * (n - i));\nloop invariant i104: (k >= 0);\nloop invariant i105: (k <= n * (c1 + c2));\nloop invariant i106: (k >= c1 * i);\nloop invariant i107: (k <= c2 * i);\nloop invariant i108: (k >= c1 * (n - i));\nloop invariant i109: (k <= c2 * (n - i));\nloop invariant i110: 0 <= k <= n * c1;\nloop invariant i111: 0 <= j <= n;\nloop invariant i112: c1 > 0;\nloop invariant i113: c2 > 0;\nloop invariant i114: k >= (c1 * i);\nloop invariant i115: k >= (c2 * i);\nloop invariant i116: k <= (c1 * i) + (c2 * i);\nloop invariant i117: k <= (c1 * n);\nloop invariant i118: k <= (c2 * n);\nloop invariant i119: j <= n;\nloop invariant i120: v == 0 || v == 1;\nloop invariant i121: v == (unknown2() % 2 == 0 ? 0 : 1);\nloop invariant i122: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2);\nloop invariant i123: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? 0 : c2) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant i124: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 : 0) + (unknown2() % 2 == 0 ? c2 : 0);\nloop invariant i125: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant i126: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant i127: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant i128: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant i129: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant i130: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\nloop invariant i131: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0);\nloop invariant i132: k == (c1 * i) + (c2 * i) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 + c2 : 0) + (unknown2() % 2 == 0 ? c1 : 0);\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
            "combined_annotation_num_solver_calls": 61,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n\n\n\n\n\nloop invariant i10: k >= n ==> k >= n;\n\nloop invariant i12: i <= k;\nloop invariant i13: k <= n * c1 + n * c2;\nloop invariant i14: 0 <= k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i31: k >= 0;\n\n\n\nloop invariant i35: c1 >= 0;\nloop invariant i36: c2 >= 0;\nloop invariant i37: n > 0;\nloop invariant i38: n < 10;\nloop invariant i39: k <= n * (c1 + c2);\n\n\n\n\nloop invariant i44: k <= (i + 1) * (c1 + c2);\n\n\n\n\n\n\n\n\n\n\nloop invariant i55: c1 * (n - i) <= k <= c2 * (n - i) ==> i < n;\nloop invariant i56: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) ==> i < n;\nloop invariant i57: c1 * (n - i) <= k <= c2 * (n - i) && k + c1 * (n - i) >= c2 * (n - i) && i < n ==> k >= c1 * (n - i);\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i69: (v == 0 && v == 1) ==> k == (i * c1 + (i - 1) * c2);\nloop invariant i70: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2));\nloop invariant i71: (v == 0 && v == 1) ==> (k == (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\nloop invariant i72: (v == 0 && v == 1) ==> (k <= (i * c1 + (i - 1) * c2) ==> k <= (i * c1 + (i - 1) * c2));\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i86: 0 <= k <= (c1 + c2) * n;\n\nloop invariant i88: i >= 0;\nloop invariant i89: i <= n;\n\n\nloop invariant i92: n <= 9;\nloop invariant i93: 0 < n;\nloop invariant i94: n >= 1;\n\n\n\n\n\n\n\nloop invariant i102: k <= c1 * i + c2 * i;\n\nloop invariant i104: (k >= 0);\nloop invariant i105: (k <= n * (c1 + c2));\n\n\n\n\n\n\nloop invariant i112: c1 > 0;\nloop invariant i113: c2 > 0;\n\n\nloop invariant i116: k <= (c1 * i) + (c2 * i);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/66.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant x <= 100;\nloop invariant y = 100 - x;\nloop invariant y < 100;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\n*/\n```",
                "```\n/*@\nloop invariant x <= 100;\nloop invariant y = 100 - x;\nloop invariant y >= 0;\nloop invariant y <= 99;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant x % 2 = 0;\nloop invariant y % 2 = 0;\n*/\n```",
                "```\n/*@\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant y = 100 - x;\nloop invariant x = x + 1;\nloop invariant y = 100 - (x - 1);\nloop invariant y = 100 - x + 1;\nloop invariant x = x + 1 ==> y = 100 - x;\nloop invariant y = 100 - (x - 1) ==> y = 100 - x;\nloop invariant y = 100 - x + 1 ==> y = 100 - x;\nloop invariant y = 100 - x ==> x = x + 1;\nloop invariant y = 100 - (x - 1) ==> x = x + 1;\nloop invariant y = 100 - x + 1 ==> x = x + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 1 <= y <= 99;\nloop invariant y == 100 - x;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant x <= 100 - y;\nloop invariant y <= 99 - (x - 1);\nloop invariant y == 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x + y = 100;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\n*/\n```",
                "```\n/*@\nloop invariant x >= 1;\nloop invariant 1 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant x = y + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant y < 100;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100; loop invariant y = 100 - x; loop invariant y < 100; loop invariant x <= 100; loop invariant y >= 0; loop invariant x > 0; loop invariant x <= 100 ==> y < 100; loop invariant y = 100 - x ==> y < 100; loop invariant x <= 100 ==> x <= 100; loop invariant x <= 100 ==> y >= 0; loop invariant x <= 100 ==> x > 0; loop invariant x <= 100 ==> y = 100 - x; loop invariant y < 100 ==> y < 100; loop invariant y >= 0 ==> y >= 0; loop invariant x > 0 ==> x > 0; loop invariant y = 100 - x ==> y = 100 - x; loop invariant x <= 100 ==> (x <= 100 ==> y < 100); loop invariant x <= 100 ==> (x <= 100 ==> x <= 100); loop invariant x <= 100 ==> (x <= 100 ==> y >= 0); loop invariant x <= 100 ==> (x <= 100 ==> x > 0); loop invariant x <= 100 ==> (x <= 100 ==> y = 100 - x); loop invariant y < 100 ==> (x <= 100 ==> y < 100); loop invariant y < 100 ==> (x <= 100 ==> x <= 100); loop invariant y < 100 ==> (x <= 100 ==> y >= 0); loop invariant y < 100 ==> (x <= 100 ==> x > 0); loop invariant y < 100 ==> (x <= 100 ==> y = 100 - x); loop invariant y >= 0 ==> (x <= 100 ==> y < 100); loop invariant y >= 0 ==> (x <= 100 ==> x <= 100); loop invariant y >= 0 ==> (x <= 100 ==> y >= 0); loop invariant y >= 0 ==> (x <= 100 ==> x > 0); loop invariant y >= 0 ==> (x <= 100 ==> y = 100 - x); loop invariant x > 0 ==> (x <= 100 ==> y < 100); loop invariant x > 0 ==> (x <= 100 ==> x <= 100); loop invariant x > 0 ==> (x <= 100 ==> y >= 0); loop invariant x > 0 ==> (x <= 100 ==> x > 0); loop invariant x > 0 ==> (x <= 100 ==> y = 100 - x); loop invariant y = 100 - x ==> (x <= 100 ==> y < 100); loop invariant y = 100 - x ==> (x <= 100 ==> x <= 100); loop invariant y = 100 - x ==> (x <= 100 ==> y >= 0); loop invariant y = 100 - x ==> (x <= 100 ==> x > 0); loop invariant y = 100 - x ==> (x <= 100 ==> y = 100 - x); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> y < 100)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> x <= 100)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> y >= 0)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> x > 0)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> y = 100 - x)); loop invariant y < 100 ==> (x <= 100 ==> (x <= 100 ==> y < 100));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100;\nloop invariant x >= 1;\nloop invariant x <= 100;\nloop invariant y >= 1;\nloop invariant y <= 99;\nloop invariant y < 100;\nloop invariant x <= 100;\nloop invariant x <= y;\nloop invariant x < y;\nloop invariant x <= 100;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x < y;\nloop invariant x <= y;\nloop invariant x < y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x <= 100;\nloop invariant y = 100 - x;\nloop invariant y < 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x <= 100;\nloop invariant y = 100 - x;\nloop invariant y >= 0;\nloop invariant y <= 99;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant x % 2 = 0;\nloop invariant y % 2 = 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant y = 100 - x;\nloop invariant x = x + 1;\nloop invariant y = 100 - (x - 1);\nloop invariant y = 100 - x + 1;\nloop invariant x = x + 1 ==> y = 100 - x;\nloop invariant y = 100 - (x - 1) ==> y = 100 - x;\nloop invariant y = 100 - x + 1 ==> y = 100 - x;\nloop invariant y = 100 - x ==> x = x + 1;\nloop invariant y = 100 - (x - 1) ==> x = x + 1;\nloop invariant y = 100 - x + 1 ==> x = x + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\nloop invariant i2: x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 1 <= y <= 99;\nloop invariant y == 100 - x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 1 <= y <= 99 is preserved but not established.\nloop invariant y == 100 - x is neither established nor preserved.\nAssertion y < 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant x <= 100 - y;\nloop invariant y <= 99 - (x - 1);\nloop invariant y == 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y <= 100 - x;\nloop invariant x <= 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 100 is established but not preserved.\nloop invariant x <= 100 - y is neither established nor preserved.\nloop invariant y <= 99 - (x - 1) is partially proven to be inductive.\nloop invariant y == 100 - x is preserved but not established.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y <= 100 - x is partially proven to be inductive.\nAssertion y < 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x + y = 100;\nloop invariant y <= 100;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\nloop invariant y >= 0;\nloop invariant y <= 100 - 1;\nloop invariant x <= 100;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant x >= 1;\nloop invariant 1 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant x = y + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant y < 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100; loop invariant y = 100 - x; loop invariant y < 100; loop invariant x <= 100; loop invariant y >= 0; loop invariant x > 0; loop invariant x <= 100 ==> y < 100; loop invariant y = 100 - x ==> y < 100; loop invariant x <= 100 ==> x <= 100; loop invariant x <= 100 ==> y >= 0; loop invariant x <= 100 ==> x > 0; loop invariant x <= 100 ==> y = 100 - x; loop invariant y < 100 ==> y < 100; loop invariant y >= 0 ==> y >= 0; loop invariant x > 0 ==> x > 0; loop invariant y = 100 - x ==> y = 100 - x; loop invariant x <= 100 ==> (x <= 100 ==> y < 100); loop invariant x <= 100 ==> (x <= 100 ==> x <= 100); loop invariant x <= 100 ==> (x <= 100 ==> y >= 0); loop invariant x <= 100 ==> (x <= 100 ==> x > 0); loop invariant x <= 100 ==> (x <= 100 ==> y = 100 - x); loop invariant y < 100 ==> (x <= 100 ==> y < 100); loop invariant y < 100 ==> (x <= 100 ==> x <= 100); loop invariant y < 100 ==> (x <= 100 ==> y >= 0); loop invariant y < 100 ==> (x <= 100 ==> x > 0); loop invariant y < 100 ==> (x <= 100 ==> y = 100 - x); loop invariant y >= 0 ==> (x <= 100 ==> y < 100); loop invariant y >= 0 ==> (x <= 100 ==> x <= 100); loop invariant y >= 0 ==> (x <= 100 ==> y >= 0); loop invariant y >= 0 ==> (x <= 100 ==> x > 0); loop invariant y >= 0 ==> (x <= 100 ==> y = 100 - x); loop invariant x > 0 ==> (x <= 100 ==> y < 100); loop invariant x > 0 ==> (x <= 100 ==> x <= 100); loop invariant x > 0 ==> (x <= 100 ==> y >= 0); loop invariant x > 0 ==> (x <= 100 ==> x > 0); loop invariant x > 0 ==> (x <= 100 ==> y = 100 - x); loop invariant y = 100 - x ==> (x <= 100 ==> y < 100); loop invariant y = 100 - x ==> (x <= 100 ==> x <= 100); loop invariant y = 100 - x ==> (x <= 100 ==> y >= 0); loop invariant y = 100 - x ==> (x <= 100 ==> x > 0); loop invariant y = 100 - x ==> (x <= 100 ==> y = 100 - x); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> y < 100)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> x <= 100)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> y >= 0)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> x > 0)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> y = 100 - x)); loop invariant y < 100 ==> (x <= 100 ==> (x <= 100 ==> y < 100));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100;\nloop invariant x >= 1;\nloop invariant x <= 100;\nloop invariant y >= 1;\nloop invariant y <= 99;\nloop invariant y < 100;\nloop invariant x <= 100;\nloop invariant x <= y;\nloop invariant x < y;\nloop invariant x <= 100;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x < y;\nloop invariant x <= y;\nloop invariant x < y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\nloop invariant x <= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant y <= 99 is preserved but not established.\nloop invariant y < 100 is partially proven to be inductive.\nloop invariant x <= y is established but not preserved.\nloop invariant x < y is preserved but not established.\nAssertion y < 100: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\nloop invariant i2: x >= 1;\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x <= 100;\nloop invariant i2: y = 100 - x;\nloop invariant i3: y < 100;\nloop invariant i4: 0 <= x <= 100;\nloop invariant i5: 0 <= y <= 99;\nloop invariant i6: y >= 0;\nloop invariant i7: y <= 99;\nloop invariant i8: 1 <= x <= 100;\nloop invariant i9: x + y = 100;\nloop invariant i10: x % 2 = 0;\nloop invariant i11: y % 2 = 0;\nloop invariant i12: x >= 1;\nloop invariant i13: y <= 100;\nloop invariant i14: x = x + 1;\nloop invariant i15: y = 100 - (x - 1);\nloop invariant i16: y = 100 - x + 1;\nloop invariant i17: x = x + 1 ==> y = 100 - x;\nloop invariant i18: y = 100 - (x - 1) ==> y = 100 - x;\nloop invariant i19: y = 100 - x + 1 ==> y = 100 - x;\nloop invariant i20: y = 100 - x ==> x = x + 1;\nloop invariant i21: y = 100 - (x - 1) ==> x = x + 1;\nloop invariant i22: y = 100 - x + 1 ==> x = x + 1;\nloop invariant i23: 1 <= y <= 99;\nloop invariant i24: y == 100 - x;\nloop invariant i25: x <= 100 - y;\nloop invariant i26: y <= 99 - (x - 1);\nloop invariant i27: y <= 100 - x;\nloop invariant i28: y <= 100 - 1;\nloop invariant i29: 0 <= y <= 100;\nloop invariant i30: 1 <= y <= 100;\nloop invariant i31: x = y + 1;\nloop invariant i32: 1 <= x <= 100; loop invariant y = 100 - x; loop invariant y < 100; loop invariant x <= 100; loop invariant y >= 0; loop invariant x > 0; loop invariant x <= 100 ==> y < 100; loop invariant y = 100 - x ==> y < 100; loop invariant x <= 100 ==> x <= 100; loop invariant x <= 100 ==> y >= 0; loop invariant x <= 100 ==> x > 0; loop invariant x <= 100 ==> y = 100 - x; loop invariant y < 100 ==> y < 100; loop invariant y >= 0 ==> y >= 0; loop invariant x > 0 ==> x > 0; loop invariant y = 100 - x ==> y = 100 - x; loop invariant x <= 100 ==> (x <= 100 ==> y < 100); loop invariant x <= 100 ==> (x <= 100 ==> x <= 100); loop invariant x <= 100 ==> (x <= 100 ==> y >= 0); loop invariant x <= 100 ==> (x <= 100 ==> x > 0); loop invariant x <= 100 ==> (x <= 100 ==> y = 100 - x); loop invariant y < 100 ==> (x <= 100 ==> y < 100); loop invariant y < 100 ==> (x <= 100 ==> x <= 100); loop invariant y < 100 ==> (x <= 100 ==> y >= 0); loop invariant y < 100 ==> (x <= 100 ==> x > 0); loop invariant y < 100 ==> (x <= 100 ==> y = 100 - x); loop invariant y >= 0 ==> (x <= 100 ==> y < 100); loop invariant y >= 0 ==> (x <= 100 ==> x <= 100); loop invariant y >= 0 ==> (x <= 100 ==> y >= 0); loop invariant y >= 0 ==> (x <= 100 ==> x > 0); loop invariant y >= 0 ==> (x <= 100 ==> y = 100 - x); loop invariant x > 0 ==> (x <= 100 ==> y < 100); loop invariant x > 0 ==> (x <= 100 ==> x <= 100); loop invariant x > 0 ==> (x <= 100 ==> y >= 0); loop invariant x > 0 ==> (x <= 100 ==> x > 0); loop invariant x > 0 ==> (x <= 100 ==> y = 100 - x); loop invariant y = 100 - x ==> (x <= 100 ==> y < 100); loop invariant y = 100 - x ==> (x <= 100 ==> x <= 100); loop invariant y = 100 - x ==> (x <= 100 ==> y >= 0); loop invariant y = 100 - x ==> (x <= 100 ==> x > 0); loop invariant y = 100 - x ==> (x <= 100 ==> y = 100 - x); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> y < 100)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> x <= 100)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> y >= 0)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> x > 0)); loop invariant x <= 100 ==> (x <= 100 ==> (x <= 100 ==> y = 100 - x)); loop invariant y < 100 ==> (x <= 100 ==> (x <= 100 ==> y < 100));\nloop invariant i33: y >= 1;\nloop invariant i34: x <= y;\nloop invariant i35: x < y;\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
            "combined_annotation_num_solver_calls": 24,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 2*i + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant bufsize < bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= bufsize_0;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= bufsize - 2*i;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant p >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant i <= bufsize / 2;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p == bufsize_0 - bufsize + leader_len + 2 * i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= bufsize <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant leader_len >= 0;\nloop invariant bufsize_0 >= 0;\nloop invariant ielen >= 0;\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant p + 2*i <= bufsize;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize - 2*i >= 0;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize >= 0;\nloop invariant i >= 0;\nloop invariant ielen >= 0;\nloop invariant leader_len >= 0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= 2*i;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant p <= bufsize_0 - 2*i + leader_len;\nloop invariant bufsize - 2*i <= bufsize_0 - leader_len;\nloop invariant bufsize_0 - 2*i <= bufsize_0 - leader_len;\nloop invariant bufsize_0 - 2*i <= bufsize - leader_len;\nloop invariant bufsize - 2*i <= bufsize - leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant ielen <= i <= ielen;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 0;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len >= 0;\nloop invariant leader_len >= ielen;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= bufsize <= LARGE_INT;\nloop invariant 0 <= bufsize_0 <= LARGE_INT;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= leader_len <= LARGE_INT;\nloop invariant 0 <= ielen <= LARGE_INT;\nloop invariant 0 <= bufsize < bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2 * ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize + leader_len;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant bufsize >= bufsize - leader_len;\nloop invariant p >= p + 2;\nloop invariant bufsize >= bufsize - 2;\nloop invariant p >= p + 1;\nloop invariant bufsize >= bufsize - 1;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant bufsize >= bufsize - leader_len;\nloop invariant bufsize >= bufsize - 2*i;\nloop invariant p >= p + 2*i;\nloop invariant bufsize >= bufsize - 2*ielen;\nloop invariant p >= p + 2*ielen;\nloop invariant bufsize >= bufsize - 2*ielen;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p && p <= bufsize_0;\nloop invariant leader_len <= p && p <= bufsize_0;\nloop invariant 0 <= i && i <= ielen;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i && 2 <= bufsize;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant p + 1 < bufsize_0 ==> p < bufsize_0;\nloop invariant bufsize >= 2*i ==> i <= ielen;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + leader_len;\nloop invariant bufsize >= 2*i ==> bufsize - leader_len >= 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2;\nloop invariant bufsize >= 2*i ==> bufsize - 2 >= 2*i;\nloop invariant bufsize >= 2*i ==> bufsize/2 >= i;\nloop invariant bufsize >= 2*i ==> bufsize >= i + i;\nloop invariant bufsize >= 2*i ==> bufsize >= i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 - leader_len - 2 * i <= bufsize;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= 2*i + leader_len;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant p >= 2*i + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\nloop invariant p >= leader_len + 2 * (ielen - i);\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 2 * i;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant p >= 2*i + 2 * (ielen - i) is preserved but not established.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 * i is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p >= leader_len + 2 * (ielen - i) is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\nloop invariant i3: p <= bufsize_0;\n\nloop invariant i5: bufsize <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p + 1 <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant bufsize < bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= p;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\nloop invariant 0 <= bufsize_0;\nloop invariant 0 <= bufsize;\nloop invariant 0 <= i;\nloop invariant 0 <= ielen;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 1 <= bufsize_0 is established but not preserved.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant 0 <= ielen is partially proven to be inductive.\nloop invariant 0 <= p is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant bufsize < bufsize_0 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\n\nloop invariant i4: p <= bufsize_0;\nloop invariant i5: 0 <= bufsize <= bufsize_0;\nloop invariant i6: 0 <= bufsize_0;\nloop invariant i7: 0 <= i;\nloop invariant i8: 0 <= ielen;\nloop invariant i9: 0 <= p;\nloop invariant i10: 0 <= bufsize;\nloop invariant i11: bufsize < bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= bufsize_0;\nloop invariant ielen <= bufsize_0;\nloop invariant bufsize_0 <= bufsize - 2*i;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant p >= 0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant ielen <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 <= bufsize - 2*i is preserved but not established.\nloop invariant p <= bufsize_0 - 2*i is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0;\nloop invariant i3: leader_len <= bufsize_0;\nloop invariant i4: ielen <= bufsize_0;\n\n\nloop invariant i7: p >= 0;\nloop invariant i8: i >= 0;\nloop invariant i9: i <= ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= bufsize_0;\nloop invariant bufsize_0 <= LARGE_INT;\nloop invariant 0 <= bufsize;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant i <= bufsize / 2;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p == bufsize_0 - bufsize + leader_len + 2 * i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= bufsize is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant i <= bufsize / 2 is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p == bufsize_0 - bufsize + leader_len + 2 * i is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize_0;\nloop invariant i2: bufsize_0 <= LARGE_INT;\nloop invariant i3: 0 <= bufsize;\nloop invariant i4: bufsize <= bufsize_0 - leader_len;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= ielen;\n\nloop invariant i8: p >= 0;\nloop invariant i9: p <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize_0 - leader_len <= bufsize <= bufsize_0;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant leader_len >= 0;\nloop invariant bufsize_0 >= 0;\nloop invariant ielen >= 0;\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\nloop invariant (p >= 0);\nloop invariant (bufsize_0 - leader_len <= bufsize);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (i >= 0);\nloop invariant (i <= ielen);\nloop invariant (bufsize >= 0);\nloop invariant (bufsize <= bufsize_0);\nloop invariant (leader_len >= 0);\nloop invariant (bufsize_0 >= 0);\nloop invariant (ielen >= 0);\nloop invariant (leader_len < LARGE_INT);\nloop invariant (bufsize < LARGE_INT);\nloop invariant (ielen < LARGE_INT);\nloop invariant (ielen >= i);\nloop invariant (p <= leader_len);\nloop invariant (p <= bufsize_0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= 0 is partially proven to be inductive.\nloop invariant ielen >= 0 is partially proven to be inductive.\nloop invariant (leader_len < LARGE_INT) is partially proven to be inductive.\nloop invariant (bufsize < LARGE_INT) is partially proven to be inductive.\nloop invariant (ielen < LARGE_INT) is partially proven to be inductive.\nloop invariant (p <= bufsize_0) is partially proven to be inductive.\nloop invariant (p >= 0) is partially proven to be inductive.\nloop invariant (bufsize_0 - leader_len <= bufsize) is partially proven to be inductive.\nloop invariant (bufsize <= bufsize_0) is partially proven to be inductive.\nloop invariant (i >= 0) is partially proven to be inductive.\nloop invariant (i <= ielen) is partially proven to be inductive.\nloop invariant (bufsize >= 0) is partially proven to be inductive.\nloop invariant (leader_len >= 0) is partially proven to be inductive.\nloop invariant (bufsize_0 >= 0) is partially proven to be inductive.\nloop invariant (ielen >= 0) is partially proven to be inductive.\nloop invariant (ielen >= i) is partially proven to be inductive.\nloop invariant (p <= leader_len) is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: bufsize_0 - leader_len <= bufsize <= bufsize_0;\nloop invariant i3: i >= 0;\nloop invariant i4: i <= ielen;\nloop invariant i5: bufsize >= 0;\nloop invariant i6: bufsize <= bufsize_0;\nloop invariant i7: leader_len >= 0;\nloop invariant i8: bufsize_0 >= 0;\nloop invariant i9: ielen >= 0;\nloop invariant i10: (leader_len < LARGE_INT);\nloop invariant i11: (bufsize < LARGE_INT);\nloop invariant i12: (ielen < LARGE_INT);\nloop invariant i13: (p <= bufsize_0);\nloop invariant i14: (p >= 0);\nloop invariant i15: (bufsize_0 - leader_len <= bufsize);\nloop invariant i16: (bufsize <= bufsize_0);\nloop invariant i17: (i >= 0);\nloop invariant i18: (i <= ielen);\nloop invariant i19: (bufsize >= 0);\nloop invariant i20: (leader_len >= 0);\nloop invariant i21: (bufsize_0 >= 0);\nloop invariant i22: (ielen >= 0);\nloop invariant i23: (ielen >= i);\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= i < ielen;\nloop invariant 0 <= bufsize <= bufsize_0;\nloop invariant p + 2*i <= bufsize_0;\nloop invariant p + 2*i <= bufsize;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize - 2*i >= 0;\nloop invariant bufsize_0 >= 0;\nloop invariant bufsize >= 0;\nloop invariant i >= 0;\nloop invariant ielen >= 0;\nloop invariant leader_len >= 0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize_0 >= leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= 2*i;\nloop invariant p >= leader_len;\nloop invariant p <= bufsize_0 - 2*i;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant p <= bufsize_0 - 2*i + leader_len;\nloop invariant bufsize - 2*i <= bufsize_0 - leader_len;\nloop invariant bufsize_0 - 2*i <= bufsize_0 - leader_len;\nloop invariant bufsize_0 - 2*i <= bufsize - leader_len;\nloop invariant bufsize - 2*i <= bufsize - leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\nloop invariant bufsize_0 >= 2*i + leader_len;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i < ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 2*i <= bufsize_0 is partially proven to be inductive.\nloop invariant p + 2*i <= bufsize is preserved but not established.\nloop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize - 2*i >= 0 is partially proven to be inductive.\nloop invariant bufsize_0 >= 0 is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant ielen >= 0 is partially proven to be inductive.\nloop invariant leader_len >= 0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is partially proven to be inductive.\nloop invariant bufsize_0 >= leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2*i is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*i is partially proven to be inductive.\nloop invariant p >= leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2*i is partially proven to be inductive.\nloop invariant bufsize_0 >= 2*i + leader_len is partially proven to be inductive.\nloop invariant bufsize >= 2*i + leader_len is partially proven to be inductive.\nloop invariant p <= bufsize_0 - 2*i + leader_len is partially proven to be inductive.\nloop invariant bufsize - 2*i <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize_0 - 2*i <= bufsize_0 - leader_len is preserved but not established.\nloop invariant bufsize_0 - 2*i <= bufsize - leader_len is partially proven to be inductive.\nloop invariant bufsize - 2*i <= bufsize - leader_len is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\nloop invariant i2: 0 <= bufsize <= bufsize_0;\n\n\nloop invariant i5: 0 <= p <= bufsize_0;\n\nloop invariant i7: bufsize_0 >= 0;\nloop invariant i8: bufsize >= 0;\nloop invariant i9: i >= 0;\nloop invariant i10: ielen >= 0;\nloop invariant i11: leader_len >= 0;\n\nloop invariant i13: bufsize_0 >= leader_len;\n\n\nloop invariant i16: p >= leader_len;\n\n\n\n\nloop invariant i21: bufsize - 2*i <= bufsize_0 - leader_len;\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant i >= 0;\nloop invariant i <= ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 2*ielen;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize >= 0;\nloop invariant bufsize <= bufsize_0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*ielen is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= ielen;\nloop invariant i4: p >= 0;\nloop invariant i5: p <= bufsize_0;\nloop invariant i6: bufsize >= 0;\nloop invariant i7: bufsize <= bufsize_0;\nloop invariant i8: bufsize >= 2*ielen;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant ielen <= i <= ielen;\nloop invariant bufsize_0 <= bufsize;\nloop invariant bufsize <= bufsize_0;\nloop invariant bufsize <= bufsize_0 - leader_len;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 0;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len >= 0;\nloop invariant leader_len >= ielen;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\nloop invariant leader_len <= bufsize_0 - 2*ielen;\nloop invariant leader_len <= bufsize_0 - 2;\nloop invariant leader_len <= bufsize_0 - 1;\nloop invariant leader_len <= bufsize_0;\nloop invariant leader_len <= bufsize_0 - leader_len;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant ielen <= i <= ielen is preserved but not established.\nloop invariant bufsize_0 <= bufsize is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant bufsize >= leader_len is partially proven to be inductive.\nloop invariant bufsize >= 0 is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len >= 0 is partially proven to be inductive.\nloop invariant leader_len >= ielen is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 - 2*ielen is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 - 2 is partially proven to be inductive.\nloop invariant leader_len <= bufsize_0 - 1 is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: leader_len <= p <= bufsize_0;\n\n\nloop invariant i5: bufsize <= bufsize_0;\nloop invariant i6: bufsize <= bufsize_0 - leader_len;\n\nloop invariant i8: bufsize >= 0;\nloop invariant i9: leader_len <= bufsize_0;\nloop invariant i10: leader_len >= 0;\n\n\nloop invariant i13: leader_len <= bufsize_0 - 2*ielen;\nloop invariant i14: leader_len <= bufsize_0 - 2;\nloop invariant i15: leader_len <= bufsize_0 - 1;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= bufsize <= LARGE_INT;\nloop invariant 0 <= bufsize_0 <= LARGE_INT;\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= leader_len <= LARGE_INT;\nloop invariant 0 <= ielen <= LARGE_INT;\nloop invariant 0 <= bufsize < bufsize_0;\nloop invariant bufsize >= leader_len;\nloop invariant bufsize >= 2 * ielen;\nloop invariant p >= 0;\nloop invariant p <= bufsize_0;\nloop invariant p <= bufsize + leader_len;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= bufsize <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= bufsize_0 <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant 0 <= leader_len <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= ielen <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= bufsize < bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= leader_len is preserved but not established.\nloop invariant bufsize >= 2 * ielen is partially proven to be inductive.\nloop invariant p >= 0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize + leader_len is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= bufsize <= LARGE_INT;\nloop invariant i2: 0 <= bufsize_0 <= LARGE_INT;\nloop invariant i3: 0 <= i <= ielen;\nloop invariant i4: 0 <= leader_len <= LARGE_INT;\nloop invariant i5: 0 <= ielen <= LARGE_INT;\nloop invariant i6: 0 <= bufsize < bufsize_0;\n\nloop invariant i8: bufsize >= 2 * ielen;\nloop invariant i9: p >= 0;\nloop invariant i10: p <= bufsize_0;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant p <= bufsize_0;\nloop invariant bufsize <= bufsize_0;\nloop invariant p <= bufsize;\nloop invariant bufsize >= bufsize - leader_len;\nloop invariant p >= p + 2;\nloop invariant bufsize >= bufsize - 2;\nloop invariant p >= p + 1;\nloop invariant bufsize >= bufsize - 1;\nloop invariant i <= ielen;\nloop invariant i >= 0;\nloop invariant bufsize >= bufsize - leader_len;\nloop invariant bufsize >= bufsize - 2*i;\nloop invariant p >= p + 2*i;\nloop invariant bufsize >= bufsize - 2*ielen;\nloop invariant p >= p + 2*ielen;\nloop invariant bufsize >= bufsize - 2*ielen;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\nloop invariant bufsize >= bufsize - 2;\nloop invariant bufsize >= bufsize - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize <= bufsize_0 is partially proven to be inductive.\nloop invariant p <= bufsize is preserved but not established.\nloop invariant bufsize >= bufsize - leader_len is partially proven to be inductive.\nloop invariant p >= p + 2 is preserved but not established.\nloop invariant bufsize >= bufsize - 2 is partially proven to be inductive.\nloop invariant p >= p + 1 is partially proven to be inductive.\nloop invariant bufsize >= bufsize - 1 is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant bufsize >= bufsize - 2*i is partially proven to be inductive.\nloop invariant p >= p + 2*i is partially proven to be inductive.\nloop invariant bufsize >= bufsize - 2*ielen is partially proven to be inductive.\nloop invariant p >= p + 2*ielen is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\nloop invariant i2: p <= bufsize_0;\nloop invariant i3: bufsize <= bufsize_0;\n\nloop invariant i5: bufsize >= bufsize - leader_len;\n\nloop invariant i7: bufsize >= bufsize - 2;\n\nloop invariant i9: bufsize >= bufsize - 1;\nloop invariant i10: i <= ielen;\nloop invariant i11: i >= 0;\nloop invariant i12: bufsize >= bufsize - 2*i;\n\nloop invariant i14: bufsize >= bufsize - 2*ielen;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= p && p <= bufsize_0;\nloop invariant leader_len <= p && p <= bufsize_0;\nloop invariant 0 <= i && i <= ielen;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i;\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i && 2 <= bufsize;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p && p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= p && p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i && i <= ielen is partially proven to be inductive.\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len is partially proven to be inductive.\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i is established but not preserved.\nloop invariant 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i && 2 <= bufsize is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p && p <= bufsize_0;\nloop invariant i2: leader_len <= p && p <= bufsize_0;\nloop invariant i3: 0 <= i && i <= ielen;\nloop invariant i4: 0 <= bufsize && bufsize <= bufsize_0 - leader_len;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= ielen;\nloop invariant leader_len <= p <= bufsize_0;\nloop invariant bufsize >= 2;\nloop invariant p + 1 < bufsize_0 ==> p < bufsize_0;\nloop invariant bufsize >= 2*i ==> i <= ielen;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + leader_len;\nloop invariant bufsize >= 2*i ==> bufsize - leader_len >= 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2;\nloop invariant bufsize >= 2*i ==> bufsize - 2 >= 2*i;\nloop invariant bufsize >= 2*i ==> bufsize/2 >= i;\nloop invariant bufsize >= 2*i ==> bufsize >= i + i;\nloop invariant bufsize >= 2*i ==> bufsize >= i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant leader_len <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2 is partially proven to be inductive.\nloop invariant p + 1 < bufsize_0 ==> p < bufsize_0 is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + leader_len is neither established nor preserved.\nloop invariant bufsize >= 2*i ==> bufsize - leader_len >= 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2 is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize - 2 >= 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize/2 >= i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= i + i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i is partially proven to be inductive.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nloop invariant bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i is established but not preserved.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: leader_len <= p <= bufsize_0;\nloop invariant i3: bufsize >= 2;\nloop invariant i4: p + 1 < bufsize_0 ==> p < bufsize_0;\nloop invariant i5: bufsize >= 2*i ==> i <= ielen;\n\n\n\n\nloop invariant i10: bufsize >= 2*i ==> bufsize/2 >= i;\nloop invariant i11: bufsize >= 2*i ==> bufsize >= i + i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p <= bufsize_0;\nloop invariant leader_len <= p <= bufsize;\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize_0 - leader_len - 2 * i <= bufsize;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p <= bufsize_0 is partially proven to be inductive.\nloop invariant leader_len <= p <= bufsize is neither established nor preserved.\nloop invariant 0 <= i <= ielen is partially proven to be inductive.\nloop invariant bufsize_0 - leader_len - 2 * i <= bufsize is partially proven to be inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p <= bufsize_0;\n\nloop invariant i3: 0 <= i <= ielen;\nloop invariant i4: bufsize_0 - leader_len - 2 * i <= bufsize;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 45: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= p;\nloop invariant p <= bufsize_0;\nloop invariant 0 <= i;\nloop invariant i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant bufsize_0 >= 2*i + leader_len;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= p is partially proven to be inductive.\nloop invariant p <= bufsize_0 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= ielen is partially proven to be inductive.\nloop invariant bufsize >= 2*i is established but not preserved.\nloop invariant bufsize_0 >= 2*i + leader_len is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= p;\nloop invariant i2: p <= bufsize_0;\nloop invariant i3: 0 <= i;\nloop invariant i4: i <= ielen;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 167: unbound logic variable i1. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p >= 2*i + 2 * (ielen - i);\nloop invariant i3: p <= bufsize_0;\nloop invariant i4: bufsize >= 2 * i;\nloop invariant i5: bufsize <= bufsize_0;\nloop invariant i6: p >= leader_len + 2 * (ielen - i);\nloop invariant i7: 0 <= p <= bufsize_0;\nloop invariant i8: p + 1 <= bufsize_0;\nloop invariant i9: 0 <= bufsize <= bufsize_0;\nloop invariant i10: 0 <= bufsize_0;\nloop invariant i11: 0 <= i;\nloop invariant i12: 0 <= ielen;\nloop invariant i13: 0 <= p;\nloop invariant i14: 0 <= bufsize;\nloop invariant i15: bufsize < bufsize_0;\nloop invariant i16: leader_len <= bufsize_0;\nloop invariant i17: ielen <= bufsize_0;\nloop invariant i18: bufsize_0 <= bufsize - 2*i;\nloop invariant i19: p <= bufsize_0 - 2*i;\nloop invariant i20: p >= 0;\nloop invariant i21: i >= 0;\nloop invariant i22: i <= ielen;\nloop invariant i23: bufsize_0 <= LARGE_INT;\nloop invariant i24: bufsize <= bufsize_0 - leader_len;\nloop invariant i25: i <= bufsize / 2;\nloop invariant i26: p == bufsize_0 - bufsize + leader_len + 2 * i;\nloop invariant i27: bufsize_0 - leader_len <= bufsize <= bufsize_0;\nloop invariant i28: bufsize >= 0;\nloop invariant i29: leader_len >= 0;\nloop invariant i30: bufsize_0 >= 0;\nloop invariant i31: ielen >= 0;\nloop invariant i32: (leader_len < LARGE_INT);\nloop invariant i33: (bufsize < LARGE_INT);\nloop invariant i34: (ielen < LARGE_INT);\nloop invariant i35: (p <= bufsize_0);\nloop invariant i36: (p >= 0);\nloop invariant i37: (bufsize_0 - leader_len <= bufsize);\nloop invariant i38: (bufsize <= bufsize_0);\nloop invariant i39: (i >= 0);\nloop invariant i40: (i <= ielen);\nloop invariant i41: (bufsize >= 0);\nloop invariant i42: (leader_len >= 0);\nloop invariant i43: (bufsize_0 >= 0);\nloop invariant i44: (ielen >= 0);\nloop invariant i45: (ielen >= i);\nloop invariant i46: (p <= leader_len);\nloop invariant i47: 0 <= i < ielen;\nloop invariant i48: p + 2*i <= bufsize_0;\nloop invariant i49: p + 2*i <= bufsize;\nloop invariant i50: bufsize - 2*i >= 0;\nloop invariant i51: bufsize >= leader_len;\nloop invariant i52: bufsize_0 >= leader_len;\nloop invariant i53: bufsize >= 2*i;\nloop invariant i54: bufsize_0 >= 2*i;\nloop invariant i55: p >= leader_len;\nloop invariant i56: bufsize_0 >= 2*i + leader_len;\nloop invariant i57: bufsize >= 2*i + leader_len;\nloop invariant i58: p <= bufsize_0 - 2*i + leader_len;\nloop invariant i59: bufsize - 2*i <= bufsize_0 - leader_len;\nloop invariant i60: bufsize_0 - 2*i <= bufsize_0 - leader_len;\nloop invariant i61: bufsize_0 - 2*i <= bufsize - leader_len;\nloop invariant i62: bufsize - 2*i <= bufsize - leader_len;\nloop invariant i63: bufsize >= 2*ielen;\nloop invariant i64: leader_len <= p <= bufsize_0;\nloop invariant i65: ielen <= i <= ielen;\nloop invariant i66: bufsize_0 <= bufsize;\nloop invariant i67: leader_len >= ielen;\nloop invariant i68: leader_len <= bufsize_0 - leader_len;\nloop invariant i69: leader_len <= bufsize_0 - 2*ielen;\nloop invariant i70: leader_len <= bufsize_0 - 2;\nloop invariant i71: leader_len <= bufsize_0 - 1;\nloop invariant i72: 0 <= bufsize <= LARGE_INT;\nloop invariant i73: 0 <= bufsize_0 <= LARGE_INT;\nloop invariant i74: 0 <= leader_len <= LARGE_INT;\nloop invariant i75: 0 <= ielen <= LARGE_INT;\nloop invariant i76: 0 <= bufsize < bufsize_0;\nloop invariant i77: bufsize >= 2 * ielen;\nloop invariant i78: p <= bufsize + leader_len;\nloop invariant i79: p <= bufsize;\nloop invariant i80: bufsize >= bufsize - leader_len;\nloop invariant i81: p >= p + 2;\nloop invariant i82: bufsize >= bufsize - 2;\nloop invariant i83: p >= p + 1;\nloop invariant i84: bufsize >= bufsize - 1;\nloop invariant i85: bufsize >= bufsize - 2*i;\nloop invariant i86: p >= p + 2*i;\nloop invariant i87: bufsize >= bufsize - 2*ielen;\nloop invariant i88: p >= p + 2*ielen;\nloop invariant i89: 0 <= p && p <= bufsize_0;\nloop invariant i90: leader_len <= p && p <= bufsize_0;\nloop invariant i91: 0 <= i && i <= ielen;\nloop invariant i92: 0 <= bufsize && bufsize <= bufsize_0 - leader_len;\nloop invariant i93: 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i;\nloop invariant i94: 0 <= bufsize && bufsize <= bufsize_0 - leader_len - 2*i && 2 <= bufsize;\nloop invariant i95: bufsize >= 2;\nloop invariant i96: p + 1 < bufsize_0 ==> p < bufsize_0;\nloop invariant i97: bufsize >= 2*i ==> i <= ielen;\nloop invariant i98: bufsize >= 2*i ==> bufsize >= 2*i + leader_len;\nloop invariant i99: bufsize >= 2*i ==> bufsize - leader_len >= 2*i;\nloop invariant i100: bufsize >= 2*i ==> bufsize >= 2*i + 2;\nloop invariant i101: bufsize >= 2*i ==> bufsize - 2 >= 2*i;\nloop invariant i102: bufsize >= 2*i ==> bufsize/2 >= i;\nloop invariant i103: bufsize >= 2*i ==> bufsize >= i + i;\nloop invariant i104: bufsize >= 2*i ==> bufsize >= i + 2*i;\nloop invariant i105: bufsize >= 2*i ==> bufsize >= 2*i + 2*i;\nloop invariant i106: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i;\nloop invariant i107: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i;\nloop invariant i108: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i109: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i110: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i111: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i112: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i113: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i114: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i115: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i116: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i117: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i118: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i119: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i120: bufsize >= 2*i ==> bufsize >= 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i + 2*i;\nloop invariant i121: leader_len <= p <= bufsize;\nloop invariant i122: bufsize_0 - leader_len - 2 * i <= bufsize;\nloop invariant i123: i1;\nloop invariant i124: i2;\nloop invariant i125: i3;\nloop invariant i126: i4;\nloop invariant i127: i5;\nloop invariant i128: i6;\nloop invariant i129: i7;\nloop invariant i130: i8;\nloop invariant i131: i9;\nloop invariant i132: i10;\nloop invariant i133: i11;\nloop invariant i134: i12;\nloop invariant i135: i13;\nloop invariant i136: i14;\nloop invariant i137: i15;\nloop invariant i138: i16;\nloop invariant i139: i17;\nloop invariant i140: i18;\nloop invariant i141: i19;\nloop invariant i142: i20;\nloop invariant i143: i21;\nloop invariant i144: i22;\nloop invariant i145: i23;\nloop invariant i146: i24;\nloop invariant i147: i25;\nloop invariant i148: i26;\nloop invariant i149: i27;\nloop invariant i150: i28;\nloop invariant i151: i29;\nloop invariant i152: i30;\nloop invariant i153: i31;\nloop invariant i154: i32;\nloop invariant i155: i33;\nloop invariant i156: i34;\nloop invariant i157: i35;\nloop invariant i158: i36;\nloop invariant i159: i37;\nloop invariant i160: i38;\nloop invariant i161: i39;\nloop invariant i162: i40;\nloop invariant i163: i41;\nloop invariant i164: i42;\nloop invariant i165: i43;\nloop invariant i166: i44;\nloop invariant i167: i45;\nloop invariant i168: i46;\nloop invariant i169: i47;\nloop invariant i170: i48;\nloop invariant i171: i49;\nloop invariant i172: i50;\nloop invariant i173: i51;\nloop invariant i174: i52;\nloop invariant i175: i53;\nloop invariant i176: i54;\nloop invariant i177: i55;\nloop invariant i178: i56;\nloop invariant i179: i57;\nloop invariant i180: i58;\nloop invariant i181: i59;\nloop invariant i182: i60;\nloop invariant i183: i61;\nloop invariant i184: i62;\nloop invariant i185: i63;\nloop invariant i186: i64;\nloop invariant i187: i65;\nloop invariant i188: i66;\nloop invariant i189: i67;\nloop invariant i190: i68;\nloop invariant i191: i69;\nloop invariant i192: i70;\nloop invariant i193: i71;\nloop invariant i194: i72;\nloop invariant i195: i73;\nloop invariant i196: i74;\nloop invariant i197: i75;\nloop invariant i198: i76;\nloop invariant i199: i77;\nloop invariant i200: i78;\nloop invariant i201: i79;\nloop invariant i202: i80;\nloop invariant i203: i81;\nloop invariant i204: i82;\nloop invariant i205: i83;\nloop invariant i206: i84;\nloop invariant i207: i85;\nloop invariant i208: i86;\nloop invariant i209: i87;\nloop invariant i210: i88;\nloop invariant i211: i89;\nloop invariant i212: i90;\nloop invariant i213: i91;\nloop invariant i214: i92;\nloop invariant i215: i93;\nloop invariant i216: i94;\nloop invariant i217: i95;\nloop invariant i218: i96;\nloop invariant i219: i97;\nloop invariant i220: i98;\nloop invariant i221: i99;\nloop invariant i222: i100;\nloop invariant i223: i101;\nloop invariant i224: i102;\nloop invariant i225: i103;\nloop invariant i226: i104;\nloop invariant i227: i105;\nloop invariant i228: i106;\nloop invariant i229: i107;\nloop invariant i230: i108;\nloop invariant i231: i109;\nloop invariant i232: i110;\nloop invariant i233: i111;\nloop invariant i234: i112;\nloop invariant i235: i113;\nloop invariant i236: i114;\nloop invariant i237: i115;\nloop invariant i238: i116;\nloop invariant i239: i117;\nloop invariant i240: i118;\nloop invariant i241: i119;\nloop invariant i242: i120;\nloop invariant i243: i121;\nloop invariant i244: i122;\nloop invariant i245: i123;\nloop invariant i246: i124;\nloop invariant i247: i125;\nloop invariant i248: i126;\nloop invariant i249: i127;\nloop invariant i250: i128;\nloop invariant i251: i129;\nloop invariant i252: i130;\nloop invariant i253: i131;\nloop invariant i254: i132;\nloop invariant i255: i133;\nloop invariant i256: i134;\nloop invariant i257: i135;\nloop invariant i258: i136;\nloop invariant i259: i137;\nloop invariant i260: i138;\nloop invariant i261: i139;\nloop invariant i262: i140;\nloop invariant i263: i141;\nloop invariant i264: i142;\nloop invariant i265: i143;\nloop invariant i266: i144;\nloop invariant i267: i145;\nloop invariant i268: i146;\nloop invariant i269: i147;\nloop invariant i270: i148;\nloop invariant i271: i149;\nloop invariant i272: i150;\nloop invariant i273: i151;\nloop invariant i274: i152;\nloop invariant i275: i153;\nloop invariant i276: i154;\nloop invariant i277: i155;\nloop invariant i278: i156;\nloop invariant i279: i157;\nloop invariant i280: i158;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
            "combined_annotation_num_solver_calls": 177,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\nloop invariant i3: p <= bufsize_0;\nloop invariant i4: bufsize >= 2 * i;\nloop invariant i5: bufsize <= bufsize_0;\n\nloop invariant i7: 0 <= p <= bufsize_0;\n\nloop invariant i9: 0 <= bufsize <= bufsize_0;\nloop invariant i10: 0 <= bufsize_0;\nloop invariant i11: 0 <= i;\nloop invariant i12: 0 <= ielen;\nloop invariant i13: 0 <= p;\nloop invariant i14: 0 <= bufsize;\nloop invariant i15: bufsize < bufsize_0;\nloop invariant i16: leader_len <= bufsize_0;\nloop invariant i17: ielen <= bufsize_0;\n\n\nloop invariant i20: p >= 0;\nloop invariant i21: i >= 0;\nloop invariant i22: i <= ielen;\nloop invariant i23: bufsize_0 <= LARGE_INT;\nloop invariant i24: bufsize <= bufsize_0 - leader_len;\nloop invariant i25: i <= bufsize / 2;\n\nloop invariant i27: bufsize_0 - leader_len <= bufsize <= bufsize_0;\nloop invariant i28: bufsize >= 0;\nloop invariant i29: leader_len >= 0;\nloop invariant i30: bufsize_0 >= 0;\nloop invariant i31: ielen >= 0;\nloop invariant i32: (leader_len < LARGE_INT);\nloop invariant i33: (bufsize < LARGE_INT);\nloop invariant i34: (ielen < LARGE_INT);\nloop invariant i35: (p <= bufsize_0);\nloop invariant i36: (p >= 0);\nloop invariant i37: (bufsize_0 - leader_len <= bufsize);\nloop invariant i38: (bufsize <= bufsize_0);\nloop invariant i39: (i >= 0);\nloop invariant i40: (i <= ielen);\nloop invariant i41: (bufsize >= 0);\nloop invariant i42: (leader_len >= 0);\nloop invariant i43: (bufsize_0 >= 0);\nloop invariant i44: (ielen >= 0);\nloop invariant i45: (ielen >= i);\n\n\n\n\nloop invariant i50: bufsize - 2*i >= 0;\n\nloop invariant i52: bufsize_0 >= leader_len;\nloop invariant i53: bufsize >= 2*i;\nloop invariant i54: bufsize_0 >= 2*i;\nloop invariant i55: p >= leader_len;\nloop invariant i56: bufsize_0 >= 2*i + leader_len;\n\n\nloop invariant i59: bufsize - 2*i <= bufsize_0 - leader_len;\n\n\n\nloop invariant i63: bufsize >= 2*ielen;\nloop invariant i64: leader_len <= p <= bufsize_0;\n\n\n\n\nloop invariant i69: leader_len <= bufsize_0 - 2*ielen;\nloop invariant i70: leader_len <= bufsize_0 - 2;\nloop invariant i71: leader_len <= bufsize_0 - 1;\nloop invariant i72: 0 <= bufsize <= LARGE_INT;\nloop invariant i73: 0 <= bufsize_0 <= LARGE_INT;\nloop invariant i74: 0 <= leader_len <= LARGE_INT;\nloop invariant i75: 0 <= ielen <= LARGE_INT;\nloop invariant i76: 0 <= bufsize < bufsize_0;\nloop invariant i77: bufsize >= 2 * ielen;\nloop invariant i78: p <= bufsize + leader_len;\n\nloop invariant i80: bufsize >= bufsize - leader_len;\n\nloop invariant i82: bufsize >= bufsize - 2;\n\nloop invariant i84: bufsize >= bufsize - 1;\nloop invariant i85: bufsize >= bufsize - 2*i;\n\nloop invariant i87: bufsize >= bufsize - 2*ielen;\n\nloop invariant i89: 0 <= p && p <= bufsize_0;\nloop invariant i90: leader_len <= p && p <= bufsize_0;\nloop invariant i91: 0 <= i && i <= ielen;\nloop invariant i92: 0 <= bufsize && bufsize <= bufsize_0 - leader_len;\n\n\nloop invariant i95: bufsize >= 2;\nloop invariant i96: p + 1 < bufsize_0 ==> p < bufsize_0;\nloop invariant i97: bufsize >= 2*i ==> i <= ielen;\n\n\n\n\nloop invariant i102: bufsize >= 2*i ==> bufsize/2 >= i;\nloop invariant i103: bufsize >= 2*i ==> bufsize >= i + i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i122: bufsize_0 - leader_len - 2 * i <= bufsize;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n\n    {;\n//@ assert(p+1<bufsize_0);\n}\n\n    p += 2;\n  }\n\n END:\n  ;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/33.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant n <= 0;\nloop invariant n >= x;\nloop invariant n >= -1;\nloop invariant n <= 1;\nloop invariant n >= -2;\nloop invariant n <= 2;\nloop invariant n >= -3;\nloop invariant n <= 3;\nloop invariant n >= -4;\nloop invariant n <= 4;\nloop invariant n >= -5;\nloop invariant n <= 5;\nloop invariant n >= -6;\nloop invariant n <= 6;\nloop invariant n >= -7;\nloop invariant n <= 7;\nloop invariant n >= -8;\nloop invariant n <= 8;\nloop invariant n >= -9;\nloop invariant n <= 9;\nloop invariant n >= -10;\nloop invariant n <= 10;\nloop invariant n >= -11;\nloop invariant n <= 11;\nloop invariant n >= -12;\nloop invariant n <= 12;\nloop invariant n >= -13;\nloop invariant n <= 13;\nloop invariant n >= -14;\nloop invariant n <= 14;\nloop invariant n >= -15;\nloop invariant n <= 15;\nloop invariant n >= -16;\nloop invariant n <= 16;\nloop invariant n >= -17;\nloop invariant n <= 17;\nloop invariant n >= -18;\nloop invariant n <= 18;\nloop invariant n >= -19;\nloop invariant n <= 19;\nloop invariant n >= -20;\nloop invariant n <= 20;\nloop invariant n >= -21;\nloop invariant n <= 21;\nloop invariant n >= -22;\nloop invariant n <= 22;\nloop invariant n >= -23;\nloop invariant n <= 23;\nloop invariant n >= -24;\nloop invariant n <= 24;\nloop invariant n >= -25;\nloop invariant n <= 25;\nloop invariant n >= -26;\nloop invariant n <= 26;\nloop invariant n >= -27;\nloop invariant n <= 27;\nloop invariant n >= -28;\nloop invariant n <= 28;\nloop invariant n >= -29;\nloop invariant n <= 29;\nloop invariant n >= -30;\nloop invariant n <= 30;\nloop invariant n >= -31;\nloop invariant n <= 31;\nloop invariant n >= -32;\nloop invariant n <= 32;\nloop invariant n >= -33;\nloop invariant n <= 33;\nloop invariant n >= -34;\nloop invariant n <= 34;\nloop invariant n >= -35;\nloop invariant n <= 35;\nloop invariant n >= -36;\nloop invariant n <= 36;\nloop invariant n >= -37;\nloop invariant n <= 37;\nloop invariant n >= -38;\nloop invariant n <= 38;\nloop invariant n >= -39;\nloop invariant n <= 39;\nloop invariant n >= -40;\nloop invariant n <= 40;\nloop invariant n >= -41;\nloop invariant n <= 41;\nloop invariant n >= -42;\nloop invariant n <= 42;\nloop invariant n >= -43;\nloop invariant n <= 43;\nloop invariant n >= -44;\nloop invariant n <= 44;\nloop invariant n >= -45;\nloop invariant n <= 45;\nloop invariant n >= -46;\nloop invariant n <= 46;\nloop invariant n >= -47;\nloop invariant n <= 47;\nloop invariant n >= -48;\nloop invariant n <= 48;\nloop invariant n >= -49;\nloop invariant n <= 49;\nloop invariant n >= -50;\nloop invariant n <= 50;\nloop invariant n >= -51;\nloop invariant n <= 51;\nloop invariant n >= -52;\nloop invariant n <= 52;\nloop invariant n >= -53;\nloop invariant n <= 53;\nloop invariant n >= -54;\nloop invariant n <= 54;\nloop invariant n >= -55;\nloop invariant n <= 55;\nloop invariant n >= -56;\nloop invariant n <= 56;\nloop invariant n >= -57;\nloop invariant n <= 57;\nloop invariant n >= -58;\nloop invariant n <= 58;\nloop invariant n >= -59;\nloop invariant n <= 59;\nloop invariant n >= -60;\nloop invariant n <= 60;\nloop invariant n >= -61;\nloop invariant n <= 61;\nloop invariant n >= -62;\nloop invariant n <= 62;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - i, where i is the number of iterations;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n <= x <= 2147483647;\nloop invariant x - n >= 0;\nloop invariant n <= 0 ==> x == 0;\nloop invariant x == 0 ==> n <= 0;\nloop invariant n < 0 ==> x == 0;\nloop invariant x == 0 ==> n < 0;\nloop invariant n > 0 ==> x > 0;\nloop invariant x > 0 ==> n > 0;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= n <= x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant ( n > 0 ) ==> ( x >= 0 );\nloop invariant ( n > 0 ) ==> ( x <= n );\nloop invariant ( n > 0 ) ==> ( n >= 0 );\nloop invariant ( n > 0 ) ==> ( n <= 0 );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v1 <= n;\nloop invariant 0 <= v2 <= n;\nloop invariant 0 <= v3 <= n;\nloop invariant 0 <= x <= n;\nloop invariant x = n - v1 - v2 - v3;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "```\n/*@\nloop invariant n >= x >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x == n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 65,
                    "annotations": "```\n/*@\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant n <= 0;\nloop invariant n >= x;\nloop invariant n >= -1;\nloop invariant n <= 1;\nloop invariant n >= -2;\nloop invariant n <= 2;\nloop invariant n >= -3;\nloop invariant n <= 3;\nloop invariant n >= -4;\nloop invariant n <= 4;\nloop invariant n >= -5;\nloop invariant n <= 5;\nloop invariant n >= -6;\nloop invariant n <= 6;\nloop invariant n >= -7;\nloop invariant n <= 7;\nloop invariant n >= -8;\nloop invariant n <= 8;\nloop invariant n >= -9;\nloop invariant n <= 9;\nloop invariant n >= -10;\nloop invariant n <= 10;\nloop invariant n >= -11;\nloop invariant n <= 11;\nloop invariant n >= -12;\nloop invariant n <= 12;\nloop invariant n >= -13;\nloop invariant n <= 13;\nloop invariant n >= -14;\nloop invariant n <= 14;\nloop invariant n >= -15;\nloop invariant n <= 15;\nloop invariant n >= -16;\nloop invariant n <= 16;\nloop invariant n >= -17;\nloop invariant n <= 17;\nloop invariant n >= -18;\nloop invariant n <= 18;\nloop invariant n >= -19;\nloop invariant n <= 19;\nloop invariant n >= -20;\nloop invariant n <= 20;\nloop invariant n >= -21;\nloop invariant n <= 21;\nloop invariant n >= -22;\nloop invariant n <= 22;\nloop invariant n >= -23;\nloop invariant n <= 23;\nloop invariant n >= -24;\nloop invariant n <= 24;\nloop invariant n >= -25;\nloop invariant n <= 25;\nloop invariant n >= -26;\nloop invariant n <= 26;\nloop invariant n >= -27;\nloop invariant n <= 27;\nloop invariant n >= -28;\nloop invariant n <= 28;\nloop invariant n >= -29;\nloop invariant n <= 29;\nloop invariant n >= -30;\nloop invariant n <= 30;\nloop invariant n >= -31;\nloop invariant n <= 31;\nloop invariant n >= -32;\nloop invariant n <= 32;\nloop invariant n >= -33;\nloop invariant n <= 33;\nloop invariant n >= -34;\nloop invariant n <= 34;\nloop invariant n >= -35;\nloop invariant n <= 35;\nloop invariant n >= -36;\nloop invariant n <= 36;\nloop invariant n >= -37;\nloop invariant n <= 37;\nloop invariant n >= -38;\nloop invariant n <= 38;\nloop invariant n >= -39;\nloop invariant n <= 39;\nloop invariant n >= -40;\nloop invariant n <= 40;\nloop invariant n >= -41;\nloop invariant n <= 41;\nloop invariant n >= -42;\nloop invariant n <= 42;\nloop invariant n >= -43;\nloop invariant n <= 43;\nloop invariant n >= -44;\nloop invariant n <= 44;\nloop invariant n >= -45;\nloop invariant n <= 45;\nloop invariant n >= -46;\nloop invariant n <= 46;\nloop invariant n >= -47;\nloop invariant n <= 47;\nloop invariant n >= -48;\nloop invariant n <= 48;\nloop invariant n >= -49;\nloop invariant n <= 49;\nloop invariant n >= -50;\nloop invariant n <= 50;\nloop invariant n >= -51;\nloop invariant n <= 51;\nloop invariant n >= -52;\nloop invariant n <= 52;\nloop invariant n >= -53;\nloop invariant n <= 53;\nloop invariant n >= -54;\nloop invariant n <= 54;\nloop invariant n >= -55;\nloop invariant n <= 55;\nloop invariant n >= -56;\nloop invariant n <= 56;\nloop invariant n >= -57;\nloop invariant n <= 57;\nloop invariant n >= -58;\nloop invariant n <= 58;\nloop invariant n >= -59;\nloop invariant n <= 59;\nloop invariant n >= -60;\nloop invariant n <= 60;\nloop invariant n >= -61;\nloop invariant n <= 61;\nloop invariant n >= -62;\nloop invariant n <= 62;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant n >= 0 is preserved but not established.\nloop invariant n <= x is partially proven to be inductive.\nloop invariant n <= 0 is preserved but not established.\nloop invariant n >= x is partially proven to be inductive.\nloop invariant n >= -1 is partially proven to be inductive.\nloop invariant n <= 1 is partially proven to be inductive.\nloop invariant n >= -2 is partially proven to be inductive.\nloop invariant n <= 2 is partially proven to be inductive.\nloop invariant n >= -3 is partially proven to be inductive.\nloop invariant n <= 3 is partially proven to be inductive.\nloop invariant n >= -4 is partially proven to be inductive.\nloop invariant n <= 4 is partially proven to be inductive.\nloop invariant n >= -5 is partially proven to be inductive.\nloop invariant n <= 5 is partially proven to be inductive.\nloop invariant n >= -6 is partially proven to be inductive.\nloop invariant n <= 6 is partially proven to be inductive.\nloop invariant n >= -7 is partially proven to be inductive.\nloop invariant n <= 7 is partially proven to be inductive.\nloop invariant n >= -8 is partially proven to be inductive.\nloop invariant n <= 8 is partially proven to be inductive.\nloop invariant n >= -9 is partially proven to be inductive.\nloop invariant n <= 9 is partially proven to be inductive.\nloop invariant n >= -10 is partially proven to be inductive.\nloop invariant n <= 10 is partially proven to be inductive.\nloop invariant n >= -11 is partially proven to be inductive.\nloop invariant n <= 11 is partially proven to be inductive.\nloop invariant n >= -12 is partially proven to be inductive.\nloop invariant n <= 12 is partially proven to be inductive.\nloop invariant n >= -13 is partially proven to be inductive.\nloop invariant n <= 13 is partially proven to be inductive.\nloop invariant n >= -14 is partially proven to be inductive.\nloop invariant n <= 14 is partially proven to be inductive.\nloop invariant n >= -15 is partially proven to be inductive.\nloop invariant n <= 15 is partially proven to be inductive.\nloop invariant n >= -16 is partially proven to be inductive.\nloop invariant n <= 16 is partially proven to be inductive.\nloop invariant n >= -17 is partially proven to be inductive.\nloop invariant n <= 17 is partially proven to be inductive.\nloop invariant n >= -18 is partially proven to be inductive.\nloop invariant n <= 18 is partially proven to be inductive.\nloop invariant n >= -19 is partially proven to be inductive.\nloop invariant n <= 19 is partially proven to be inductive.\nloop invariant n >= -20 is partially proven to be inductive.\nloop invariant n <= 20 is partially proven to be inductive.\nloop invariant n >= -21 is partially proven to be inductive.\nloop invariant n <= 21 is partially proven to be inductive.\nloop invariant n >= -22 is partially proven to be inductive.\nloop invariant n <= 22 is partially proven to be inductive.\nloop invariant n >= -23 is partially proven to be inductive.\nloop invariant n <= 23 is partially proven to be inductive.\nloop invariant n >= -24 is partially proven to be inductive.\nloop invariant n <= 24 is partially proven to be inductive.\nloop invariant n >= -25 is partially proven to be inductive.\nloop invariant n <= 25 is partially proven to be inductive.\nloop invariant n >= -26 is partially proven to be inductive.\nloop invariant n <= 26 is partially proven to be inductive.\nloop invariant n >= -27 is partially proven to be inductive.\nloop invariant n <= 27 is partially proven to be inductive.\nloop invariant n >= -28 is partially proven to be inductive.\nloop invariant n <= 28 is partially proven to be inductive.\nloop invariant n >= -29 is partially proven to be inductive.\nloop invariant n <= 29 is partially proven to be inductive.\nloop invariant n >= -30 is partially proven to be inductive.\nloop invariant n <= 30 is partially proven to be inductive.\nloop invariant n >= -31 is partially proven to be inductive.\nloop invariant n <= 31 is partially proven to be inductive.\nloop invariant n >= -32 is partially proven to be inductive.\nloop invariant n <= 32 is partially proven to be inductive.\nloop invariant n >= -33 is partially proven to be inductive.\nloop invariant n <= 33 is partially proven to be inductive.\nloop invariant n >= -34 is partially proven to be inductive.\nloop invariant n <= 34 is partially proven to be inductive.\nloop invariant n >= -35 is partially proven to be inductive.\nloop invariant n <= 35 is partially proven to be inductive.\nloop invariant n >= -36 is partially proven to be inductive.\nloop invariant n <= 36 is partially proven to be inductive.\nloop invariant n >= -37 is partially proven to be inductive.\nloop invariant n <= 37 is partially proven to be inductive.\nloop invariant n >= -38 is partially proven to be inductive.\nloop invariant n <= 38 is partially proven to be inductive.\nloop invariant n >= -39 is partially proven to be inductive.\nloop invariant n <= 39 is partially proven to be inductive.\nloop invariant n >= -40 is partially proven to be inductive.\nloop invariant n <= 40 is partially proven to be inductive.\nloop invariant n >= -41 is partially proven to be inductive.\nloop invariant n <= 41 is partially proven to be inductive.\nloop invariant n >= -42 is partially proven to be inductive.\nloop invariant n <= 42 is partially proven to be inductive.\nloop invariant n >= -43 is partially proven to be inductive.\nloop invariant n <= 43 is partially proven to be inductive.\nloop invariant n >= -44 is partially proven to be inductive.\nloop invariant n <= 44 is partially proven to be inductive.\nloop invariant n >= -45 is partially proven to be inductive.\nloop invariant n <= 45 is partially proven to be inductive.\nloop invariant n >= -46 is partially proven to be inductive.\nloop invariant n <= 46 is partially proven to be inductive.\nloop invariant n >= -47 is partially proven to be inductive.\nloop invariant n <= 47 is partially proven to be inductive.\nloop invariant n >= -48 is partially proven to be inductive.\nloop invariant n <= 48 is partially proven to be inductive.\nloop invariant n >= -49 is partially proven to be inductive.\nloop invariant n <= 49 is partially proven to be inductive.\nloop invariant n >= -50 is partially proven to be inductive.\nloop invariant n <= 50 is partially proven to be inductive.\nloop invariant n >= -51 is partially proven to be inductive.\nloop invariant n <= 51 is partially proven to be inductive.\nloop invariant n >= -52 is partially proven to be inductive.\nloop invariant n <= 52 is partially proven to be inductive.\nloop invariant n >= -53 is partially proven to be inductive.\nloop invariant n <= 53 is partially proven to be inductive.\nloop invariant n >= -54 is partially proven to be inductive.\nloop invariant n <= 54 is partially proven to be inductive.\nloop invariant n >= -55 is partially proven to be inductive.\nloop invariant n <= 55 is partially proven to be inductive.\nloop invariant n >= -56 is partially proven to be inductive.\nloop invariant n <= 56 is partially proven to be inductive.\nloop invariant n >= -57 is partially proven to be inductive.\nloop invariant n <= 57 is partially proven to be inductive.\nloop invariant n >= -58 is partially proven to be inductive.\nloop invariant n <= 58 is partially proven to be inductive.\nloop invariant n >= -59 is partially proven to be inductive.\nloop invariant n <= 59 is partially proven to be inductive.\nloop invariant n >= -60 is partially proven to be inductive.\nloop invariant n <= 60 is partially proven to be inductive.\nloop invariant n >= -61 is partially proven to be inductive.\nloop invariant n <= 61 is partially proven to be inductive.\nloop invariant n >= -62 is partially proven to be inductive.\nloop invariant n <= 62 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\nloop invariant i4: n >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - i, where i is the number of iterations;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token ','",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= n <= x <= 2147483647;\nloop invariant x - n >= 0;\nloop invariant n <= 0 ==> x == 0;\nloop invariant x == 0 ==> n <= 0;\nloop invariant n < 0 ==> x == 0;\nloop invariant x == 0 ==> n < 0;\nloop invariant n > 0 ==> x > 0;\nloop invariant x > 0 ==> n > 0;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\nloop invariant x >= -2147483647 ==> n >= -2147483647;\nloop invariant n <= 2147483647 ==> x <= 2147483647;\nloop invariant x <= 2147483647 ==> n <= 2147483647;\nloop invariant n == 0 ==> x == 0;\nloop invariant x == 0 ==> n == 0;\nloop invariant n >= 0 ==> x >= 0;\nloop invariant x >= 0 ==> n >= 0;\nloop invariant n <= 0 ==> x <= 0;\nloop invariant x <= 0 ==> n <= 0;\nloop invariant n >= -2147483647 ==> x >= -2147483647;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n <= x <= 2147483647 is neither established nor preserved.\nloop invariant x - n >= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> n <= 0 is partially proven to be inductive.\nloop invariant n < 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> n < 0 is partially proven to be inductive.\nloop invariant n > 0 ==> x > 0 is partially proven to be inductive.\nloop invariant x > 0 ==> n > 0 is partially proven to be inductive.\nloop invariant n == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> n == 0 is partially proven to be inductive.\nloop invariant n >= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant x >= 0 ==> n >= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> x <= 0 is partially proven to be inductive.\nloop invariant x <= 0 ==> n <= 0 is partially proven to be inductive.\nloop invariant n >= -2147483647 ==> x >= -2147483647 is partially proven to be inductive.\nloop invariant x >= -2147483647 ==> n >= -2147483647 is partially proven to be inductive.\nloop invariant n <= 2147483647 ==> x <= 2147483647 is partially proven to be inductive.\nloop invariant x <= 2147483647 ==> n <= 2147483647 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\n\n\n\n\nloop invariant i8: x > 0 ==> n > 0;\nloop invariant i9: n == 0 ==> x == 0;\n\nloop invariant i11: n >= 0 ==> x >= 0;\nloop invariant i12: x >= 0 ==> n >= 0;\nloop invariant i13: n <= 0 ==> x <= 0;\n\nloop invariant i15: n >= -2147483647 ==> x >= -2147483647;\nloop invariant i16: x >= -2147483647 ==> n >= -2147483647;\nloop invariant i17: n <= 2147483647 ==> x <= 2147483647;\nloop invariant i18: x <= 2147483647 ==> n <= 2147483647;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= n <= x;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant n <= x;\nloop invariant x > 0;\nloop invariant x <= n;\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n is neither established nor preserved.\nloop invariant 0 <= n <= x is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n <= x is partially proven to be inductive.\nloop invariant x > 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\nloop invariant i4: x <= n;\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\nloop invariant x == n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x == n is established but not preserved.\nloop invariant x >= 0 is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( n > 0 ) ==> ( x >= 0 );\nloop invariant ( n > 0 ) ==> ( x <= n );\nloop invariant ( n > 0 ) ==> ( n >= 0 );\nloop invariant ( n > 0 ) ==> ( n <= 0 );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( n > 0 ) ==> ( x >= 0 ) is partially proven to be inductive.\nloop invariant ( n > 0 ) ==> ( x <= n ) is partially proven to be inductive.\nloop invariant ( n > 0 ) ==> ( n >= 0 ) is partially proven to be inductive.\nloop invariant ( n > 0 ) ==> ( n <= 0 ) is preserved but not established.\nAssertion n < 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\nloop invariant i1: ( n > 0 ) ==> ( x >= 0 );\nloop invariant i2: ( n > 0 ) ==> ( x <= n );\nloop invariant i3: ( n > 0 ) ==> ( n >= 0 );\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= v1 <= n;\nloop invariant 0 <= v2 <= n;\nloop invariant 0 <= v3 <= n;\nloop invariant 0 <= x <= n;\nloop invariant x = n - v1 - v2 - v3;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\nloop invariant x - v1 - v2 - v3 = 0;\nloop invariant v1 + v2 + v3 = n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant v1 >= 0;\nloop invariant v1 <= n;\nloop invariant v2 >= 0;\nloop invariant v2 <= n;\nloop invariant v3 >= 0;\nloop invariant v3 <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\n\n\n\n\nloop invariant i8: x <= n;\n\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant n >= x >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant x >= 0;\nloop invariant n >= 0;\nloop invariant x <= n;\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\nloop invariant v1 == (v2 + v3);\nloop invariant v2 == (v1 - v3);\nloop invariant v3 == (v1 - v2);\nloop invariant v1 <= n;\nloop invariant v2 <= n;\nloop invariant v3 <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant n >= x >= 0 is preserved but not established.\nloop invariant v1 >= 0 is preserved but not established.\nloop invariant v2 >= 0 is preserved but not established.\nloop invariant v3 >= 0 is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant v1 <= n is preserved but not established.\nloop invariant v2 <= n is preserved but not established.\nloop invariant v3 <= n is preserved but not established.\nloop invariant v1 >= v2 is preserved but not established.\nloop invariant v2 >= v3 is preserved but not established.\nloop invariant v1 <= v3 is preserved but not established.\nloop invariant v1 == (v2 + v3) is preserved but not established.\nloop invariant v2 == (v1 - v3) is partially proven to be inductive.\nloop invariant v3 == (v1 - v2) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: x <= n;\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x == n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x == n is established but not preserved.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\nloop invariant i4: x <= n;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 149: unexpected token ','",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\nloop invariant i1: 1 <= n;\nloop invariant i2: 0 <= x <= n;\nloop invariant i3: x <= n;\nloop invariant i4: n >= 0;\nloop invariant i5: n <= x;\nloop invariant i6: n <= 0;\nloop invariant i7: n >= x;\nloop invariant i8: n >= -1;\nloop invariant i9: n <= 1;\nloop invariant i10: n >= -2;\nloop invariant i11: n <= 2;\nloop invariant i12: n >= -3;\nloop invariant i13: n <= 3;\nloop invariant i14: n >= -4;\nloop invariant i15: n <= 4;\nloop invariant i16: n >= -5;\nloop invariant i17: n <= 5;\nloop invariant i18: n >= -6;\nloop invariant i19: n <= 6;\nloop invariant i20: n >= -7;\nloop invariant i21: n <= 7;\nloop invariant i22: n >= -8;\nloop invariant i23: n <= 8;\nloop invariant i24: n >= -9;\nloop invariant i25: n <= 9;\nloop invariant i26: n >= -10;\nloop invariant i27: n <= 10;\nloop invariant i28: n >= -11;\nloop invariant i29: n <= 11;\nloop invariant i30: n >= -12;\nloop invariant i31: n <= 12;\nloop invariant i32: n >= -13;\nloop invariant i33: n <= 13;\nloop invariant i34: n >= -14;\nloop invariant i35: n <= 14;\nloop invariant i36: n >= -15;\nloop invariant i37: n <= 15;\nloop invariant i38: n >= -16;\nloop invariant i39: n <= 16;\nloop invariant i40: n >= -17;\nloop invariant i41: n <= 17;\nloop invariant i42: n >= -18;\nloop invariant i43: n <= 18;\nloop invariant i44: n >= -19;\nloop invariant i45: n <= 19;\nloop invariant i46: n >= -20;\nloop invariant i47: n <= 20;\nloop invariant i48: n >= -21;\nloop invariant i49: n <= 21;\nloop invariant i50: n >= -22;\nloop invariant i51: n <= 22;\nloop invariant i52: n >= -23;\nloop invariant i53: n <= 23;\nloop invariant i54: n >= -24;\nloop invariant i55: n <= 24;\nloop invariant i56: n >= -25;\nloop invariant i57: n <= 25;\nloop invariant i58: n >= -26;\nloop invariant i59: n <= 26;\nloop invariant i60: n >= -27;\nloop invariant i61: n <= 27;\nloop invariant i62: n >= -28;\nloop invariant i63: n <= 28;\nloop invariant i64: n >= -29;\nloop invariant i65: n <= 29;\nloop invariant i66: n >= -30;\nloop invariant i67: n <= 30;\nloop invariant i68: n >= -31;\nloop invariant i69: n <= 31;\nloop invariant i70: n >= -32;\nloop invariant i71: n <= 32;\nloop invariant i72: n >= -33;\nloop invariant i73: n <= 33;\nloop invariant i74: n >= -34;\nloop invariant i75: n <= 34;\nloop invariant i76: n >= -35;\nloop invariant i77: n <= 35;\nloop invariant i78: n >= -36;\nloop invariant i79: n <= 36;\nloop invariant i80: n >= -37;\nloop invariant i81: n <= 37;\nloop invariant i82: n >= -38;\nloop invariant i83: n <= 38;\nloop invariant i84: n >= -39;\nloop invariant i85: n <= 39;\nloop invariant i86: n >= -40;\nloop invariant i87: n <= 40;\nloop invariant i88: n >= -41;\nloop invariant i89: n <= 41;\nloop invariant i90: n >= -42;\nloop invariant i91: n <= 42;\nloop invariant i92: n >= -43;\nloop invariant i93: n <= 43;\nloop invariant i94: n >= -44;\nloop invariant i95: n <= 44;\nloop invariant i96: n >= -45;\nloop invariant i97: n <= 45;\nloop invariant i98: n >= -46;\nloop invariant i99: n <= 46;\nloop invariant i100: n >= -47;\nloop invariant i101: n <= 47;\nloop invariant i102: n >= -48;\nloop invariant i103: n <= 48;\nloop invariant i104: n >= -49;\nloop invariant i105: n <= 49;\nloop invariant i106: n >= -50;\nloop invariant i107: n <= 50;\nloop invariant i108: n >= -51;\nloop invariant i109: n <= 51;\nloop invariant i110: n >= -52;\nloop invariant i111: n <= 52;\nloop invariant i112: n >= -53;\nloop invariant i113: n <= 53;\nloop invariant i114: n >= -54;\nloop invariant i115: n <= 54;\nloop invariant i116: n >= -55;\nloop invariant i117: n <= 55;\nloop invariant i118: n >= -56;\nloop invariant i119: n <= 56;\nloop invariant i120: n >= -57;\nloop invariant i121: n <= 57;\nloop invariant i122: n >= -58;\nloop invariant i123: n <= 58;\nloop invariant i124: n >= -59;\nloop invariant i125: n <= 59;\nloop invariant i126: n >= -60;\nloop invariant i127: n <= 60;\nloop invariant i128: n >= -61;\nloop invariant i129: n <= 61;\nloop invariant i130: n >= -62;\nloop invariant i131: n <= 62;\nloop invariant i132: x == n - i, where i is the number of iterations;\nloop invariant i133: x >= 0;\nloop invariant i134: x == n - y;\nloop invariant i135: 1 <= n <= x <= 2147483647;\nloop invariant i136: x - n >= 0;\nloop invariant i137: n <= 0 ==> x == 0;\nloop invariant i138: x == 0 ==> n <= 0;\nloop invariant i139: n < 0 ==> x == 0;\nloop invariant i140: x == 0 ==> n < 0;\nloop invariant i141: n > 0 ==> x > 0;\nloop invariant i142: x > 0 ==> n > 0;\nloop invariant i143: n == 0 ==> x == 0;\nloop invariant i144: x == 0 ==> n == 0;\nloop invariant i145: n >= 0 ==> x >= 0;\nloop invariant i146: x >= 0 ==> n >= 0;\nloop invariant i147: n <= 0 ==> x <= 0;\nloop invariant i148: x <= 0 ==> n <= 0;\nloop invariant i149: n >= -2147483647 ==> x >= -2147483647;\nloop invariant i150: x >= -2147483647 ==> n >= -2147483647;\nloop invariant i151: n <= 2147483647 ==> x <= 2147483647;\nloop invariant i152: x <= 2147483647 ==> n <= 2147483647;\nloop invariant i153: 1 <= x <= n;\nloop invariant i154: 0 <= n <= x;\nloop invariant i155: x > 0;\nloop invariant i156: x == n;\nloop invariant i157: ( n > 0 ) ==> ( x >= 0 );\nloop invariant i158: ( n > 0 ) ==> ( x <= n );\nloop invariant i159: ( n > 0 ) ==> ( n >= 0 );\nloop invariant i160: ( n > 0 ) ==> ( n <= 0 );\nloop invariant i161: 0 <= v1 <= n;\nloop invariant i162: 0 <= v2 <= n;\nloop invariant i163: 0 <= v3 <= n;\nloop invariant i164: x = n - v1 - v2 - v3;\nloop invariant i165: v1 + v2 + v3 = n;\nloop invariant i166: v1 >= 0;\nloop invariant i167: v1 <= n;\nloop invariant i168: v2 >= 0;\nloop invariant i169: v2 <= n;\nloop invariant i170: v3 >= 0;\nloop invariant i171: v3 <= n;\nloop invariant i172: x - v1 - v2 - v3 = 0;\nloop invariant i173: n >= x >= 0;\nloop invariant i174: v1 >= v2;\nloop invariant i175: v2 >= v3;\nloop invariant i176: v1 <= v3;\nloop invariant i177: v1 == (v2 + v3);\nloop invariant i178: v2 == (v1 - v3);\nloop invariant i179: v3 == (v1 - v2);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 71,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n\n\n\nloop invariant i7: n >= x;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i142: x > 0 ==> n > 0;\nloop invariant i143: n == 0 ==> x == 0;\n\nloop invariant i145: n >= 0 ==> x >= 0;\nloop invariant i146: x >= 0 ==> n >= 0;\nloop invariant i147: n <= 0 ==> x <= 0;\n\nloop invariant i149: n >= -2147483647 ==> x >= -2147483647;\nloop invariant i150: x >= -2147483647 ==> n >= -2147483647;\nloop invariant i151: n <= 2147483647 ==> x <= 2147483647;\nloop invariant i152: x <= 2147483647 ==> n <= 2147483647;\n\n\n\n\nloop invariant i157: ( n > 0 ) ==> ( x >= 0 );\nloop invariant i158: ( n > 0 ) ==> ( x <= n );\nloop invariant i159: ( n > 0 ) ==> ( n >= 0 );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 10 <= x <= UINT_MAX;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 12;\n*/\n```",
                "```\n/*@\nloop invariant 10 >= x >= 12;\nloop invariant 0 <= x - 10 <= 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x >= 10 ==> x <= 2147483647;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\n*/\n```",
                "```\n/*@\nloop invariant 10 <= x <= 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 9;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10; loop invariant x % 2 == 0 ==> x >= 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant !(x % 2);\nloop invariant x >= 10;\nloop invariant x >= 2;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 < x <= 10;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant x >= 10;\nloop invariant x <= 2147483647;\nloop invariant x % 2 == 0;\nloop invariant x - 2 >= 10;\nloop invariant x - 2 <= 2147483645;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant x % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 20;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 11: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 10 <= x <= UINT_MAX;\nloop invariant x % 2 == 0 ==> x >= 10;\nloop invariant x % 2 != 0 ==> x >= 12;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 10 <= x <= UINT_MAX is established but not preserved.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 != 0 ==> x >= 12 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 10 >= x >= 12;\nloop invariant 0 <= x - 10 <= 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 10 >= x >= 12 is preserved but not established.\nloop invariant 0 <= x - 10 <= 2 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x >= 10 ==> x % 2 == 0;\nloop invariant x >= 10 ==> x <= 2147483647;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\nloop invariant x >= 10 ==> x >= 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is established but not preserved.\nloop invariant x >= 10 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> x <= 2147483647 is partially proven to be inductive.\nloop invariant x >= 10 ==> x >= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\nloop invariant i4: x >= 10 ==> x >= 10;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 10 <= x <= 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 10 <= x <= 10 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 9;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 9 is preserved but not established.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10; loop invariant x % 2 == 0 ==> x >= 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10; loop invariant x % 2 == 0 ==> x >= 10 is established but not preserved.\nAssertion x % 2 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is established but not preserved.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\nloop invariant !(x % 2);\nloop invariant x >= 10;\nloop invariant x >= 2;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is established but not preserved.\nloop invariant !(x % 2) is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant x >= 2 is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 < x <= 10;\nloop invariant x % 2 == 0 ==> x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 < x <= 10 is established but not preserved.\nloop invariant x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\nloop invariant i2: x % 2 == 0 ==> x % 2 == 0;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant x >= 10;\nloop invariant x <= 2147483647;\nloop invariant x % 2 == 0;\nloop invariant x - 2 >= 10;\nloop invariant x - 2 <= 2147483645;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 10 is partially proven to be inductive.\nloop invariant x <= 2147483647 is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x - 2 >= 10 is preserved but not established.\nloop invariant x - 2 <= 2147483645 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 20;\nloop invariant x % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 20 is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant x >= 10;\nloop invariant x % 2 == 0;\nloop invariant x >= 20;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= UINT_MAX is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 20 is preserved but not established.\nAssertion x % 2 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: 0 <= x <= UINT_MAX;\n\n\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant 10 <= x <= UINT_MAX is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant x % 2 != 0 ==> x >= 12 is partially proven to be inductive.\nloop invariant 10 >= x >= 12 is preserved but not established.\nloop invariant 0 <= x - 10 <= 2 is partially proven to be inductive.\nloop invariant 0 <= x <= 2147483647 is partially proven to be inductive.\nloop invariant x >= 10 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x >= 10 ==> x <= 2147483647 is partially proven to be inductive.\nloop invariant x >= 10 ==> x >= 10 is partially proven to be inductive.\nloop invariant 10 <= x <= 10 is partially proven to be inductive.\nloop invariant 0 <= x <= 9 is partially proven to be inductive.\nloop invariant 0 <= x <= 10; loop invariant x % 2 == 0 ==> x >= 10 is partially proven to be inductive.\nloop invariant x >= 10 is partially proven to be inductive.\nloop invariant !(x % 2) is partially proven to be inductive.\nloop invariant x >= 2 is partially proven to be inductive.\nloop invariant 0 < x <= 10 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x <= 2147483647 is partially proven to be inductive.\nloop invariant x - 2 >= 10 is partially proven to be inductive.\nloop invariant x - 2 <= 2147483645 is partially proven to be inductive.\nloop invariant 0 <= x <= 20 is partially proven to be inductive.\nloop invariant 0 <= x <= UINT_MAX is partially proven to be inductive.\nloop invariant x >= 20 is partially proven to be inductive.\nAssertion x % 2 == 0: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\nloop invariant i1: 0 <= x <= 10;\nloop invariant i2: x % 2 == 0;\nloop invariant i3: 10 <= x <= UINT_MAX;\nloop invariant i4: x % 2 == 0 ==> x >= 10;\nloop invariant i5: x % 2 != 0 ==> x >= 12;\nloop invariant i6: 10 >= x >= 12;\nloop invariant i7: 0 <= x - 10 <= 2;\nloop invariant i8: 0 <= x <= 2147483647;\nloop invariant i9: x >= 10 ==> x % 2 == 0;\nloop invariant i10: x >= 10 ==> x <= 2147483647;\nloop invariant i11: x >= 10 ==> x >= 10;\nloop invariant i12: 10 <= x <= 10;\nloop invariant i13: 0 <= x <= 9;\nloop invariant i14: 0 <= x <= 10; loop invariant x % 2 == 0 ==> x >= 10;\nloop invariant i15: x >= 10;\nloop invariant i16: !(x % 2);\nloop invariant i17: x >= 2;\nloop invariant i18: 0 < x <= 10;\nloop invariant i19: x % 2 == 0 ==> x % 2 == 0;\nloop invariant i20: x <= 2147483647;\nloop invariant i21: x - 2 >= 10;\nloop invariant i22: x - 2 <= 2147483645;\nloop invariant i23: 0 <= x <= 20;\nloop invariant i24: 0 <= x <= UINT_MAX;\nloop invariant i25: x >= 20;\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
            "combined_annotation_num_solver_calls": 20,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 10;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: x >= 10 ==> x >= 10;\n\n\n\n\n\n\n\nloop invariant i19: x % 2 == 0 ==> x % 2 == 0;\n\n\n\n\nloop invariant i24: 0 <= x <= UINT_MAX;\n\n*/\nwhile (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  while (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i < n; loop invariant i <= n; loop invariant 0 <= k <= n; loop invariant k <= n; loop invariant i % 2 == 0; loop invariant 0 <= k-i <= n-i; loop invariant 2*k >= n-1 ==> i == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant k >= i/2;\nloop invariant k <= (n-i)/2;\nloop invariant k >= i/2 ==> k <= (n-i)/2;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 2 == 0;\nloop invariant k >= n;\nloop invariant n >= 0;\nloop invariant i < n ==> k == n - i/2;\nloop invariant loop invariant 0 <= i <= n; ensures that i remains within the bounds of the loop. The loop invariant loop invariant 0 <= k <= n; ensures that k remains within the bounds of the loop. The loop invariant loop invariant i % 2 == 0; ensures that i is always even. The loop invariant loop invariant k >= n; ensures that k is always greater than or equal to n. The loop invariant loop invariant n >= 0; ensures that n is always non-negative. The loop invariant loop invariant i < n ==> k == n - i/2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant i <= n;\nloop invariant i == 2 * (i / 2);\nloop invariant i == (i+1) - 1;\nloop invariant k == n - i;\nloop invariant k == k - 1;\nloop invariant i <= 2 * (i / 2);\nloop invariant i <= (i+1) - 1;\nloop invariant i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2);\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2);\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i && i <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k = n - i / 2;\nloop invariant 0 <= k <= n / 2;\nloop invariant 2*k >= n-1;\n*/\n```",
                "```\n/*@\nloop invariant k = n - (i - 1) / 2;\nloop invariant k >= 1;\nloop invariant k >= 1;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 1;\n*/\n```",
                "```\n/*@\nloop invariant ( ( i + k ) == n );\nloop invariant ( ( i >= 0 ) && ( i < n ) );\nloop invariant ( ( k >= 0 ) && ( k < n ) );\nloop invariant ( ( n >= 0 ) && ( n == ( n - ( n - i ) ) ) );\nloop invariant ( ( ( i + k ) == n ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( i + k ) == n ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\n*/\n```",
                "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= n - 1;\nloop invariant i <= n;\nloop invariant k <= 0;\nloop invariant i == 2 * k + 1;\nloop invariant i == n - 1 || i == n;\nloop invariant i == n - 1 || k == 0;\nloop invariant i == n - 1 || i == n && k == 0;\n*/\n```",
                "```\n/*@\nloop invariant \\(i \\leq n\\);\nloop invariant \\(k \\geq n - (n - i + 1)\\);\nloop invariant \\(2k \\geq n - 1\\);\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i%2==0;\nloop invariant k==n-i/2-1;\nloop invariant k>=0;\nloop invariant 2*k>=n-i-1 ==> i<n;\nloop invariant 2*k>=n-i-1 ==> i%2==0;\nloop invariant 2*k>=n-i-1 ==> k>=0;\nloop invariant 2*k>=n-i-1 ==> 2*k>=n-1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant i == 0 || i%2 == 0;\nloop invariant i >= 0 && i <= n;\nloop invariant i <= k * 2;\nloop invariant i >= k * 2 - n;\nloop invariant i%2 == 0 || i%2 == 1 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 1;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k >= (i - 1 + n) / 2;\nloop invariant k <= (n - 1) / 2;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= n-1;\nloop invariant i >= 0;\nloop invariant i <= 2*(n-1);\nloop invariant i%2 == 1;\nloop invariant k == n - i/2 - 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i < n; loop invariant i <= n; loop invariant 0 <= k <= n; loop invariant k <= n; loop invariant i % 2 == 0; loop invariant 0 <= k-i <= n-i; loop invariant 2*k >= n-1 ==> i == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i < n; loop invariant i <= n; loop invariant 0 <= k <= n; loop invariant k <= n; loop invariant i % 2 == 0; loop invariant 0 <= k-i <= n-i; loop invariant 2*k >= n-1 ==> i == n is preserved but not established.\nAssertion 2 * k >= n - 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 0;\nloop invariant i <= n;\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant k >= i/2;\nloop invariant k <= (n-i)/2;\nloop invariant k >= i/2 ==> k <= (n-i)/2;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant k >= 0 is established but not preserved.\nloop invariant k <= n is partially proven to be inductive.\nloop invariant k >= i/2 is established but not preserved.\nloop invariant k <= (n-i)/2 is preserved but not established.\nloop invariant k >= i/2 ==> k <= (n-i)/2 is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k <= n is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n is partially proven to be inductive.\nloop invariant k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\nloop invariant i2: n >= 0;\n\n\nloop invariant i5: k <= n;\n\n\n\nloop invariant i9: k >= i/2 ==> k <= (n-i)/2 ==> k <= n;\n\nloop invariant i11: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n;\nloop invariant i12: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i13: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i14: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i15: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i16: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i17: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i18: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= k <= n;\nloop invariant i % 2 == 0;\nloop invariant k >= n;\nloop invariant n >= 0;\nloop invariant i < n ==> k == n - i/2;\nloop invariant loop invariant 0 <= i <= n; ensures that i remains within the bounds of the loop. The loop invariant loop invariant 0 <= k <= n; ensures that k remains within the bounds of the loop. The loop invariant loop invariant i % 2 == 0; ensures that i is always even. The loop invariant loop invariant k >= n; ensures that k is always greater than or equal to n. The loop invariant loop invariant n >= 0; ensures that n is always non-negative. The loop invariant loop invariant i < n ==> k == n - i/2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 24: unexpected token 'invariant'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\nloop invariant i2: 0 <= k <= n;\nloop invariant i3: i % 2 == 0;\n\nloop invariant i5: n >= 0;\nloop invariant i6: i < n ==> k == n - i/2;\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant i <= n;\nloop invariant i == 2 * (i / 2);\nloop invariant i == (i+1) - 1;\nloop invariant k == n - i;\nloop invariant k == k - 1;\nloop invariant i <= 2 * (i / 2);\nloop invariant i <= (i+1) - 1;\nloop invariant i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2);\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2);\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i;\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i && i <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) is partially proven to be inductive.\nloop invariant i == (i+1) - 1 is partially proven to be inductive.\nloop invariant k == n - i is partially proven to be inductive.\nloop invariant k == k - 1 is preserved but not established.\nloop invariant i <= 2 * (i / 2) is partially proven to be inductive.\nloop invariant i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant i <= 2 * (i / 2) && i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i is partially proven to be inductive.\nloop invariant k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i && i <= n is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\nloop invariant i3: i == 2 * (i / 2);\nloop invariant i4: i == (i+1) - 1;\n\n\nloop invariant i7: i <= 2 * (i / 2);\nloop invariant i8: i <= (i+1) - 1;\nloop invariant i9: i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i10: i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i11: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2);\nloop invariant i12: i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1;\nloop invariant i13: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i14: i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\n\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k = n - i / 2;\nloop invariant 0 <= k <= n / 2;\nloop invariant 2*k >= n-1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant k = n - (i - 1) / 2;\nloop invariant k >= 1;\nloop invariant k >= 1;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant i >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant ( ( i + k ) == n );\nloop invariant ( ( i >= 0 ) && ( i < n ) );\nloop invariant ( ( k >= 0 ) && ( k < n ) );\nloop invariant ( ( n >= 0 ) && ( n == ( n - ( n - i ) ) ) );\nloop invariant ( ( ( i + k ) == n ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( i + k ) == n ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( ( i + k ) == n ) is partially proven to be inductive.\nloop invariant ( ( i >= 0 ) && ( i < n ) ) is preserved but not established.\nloop invariant ( ( k >= 0 ) && ( k < n ) ) is preserved but not established.\nloop invariant ( ( n >= 0 ) && ( n == ( n - ( n - i ) ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( i + k ) == n ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( i + k ) == n ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) ) is partially proven to be inductive.\nloop invariant ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) ) is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i10: ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i11: ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i12: ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) );\n\n\nloop invariant i15: ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i16: ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i17: ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i18: ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\n\n\nloop invariant i21: ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i22: ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i23: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i24: ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i25: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant k >= n - 1;\nloop invariant i <= n;\nloop invariant k <= 0;\nloop invariant i == 2 * k + 1;\nloop invariant i == n - 1 || i == n;\nloop invariant i == n - 1 || k == 0;\nloop invariant i == n - 1 || i == n && k == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant k >= n - 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant k <= 0 is preserved but not established.\nloop invariant i == 2 * k + 1 is preserved but not established.\nloop invariant i == n - 1 || i == n is partially proven to be inductive.\nloop invariant i == n - 1 || k == 0 is partially proven to be inductive.\nloop invariant i == n - 1 || i == n && k == 0 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant \\(i \\leq n\\);\nloop invariant \\(k \\geq n - (n - i + 1)\\);\nloop invariant \\(2k \\geq n - 1\\);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: lexical error, illegal character \\",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i%2==0;\nloop invariant k==n-i/2-1;\nloop invariant k>=0;\nloop invariant 2*k>=n-i-1 ==> i<n;\nloop invariant 2*k>=n-i-1 ==> i%2==0;\nloop invariant 2*k>=n-i-1 ==> k>=0;\nloop invariant 2*k>=n-i-1 ==> 2*k>=n-1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant i%2==0 is partially proven to be inductive.\nloop invariant k==n-i/2-1 is preserved but not established.\nloop invariant k>=0 is partially proven to be inductive.\nloop invariant 2*k>=n-i-1 ==> i<n is partially proven to be inductive.\nloop invariant 2*k>=n-i-1 ==> i%2==0 is partially proven to be inductive.\nloop invariant 2*k>=n-i-1 ==> k>=0 is partially proven to be inductive.\nloop invariant 2*k>=n-i-1 ==> 2*k>=n-1 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\nloop invariant i2: i%2==0;\n\n\n\nloop invariant i6: 2*k>=n-i-1 ==> i%2==0;\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= k <= n;\nloop invariant i == 0 || i%2 == 0;\nloop invariant i >= 0 && i <= n;\nloop invariant i <= k * 2;\nloop invariant i >= k * 2 - n;\nloop invariant i%2 == 0 || i%2 == 1 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 1;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= k <= n is partially proven to be inductive.\nloop invariant i == 0 || i%2 == 0 is partially proven to be inductive.\nloop invariant i >= 0 && i <= n is partially proven to be inductive.\nloop invariant i <= k * 2 is established but not preserved.\nloop invariant i >= k * 2 - n is preserved but not established.\nloop invariant i%2 == 0 || i%2 == 1 && i > 0 is partially proven to be inductive.\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 1 is established but not preserved.\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0 is partially proven to be inductive.\nloop invariant i == k * 2 - n || i < k * 2 - n && i%2 == 0 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\nloop invariant i2: i == 0 || i%2 == 0;\n\n\n\nloop invariant i6: i%2 == 0 || i%2 == 1 && i > 0;\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k >= (i - 1 + n) / 2;\nloop invariant k <= (n - 1) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is established but not preserved.\nloop invariant k >= 0 is established but not preserved.\nloop invariant k >= (i - 1 + n) / 2 is established but not preserved.\nloop invariant k <= (n - 1) / 2 is preserved but not established.\nAssertion 2 * k >= n - 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant k >= 0;\nloop invariant k <= n-1;\nloop invariant i >= 0;\nloop invariant i <= 2*(n-1);\nloop invariant i%2 == 1;\nloop invariant k == n - i/2 - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nloop invariant k <= n-1 is preserved but not established.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= 2*(n-1) is partially proven to be inductive.\nloop invariant i%2 == 1 is partially proven to be inductive.\nloop invariant k == n - i/2 - 1 is partially proven to be inductive.\nAssertion 2 * k >= n - 1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\n\nloop invariant i4: i >= 0;\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 41: unexpected token 'invariant'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\nloop invariant i1: 0 <= i < n; loop invariant i <= n; loop invariant 0 <= k <= n; loop invariant k <= n; loop invariant i % 2 == 0; loop invariant 0 <= k-i <= n-i; loop invariant 2*k >= n-1 ==> i == n;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: n >= 0;\nloop invariant i4: i <= n;\nloop invariant i5: k >= 0;\nloop invariant i6: k <= n;\nloop invariant i7: k >= i/2;\nloop invariant i8: k <= (n-i)/2;\nloop invariant i9: k >= i/2 ==> k <= (n-i)/2;\nloop invariant i10: k >= i/2 ==> k <= (n-i)/2 ==> k <= n;\nloop invariant i11: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0;\nloop invariant i12: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n;\nloop invariant i13: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i14: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i15: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i16: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i17: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i18: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i19: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i20: 0 <= k <= n;\nloop invariant i21: i % 2 == 0;\nloop invariant i22: k >= n;\nloop invariant i23: i < n ==> k == n - i/2;\nloop invariant i24: loop invariant 0 <= i <= n; ensures that i remains within the bounds of the loop. The loop invariant loop invariant 0 <= k <= n; ensures that k remains within the bounds of the loop. The loop invariant loop invariant i % 2 == 0; ensures that i is always even. The loop invariant loop invariant k >= n; ensures that k is always greater than or equal to n. The loop invariant loop invariant n >= 0; ensures that n is always non-negative. The loop invariant loop invariant i < n ==> k == n - i/2;\nloop invariant i25: i == 2 * (i / 2);\nloop invariant i26: i == (i+1) - 1;\nloop invariant i27: k == n - i;\nloop invariant i28: k == k - 1;\nloop invariant i29: i <= 2 * (i / 2);\nloop invariant i30: i <= (i+1) - 1;\nloop invariant i31: i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i32: i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i33: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2);\nloop invariant i34: i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1;\nloop invariant i35: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i36: i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i37: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i38: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i;\nloop invariant i39: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n;\nloop invariant i40: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2);\nloop invariant i41: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i42: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i;\nloop invariant i43: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i;\nloop invariant i44: k == n - i && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1 && k == n - i && i <= n && i == 2 * (i / 2) && i == (i+1) - 1 && i == i && k == n - i && i <= n;\nloop invariant i45: k = n - i / 2;\nloop invariant i46: 0 <= k <= n / 2;\nloop invariant i47: 2*k >= n-1;\nloop invariant i48: k = n - (i - 1) / 2;\nloop invariant i49: k >= 1;\nloop invariant i50: i >= 1;\nloop invariant i51: ( ( i + k ) == n );\nloop invariant i52: ( ( i >= 0 ) && ( i < n ) );\nloop invariant i53: ( ( k >= 0 ) && ( k < n ) );\nloop invariant i54: ( ( n >= 0 ) && ( n == ( n - ( n - i ) ) ) );\nloop invariant i55: ( ( ( i + k ) == n ) ==> ( i == ( i + 2 ) ) );\nloop invariant i56: ( ( ( i + k ) == n ) ==> ( k == ( k - 1 ) ) );\nloop invariant i57: ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i58: ( ( ( ( k - 1 ) >= 0 ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i59: ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i60: ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i61: ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i62: ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i63: ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i64: ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i65: ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i66: ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i67: ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i68: ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i69: ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i70: ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i71: ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i72: ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i73: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i74: ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i75: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i76: i >= 0;\nloop invariant i77: k >= n - 1;\nloop invariant i78: k <= 0;\nloop invariant i79: i == 2 * k + 1;\nloop invariant i80: i == n - 1 || i == n;\nloop invariant i81: i == n - 1 || k == 0;\nloop invariant i82: i == n - 1 || i == n && k == 0;\nloop invariant i83: \\(i \\leq n\\);\nloop invariant i84: \\(k \\geq n - (n - i + 1)\\);\nloop invariant i85: \\(2k \\geq n - 1\\);\nloop invariant i86: i%2==0;\nloop invariant i87: k==n-i/2-1;\nloop invariant i88: k>=0;\nloop invariant i89: 2*k>=n-i-1 ==> i<n;\nloop invariant i90: 2*k>=n-i-1 ==> i%2==0;\nloop invariant i91: 2*k>=n-i-1 ==> k>=0;\nloop invariant i92: 2*k>=n-i-1 ==> 2*k>=n-1;\nloop invariant i93: i == 0 || i%2 == 0;\nloop invariant i94: i >= 0 && i <= n;\nloop invariant i95: i <= k * 2;\nloop invariant i96: i >= k * 2 - n;\nloop invariant i97: i%2 == 0 || i%2 == 1 && i > 0;\nloop invariant i98: i == k * 2 - n || i < k * 2 - n && i%2 == 1;\nloop invariant i99: i == k * 2 - n || i < k * 2 - n && i%2 == 0 && i > 0;\nloop invariant i100: i == k * 2 - n || i < k * 2 - n && i%2 == 0;\nloop invariant i101: k >= (i - 1 + n) / 2;\nloop invariant i102: k <= (n - 1) / 2;\nloop invariant i103: k <= n-1;\nloop invariant i104: i <= 2*(n-1);\nloop invariant i105: i%2 == 1;\nloop invariant i106: k == n - i/2 - 1;\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
            "combined_annotation_num_solver_calls": 34,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  /*@\n\n\nloop invariant i3: n >= 0;\n\nloop invariant i5: k >= 0;\nloop invariant i6: k <= n;\n\n\n\nloop invariant i10: k >= i/2 ==> k <= (n-i)/2 ==> k <= n;\nloop invariant i11: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0;\nloop invariant i12: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n;\nloop invariant i13: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i14: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i15: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i16: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i17: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i18: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n;\nloop invariant i19: k >= i/2 ==> k <= (n-i)/2 ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0 ==> k <= n ==> k >= 0;\nloop invariant i20: 0 <= k <= n;\nloop invariant i21: i % 2 == 0;\n\nloop invariant i23: i < n ==> k == n - i/2;\n\nloop invariant i25: i == 2 * (i / 2);\nloop invariant i26: i == (i+1) - 1;\n\n\nloop invariant i29: i <= 2 * (i / 2);\nloop invariant i30: i <= (i+1) - 1;\nloop invariant i31: i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i32: i == 2 * (i / 2) && i == (i+1) - 1;\nloop invariant i33: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2);\nloop invariant i34: i == 2 * (i / 2) && i == (i+1) - 1 && i <= (i+1) - 1;\nloop invariant i35: i == 2 * (i / 2) && i == (i+1) - 1 && i <= 2 * (i / 2) && i <= (i+1) - 1;\nloop invariant i36: i == 2 * (i / 2) && i == (i+1) - 1 && i == i && i <= 2 * (i / 2) && i <= (i+1) - 1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i47: 2*k >= n-1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i59: ( ( i == ( i + 2 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i60: ( ( k == ( k - 1 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i61: ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i62: ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i63: ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i64: ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i65: ( ( i == ( i + 2 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i66: ( ( k == ( k - 1 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i67: ( ( ( i == ( i + 2 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i68: ( ( ( k == ( k - 1 ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( ( i + k ) == ( n - 1 ) ) );\nloop invariant i69: ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i70: ( ( ( ( ( i + k ) == ( n - 1 ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i71: ( ( ( ( ( i == ( i + 2 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i72: ( ( ( ( ( k == ( k - 1 ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + 2 ) < n ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i73: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i74: ( ( ( ( ( k == ( k - 1 ) ) && ( i < n ) ) && ( ( i + k ) == ( n - 1 ) ) ) && ( ( k - 1 ) >= 0 ) ) ==> ( i == ( i + 2 ) ) );\nloop invariant i75: ( ( ( ( ( i == ( i + 2 ) ) && ( i < n ) ) && ( ( k - 1 ) >= 0 ) ) && ( ( i + k ) == ( n - 1 ) ) ) ==> ( k == ( k - 1 ) ) );\nloop invariant i76: i >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i86: i%2==0;\n\nloop invariant i88: k>=0;\n\nloop invariant i90: 2*k>=n-i-1 ==> i%2==0;\nloop invariant i91: 2*k>=n-i-1 ==> k>=0;\nloop invariant i92: 2*k>=n-i-1 ==> 2*k>=n-1;\nloop invariant i93: i == 0 || i%2 == 0;\n\n\n\nloop invariant i97: i%2 == 0 || i%2 == 1 && i > 0;\n\n\n\n\n\n\n\n\n\n*/\nwhile (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n\n  return 0;\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  while (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 4 * (i + 1); ==> x % 4 == 0;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2147483647;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant (x % 4) == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 4 * n;\nloop invariant x % 4 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 4 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 4 * (unknown_int()) + 4;\nloop invariant x % 4 == 0;\nloop invariant unknown_int() == 0 ==> x == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= x + 4; loop invariant x % 4 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 4 == 0 ==> x >= 4;\nloop invariant x % 4 == 1 ==> x >= 1;\nloop invariant x % 4 == 2 ==> x >= 2;\nloop invariant x % 4 == 3 ==> x >= 3;\nloop invariant x >= 0;\nloop invariant x % 4 == 0 ==> x <= INT_MAX - 4;\nloop invariant x % 4 == 1 ==> x <= INT_MAX - 1;\nloop invariant x % 4 == 2 ==> x <= INT_MAX - 2;\nloop invariant x % 4 == 3 ==> x <= INT_MAX - 3;\nloop invariant x <= INT_MAX;\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 4 * n;\nloop invariant (x % 4) == 0;\nloop invariant unknown_int() == 0;\nloop invariant unknown_int() == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 4 * (i + 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant x % 4 == 0 ==> (x / 4 >= 0);\nloop invariant x % 4 == 1 ==> (x / 4 >= 1);\nloop invariant x % 4 == 2 ==> (x / 4 >= 2);\nloop invariant x % 4 == 3 ==> (x / 4 >= 3);\nloop invariant x % 4 == 0 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 1 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 2 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 3 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 0 ==> (x / 4 == 0);\nloop invariant x % 4 == 1 ==> (x / 4 == 1);\nloop invariant x % 4 == 2 ==> (x / 4 == 2);\nloop invariant x % 4 == 3 ==> (x / 4 == 3);\nloop invariant x % 4 == 0 ==> (x == 0);\nloop invariant x % 4 == 1 ==> (x == 1);\nloop invariant x % 4 == 2 ==> (x == 2);\nloop invariant x % 4 == 3 ==> (x == 3);\nloop invariant x % 4 == 0 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 1 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 2 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 3 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 0 ==> (x >= 0);\nloop invariant x % 4 == 1 ==> (x >= 1);\nloop invariant x % 4 == 2 ==> (x >= 2);\nloop invariant x % 4 == 3 ==> (x >= 3);\nloop invariant x % 4 == 0 ==> (x == 0);\nloop invariant x % 4 == 1 ==> (x == 1);\nloop invariant x % 4 == 2 ==> (x == 2);\nloop invariant x % 4 == 3 ==> (x == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 2147483647;\nloop invariant 0 <= unknown_int() <= 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * (i + 1); ==> x % 4 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token '==>'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2147483647;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2147483647 is established but not preserved.\nAssertion x % 4 == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant (x % 4) == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= UINT_MAX is partially proven to be inductive.\nloop invariant (x % 4) == 0 is established but not preserved.\nAssertion x % 4 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= UINT_MAX;\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * n;\nloop invariant x % 4 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable n. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 4 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x % 4 == 0 is established but not preserved.\nAssertion x % 4 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * (unknown_int()) + 4;\nloop invariant x % 4 == 0;\nloop invariant unknown_int() == 0 ==> x == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= x + 4; loop invariant x % 4 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= x + 4; loop invariant x % 4 == 0 is partially proven to be inductive.\nAssertion x % 4 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= x + 4; loop invariant x % 4 == 0;\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x % 4 == 0 ==> x >= 4;\nloop invariant x % 4 == 1 ==> x >= 1;\nloop invariant x % 4 == 2 ==> x >= 2;\nloop invariant x % 4 == 3 ==> x >= 3;\nloop invariant x >= 0;\nloop invariant x % 4 == 0 ==> x <= INT_MAX - 4;\nloop invariant x % 4 == 1 ==> x <= INT_MAX - 1;\nloop invariant x % 4 == 2 ==> x <= INT_MAX - 2;\nloop invariant x % 4 == 3 ==> x <= INT_MAX - 3;\nloop invariant x <= INT_MAX;\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant x >= 4 * (x / 4);\nloop invariant x <= INT_MAX - 4 * (x / 4);\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> x >= 4 is preserved but not established.\nloop invariant x % 4 == 1 ==> x >= 1 is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> x >= 2 is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> x >= 3 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> x <= INT_MAX - 4 is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> x <= INT_MAX - 1 is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> x <= INT_MAX - 2 is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> x <= INT_MAX - 3 is partially proven to be inductive.\nloop invariant x <= INT_MAX is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> x == 4 * (x / 4) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4 is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4 is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4 is partially proven to be inductive.\nloop invariant x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3 is partially proven to be inductive.\nloop invariant x >= 4 ==> x == 4 * (x / 4) + (x % 4) is partially proven to be inductive.\nloop invariant x >= 1 ==> x == 1 + (x - 1) / 4 * 4 is partially proven to be inductive.\nloop invariant x >= 2 ==> x == 2 + (x - 2) / 4 * 4 is partially proven to be inductive.\nloop invariant x >= 3 ==> x == 3 + (x - 3) / 4 * 4 is partially proven to be inductive.\nloop invariant x >= 4 * (x / 4) is partially proven to be inductive.\nloop invariant x <= INT_MAX - 4 * (x / 4) is partially proven to be inductive.\nAssertion x % 4 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: x % 4 == 1 ==> x >= 1;\nloop invariant i4: x % 4 == 2 ==> x >= 2;\nloop invariant i5: x % 4 == 3 ==> x >= 3;\nloop invariant i6: x >= 0;\n\n\n\n\n\nloop invariant i12: x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant i13: x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant i14: x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant i15: x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\n\nloop invariant i17: x >= 4 ==> x == 4 * (x / 4) + (x % 4);\n\n\n\nloop invariant i21: x >= 4 * (x / 4);\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * n;\nloop invariant (x % 4) == 0;\nloop invariant unknown_int() == 0;\nloop invariant unknown_int() == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4 * (i + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable i. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= UINT_MAX;\nloop invariant x % 4 == 0 ==> (x / 4 >= 0);\nloop invariant x % 4 == 1 ==> (x / 4 >= 1);\nloop invariant x % 4 == 2 ==> (x / 4 >= 2);\nloop invariant x % 4 == 3 ==> (x / 4 >= 3);\nloop invariant x % 4 == 0 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 1 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 2 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 3 ==> (x / 4 <= UINT_MAX);\nloop invariant x % 4 == 0 ==> (x / 4 == 0);\nloop invariant x % 4 == 1 ==> (x / 4 == 1);\nloop invariant x % 4 == 2 ==> (x / 4 == 2);\nloop invariant x % 4 == 3 ==> (x / 4 == 3);\nloop invariant x % 4 == 0 ==> (x == 0);\nloop invariant x % 4 == 1 ==> (x == 1);\nloop invariant x % 4 == 2 ==> (x == 2);\nloop invariant x % 4 == 3 ==> (x == 3);\nloop invariant x % 4 == 0 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 1 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 2 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 3 ==> (x <= UINT_MAX);\nloop invariant x % 4 == 0 ==> (x >= 0);\nloop invariant x % 4 == 1 ==> (x >= 1);\nloop invariant x % 4 == 2 ==> (x >= 2);\nloop invariant x % 4 == 3 ==> (x >= 3);\nloop invariant x % 4 == 0 ==> (x == 0);\nloop invariant x % 4 == 1 ==> (x == 1);\nloop invariant x % 4 == 2 ==> (x == 2);\nloop invariant x % 4 == 3 ==> (x == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\nloop invariant x % 4 == 0 ==> (x % 4 == 0);\nloop invariant x % 4 == 1 ==> (x % 4 == 1);\nloop invariant x % 4 == 2 ==> (x % 4 == 2);\nloop invariant x % 4 == 3 ==> (x % 4 == 3);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= UINT_MAX is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x / 4 >= 0) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x / 4 >= 1) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x / 4 >= 2) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x / 4 >= 3) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x / 4 <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x / 4 <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x / 4 <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x / 4 <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x / 4 == 0) is established but not preserved.\nloop invariant x % 4 == 1 ==> (x / 4 == 1) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x / 4 == 2) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x / 4 == 3) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x == 0) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x == 1) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x == 2) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x == 3) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x <= UINT_MAX) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x >= 0) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x >= 1) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x >= 2) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x >= 3) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> (x % 4 == 0) is partially proven to be inductive.\nloop invariant x % 4 == 1 ==> (x % 4 == 1) is partially proven to be inductive.\nloop invariant x % 4 == 2 ==> (x % 4 == 2) is partially proven to be inductive.\nloop invariant x % 4 == 3 ==> (x % 4 == 3) is partially proven to be inductive.\nAssertion x % 4 == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= UINT_MAX;\nloop invariant i2: x % 4 == 0 ==> (x / 4 >= 0);\n\n\n\nloop invariant i6: x % 4 == 0 ==> (x / 4 <= UINT_MAX);\nloop invariant i7: x % 4 == 1 ==> (x / 4 <= UINT_MAX);\nloop invariant i8: x % 4 == 2 ==> (x / 4 <= UINT_MAX);\nloop invariant i9: x % 4 == 3 ==> (x / 4 <= UINT_MAX);\n\n\n\n\n\n\n\n\nloop invariant i18: x % 4 == 0 ==> (x <= UINT_MAX);\nloop invariant i19: x % 4 == 1 ==> (x <= UINT_MAX);\nloop invariant i20: x % 4 == 2 ==> (x <= UINT_MAX);\nloop invariant i21: x % 4 == 3 ==> (x <= UINT_MAX);\nloop invariant i22: x % 4 == 0 ==> (x >= 0);\nloop invariant i23: x % 4 == 1 ==> (x >= 1);\nloop invariant i24: x % 4 == 2 ==> (x >= 2);\nloop invariant i25: x % 4 == 3 ==> (x >= 3);\nloop invariant i26: x % 4 == 0 ==> (x % 4 == 0);\nloop invariant i27: x % 4 == 1 ==> (x % 4 == 1);\nloop invariant i28: x % 4 == 2 ==> (x % 4 == 2);\nloop invariant i29: x % 4 == 3 ==> (x % 4 == 3);\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 2147483647;\nloop invariant 0 <= unknown_int() <= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 12: unexpected token '==>'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 4 * (i + 1); ==> x % 4 == 0;\nloop invariant i2: 0 <= x <= 2147483647;\nloop invariant i3: 0 <= x <= UINT_MAX;\nloop invariant i4: (x % 4) == 0;\nloop invariant i5: 0 <= x <= 4 * n;\nloop invariant i6: x % 4 == 0;\nloop invariant i7: 0 <= x;\nloop invariant i8: 0 <= x <= 4 * (unknown_int()) + 4;\nloop invariant i9: unknown_int() == 0 ==> x == 0;\nloop invariant i10: 0 <= x <= x + 4; loop invariant x % 4 == 0;\nloop invariant i11: x % 4 == 0 ==> x >= 4;\nloop invariant i12: x % 4 == 1 ==> x >= 1;\nloop invariant i13: x % 4 == 2 ==> x >= 2;\nloop invariant i14: x % 4 == 3 ==> x >= 3;\nloop invariant i15: x >= 0;\nloop invariant i16: x % 4 == 0 ==> x <= INT_MAX - 4;\nloop invariant i17: x % 4 == 1 ==> x <= INT_MAX - 1;\nloop invariant i18: x % 4 == 2 ==> x <= INT_MAX - 2;\nloop invariant i19: x % 4 == 3 ==> x <= INT_MAX - 3;\nloop invariant i20: x <= INT_MAX;\nloop invariant i21: x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant i22: x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant i23: x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant i24: x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant i25: x >= 0 ==> x == 0 || x == 1 || x == 2 || x == 3;\nloop invariant i26: x >= 4 ==> x == 4 * (x / 4) + (x % 4);\nloop invariant i27: x >= 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant i28: x >= 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant i29: x >= 3 ==> x == 3 + (x - 3) / 4 * 4;\nloop invariant i30: x >= 4 * (x / 4);\nloop invariant i31: x <= INT_MAX - 4 * (x / 4);\nloop invariant i32: unknown_int() == 0;\nloop invariant i33: unknown_int() == 1;\nloop invariant i34: 0 <= x <= 4 * (i + 1);\nloop invariant i35: 0 <= y <= 100000;\nloop invariant i36: x >= (1 + (y - 1) * y / 2);\nloop invariant i37: x % 4 == 0 ==> (x / 4 >= 0);\nloop invariant i38: x % 4 == 1 ==> (x / 4 >= 1);\nloop invariant i39: x % 4 == 2 ==> (x / 4 >= 2);\nloop invariant i40: x % 4 == 3 ==> (x / 4 >= 3);\nloop invariant i41: x % 4 == 0 ==> (x / 4 <= UINT_MAX);\nloop invariant i42: x % 4 == 1 ==> (x / 4 <= UINT_MAX);\nloop invariant i43: x % 4 == 2 ==> (x / 4 <= UINT_MAX);\nloop invariant i44: x % 4 == 3 ==> (x / 4 <= UINT_MAX);\nloop invariant i45: x % 4 == 0 ==> (x / 4 == 0);\nloop invariant i46: x % 4 == 1 ==> (x / 4 == 1);\nloop invariant i47: x % 4 == 2 ==> (x / 4 == 2);\nloop invariant i48: x % 4 == 3 ==> (x / 4 == 3);\nloop invariant i49: x % 4 == 0 ==> (x == 0);\nloop invariant i50: x % 4 == 1 ==> (x == 1);\nloop invariant i51: x % 4 == 2 ==> (x == 2);\nloop invariant i52: x % 4 == 3 ==> (x == 3);\nloop invariant i53: x % 4 == 0 ==> (x <= UINT_MAX);\nloop invariant i54: x % 4 == 1 ==> (x <= UINT_MAX);\nloop invariant i55: x % 4 == 2 ==> (x <= UINT_MAX);\nloop invariant i56: x % 4 == 3 ==> (x <= UINT_MAX);\nloop invariant i57: x % 4 == 0 ==> (x >= 0);\nloop invariant i58: x % 4 == 1 ==> (x >= 1);\nloop invariant i59: x % 4 == 2 ==> (x >= 2);\nloop invariant i60: x % 4 == 3 ==> (x >= 3);\nloop invariant i61: x % 4 == 0 ==> (x % 4 == 0);\nloop invariant i62: x % 4 == 1 ==> (x % 4 == 1);\nloop invariant i63: x % 4 == 2 ==> (x % 4 == 2);\nloop invariant i64: x % 4 == 3 ==> (x % 4 == 3);\nloop invariant i65: 1 <= x <= 2147483647;\nloop invariant i66: 0 <= unknown_int() <= 1;\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
            "combined_annotation_num_solver_calls": 26,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main(void) {\n  unsigned int x = 0;\n  /*@\n\n\nloop invariant i3: 0 <= x <= UINT_MAX;\n\n\n\nloop invariant i7: 0 <= x;\n\n\nloop invariant i10: 0 <= x <= x + 4; loop invariant x % 4 == 0;\n\nloop invariant i12: x % 4 == 1 ==> x >= 1;\nloop invariant i13: x % 4 == 2 ==> x >= 2;\nloop invariant i14: x % 4 == 3 ==> x >= 3;\nloop invariant i15: x >= 0;\n\nloop invariant i17: x % 4 == 1 ==> x <= INT_MAX - 1;\nloop invariant i18: x % 4 == 2 ==> x <= INT_MAX - 2;\nloop invariant i19: x % 4 == 3 ==> x <= INT_MAX - 3;\n\nloop invariant i21: x % 4 == 0 ==> x == 4 * (x / 4);\nloop invariant i22: x % 4 == 1 ==> x == 1 + (x - 1) / 4 * 4;\nloop invariant i23: x % 4 == 2 ==> x == 2 + (x - 2) / 4 * 4;\nloop invariant i24: x % 4 == 3 ==> x == 3 + (x - 3) / 4 * 4;\n\nloop invariant i26: x >= 4 ==> x == 4 * (x / 4) + (x % 4);\n\n\n\nloop invariant i30: x >= 4 * (x / 4);\n\n\n\n\n\n\nloop invariant i37: x % 4 == 0 ==> (x / 4 >= 0);\nloop invariant i38: x % 4 == 1 ==> (x / 4 >= 1);\nloop invariant i39: x % 4 == 2 ==> (x / 4 >= 2);\nloop invariant i40: x % 4 == 3 ==> (x / 4 >= 3);\nloop invariant i41: x % 4 == 0 ==> (x / 4 <= UINT_MAX);\nloop invariant i42: x % 4 == 1 ==> (x / 4 <= UINT_MAX);\nloop invariant i43: x % 4 == 2 ==> (x / 4 <= UINT_MAX);\nloop invariant i44: x % 4 == 3 ==> (x / 4 <= UINT_MAX);\n\nloop invariant i46: x % 4 == 1 ==> (x / 4 == 1);\nloop invariant i47: x % 4 == 2 ==> (x / 4 == 2);\nloop invariant i48: x % 4 == 3 ==> (x / 4 == 3);\n\nloop invariant i50: x % 4 == 1 ==> (x == 1);\nloop invariant i51: x % 4 == 2 ==> (x == 2);\nloop invariant i52: x % 4 == 3 ==> (x == 3);\nloop invariant i53: x % 4 == 0 ==> (x <= UINT_MAX);\nloop invariant i54: x % 4 == 1 ==> (x <= UINT_MAX);\nloop invariant i55: x % 4 == 2 ==> (x <= UINT_MAX);\nloop invariant i56: x % 4 == 3 ==> (x <= UINT_MAX);\nloop invariant i57: x % 4 == 0 ==> (x >= 0);\nloop invariant i58: x % 4 == 1 ==> (x >= 1);\nloop invariant i59: x % 4 == 2 ==> (x >= 2);\nloop invariant i60: x % 4 == 3 ==> (x >= 3);\nloop invariant i61: x % 4 == 0 ==> (x % 4 == 0);\nloop invariant i62: x % 4 == 1 ==> (x % 4 == 1);\nloop invariant i63: x % 4 == 2 ==> (x % 4 == 2);\nloop invariant i64: x % 4 == 3 ==> (x % 4 == 3);\n\n\n*/\nwhile (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n\n  return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/28.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x == n);\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - k;\nloop invariant x <= k;\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= (n - 1);\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= n - (n - x + 1);\nloop invariant x <= n - (n - x + 1);\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x + 1 >= n;\nloop invariant x + 1 <= n;\nloop invariant x + 2 >= n;\nloop invariant x + 2 <= n;\nloop invariant x + 3 >= n;\nloop invariant x + 3 <= n;\nloop invariant x + 4 >= n;\nloop invariant x + 4 <= n;\nloop invariant x + 5 >= n;\nloop invariant x + 5 <= n;\nloop invariant x + 6 >= n;\nloop invariant x + 6 <= n;\nloop invariant x + 7 >= n;\nloop invariant x + 7 <= n;\nloop invariant x + 8 >= n;\nloop invariant x + 8 <= n;\nloop invariant x + 9 >= n;\nloop invariant x + 9 <= n;\nloop invariant x + 10 >= n;\nloop invariant x + 10 <= n;\nloop invariant x + 11 >= n;\nloop invariant x + 11 <= n;\nloop invariant x + 12 >= n;\nloop invariant x + 12 <= n;\nloop invariant x + 13 >= n;\nloop invariant x + 13 <= n;\nloop invariant x + 14 >= n;\nloop invariant x + 14 <= n;\nloop invariant x + 15 >= n;\nloop invariant x + 15 <= n;\nloop invariant x + 16 >= n;\nloop invariant x + 16 <= n;\nloop invariant x + 17 >= n;\nloop invariant x + 17 <= n;\nloop invariant x + 18 >= n;\nloop invariant x + 18 <= n;\nloop invariant x + 19 >= n;\nloop invariant x + 19 <= n;\nloop invariant x + 20 >= n;\nloop invariant x + 20 <= n;\nloop invariant x + 21 >= n;\nloop invariant x + 21 <= n;\nloop invariant x + 22 >= n;\nloop invariant x + 22 <= n;\nloop invariant x + 23 >= n;\nloop invariant x + 23 <= n;\nloop invariant x + 24 >= n;\nloop invariant x + 24 <= n;\nloop invariant x + 25 >= n;\nloop invariant x + 25 <= n;\nloop invariant x + 26 >= n;\nloop invariant x + 26 <= n;\nloop invariant x + 27 >= n;\nloop invariant x + 27 <= n;\nloop invariant x + 28 >= n;\nloop invariant x + 28 <= n;\nloop invariant x + 29 >= n;\nloop invariant x + 29 <= n;\nloop invariant x + 30 >= n;\nloop invariant x + 30 <= n;\nloop invariant x + 31 >= n;\nloop invariant x + 31 <= n;\nloop invariant x + 32 >= n;\nloop invariant x + 32 <= n;\nloop invariant x + 33 >= n;\nloop invariant x + 33 <= n;\nloop invariant x + 34 >= n;\nloop invariant x + 34 <= n;\nloop invariant x + 35 >= n;\nloop invariant x + 35 <= n;\nloop invariant x + 36 >= n;\nloop invariant x + 36 <= n;\nloop invariant x + 37 >= n;\nloop invariant x + 37 <= n;\nloop invariant x + 38 >= n;\nloop invariant x + 38 <= n;\nloop invariant x + 39 >= n;\nloop invariant x + 39 <= n;\nloop invariant x + 40 >= n;\nloop invariant x + 40 <= n;\nloop invariant x + 41 >= n;\nloop invariant x + 41 <= n;\nloop invariant x + 42 >= n;\nloop invariant x + 42 <= n;\nloop invariant x + 43 >= n;\nloop invariant x + 43 <= n;\nloop invariant x + 44 >= n;\nloop invariant x + 44 <= n;\nloop invariant x + 45 >= n;\nloop invariant x + 45 <= n;\nloop invariant x + 46 >= n;\nloop invariant x + 46 <= n;\nloop invariant x + 47 >= n;\nloop invariant x + 47 <= n;\nloop invariant x + 48 >= n;\nloop invariant x + 48 <= n;\nloop invariant x + 49 >= n;\nloop invariant x + 49 <= n;\nloop invariant x + 50 >= n;\nloop invariant x + 50 <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= (n - x) * (x + 1) / 2;\nloop invariant x >= (n - x) * (x + 1) / 2 ==> (x != 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant (n >= 0) ==> (x >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant n >= x;\nloop invariant x <= n;\nloop invariant x == n - (n - x);\nloop invariant x == n - (n - x) ==> n >= x;\nloop invariant x == n - (n - x) ==> x <= n;\nloop invariant x == n - (n - x) ==> x == n - (n - x);\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x <= n;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n) ==> (x == n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x == n) ==> (x == n) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: (x == n) ==> (x == n);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - k;\nloop invariant x <= k;\nloop invariant k >= 0;\nloop invariant k <= n;\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable k. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= (n - 1);\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= (n - 1) is established but not preserved.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= n - (n - x + 1);\nloop invariant x <= n - (n - x + 1);\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= n - (n - x + 1) is partially proven to be inductive.\nloop invariant x <= n - (n - x + 1) is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x >= n - (n - x + 1);\n\n\nloop invariant i5: x <= n;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 102,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x + 1 >= n;\nloop invariant x + 1 <= n;\nloop invariant x + 2 >= n;\nloop invariant x + 2 <= n;\nloop invariant x + 3 >= n;\nloop invariant x + 3 <= n;\nloop invariant x + 4 >= n;\nloop invariant x + 4 <= n;\nloop invariant x + 5 >= n;\nloop invariant x + 5 <= n;\nloop invariant x + 6 >= n;\nloop invariant x + 6 <= n;\nloop invariant x + 7 >= n;\nloop invariant x + 7 <= n;\nloop invariant x + 8 >= n;\nloop invariant x + 8 <= n;\nloop invariant x + 9 >= n;\nloop invariant x + 9 <= n;\nloop invariant x + 10 >= n;\nloop invariant x + 10 <= n;\nloop invariant x + 11 >= n;\nloop invariant x + 11 <= n;\nloop invariant x + 12 >= n;\nloop invariant x + 12 <= n;\nloop invariant x + 13 >= n;\nloop invariant x + 13 <= n;\nloop invariant x + 14 >= n;\nloop invariant x + 14 <= n;\nloop invariant x + 15 >= n;\nloop invariant x + 15 <= n;\nloop invariant x + 16 >= n;\nloop invariant x + 16 <= n;\nloop invariant x + 17 >= n;\nloop invariant x + 17 <= n;\nloop invariant x + 18 >= n;\nloop invariant x + 18 <= n;\nloop invariant x + 19 >= n;\nloop invariant x + 19 <= n;\nloop invariant x + 20 >= n;\nloop invariant x + 20 <= n;\nloop invariant x + 21 >= n;\nloop invariant x + 21 <= n;\nloop invariant x + 22 >= n;\nloop invariant x + 22 <= n;\nloop invariant x + 23 >= n;\nloop invariant x + 23 <= n;\nloop invariant x + 24 >= n;\nloop invariant x + 24 <= n;\nloop invariant x + 25 >= n;\nloop invariant x + 25 <= n;\nloop invariant x + 26 >= n;\nloop invariant x + 26 <= n;\nloop invariant x + 27 >= n;\nloop invariant x + 27 <= n;\nloop invariant x + 28 >= n;\nloop invariant x + 28 <= n;\nloop invariant x + 29 >= n;\nloop invariant x + 29 <= n;\nloop invariant x + 30 >= n;\nloop invariant x + 30 <= n;\nloop invariant x + 31 >= n;\nloop invariant x + 31 <= n;\nloop invariant x + 32 >= n;\nloop invariant x + 32 <= n;\nloop invariant x + 33 >= n;\nloop invariant x + 33 <= n;\nloop invariant x + 34 >= n;\nloop invariant x + 34 <= n;\nloop invariant x + 35 >= n;\nloop invariant x + 35 <= n;\nloop invariant x + 36 >= n;\nloop invariant x + 36 <= n;\nloop invariant x + 37 >= n;\nloop invariant x + 37 <= n;\nloop invariant x + 38 >= n;\nloop invariant x + 38 <= n;\nloop invariant x + 39 >= n;\nloop invariant x + 39 <= n;\nloop invariant x + 40 >= n;\nloop invariant x + 40 <= n;\nloop invariant x + 41 >= n;\nloop invariant x + 41 <= n;\nloop invariant x + 42 >= n;\nloop invariant x + 42 <= n;\nloop invariant x + 43 >= n;\nloop invariant x + 43 <= n;\nloop invariant x + 44 >= n;\nloop invariant x + 44 <= n;\nloop invariant x + 45 >= n;\nloop invariant x + 45 <= n;\nloop invariant x + 46 >= n;\nloop invariant x + 46 <= n;\nloop invariant x + 47 >= n;\nloop invariant x + 47 <= n;\nloop invariant x + 48 >= n;\nloop invariant x + 48 <= n;\nloop invariant x + 49 >= n;\nloop invariant x + 49 <= n;\nloop invariant x + 50 >= n;\nloop invariant x + 50 <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x + 1 >= n is partially proven to be inductive.\nloop invariant x + 1 <= n is preserved but not established.\nloop invariant x + 2 >= n is partially proven to be inductive.\nloop invariant x + 2 <= n is partially proven to be inductive.\nloop invariant x + 3 >= n is partially proven to be inductive.\nloop invariant x + 3 <= n is partially proven to be inductive.\nloop invariant x + 4 >= n is partially proven to be inductive.\nloop invariant x + 4 <= n is partially proven to be inductive.\nloop invariant x + 5 >= n is partially proven to be inductive.\nloop invariant x + 5 <= n is partially proven to be inductive.\nloop invariant x + 6 >= n is partially proven to be inductive.\nloop invariant x + 6 <= n is partially proven to be inductive.\nloop invariant x + 7 >= n is partially proven to be inductive.\nloop invariant x + 7 <= n is partially proven to be inductive.\nloop invariant x + 8 >= n is partially proven to be inductive.\nloop invariant x + 8 <= n is partially proven to be inductive.\nloop invariant x + 9 >= n is partially proven to be inductive.\nloop invariant x + 9 <= n is partially proven to be inductive.\nloop invariant x + 10 >= n is partially proven to be inductive.\nloop invariant x + 10 <= n is partially proven to be inductive.\nloop invariant x + 11 >= n is partially proven to be inductive.\nloop invariant x + 11 <= n is partially proven to be inductive.\nloop invariant x + 12 >= n is partially proven to be inductive.\nloop invariant x + 12 <= n is partially proven to be inductive.\nloop invariant x + 13 >= n is partially proven to be inductive.\nloop invariant x + 13 <= n is partially proven to be inductive.\nloop invariant x + 14 >= n is partially proven to be inductive.\nloop invariant x + 14 <= n is partially proven to be inductive.\nloop invariant x + 15 >= n is partially proven to be inductive.\nloop invariant x + 15 <= n is partially proven to be inductive.\nloop invariant x + 16 >= n is partially proven to be inductive.\nloop invariant x + 16 <= n is partially proven to be inductive.\nloop invariant x + 17 >= n is partially proven to be inductive.\nloop invariant x + 17 <= n is partially proven to be inductive.\nloop invariant x + 18 >= n is partially proven to be inductive.\nloop invariant x + 18 <= n is partially proven to be inductive.\nloop invariant x + 19 >= n is partially proven to be inductive.\nloop invariant x + 19 <= n is partially proven to be inductive.\nloop invariant x + 20 >= n is partially proven to be inductive.\nloop invariant x + 20 <= n is partially proven to be inductive.\nloop invariant x + 21 >= n is partially proven to be inductive.\nloop invariant x + 21 <= n is partially proven to be inductive.\nloop invariant x + 22 >= n is partially proven to be inductive.\nloop invariant x + 22 <= n is partially proven to be inductive.\nloop invariant x + 23 >= n is partially proven to be inductive.\nloop invariant x + 23 <= n is partially proven to be inductive.\nloop invariant x + 24 >= n is partially proven to be inductive.\nloop invariant x + 24 <= n is partially proven to be inductive.\nloop invariant x + 25 >= n is partially proven to be inductive.\nloop invariant x + 25 <= n is partially proven to be inductive.\nloop invariant x + 26 >= n is partially proven to be inductive.\nloop invariant x + 26 <= n is partially proven to be inductive.\nloop invariant x + 27 >= n is partially proven to be inductive.\nloop invariant x + 27 <= n is partially proven to be inductive.\nloop invariant x + 28 >= n is partially proven to be inductive.\nloop invariant x + 28 <= n is partially proven to be inductive.\nloop invariant x + 29 >= n is partially proven to be inductive.\nloop invariant x + 29 <= n is partially proven to be inductive.\nloop invariant x + 30 >= n is partially proven to be inductive.\nloop invariant x + 30 <= n is partially proven to be inductive.\nloop invariant x + 31 >= n is partially proven to be inductive.\nloop invariant x + 31 <= n is partially proven to be inductive.\nloop invariant x + 32 >= n is partially proven to be inductive.\nloop invariant x + 32 <= n is partially proven to be inductive.\nloop invariant x + 33 >= n is partially proven to be inductive.\nloop invariant x + 33 <= n is partially proven to be inductive.\nloop invariant x + 34 >= n is partially proven to be inductive.\nloop invariant x + 34 <= n is partially proven to be inductive.\nloop invariant x + 35 >= n is partially proven to be inductive.\nloop invariant x + 35 <= n is partially proven to be inductive.\nloop invariant x + 36 >= n is partially proven to be inductive.\nloop invariant x + 36 <= n is partially proven to be inductive.\nloop invariant x + 37 >= n is partially proven to be inductive.\nloop invariant x + 37 <= n is partially proven to be inductive.\nloop invariant x + 38 >= n is partially proven to be inductive.\nloop invariant x + 38 <= n is partially proven to be inductive.\nloop invariant x + 39 >= n is partially proven to be inductive.\nloop invariant x + 39 <= n is partially proven to be inductive.\nloop invariant x + 40 >= n is partially proven to be inductive.\nloop invariant x + 40 <= n is partially proven to be inductive.\nloop invariant x + 41 >= n is partially proven to be inductive.\nloop invariant x + 41 <= n is partially proven to be inductive.\nloop invariant x + 42 >= n is partially proven to be inductive.\nloop invariant x + 42 <= n is partially proven to be inductive.\nloop invariant x + 43 >= n is partially proven to be inductive.\nloop invariant x + 43 <= n is partially proven to be inductive.\nloop invariant x + 44 >= n is partially proven to be inductive.\nloop invariant x + 44 <= n is partially proven to be inductive.\nloop invariant x + 45 >= n is partially proven to be inductive.\nloop invariant x + 45 <= n is partially proven to be inductive.\nloop invariant x + 46 >= n is partially proven to be inductive.\nloop invariant x + 46 <= n is partially proven to be inductive.\nloop invariant x + 47 >= n is partially proven to be inductive.\nloop invariant x + 47 <= n is partially proven to be inductive.\nloop invariant x + 48 >= n is partially proven to be inductive.\nloop invariant x + 48 <= n is partially proven to be inductive.\nloop invariant x + 49 >= n is partially proven to be inductive.\nloop invariant x + 49 <= n is partially proven to be inductive.\nloop invariant x + 50 >= n is partially proven to be inductive.\nloop invariant x + 50 <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= (n - x) * (x + 1) / 2;\nloop invariant x >= (n - x) * (x + 1) / 2 ==> (x != 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= (n - x) * (x + 1) / 2 is established but not preserved.\nloop invariant x >= (n - x) * (x + 1) / 2 ==> (x != 0) is neither established nor preserved.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n is neither established nor preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant (n >= 0) ==> (x >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant (n >= 0) ==> (x >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x <= n;\nloop invariant i3: (n >= 0) ==> (x >= 0);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant n >= x;\nloop invariant x <= n;\nloop invariant x == n - (n - x);\nloop invariant x == n - (n - x) ==> n >= x;\nloop invariant x == n - (n - x) ==> x <= n;\nloop invariant x == n - (n - x) ==> x == n - (n - x);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant n >= x is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x == n - (n - x) is partially proven to be inductive.\nloop invariant x == n - (n - x) ==> n >= x is partially proven to be inductive.\nloop invariant x == n - (n - x) ==> x <= n is partially proven to be inductive.\nloop invariant x == n - (n - x) ==> x == n - (n - x) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: n >= x;\nloop invariant i3: x <= n;\nloop invariant i4: x == n - (n - x);\nloop invariant i5: x == n - (n - x) ==> n >= x;\nloop invariant i6: x == n - (n - x) ==> x <= n;\nloop invariant i7: x == n - (n - x) ==> x == n - (n - x);\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n - y;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= n;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\nloop invariant x >= 0;\nloop invariant x <= n - y;\nloop invariant x == n - y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\n\nloop invariant i3: x <= n;\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 18: unbound logic variable k. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x <= n;\nloop invariant i3: (x == n) ==> (x == n);\nloop invariant i4: x == n - k;\nloop invariant i5: x <= k;\nloop invariant i6: k >= 0;\nloop invariant i7: k <= n;\nloop invariant i8: n >= 0;\nloop invariant i9: x >= (n - 1);\nloop invariant i10: x >= n - (n - x + 1);\nloop invariant i11: x <= n - (n - x + 1);\nloop invariant i12: x >= 0;\nloop invariant i13: x + 1 >= n;\nloop invariant i14: x + 1 <= n;\nloop invariant i15: x + 2 >= n;\nloop invariant i16: x + 2 <= n;\nloop invariant i17: x + 3 >= n;\nloop invariant i18: x + 3 <= n;\nloop invariant i19: x + 4 >= n;\nloop invariant i20: x + 4 <= n;\nloop invariant i21: x + 5 >= n;\nloop invariant i22: x + 5 <= n;\nloop invariant i23: x + 6 >= n;\nloop invariant i24: x + 6 <= n;\nloop invariant i25: x + 7 >= n;\nloop invariant i26: x + 7 <= n;\nloop invariant i27: x + 8 >= n;\nloop invariant i28: x + 8 <= n;\nloop invariant i29: x + 9 >= n;\nloop invariant i30: x + 9 <= n;\nloop invariant i31: x + 10 >= n;\nloop invariant i32: x + 10 <= n;\nloop invariant i33: x + 11 >= n;\nloop invariant i34: x + 11 <= n;\nloop invariant i35: x + 12 >= n;\nloop invariant i36: x + 12 <= n;\nloop invariant i37: x + 13 >= n;\nloop invariant i38: x + 13 <= n;\nloop invariant i39: x + 14 >= n;\nloop invariant i40: x + 14 <= n;\nloop invariant i41: x + 15 >= n;\nloop invariant i42: x + 15 <= n;\nloop invariant i43: x + 16 >= n;\nloop invariant i44: x + 16 <= n;\nloop invariant i45: x + 17 >= n;\nloop invariant i46: x + 17 <= n;\nloop invariant i47: x + 18 >= n;\nloop invariant i48: x + 18 <= n;\nloop invariant i49: x + 19 >= n;\nloop invariant i50: x + 19 <= n;\nloop invariant i51: x + 20 >= n;\nloop invariant i52: x + 20 <= n;\nloop invariant i53: x + 21 >= n;\nloop invariant i54: x + 21 <= n;\nloop invariant i55: x + 22 >= n;\nloop invariant i56: x + 22 <= n;\nloop invariant i57: x + 23 >= n;\nloop invariant i58: x + 23 <= n;\nloop invariant i59: x + 24 >= n;\nloop invariant i60: x + 24 <= n;\nloop invariant i61: x + 25 >= n;\nloop invariant i62: x + 25 <= n;\nloop invariant i63: x + 26 >= n;\nloop invariant i64: x + 26 <= n;\nloop invariant i65: x + 27 >= n;\nloop invariant i66: x + 27 <= n;\nloop invariant i67: x + 28 >= n;\nloop invariant i68: x + 28 <= n;\nloop invariant i69: x + 29 >= n;\nloop invariant i70: x + 29 <= n;\nloop invariant i71: x + 30 >= n;\nloop invariant i72: x + 30 <= n;\nloop invariant i73: x + 31 >= n;\nloop invariant i74: x + 31 <= n;\nloop invariant i75: x + 32 >= n;\nloop invariant i76: x + 32 <= n;\nloop invariant i77: x + 33 >= n;\nloop invariant i78: x + 33 <= n;\nloop invariant i79: x + 34 >= n;\nloop invariant i80: x + 34 <= n;\nloop invariant i81: x + 35 >= n;\nloop invariant i82: x + 35 <= n;\nloop invariant i83: x + 36 >= n;\nloop invariant i84: x + 36 <= n;\nloop invariant i85: x + 37 >= n;\nloop invariant i86: x + 37 <= n;\nloop invariant i87: x + 38 >= n;\nloop invariant i88: x + 38 <= n;\nloop invariant i89: x + 39 >= n;\nloop invariant i90: x + 39 <= n;\nloop invariant i91: x + 40 >= n;\nloop invariant i92: x + 40 <= n;\nloop invariant i93: x + 41 >= n;\nloop invariant i94: x + 41 <= n;\nloop invariant i95: x + 42 >= n;\nloop invariant i96: x + 42 <= n;\nloop invariant i97: x + 43 >= n;\nloop invariant i98: x + 43 <= n;\nloop invariant i99: x + 44 >= n;\nloop invariant i100: x + 44 <= n;\nloop invariant i101: x + 45 >= n;\nloop invariant i102: x + 45 <= n;\nloop invariant i103: x + 46 >= n;\nloop invariant i104: x + 46 <= n;\nloop invariant i105: x + 47 >= n;\nloop invariant i106: x + 47 <= n;\nloop invariant i107: x + 48 >= n;\nloop invariant i108: x + 48 <= n;\nloop invariant i109: x + 49 >= n;\nloop invariant i110: x + 49 <= n;\nloop invariant i111: x + 50 >= n;\nloop invariant i112: x + 50 <= n;\nloop invariant i113: x >= (n - x) * (x + 1) / 2;\nloop invariant i114: x >= (n - x) * (x + 1) / 2 ==> (x != 0);\nloop invariant i115: 1 <= x <= n;\nloop invariant i116: (n >= 0) ==> (x >= 0);\nloop invariant i117: n >= x;\nloop invariant i118: x == n - (n - x);\nloop invariant i119: x == n - (n - x) ==> n >= x;\nloop invariant i120: x == n - (n - x) ==> x <= n;\nloop invariant i121: x == n - (n - x) ==> x == n - (n - x);\nloop invariant i122: x == n - y;\nloop invariant i123: y >= 0;\nloop invariant i124: y <= n;\nloop invariant i125: x <= n - y;\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 111,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  /*@\n\nloop invariant i2: x <= n;\nloop invariant i3: (x == n) ==> (x == n);\n\n\n\n\n\n\nloop invariant i10: x >= n - (n - x + 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i116: (n >= 0) ==> (x >= 0);\nloop invariant i117: n >= x;\nloop invariant i118: x == n - (n - x);\nloop invariant i119: x == n - (n - x) ==> n >= x;\nloop invariant i120: x == n - (n - x) ==> x <= n;\nloop invariant i121: x == n - (n - x) ==> x == n - (n - x);\n\n\n\n\n*/\nwhile ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/20.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    while(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant x + y = k - m;\nloop invariant m <= j <= n;\nloop invariant (m >= 0) && (m <= n);\nloop invariant (j >= 0) && (j <= n);\nloop invariant (x >= 0) && (y >= 0);\nloop invariant (x + y <= k - 1) ==> (x + y + m <= k - 1);\nloop invariant (x + y >= k + 1) ==> (x + y + m >= k + 1);\nloop invariant ((n >= 1) && (j < n)) ==> ((m <= -1) || (m >= n));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant x + y <= k;\nloop invariant x + y >= k;\nloop invariant n >= 1;\nloop invariant 0 <= m <= n;\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= m <= n;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant x + y = k;\nloop invariant n >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant i >= 0;\nloop invariant i <= n-1;\nloop invariant j <= n-1;\nloop invariant i != j;\nloop invariant (i == j) ==> (x + 1 == y - 1);\nloop invariant (i != j) ==> (x - 1 == y + 1);\nloop invariant (i == j) ==> (m <= j);\nloop invariant (i != j) ==> (m >= j);\n*/\n```",
                "```\n/*@\nloop invariant j <= n;\nloop invariant j >= 0;\nloop invariant x + y == k;\nloop invariant unknown1() ==> m == j;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant (x + y == k);\nloop invariant ((n >= 1) ==> (m >= 0));\nloop invariant (m <= n);\nloop invariant (n >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= j <= n;\nloop invariant -n <= x <= n;\nloop invariant -n <= y <= n;\nloop invariant x == m - j;\nloop invariant y == n - j - m;\nloop invariant k == n - j + m + x + y;\nloop invariant -1 <= m <= n;\nloop invariant (j==i) ==> (x == x + 1 && y == y - 1);\nloop invariant (j!=i) ==> (x == x - 1 && y == y + 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= n-1;\nloop invariant i <= j <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y <= k;\nloop invariant x + y >= k;\nloop invariant n >= 1;\nloop invariant (n >= 1 ==> (m >= 0 && m <= n-1));\nloop invariant (n == 1 ==> m == 0 || m == n-1);\nloop invariant (n == 2 ==> m == 0 || m == 1 || m == 2);\nloop invariant (n >= 3 ==> m != n-1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant j <= n;\nloop invariant x + y <= k;\nloop invariant x + y >= k;\nloop invariant (x + y) == k;\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) == false;\nloop invariant (x + y) >= k + 1;\nloop invariant (x + y) <= k - 1;\nloop invariant j < n;\nloop invariant m >= -1;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant m <= 0;\nloop invariant m >= 1;\nloop invariant m <= 1;\nloop invariant m >= 2;\nloop invariant m <= 2;\nloop invariant m >= 3;\nloop invariant m <= 3;\nloop invariant m >= 4;\nloop invariant m <= 4;\nloop invariant m >= 5;\nloop invariant m <= 5;\nloop invariant m >= 6;\nloop invariant m <= 6;\nloop invariant m >= 7;\nloop invariant m <= 7;\nloop invariant m >= 8;\nloop invariant m <= 8;\nloop invariant m >= 9;\nloop invariant m <= 9;\nloop invariant m >= 10;\nloop invariant m <= 10;\nloop invariant m >= 11;\nloop invariant m <= 11;\nloop invariant m >= 12;\nloop invariant m <= 12;\nloop invariant m >= 13;\nloop invariant m <= 13;\nloop invariant m >= 14;\nloop invariant m <= 14;\nloop invariant m >= 15;\nloop invariant m <= 15;\nloop invariant m >= 16;\nloop invariant m <= 16;\nloop invariant m >= 17;\nloop invariant m <= 17;\nloop invariant m >= 18;\nloop invariant m <= 18;\nloop invariant m >= 19;\nloop invariant m <= 19;\nloop invariant m >= 20;\nloop invariant m <= 20;\nloop invariant m >= 21;\nloop invariant m <= 21;\nloop invariant m >= 22;\nloop invariant m <= 22;\nloop invariant m >= 23;\nloop invariant m <= 23;\nloop invariant m >= 24;\nloop invariant m <= 24;\nloop invariant m >= 25;\nloop invariant m <= 25;\nloop invariant m >= 26;\nloop invariant m <= 26;\nloop invariant m >= 27;\nloop invariant m <= 27;\nloop invariant m >= 28;\nloop invariant m <= 28;\nloop invariant m >= 29;\nloop invariant m <= 29;\nloop invariant m >= 30;\nloop invariant m <= 30;\nloop invariant m >= 31;\nloop invariant m <= 31;\nloop invariant m >= 32;\nloop invariant m <= 32;\nloop invariant m >= 33;\nloop invariant m <= 33;\nloop invariant m >= 34;\nloop invariant m <= 34;\nloop invariant m >= 35;\nloop invariant m <= 35;\nloop invariant m >= 36;\nloop invariant m <= 36;\nloop invariant m >= 37;\nloop invariant m <= 37;\nloop invariant m >= 38;\nloop invariant m <= 38;\nloop invariant m >= 39;\nloop invariant m <= 39;\nloop invariant m >= 40;\nloop invariant m <= 40;\nloop invariant m >= 41;\nloop invariant m <= 41;\nloop invariant m >= 42;\nloop invariant m <= 42;\nloop invariant m >= 43;\nloop invariant m <= 43;\nloop invariant m >= 44;\nloop invariant m <= 44;\nloop invariant m >= 45;\nloop invariant m <= 45;\nloop invariant m >= 46;\nloop invariant m <= 46;\nloop invariant m >= 47;\nloop invariant m <= 47;\nloop invariant m >= 48;\nloop invariant m <= 48;\nloop invariant m >= 49;\nloop invariant m <= 49;\nloop invariant m >= 50;\nloop invariant m <= 50;\nloop invariant m >= 51;\nloop invariant m <= 51;\nloop invariant m >= 52;\nloop invariant m <= 52;\nloop invariant m >= 53;\nloop invariant m <= 53;\nloop invariant m >= 54;\nloop invariant m <= 54;\nloop invariant m >= 55;\nloop invariant m <= 55;\nloop invariant m >= 56;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= n; loop invariant j < n ==> x + y >= k - 1; loop invariant j < n ==> x + y <= k + 1; loop invariant j < n ==> m >= -1; loop invariant j < n ==> m <= n; loop invariant j < n ==> (m == j) ==> x == j; loop invariant j < n ==> (m == j) ==> y == n - j; loop invariant j < n ==> (m != j) ==> x == j - 1; loop invariant j < n ==> (m != j) ==> y == n - j; loop invariant j == n ==> x == j; loop invariant j == n ==> y == n; loop invariant j == n ==> m == j;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant x + y = k - j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x >= k - n;\nloop invariant y >= k - n;\nloop invariant (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1;\nloop invariant (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1;\nloop invariant (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1 ==> j <= k - 1;\nloop invariant (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1 ==> j >= k + 1;\nloop invariant (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1 ==> j <= k - 1 ==> m <= -1;\nloop invariant (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1 ==> j >= k + 1 ==> m >= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant i <= n;\nloop invariant j <= i;\nloop invariant j <= n;\nloop invariant m == -1 || m == n;\nloop invariant m >= 0 && m <= n;\nloop invariant x + y <= k + 1;\nloop invariant x + y >= k - 1;\nloop invariant n >= 1;\nloop invariant x + y <= k + 1;\nloop invariant x + y >= k - 1;\nloop invariant n >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant 0 <= x <= 2n;\nloop invariant x + y >= k;\nloop invariant x + y <= k + 2;\nloop invariant j >= 0;\nloop invariant j <= n;\nloop invariant m >= -1;\nloop invariant m <= n;\nloop invariant j == i ==> x == i + 1;\nloop invariant j != i ==> x == n - j;\nloop invariant j == i ==> y == n - i;\nloop invariant j != i ==> y == j - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= j <= n; loop invariant 0 <= x; loop invariant 0 <= y; loop invariant x + y <= k; loop invariant (n >= 1) ==> (m > -1); loop invariant (n >= 1) ==> (m <= n); loop invariant (n >= 1) ==> (m == j); loop invariant (n >= 1) ==> (j == n); loop invariant (j == n) ==> (x + y <= k - 1); loop invariant (j == n) ==> (x + y >= k + 1); loop invariant (j < n) ==> (x + y != k - 1 && x + y != k + 1); loop invariant (j < n) ==> (m <= -1 || m >= n); loop invariant (j < n) ==> (m == -1 || m == n); loop invariant (j < n) ==> (j != n); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (m != i); loop invariant (j < n) ==> (m != -1); loop invariant (j < n) ==> (m != n); loop invariant (j < n) ==> (j != m); loop invariant (j < n) ==> (i != m); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant m <= j;\nloop invariant j <= n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant x + y = k - m;\nloop invariant m <= j <= n;\nloop invariant (m >= 0) && (m <= n);\nloop invariant (j >= 0) && (j <= n);\nloop invariant (x >= 0) && (y >= 0);\nloop invariant (x + y <= k - 1) ==> (x + y + m <= k - 1);\nloop invariant (x + y >= k + 1) ==> (x + y + m >= k + 1);\nloop invariant ((n >= 1) && (j < n)) ==> ((m <= -1) || (m >= n));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant x + y <= k;\nloop invariant x + y >= k;\nloop invariant n >= 1;\nloop invariant 0 <= m <= n;\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant (m <= -1) ==> (m == n);\nloop invariant (m >= n) ==> (m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= n is preserved but not established.\nloop invariant x + y <= k is partially proven to be inductive.\nloop invariant x + y >= k is partially proven to be inductive.\nloop invariant n >= 1 is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0) is partially proven to be inductive.\nloop invariant (m <= -1 || m >= n) ==> (m == n || m == 0) is partially proven to be inductive.\nloop invariant (m <= -1) ==> (m == n) is partially proven to be inductive.\nloop invariant (m >= n) ==> (m == 0) is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\nloop invariant i2: x + y <= k;\nloop invariant i3: x + y >= k;\n\n\n\n\n\nloop invariant i9: (m >= n) ==> (m == 0);\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant 0 <= x <= k;\nloop invariant 0 <= y <= k;\nloop invariant 0 <= m <= n;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\nloop invariant (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant j <= n - 1;\nloop invariant j >= 0;\nloop invariant k - 1 <= x + y <= k + 1;\nloop invariant (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant (n < 1) ==> (m == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 31: unexpected token '' + 1 && y == y''",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\nloop invariant i1: 0 <= j <= n;\nloop invariant i2: 0 <= x <= k;\nloop invariant i3: 0 <= y <= k;\nloop invariant i4: 0 <= m <= n;\nloop invariant i5: k - 1 <= x + y <= k + 1;\nloop invariant i6: (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant i7: (n < 1) ==> (m == 0);\nloop invariant i8: (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant i9: (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant i10: x >= 0;\nloop invariant i11: y >= 0;\nloop invariant i12: m >= 0;\nloop invariant i13: m <= n;\nloop invariant i14: j <= n - 1;\nloop invariant i15: j >= 0;\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant x + y = k;\nloop invariant n >= 0;\nloop invariant m >= 0;\nloop invariant m <= n;\nloop invariant i >= 0;\nloop invariant i <= n-1;\nloop invariant j <= n-1;\nloop invariant i != j;\nloop invariant (i == j) ==> (x + 1 == y - 1);\nloop invariant (i != j) ==> (x - 1 == y + 1);\nloop invariant (i == j) ==> (m <= j);\nloop invariant (i != j) ==> (m >= j);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant j <= n;\nloop invariant j >= 0;\nloop invariant x + y == k;\nloop invariant unknown1() ==> m == j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 27: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\nloop invariant i2: j >= 0;\nloop invariant i3: x + y == k;\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant (x + y == k);\nloop invariant ((n >= 1) ==> (m >= 0));\nloop invariant (m <= n);\nloop invariant (n >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= n is preserved but not established.\nloop invariant (x + y == k) is partially proven to be inductive.\nloop invariant ((n >= 1) ==> (m >= 0)) is partially proven to be inductive.\nloop invariant (m <= n) is partially proven to be inductive.\nloop invariant (n >= 0) is partially proven to be inductive.\nAssertion \\false: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\nloop invariant i2: (x + y == k);\n\n\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= j <= n;\nloop invariant -n <= x <= n;\nloop invariant -n <= y <= n;\nloop invariant x == m - j;\nloop invariant y == n - j - m;\nloop invariant k == n - j + m + x + y;\nloop invariant -1 <= m <= n;\nloop invariant (j==i) ==> (x == x + 1 && y == y - 1);\nloop invariant (j!=i) ==> (x == x - 1 && y == y + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= j <= n is preserved but not established.\nloop invariant -n <= x <= n is partially proven to be inductive.\nloop invariant -n <= y <= n is partially proven to be inductive.\nloop invariant x == m - j is partially proven to be inductive.\nloop invariant y == n - j - m is partially proven to be inductive.\nloop invariant k == n - j + m + x + y is partially proven to be inductive.\nloop invariant -1 <= m <= n is partially proven to be inductive.\nloop invariant (j==i) ==> (x == x + 1 && y == y - 1) is partially proven to be inductive.\nloop invariant (j!=i) ==> (x == x - 1 && y == y + 1) is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= n-1;\nloop invariant i <= j <= n;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x + y <= k;\nloop invariant x + y >= k;\nloop invariant n >= 1;\nloop invariant (n >= 1 ==> (m >= 0 && m <= n-1));\nloop invariant (n == 1 ==> m == 0 || m == n-1);\nloop invariant (n == 2 ==> m == 0 || m == 1 || m == 2);\nloop invariant (n >= 3 ==> m != n-1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= n-1 is neither established nor preserved.\nloop invariant i <= j <= n is preserved but not established.\nloop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is neither established nor preserved.\nloop invariant x + y <= k is partially proven to be inductive.\nloop invariant x + y >= k is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant (n >= 1 ==> (m >= 0 && m <= n-1)) is partially proven to be inductive.\nloop invariant (n == 1 ==> m == 0 || m == n-1) is partially proven to be inductive.\nloop invariant (n == 2 ==> m == 0 || m == 1 || m == 2) is partially proven to be inductive.\nloop invariant (n >= 3 ==> m != n-1) is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\n\n\n\nloop invariant i5: x + y <= k;\nloop invariant i6: x + y >= k;\n\n\n\n\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 117,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant j <= n;\nloop invariant x + y <= k;\nloop invariant x + y >= k;\nloop invariant (x + y) == k;\nloop invariant (n >= 1 && ((m <= -1) || (m >= n))) == false;\nloop invariant (x + y) >= k + 1;\nloop invariant (x + y) <= k - 1;\nloop invariant j < n;\nloop invariant m >= -1;\nloop invariant m <= n;\nloop invariant m >= 0;\nloop invariant m <= 0;\nloop invariant m >= 1;\nloop invariant m <= 1;\nloop invariant m >= 2;\nloop invariant m <= 2;\nloop invariant m >= 3;\nloop invariant m <= 3;\nloop invariant m >= 4;\nloop invariant m <= 4;\nloop invariant m >= 5;\nloop invariant m <= 5;\nloop invariant m >= 6;\nloop invariant m <= 6;\nloop invariant m >= 7;\nloop invariant m <= 7;\nloop invariant m >= 8;\nloop invariant m <= 8;\nloop invariant m >= 9;\nloop invariant m <= 9;\nloop invariant m >= 10;\nloop invariant m <= 10;\nloop invariant m >= 11;\nloop invariant m <= 11;\nloop invariant m >= 12;\nloop invariant m <= 12;\nloop invariant m >= 13;\nloop invariant m <= 13;\nloop invariant m >= 14;\nloop invariant m <= 14;\nloop invariant m >= 15;\nloop invariant m <= 15;\nloop invariant m >= 16;\nloop invariant m <= 16;\nloop invariant m >= 17;\nloop invariant m <= 17;\nloop invariant m >= 18;\nloop invariant m <= 18;\nloop invariant m >= 19;\nloop invariant m <= 19;\nloop invariant m >= 20;\nloop invariant m <= 20;\nloop invariant m >= 21;\nloop invariant m <= 21;\nloop invariant m >= 22;\nloop invariant m <= 22;\nloop invariant m >= 23;\nloop invariant m <= 23;\nloop invariant m >= 24;\nloop invariant m <= 24;\nloop invariant m >= 25;\nloop invariant m <= 25;\nloop invariant m >= 26;\nloop invariant m <= 26;\nloop invariant m >= 27;\nloop invariant m <= 27;\nloop invariant m >= 28;\nloop invariant m <= 28;\nloop invariant m >= 29;\nloop invariant m <= 29;\nloop invariant m >= 30;\nloop invariant m <= 30;\nloop invariant m >= 31;\nloop invariant m <= 31;\nloop invariant m >= 32;\nloop invariant m <= 32;\nloop invariant m >= 33;\nloop invariant m <= 33;\nloop invariant m >= 34;\nloop invariant m <= 34;\nloop invariant m >= 35;\nloop invariant m <= 35;\nloop invariant m >= 36;\nloop invariant m <= 36;\nloop invariant m >= 37;\nloop invariant m <= 37;\nloop invariant m >= 38;\nloop invariant m <= 38;\nloop invariant m >= 39;\nloop invariant m <= 39;\nloop invariant m >= 40;\nloop invariant m <= 40;\nloop invariant m >= 41;\nloop invariant m <= 41;\nloop invariant m >= 42;\nloop invariant m <= 42;\nloop invariant m >= 43;\nloop invariant m <= 43;\nloop invariant m >= 44;\nloop invariant m <= 44;\nloop invariant m >= 45;\nloop invariant m <= 45;\nloop invariant m >= 46;\nloop invariant m <= 46;\nloop invariant m >= 47;\nloop invariant m <= 47;\nloop invariant m >= 48;\nloop invariant m <= 48;\nloop invariant m >= 49;\nloop invariant m <= 49;\nloop invariant m >= 50;\nloop invariant m <= 50;\nloop invariant m >= 51;\nloop invariant m <= 51;\nloop invariant m >= 52;\nloop invariant m <= 52;\nloop invariant m >= 53;\nloop invariant m <= 53;\nloop invariant m >= 54;\nloop invariant m <= 54;\nloop invariant m >= 55;\nloop invariant m <= 55;\nloop invariant m >= 56;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 29: unbound logic variable false. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\n\nloop invariant i3: x + y <= k;\nloop invariant i4: x + y >= k;\nloop invariant i5: (x + y) == k;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= n; loop invariant j < n ==> x + y >= k - 1; loop invariant j < n ==> x + y <= k + 1; loop invariant j < n ==> m >= -1; loop invariant j < n ==> m <= n; loop invariant j < n ==> (m == j) ==> x == j; loop invariant j < n ==> (m == j) ==> y == n - j; loop invariant j < n ==> (m != j) ==> x == j - 1; loop invariant j < n ==> (m != j) ==> y == n - j; loop invariant j == n ==> x == j; loop invariant j == n ==> y == n; loop invariant j == n ==> m == j;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= n; loop invariant j < n ==> x + y >= k - 1; loop invariant j < n ==> x + y <= k + 1; loop invariant j < n ==> m >= -1; loop invariant j < n ==> m <= n; loop invariant j < n ==> (m == j) ==> x == j; loop invariant j < n ==> (m == j) ==> y == n - j; loop invariant j < n ==> (m != j) ==> x == j - 1; loop invariant j < n ==> (m != j) ==> y == n - j; loop invariant j == n ==> x == j; loop invariant j == n ==> y == n; loop invariant j == n ==> m == j is preserved but not established.\nAssertion \\false: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant m >= 0;\nloop invariant m < n;\nloop invariant x + y = k - j;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= k;\nloop invariant y <= k;\nloop invariant x >= k - n;\nloop invariant y >= k - n;\nloop invariant (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1;\nloop invariant (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1;\nloop invariant (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1 ==> j <= k - 1;\nloop invariant (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1 ==> j >= k + 1;\nloop invariant (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1 ==> j <= k - 1 ==> m <= -1;\nloop invariant (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1 ==> j >= k + 1 ==> m >= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 27: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= n;\nloop invariant i <= n;\nloop invariant j <= i;\nloop invariant j <= n;\nloop invariant m == -1 || m == n;\nloop invariant m >= 0 && m <= n;\nloop invariant x + y <= k + 1;\nloop invariant x + y >= k - 1;\nloop invariant n >= 1;\nloop invariant x + y <= k + 1;\nloop invariant x + y >= k - 1;\nloop invariant n >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= n is preserved but not established.\nloop invariant i <= n is preserved but not established.\nloop invariant j <= i is preserved but not established.\nloop invariant j <= n is partially proven to be inductive.\nloop invariant m == -1 || m == n is preserved but not established.\nloop invariant m >= 0 && m <= n is partially proven to be inductive.\nloop invariant x + y <= k + 1 is partially proven to be inductive.\nloop invariant x + y >= k - 1 is partially proven to be inductive.\nloop invariant n >= 1 is preserved but not established.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\n\n\n\n\n\nloop invariant i7: x + y <= k + 1;\nloop invariant i8: x + y >= k - 1;\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= n;\nloop invariant 0 <= x <= 2n;\nloop invariant x + y >= k;\nloop invariant x + y <= k + 2;\nloop invariant j >= 0;\nloop invariant j <= n;\nloop invariant m >= -1;\nloop invariant m <= n;\nloop invariant j == i ==> x == i + 1;\nloop invariant j != i ==> x == n - j;\nloop invariant j == i ==> y == n - i;\nloop invariant j != i ==> y == j - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 25: unexpected token 'n'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\n\nloop invariant i3: x + y >= k;\nloop invariant i4: x + y <= k + 2;\nloop invariant i5: j >= 0;\n\nloop invariant i7: m >= -1;\n\n\n\n\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= j <= n; loop invariant 0 <= x; loop invariant 0 <= y; loop invariant x + y <= k; loop invariant (n >= 1) ==> (m > -1); loop invariant (n >= 1) ==> (m <= n); loop invariant (n >= 1) ==> (m == j); loop invariant (n >= 1) ==> (j == n); loop invariant (j == n) ==> (x + y <= k - 1); loop invariant (j == n) ==> (x + y >= k + 1); loop invariant (j < n) ==> (x + y != k - 1 && x + y != k + 1); loop invariant (j < n) ==> (m <= -1 || m >= n); loop invariant (j < n) ==> (m == -1 || m == n); loop invariant (j < n) ==> (j != n); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (m != i); loop invariant (j < n) ==> (m != -1); loop invariant (j < n) ==> (m != n); loop invariant (j < n) ==> (j != m); loop invariant (j < n) ==> (i != m); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= j <= n; loop invariant 0 <= x; loop invariant 0 <= y; loop invariant x + y <= k; loop invariant (n >= 1) ==> (m > -1); loop invariant (n >= 1) ==> (m <= n); loop invariant (n >= 1) ==> (m == j); loop invariant (n >= 1) ==> (j == n); loop invariant (j == n) ==> (x + y <= k - 1); loop invariant (j == n) ==> (x + y >= k + 1); loop invariant (j < n) ==> (x + y != k - 1 && x + y != k + 1); loop invariant (j < n) ==> (m <= -1 || m >= n); loop invariant (j < n) ==> (m == -1 || m == n); loop invariant (j < n) ==> (j != n); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (m != i); loop invariant (j < n) ==> (m != -1); loop invariant (j < n) ==> (m != n); loop invariant (j < n) ==> (j != m); loop invariant (j < n) ==> (i != m); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i) is preserved but not established.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= y;\nloop invariant m <= j;\nloop invariant j <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= y is neither established nor preserved.\nloop invariant m <= j is partially proven to be inductive.\nloop invariant j <= n is preserved but not established.\nAssertion \\false: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\n\nloop invariant i2: m <= j;\n\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 25: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\nloop invariant i1: 0 <= j <= n;\nloop invariant i2: x + y = k - m;\nloop invariant i3: m <= j <= n;\nloop invariant i4: (m >= 0) && (m <= n);\nloop invariant i5: (j >= 0) && (j <= n);\nloop invariant i6: (x >= 0) && (y >= 0);\nloop invariant i7: (x + y <= k - 1) ==> (x + y + m <= k - 1);\nloop invariant i8: (x + y >= k + 1) ==> (x + y + m >= k + 1);\nloop invariant i9: ((n >= 1) && (j < n)) ==> ((m <= -1) || (m >= n));\nloop invariant i10: x + y <= k;\nloop invariant i11: x + y >= k;\nloop invariant i12: n >= 1;\nloop invariant i13: 0 <= m <= n;\nloop invariant i14: (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant i15: (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant i16: (m <= -1) ==> (m == n);\nloop invariant i17: (m >= n) ==> (m == 0);\nloop invariant i18: 0 <= x <= k;\nloop invariant i19: 0 <= y <= k;\nloop invariant i20: k - 1 <= x + y <= k + 1;\nloop invariant i21: (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant i22: (n < 1) ==> (m == 0);\nloop invariant i23: (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant i24: (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant i25: x >= 0;\nloop invariant i26: y >= 0;\nloop invariant i27: m >= 0;\nloop invariant i28: m <= n;\nloop invariant i29: j <= n - 1;\nloop invariant i30: j >= 0;\nloop invariant i31: x + y = k;\nloop invariant i32: n >= 0;\nloop invariant i33: i >= 0;\nloop invariant i34: i <= n-1;\nloop invariant i35: j <= n-1;\nloop invariant i36: i != j;\nloop invariant i37: (i == j) ==> (x + 1 == y - 1);\nloop invariant i38: (i != j) ==> (x - 1 == y + 1);\nloop invariant i39: (i == j) ==> (m <= j);\nloop invariant i40: (i != j) ==> (m >= j);\nloop invariant i41: j <= n;\nloop invariant i42: x + y == k;\nloop invariant i43: unknown1() ==> m == j;\nloop invariant i44: (x + y == k);\nloop invariant i45: ((n >= 1) ==> (m >= 0));\nloop invariant i46: (m <= n);\nloop invariant i47: (n >= 0);\nloop invariant i48: 1 <= j <= n;\nloop invariant i49: -n <= x <= n;\nloop invariant i50: -n <= y <= n;\nloop invariant i51: x == m - j;\nloop invariant i52: y == n - j - m;\nloop invariant i53: k == n - j + m + x + y;\nloop invariant i54: -1 <= m <= n;\nloop invariant i55: (j==i) ==> (x == x + 1 && y == y - 1);\nloop invariant i56: (j!=i) ==> (x == x - 1 && y == y + 1);\nloop invariant i57: 0 <= j <= n-1;\nloop invariant i58: i <= j <= n;\nloop invariant i59: (n >= 1 ==> (m >= 0 && m <= n-1));\nloop invariant i60: (n == 1 ==> m == 0 || m == n-1);\nloop invariant i61: (n == 2 ==> m == 0 || m == 1 || m == 2);\nloop invariant i62: (n >= 3 ==> m != n-1);\nloop invariant i63: (x + y) == k;\nloop invariant i64: (n >= 1 && ((m <= -1) || (m >= n))) == false;\nloop invariant i65: (x + y) >= k + 1;\nloop invariant i66: (x + y) <= k - 1;\nloop invariant i67: j < n;\nloop invariant i68: m >= -1;\nloop invariant i69: m <= 0;\nloop invariant i70: m >= 1;\nloop invariant i71: m <= 1;\nloop invariant i72: m >= 2;\nloop invariant i73: m <= 2;\nloop invariant i74: m >= 3;\nloop invariant i75: m <= 3;\nloop invariant i76: m >= 4;\nloop invariant i77: m <= 4;\nloop invariant i78: m >= 5;\nloop invariant i79: m <= 5;\nloop invariant i80: m >= 6;\nloop invariant i81: m <= 6;\nloop invariant i82: m >= 7;\nloop invariant i83: m <= 7;\nloop invariant i84: m >= 8;\nloop invariant i85: m <= 8;\nloop invariant i86: m >= 9;\nloop invariant i87: m <= 9;\nloop invariant i88: m >= 10;\nloop invariant i89: m <= 10;\nloop invariant i90: m >= 11;\nloop invariant i91: m <= 11;\nloop invariant i92: m >= 12;\nloop invariant i93: m <= 12;\nloop invariant i94: m >= 13;\nloop invariant i95: m <= 13;\nloop invariant i96: m >= 14;\nloop invariant i97: m <= 14;\nloop invariant i98: m >= 15;\nloop invariant i99: m <= 15;\nloop invariant i100: m >= 16;\nloop invariant i101: m <= 16;\nloop invariant i102: m >= 17;\nloop invariant i103: m <= 17;\nloop invariant i104: m >= 18;\nloop invariant i105: m <= 18;\nloop invariant i106: m >= 19;\nloop invariant i107: m <= 19;\nloop invariant i108: m >= 20;\nloop invariant i109: m <= 20;\nloop invariant i110: m >= 21;\nloop invariant i111: m <= 21;\nloop invariant i112: m >= 22;\nloop invariant i113: m <= 22;\nloop invariant i114: m >= 23;\nloop invariant i115: m <= 23;\nloop invariant i116: m >= 24;\nloop invariant i117: m <= 24;\nloop invariant i118: m >= 25;\nloop invariant i119: m <= 25;\nloop invariant i120: m >= 26;\nloop invariant i121: m <= 26;\nloop invariant i122: m >= 27;\nloop invariant i123: m <= 27;\nloop invariant i124: m >= 28;\nloop invariant i125: m <= 28;\nloop invariant i126: m >= 29;\nloop invariant i127: m <= 29;\nloop invariant i128: m >= 30;\nloop invariant i129: m <= 30;\nloop invariant i130: m >= 31;\nloop invariant i131: m <= 31;\nloop invariant i132: m >= 32;\nloop invariant i133: m <= 32;\nloop invariant i134: m >= 33;\nloop invariant i135: m <= 33;\nloop invariant i136: m >= 34;\nloop invariant i137: m <= 34;\nloop invariant i138: m >= 35;\nloop invariant i139: m <= 35;\nloop invariant i140: m >= 36;\nloop invariant i141: m <= 36;\nloop invariant i142: m >= 37;\nloop invariant i143: m <= 37;\nloop invariant i144: m >= 38;\nloop invariant i145: m <= 38;\nloop invariant i146: m >= 39;\nloop invariant i147: m <= 39;\nloop invariant i148: m >= 40;\nloop invariant i149: m <= 40;\nloop invariant i150: m >= 41;\nloop invariant i151: m <= 41;\nloop invariant i152: m >= 42;\nloop invariant i153: m <= 42;\nloop invariant i154: m >= 43;\nloop invariant i155: m <= 43;\nloop invariant i156: m >= 44;\nloop invariant i157: m <= 44;\nloop invariant i158: m >= 45;\nloop invariant i159: m <= 45;\nloop invariant i160: m >= 46;\nloop invariant i161: m <= 46;\nloop invariant i162: m >= 47;\nloop invariant i163: m <= 47;\nloop invariant i164: m >= 48;\nloop invariant i165: m <= 48;\nloop invariant i166: m >= 49;\nloop invariant i167: m <= 49;\nloop invariant i168: m >= 50;\nloop invariant i169: m <= 50;\nloop invariant i170: m >= 51;\nloop invariant i171: m <= 51;\nloop invariant i172: m >= 52;\nloop invariant i173: m <= 52;\nloop invariant i174: m >= 53;\nloop invariant i175: m <= 53;\nloop invariant i176: m >= 54;\nloop invariant i177: m <= 54;\nloop invariant i178: m >= 55;\nloop invariant i179: m <= 55;\nloop invariant i180: m >= 56;\nloop invariant i181: 0 <= j <= n; loop invariant j < n ==> x + y >= k - 1; loop invariant j < n ==> x + y <= k + 1; loop invariant j < n ==> m >= -1; loop invariant j < n ==> m <= n; loop invariant j < n ==> (m == j) ==> x == j; loop invariant j < n ==> (m == j) ==> y == n - j; loop invariant j < n ==> (m != j) ==> x == j - 1; loop invariant j < n ==> (m != j) ==> y == n - j; loop invariant j == n ==> x == j; loop invariant j == n ==> y == n; loop invariant j == n ==> m == j;\nloop invariant i182: m < n;\nloop invariant i183: x + y = k - j;\nloop invariant i184: x <= k;\nloop invariant i185: y <= k;\nloop invariant i186: x >= k - n;\nloop invariant i187: y >= k - n;\nloop invariant i188: (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1;\nloop invariant i189: (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1;\nloop invariant i190: (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1 ==> j <= k - 1;\nloop invariant i191: (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1 ==> j >= k + 1;\nloop invariant i192: (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1 ==> j <= k - 1 ==> m <= -1;\nloop invariant i193: (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1 ==> j >= k + 1 ==> m >= n;\nloop invariant i194: i <= n;\nloop invariant i195: j <= i;\nloop invariant i196: m == -1 || m == n;\nloop invariant i197: m >= 0 && m <= n;\nloop invariant i198: x + y <= k + 1;\nloop invariant i199: x + y >= k - 1;\nloop invariant i200: 0 <= y <= n;\nloop invariant i201: 0 <= x <= 2n;\nloop invariant i202: x + y <= k + 2;\nloop invariant i203: j == i ==> x == i + 1;\nloop invariant i204: j != i ==> x == n - j;\nloop invariant i205: j == i ==> y == n - i;\nloop invariant i206: j != i ==> y == j - 1;\nloop invariant i207: 0 <= j <= n; loop invariant 0 <= x; loop invariant 0 <= y; loop invariant x + y <= k; loop invariant (n >= 1) ==> (m > -1); loop invariant (n >= 1) ==> (m <= n); loop invariant (n >= 1) ==> (m == j); loop invariant (n >= 1) ==> (j == n); loop invariant (j == n) ==> (x + y <= k - 1); loop invariant (j == n) ==> (x + y >= k + 1); loop invariant (j < n) ==> (x + y != k - 1 && x + y != k + 1); loop invariant (j < n) ==> (m <= -1 || m >= n); loop invariant (j < n) ==> (m == -1 || m == n); loop invariant (j < n) ==> (j != n); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (m != i); loop invariant (j < n) ==> (m != -1); loop invariant (j < n) ==> (m != n); loop invariant (j < n) ==> (j != m); loop invariant (j < n) ==> (i != m); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i);\nloop invariant i208: 1 <= x <= y;\nloop invariant i209: m <= j;\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
            "combined_annotation_num_solver_calls": 2,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      \nreturn;\n\n    j = 0;\n    /*@\nloop invariant i1: 0 <= j <= n;\n\nloop invariant i3: m <= j <= n;\nloop invariant i4: (m >= 0) && (m <= n);\nloop invariant i5: (j >= 0) && (j <= n);\nloop invariant i6: (x >= 0) && (y >= 0);\nloop invariant i7: (x + y <= k - 1) ==> (x + y + m <= k - 1);\nloop invariant i8: (x + y >= k + 1) ==> (x + y + m >= k + 1);\nloop invariant i9: ((n >= 1) && (j < n)) ==> ((m <= -1) || (m >= n));\nloop invariant i10: x + y <= k;\nloop invariant i11: x + y >= k;\nloop invariant i12: n >= 1;\nloop invariant i13: 0 <= m <= n;\nloop invariant i14: (n >= 1 && ((m <= -1) || (m >= n))) ==> (m == n || m == 0);\nloop invariant i15: (m <= -1 || m >= n) ==> (m == n || m == 0);\nloop invariant i16: (m <= -1) ==> (m == n);\nloop invariant i17: (m >= n) ==> (m == 0);\nloop invariant i18: 0 <= x <= k;\nloop invariant i19: 0 <= y <= k;\nloop invariant i20: k - 1 <= x + y <= k + 1;\nloop invariant i21: (n >= 1 && (m <= -1 || m >= n)) ==> (m == 0);\nloop invariant i22: (n < 1) ==> (m == 0);\nloop invariant i23: (j == i) ==> (x == x' + 1 && y == y' - 1);\nloop invariant i24: (j != i) ==> (x == x' - 1 && y == y' + 1);\nloop invariant i25: x >= 0;\nloop invariant i26: y >= 0;\nloop invariant i27: m >= 0;\nloop invariant i28: m <= n;\nloop invariant i29: j <= n - 1;\nloop invariant i30: j >= 0;\nloop invariant i31: x + y = k;\nloop invariant i32: n >= 0;\nloop invariant i33: i >= 0;\nloop invariant i34: i <= n-1;\nloop invariant i35: j <= n-1;\nloop invariant i36: i != j;\nloop invariant i37: (i == j) ==> (x + 1 == y - 1);\nloop invariant i38: (i != j) ==> (x - 1 == y + 1);\nloop invariant i39: (i == j) ==> (m <= j);\nloop invariant i40: (i != j) ==> (m >= j);\nloop invariant i41: j <= n;\nloop invariant i42: x + y == k;\nloop invariant i43: unknown1() ==> m == j;\nloop invariant i44: (x + y == k);\nloop invariant i45: ((n >= 1) ==> (m >= 0));\nloop invariant i46: (m <= n);\nloop invariant i47: (n >= 0);\nloop invariant i48: 1 <= j <= n;\nloop invariant i49: -n <= x <= n;\nloop invariant i50: -n <= y <= n;\nloop invariant i51: x == m - j;\nloop invariant i52: y == n - j - m;\nloop invariant i53: k == n - j + m + x + y;\nloop invariant i54: -1 <= m <= n;\nloop invariant i55: (j==i) ==> (x == x + 1 && y == y - 1);\nloop invariant i56: (j!=i) ==> (x == x - 1 && y == y + 1);\nloop invariant i57: 0 <= j <= n-1;\nloop invariant i58: i <= j <= n;\nloop invariant i59: (n >= 1 ==> (m >= 0 && m <= n-1));\nloop invariant i60: (n == 1 ==> m == 0 || m == n-1);\nloop invariant i61: (n == 2 ==> m == 0 || m == 1 || m == 2);\nloop invariant i62: (n >= 3 ==> m != n-1);\nloop invariant i63: (x + y) == k;\nloop invariant i64: (n >= 1 && ((m <= -1) || (m >= n))) == false;\nloop invariant i65: (x + y) >= k + 1;\nloop invariant i66: (x + y) <= k - 1;\nloop invariant i67: j < n;\nloop invariant i68: m >= -1;\nloop invariant i69: m <= 0;\nloop invariant i70: m >= 1;\nloop invariant i71: m <= 1;\nloop invariant i72: m >= 2;\nloop invariant i73: m <= 2;\nloop invariant i74: m >= 3;\nloop invariant i75: m <= 3;\nloop invariant i76: m >= 4;\nloop invariant i77: m <= 4;\nloop invariant i78: m >= 5;\nloop invariant i79: m <= 5;\nloop invariant i80: m >= 6;\nloop invariant i81: m <= 6;\nloop invariant i82: m >= 7;\nloop invariant i83: m <= 7;\nloop invariant i84: m >= 8;\nloop invariant i85: m <= 8;\nloop invariant i86: m >= 9;\nloop invariant i87: m <= 9;\nloop invariant i88: m >= 10;\nloop invariant i89: m <= 10;\nloop invariant i90: m >= 11;\nloop invariant i91: m <= 11;\nloop invariant i92: m >= 12;\nloop invariant i93: m <= 12;\nloop invariant i94: m >= 13;\nloop invariant i95: m <= 13;\nloop invariant i96: m >= 14;\nloop invariant i97: m <= 14;\nloop invariant i98: m >= 15;\nloop invariant i99: m <= 15;\nloop invariant i100: m >= 16;\nloop invariant i101: m <= 16;\nloop invariant i102: m >= 17;\nloop invariant i103: m <= 17;\nloop invariant i104: m >= 18;\nloop invariant i105: m <= 18;\nloop invariant i106: m >= 19;\nloop invariant i107: m <= 19;\nloop invariant i108: m >= 20;\nloop invariant i109: m <= 20;\nloop invariant i110: m >= 21;\nloop invariant i111: m <= 21;\nloop invariant i112: m >= 22;\nloop invariant i113: m <= 22;\nloop invariant i114: m >= 23;\nloop invariant i115: m <= 23;\nloop invariant i116: m >= 24;\nloop invariant i117: m <= 24;\nloop invariant i118: m >= 25;\nloop invariant i119: m <= 25;\nloop invariant i120: m >= 26;\nloop invariant i121: m <= 26;\nloop invariant i122: m >= 27;\nloop invariant i123: m <= 27;\nloop invariant i124: m >= 28;\nloop invariant i125: m <= 28;\nloop invariant i126: m >= 29;\nloop invariant i127: m <= 29;\nloop invariant i128: m >= 30;\nloop invariant i129: m <= 30;\nloop invariant i130: m >= 31;\nloop invariant i131: m <= 31;\nloop invariant i132: m >= 32;\nloop invariant i133: m <= 32;\nloop invariant i134: m >= 33;\nloop invariant i135: m <= 33;\nloop invariant i136: m >= 34;\nloop invariant i137: m <= 34;\nloop invariant i138: m >= 35;\nloop invariant i139: m <= 35;\nloop invariant i140: m >= 36;\nloop invariant i141: m <= 36;\nloop invariant i142: m >= 37;\nloop invariant i143: m <= 37;\nloop invariant i144: m >= 38;\nloop invariant i145: m <= 38;\nloop invariant i146: m >= 39;\nloop invariant i147: m <= 39;\nloop invariant i148: m >= 40;\nloop invariant i149: m <= 40;\nloop invariant i150: m >= 41;\nloop invariant i151: m <= 41;\nloop invariant i152: m >= 42;\nloop invariant i153: m <= 42;\nloop invariant i154: m >= 43;\nloop invariant i155: m <= 43;\nloop invariant i156: m >= 44;\nloop invariant i157: m <= 44;\nloop invariant i158: m >= 45;\nloop invariant i159: m <= 45;\nloop invariant i160: m >= 46;\nloop invariant i161: m <= 46;\nloop invariant i162: m >= 47;\nloop invariant i163: m <= 47;\nloop invariant i164: m >= 48;\nloop invariant i165: m <= 48;\nloop invariant i166: m >= 49;\nloop invariant i167: m <= 49;\nloop invariant i168: m >= 50;\nloop invariant i169: m <= 50;\nloop invariant i170: m >= 51;\nloop invariant i171: m <= 51;\nloop invariant i172: m >= 52;\nloop invariant i173: m <= 52;\nloop invariant i174: m >= 53;\nloop invariant i175: m <= 53;\nloop invariant i176: m >= 54;\nloop invariant i177: m <= 54;\nloop invariant i178: m >= 55;\nloop invariant i179: m <= 55;\nloop invariant i180: m >= 56;\nloop invariant i181: 0 <= j <= n; loop invariant j < n ==> x + y >= k - 1; loop invariant j < n ==> x + y <= k + 1; loop invariant j < n ==> m >= -1; loop invariant j < n ==> m <= n; loop invariant j < n ==> (m == j) ==> x == j; loop invariant j < n ==> (m == j) ==> y == n - j; loop invariant j < n ==> (m != j) ==> x == j - 1; loop invariant j < n ==> (m != j) ==> y == n - j; loop invariant j == n ==> x == j; loop invariant j == n ==> y == n; loop invariant j == n ==> m == j;\nloop invariant i182: m < n;\nloop invariant i183: x + y = k - j;\nloop invariant i184: x <= k;\nloop invariant i185: y <= k;\nloop invariant i186: x >= k - n;\nloop invariant i187: y >= k - n;\nloop invariant i188: (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1;\nloop invariant i189: (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1;\nloop invariant i190: (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1 ==> j <= k - 1;\nloop invariant i191: (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1 ==> j >= k + 1;\nloop invariant i192: (if i == j then x <= k - 1 else x >= k + 1) ==> x + y <= k - 1 ==> j <= k - 1 ==> m <= -1;\nloop invariant i193: (if i == j then x <= k + 1 else x >= k - 1) ==> x + y >= k + 1 ==> j >= k + 1 ==> m >= n;\nloop invariant i194: i <= n;\nloop invariant i195: j <= i;\nloop invariant i196: m == -1 || m == n;\nloop invariant i197: m >= 0 && m <= n;\nloop invariant i198: x + y <= k + 1;\nloop invariant i199: x + y >= k - 1;\nloop invariant i200: 0 <= y <= n;\nloop invariant i201: 0 <= x <= 2n;\nloop invariant i202: x + y <= k + 2;\nloop invariant i203: j == i ==> x == i + 1;\nloop invariant i204: j != i ==> x == n - j;\nloop invariant i205: j == i ==> y == n - i;\nloop invariant i206: j != i ==> y == j - 1;\nloop invariant i207: 0 <= j <= n; loop invariant 0 <= x; loop invariant 0 <= y; loop invariant x + y <= k; loop invariant (n >= 1) ==> (m > -1); loop invariant (n >= 1) ==> (m <= n); loop invariant (n >= 1) ==> (m == j); loop invariant (n >= 1) ==> (j == n); loop invariant (j == n) ==> (x + y <= k - 1); loop invariant (j == n) ==> (x + y >= k + 1); loop invariant (j < n) ==> (x + y != k - 1 && x + y != k + 1); loop invariant (j < n) ==> (m <= -1 || m >= n); loop invariant (j < n) ==> (m == -1 || m == n); loop invariant (j < n) ==> (j != n); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (m != i); loop invariant (j < n) ==> (m != -1); loop invariant (j < n) ==> (m != n); loop invariant (j < n) ==> (j != m); loop invariant (j < n) ==> (i != m); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i); loop invariant (j < n) ==> (i != -1); loop invariant (j < n) ==> (i != n); loop invariant (j < n) ==> (i != j); loop invariant (j < n) ==> (j != i);\nloop invariant i208: 1 <= x <= y;\nloop invariant i209: m <= j;\n*/\nwhile(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      \nreturn;\n\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/122.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant (sn == (i - 1) ==> sn == 0);\nloop invariant (sn == i ==> sn == size);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn == size ==> i == size + 1);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant sn <= size;\nloop invariant i <= size;\nloop invariant sn + i - 1 <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= (size - (i - 1));\nloop invariant sn >= (i - 1);\nloop invariant (sn == size) ==> (i == size + 1);\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn;\nloop invariant 0 <= i <= size + 1;\nloop invariant sn <= size;\nloop invariant i <= size + 1;\nloop invariant sn == i - 1;\nloop invariant sn == size - (size - i + 1);\nloop invariant sn >= 1;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 1 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i - 1;\nloop invariant i <= size + 1;\nloop invariant sn <= size;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant sn == 0 ==> size == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == size ==> sn == size;\nloop invariant sn == 0 ==> i == size + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant (i <= size) ==> (sn == i - 1);\nloop invariant (i > size) ==> (sn == size);\nloop invariant (sn != size) ==> (sn == 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant (sn == (i - 1));\nloop invariant (i <= (sn + 1));\nloop invariant (sn <= i);\nloop invariant (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == 0);\nloop invariant (sn != size) ==> (i == size + 1);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant (i - 1) <= size;\nloop invariant (sn - 1) <= (i - 1);\nloop invariant (size - sn) == (size - (i - 1));\nloop invariant (sn == i - 1);\nloop invariant (sn == 0) ==> (size == 0);\nloop invariant (sn == 0) ==> (i == 1);\nloop invariant (sn == 0) ==> (sn == i - 1);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - i + 1;\nloop invariant sn == 0;\nloop invariant i == size + 1;\nloop invariant sn == 0 ==> (sn == size - i + 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant i = size + 1;\nloop invariant sn = size;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i <= size + 1;\nloop invariant i >= 1;\nloop invariant sn = sn + 1;\nloop invariant i = size + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant i >= sn;\nloop invariant (if (i <= size) then sn == 0 else sn == size);\nloop invariant (if (i <= size) then i == size + 1 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 1 else sn == 0);\nloop invariant (if (i <= size) then sn == i - 1 else sn == size);\nloop invariant (if (i <= size) then i == sn + 1 else i == 1);\nloop invariant (if (i <= size) then sn == size - i else sn == 0);\nloop invariant (if (i <= size) then i == sn + 2 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 2 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 3 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 3 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 4 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 4 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 5 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 5 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 6 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 6 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 7 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 7 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 8 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 8 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 9 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 9 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 10 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 10 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 11 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 11 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 12 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 12 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 13 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 13 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 14 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 14 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 15 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 15 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 16 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 16 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 17 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 17 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 18 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 18 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 19 else i == 1);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn >= i - 1;\nloop invariant sn <= i;\nloop invariant (sn == (i - 1) ==> sn == 0);\nloop invariant (sn == i ==> sn == size);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn == size ==> i == size + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant sn >= i - 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant (sn == (i - 1) ==> sn == 0) is established but not preserved.\nloop invariant (sn == i ==> sn == size) is partially proven to be inductive.\nloop invariant (sn == 0 ==> i == 1) is partially proven to be inductive.\nloop invariant (sn == size ==> i == size + 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn >= i - 1;\nloop invariant i5: sn <= i;\n\nloop invariant i7: (sn == i ==> sn == size);\nloop invariant i8: (sn == 0 ==> i == 1);\nloop invariant i9: (sn == size ==> i == size + 1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant sn <= size;\nloop invariant i <= size;\nloop invariant sn + i - 1 <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\nloop invariant sn + size - i + 1 <= size;\nloop invariant sn + size - i <= size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant i <= size is partially proven to be inductive.\nloop invariant sn + i - 1 <= size is established but not preserved.\nloop invariant sn + size - i + 1 <= size is partially proven to be inductive.\nloop invariant sn + size - i <= size is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i;\n\n\n\nloop invariant i7: sn + size - i + 1 <= size;\nloop invariant i8: sn + size - i <= size;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant i >= 1;\nloop invariant sn <= (size - (i - 1));\nloop invariant sn >= (i - 1);\nloop invariant (sn == size) ==> (i == size + 1);\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant (sn != size) ==> (i == (size + 1 - sn));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn <= (size - (i - 1)) is partially proven to be inductive.\nloop invariant sn >= (i - 1) is partially proven to be inductive.\nloop invariant (sn == size) ==> (i == size + 1) is partially proven to be inductive.\nloop invariant (sn != size) ==> ((0 <= sn) && (sn <= size)) is partially proven to be inductive.\nloop invariant (sn != size) ==> ((1 <= i) && (i <= size + 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn == (size - (i - 1))) is preserved but not established.\nloop invariant (sn != size) ==> (i == (size + 1 - sn)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (i == (sn + 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn == (i - 1)) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i >= 1;\n\nloop invariant i6: sn >= (i - 1);\nloop invariant i7: (sn == size) ==> (i == size + 1);\n\n\n\n\nloop invariant i12: (sn != size) ==> (i == (sn + 1));\nloop invariant i13: (sn != size) ==> (sn == (i - 1));\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn;\nloop invariant 0 <= i <= size + 1;\nloop invariant sn <= size;\nloop invariant i <= size + 1;\nloop invariant sn == i - 1;\nloop invariant sn == size - (size - i + 1);\nloop invariant sn >= 1;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\nloop invariant sn <= size;\nloop invariant sn <= i - 1;\nloop invariant sn <= size - (size - i + 1);\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn is partially proven to be inductive.\nloop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant sn <= size is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == size - (size - i + 1) is partially proven to be inductive.\nloop invariant sn >= 1 is preserved but not established.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn <= size - (size - i + 1) is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= sn;\n\n\n\nloop invariant i5: sn == i - 1;\nloop invariant i6: sn == size - (size - i + 1);\n\nloop invariant i8: sn <= i - 1;\nloop invariant i9: sn <= size - (size - i + 1);\nloop invariant i10: sn >= 0;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 1 <= sn <= size;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size is preserved but not established.\nloop invariant 1 <= sn <= size is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i - 1;\nloop invariant i <= size + 1;\nloop invariant sn <= size;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i <= size + 1 is partially proven to be inductive.\nloop invariant sn <= size is partially proven to be inductive.\nAssertion sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i - 1;\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant i == size + 1 ==> sn == size;\nloop invariant sn == 0 ==> size == 0;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn == size ==> sn == size;\nloop invariant sn == 0 ==> i == size + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant i == size + 1 ==> sn == size is partially proven to be inductive.\nloop invariant sn == 0 ==> size == 0 is preserved but not established.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn == size ==> sn == size is partially proven to be inductive.\nloop invariant sn == 0 ==> i == size + 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\nloop invariant i4: sn == 0 ==> sn == 0;\n\n\n\nloop invariant i8: sn == size ==> sn == size;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant (i <= size) ==> (sn == i - 1);\nloop invariant (i > size) ==> (sn == size);\nloop invariant (sn != size) ==> (sn == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant (i <= size) ==> (sn == i - 1) is partially proven to be inductive.\nloop invariant (i > size) ==> (sn == size) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn == 0) is established but not preserved.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: (i <= size) ==> (sn == i - 1);\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant (sn == (i - 1));\nloop invariant (i <= (sn + 1));\nloop invariant (sn <= i);\nloop invariant (i == (sn + 1));\nloop invariant (sn != size) ==> (sn == 0);\nloop invariant (sn != size) ==> (i == size + 1);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (i <= (sn + 1));\nloop invariant (sn != size) ==> (sn <= i);\nloop invariant (sn != size) ==> (i == (sn + 1));\nloop invariant (sn != size) ==> (sn != i);\nloop invariant (sn != size) ==> (sn <= (i - 1));\nloop invariant (sn != size) ==> (sn >= (i - 1));\nloop invariant (sn != size) ==> (sn == (i - 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant (sn == (i - 1)) is partially proven to be inductive.\nloop invariant (i <= (sn + 1)) is partially proven to be inductive.\nloop invariant (sn <= i) is partially proven to be inductive.\nloop invariant (i == (sn + 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn == 0) is partially proven to be inductive.\nloop invariant (sn != size) ==> (i == size + 1) is preserved but not established.\nloop invariant (sn != size) ==> (i == (sn + 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (i <= (sn + 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn <= i) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn != i) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn <= (i - 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn >= (i - 1)) is partially proven to be inductive.\nloop invariant (sn != size) ==> (sn == (i - 1)) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: (sn == (i - 1));\nloop invariant i4: (i <= (sn + 1));\nloop invariant i5: (sn <= i);\nloop invariant i6: (i == (sn + 1));\n\n\nloop invariant i9: (sn != size) ==> (i == (sn + 1));\nloop invariant i10: (sn != size) ==> (i <= (sn + 1));\nloop invariant i11: (sn != size) ==> (sn <= i);\nloop invariant i12: (sn != size) ==> (sn != i);\nloop invariant i13: (sn != size) ==> (sn <= (i - 1));\nloop invariant i14: (sn != size) ==> (sn >= (i - 1));\nloop invariant i15: (sn != size) ==> (sn == (i - 1));\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\nloop invariant (i - 1) <= size;\nloop invariant (sn - 1) <= (i - 1);\nloop invariant (size - sn) == (size - (i - 1));\nloop invariant (sn == i - 1);\nloop invariant (sn == 0) ==> (size == 0);\nloop invariant (sn == 0) ==> (i == 1);\nloop invariant (sn == 0) ==> (sn == i - 1);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= i);\nloop invariant (i <= size) ==> (0 <= sn);\nloop invariant (i <= size) ==> (sn <= size);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant (i - 1) <= size is partially proven to be inductive.\nloop invariant (sn - 1) <= (i - 1) is partially proven to be inductive.\nloop invariant (size - sn) == (size - (i - 1)) is partially proven to be inductive.\nloop invariant (sn == i - 1) is partially proven to be inductive.\nloop invariant (sn == 0) ==> (size == 0) is preserved but not established.\nloop invariant (sn == 0) ==> (i == 1) is partially proven to be inductive.\nloop invariant (sn == 0) ==> (sn == i - 1) is partially proven to be inductive.\nloop invariant (i <= size) ==> (sn <= i) is partially proven to be inductive.\nloop invariant (i <= size) ==> (0 <= sn) is partially proven to be inductive.\nloop invariant (i <= size) ==> (sn <= size) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n\nloop invariant i5: (sn - 1) <= (i - 1);\nloop invariant i6: (size - sn) == (size - (i - 1));\nloop invariant i7: (sn == i - 1);\n\nloop invariant i9: (sn == 0) ==> (i == 1);\nloop invariant i10: (sn == 0) ==> (sn == i - 1);\nloop invariant i11: (i <= size) ==> (sn <= i);\nloop invariant i12: (i <= size) ==> (0 <= sn);\nloop invariant i13: (i <= size) ==> (sn <= size);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn == i - 1;\nloop invariant sn == size - i + 1;\nloop invariant sn == 0;\nloop invariant i == size + 1;\nloop invariant sn == 0 ==> (sn == size - i + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is preserved but not established.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == size - i + 1 is preserved but not established.\nloop invariant sn == 0 is partially proven to be inductive.\nloop invariant i == size + 1 is partially proven to be inductive.\nloop invariant sn == 0 ==> (sn == size - i + 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant i = size + 1;\nloop invariant sn = size;\nloop invariant sn <= size;\nloop invariant sn >= 0;\nloop invariant i <= size + 1;\nloop invariant i >= 1;\nloop invariant sn = sn + 1;\nloop invariant i = size + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 21: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\nloop invariant i5: sn >= 0;\n\nloop invariant i7: i >= 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size;\nloop invariant 0 <= sn <= size;\nloop invariant sn <= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= size is neither established nor preserved.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 44,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= size + 1;\nloop invariant 0 <= sn <= size;\nloop invariant i >= sn;\nloop invariant (if (i <= size) then sn == 0 else sn == size);\nloop invariant (if (i <= size) then i == size + 1 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 1 else sn == 0);\nloop invariant (if (i <= size) then sn == i - 1 else sn == size);\nloop invariant (if (i <= size) then i == sn + 1 else i == 1);\nloop invariant (if (i <= size) then sn == size - i else sn == 0);\nloop invariant (if (i <= size) then i == sn + 2 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 2 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 3 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 3 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 4 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 4 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 5 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 5 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 6 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 6 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 7 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 7 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 8 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 8 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 9 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 9 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 10 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 10 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 11 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 11 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 12 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 12 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 13 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 13 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 14 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 14 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 15 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 15 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 16 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 16 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 17 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 17 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 18 else i == 1);\nloop invariant (if (i <= size) then sn == size - i + 18 else sn == 0);\nloop invariant (if (i <= size) then i == sn + 19 else i == 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 23: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i >= sn;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 88: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= size + 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= size;\nloop invariant i4: sn >= i - 1;\nloop invariant i5: sn <= i;\nloop invariant i6: (sn == (i - 1) ==> sn == 0);\nloop invariant i7: (sn == i ==> sn == size);\nloop invariant i8: (sn == 0 ==> i == 1);\nloop invariant i9: (sn == size ==> i == size + 1);\nloop invariant i10: 1 <= i <= size;\nloop invariant i11: i <= size;\nloop invariant i12: sn + i - 1 <= size;\nloop invariant i13: sn + size - i + 1 <= size;\nloop invariant i14: sn + size - i <= size;\nloop invariant i15: 0 <= i <= size;\nloop invariant i16: i >= 1;\nloop invariant i17: sn <= (size - (i - 1));\nloop invariant i18: sn >= (i - 1);\nloop invariant i19: (sn == size) ==> (i == size + 1);\nloop invariant i20: (sn != size) ==> ((0 <= sn) && (sn <= size));\nloop invariant i21: (sn != size) ==> ((1 <= i) && (i <= size + 1));\nloop invariant i22: (sn != size) ==> (sn == (size - (i - 1)));\nloop invariant i23: (sn != size) ==> (i == (size + 1 - sn));\nloop invariant i24: (sn != size) ==> (i == (sn + 1));\nloop invariant i25: (sn != size) ==> (sn == (i - 1));\nloop invariant i26: 0 <= sn;\nloop invariant i27: i <= size + 1;\nloop invariant i28: sn == i - 1;\nloop invariant i29: sn == size - (size - i + 1);\nloop invariant i30: sn >= 1;\nloop invariant i31: sn <= i - 1;\nloop invariant i32: sn <= size - (size - i + 1);\nloop invariant i33: 1 <= sn <= size;\nloop invariant i34: 0 <= sn <= size;\nloop invariant i35: sn == 0 ==> sn == 0;\nloop invariant i36: i == size + 1 ==> sn == size;\nloop invariant i37: sn == 0 ==> size == 0;\nloop invariant i38: sn == 0 ==> i == 1;\nloop invariant i39: sn == size ==> sn == size;\nloop invariant i40: sn == 0 ==> i == size + 1;\nloop invariant i41: (i <= size) ==> (sn == i - 1);\nloop invariant i42: (i > size) ==> (sn == size);\nloop invariant i43: (sn != size) ==> (sn == 0);\nloop invariant i44: 1 <= i <= size + 1;\nloop invariant i45: (sn == (i - 1));\nloop invariant i46: (i <= (sn + 1));\nloop invariant i47: (sn <= i);\nloop invariant i48: (i == (sn + 1));\nloop invariant i49: (sn != size) ==> (i == size + 1);\nloop invariant i50: (sn != size) ==> (i <= (sn + 1));\nloop invariant i51: (sn != size) ==> (sn <= i);\nloop invariant i52: (sn != size) ==> (sn != i);\nloop invariant i53: (sn != size) ==> (sn <= (i - 1));\nloop invariant i54: (sn != size) ==> (sn >= (i - 1));\nloop invariant i55: (i - 1) <= size;\nloop invariant i56: (sn - 1) <= (i - 1);\nloop invariant i57: (size - sn) == (size - (i - 1));\nloop invariant i58: (sn == i - 1);\nloop invariant i59: (sn == 0) ==> (size == 0);\nloop invariant i60: (sn == 0) ==> (i == 1);\nloop invariant i61: (sn == 0) ==> (sn == i - 1);\nloop invariant i62: (i <= size) ==> (sn <= i);\nloop invariant i63: (i <= size) ==> (0 <= sn);\nloop invariant i64: (i <= size) ==> (sn <= size);\nloop invariant i65: sn == size - i + 1;\nloop invariant i66: sn == 0;\nloop invariant i67: i == size + 1;\nloop invariant i68: sn == 0 ==> (sn == size - i + 1);\nloop invariant i69: i = size + 1;\nloop invariant i70: sn = size;\nloop invariant i71: sn = sn + 1;\nloop invariant i72: i >= sn;\nloop invariant i73: (if (i <= size) then sn == 0 else sn == size);\nloop invariant i74: (if (i <= size) then i == size + 1 else i == 1);\nloop invariant i75: (if (i <= size) then sn == size - i + 1 else sn == 0);\nloop invariant i76: (if (i <= size) then sn == i - 1 else sn == size);\nloop invariant i77: (if (i <= size) then i == sn + 1 else i == 1);\nloop invariant i78: (if (i <= size) then sn == size - i else sn == 0);\nloop invariant i79: (if (i <= size) then i == sn + 2 else i == 1);\nloop invariant i80: (if (i <= size) then sn == size - i + 2 else sn == 0);\nloop invariant i81: (if (i <= size) then i == sn + 3 else i == 1);\nloop invariant i82: (if (i <= size) then sn == size - i + 3 else sn == 0);\nloop invariant i83: (if (i <= size) then i == sn + 4 else i == 1);\nloop invariant i84: (if (i <= size) then sn == size - i + 4 else sn == 0);\nloop invariant i85: (if (i <= size) then i == sn + 5 else i == 1);\nloop invariant i86: (if (i <= size) then sn == size - i + 5 else sn == 0);\nloop invariant i87: (if (i <= size) then i == sn + 6 else i == 1);\nloop invariant i88: (if (i <= size) then sn == size - i + 6 else sn == 0);\nloop invariant i89: (if (i <= size) then i == sn + 7 else i == 1);\nloop invariant i90: (if (i <= size) then sn == size - i + 7 else sn == 0);\nloop invariant i91: (if (i <= size) then i == sn + 8 else i == 1);\nloop invariant i92: (if (i <= size) then sn == size - i + 8 else sn == 0);\nloop invariant i93: (if (i <= size) then i == sn + 9 else i == 1);\nloop invariant i94: (if (i <= size) then sn == size - i + 9 else sn == 0);\nloop invariant i95: (if (i <= size) then i == sn + 10 else i == 1);\nloop invariant i96: (if (i <= size) then sn == size - i + 10 else sn == 0);\nloop invariant i97: (if (i <= size) then i == sn + 11 else i == 1);\nloop invariant i98: (if (i <= size) then sn == size - i + 11 else sn == 0);\nloop invariant i99: (if (i <= size) then i == sn + 12 else i == 1);\nloop invariant i100: (if (i <= size) then sn == size - i + 12 else sn == 0);\nloop invariant i101: (if (i <= size) then i == sn + 13 else i == 1);\nloop invariant i102: (if (i <= size) then sn == size - i + 13 else sn == 0);\nloop invariant i103: (if (i <= size) then i == sn + 14 else i == 1);\nloop invariant i104: (if (i <= size) then sn == size - i + 14 else sn == 0);\nloop invariant i105: (if (i <= size) then i == sn + 15 else i == 1);\nloop invariant i106: (if (i <= size) then sn == size - i + 15 else sn == 0);\nloop invariant i107: (if (i <= size) then i == sn + 16 else i == 1);\nloop invariant i108: (if (i <= size) then sn == size - i + 16 else sn == 0);\nloop invariant i109: (if (i <= size) then i == sn + 17 else i == 1);\nloop invariant i110: (if (i <= size) then sn == size - i + 17 else sn == 0);\nloop invariant i111: (if (i <= size) then i == sn + 18 else i == 1);\nloop invariant i112: (if (i <= size) then sn == size - i + 18 else sn == 0);\nloop invariant i113: (if (i <= size) then i == sn + 19 else i == 1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 59,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn >= i - 1;\nloop invariant i5: sn <= i;\n\nloop invariant i7: (sn == i ==> sn == size);\nloop invariant i8: (sn == 0 ==> i == 1);\nloop invariant i9: (sn == size ==> i == size + 1);\n\n\n\nloop invariant i13: sn + size - i + 1 <= size;\nloop invariant i14: sn + size - i <= size;\n\nloop invariant i16: i >= 1;\n\nloop invariant i18: sn >= (i - 1);\nloop invariant i19: (sn == size) ==> (i == size + 1);\n\n\n\n\nloop invariant i24: (sn != size) ==> (i == (sn + 1));\nloop invariant i25: (sn != size) ==> (sn == (i - 1));\nloop invariant i26: 0 <= sn;\n\nloop invariant i28: sn == i - 1;\nloop invariant i29: sn == size - (size - i + 1);\n\nloop invariant i31: sn <= i - 1;\nloop invariant i32: sn <= size - (size - i + 1);\n\n\nloop invariant i35: sn == 0 ==> sn == 0;\nloop invariant i36: i == size + 1 ==> sn == size;\n\nloop invariant i38: sn == 0 ==> i == 1;\nloop invariant i39: sn == size ==> sn == size;\n\nloop invariant i41: (i <= size) ==> (sn == i - 1);\n\n\n\nloop invariant i45: (sn == (i - 1));\nloop invariant i46: (i <= (sn + 1));\nloop invariant i47: (sn <= i);\nloop invariant i48: (i == (sn + 1));\n\nloop invariant i50: (sn != size) ==> (i <= (sn + 1));\nloop invariant i51: (sn != size) ==> (sn <= i);\nloop invariant i52: (sn != size) ==> (sn != i);\nloop invariant i53: (sn != size) ==> (sn <= (i - 1));\nloop invariant i54: (sn != size) ==> (sn >= (i - 1));\n\nloop invariant i56: (sn - 1) <= (i - 1);\nloop invariant i57: (size - sn) == (size - (i - 1));\nloop invariant i58: (sn == i - 1);\n\nloop invariant i60: (sn == 0) ==> (i == 1);\nloop invariant i61: (sn == 0) ==> (sn == i - 1);\nloop invariant i62: (i <= size) ==> (sn <= i);\nloop invariant i63: (i <= size) ==> (0 <= sn);\nloop invariant i64: (i <= size) ==> (sn <= size);\n\n\n\n\n\n\n\nloop invariant i72: i >= sn;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "checker_output_after_prune": false
        }
    ],
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c",
            "../dataset/loop_invariants/code2inv/33.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../dataset/loop_invariants/code2inv/28.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/70.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../dataset/loop_invariants/code2inv/66.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/mod4.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/20.c",
            "../dataset/loop_invariants/code2inv/122.c"
        ],
        "skipped": [],
        "total": 20,
        "success_count": 4,
        "failure_count": 16,
        "success_rate": 0.2
    }
}