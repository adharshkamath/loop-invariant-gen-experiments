{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/70.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant x <= n + 1 - (x - 1);\nloop invariant y <= n - (x - 1);\nloop invariant y <= n;\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant y = n - x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= n - x;\nloop invariant (n > 0 && x <= n) ==> (y < n);\nloop invariant x >= 1;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant x > 0 ==> y < n;\nloop invariant x > 0 ==> y >= 0;\nloop invariant x <= n ==> y <= n - x;\nloop invariant x <= n ==> y >= 0;\nloop invariant x <= n ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant x <= n ==> y >= (x - 1) * x / 2;\nloop invariant x <= n ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n > 0 ==> y < n;\nloop invariant n > 0 ==> y >= 0;\nloop invariant n > 0 ==> y <= n - x;\nloop invariant n > 0 ==> y >= 0;\nloop invariant n > 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n > 0 ==> y >= (x - 1) * x / 2;\nloop invariant n > 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n <= 0 ==> x <= 0;\nloop invariant n <= 0 ==> x >= 0;\nloop invariant n <= 0 ==> y <= 0;\nloop invariant n <= 0 ==> y >= 0;\nloop invariant n <= 0 ==> y <= n - x;\nloop invariant n <= 0 ==> y >= 0;\nloop invariant n <= 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n <= 0 ==> y >= (x - 1) * x / 2;\nloop invariant n <= 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant (n > 0 ==> y < n && n - x > 0);\nloop invariant x + y == n;\nloop invariant (x <= n ==> x == n && y == 0);\nloop invariant (x > n ==> x == n + 1 && y == 0);\nloop invariant (n > 0 ==> y < n);\nloop invariant (n <= 0 ==> y == n && x == n + 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant y + x > 0 ==> y < n;\nloop invariant y + x <= 0 ==> y == n;\nloop invariant y + x > 0 ==> y >= 0;\nloop invariant y + x <= 0 ==> y <= n;\nloop invariant y + x > 0 ==> x <= n;\nloop invariant y + x <= 0 ==> x >= 1;\nloop invariant y + x > 0 ==> y + x <= n;\nloop invariant y + x <= 0 ==> x + y >= n;\nloop invariant y + x > 0 ==> y + x >= 1;\nloop invariant y + x <= 0 ==> x + y <= n - 1;\nloop invariant y + x > 0 ==> x + y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n+1;\nloop invariant n - x <= y <= n;\nloop invariant x <= n+1 ==> y <= n;\nloop invariant x <= n+1 ==> y >= 0;\nloop invariant x <= n ==> y == n - x;\nloop invariant x <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant y + x <= n;\nloop invariant x + y == n;\nloop invariant x + y == n ==> y < n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant y = n - x;\nloop invariant n >= 0;\n*/\n```",
            "```\n/*@\nloop invariant x == 1;\nloop invariant x + 1 == x;\nloop invariant y == n - x;\nloop invariant x > n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y = n - x;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n - x;\nloop invariant x <= n;\nloop invariant n <= y <= n - x;\nloop invariant x ==> y < n;\nloop invariant n ==> y < n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant x <= n + 1 - (x - 1);\nloop invariant y <= n - (x - 1);\nloop invariant y <= n;\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\nloop invariant y >= n - (n + 1 - (x - 1));\nloop invariant y >= n - x;\nloop invariant y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n + 1 is preserved but not established.\nloop invariant x <= n + 1 - (x - 1) is established but not preserved.\nloop invariant y <= n - (x - 1) is preserved but not established.\nloop invariant y <= n is partially proven to be inductive.\nloop invariant y >= n - x is preserved but not established.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y >= n - (n + 1 - (x - 1)) is partially proven to be inductive.\nAssertion y < n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n + 1;\nloop invariant y = n - x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= n - x;\nloop invariant (n > 0 && x <= n) ==> (y < n);\nloop invariant x >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant (n > 0 && x <= n) ==> (y < n) is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nAssertion y < n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\nloop invariant i3: x >= 1;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant x > 0 ==> y < n;\nloop invariant x > 0 ==> y >= 0;\nloop invariant x <= n ==> y <= n - x;\nloop invariant x <= n ==> y >= 0;\nloop invariant x <= n ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant x <= n ==> y >= (x - 1) * x / 2;\nloop invariant x <= n ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n > 0 ==> y < n;\nloop invariant n > 0 ==> y >= 0;\nloop invariant n > 0 ==> y <= n - x;\nloop invariant n > 0 ==> y >= 0;\nloop invariant n > 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n > 0 ==> y >= (x - 1) * x / 2;\nloop invariant n > 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n <= 0 ==> x <= 0;\nloop invariant n <= 0 ==> x >= 0;\nloop invariant n <= 0 ==> y <= 0;\nloop invariant n <= 0 ==> y >= 0;\nloop invariant n <= 0 ==> y <= n - x;\nloop invariant n <= 0 ==> y >= 0;\nloop invariant n <= 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant n <= 0 ==> y >= (x - 1) * x / 2;\nloop invariant n <= 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1) is preserved but not established.\nloop invariant x > 0 ==> y < n is partially proven to be inductive.\nloop invariant x > 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y <= n - x is partially proven to be inductive.\nloop invariant x <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nloop invariant x <= n ==> y >= (x - 1) * x / 2 is partially proven to be inductive.\nloop invariant x <= n ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nloop invariant n > 0 ==> y < n is partially proven to be inductive.\nloop invariant n > 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant n > 0 ==> y <= n - x is partially proven to be inductive.\nloop invariant n > 0 ==> y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nloop invariant n > 0 ==> y >= (x - 1) * x / 2 is partially proven to be inductive.\nloop invariant n > 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nloop invariant n <= 0 ==> x <= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> y <= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant n <= 0 ==> y <= n - x is partially proven to be inductive.\nloop invariant n <= 0 ==> y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nloop invariant n <= 0 ==> y >= (x - 1) * x / 2 is partially proven to be inductive.\nloop invariant n <= 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1) is partially proven to be inductive.\nAssertion y < n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: n <= 0 ==> x >= 0;\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant (n > 0 ==> y < n && n - x > 0);\nloop invariant x + y == n;\nloop invariant (x <= n ==> x == n && y == 0);\nloop invariant (x > n ==> x == n + 1 && y == 0);\nloop invariant (n > 0 ==> y < n);\nloop invariant (n <= 0 ==> y == n && x == n + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant 0 <= y <= n - x is preserved but not established.\nloop invariant (n > 0 ==> y < n && n - x > 0) is preserved but not established.\nloop invariant x + y == n is preserved but not established.\nloop invariant (x <= n ==> x == n && y == 0) is preserved but not established.\nloop invariant (x > n ==> x == n + 1 && y == 0) is partially proven to be inductive.\nloop invariant (n > 0 ==> y < n) is partially proven to be inductive.\nloop invariant (n <= 0 ==> y == n && x == n + 1) is partially proven to be inductive.\nAssertion y < n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant y + x > 0 ==> y < n;\nloop invariant y + x <= 0 ==> y == n;\nloop invariant y + x > 0 ==> y >= 0;\nloop invariant y + x <= 0 ==> y <= n;\nloop invariant y + x > 0 ==> x <= n;\nloop invariant y + x <= 0 ==> x >= 1;\nloop invariant y + x > 0 ==> y + x <= n;\nloop invariant y + x <= 0 ==> x + y >= n;\nloop invariant y + x > 0 ==> y + x >= 1;\nloop invariant y + x <= 0 ==> x + y <= n - 1;\nloop invariant y + x > 0 ==> x + y <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n + 1 is preserved but not established.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant y + x > 0 ==> y < n is partially proven to be inductive.\nloop invariant y + x <= 0 ==> y == n is partially proven to be inductive.\nloop invariant y + x > 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant y + x <= 0 ==> y <= n is partially proven to be inductive.\nloop invariant y + x > 0 ==> x <= n is partially proven to be inductive.\nloop invariant y + x <= 0 ==> x >= 1 is partially proven to be inductive.\nloop invariant y + x > 0 ==> y + x <= n is partially proven to be inductive.\nloop invariant y + x <= 0 ==> x + y >= n is partially proven to be inductive.\nloop invariant y + x > 0 ==> y + x >= 1 is partially proven to be inductive.\nloop invariant y + x <= 0 ==> x + y <= n - 1 is partially proven to be inductive.\nloop invariant y + x > 0 ==> x + y <= n is partially proven to be inductive.\nAssertion y < n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\nloop invariant i5: y + x > 0 ==> y >= 0;\n\n\n\n\n\nloop invariant i11: y + x > 0 ==> y + x >= 1;\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n+1;\nloop invariant n - x <= y <= n;\nloop invariant x <= n+1 ==> y <= n;\nloop invariant x <= n+1 ==> y >= 0;\nloop invariant x <= n ==> y == n - x;\nloop invariant x <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n+1 is preserved but not established.\nloop invariant n - x <= y <= n is preserved but not established.\nloop invariant x <= n+1 ==> y <= n is partially proven to be inductive.\nloop invariant x <= n+1 ==> y >= 0 is preserved but not established.\nloop invariant x <= n ==> y == n - x is neither established nor preserved.\nloop invariant x <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 is partially proven to be inductive.\nloop invariant x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x is partially proven to be inductive.\nAssertion y < n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: x <= n ==> y == n - x ==> y <= n;\nloop invariant i8: x <= n ==> y == n - x ==> y >= 0;\nloop invariant i9: x <= n ==> y == n - x ==> y >= 0 ==> y <= n;\nloop invariant i10: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0;\nloop invariant i11: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i12: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i13: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i14: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i15: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i16: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i17: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i18: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i19: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i20: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i21: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i22: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i23: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 0 <= y <= n - x;\nloop invariant y + x <= n;\nloop invariant x + y == n;\nloop invariant x + y == n ==> y < n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n is neither established nor preserved.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant y + x <= n is partially proven to be inductive.\nloop invariant x + y == n is preserved but not established.\nloop invariant x + y == n ==> y < n is partially proven to be inductive.\nAssertion y < n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\nloop invariant i5: x + y == n ==> y < n;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant y = n - x;\nloop invariant n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x == 1;\nloop invariant x + 1 == x;\nloop invariant y == n - x;\nloop invariant x > n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == 1 is partially proven to be inductive.\nloop invariant x + 1 == x is preserved but not established.\nloop invariant y == n - x is partially proven to be inductive.\nloop invariant x > n is partially proven to be inductive.\nAssertion y < n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n + 1;\nloop invariant 0 <= y <= n - x;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\nloop invariant x >= 1;\nloop invariant y <= n - 1;\nloop invariant y >= 0;\nloop invariant x <= n + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n + 1 is preserved but not established.\nloop invariant 0 <= y <= n - x is neither established nor preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= n + 1 is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y <= n - 1 is partially proven to be inductive.\nAssertion y < n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\nloop invariant i5: x >= 1;\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant y = n - x;\nloop invariant x <= n;\nloop invariant y >= 0;\nloop invariant y <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= y <= n - x;\nloop invariant x <= n;\nloop invariant n <= y <= n - x;\nloop invariant x ==> y < n;\nloop invariant n ==> y < n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\nloop invariant x ==> y <= n;\nloop invariant n ==> y <= n;\nloop invariant x ==> y <= n - x;\nloop invariant n ==> y <= n - x;\nloop invariant x ==> n - x <= y <= n;\nloop invariant n ==> n - x <= y <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= y <= n - x is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n <= y <= n - x is preserved but not established.\nloop invariant x ==> y < n is partially proven to be inductive.\nloop invariant n ==> y < n is partially proven to be inductive.\nloop invariant x ==> y <= n - x is partially proven to be inductive.\nloop invariant n ==> y <= n - x is partially proven to be inductive.\nloop invariant x ==> n - x <= y <= n is partially proven to be inductive.\nloop invariant n ==> n - x <= y <= n is partially proven to be inductive.\nloop invariant x ==> y <= n is partially proven to be inductive.\nloop invariant n ==> y <= n is partially proven to be inductive.\nAssertion y < n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= y <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is neither established nor preserved.\nloop invariant 0 <= y <= n is preserved but not established.\nAssertion y < n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 20: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 0 <= x <= n + 1;\nloop invariant i2: x <= n + 1 - (x - 1);\nloop invariant i3: y <= n - (x - 1);\nloop invariant i4: y <= n;\nloop invariant i5: y >= n - x;\nloop invariant i6: y >= 0;\nloop invariant i7: y >= n - (n + 1 - (x - 1));\nloop invariant i8: y = n - x;\nloop invariant i9: 0 <= y <= n - x;\nloop invariant i10: (n > 0 && x <= n) ==> (y < n);\nloop invariant i11: x >= 1;\nloop invariant i12: 0 <= x <= n;\nloop invariant i13: (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i14: x > 0 ==> y < n;\nloop invariant i15: x > 0 ==> y >= 0;\nloop invariant i16: x <= n ==> y <= n - x;\nloop invariant i17: x <= n ==> y >= 0;\nloop invariant i18: x <= n ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i19: x <= n ==> y >= (x - 1) * x / 2;\nloop invariant i20: x <= n ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i21: n > 0 ==> y < n;\nloop invariant i22: n > 0 ==> y >= 0;\nloop invariant i23: n > 0 ==> y <= n - x;\nloop invariant i24: n > 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i25: n > 0 ==> y >= (x - 1) * x / 2;\nloop invariant i26: n > 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i27: n <= 0 ==> x <= 0;\nloop invariant i28: n <= 0 ==> x >= 0;\nloop invariant i29: n <= 0 ==> y <= 0;\nloop invariant i30: n <= 0 ==> y >= 0;\nloop invariant i31: n <= 0 ==> y <= n - x;\nloop invariant i32: n <= 0 ==> y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i33: n <= 0 ==> y >= (x - 1) * x / 2;\nloop invariant i34: n <= 0 ==> (x - 1) * x / 2 <= y <= (x - 1) * x / 2 + (x - 1);\nloop invariant i35: 1 <= x <= n;\nloop invariant i36: (n > 0 ==> y < n && n - x > 0);\nloop invariant i37: x + y == n;\nloop invariant i38: (x <= n ==> x == n && y == 0);\nloop invariant i39: (x > n ==> x == n + 1 && y == 0);\nloop invariant i40: (n > 0 ==> y < n);\nloop invariant i41: (n <= 0 ==> y == n && x == n + 1);\nloop invariant i42: 1 <= x <= n + 1;\nloop invariant i43: y + x > 0 ==> y < n;\nloop invariant i44: y + x <= 0 ==> y == n;\nloop invariant i45: y + x > 0 ==> y >= 0;\nloop invariant i46: y + x <= 0 ==> y <= n;\nloop invariant i47: y + x > 0 ==> x <= n;\nloop invariant i48: y + x <= 0 ==> x >= 1;\nloop invariant i49: y + x > 0 ==> y + x <= n;\nloop invariant i50: y + x <= 0 ==> x + y >= n;\nloop invariant i51: y + x > 0 ==> y + x >= 1;\nloop invariant i52: y + x <= 0 ==> x + y <= n - 1;\nloop invariant i53: y + x > 0 ==> x + y <= n;\nloop invariant i54: 0 <= x <= n+1;\nloop invariant i55: n - x <= y <= n;\nloop invariant i56: x <= n+1 ==> y <= n;\nloop invariant i57: x <= n+1 ==> y >= 0;\nloop invariant i58: x <= n ==> y == n - x;\nloop invariant i59: x <= n ==> y >= 0 ==> y == n - x;\nloop invariant i60: x <= n ==> y == n - x ==> y <= n;\nloop invariant i61: x <= n ==> y == n - x ==> y >= 0;\nloop invariant i62: x <= n ==> y == n - x ==> y >= 0 ==> y <= n;\nloop invariant i63: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0;\nloop invariant i64: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i65: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i66: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i67: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i68: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i69: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i70: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i71: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i72: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i73: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i74: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i75: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i76: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i77: y + x <= n;\nloop invariant i78: x + y == n ==> y < n;\nloop invariant i79: n >= 0;\nloop invariant i80: x == 1;\nloop invariant i81: x + 1 == x;\nloop invariant i82: y == n - x;\nloop invariant i83: x > n;\nloop invariant i84: x <= n + 1;\nloop invariant i85: y <= n - 1;\nloop invariant i86: x <= n;\nloop invariant i87: x <= y <= n - x;\nloop invariant i88: n <= y <= n - x;\nloop invariant i89: x ==> y < n;\nloop invariant i90: n ==> y < n;\nloop invariant i91: x ==> y <= n - x;\nloop invariant i92: n ==> y <= n - x;\nloop invariant i93: x ==> n - x <= y <= n;\nloop invariant i94: n ==> n - x <= y <= n;\nloop invariant i95: x ==> y <= n;\nloop invariant i96: n ==> y <= n;\nloop invariant i97: 0 <= y <= n;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 16,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i28: n <= 0 ==> x >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i45: y + x > 0 ==> y >= 0;\n\n\nloop invariant i48: y + x <= 0 ==> x >= 1;\n\n\nloop invariant i51: y + x > 0 ==> y + x >= 1;\n\n\n\n\n\n\n\n\nloop invariant i60: x <= n ==> y == n - x ==> y <= n;\nloop invariant i61: x <= n ==> y == n - x ==> y >= 0;\nloop invariant i62: x <= n ==> y == n - x ==> y >= 0 ==> y <= n;\nloop invariant i63: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0;\nloop invariant i64: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i65: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i66: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i67: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i68: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i69: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i70: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i71: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i72: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i73: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\nloop invariant i74: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n;\nloop invariant i75: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0;\nloop invariant i76: x <= n ==> y == n - x ==> y >= 0 ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x ==> y <= n ==> y >= 0 ==> y == n - x;\n\nloop invariant i78: x + y == n ==> y < n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n\n    }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/fig2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/vnew2.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../dataset/loop_invariants/code2inv/84.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/70.c"
        ],
        "skipped": [],
        "total": 10,
        "success_count": 1,
        "failure_count": 9,
        "success_rate": 0.1
    }
}