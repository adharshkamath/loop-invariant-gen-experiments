{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/111.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 < n;\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= (n * (n - 1)) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * i / 2;\nloop invariant sn == (1 + (i - 1) * i / 2);\nloop invariant sn == (sn + 1) ==> i <= n;\nloop invariant sn == (sn + 1) ==> i > 1;\nloop invariant sn == (sn + 1) ==> i <= n + 1;\nloop invariant sn == (sn + 1) ==> i >= 1;\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i - 1;\nloop invariant n >= 0;\nloop invariant (sn == i - 1) ==> (sn == n);\nloop invariant (i == n + 1) ==> (sn == n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant (if (n != 0) then sn >= 0 else sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i <= sn + 1;\nloop invariant i > 0 ==> sn >= i - 1;\nloop invariant sn < n ==> i <= n;\nloop invariant sn == n ==> i == n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i == n + 1 ==> sn == n;\n*/\n```",
            "```\n/*@\nloop invariant ( n >= i );\nloop invariant ( 0 <= sn );\nloop invariant ( i > 0 );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= (sn + 1);\nloop invariant sn <= n;\nloop invariant n <= (sn + 1);\nloop invariant i <= (sn + 1);\nloop invariant sn >= 0;\nloop invariant i >= 1;\nloop invariant sn == (i - 1);\nloop invariant i == (n + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant ( i <= n );\nloop invariant ( sn <= (i - 1) );\nloop invariant ( sn >= 0 );\nloop invariant ( i >= 1 );\nloop invariant ( i <= n );\nloop invariant ( sn <= (i - 1) );\nloop invariant ( sn >= 0 );\nloop invariant ( i >= 1 );\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant n - sn = n - (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i == n - sn + 1;\nloop invariant i == n + 1 - sn;\nloop invariant sn >= i - n;\nloop invariant sn <= i - 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 < n;\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= (n * (n - 1)) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 < n is preserved but not established.\nloop invariant 1 <= i <= n is established but not preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= (n * (n - 1)) / 2 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * i / 2;\nloop invariant sn == (1 + (i - 1) * i / 2);\nloop invariant sn == (sn + 1) ==> i <= n;\nloop invariant sn == (sn + 1) ==> i > 1;\nloop invariant sn == (sn + 1) ==> i <= n + 1;\nloop invariant sn == (sn + 1) ==> i >= 1;\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n * i / 2 is partially proven to be inductive.\nloop invariant sn == (1 + (i - 1) * i / 2) is preserved but not established.\nloop invariant sn == (sn + 1) ==> i <= n is partially proven to be inductive.\nloop invariant sn == (sn + 1) ==> i > 1 is partially proven to be inductive.\nloop invariant sn == (sn + 1) ==> i <= n + 1 is partially proven to be inductive.\nloop invariant sn == (sn + 1) ==> i >= 1 is partially proven to be inductive.\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1)) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\n\nloop invariant i5: sn == (sn + 1) ==> i <= n;\nloop invariant i6: sn == (sn + 1) ==> i > 1;\nloop invariant i7: sn == (sn + 1) ==> i <= n + 1;\nloop invariant i8: sn == (sn + 1) ==> i >= 1;\nloop invariant i9: sn == (sn + 1) ==> (sn == (sn + 1));\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i - 1;\nloop invariant n >= 0;\nloop invariant (sn == i - 1) ==> (sn == n);\nloop invariant (i == n + 1) ==> (sn == n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant (sn == i - 1) ==> (sn == n) is preserved but not established.\nloop invariant (i == n + 1) ==> (sn == n) is established but not preserved.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i - 1;\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant (if (n != 0) then sn >= 0 else sn == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: sn == (i - 1);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= n is neither established nor preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n+1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i <= sn + 1;\nloop invariant i > 0 ==> sn >= i - 1;\nloop invariant sn < n ==> i <= n;\nloop invariant sn == n ==> i == n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i == n + 1 ==> sn == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i <= sn + 1 is partially proven to be inductive.\nloop invariant i > 0 ==> sn >= i - 1 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n is partially proven to be inductive.\nloop invariant sn == n ==> i == n is established but not preserved.\nloop invariant i == n + 1 ==> sn == n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i <= sn + 1;\nloop invariant i4: i > 0 ==> sn >= i - 1;\nloop invariant i5: sn < n ==> i <= n;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( n >= i );\nloop invariant ( 0 <= sn );\nloop invariant ( i > 0 );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( n >= i ) is neither established nor preserved.\nloop invariant ( 0 <= sn ) is partially proven to be inductive.\nloop invariant ( i > 0 ) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: ( 0 <= sn );\nloop invariant i3: ( i > 0 );\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i - 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= (sn + 1);\nloop invariant sn <= n;\nloop invariant n <= (sn + 1);\nloop invariant i <= (sn + 1);\nloop invariant sn >= 0;\nloop invariant i >= 1;\nloop invariant sn == (i - 1);\nloop invariant i == (n + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: 0 <= i <= (sn + 1);\n\n\nloop invariant i6: i <= (sn + 1);\nloop invariant i7: sn >= 0;\nloop invariant i8: i >= 1;\nloop invariant i9: sn == (i - 1);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= n is preserved but not established.\nloop invariant 1 <= i <= n + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant ( i <= n );\nloop invariant ( sn <= (i - 1) );\nloop invariant ( sn >= 0 );\nloop invariant ( i >= 1 );\nloop invariant ( i <= n );\nloop invariant ( sn <= (i - 1) );\nloop invariant ( sn >= 0 );\nloop invariant ( i >= 1 );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( i <= n ) is neither established nor preserved.\nloop invariant ( sn <= (i - 1) ) is partially proven to be inductive.\nloop invariant ( sn >= 0 ) is partially proven to be inductive.\nloop invariant ( i >= 1 ) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: ( sn <= (i - 1) );\nloop invariant i3: ( sn >= 0 );\nloop invariant i4: ( i >= 1 );\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == n: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant n - sn = n - (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i == n - sn + 1;\nloop invariant i == n + 1 - sn;\nloop invariant sn >= i - n;\nloop invariant sn <= i - 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn == i - 1;\n\n\n\nloop invariant i9: sn <= i - 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 37: unexpected token '('",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 < n;\nloop invariant i2: 1 <= i <= n;\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn >= 0;\nloop invariant i5: sn <= (n * (n - 1)) / 2;\nloop invariant i6: 0 <= i <= n + 1;\nloop invariant i7: sn <= n * i / 2;\nloop invariant i8: sn == (1 + (i - 1) * i / 2);\nloop invariant i9: sn == (sn + 1) ==> i <= n;\nloop invariant i10: sn == (sn + 1) ==> i > 1;\nloop invariant i11: sn == (sn + 1) ==> i <= n + 1;\nloop invariant i12: sn == (sn + 1) ==> i >= 1;\nloop invariant i13: sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant i14: 0 <= sn <= n;\nloop invariant i15: sn <= i - 1;\nloop invariant i16: n >= 0;\nloop invariant i17: (sn == i - 1) ==> (sn == n);\nloop invariant i18: (i == n + 1) ==> (sn == n);\nloop invariant i19: 0 <= i;\nloop invariant i20: i <= n;\nloop invariant i21: (if (n != 0) then sn >= 0 else sn == 0);\nloop invariant i22: i >= 1;\nloop invariant i23: i <= n+1;\nloop invariant i24: sn <= n;\nloop invariant i25: 0 <= i <= n;\nloop invariant i26: i <= sn + 1;\nloop invariant i27: i > 0 ==> sn >= i - 1;\nloop invariant i28: sn < n ==> i <= n;\nloop invariant i29: sn == n ==> i == n;\nloop invariant i30: i == n + 1 ==> sn == n;\nloop invariant i31: ( n >= i );\nloop invariant i32: ( 0 <= sn );\nloop invariant i33: ( i > 0 );\nloop invariant i34: i <= n + 1;\nloop invariant i35: i1;\nloop invariant i36: i2;\nloop invariant i37: 0 <= i <= (sn + 1);\nloop invariant i38: n <= (sn + 1);\nloop invariant i39: i <= (sn + 1);\nloop invariant i40: i == (n + 1);\nloop invariant i41: 1 <= i <= n + 1;\nloop invariant i42: sn == i - 1;\nloop invariant i43: 0 <= n;\nloop invariant i44: ( i <= n );\nloop invariant i45: ( sn <= (i - 1) );\nloop invariant i46: ( sn >= 0 );\nloop invariant i47: ( i >= 1 );\nloop invariant i48: n - sn = n - (i - 1);\nloop invariant i49: i == n - sn + 1;\nloop invariant i50: i == n + 1 - sn;\nloop invariant i51: sn >= i - n;\nloop invariant i52: sn == i - n - 1;\nloop invariant i53: sn == i - n + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 16,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn >= 0;\n\n\n\n\nloop invariant i9: sn == (sn + 1) ==> i <= n;\nloop invariant i10: sn == (sn + 1) ==> i > 1;\nloop invariant i11: sn == (sn + 1) ==> i <= n + 1;\nloop invariant i12: sn == (sn + 1) ==> i >= 1;\nloop invariant i13: sn == (sn + 1) ==> (sn == (sn + 1));\n\nloop invariant i15: sn <= i - 1;\n\n\nloop invariant i18: (i == n + 1) ==> (sn == n);\nloop invariant i19: 0 <= i;\n\n\nloop invariant i22: i >= 1;\n\n\n\nloop invariant i26: i <= sn + 1;\nloop invariant i27: i > 0 ==> sn >= i - 1;\nloop invariant i28: sn < n ==> i <= n;\n\nloop invariant i30: i == n + 1 ==> sn == n;\n\nloop invariant i32: ( 0 <= sn );\nloop invariant i33: ( i > 0 );\n\n\n\nloop invariant i37: 0 <= i <= (sn + 1);\n\nloop invariant i39: i <= (sn + 1);\n\n\nloop invariant i42: sn == i - 1;\n\n\nloop invariant i45: ( sn <= (i - 1) );\nloop invariant i46: ( sn >= 0 );\nloop invariant i47: ( i >= 1 );\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c"
        ],
        "skipped": [],
        "total": 7,
        "success_count": 2,
        "failure_count": 5,
        "success_rate": 0.2857142857142857
    }
}