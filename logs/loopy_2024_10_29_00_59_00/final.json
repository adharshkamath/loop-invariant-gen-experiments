{
    "params": {
        "cli_args": {
            "config_file": "../config/loop_invariants.yaml",
            "no_preprocess": false,
            "termination_analysis": false,
            "recursive_functions": false,
            "loop_invariants": false,
            "loop_invariants_prompt": null,
            "repair_invariants": false,
            "repair_input": "",
            "repair_retries": 5,
            "repair_from_k": 0,
            "max_benchmarks": 20,
            "start_index": 0,
            "debug": false,
            "check_only": true,
            "input_log": "../../syncode/loopy_expts/logs/2024_10_27_22_10_15_expt_logs_processed.json"
        },
        "config_file_args": {
            "checker": "frama-c",
            "model": "gpt-4-32k",
            "benchmarks": "syncode/benchmarks.txt",
            "benchmark_features": "one_loop_one_method",
            "debug": true
        }
    },
    "logs": [
        {
            "file": "../dataset/loop_invariants/code2inv/65.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y == 100 - x;\nloop invariant y <= 100;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x == 101 implies y == 0;\nloop invariant x < 101 implies y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 1 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant y <= 100 - x;\nloop invariant x <= 100 - y;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x <= 100 ==> y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x >= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 101;\nloop invariant 99 >= y >= 0;\nloop invariant 99 <= x + y <= 101;\nloop invariant y + x == 100;\nloop invariant y == 100 - x;\nloop invariant (x <= 100) ==> y >= 0;\nloop invariant (x <= 100) ==> y == 100 - x;\nloop invariant (x <= 100) ==> 99 <= x + y <= 101;\nloop invariant (x <= 100) ==> 99 <= y <= 100;\nloop invariant (x <= 100) ==> y + x == 100;\nloop invariant (x <= 100) ==> 99 <= x <= 100;\nloop invariant x == 100 ==> y == 0;\nloop invariant x == 100 ==> y + x == 100;\nloop invariant x == 100 ==> 99 <= y <= 0;\nloop invariant x == 100 ==> y + x == 100;\nloop invariant x == 100 ==> y == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x >= 1;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -100 <= y <= 0;\nloop invariant y = 100 - x;\nloop invariant x + abs(y) < 101;\nloop invariant x + y < 101;\nloop invariant x + abs(y) = 100;\nloop invariant x + y = 100;\nloop invariant x + abs(y) = 100 ==> x <= 50;\nloop invariant x + y = 100 ==> x <= 50;\nloop invariant x + abs(y) = 100 ==> y <= 50;\nloop invariant x + y = 100 ==> y <= 50;\nloop invariant x + abs(y) = 100 ==> x >= -50;\nloop invariant x + y = 100 ==> x >= -50;\nloop invariant x + abs(y) = 100 ==> y >= -50;\nloop invariant x + y = 100 ==> y >= -50;\nloop invariant x <= 50 ==> abs(y) <= 50;\nloop invariant y <= 50 ==> x <= 50;\nloop invariant x >= -50 ==> abs(y) <= 50;\nloop invariant y >= -50 ==> x <= 50;\nloop invariant x <= 50 ==> y >= -50;\nloop invariant y <= 50 ==> x >= -50;\nloop invariant x >= -50 ==> y >= -50;\nloop invariant y >= -50 ==> x >= -50;\nloop invariant x + abs(y) = 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> x + abs(y) = 100;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x == 101 - y;\nloop invariant x <= x + 1;\nloop invariant y == 100 - (x - 1);\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\nloop invariant x + y >= 100;\nloop invariant x >= 1 && x <= 100 ==> y >= 0 && y <= 99;\nloop invariant x >= 1 && x <= 100 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 100 ==> x + y >= 100;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 101 ==> x + y == 101;\nloop invariant x == 101 ==> y == 100 - x;\nloop invariant x >= 1 && x <= 101 ==> y >= 0 && y <= 100;\nloop invariant x >= 1 && x <= 101 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 101 ==> x + y >= 101;\nloop invariant x == 102 ==> y == -2;\nloop invariant x == 102 ==> x + y == 100;\nloop invariant x == 102 ==> y == 100 - x;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\nloop invariant x + y >= 100;\nloop invariant x >= 1 && x <= 100 ==> y >= 0 && y <= 99;\nloop invariant x >= 1 && x <= 100 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 100 ==> x + y >= 100;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 101 ==> x + y == 101;\nloop invariant x == 101 ==> y == 100 - x;\nloop invariant x >= 1 && x <= 101 ==> y >= 0 && y <= 100;\nloop invariant x >= 1 && x <= 101 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 101 ==> x + y >= 101;\nloop invariant x == 102 ==> y == -2;\nloop invariant x == 102 ==> x + y == 100;\nloop invariant x == 102 ==> y == 100 - x;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y >= 101;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 102 ==> y == -2;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y >= 101;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 102 ==> y == -2;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x < 100 ==> y == 100 - x;\nloop invariant x == 100 ==> y == 0;\n*/\n```",
                "```\n/*@\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant y = 100 - x ==> y >= 0;\nloop invariant y = 100 - x ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y == (100 - x);\nloop invariant (x <= 100) ==> (y >= 0);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y == 100 - x;\nloop invariant y <= 100;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 100 is established but not preserved.\nloop invariant y == 100 - x is neither established nor preserved.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x == 101 implies y == 0;\nloop invariant x < 101 implies y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token 'implies'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 1 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant y <= 100 - x;\nloop invariant x <= 100 - y;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x <= 100 ==> y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x >= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x >= y is neither established nor preserved.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 101;\nloop invariant 99 >= y >= 0;\nloop invariant 99 <= x + y <= 101;\nloop invariant y + x == 100;\nloop invariant y == 100 - x;\nloop invariant (x <= 100) ==> y >= 0;\nloop invariant (x <= 100) ==> y == 100 - x;\nloop invariant (x <= 100) ==> 99 <= x + y <= 101;\nloop invariant (x <= 100) ==> 99 <= y <= 100;\nloop invariant (x <= 100) ==> y + x == 100;\nloop invariant (x <= 100) ==> 99 <= x <= 100;\nloop invariant x == 100 ==> y == 0;\nloop invariant x == 100 ==> y + x == 100;\nloop invariant x == 100 ==> 99 <= y <= 0;\nloop invariant x == 100 ==> y + x == 100;\nloop invariant x == 100 ==> y == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 101 is partially proven to be inductive.\nloop invariant 99 >= y >= 0 is preserved but not established.\nloop invariant 99 <= x + y <= 101 is preserved but not established.\nloop invariant y + x == 100 is preserved but not established.\nloop invariant y == 100 - x is partially proven to be inductive.\nloop invariant (x <= 100) ==> y >= 0 is partially proven to be inductive.\nloop invariant (x <= 100) ==> y == 100 - x is partially proven to be inductive.\nloop invariant (x <= 100) ==> 99 <= x + y <= 101 is partially proven to be inductive.\nloop invariant (x <= 100) ==> 99 <= y <= 100 is partially proven to be inductive.\nloop invariant (x <= 100) ==> y + x == 100 is partially proven to be inductive.\nloop invariant (x <= 100) ==> 99 <= x <= 100 is preserved but not established.\nloop invariant x == 100 ==> y == 0 is partially proven to be inductive.\nloop invariant x == 100 ==> y + x == 100 is partially proven to be inductive.\nloop invariant x == 100 ==> 99 <= y <= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 0 <= x <= 101;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x >= 1;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\nloop invariant i3: x >= 1;\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 22,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -100 <= y <= 0;\nloop invariant y = 100 - x;\nloop invariant x + abs(y) < 101;\nloop invariant x + y < 101;\nloop invariant x + abs(y) = 100;\nloop invariant x + y = 100;\nloop invariant x + abs(y) = 100 ==> x <= 50;\nloop invariant x + y = 100 ==> x <= 50;\nloop invariant x + abs(y) = 100 ==> y <= 50;\nloop invariant x + y = 100 ==> y <= 50;\nloop invariant x + abs(y) = 100 ==> x >= -50;\nloop invariant x + y = 100 ==> x >= -50;\nloop invariant x + abs(y) = 100 ==> y >= -50;\nloop invariant x + y = 100 ==> y >= -50;\nloop invariant x <= 50 ==> abs(y) <= 50;\nloop invariant y <= 50 ==> x <= 50;\nloop invariant x >= -50 ==> abs(y) <= 50;\nloop invariant y >= -50 ==> x <= 50;\nloop invariant x <= 50 ==> y >= -50;\nloop invariant y <= 50 ==> x >= -50;\nloop invariant x >= -50 ==> y >= -50;\nloop invariant y >= -50 ==> x >= -50;\nloop invariant x + abs(y) = 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> x + abs(y) = 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: y <= 50 ==> x >= -50;\n\nloop invariant i23: y >= -50 ==> x >= -50;\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x == 101 - y;\nloop invariant x <= x + 1;\nloop invariant y == 100 - (x - 1);\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x == 101 - y is preserved but not established.\nloop invariant x <= x + 1 is partially proven to be inductive.\nloop invariant y == 100 - (x - 1) is partially proven to be inductive.\nloop invariant y >= 0 ==> x <= 100 is partially proven to be inductive.\nloop invariant y >= 0 ==> x == 101 - y is partially proven to be inductive.\nloop invariant y >= 0 ==> x <= x + 1 is partially proven to be inductive.\nloop invariant y >= 0 ==> y == 100 - (x - 1) is partially proven to be inductive.\nloop invariant y >= 0 ==> y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\nloop invariant i4: x <= x + 1;\n\n\n\nloop invariant i8: y >= 0 ==> x <= x + 1;\n\nloop invariant i10: y >= 0 ==> y >= 0;\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\nloop invariant x + y >= 100;\nloop invariant x >= 1 && x <= 100 ==> y >= 0 && y <= 99;\nloop invariant x >= 1 && x <= 100 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 100 ==> x + y >= 100;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 101 ==> x + y == 101;\nloop invariant x == 101 ==> y == 100 - x;\nloop invariant x >= 1 && x <= 101 ==> y >= 0 && y <= 100;\nloop invariant x >= 1 && x <= 101 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 101 ==> x + y >= 101;\nloop invariant x == 102 ==> y == -2;\nloop invariant x == 102 ==> x + y == 100;\nloop invariant x == 102 ==> y == 100 - x;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\nloop invariant x + y >= 100;\nloop invariant x >= 1 && x <= 100 ==> y >= 0 && y <= 99;\nloop invariant x >= 1 && x <= 100 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 100 ==> x + y >= 100;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 101 ==> x + y == 101;\nloop invariant x == 101 ==> y == 100 - x;\nloop invariant x >= 1 && x <= 101 ==> y >= 0 && y <= 100;\nloop invariant x >= 1 && x <= 101 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 101 ==> x + y >= 101;\nloop invariant x == 102 ==> y == -2;\nloop invariant x == 102 ==> x + y == 100;\nloop invariant x == 102 ==> y == 100 - x;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y >= 101;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 102 ==> y == -2;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y >= 101;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 102 ==> y == -2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= 101;\n\n\n\n\n\n\nloop invariant i8: x == 101 ==> y == 0;\nloop invariant i9: x == 101 ==> x + y == 101;\n\n\n\n\nloop invariant i14: x == 102 ==> y == -2;\nloop invariant i15: x == 102 ==> x + y == 100;\nloop invariant i16: x == 102 ==> y == 100 - x;\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 101 is partially proven to be inductive.\nloop invariant 0 <= y <= 100 is preserved but not established.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= 101;\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x < 100 ==> y == 100 - x;\nloop invariant x == 100 ==> y == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x < 100 ==> y == 100 - x is neither established nor preserved.\nloop invariant x == 100 ==> y == 0 is established but not preserved.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 15,
                    "annotations": "```\n/*@\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant y = 100 - x ==> y >= 0;\nloop invariant y = 100 - x ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\nloop invariant i5: x >= 0;\n\n\n\nloop invariant i9: x <= 100 ==> x >= 0;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y == (100 - x);\nloop invariant (x <= 100) ==> (y >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant y == (100 - x) is neither established nor preserved.\nloop invariant (x <= 100) ==> (y >= 0) is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token 'implies'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= 100;\nloop invariant i2: y == 100 - x;\nloop invariant i3: y <= 100;\nloop invariant i4: y >= 0;\nloop invariant i5: 0 <= y <= 100;\nloop invariant i6: x == 101 implies y == 0;\nloop invariant i7: x < 101 implies y >= 0;\nloop invariant i8: 1 <= y <= 100;\nloop invariant i9: y = 100 - x;\nloop invariant i10: y <= 100 - x;\nloop invariant i11: x <= 100 - y;\nloop invariant i12: x <= 100;\nloop invariant i13: 0 <= x <= 100;\nloop invariant i14: x <= 100 ==> y >= 0;\nloop invariant i15: x >= y;\nloop invariant i16: 0 <= x <= 101;\nloop invariant i17: 99 >= y >= 0;\nloop invariant i18: 99 <= x + y <= 101;\nloop invariant i19: y + x == 100;\nloop invariant i20: (x <= 100) ==> y >= 0;\nloop invariant i21: (x <= 100) ==> y == 100 - x;\nloop invariant i22: (x <= 100) ==> 99 <= x + y <= 101;\nloop invariant i23: (x <= 100) ==> 99 <= y <= 100;\nloop invariant i24: (x <= 100) ==> y + x == 100;\nloop invariant i25: (x <= 100) ==> 99 <= x <= 100;\nloop invariant i26: x == 100 ==> y == 0;\nloop invariant i27: x == 100 ==> y + x == 100;\nloop invariant i28: x == 100 ==> 99 <= y <= 0;\nloop invariant i29: x >= 1;\nloop invariant i30: -100 <= y <= 0;\nloop invariant i31: x + abs(y) < 101;\nloop invariant i32: x + y < 101;\nloop invariant i33: x + abs(y) = 100;\nloop invariant i34: x + y = 100;\nloop invariant i35: x + abs(y) = 100 ==> x <= 50;\nloop invariant i36: x + y = 100 ==> x <= 50;\nloop invariant i37: x + abs(y) = 100 ==> y <= 50;\nloop invariant i38: x + y = 100 ==> y <= 50;\nloop invariant i39: x + abs(y) = 100 ==> x >= -50;\nloop invariant i40: x + y = 100 ==> x >= -50;\nloop invariant i41: x + abs(y) = 100 ==> y >= -50;\nloop invariant i42: x + y = 100 ==> y >= -50;\nloop invariant i43: x <= 50 ==> abs(y) <= 50;\nloop invariant i44: y <= 50 ==> x <= 50;\nloop invariant i45: x >= -50 ==> abs(y) <= 50;\nloop invariant i46: y >= -50 ==> x <= 50;\nloop invariant i47: x <= 50 ==> y >= -50;\nloop invariant i48: y <= 50 ==> x >= -50;\nloop invariant i49: x >= -50 ==> y >= -50;\nloop invariant i50: y >= -50 ==> x >= -50;\nloop invariant i51: x + abs(y) = 100 ==> x + y = 100;\nloop invariant i52: x + y = 100 ==> x + abs(y) = 100;\nloop invariant i53: x == 101 - y;\nloop invariant i54: x <= x + 1;\nloop invariant i55: y == 100 - (x - 1);\nloop invariant i56: y >= 0 ==> x <= 100;\nloop invariant i57: y >= 0 ==> x == 101 - y;\nloop invariant i58: y >= 0 ==> x <= x + 1;\nloop invariant i59: y >= 0 ==> y == 100 - (x - 1);\nloop invariant i60: y >= 0 ==> y >= 0;\nloop invariant i61: 1 <= x <= 101;\nloop invariant i62: 0 <= y <= 99;\nloop invariant i63: x + y >= 100;\nloop invariant i64: x >= 1 && x <= 100 ==> y >= 0 && y <= 99;\nloop invariant i65: x >= 1 && x <= 100 ==> y = 100 - x;\nloop invariant i66: x >= 1 && x <= 100 ==> x + y >= 100;\nloop invariant i67: x == 101 ==> y == 0;\nloop invariant i68: x == 101 ==> x + y == 101;\nloop invariant i69: x == 101 ==> y == 100 - x;\nloop invariant i70: x >= 1 && x <= 101 ==> y >= 0 && y <= 100;\nloop invariant i71: x >= 1 && x <= 101 ==> y = 100 - x;\nloop invariant i72: x >= 1 && x <= 101 ==> x + y >= 101;\nloop invariant i73: x == 102 ==> y == -2;\nloop invariant i74: x == 102 ==> x + y == 100;\nloop invariant i75: x == 102 ==> y == 100 - x;\nloop invariant i76: x + y >= 101;\nloop invariant i77: x < 100 ==> y == 100 - x;\nloop invariant i78: x >= 0;\nloop invariant i79: x <= 100 ==> y = 100 - x;\nloop invariant i80: x >= 0 ==> y >= 0;\nloop invariant i81: y >= 0 ==> y <= 100;\nloop invariant i82: x <= 100 ==> x >= 0;\nloop invariant i83: y = 100 - x ==> y >= 0;\nloop invariant i84: y = 100 - x ==> y <= 100;\nloop invariant i85: y >= 0 ==> y = 100 - x;\nloop invariant i86: y <= 100 ==> y = 100 - x;\nloop invariant i87: x >= 0 ==> x = 100 - y;\nloop invariant i88: x <= 100 ==> x = 100 - y;\nloop invariant i89: y >= 0 ==> x = 100 - y;\nloop invariant i90: y <= 100 ==> x = 100 - y;\nloop invariant i91: x <= 100 ==> y <= 100;\nloop invariant i92: y <= 100 ==> y >= 0;\nloop invariant i93: x >= 0 ==> x <= 100;\nloop invariant i94: y == (100 - x);\nloop invariant i95: (x <= 100) ==> (y >= 0);\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 50,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: 0 <= x <= 101;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i29: x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i48: y <= 50 ==> x >= -50;\n\nloop invariant i50: y >= -50 ==> x >= -50;\n\n\n\nloop invariant i54: x <= x + 1;\n\n\n\nloop invariant i58: y >= 0 ==> x <= x + 1;\n\nloop invariant i60: y >= 0 ==> y >= 0;\nloop invariant i61: 1 <= x <= 101;\n\n\n\n\n\nloop invariant i67: x == 101 ==> y == 0;\nloop invariant i68: x == 101 ==> x + y == 101;\n\n\n\n\nloop invariant i73: x == 102 ==> y == -2;\nloop invariant i74: x == 102 ==> x + y == 100;\nloop invariant i75: x == 102 ==> y == 100 - x;\n\n\nloop invariant i78: x >= 0;\n\n\n\nloop invariant i82: x <= 100 ==> x >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n; sn <= n ==> sn >= 0;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == n ==> v1 == INT_MAX;\nloop invariant sn == n ==> v2 == INT_MAX;\nloop invariant sn == n ==> v3 == INT_MAX;\nloop invariant sn == n ==> v1 == INT_MIN;\nloop invariant sn == n ==> v2 == INT_MIN;\nloop invariant sn == n ==> v3 == INT_MIN;\nloop invariant sn == n ==> v1 == n;\nloop invariant sn == n ==> v2 == n;\nloop invariant sn == n ==> v3 == n;\nloop invariant sn == n ==> v1 == 0;\nloop invariant sn == n ==> v2 == 0;\nloop invariant sn == n ==> v3 == 0;\nloop invariant sn == n ==> v1 == -1;\nloop invariant sn == n ==> v2 == -1;\nloop invariant sn == n ==> v3 == -1;\nloop invariant sn == n ==> v1 == -2;\nloop invariant sn == n ==> v2 == -2;\nloop invariant sn == n ==> v3 == -2;\nloop invariant sn == n ==> v1 == -3;\nloop invariant sn == n ==> v2 == -3;\nloop invariant sn == n ==> v3 == -3;\nloop invariant sn == n ==> v1 == -4;\nloop invariant sn == n ==> v2 == -4;\nloop invariant sn == n ==> v3 == -4;\nloop invariant sn == n ==> v1 == -5;\nloop invariant sn == n ==> v2 == -5;\nloop invariant sn == n ==> v3 == -5;\nloop invariant sn == n ==> v1 == -6;\nloop invariant sn == n ==> v2 == -6;\nloop invariant sn == n ==> v3 == -6;\nloop invariant sn == n ==> v1 == -7;\nloop invariant sn == n ==> v2 == -7;\nloop invariant sn == n ==> v3 == -7;\nloop invariant sn == n ==> v1 == -8;\nloop invariant sn == n ==> v2 == -8;\nloop invariant sn == n ==> v3 == -8;\nloop invariant sn == n ==> v1 == -9;\nloop invariant sn == n ==> v2 == -9;\nloop invariant sn == n ==> v3 == -9;\nloop invariant sn == n ==> v1 == -10;\nloop invariant sn == n ==> v2 == -10;\nloop invariant sn == n ==> v3 == -10;\nloop invariant sn == n ==> v1 == -11;\nloop invariant sn == n ==> v2 == -11;\nloop invariant sn == n ==> v3 == -11;\nloop invariant sn == n ==> v1 == -12;\nloop invariant sn == n ==> v2 == -12;\nloop invariant sn == n ==> v3 == -12;\nloop invariant sn == n ==> v1 == -13;\nloop invariant sn == n ==> v2 == -13;\nloop invariant sn == n ==> v3 == -13;\nloop invariant sn == n ==> v1 == -14;\nloop invariant sn == n ==> v2 == -14;\nloop invariant sn == n ==> v3 == -14;\nloop invariant sn == n ==> v1 == -15;\nloop invariant sn == n ==> v2 == -15;\nloop invariant sn == n ==> v3 == -15;\nloop invariant sn == n ==> v1 == -16;\nloop invariant sn == n ==> v2 == -16;\nloop invariant sn == n ==> v3 == -16;\nloop invariant sn == n ==> v1 == -17;\nloop invariant sn == n ==> v2 == -17;\nloop invariant sn == n ==> v3 == -17;\nloop invariant sn == n ==> v1 == -18;\nloop invariant sn == n ==> v2 == -18;\nloop invariant sn == n ==> v3 == -18;\nloop invariant sn == n ==> v1 == -19;\nloop invariant sn == n ==> v2 == -19;\nloop invariant sn == n ==> v3 == -19;\nloop invariant sn == n ==> v1 == -20;\nloop invariant sn == n ==> v2 == -20;\nloop invariant sn == n ==> v3 == -20;\nloop invariant sn == n ==> v1 == -21;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n <= 2147483647;\nloop invariant -2147483648 <= v1 <= 2147483647;\nloop invariant -2147483648 <= v2 <= 2147483647;\nloop invariant -2147483648 <= v3 <= 2147483647;\nloop invariant 0 < i <= n;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant i <= n;\nloop invariant -2147483648 <= sn <= 2147483647;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn + 1 == ((i * (i + 1)) / 2);\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\n*/\n```",
                "```\n/*@\nloop invariant i = i + 1;\nloop invariant sn = sn + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant (sn + 1) >= 0;\nloop invariant (sn + 1) <= n + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == v2;\nloop invariant v1 == v3;\nloop invariant v2 == v3;\nloop invariant sn == n || sn == 0;\nloop invariant i == n + 1;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\nloop invariant sn == 0 || sn == n;\nloop invariant i == 1 || i == n + 1;\nloop invariant (i <= n ==> sn == n);\nloop invariant (i > n ==> sn == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\nloop invariant sn == (i-1);\nloop invariant (v1 <= v2) ==> (v2 <= v3);\nloop invariant (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == n * (n + 1) / 2;\nloop invariant i == n || i == 0;\nloop invariant i == n || sn == 0;\nloop invariant i == n || sn == n * (n + 1) / 2;\nloop invariant i == 0 || sn == n * (n + 1) / 2;\nloop invariant i == 0 || sn == 0;\nloop invariant i == 0 || sn == n * (n + 1) / 2;\nloop invariant i == n || sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant ((i <= n ==> sn == i) && (i > n ==> sn == 0));\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant (sn == n ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (sn == n ==> v1 == v2 && v2 == v3);\nloop invariant (sn == 0 ==> v1 == v2 && v2 == v3);\nloop invariant (sn == n ==> v1 == v2);\nloop invariant (sn == 0 ==> v1 == v2);\nloop invariant (sn == n ==> v2 == v3);\nloop invariant (sn == 0 ==> v2 == v3);\nloop invariant (sn == n ==> v1 == v3);\nloop invariant (sn == 0 ==> v1 == v3);\nloop invariant (sn == n ==> v1 == v2 + v3);\nloop invariant (sn == 0 ==> v1 == v2 + v3);\nloop invariant (sn == n ==> v2 == v1 + v3);\nloop invariant (sn == 0 ==> v2 == v1 + v3);\nloop invariant (sn == n ==> v3 == v1 + v2);\nloop invariant (sn == 0 ==> v3 == v1 + v2);\nloop invariant (sn == n ==> v1 + v2 + v3 == 1);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 1);\nloop invariant (sn == n ==> v1 + v2 + v3 == 2);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 2);\nloop invariant (sn == n ==> v1 + v2 + v3 == 3);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 3);\nloop invariant (sn == n ==> v1 + v2 + v3 == 4);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 4);\nloop invariant (sn == n ==> v1 + v2 + v3 == 5);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 5);\nloop invariant (sn == n ==> v1 + v2 + v3 == 6);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 6);\nloop invariant (sn == n ==> v1 + v2 + v3 == 7);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 7);\nloop invariant (sn == n ==> v1 + v2 + v3 == 8);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 8);\nloop invariant (sn == n ==> v1 + v2 + v3 == 9);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 9);\nloop invariant (sn == n ==> v1 + v2 + v3 == 10);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 10);\nloop invariant (sn == n ==> v1 + v2 + v3 == 11);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 11);\nloop invariant (sn == n ==> v1 + v2 + v3 == 12);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 12);\nloop invariant (sn == n ==> v1 + v2 + v3 == 13);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 13);\nloop invariant (sn == n ==> v1 + v2 + v3 == 14);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 14);\nloop invariant (sn == n ==> v1 + v2 + v3 == 15);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 15);\nloop invariant (sn == n ==> v1 + v2 + v3 == 16);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 16);\nloop invariant (sn == n ==> v1 + v2 + v3 == 17);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant v1 != v2;\nloop invariant v1 != v3;\nloop invariant v2 != v3;\nloop invariant (sn == n ==> 1 <= i <= n);\nloop invariant (sn == n ==> v1 == unknown_int());\nloop invariant (sn == n ==> v2 == unknown_int());\nloop invariant (sn == n ==> v3 == unknown_int());\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn == 0 ==> v1 == unknown_int());\nloop invariant (sn == 0 ==> v2 == unknown_int());\nloop invariant (sn == 0 ==> v3 == unknown_int());\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn == (i - 1);\nloop invariant v1 == sn;\nloop invariant v2 == sn;\nloop invariant v3 == sn;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn == (i - 1);\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 20,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n; sn <= n ==> sn >= 0;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == n ==> v1 == INT_MAX;\nloop invariant sn == n ==> v2 == INT_MAX;\nloop invariant sn == n ==> v3 == INT_MAX;\nloop invariant sn == n ==> v1 == INT_MIN;\nloop invariant sn == n ==> v2 == INT_MIN;\nloop invariant sn == n ==> v3 == INT_MIN;\nloop invariant sn == n ==> v1 == n;\nloop invariant sn == n ==> v2 == n;\nloop invariant sn == n ==> v3 == n;\nloop invariant sn == n ==> v1 == 0;\nloop invariant sn == n ==> v2 == 0;\nloop invariant sn == n ==> v3 == 0;\nloop invariant sn == n ==> v1 == -1;\nloop invariant sn == n ==> v2 == -1;\nloop invariant sn == n ==> v3 == -1;\nloop invariant sn == n ==> v1 == -2;\nloop invariant sn == n ==> v2 == -2;\nloop invariant sn == n ==> v3 == -2;\nloop invariant sn == n ==> v1 == -3;\nloop invariant sn == n ==> v2 == -3;\nloop invariant sn == n ==> v3 == -3;\nloop invariant sn == n ==> v1 == -4;\nloop invariant sn == n ==> v2 == -4;\nloop invariant sn == n ==> v3 == -4;\nloop invariant sn == n ==> v1 == -5;\nloop invariant sn == n ==> v2 == -5;\nloop invariant sn == n ==> v3 == -5;\nloop invariant sn == n ==> v1 == -6;\nloop invariant sn == n ==> v2 == -6;\nloop invariant sn == n ==> v3 == -6;\nloop invariant sn == n ==> v1 == -7;\nloop invariant sn == n ==> v2 == -7;\nloop invariant sn == n ==> v3 == -7;\nloop invariant sn == n ==> v1 == -8;\nloop invariant sn == n ==> v2 == -8;\nloop invariant sn == n ==> v3 == -8;\nloop invariant sn == n ==> v1 == -9;\nloop invariant sn == n ==> v2 == -9;\nloop invariant sn == n ==> v3 == -9;\nloop invariant sn == n ==> v1 == -10;\nloop invariant sn == n ==> v2 == -10;\nloop invariant sn == n ==> v3 == -10;\nloop invariant sn == n ==> v1 == -11;\nloop invariant sn == n ==> v2 == -11;\nloop invariant sn == n ==> v3 == -11;\nloop invariant sn == n ==> v1 == -12;\nloop invariant sn == n ==> v2 == -12;\nloop invariant sn == n ==> v3 == -12;\nloop invariant sn == n ==> v1 == -13;\nloop invariant sn == n ==> v2 == -13;\nloop invariant sn == n ==> v3 == -13;\nloop invariant sn == n ==> v1 == -14;\nloop invariant sn == n ==> v2 == -14;\nloop invariant sn == n ==> v3 == -14;\nloop invariant sn == n ==> v1 == -15;\nloop invariant sn == n ==> v2 == -15;\nloop invariant sn == n ==> v3 == -15;\nloop invariant sn == n ==> v1 == -16;\nloop invariant sn == n ==> v2 == -16;\nloop invariant sn == n ==> v3 == -16;\nloop invariant sn == n ==> v1 == -17;\nloop invariant sn == n ==> v2 == -17;\nloop invariant sn == n ==> v3 == -17;\nloop invariant sn == n ==> v1 == -18;\nloop invariant sn == n ==> v2 == -18;\nloop invariant sn == n ==> v3 == -18;\nloop invariant sn == n ==> v1 == -19;\nloop invariant sn == n ==> v2 == -19;\nloop invariant sn == n ==> v3 == -19;\nloop invariant sn == n ==> v1 == -20;\nloop invariant sn == n ==> v2 == -20;\nloop invariant sn == n ==> v3 == -20;\nloop invariant sn == n ==> v1 == -21;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token 'sn'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= n <= 2147483647;\nloop invariant -2147483648 <= v1 <= 2147483647;\nloop invariant -2147483648 <= v2 <= 2147483647;\nloop invariant -2147483648 <= v3 <= 2147483647;\nloop invariant 0 < i <= n;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant i <= n;\nloop invariant -2147483648 <= sn <= 2147483647;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn + 1 == ((i * (i + 1)) / 2);\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n <= 2147483647 is preserved but not established.\nloop invariant -2147483648 <= v1 <= 2147483647 is partially proven to be inductive.\nloop invariant -2147483648 <= v2 <= 2147483647 is partially proven to be inductive.\nloop invariant -2147483648 <= v3 <= 2147483647 is partially proven to be inductive.\nloop invariant 0 < i <= n is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant -2147483648 <= sn <= 2147483647 is partially proven to be inductive.\nloop invariant sn + 1 == sn * (sn + 1) / 2 is preserved but not established.\nloop invariant sn + 1 == ((i * (i + 1)) / 2) is partially proven to be inductive.\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2 is partially proven to be inductive.\nloop invariant i <= n+1 is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: -2147483648 <= v1 <= 2147483647;\nloop invariant i3: -2147483648 <= v2 <= 2147483647;\nloop invariant i4: -2147483648 <= v3 <= 2147483647;\n\n\nloop invariant i7: sn >= 0;\n\nloop invariant i9: -2147483648 <= sn <= 2147483647;\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant i = i + 1;\nloop invariant sn = sn + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant (sn + 1) >= 0;\nloop invariant (sn + 1) <= n + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant v1 >= -2147483648 is partially proven to be inductive.\nloop invariant v1 <= 2147483647 is partially proven to be inductive.\nloop invariant v2 >= -2147483648 is partially proven to be inductive.\nloop invariant v2 <= 2147483647 is partially proven to be inductive.\nloop invariant v3 >= -2147483648 is partially proven to be inductive.\nloop invariant v3 <= 2147483647 is partially proven to be inductive.\nloop invariant (sn + 1) >= 0 is partially proven to be inductive.\nloop invariant (sn + 1) <= n + 1 is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i;\nloop invariant i4: v1 >= -2147483648;\nloop invariant i5: v1 <= 2147483647;\nloop invariant i6: v2 >= -2147483648;\nloop invariant i7: v2 <= 2147483647;\nloop invariant i8: v3 >= -2147483648;\nloop invariant i9: v3 <= 2147483647;\nloop invariant i10: (sn + 1) >= 0;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == v2;\nloop invariant v1 == v3;\nloop invariant v2 == v3;\nloop invariant sn == n || sn == 0;\nloop invariant i == n + 1;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant v1 >= 0 is preserved but not established.\nloop invariant v2 >= 0 is preserved but not established.\nloop invariant v3 >= 0 is preserved but not established.\nloop invariant v1 <= 1 is preserved but not established.\nloop invariant v2 <= 1 is preserved but not established.\nloop invariant v3 <= 1 is preserved but not established.\nloop invariant v1 == v2 is preserved but not established.\nloop invariant v1 == v3 is preserved but not established.\nloop invariant v2 == v3 is partially proven to be inductive.\nloop invariant sn == n || sn == 0 is partially proven to be inductive.\nloop invariant i == n + 1 is preserved but not established.\nloop invariant sn == n is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\nloop invariant sn == 0 || sn == n;\nloop invariant i == 1 || i == n + 1;\nloop invariant (i <= n ==> sn == n);\nloop invariant (i > n ==> sn == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\nloop invariant sn == (i-1);\nloop invariant (v1 <= v2) ==> (v2 <= v3);\nloop invariant (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant 0 <= v1 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v2 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v3 <= RAND_MAX is neither established nor preserved.\nloop invariant sn == (i-1) is partially proven to be inductive.\nloop invariant (v1 <= v2) ==> (v2 <= v3) is neither established nor preserved.\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3) is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\nloop invariant i6: sn == (i-1);\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == n * (n + 1) / 2;\nloop invariant i == n || i == 0;\nloop invariant i == n || sn == 0;\nloop invariant i == n || sn == n * (n + 1) / 2;\nloop invariant i == 0 || sn == n * (n + 1) / 2;\nloop invariant i == 0 || sn == 0;\nloop invariant i == 0 || sn == n * (n + 1) / 2;\nloop invariant i == n || sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant 0 <= v1 <= 1 is preserved but not established.\nloop invariant 0 <= v2 <= 1 is preserved but not established.\nloop invariant 0 <= v3 <= 1 is preserved but not established.\nloop invariant sn == n * (n + 1) / 2 is preserved but not established.\nloop invariant i == n || i == 0 is partially proven to be inductive.\nloop invariant i == n || sn == 0 is partially proven to be inductive.\nloop invariant i == n || sn == n * (n + 1) / 2 is partially proven to be inductive.\nloop invariant i == 0 || sn == n * (n + 1) / 2 is partially proven to be inductive.\nloop invariant i == 0 || sn == 0 is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant ((i <= n ==> sn == i) && (i > n ==> sn == 0));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i;\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant (sn == n ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (sn == n ==> v1 == v2 && v2 == v3);\nloop invariant (sn == 0 ==> v1 == v2 && v2 == v3);\nloop invariant (sn == n ==> v1 == v2);\nloop invariant (sn == 0 ==> v1 == v2);\nloop invariant (sn == n ==> v2 == v3);\nloop invariant (sn == 0 ==> v2 == v3);\nloop invariant (sn == n ==> v1 == v3);\nloop invariant (sn == 0 ==> v1 == v3);\nloop invariant (sn == n ==> v1 == v2 + v3);\nloop invariant (sn == 0 ==> v1 == v2 + v3);\nloop invariant (sn == n ==> v2 == v1 + v3);\nloop invariant (sn == 0 ==> v2 == v1 + v3);\nloop invariant (sn == n ==> v3 == v1 + v2);\nloop invariant (sn == 0 ==> v3 == v1 + v2);\nloop invariant (sn == n ==> v1 + v2 + v3 == 1);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 1);\nloop invariant (sn == n ==> v1 + v2 + v3 == 2);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 2);\nloop invariant (sn == n ==> v1 + v2 + v3 == 3);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 3);\nloop invariant (sn == n ==> v1 + v2 + v3 == 4);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 4);\nloop invariant (sn == n ==> v1 + v2 + v3 == 5);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 5);\nloop invariant (sn == n ==> v1 + v2 + v3 == 6);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 6);\nloop invariant (sn == n ==> v1 + v2 + v3 == 7);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 7);\nloop invariant (sn == n ==> v1 + v2 + v3 == 8);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 8);\nloop invariant (sn == n ==> v1 + v2 + v3 == 9);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 9);\nloop invariant (sn == n ==> v1 + v2 + v3 == 10);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 10);\nloop invariant (sn == n ==> v1 + v2 + v3 == 11);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 11);\nloop invariant (sn == n ==> v1 + v2 + v3 == 12);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 12);\nloop invariant (sn == n ==> v1 + v2 + v3 == 13);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 13);\nloop invariant (sn == n ==> v1 + v2 + v3 == 14);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 14);\nloop invariant (sn == n ==> v1 + v2 + v3 == 15);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 15);\nloop invariant (sn == n ==> v1 + v2 + v3 == 16);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 16);\nloop invariant (sn == n ==> v1 + v2 + v3 == 17);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn >= i is preserved but not established.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nloop invariant (sn == n ==> v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 == v2 && v2 == v3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 == v2 && v2 == v3) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 == v2) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 == v2) is partially proven to be inductive.\nloop invariant (sn == n ==> v2 == v3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v2 == v3) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 == v3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 == v3) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 == v2 + v3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 == v2 + v3) is partially proven to be inductive.\nloop invariant (sn == n ==> v2 == v1 + v3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v2 == v1 + v3) is partially proven to be inductive.\nloop invariant (sn == n ==> v3 == v1 + v2) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v3 == v1 + v2) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 1) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 1) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 2) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 2) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 3) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 4) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 4) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 5) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 5) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 6) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 6) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 7) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 7) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 8) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 8) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 9) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 9) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 10) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 10) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 11) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 11) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 12) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 12) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 13) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 13) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 14) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 14) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 15) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 15) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 16) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 16) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 17) is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i is preserved but not established.\nloop invariant 0 <= v1 <= RAND_MAX is partially proven to be inductive.\nloop invariant 0 <= v2 <= RAND_MAX is partially proven to be inductive.\nloop invariant 0 <= v3 <= RAND_MAX is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant v1 != v2;\nloop invariant v1 != v3;\nloop invariant v2 != v3;\nloop invariant (sn == n ==> 1 <= i <= n);\nloop invariant (sn == n ==> v1 == unknown_int());\nloop invariant (sn == n ==> v2 == unknown_int());\nloop invariant (sn == n ==> v3 == unknown_int());\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn == 0 ==> v1 == unknown_int());\nloop invariant (sn == 0 ==> v2 == unknown_int());\nloop invariant (sn == 0 ==> v3 == unknown_int());\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn == (i - 1);\nloop invariant v1 == sn;\nloop invariant v2 == sn;\nloop invariant v3 == sn;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant v1 >= 0 is neither established nor preserved.\nloop invariant v2 >= 0 is neither established nor preserved.\nloop invariant v3 >= 0 is neither established nor preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant v1 == sn is neither established nor preserved.\nloop invariant v2 == sn is neither established nor preserved.\nloop invariant v3 == sn is neither established nor preserved.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\nloop invariant i4: sn <= i;\n\n\n\nloop invariant i8: sn == (i - 1);\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 14: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\nloop invariant i1: 0 <= sn <= n;\nloop invariant i2: sn == (i - 1);\nloop invariant i3: v1 == unknown_int();\nloop invariant i4: v2 == unknown_int();\nloop invariant i5: v3 == unknown_int();\nloop invariant i6: 0 <= sn <= n; sn <= n ==> sn >= 0;\nloop invariant i7: 0 <= v1 <= INT_MAX;\nloop invariant i8: 0 <= v2 <= INT_MAX;\nloop invariant i9: 0 <= v3 <= INT_MAX;\nloop invariant i10: sn == 0 ==> v1 == 0;\nloop invariant i11: sn == 0 ==> v2 == 0;\nloop invariant i12: sn == 0 ==> v3 == 0;\nloop invariant i13: sn == n ==> v1 == INT_MAX;\nloop invariant i14: sn == n ==> v2 == INT_MAX;\nloop invariant i15: sn == n ==> v3 == INT_MAX;\nloop invariant i16: sn == n ==> v1 == INT_MIN;\nloop invariant i17: sn == n ==> v2 == INT_MIN;\nloop invariant i18: sn == n ==> v3 == INT_MIN;\nloop invariant i19: sn == n ==> v1 == n;\nloop invariant i20: sn == n ==> v2 == n;\nloop invariant i21: sn == n ==> v3 == n;\nloop invariant i22: sn == n ==> v1 == 0;\nloop invariant i23: sn == n ==> v2 == 0;\nloop invariant i24: sn == n ==> v3 == 0;\nloop invariant i25: sn == n ==> v1 == -1;\nloop invariant i26: sn == n ==> v2 == -1;\nloop invariant i27: sn == n ==> v3 == -1;\nloop invariant i28: sn == n ==> v1 == -2;\nloop invariant i29: sn == n ==> v2 == -2;\nloop invariant i30: sn == n ==> v3 == -2;\nloop invariant i31: sn == n ==> v1 == -3;\nloop invariant i32: sn == n ==> v2 == -3;\nloop invariant i33: sn == n ==> v3 == -3;\nloop invariant i34: sn == n ==> v1 == -4;\nloop invariant i35: sn == n ==> v2 == -4;\nloop invariant i36: sn == n ==> v3 == -4;\nloop invariant i37: sn == n ==> v1 == -5;\nloop invariant i38: sn == n ==> v2 == -5;\nloop invariant i39: sn == n ==> v3 == -5;\nloop invariant i40: sn == n ==> v1 == -6;\nloop invariant i41: sn == n ==> v2 == -6;\nloop invariant i42: sn == n ==> v3 == -6;\nloop invariant i43: sn == n ==> v1 == -7;\nloop invariant i44: sn == n ==> v2 == -7;\nloop invariant i45: sn == n ==> v3 == -7;\nloop invariant i46: sn == n ==> v1 == -8;\nloop invariant i47: sn == n ==> v2 == -8;\nloop invariant i48: sn == n ==> v3 == -8;\nloop invariant i49: sn == n ==> v1 == -9;\nloop invariant i50: sn == n ==> v2 == -9;\nloop invariant i51: sn == n ==> v3 == -9;\nloop invariant i52: sn == n ==> v1 == -10;\nloop invariant i53: sn == n ==> v2 == -10;\nloop invariant i54: sn == n ==> v3 == -10;\nloop invariant i55: sn == n ==> v1 == -11;\nloop invariant i56: sn == n ==> v2 == -11;\nloop invariant i57: sn == n ==> v3 == -11;\nloop invariant i58: sn == n ==> v1 == -12;\nloop invariant i59: sn == n ==> v2 == -12;\nloop invariant i60: sn == n ==> v3 == -12;\nloop invariant i61: sn == n ==> v1 == -13;\nloop invariant i62: sn == n ==> v2 == -13;\nloop invariant i63: sn == n ==> v3 == -13;\nloop invariant i64: sn == n ==> v1 == -14;\nloop invariant i65: sn == n ==> v2 == -14;\nloop invariant i66: sn == n ==> v3 == -14;\nloop invariant i67: sn == n ==> v1 == -15;\nloop invariant i68: sn == n ==> v2 == -15;\nloop invariant i69: sn == n ==> v3 == -15;\nloop invariant i70: sn == n ==> v1 == -16;\nloop invariant i71: sn == n ==> v2 == -16;\nloop invariant i72: sn == n ==> v3 == -16;\nloop invariant i73: sn == n ==> v1 == -17;\nloop invariant i74: sn == n ==> v2 == -17;\nloop invariant i75: sn == n ==> v3 == -17;\nloop invariant i76: sn == n ==> v1 == -18;\nloop invariant i77: sn == n ==> v2 == -18;\nloop invariant i78: sn == n ==> v3 == -18;\nloop invariant i79: sn == n ==> v1 == -19;\nloop invariant i80: sn == n ==> v2 == -19;\nloop invariant i81: sn == n ==> v3 == -19;\nloop invariant i82: sn == n ==> v1 == -20;\nloop invariant i83: sn == n ==> v2 == -20;\nloop invariant i84: sn == n ==> v3 == -20;\nloop invariant i85: sn == n ==> v1 == -21;\nloop invariant i86: 1 <= n <= 2147483647;\nloop invariant i87: -2147483648 <= v1 <= 2147483647;\nloop invariant i88: -2147483648 <= v2 <= 2147483647;\nloop invariant i89: -2147483648 <= v3 <= 2147483647;\nloop invariant i90: 0 < i <= n;\nloop invariant i91: sn <= n;\nloop invariant i92: sn >= 0;\nloop invariant i93: i <= n;\nloop invariant i94: -2147483648 <= sn <= 2147483647;\nloop invariant i95: sn + 1 == sn * (sn + 1) / 2;\nloop invariant i96: sn + 1 == ((i * (i + 1)) / 2);\nloop invariant i97: sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i98: i <= n+1;\nloop invariant i99: i = i + 1;\nloop invariant i100: sn = sn + 1;\nloop invariant i101: v1 = unknown_int();\nloop invariant i102: v2 = unknown_int();\nloop invariant i103: v3 = unknown_int();\nloop invariant i104: 0 <= i <= n;\nloop invariant i105: sn <= i;\nloop invariant i106: v1 >= -2147483648;\nloop invariant i107: v1 <= 2147483647;\nloop invariant i108: v2 >= -2147483648;\nloop invariant i109: v2 <= 2147483647;\nloop invariant i110: v3 >= -2147483648;\nloop invariant i111: v3 <= 2147483647;\nloop invariant i112: (sn + 1) >= 0;\nloop invariant i113: (sn + 1) <= n + 1;\nloop invariant i114: 0 <= n;\nloop invariant i115: i >= 1;\nloop invariant i116: i <= n + 1;\nloop invariant i117: v1 >= 0;\nloop invariant i118: v2 >= 0;\nloop invariant i119: v3 >= 0;\nloop invariant i120: v1 <= 1;\nloop invariant i121: v2 <= 1;\nloop invariant i122: v3 <= 1;\nloop invariant i123: v1 == v2;\nloop invariant i124: v1 == v3;\nloop invariant i125: v2 == v3;\nloop invariant i126: sn == n || sn == 0;\nloop invariant i127: i == n + 1;\nloop invariant i128: sn == n;\nloop invariant i129: 0 <= v1 <= unknown_int();\nloop invariant i130: 0 <= v2 <= unknown_int();\nloop invariant i131: 0 <= v3 <= unknown_int();\nloop invariant i132: sn == 0 || sn == n;\nloop invariant i133: i == 1 || i == n + 1;\nloop invariant i134: (i <= n ==> sn == n);\nloop invariant i135: (i > n ==> sn == 0);\nloop invariant i136: 0 <= v1 <= RAND_MAX;\nloop invariant i137: 0 <= v2 <= RAND_MAX;\nloop invariant i138: 0 <= v3 <= RAND_MAX;\nloop invariant i139: sn == (i-1);\nloop invariant i140: (v1 <= v2) ==> (v2 <= v3);\nloop invariant i141: sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant i142: 0 <= v1 <= 1;\nloop invariant i143: 0 <= v2 <= 1;\nloop invariant i144: 0 <= v3 <= 1;\nloop invariant i145: sn == n * (n + 1) / 2;\nloop invariant i146: i == n || i == 0;\nloop invariant i147: i == n || sn == 0;\nloop invariant i148: i == n || sn == n * (n + 1) / 2;\nloop invariant i149: i == 0 || sn == n * (n + 1) / 2;\nloop invariant i150: i == 0 || sn == 0;\nloop invariant i151: 1 <= i <= n;\nloop invariant i152: ((i <= n ==> sn == i) && (i > n ==> sn == 0));\nloop invariant i153: sn == i;\nloop invariant i154: sn >= i;\nloop invariant i155: (sn == n ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i156: (sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i157: (sn == n ==> v1 == v2 && v2 == v3);\nloop invariant i158: (sn == 0 ==> v1 == v2 && v2 == v3);\nloop invariant i159: (sn == n ==> v1 == v2);\nloop invariant i160: (sn == 0 ==> v1 == v2);\nloop invariant i161: (sn == n ==> v2 == v3);\nloop invariant i162: (sn == 0 ==> v2 == v3);\nloop invariant i163: (sn == n ==> v1 == v3);\nloop invariant i164: (sn == 0 ==> v1 == v3);\nloop invariant i165: (sn == n ==> v1 == v2 + v3);\nloop invariant i166: (sn == 0 ==> v1 == v2 + v3);\nloop invariant i167: (sn == n ==> v2 == v1 + v3);\nloop invariant i168: (sn == 0 ==> v2 == v1 + v3);\nloop invariant i169: (sn == n ==> v3 == v1 + v2);\nloop invariant i170: (sn == 0 ==> v3 == v1 + v2);\nloop invariant i171: (sn == n ==> v1 + v2 + v3 == 1);\nloop invariant i172: (sn == 0 ==> v1 + v2 + v3 == 1);\nloop invariant i173: (sn == n ==> v1 + v2 + v3 == 2);\nloop invariant i174: (sn == 0 ==> v1 + v2 + v3 == 2);\nloop invariant i175: (sn == n ==> v1 + v2 + v3 == 3);\nloop invariant i176: (sn == 0 ==> v1 + v2 + v3 == 3);\nloop invariant i177: (sn == n ==> v1 + v2 + v3 == 4);\nloop invariant i178: (sn == 0 ==> v1 + v2 + v3 == 4);\nloop invariant i179: (sn == n ==> v1 + v2 + v3 == 5);\nloop invariant i180: (sn == 0 ==> v1 + v2 + v3 == 5);\nloop invariant i181: (sn == n ==> v1 + v2 + v3 == 6);\nloop invariant i182: (sn == 0 ==> v1 + v2 + v3 == 6);\nloop invariant i183: (sn == n ==> v1 + v2 + v3 == 7);\nloop invariant i184: (sn == 0 ==> v1 + v2 + v3 == 7);\nloop invariant i185: (sn == n ==> v1 + v2 + v3 == 8);\nloop invariant i186: (sn == 0 ==> v1 + v2 + v3 == 8);\nloop invariant i187: (sn == n ==> v1 + v2 + v3 == 9);\nloop invariant i188: (sn == 0 ==> v1 + v2 + v3 == 9);\nloop invariant i189: (sn == n ==> v1 + v2 + v3 == 10);\nloop invariant i190: (sn == 0 ==> v1 + v2 + v3 == 10);\nloop invariant i191: (sn == n ==> v1 + v2 + v3 == 11);\nloop invariant i192: (sn == 0 ==> v1 + v2 + v3 == 11);\nloop invariant i193: (sn == n ==> v1 + v2 + v3 == 12);\nloop invariant i194: (sn == 0 ==> v1 + v2 + v3 == 12);\nloop invariant i195: (sn == n ==> v1 + v2 + v3 == 13);\nloop invariant i196: (sn == 0 ==> v1 + v2 + v3 == 13);\nloop invariant i197: (sn == n ==> v1 + v2 + v3 == 14);\nloop invariant i198: (sn == 0 ==> v1 + v2 + v3 == 14);\nloop invariant i199: (sn == n ==> v1 + v2 + v3 == 15);\nloop invariant i200: (sn == 0 ==> v1 + v2 + v3 == 15);\nloop invariant i201: (sn == n ==> v1 + v2 + v3 == 16);\nloop invariant i202: (sn == 0 ==> v1 + v2 + v3 == 16);\nloop invariant i203: (sn == n ==> v1 + v2 + v3 == 17);\nloop invariant i204: v1 != v2;\nloop invariant i205: v1 != v3;\nloop invariant i206: v2 != v3;\nloop invariant i207: (sn == n ==> 1 <= i <= n);\nloop invariant i208: (sn == n ==> v1 == unknown_int());\nloop invariant i209: (sn == n ==> v2 == unknown_int());\nloop invariant i210: (sn == n ==> v3 == unknown_int());\nloop invariant i211: (sn == 0 ==> i == 1);\nloop invariant i212: (sn == 0 ==> v1 == unknown_int());\nloop invariant i213: (sn == 0 ==> v2 == unknown_int());\nloop invariant i214: (sn == 0 ==> v3 == unknown_int());\nloop invariant i215: v1 == sn;\nloop invariant i216: v2 == sn;\nloop invariant i217: v3 == sn;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 50,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn == (i - 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i87: -2147483648 <= v1 <= 2147483647;\nloop invariant i88: -2147483648 <= v2 <= 2147483647;\nloop invariant i89: -2147483648 <= v3 <= 2147483647;\n\n\nloop invariant i92: sn >= 0;\n\nloop invariant i94: -2147483648 <= sn <= 2147483647;\n\n\n\n\n\n\n\n\n\n\nloop invariant i105: sn <= i;\nloop invariant i106: v1 >= -2147483648;\nloop invariant i107: v1 <= 2147483647;\nloop invariant i108: v2 >= -2147483648;\nloop invariant i109: v2 <= 2147483647;\nloop invariant i110: v3 >= -2147483648;\nloop invariant i111: v3 <= 2147483647;\nloop invariant i112: (sn + 1) >= 0;\n\n\nloop invariant i115: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i139: sn == (i-1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i211: (sn == 0 ==> i == 1);\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  while( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= -50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x + y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant -50 <= x < 0;\nloop invariant 0 < y <= 100000;\nloop invariant x = -50 + y * (y - 1) / 2;\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant -50 < x;\nloop invariant x <= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 1 <= y <= 51;\nloop invariant x + y >= 0;\nloop invariant x >= -50;\nloop invariant y >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant x + y < 0;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x + y >= -50;\nloop invariant y <= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\nloop invariant x + y >= 0;\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\nloop invariant x + y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y < 50; loop invariant x <= -50; loop invariant x == -50 - y * (y + 1)/2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= x;\nloop invariant x >= -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= x is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x + y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= (y - 1) * y / 2 is preserved but not established.\nloop invariant x + y >= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant -50 <= x < 0;\nloop invariant 0 < y <= 100000;\nloop invariant x = -50 + y * (y - 1) / 2;\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y > 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant -50 < x;\nloop invariant x <= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant -50 < x is preserved but not established.\nloop invariant x <= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 1 <= y <= 51;\nloop invariant x + y >= 0;\nloop invariant x >= -50;\nloop invariant y >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is preserved but not established.\nloop invariant 1 <= y <= 51 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x + y < 0;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x + y >= -50;\nloop invariant y <= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x + y < 0 is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant x + y >= -50 is partially proven to be inductive.\nloop invariant y <= 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\nloop invariant x + y >= 0;\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\nloop invariant x + y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y < 50; loop invariant x <= -50; loop invariant x == -50 - y * (y + 1)/2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y < 50; loop invariant x <= -50; loop invariant x == -50 - y * (y + 1)/2 is neither established nor preserved.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\nloop invariant i1: 0 <= y <= x;\nloop invariant i2: x >= -50;\nloop invariant i3: 0 <= y;\nloop invariant i4: x >= (y - 1) * y / 2;\nloop invariant i5: x + y >= 0;\nloop invariant i6: -50 <= x < 0;\nloop invariant i7: 0 < y <= 100000;\nloop invariant i8: x = -50 + y * (y - 1) / 2;\nloop invariant i9: y > 0;\nloop invariant i10: -50 < x;\nloop invariant i11: x <= 0;\nloop invariant i12: 0 <= y <= 100000;\nloop invariant i13: x >= (1 + (y - 1) * y / 2);\nloop invariant i14: 1 <= y <= 100000;\nloop invariant i15: 0 <= x <= 50;\nloop invariant i16: 1 <= y <= 51;\nloop invariant i17: y >= 1;\nloop invariant i18: x + y < 0;\nloop invariant i19: x + y >= -50;\nloop invariant i20: y <= 0;\nloop invariant i21: 0 <= x <= -50;\nloop invariant i22: 0 <= y < 50; loop invariant x <= -50; loop invariant x == -50 - y * (y + 1)/2;\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 12,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  while (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1 || x == 2 || x == 3);\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1 || x == 2 || x == 3 || x == 4);\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\nloop invariant (x == 1 ==> y == 3);\nloop invariant (x == 2 ==> y == 4);\nloop invariant (x == 3 ==> y == 5);\nloop invariant (x == 4 ==> y == 6);\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2);\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6);\nloop invariant (x == 1 ==> y == 3 ==> i == 0);\nloop invariant (x == 2 ==> y == 4 ==> i == 1);\nloop invariant (x == 3 ==> y == 5 ==> i == 2);\nloop invariant (x == 4 ==> y == 6 ==> i == 3);\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4);\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5);\n*/\n```",
                "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 1;\nloop invariant x <= 4;\nloop invariant y >= 1;\nloop invariant y <= 6;\nloop invariant ((i == 0 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant ((i == 1 && x == 2 && y == 3) ==> (x == 3 || x == 1));\nloop invariant ((i == 2 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant ((i == 3 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1));\nloop invariant ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2));\nloop invariant ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4));\nloop invariant ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\nloop invariant !(y == 6);\nloop invariant (x == 1 ==> i <= 4);\nloop invariant (x == 2 ==> i <= 5);\nloop invariant (x == 3 ==> i <= 5);\nloop invariant (x == 4 ==> i <= 5);\nloop invariant (x == 1 ==> y == 5);\nloop invariant (x == 2 ==> y == 4);\nloop invariant (x == 3 ==> y == 3);\nloop invariant (x == 4 ==> y == 6);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\nloop invariant (y == 3 ==> (i == 0));\nloop invariant (y == 4 ==> (i == 1));\nloop invariant (y == 5 ==> (i == 2));\nloop invariant (y == 6 ==> (i == 3));\nloop invariant (y == 3 ==> (x == 1));\nloop invariant (y == 4 ==> (x == 2));\nloop invariant (y == 5 ==> (x == 3));\nloop invariant (y == 6 ==> (x == 4));\nloop invariant (y == 3 ==> (i == 0 ==> x == 1));\nloop invariant (y == 4 ==> (i == 1 ==> x == 2));\nloop invariant (y == 5 ==> (i == 2 ==> x == 3));\nloop invariant (y == 6 ==> (i == 3 ==> x == 4));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == (1 + (y - 1) * y / 2));\nloop invariant (y == 5) ==> (x == 1);\nloop invariant (y == 4) ==> (x == 2);\nloop invariant (y == 3) ==> (x == 3);\nloop invariant (y == 6) ==> (x == 4);\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 6;\nloop invariant x == (i - 1) % 4 + 1;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 5 || y == 6;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6);\nloop invariant x == 2 || (x == 3 && y == 4);\nloop invariant x == 3 || (x == 2 && y == 3);\nloop invariant x == 4 || (x == 3 && y == 5);\nloop invariant x == 1 || (x == 4 && y == 6);\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 5 || y == 6;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6);\nloop invariant x == 2 || (x == 3 && y == 4);\nloop invariant x == 3 || (x == 2 && y == 3);\nloop invariant x == 4 || (x == 3 && y == 5);\nloop invariant x == 1 || (x == 4 && y == 6);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10 && 1 <= x <= 4 && (x == 1 || x == 2 || x == 3 || x == 4) && (y >= 3 && y <= 6);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1) ==> (y == 3);\nloop invariant (x == 2) ==> (y == 4);\nloop invariant (x == 3) ==> (y == 5);\nloop invariant (x == 4) ==> (y == 6);\nloop invariant i < 10 ==> (x != 4);\nloop invariant i < 10 ==> (y != 6);\nloop invariant i == 10 ==> (x == 1);\nloop invariant i == 10 ==> (y == 5);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant (y != 6) ==> (y == 1 || y == 2 || y == 3 || y == 4);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 1 ==> y == 3;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 3 ==> y == 5;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 2;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant (i == 0) ==> (x == 1);\nloop invariant (i == 1) ==> (x == 2);\nloop invariant (i == 2) ==> (x == 3);\nloop invariant (i == 3) ==> (x == 1);\nloop invariant (i == 4) ==> (x == 2);\nloop invariant (i == 5) ==> (x == 3);\nloop invariant (i == 6) ==> (x == 1);\nloop invariant (i == 7) ==> (x == 2);\nloop invariant (i == 8) ==> (x == 3);\nloop invariant (i == 9) ==> (x == 1);\nloop invariant (i == 10) ==> (x == 2);\nloop invariant (i == 0) ==> (y == 0);\nloop invariant (i == 1) ==> (y == 3);\nloop invariant (i == 2) ==> (y == 4);\nloop invariant (i == 3) ==> (y == 5);\nloop invariant (i == 4) ==> (y == 6);\nloop invariant (i == 5) ==> (y == 7);\nloop invariant (i == 6) ==> (y == 8);\nloop invariant (i == 7) ==> (y == 9);\nloop invariant (i == 8) ==> (y == 10);\nloop invariant (i == 9) ==> (y == 11);\nloop invariant (i == 10) ==> (y == 12);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1 || x == 2 || x == 3);\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == 1 || x == 2 || x == 3) is partially proven to be inductive.\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6) is preserved but not established.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: (x == 1 || x == 2 || x == 3);\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1 || x == 2 || x == 3 || x == 4);\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\nloop invariant (x == 1 ==> y == 3);\nloop invariant (x == 2 ==> y == 4);\nloop invariant (x == 3 ==> y == 5);\nloop invariant (x == 4 ==> y == 6);\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2);\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6);\nloop invariant (x == 1 ==> y == 3 ==> i == 0);\nloop invariant (x == 2 ==> y == 4 ==> i == 1);\nloop invariant (x == 3 ==> y == 5 ==> i == 2);\nloop invariant (x == 4 ==> y == 6 ==> i == 3);\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4);\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == 1 || x == 2 || x == 3 || x == 4) is partially proven to be inductive.\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6) is preserved but not established.\nloop invariant (x == 1 ==> y == 3) is neither established nor preserved.\nloop invariant (x == 2 ==> y == 4) is established but not preserved.\nloop invariant (x == 3 ==> y == 5) is established but not preserved.\nloop invariant (x == 4 ==> y == 6) is partially proven to be inductive.\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2) is partially proven to be inductive.\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 3 ==> i == 0) is partially proven to be inductive.\nloop invariant (x == 2 ==> y == 4 ==> i == 1) is partially proven to be inductive.\nloop invariant (x == 3 ==> y == 5 ==> i == 2) is partially proven to be inductive.\nloop invariant (x == 4 ==> y == 6 ==> i == 3) is partially proven to be inductive.\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4) is partially proven to be inductive.\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: (x == 1 || x == 2 || x == 3 || x == 4);\n\n\n\n\nloop invariant i7: (x == 4 ==> y == 6);\nloop invariant i8: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2);\n\nloop invariant i10: (x == 1 ==> y == 3 ==> i == 0);\nloop invariant i11: (x == 2 ==> y == 4 ==> i == 1);\nloop invariant i12: (x == 3 ==> y == 5 ==> i == 2);\nloop invariant i13: (x == 4 ==> y == 6 ==> i == 3);\nloop invariant i14: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4);\nloop invariant i15: (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 1;\nloop invariant x <= 4;\nloop invariant y >= 1;\nloop invariant y <= 6;\nloop invariant ((i == 0 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant ((i == 1 && x == 2 && y == 3) ==> (x == 3 || x == 1));\nloop invariant ((i == 2 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant ((i == 3 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1));\nloop invariant ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2));\nloop invariant ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4));\nloop invariant ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant y <= 6 is preserved but not established.\nloop invariant ((i == 0 && x == 1 && y == 0) ==> (x == 2 || x == 3)) is partially proven to be inductive.\nloop invariant ((i == 1 && x == 2 && y == 3) ==> (x == 3 || x == 1)) is established but not preserved.\nloop invariant ((i == 2 && x == 3 && y == 4) ==> (x == 1 || x == 2)) is established but not preserved.\nloop invariant ((i == 3 && x == 1 && y == 5) ==> (x == 3 || x == 4)) is established but not preserved.\nloop invariant ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3)) is partially proven to be inductive.\nloop invariant ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1)) is partially proven to be inductive.\nloop invariant ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4)) is partially proven to be inductive.\nloop invariant ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2)) is established but not preserved.\nloop invariant ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4)) is established but not preserved.\nloop invariant ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= 10;\nloop invariant i3: x >= 1;\nloop invariant i4: x <= 4;\n\n\n\n\n\n\nloop invariant i11: ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant i12: ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant i13: ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1));\nloop invariant i14: ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2));\nloop invariant i15: ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4));\n\n\nloop invariant i18: ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2));\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\nloop invariant !(y == 6);\nloop invariant (x == 1 ==> i <= 4);\nloop invariant (x == 2 ==> i <= 5);\nloop invariant (x == 3 ==> i <= 5);\nloop invariant (x == 4 ==> i <= 5);\nloop invariant (x == 1 ==> y == 5);\nloop invariant (x == 2 ==> y == 4);\nloop invariant (x == 3 ==> y == 3);\nloop invariant (x == 4 ==> y == 6);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 3 <= y <= 6 is preserved but not established.\nloop invariant !(y == 6) is preserved but not established.\nloop invariant (x == 1 ==> i <= 4) is established but not preserved.\nloop invariant (x == 2 ==> i <= 5) is partially proven to be inductive.\nloop invariant (x == 3 ==> i <= 5) is established but not preserved.\nloop invariant (x == 4 ==> i <= 5) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 5) is preserved but not established.\nloop invariant (x == 2 ==> y == 4) is established but not preserved.\nloop invariant (x == 3 ==> y == 3) is established but not preserved.\nloop invariant (x == 4 ==> y == 6) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n\n\n\n\nloop invariant i8: (x == 4 ==> i <= 5);\n\n\n\nloop invariant i12: (x == 4 ==> y == 6);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\nloop invariant (y == 3 ==> (i == 0));\nloop invariant (y == 4 ==> (i == 1));\nloop invariant (y == 5 ==> (i == 2));\nloop invariant (y == 6 ==> (i == 3));\nloop invariant (y == 3 ==> (x == 1));\nloop invariant (y == 4 ==> (x == 2));\nloop invariant (y == 5 ==> (x == 3));\nloop invariant (y == 6 ==> (x == 4));\nloop invariant (y == 3 ==> (i == 0 ==> x == 1));\nloop invariant (y == 4 ==> (i == 1 ==> x == 2));\nloop invariant (y == 5 ==> (i == 2 ==> x == 3));\nloop invariant (y == 6 ==> (i == 3 ==> x == 4));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6) is preserved but not established.\nloop invariant (y == 3 ==> (i == 0)) is established but not preserved.\nloop invariant (y == 4 ==> (i == 1)) is neither established nor preserved.\nloop invariant (y == 5 ==> (i == 2)) is neither established nor preserved.\nloop invariant (y == 6 ==> (i == 3)) is neither established nor preserved.\nloop invariant (y == 3 ==> (x == 1)) is partially proven to be inductive.\nloop invariant (y == 4 ==> (x == 2)) is partially proven to be inductive.\nloop invariant (y == 5 ==> (x == 3)) is partially proven to be inductive.\nloop invariant (y == 6 ==> (x == 4)) is partially proven to be inductive.\nloop invariant (y == 3 ==> (i == 0 ==> x == 1)) is partially proven to be inductive.\nloop invariant (y == 4 ==> (i == 1 ==> x == 2)) is partially proven to be inductive.\nloop invariant (y == 5 ==> (i == 2 ==> x == 3)) is partially proven to be inductive.\nloop invariant (y == 6 ==> (i == 3 ==> x == 4)) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n\n\n\n\n\n\n\n\nloop invariant i12: (y == 3 ==> (i == 0 ==> x == 1));\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == (1 + (y - 1) * y / 2));\nloop invariant (y == 5) ==> (x == 1);\nloop invariant (y == 4) ==> (x == 2);\nloop invariant (y == 3) ==> (x == 3);\nloop invariant (y == 6) ==> (x == 4);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == (1 + (y - 1) * y / 2)) is neither established nor preserved.\nloop invariant (y == 5) ==> (x == 1) is partially proven to be inductive.\nloop invariant (y == 4) ==> (x == 2) is partially proven to be inductive.\nloop invariant (y == 3) ==> (x == 3) is partially proven to be inductive.\nloop invariant (y == 6) ==> (x == 4) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: (y == 5) ==> (x == 1);\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 6;\nloop invariant x == (i - 1) % 4 + 1;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is preserved but not established.\nloop invariant y == 3 || y == 4 || y == 6 is preserved but not established.\nloop invariant x == (i - 1) % 4 + 1 is preserved but not established.\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2 is partially proven to be inductive.\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 4;\n\n\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is preserved but not established.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 5 || y == 6;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6);\nloop invariant x == 2 || (x == 3 && y == 4);\nloop invariant x == 3 || (x == 2 && y == 3);\nloop invariant x == 4 || (x == 3 && y == 5);\nloop invariant x == 1 || (x == 4 && y == 6);\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 5 || y == 6;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6);\nloop invariant x == 2 || (x == 3 && y == 4);\nloop invariant x == 3 || (x == 2 && y == 3);\nloop invariant x == 4 || (x == 3 && y == 5);\nloop invariant x == 1 || (x == 4 && y == 6);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= 10 is preserved but not established.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is partially proven to be inductive.\nloop invariant y == 3 || y == 4 || y == 5 || y == 6 is partially proven to be inductive.\nloop invariant x == 1 || x == 2 || x == 3 || x == 4 is partially proven to be inductive.\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6) is partially proven to be inductive.\nloop invariant x == 2 || (x == 3 && y == 4) is partially proven to be inductive.\nloop invariant x == 3 || (x == 2 && y == 3) is partially proven to be inductive.\nloop invariant x == 4 || (x == 3 && y == 5) is partially proven to be inductive.\nloop invariant x == 1 || (x == 4 && y == 6) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\n\nloop invariant i2: 1 <= x <= 4;\n\n\nloop invariant i5: x == 1 || x == 2 || x == 3 || x == 4;\n\n\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10 && 1 <= x <= 4 && (x == 1 || x == 2 || x == 3 || x == 4) && (y >= 3 && y <= 6);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 && 1 <= x <= 4 && (x == 1 || x == 2 || x == 3 || x == 4) && (y >= 3 && y <= 6) is preserved but not established.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1) ==> (y == 3);\nloop invariant (x == 2) ==> (y == 4);\nloop invariant (x == 3) ==> (y == 5);\nloop invariant (x == 4) ==> (y == 6);\nloop invariant i < 10 ==> (x != 4);\nloop invariant i < 10 ==> (y != 6);\nloop invariant i == 10 ==> (x == 1);\nloop invariant i == 10 ==> (y == 5);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == 1) ==> (y == 3) is neither established nor preserved.\nloop invariant (x == 2) ==> (y == 4) is established but not preserved.\nloop invariant (x == 3) ==> (y == 5) is established but not preserved.\nloop invariant (x == 4) ==> (y == 6) is partially proven to be inductive.\nloop invariant i < 10 ==> (x != 4) is partially proven to be inductive.\nloop invariant i < 10 ==> (y != 6) is partially proven to be inductive.\nloop invariant i == 10 ==> (x == 1) is established but not preserved.\nloop invariant i == 10 ==> (y == 5) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\n\nloop invariant i5: (x == 4) ==> (y == 6);\nloop invariant i6: i < 10 ==> (x != 4);\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant (y != 6) ==> (y == 1 || y == 2 || y == 3 || y == 4);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is preserved but not established.\nloop invariant (y != 6) ==> (y == 1 || y == 2 || y == 3 || y == 4) is neither established nor preserved.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 1 ==> y == 3;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 3 ==> y == 5;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 2;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x == 1 ==> y == 3 is neither established nor preserved.\nloop invariant x == 2 ==> y == 4 is established but not preserved.\nloop invariant x == 3 ==> y == 5 is established but not preserved.\nloop invariant x == 4 ==> y == 6 is partially proven to be inductive.\nloop invariant x == 2 ==> x != 3 is partially proven to be inductive.\nloop invariant x == 3 ==> x != 4 is partially proven to be inductive.\nloop invariant x == 4 ==> x != 1 is partially proven to be inductive.\nloop invariant x == 1 ==> x != 2 is partially proven to be inductive.\nloop invariant x == 2 ==> x != 1 is partially proven to be inductive.\nloop invariant x == 3 ==> x != 2 is partially proven to be inductive.\nloop invariant x == 4 ==> x != 3 is partially proven to be inductive.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\n\nloop invariant i5: x == 4 ==> y == 6;\nloop invariant i6: x == 2 ==> x != 3;\nloop invariant i7: x == 3 ==> x != 4;\nloop invariant i8: x == 4 ==> x != 1;\nloop invariant i9: x == 1 ==> x != 2;\nloop invariant i10: x == 2 ==> x != 1;\nloop invariant i11: x == 3 ==> x != 2;\nloop invariant i12: x == 4 ==> x != 3;\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant (i == 0) ==> (x == 1);\nloop invariant (i == 1) ==> (x == 2);\nloop invariant (i == 2) ==> (x == 3);\nloop invariant (i == 3) ==> (x == 1);\nloop invariant (i == 4) ==> (x == 2);\nloop invariant (i == 5) ==> (x == 3);\nloop invariant (i == 6) ==> (x == 1);\nloop invariant (i == 7) ==> (x == 2);\nloop invariant (i == 8) ==> (x == 3);\nloop invariant (i == 9) ==> (x == 1);\nloop invariant (i == 10) ==> (x == 2);\nloop invariant (i == 0) ==> (y == 0);\nloop invariant (i == 1) ==> (y == 3);\nloop invariant (i == 2) ==> (y == 4);\nloop invariant (i == 3) ==> (y == 5);\nloop invariant (i == 4) ==> (y == 6);\nloop invariant (i == 5) ==> (y == 7);\nloop invariant (i == 6) ==> (y == 8);\nloop invariant (i == 7) ==> (y == 9);\nloop invariant (i == 8) ==> (y == 10);\nloop invariant (i == 9) ==> (y == 11);\nloop invariant (i == 10) ==> (y == 12);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= 10 is preserved but not established.\nloop invariant (i == 0) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 1) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 2) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 3) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 4) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 5) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 6) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 7) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 8) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 9) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 10) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 0) ==> (y == 0) is partially proven to be inductive.\nloop invariant (i == 1) ==> (y == 3) is partially proven to be inductive.\nloop invariant (i == 2) ==> (y == 4) is partially proven to be inductive.\nloop invariant (i == 3) ==> (y == 5) is partially proven to be inductive.\nloop invariant (i == 4) ==> (y == 6) is partially proven to be inductive.\nloop invariant (i == 5) ==> (y == 7) is partially proven to be inductive.\nloop invariant (i == 6) ==> (y == 8) is partially proven to be inductive.\nloop invariant (i == 7) ==> (y == 9) is partially proven to be inductive.\nloop invariant (i == 8) ==> (y == 10) is partially proven to be inductive.\nloop invariant (i == 9) ==> (y == 11) is partially proven to be inductive.\nloop invariant (i == 10) ==> (y == 12) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == 1 || x == 2 || x == 3) is partially proven to be inductive.\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6) is preserved but not established.\nloop invariant (x == 1 || x == 2 || x == 3 || x == 4) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 3) is preserved but not established.\nloop invariant (x == 2 ==> y == 4) is partially proven to be inductive.\nloop invariant (x == 3 ==> y == 5) is partially proven to be inductive.\nloop invariant (x == 4 ==> y == 6) is partially proven to be inductive.\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2) is partially proven to be inductive.\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 3 ==> i == 0) is partially proven to be inductive.\nloop invariant (x == 2 ==> y == 4 ==> i == 1) is partially proven to be inductive.\nloop invariant (x == 3 ==> y == 5 ==> i == 2) is partially proven to be inductive.\nloop invariant (x == 4 ==> y == 6 ==> i == 3) is partially proven to be inductive.\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4) is partially proven to be inductive.\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5) is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 6 is partially proven to be inductive.\nloop invariant ((i == 0 && x == 1 && y == 0) ==> (x == 2 || x == 3)) is partially proven to be inductive.\nloop invariant ((i == 1 && x == 2 && y == 3) ==> (x == 3 || x == 1)) is partially proven to be inductive.\nloop invariant ((i == 2 && x == 3 && y == 4) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 3 && x == 1 && y == 5) ==> (x == 3 || x == 4)) is partially proven to be inductive.\nloop invariant ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3)) is partially proven to be inductive.\nloop invariant ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1)) is partially proven to be inductive.\nloop invariant ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4)) is partially proven to be inductive.\nloop invariant ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4)) is partially proven to be inductive.\nloop invariant ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 3 <= y <= 6 is partially proven to be inductive.\nloop invariant !(y == 6) is partially proven to be inductive.\nloop invariant (x == 1 ==> i <= 4) is partially proven to be inductive.\nloop invariant (x == 2 ==> i <= 5) is partially proven to be inductive.\nloop invariant (x == 3 ==> i <= 5) is partially proven to be inductive.\nloop invariant (x == 4 ==> i <= 5) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 5) is preserved but not established.\nloop invariant (x == 3 ==> y == 3) is partially proven to be inductive.\nloop invariant (y == 3 ==> (i == 0)) is partially proven to be inductive.\nloop invariant (y == 4 ==> (i == 1)) is partially proven to be inductive.\nloop invariant (y == 5 ==> (i == 2)) is partially proven to be inductive.\nloop invariant (y == 6 ==> (i == 3)) is partially proven to be inductive.\nloop invariant (y == 3 ==> (x == 1)) is partially proven to be inductive.\nloop invariant (y == 4 ==> (x == 2)) is partially proven to be inductive.\nloop invariant (y == 5 ==> (x == 3)) is partially proven to be inductive.\nloop invariant (y == 6 ==> (x == 4)) is partially proven to be inductive.\nloop invariant (y == 3 ==> (i == 0 ==> x == 1)) is partially proven to be inductive.\nloop invariant (y == 4 ==> (i == 1 ==> x == 2)) is partially proven to be inductive.\nloop invariant (y == 5 ==> (i == 2 ==> x == 3)) is partially proven to be inductive.\nloop invariant (y == 6 ==> (i == 3 ==> x == 4)) is partially proven to be inductive.\nloop invariant (x == (1 + (y - 1) * y / 2)) is partially proven to be inductive.\nloop invariant (y == 5) ==> (x == 1) is partially proven to be inductive.\nloop invariant (y == 4) ==> (x == 2) is partially proven to be inductive.\nloop invariant (y == 3) ==> (x == 3) is partially proven to be inductive.\nloop invariant (y == 6) ==> (x == 4) is partially proven to be inductive.\nloop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is partially proven to be inductive.\nloop invariant y == 3 || y == 4 || y == 6 is partially proven to be inductive.\nloop invariant x == (i - 1) % 4 + 1 is partially proven to be inductive.\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2 is partially proven to be inductive.\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 is partially proven to be inductive.\nloop invariant 1 <= i <= 10 is partially proven to be inductive.\nloop invariant y == 3 || y == 4 || y == 5 || y == 6 is partially proven to be inductive.\nloop invariant x == 1 || x == 2 || x == 3 || x == 4 is partially proven to be inductive.\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6) is partially proven to be inductive.\nloop invariant x == 2 || (x == 3 && y == 4) is partially proven to be inductive.\nloop invariant x == 3 || (x == 2 && y == 3) is partially proven to be inductive.\nloop invariant x == 4 || (x == 3 && y == 5) is partially proven to be inductive.\nloop invariant x == 1 || (x == 4 && y == 6) is partially proven to be inductive.\nloop invariant 0 <= i <= 10 && 1 <= x <= 4 && (x == 1 || x == 2 || x == 3 || x == 4) && (y >= 3 && y <= 6) is partially proven to be inductive.\nloop invariant (x == 1) ==> (y == 3) is partially proven to be inductive.\nloop invariant (x == 2) ==> (y == 4) is partially proven to be inductive.\nloop invariant (x == 3) ==> (y == 5) is partially proven to be inductive.\nloop invariant (x == 4) ==> (y == 6) is partially proven to be inductive.\nloop invariant i < 10 ==> (x != 4) is partially proven to be inductive.\nloop invariant i < 10 ==> (y != 6) is partially proven to be inductive.\nloop invariant i == 10 ==> (x == 1) is partially proven to be inductive.\nloop invariant i == 10 ==> (y == 5) is partially proven to be inductive.\nloop invariant (y != 6) ==> (y == 1 || y == 2 || y == 3 || y == 4) is partially proven to be inductive.\nloop invariant x == 1 ==> y == 3 is partially proven to be inductive.\nloop invariant x == 2 ==> y == 4 is partially proven to be inductive.\nloop invariant x == 3 ==> y == 5 is partially proven to be inductive.\nloop invariant x == 4 ==> y == 6 is partially proven to be inductive.\nloop invariant x == 2 ==> x != 3 is partially proven to be inductive.\nloop invariant x == 3 ==> x != 4 is partially proven to be inductive.\nloop invariant x == 4 ==> x != 1 is partially proven to be inductive.\nloop invariant x == 1 ==> x != 2 is partially proven to be inductive.\nloop invariant x == 2 ==> x != 1 is partially proven to be inductive.\nloop invariant x == 3 ==> x != 2 is partially proven to be inductive.\nloop invariant x == 4 ==> x != 3 is partially proven to be inductive.\nloop invariant (i == 0) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 1) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 2) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 3) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 4) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 5) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 6) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 7) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 8) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 9) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 10) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 0) ==> (y == 0) is partially proven to be inductive.\nloop invariant (i == 1) ==> (y == 3) is partially proven to be inductive.\nloop invariant (i == 2) ==> (y == 4) is partially proven to be inductive.\nloop invariant (i == 3) ==> (y == 5) is partially proven to be inductive.\nloop invariant (i == 4) ==> (y == 6) is partially proven to be inductive.\nloop invariant (i == 5) ==> (y == 7) is partially proven to be inductive.\nloop invariant (i == 6) ==> (y == 8) is partially proven to be inductive.\nloop invariant (i == 7) ==> (y == 9) is partially proven to be inductive.\nloop invariant (i == 8) ==> (y == 10) is partially proven to be inductive.\nloop invariant (i == 9) ==> (y == 11) is partially proven to be inductive.\nloop invariant (i == 10) ==> (y == 12) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: (x == 1 || x == 2 || x == 3);\nloop invariant i3: (y == 3 || y == 4 || y == 5 || y == 6);\nloop invariant i4: (x == 1 || x == 2 || x == 3 || x == 4);\nloop invariant i5: (x == 1 ==> y == 3);\nloop invariant i6: (x == 2 ==> y == 4);\nloop invariant i7: (x == 3 ==> y == 5);\nloop invariant i8: (x == 4 ==> y == 6);\nloop invariant i9: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2);\nloop invariant i10: (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6);\nloop invariant i11: (x == 1 ==> y == 3 ==> i == 0);\nloop invariant i12: (x == 2 ==> y == 4 ==> i == 1);\nloop invariant i13: (x == 3 ==> y == 5 ==> i == 2);\nloop invariant i14: (x == 4 ==> y == 6 ==> i == 3);\nloop invariant i15: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4);\nloop invariant i16: (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5);\nloop invariant i17: i >= 0;\nloop invariant i18: i <= 10;\nloop invariant i19: x >= 1;\nloop invariant i20: x <= 4;\nloop invariant i21: y >= 1;\nloop invariant i22: y <= 6;\nloop invariant i23: ((i == 0 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant i24: ((i == 1 && x == 2 && y == 3) ==> (x == 3 || x == 1));\nloop invariant i25: ((i == 2 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant i26: ((i == 3 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant i27: ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant i28: ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant i29: ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1));\nloop invariant i30: ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2));\nloop invariant i31: ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4));\nloop invariant i32: ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant i33: ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant i34: ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant i35: 1 <= x <= 4;\nloop invariant i36: 3 <= y <= 6;\nloop invariant i37: !(y == 6);\nloop invariant i38: (x == 1 ==> i <= 4);\nloop invariant i39: (x == 2 ==> i <= 5);\nloop invariant i40: (x == 3 ==> i <= 5);\nloop invariant i41: (x == 4 ==> i <= 5);\nloop invariant i42: (x == 1 ==> y == 5);\nloop invariant i43: (x == 3 ==> y == 3);\nloop invariant i44: (y == 3 ==> (i == 0));\nloop invariant i45: (y == 4 ==> (i == 1));\nloop invariant i46: (y == 5 ==> (i == 2));\nloop invariant i47: (y == 6 ==> (i == 3));\nloop invariant i48: (y == 3 ==> (x == 1));\nloop invariant i49: (y == 4 ==> (x == 2));\nloop invariant i50: (y == 5 ==> (x == 3));\nloop invariant i51: (y == 6 ==> (x == 4));\nloop invariant i52: (y == 3 ==> (i == 0 ==> x == 1));\nloop invariant i53: (y == 4 ==> (i == 1 ==> x == 2));\nloop invariant i54: (y == 5 ==> (i == 2 ==> x == 3));\nloop invariant i55: (y == 6 ==> (i == 3 ==> x == 4));\nloop invariant i56: (x == (1 + (y - 1) * y / 2));\nloop invariant i57: (y == 5) ==> (x == 1);\nloop invariant i58: (y == 4) ==> (x == 2);\nloop invariant i59: (y == 3) ==> (x == 3);\nloop invariant i60: (y == 6) ==> (x == 4);\nloop invariant i61: 0 <= x <= 4;\nloop invariant i62: 1 <= y <= 6;\nloop invariant i63: y == 3 || y == 4 || y == 6;\nloop invariant i64: x == (i - 1) % 4 + 1;\nloop invariant i65: y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant i66: y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant i67: 1 <= i <= 10;\nloop invariant i68: y == 3 || y == 4 || y == 5 || y == 6;\nloop invariant i69: x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant i70: y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6);\nloop invariant i71: x == 2 || (x == 3 && y == 4);\nloop invariant i72: x == 3 || (x == 2 && y == 3);\nloop invariant i73: x == 4 || (x == 3 && y == 5);\nloop invariant i74: x == 1 || (x == 4 && y == 6);\nloop invariant i75: 0 <= i <= 10 && 1 <= x <= 4 && (x == 1 || x == 2 || x == 3 || x == 4) && (y >= 3 && y <= 6);\nloop invariant i76: (x == 1) ==> (y == 3);\nloop invariant i77: (x == 2) ==> (y == 4);\nloop invariant i78: (x == 3) ==> (y == 5);\nloop invariant i79: (x == 4) ==> (y == 6);\nloop invariant i80: i < 10 ==> (x != 4);\nloop invariant i81: i < 10 ==> (y != 6);\nloop invariant i82: i == 10 ==> (x == 1);\nloop invariant i83: i == 10 ==> (y == 5);\nloop invariant i84: (y != 6) ==> (y == 1 || y == 2 || y == 3 || y == 4);\nloop invariant i85: x == 1 ==> y == 3;\nloop invariant i86: x == 2 ==> y == 4;\nloop invariant i87: x == 3 ==> y == 5;\nloop invariant i88: x == 4 ==> y == 6;\nloop invariant i89: x == 2 ==> x != 3;\nloop invariant i90: x == 3 ==> x != 4;\nloop invariant i91: x == 4 ==> x != 1;\nloop invariant i92: x == 1 ==> x != 2;\nloop invariant i93: x == 2 ==> x != 1;\nloop invariant i94: x == 3 ==> x != 2;\nloop invariant i95: x == 4 ==> x != 3;\nloop invariant i96: (i == 0) ==> (x == 1);\nloop invariant i97: (i == 1) ==> (x == 2);\nloop invariant i98: (i == 2) ==> (x == 3);\nloop invariant i99: (i == 3) ==> (x == 1);\nloop invariant i100: (i == 4) ==> (x == 2);\nloop invariant i101: (i == 5) ==> (x == 3);\nloop invariant i102: (i == 6) ==> (x == 1);\nloop invariant i103: (i == 7) ==> (x == 2);\nloop invariant i104: (i == 8) ==> (x == 3);\nloop invariant i105: (i == 9) ==> (x == 1);\nloop invariant i106: (i == 10) ==> (x == 2);\nloop invariant i107: (i == 0) ==> (y == 0);\nloop invariant i108: (i == 1) ==> (y == 3);\nloop invariant i109: (i == 2) ==> (y == 4);\nloop invariant i110: (i == 3) ==> (y == 5);\nloop invariant i111: (i == 4) ==> (y == 6);\nloop invariant i112: (i == 5) ==> (y == 7);\nloop invariant i113: (i == 6) ==> (y == 8);\nloop invariant i114: (i == 7) ==> (y == 9);\nloop invariant i115: (i == 8) ==> (y == 10);\nloop invariant i116: (i == 9) ==> (y == 11);\nloop invariant i117: (i == 10) ==> (y == 12);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
            "combined_annotation_num_solver_calls": 27,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: (x == 1 || x == 2 || x == 3);\n\nloop invariant i4: (x == 1 || x == 2 || x == 3 || x == 4);\n\n\n\nloop invariant i8: (x == 4 ==> y == 6);\nloop invariant i9: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2);\n\nloop invariant i11: (x == 1 ==> y == 3 ==> i == 0);\nloop invariant i12: (x == 2 ==> y == 4 ==> i == 1);\nloop invariant i13: (x == 3 ==> y == 5 ==> i == 2);\nloop invariant i14: (x == 4 ==> y == 6 ==> i == 3);\nloop invariant i15: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4);\nloop invariant i16: (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5);\nloop invariant i17: i >= 0;\nloop invariant i18: i <= 10;\nloop invariant i19: x >= 1;\nloop invariant i20: x <= 4;\n\n\n\n\n\n\nloop invariant i27: ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant i28: ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant i29: ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1));\nloop invariant i30: ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2));\nloop invariant i31: ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4));\nloop invariant i32: ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant i33: ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant i34: ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant i35: 1 <= x <= 4;\n\n\n\n\n\nloop invariant i41: (x == 4 ==> i <= 5);\n\n\n\n\n\n\n\n\n\n\nloop invariant i52: (y == 3 ==> (i == 0 ==> x == 1));\nloop invariant i53: (y == 4 ==> (i == 1 ==> x == 2));\nloop invariant i54: (y == 5 ==> (i == 2 ==> x == 3));\nloop invariant i55: (y == 6 ==> (i == 3 ==> x == 4));\n\nloop invariant i57: (y == 5) ==> (x == 1);\n\n\n\nloop invariant i61: 0 <= x <= 4;\n\n\n\n\n\n\n\nloop invariant i69: x == 1 || x == 2 || x == 3 || x == 4;\n\n\n\n\n\n\n\n\n\nloop invariant i79: (x == 4) ==> (y == 6);\nloop invariant i80: i < 10 ==> (x != 4);\n\n\n\n\n\n\n\nloop invariant i88: x == 4 ==> y == 6;\nloop invariant i89: x == 2 ==> x != 3;\nloop invariant i90: x == 3 ==> x != 4;\nloop invariant i91: x == 4 ==> x != 1;\nloop invariant i92: x == 1 ==> x != 2;\nloop invariant i93: x == 2 ==> x != 1;\nloop invariant i94: x == 3 ==> x != 2;\nloop invariant i95: x == 4 ==> x != 3;\nloop invariant i96: (i == 0) ==> (x == 1);\nloop invariant i97: (i == 1) ==> (x == 2);\nloop invariant i98: (i == 2) ==> (x == 3);\nloop invariant i99: (i == 3) ==> (x == 1);\nloop invariant i100: (i == 4) ==> (x == 2);\nloop invariant i101: (i == 5) ==> (x == 3);\nloop invariant i102: (i == 6) ==> (x == 1);\nloop invariant i103: (i == 7) ==> (x == 2);\nloop invariant i104: (i == 8) ==> (x == 3);\nloop invariant i105: (i == 9) ==> (x == 1);\nloop invariant i106: (i == 10) ==> (x == 2);\n\nloop invariant i108: (i == 1) ==> (y == 3);\nloop invariant i109: (i == 2) ==> (y == 4);\nloop invariant i110: (i == 3) ==> (y == 5);\n\n\n\n\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/17.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant if (unknown()) { m = x; } ==> m <= x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant n <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant x >= 1;\nloop invariant n >= x;\nloop invariant m <= x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x >= 2;\nloop invariant m < n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant m <= n;\nloop invariant m < n ==> m < x;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n ==> m < x;\nloop invariant m < n ==> m < n ==> m < n;\nloop invariant m < n ==> m < n ==> m < n ==> m < x;\nloop invariant m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < n ==> m < n ==> m < n ==> m < n ==> m < x;\nloop invariant m < n ==> m < n ==> m < n ==> m < n ==> m < n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x >= m;\nloop invariant x >= 1;\nloop invariant x >= m;\nloop invariant n >= 1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant 1 <= m;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x < n;\nloop invariant m <= n ==> m < n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m <= x;\nloop invariant 1 <= m < n ==> m <= n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x < n ==> (m < n);\nloop invariant x < n ==> (m <= x);\nloop invariant x < n ==> (m <= n);\nloop invariant m < n ==> (m <= x);\nloop invariant m < n ==> (m <= n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant x >= m;\nloop invariant n > 1 ==> m < n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x + 1 <= n;\nloop invariant x < n;\nloop invariant m <= n;\nloop invariant m <= x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant 1 <= x <= n;\nloop invariant m <= x;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant if (unknown()) { m = x; } ==> m <= x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: x >= m;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant n <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant n <= n is partially proven to be inductive.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: n <= n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant x >= 1;\nloop invariant n >= x;\nloop invariant m <= x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= m <= n is preserved but not established.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant n >= x is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: x >= 1;\n\nloop invariant i4: m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= n;\nloop invariant m <= x;\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\nloop invariant x == (m + 1) ==> !(unknown());\nloop invariant m == (x - 1) ==> unknown();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x >= 2;\nloop invariant m < n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant 1 <= m <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant x >= 2 is preserved but not established.\nloop invariant m < n is partially proven to be inductive.\nAssertion m < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x <= n;\nloop invariant m <= n;\nloop invariant m < n ==> m < x;\nloop invariant m < n ==> m < n;\nloop invariant m < n ==> m < n ==> m < x;\nloop invariant m < n ==> m < n ==> m < n;\nloop invariant m < n ==> m < n ==> m < n ==> m < x;\nloop invariant m < n ==> m < n ==> m < n ==> m < n;\nloop invariant m < n ==> m < n ==> m < n ==> m < n ==> m < x;\nloop invariant m < n ==> m < n ==> m < n ==> m < n ==> m < n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m <= x <= n is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant m < n ==> m < x is preserved but not established.\nloop invariant m < n ==> m < n is partially proven to be inductive.\nloop invariant m < n ==> m < n ==> m < x is partially proven to be inductive.\nloop invariant m < n ==> m < n ==> m < n is partially proven to be inductive.\nloop invariant m < n ==> m < n ==> m < n ==> m < x is partially proven to be inductive.\nloop invariant m < n ==> m < n ==> m < n ==> m < n is partially proven to be inductive.\nloop invariant m < n ==> m < n ==> m < n ==> m < n ==> m < x is partially proven to be inductive.\nloop invariant m < n ==> m < n ==> m < n ==> m < n ==> m < n is partially proven to be inductive.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n\nloop invariant i5: m < n ==> m < n;\n\nloop invariant i7: m < n ==> m < n ==> m < n;\n\nloop invariant i9: m < n ==> m < n ==> m < n ==> m < n;\n\nloop invariant i11: m < n ==> m < n ==> m < n ==> m < n ==> m < n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x >= m;\nloop invariant x >= 1;\nloop invariant x >= m;\nloop invariant n >= 1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\nloop invariant m <= n-1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n-1 is neither established nor preserved.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant x >= m is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant m <= n-1 is partially proven to be inductive.\nAssertion m < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\nloop invariant i4: x >= m;\nloop invariant i5: x >= 1;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 1 <= m;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x < n;\nloop invariant m <= n ==> m < n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant 1 <= m is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is preserved but not established.\nloop invariant x < n is neither established nor preserved.\nloop invariant m <= n ==> m < n is partially proven to be inductive.\nAssertion m < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 1 <= m;\nloop invariant i3: m <= x;\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m <= x;\nloop invariant 1 <= m < n ==> m <= n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\nloop invariant m <= n ==> m <= x <= n;\nloop invariant m <= n ==> x <= n;\nloop invariant m <= n ==> x >= m;\nloop invariant m <= n ==> x >= 1;\nloop invariant m <= n ==> m >= 1;\nloop invariant m <= n ==> m < x;\nloop invariant m <= n ==> m < n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant 1 <= m < n ==> m <= n is partially proven to be inductive.\nloop invariant m <= n ==> m <= x <= n is partially proven to be inductive.\nloop invariant m <= n ==> x <= n is partially proven to be inductive.\nloop invariant m <= n ==> x >= m is partially proven to be inductive.\nloop invariant m <= n ==> x >= 1 is partially proven to be inductive.\nloop invariant m <= n ==> m >= 1 is partially proven to be inductive.\nloop invariant m <= n ==> m < x is preserved but not established.\nloop invariant m <= n ==> m < n is partially proven to be inductive.\nAssertion m < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: 1 <= m < n ==> m <= n;\nloop invariant i4: m <= n ==> m <= x <= n;\nloop invariant i5: m <= n ==> x <= n;\nloop invariant i6: m <= n ==> x >= m;\nloop invariant i7: m <= n ==> x >= 1;\nloop invariant i8: m <= n ==> m >= 1;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant x < n ==> (m < n);\nloop invariant x < n ==> (m <= x);\nloop invariant x < n ==> (m <= n);\nloop invariant m < n ==> (m <= x);\nloop invariant m < n ==> (m <= n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant x < n ==> (m < n) is partially proven to be inductive.\nloop invariant x < n ==> (m <= x) is partially proven to be inductive.\nloop invariant x < n ==> (m <= n) is partially proven to be inductive.\nloop invariant m < n ==> (m <= x) is partially proven to be inductive.\nloop invariant m < n ==> (m <= n) is partially proven to be inductive.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\nloop invariant i4: x < n ==> (m < n);\nloop invariant i5: x < n ==> (m <= x);\nloop invariant i6: x < n ==> (m <= n);\nloop invariant i7: m < n ==> (m <= x);\nloop invariant i8: m < n ==> (m <= n);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m >= 1;\nloop invariant x >= m;\nloop invariant n > 1 ==> m < n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m >= 1 is partially proven to be inductive.\nloop invariant x >= m is partially proven to be inductive.\nloop invariant n > 1 ==> m < n is partially proven to be inductive.\nAssertion m < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m >= 1;\nloop invariant i3: x >= m;\nloop invariant i4: n > 1 ==> m < n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x + 1 <= n;\nloop invariant x < n;\nloop invariant m <= n;\nloop invariant m <= x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x + 1 <= n is neither established nor preserved.\nloop invariant x < n is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nAssertion m < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\nloop invariant i4: m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= m <= n;\nloop invariant 1 <= x <= n;\nloop invariant m <= x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= m <= n is preserved but not established.\nloop invariant 1 <= x <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 20: unexpected token '('",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: 0 <= m <= n;\nloop invariant i3: m <= x;\nloop invariant i4: x >= m;\nloop invariant i5: if (unknown()) { m = x; } ==> m <= x;\nloop invariant i6: n <= n;\nloop invariant i7: x >= 1;\nloop invariant i8: n >= x;\nloop invariant i9: m <= n;\nloop invariant i10: x == (m + 1) ==> !(unknown());\nloop invariant i11: m == (x - 1) ==> unknown();\nloop invariant i12: 1 <= x <= n;\nloop invariant i13: 1 <= m <= n;\nloop invariant i14: x >= 2;\nloop invariant i15: m < n;\nloop invariant i16: m <= x <= n;\nloop invariant i17: m < n ==> m < x;\nloop invariant i18: m < n ==> m < n;\nloop invariant i19: m < n ==> m < n ==> m < x;\nloop invariant i20: m < n ==> m < n ==> m < n;\nloop invariant i21: m < n ==> m < n ==> m < n ==> m < x;\nloop invariant i22: m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i23: m < n ==> m < n ==> m < n ==> m < n ==> m < x;\nloop invariant i24: m < n ==> m < n ==> m < n ==> m < n ==> m < n;\nloop invariant i25: 0 <= x <= n-1;\nloop invariant i26: n >= 1;\nloop invariant i27: m <= n-1;\nloop invariant i28: 0 <= x;\nloop invariant i29: 1 <= m;\nloop invariant i30: x < n;\nloop invariant i31: m <= n ==> m < n;\nloop invariant i32: 1 <= m < n ==> m <= n;\nloop invariant i33: m <= n ==> m <= x <= n;\nloop invariant i34: m <= n ==> x <= n;\nloop invariant i35: m <= n ==> x >= m;\nloop invariant i36: m <= n ==> x >= 1;\nloop invariant i37: m <= n ==> m >= 1;\nloop invariant i38: m <= n ==> m < x;\nloop invariant i39: x < n ==> (m < n);\nloop invariant i40: x < n ==> (m <= x);\nloop invariant i41: x < n ==> (m <= n);\nloop invariant i42: m < n ==> (m <= x);\nloop invariant i43: m < n ==> (m <= n);\nloop invariant i44: m >= 1;\nloop invariant i45: n > 1 ==> m < n;\nloop invariant i46: 0 <= x + 1 <= n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
            "combined_annotation_num_solver_calls": 12,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\nloop invariant i4: x >= m;\n\nloop invariant i6: n <= n;\nloop invariant i7: x >= 1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i18: m < n ==> m < n;\n\nloop invariant i20: m < n ==> m < n ==> m < n;\n\nloop invariant i22: m < n ==> m < n ==> m < n ==> m < n;\n\nloop invariant i24: m < n ==> m < n ==> m < n ==> m < n ==> m < n;\n\n\n\nloop invariant i28: 0 <= x;\nloop invariant i29: 1 <= m;\n\n\nloop invariant i32: 1 <= m < n ==> m <= n;\nloop invariant i33: m <= n ==> m <= x <= n;\nloop invariant i34: m <= n ==> x <= n;\nloop invariant i35: m <= n ==> x >= m;\nloop invariant i36: m <= n ==> x >= 1;\nloop invariant i37: m <= n ==> m >= 1;\n\nloop invariant i39: x < n ==> (m < n);\nloop invariant i40: x < n ==> (m <= x);\nloop invariant i41: x < n ==> (m <= n);\nloop invariant i42: m < n ==> (m <= x);\nloop invariant i43: m < n ==> (m <= n);\nloop invariant i44: m >= 1;\nloop invariant i45: n > 1 ==> m < n;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    while (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y > 0;\nloop invariant x >= y - LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= LARGE_INT * LARGE_INT;\nloop invariant x <= LARGE_INT * LARGE_INT;\nloop invariant y <= LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y <= LARGE_INT * LARGE_INT;\nloop invariant y > 0 ==> x >= 0;\nloop invariant y > 0 ==> x <= LARGE_INT * LARGE_INT;\nloop invariant y > 0 ==> x < LARGE_INT * LARGE_INT;\nloop invariant y > 0 ==> x <= LARGE_INT * LARGE_INT;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\nloop invariant x < 0 ==> x >= -50 + y;\nloop invariant x < 0 ==> x + y < y ==> x < 0;\nloop invariant x < 0 ==> x < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\n*/\n```",
                "```\n/*@\nloop invariant x >= -50;\nloop invariant -1000 <= y <= LARGE_INT;\nloop invariant x < y;\nloop invariant x + y >= -50;\nloop invariant x + y < 1000000;\nloop invariant x + y <= LARGE_INT;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y and y <= LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x >= -50;\nloop invariant x <= LARGE_INT;\nloop invariant y <= x + y;\nloop invariant y >= 1;\nloop invariant x >= -50 + y;\nloop invariant x <= LARGE_INT + y;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= -50 + (y - 1) * y / 2;\nloop invariant y > 0 ==> x >= 0;\nloop invariant x < 0 ==> x + y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x >= (y - 1) * y / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x + y >= 0;\nloop invariant x <= x + y;\nloop invariant y >= 0;\nloop invariant y <= 1000000;\nloop invariant x <= y + x;\n*/\n```",
                "```\n/*@\nloop invariant y >= -1000;\nloop invariant y < LARGE_INT;\nloop invariant x < 0;\nloop invariant x + y >= -50 + y;\nloop invariant x + y < 0 + y;\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant - 50 <= x <= -50;\nloop invariant 0 <= y <= 1000000;\nloop invariant x + y >= 0;\nloop invariant y > 0 ==> x + y > 0;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -LARGE_INT <= x <= LARGE_INT;\nloop invariant x + y >= 0 ==> x >= 0;\nloop invariant x + y < 0 ==> x < 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= (y + (-50 + y) * y / 2);\nloop invariant x >= (-1000 + y + (-50 + y) * y / 2);\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y > 0;\nloop invariant x >= y - LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y + LARGE_INT;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50;\nloop invariant x <= y + LARGE_INT;\nloop invariant x >= -50 + y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant y <= LARGE_INT is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y > 0 is preserved but not established.\nloop invariant x >= y - LARGE_INT is preserved but not established.\nloop invariant x <= y + LARGE_INT is partially proven to be inductive.\nloop invariant x >= -50 + y is preserved but not established.\nloop invariant x <= -50 + y + LARGE_INT is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\nloop invariant i6: x <= y + LARGE_INT;\n\nloop invariant i8: x <= -50 + y + LARGE_INT;\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= LARGE_INT * LARGE_INT;\nloop invariant x <= LARGE_INT * LARGE_INT;\nloop invariant y <= LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y <= LARGE_INT * LARGE_INT;\nloop invariant y > 0 ==> x >= 0;\nloop invariant y > 0 ==> x <= LARGE_INT * LARGE_INT;\nloop invariant y > 0 ==> x < LARGE_INT * LARGE_INT;\nloop invariant y > 0 ==> x <= LARGE_INT * LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant -50 <= x <= LARGE_INT * LARGE_INT is partially proven to be inductive.\nloop invariant x <= LARGE_INT * LARGE_INT is partially proven to be inductive.\nloop invariant y <= LARGE_INT is partially proven to be inductive.\nloop invariant x + y >= 0 is preserved but not established.\nloop invariant x + y <= LARGE_INT * LARGE_INT is partially proven to be inductive.\nloop invariant y > 0 ==> x >= 0 is preserved but not established.\nloop invariant y > 0 ==> x <= LARGE_INT * LARGE_INT is partially proven to be inductive.\nloop invariant y > 0 ==> x < LARGE_INT * LARGE_INT is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\nloop invariant i3: x <= LARGE_INT * LARGE_INT;\n\n\nloop invariant i6: x + y <= LARGE_INT * LARGE_INT;\n\nloop invariant i8: y > 0 ==> x <= LARGE_INT * LARGE_INT;\nloop invariant i9: y > 0 ==> x < LARGE_INT * LARGE_INT;\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\nloop invariant x < 0 ==> x >= -50 + y;\nloop invariant x < 0 ==> x + y < y ==> x < 0;\nloop invariant x < 0 ==> x < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\nloop invariant x < 0 ==> x < y - 1;\nloop invariant x < 0 ==> x + y < y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y < LARGE_INT is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= -50 + y is neither established nor preserved.\nloop invariant x < 0 ==> x >= -50 + y is partially proven to be inductive.\nloop invariant x < 0 ==> x + y < y ==> x < 0 is partially proven to be inductive.\nloop invariant x < 0 ==> x < y is partially proven to be inductive.\nloop invariant x < 0 ==> x < y - 1 is partially proven to be inductive.\nloop invariant x < 0 ==> x + y < y is partially proven to be inductive.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\nloop invariant i5: x < 0 ==> x + y < y ==> x < 0;\n\n\nloop invariant i8: x < 0 ==> x + y < y;\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x >= -50;\nloop invariant -1000 <= y <= LARGE_INT;\nloop invariant x < y;\nloop invariant x + y >= -50;\nloop invariant x + y < 1000000;\nloop invariant x + y <= LARGE_INT;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\nloop invariant x + y >= -50;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -1000;\nloop invariant x + y >= -1000;\nloop invariant x + y <= 1000000;\nloop invariant x + y > -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= -50 is partially proven to be inductive.\nloop invariant -1000 <= y <= LARGE_INT is established but not preserved.\nloop invariant x < y is preserved but not established.\nloop invariant x + y >= -50 is neither established nor preserved.\nloop invariant x + y < 1000000 is established but not preserved.\nloop invariant x + y <= LARGE_INT is partially proven to be inductive.\nloop invariant x + y > -1000 is partially proven to be inductive.\nloop invariant x + y >= -1000 is partially proven to be inductive.\nloop invariant x + y <= 1000000 is partially proven to be inductive.\nloop invariant x + y > -50 is neither established nor preserved.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= y and y <= LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x >= -50;\nloop invariant x <= LARGE_INT;\nloop invariant y <= x + y;\nloop invariant y >= 1;\nloop invariant x >= -50 + y;\nloop invariant x <= LARGE_INT + y;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\nloop invariant y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y <= LARGE_INT - x;\nloop invariant x <= LARGE_INT - y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token 'and'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\nloop invariant i8: x <= LARGE_INT + y;\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= -50 + y is neither established nor preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= -50 + (y - 1) * y / 2;\nloop invariant y > 0 ==> x >= 0;\nloop invariant x < 0 ==> x + y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant -50 <= x <= -50 + (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y > 0 ==> x >= 0 is preserved but not established.\nloop invariant x < 0 ==> x + y >= 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y >= 1;\nloop invariant x >= (y - 1) * y / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant x >= (y - 1) * y / 2 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x + y >= 0;\nloop invariant x <= x + y;\nloop invariant y >= 0;\nloop invariant y <= 1000000;\nloop invariant x <= y + x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 1000000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x <= x + y is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 1000000 is partially proven to be inductive.\nloop invariant x <= y + x is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant y >= -1000;\nloop invariant y < LARGE_INT;\nloop invariant x < 0;\nloop invariant x + y >= -50 + y;\nloop invariant x + y < 0 + y;\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y >= -1000 is partially proven to be inductive.\nloop invariant y < LARGE_INT is established but not preserved.\nloop invariant x < 0 is established but not preserved.\nloop invariant x + y >= -50 + y is partially proven to be inductive.\nloop invariant x + y < 0 + y is partially proven to be inductive.\nloop invariant y > 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: y >= -1000;\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant - 50 <= x <= -50;\nloop invariant 0 <= y <= 1000000;\nloop invariant x + y >= 0;\nloop invariant y > 0 ==> x + y > 0;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\nloop invariant x <= -50 ==> x + y <= -50;\nloop invariant x >= -50 ==> x + y >= -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant - 50 <= x <= -50 is partially proven to be inductive.\nloop invariant 0 <= y <= 1000000 is preserved but not established.\nloop invariant x + y >= 0 is preserved but not established.\nloop invariant y > 0 ==> x + y > 0 is preserved but not established.\nloop invariant x >= -50 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x <= -50 ==> x + y <= -50 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -LARGE_INT <= x <= LARGE_INT;\nloop invariant x + y >= 0 ==> x >= 0;\nloop invariant x + y < 0 ==> x < 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant -LARGE_INT <= x <= LARGE_INT is partially proven to be inductive.\nloop invariant x + y >= 0 ==> x >= 0 is neither established nor preserved.\nloop invariant x + y < 0 ==> x < 0 is partially proven to be inductive.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\nloop invariant i4: x + y < 0 ==> x < 0;\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= (y + (-50 + y) * y / 2);\nloop invariant x >= (-1000 + y + (-50 + y) * y / 2);\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant 0 <= y <= 1000000 is partially proven to be inductive.\nloop invariant x >= (y + (-50 + y) * y / 2) is partially proven to be inductive.\nloop invariant x >= (-1000 + y + (-50 + y) * y / 2) is partially proven to be inductive.\nloop invariant x >= (-1000 + (y + (-50 + y) * y / 2)) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 48: unexpected token 'and'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= y;\nloop invariant i2: y <= LARGE_INT;\nloop invariant i3: x >= -50;\nloop invariant i4: y > 0;\nloop invariant i5: x >= y - LARGE_INT;\nloop invariant i6: x <= y + LARGE_INT;\nloop invariant i7: x >= -50 + y;\nloop invariant i8: x <= -50 + y + LARGE_INT;\nloop invariant i9: 0 <= y <= LARGE_INT;\nloop invariant i10: -50 <= x <= LARGE_INT * LARGE_INT;\nloop invariant i11: x <= LARGE_INT * LARGE_INT;\nloop invariant i12: x + y >= 0;\nloop invariant i13: x + y <= LARGE_INT * LARGE_INT;\nloop invariant i14: y > 0 ==> x >= 0;\nloop invariant i15: y > 0 ==> x <= LARGE_INT * LARGE_INT;\nloop invariant i16: y > 0 ==> x < LARGE_INT * LARGE_INT;\nloop invariant i17: 0 <= y < LARGE_INT;\nloop invariant i18: x < 0 ==> x >= -50 + y;\nloop invariant i19: x < 0 ==> x + y < y ==> x < 0;\nloop invariant i20: x < 0 ==> x < y;\nloop invariant i21: x < 0 ==> x < y - 1;\nloop invariant i22: x < 0 ==> x + y < y;\nloop invariant i23: -1000 <= y <= LARGE_INT;\nloop invariant i24: x < y;\nloop invariant i25: x + y >= -50;\nloop invariant i26: x + y < 1000000;\nloop invariant i27: x + y <= LARGE_INT;\nloop invariant i28: x + y > -1000;\nloop invariant i29: x + y >= -1000;\nloop invariant i30: x + y <= 1000000;\nloop invariant i31: x + y > -50;\nloop invariant i32: 0 <= y and y <= LARGE_INT;\nloop invariant i33: x <= LARGE_INT;\nloop invariant i34: y <= x + y;\nloop invariant i35: y >= 1;\nloop invariant i36: x <= LARGE_INT + y;\nloop invariant i37: y <= LARGE_INT - x;\nloop invariant i38: x <= LARGE_INT - y;\nloop invariant i39: y >= 0;\nloop invariant i40: -50 <= x <= -50 + (y - 1) * y / 2;\nloop invariant i41: x < 0 ==> x + y >= 0;\nloop invariant i42: x >= (y - 1) * y / 2;\nloop invariant i43: 0 <= y <= 1000000;\nloop invariant i44: x >= (1 + (y - 1) * y / 2);\nloop invariant i45: x <= x + y;\nloop invariant i46: y <= 1000000;\nloop invariant i47: x <= y + x;\nloop invariant i48: y >= -1000;\nloop invariant i49: y < LARGE_INT;\nloop invariant i50: x < 0;\nloop invariant i51: x + y >= -50 + y;\nloop invariant i52: x + y < 0 + y;\nloop invariant i53: - 50 <= x <= -50;\nloop invariant i54: y > 0 ==> x + y > 0;\nloop invariant i55: x >= -50 ==> x + y >= -50;\nloop invariant i56: x <= -50 ==> x + y <= -50;\nloop invariant i57: -LARGE_INT <= x <= LARGE_INT;\nloop invariant i58: x + y >= 0 ==> x >= 0;\nloop invariant i59: x + y < 0 ==> x < 0;\nloop invariant i60: 0 <= x <= -50;\nloop invariant i61: x >= (y + (-50 + y) * y / 2);\nloop invariant i62: x >= (-1000 + y + (-50 + y) * y / 2);\nloop invariant i63: x >= (-1000 + (y + (-50 + y) * y / 2));\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 22,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\nloop invariant i6: x <= y + LARGE_INT;\n\nloop invariant i8: x <= -50 + y + LARGE_INT;\n\n\nloop invariant i11: x <= LARGE_INT * LARGE_INT;\n\nloop invariant i13: x + y <= LARGE_INT * LARGE_INT;\n\nloop invariant i15: y > 0 ==> x <= LARGE_INT * LARGE_INT;\nloop invariant i16: y > 0 ==> x < LARGE_INT * LARGE_INT;\n\n\nloop invariant i19: x < 0 ==> x + y < y ==> x < 0;\n\n\nloop invariant i22: x < 0 ==> x + y < y;\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i36: x <= LARGE_INT + y;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i48: y >= -1000;\n\n\n\n\n\n\n\n\n\n\nloop invariant i59: x + y < 0 ==> x < 0;\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/111.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 < n;\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= (n * (n - 1)) / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * i / 2;\nloop invariant sn == (1 + (i - 1) * i / 2);\nloop invariant sn == (sn + 1) ==> i <= n;\nloop invariant sn == (sn + 1) ==> i > 1;\nloop invariant sn == (sn + 1) ==> i <= n + 1;\nloop invariant sn == (sn + 1) ==> i >= 1;\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i - 1;\nloop invariant n >= 0;\nloop invariant (sn == i - 1) ==> (sn == n);\nloop invariant (i == n + 1) ==> (sn == n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant (if (n != 0) then sn >= 0 else sn == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i <= sn + 1;\nloop invariant i > 0 ==> sn >= i - 1;\nloop invariant sn < n ==> i <= n;\nloop invariant sn == n ==> i == n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i == n + 1 ==> sn == n;\n*/\n```",
                "```\n/*@\nloop invariant ( n >= i );\nloop invariant ( 0 <= sn );\nloop invariant ( i > 0 );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= (sn + 1);\nloop invariant sn <= n;\nloop invariant n <= (sn + 1);\nloop invariant i <= (sn + 1);\nloop invariant sn >= 0;\nloop invariant i >= 1;\nloop invariant sn == (i - 1);\nloop invariant i == (n + 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant ( i <= n );\nloop invariant ( sn <= (i - 1) );\nloop invariant ( sn >= 0 );\nloop invariant ( i >= 1 );\nloop invariant ( i <= n );\nloop invariant ( sn <= (i - 1) );\nloop invariant ( sn >= 0 );\nloop invariant ( i >= 1 );\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant n - sn = n - (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i == n - sn + 1;\nloop invariant i == n + 1 - sn;\nloop invariant sn >= i - n;\nloop invariant sn <= i - 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 < n;\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= (n * (n - 1)) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 < n is preserved but not established.\nloop invariant 1 <= i <= n is established but not preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= (n * (n - 1)) / 2 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * i / 2;\nloop invariant sn == (1 + (i - 1) * i / 2);\nloop invariant sn == (sn + 1) ==> i <= n;\nloop invariant sn == (sn + 1) ==> i > 1;\nloop invariant sn == (sn + 1) ==> i <= n + 1;\nloop invariant sn == (sn + 1) ==> i >= 1;\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n * i / 2 is partially proven to be inductive.\nloop invariant sn == (1 + (i - 1) * i / 2) is preserved but not established.\nloop invariant sn == (sn + 1) ==> i <= n is partially proven to be inductive.\nloop invariant sn == (sn + 1) ==> i > 1 is partially proven to be inductive.\nloop invariant sn == (sn + 1) ==> i <= n + 1 is partially proven to be inductive.\nloop invariant sn == (sn + 1) ==> i >= 1 is partially proven to be inductive.\nloop invariant sn == (sn + 1) ==> (sn == (sn + 1)) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\n\nloop invariant i5: sn == (sn + 1) ==> i <= n;\nloop invariant i6: sn == (sn + 1) ==> i > 1;\nloop invariant i7: sn == (sn + 1) ==> i <= n + 1;\nloop invariant i8: sn == (sn + 1) ==> i >= 1;\nloop invariant i9: sn == (sn + 1) ==> (sn == (sn + 1));\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i - 1;\nloop invariant n >= 0;\nloop invariant (sn == i - 1) ==> (sn == n);\nloop invariant (i == n + 1) ==> (sn == n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant (sn == i - 1) ==> (sn == n) is preserved but not established.\nloop invariant (i == n + 1) ==> (sn == n) is established but not preserved.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i - 1;\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant sn == (i - 1);\nloop invariant (if (n != 0) then sn >= 0 else sn == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: sn == (i - 1);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= n is neither established nor preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n+1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i <= sn + 1;\nloop invariant i > 0 ==> sn >= i - 1;\nloop invariant sn < n ==> i <= n;\nloop invariant sn == n ==> i == n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i == n + 1 ==> sn == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i <= sn + 1 is partially proven to be inductive.\nloop invariant i > 0 ==> sn >= i - 1 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n is partially proven to be inductive.\nloop invariant sn == n ==> i == n is established but not preserved.\nloop invariant i == n + 1 ==> sn == n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i <= sn + 1;\nloop invariant i4: i > 0 ==> sn >= i - 1;\nloop invariant i5: sn < n ==> i <= n;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( n >= i );\nloop invariant ( 0 <= sn );\nloop invariant ( i > 0 );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( n >= i ) is neither established nor preserved.\nloop invariant ( 0 <= sn ) is partially proven to be inductive.\nloop invariant ( i > 0 ) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: ( 0 <= sn );\nloop invariant i3: ( i > 0 );\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i - 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= i <= (sn + 1);\nloop invariant sn <= n;\nloop invariant n <= (sn + 1);\nloop invariant i <= (sn + 1);\nloop invariant sn >= 0;\nloop invariant i >= 1;\nloop invariant sn == (i - 1);\nloop invariant i == (n + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: 0 <= i <= (sn + 1);\n\n\nloop invariant i6: i <= (sn + 1);\nloop invariant i7: sn >= 0;\nloop invariant i8: i >= 1;\nloop invariant i9: sn == (i - 1);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= n is preserved but not established.\nloop invariant 1 <= i <= n + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( i <= n );\nloop invariant ( sn <= (i - 1) );\nloop invariant ( sn >= 0 );\nloop invariant ( i >= 1 );\nloop invariant ( i <= n );\nloop invariant ( sn <= (i - 1) );\nloop invariant ( sn >= 0 );\nloop invariant ( i >= 1 );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( i <= n ) is neither established nor preserved.\nloop invariant ( sn <= (i - 1) ) is partially proven to be inductive.\nloop invariant ( sn >= 0 ) is partially proven to be inductive.\nloop invariant ( i >= 1 ) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: ( sn <= (i - 1) );\nloop invariant i3: ( sn >= 0 );\nloop invariant i4: ( i >= 1 );\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant n - sn = n - (i - 1);\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant i == n - sn + 1;\nloop invariant i == n + 1 - sn;\nloop invariant sn >= i - n;\nloop invariant sn <= i - 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\nloop invariant sn == i - n + 1;\nloop invariant sn == i - n - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: sn == i - 1;\n\n\n\nloop invariant i9: sn <= i - 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 37: unexpected token '('",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 < n;\nloop invariant i2: 1 <= i <= n;\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn >= 0;\nloop invariant i5: sn <= (n * (n - 1)) / 2;\nloop invariant i6: 0 <= i <= n + 1;\nloop invariant i7: sn <= n * i / 2;\nloop invariant i8: sn == (1 + (i - 1) * i / 2);\nloop invariant i9: sn == (sn + 1) ==> i <= n;\nloop invariant i10: sn == (sn + 1) ==> i > 1;\nloop invariant i11: sn == (sn + 1) ==> i <= n + 1;\nloop invariant i12: sn == (sn + 1) ==> i >= 1;\nloop invariant i13: sn == (sn + 1) ==> (sn == (sn + 1));\nloop invariant i14: 0 <= sn <= n;\nloop invariant i15: sn <= i - 1;\nloop invariant i16: n >= 0;\nloop invariant i17: (sn == i - 1) ==> (sn == n);\nloop invariant i18: (i == n + 1) ==> (sn == n);\nloop invariant i19: 0 <= i;\nloop invariant i20: i <= n;\nloop invariant i21: (if (n != 0) then sn >= 0 else sn == 0);\nloop invariant i22: i >= 1;\nloop invariant i23: i <= n+1;\nloop invariant i24: sn <= n;\nloop invariant i25: 0 <= i <= n;\nloop invariant i26: i <= sn + 1;\nloop invariant i27: i > 0 ==> sn >= i - 1;\nloop invariant i28: sn < n ==> i <= n;\nloop invariant i29: sn == n ==> i == n;\nloop invariant i30: i == n + 1 ==> sn == n;\nloop invariant i31: ( n >= i );\nloop invariant i32: ( 0 <= sn );\nloop invariant i33: ( i > 0 );\nloop invariant i34: i <= n + 1;\nloop invariant i35: i1;\nloop invariant i36: i2;\nloop invariant i37: 0 <= i <= (sn + 1);\nloop invariant i38: n <= (sn + 1);\nloop invariant i39: i <= (sn + 1);\nloop invariant i40: i == (n + 1);\nloop invariant i41: 1 <= i <= n + 1;\nloop invariant i42: sn == i - 1;\nloop invariant i43: 0 <= n;\nloop invariant i44: ( i <= n );\nloop invariant i45: ( sn <= (i - 1) );\nloop invariant i46: ( sn >= 0 );\nloop invariant i47: ( i >= 1 );\nloop invariant i48: n - sn = n - (i - 1);\nloop invariant i49: i == n - sn + 1;\nloop invariant i50: i == n + 1 - sn;\nloop invariant i51: sn >= i - n;\nloop invariant i52: sn == i - n - 1;\nloop invariant i53: sn == i - n + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 16,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn >= 0;\n\n\n\n\nloop invariant i9: sn == (sn + 1) ==> i <= n;\nloop invariant i10: sn == (sn + 1) ==> i > 1;\nloop invariant i11: sn == (sn + 1) ==> i <= n + 1;\nloop invariant i12: sn == (sn + 1) ==> i >= 1;\nloop invariant i13: sn == (sn + 1) ==> (sn == (sn + 1));\n\nloop invariant i15: sn <= i - 1;\n\n\nloop invariant i18: (i == n + 1) ==> (sn == n);\nloop invariant i19: 0 <= i;\n\n\nloop invariant i22: i >= 1;\n\n\n\nloop invariant i26: i <= sn + 1;\nloop invariant i27: i > 0 ==> sn >= i - 1;\nloop invariant i28: sn < n ==> i <= n;\n\nloop invariant i30: i == n + 1 ==> sn == n;\n\nloop invariant i32: ( 0 <= sn );\nloop invariant i33: ( i > 0 );\n\n\n\nloop invariant i37: 0 <= i <= (sn + 1);\n\nloop invariant i39: i <= (sn + 1);\n\n\nloop invariant i42: sn == i - 1;\n\n\nloop invariant i45: ( sn <= (i - 1) );\nloop invariant i46: ( sn >= 0 );\nloop invariant i47: ( i >= 1 );\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant y % 2 == 0 ==> (x % 2) == (y % 2);\nloop invariant y % 2 == 1 ==> (x % 2) != (y % 2);\nloop invariant (x % 2) == 0 ==> x % 4 == 0;\nloop invariant (x % 2) == 1 ==> x % 4 == 2;\nloop invariant (x % 4) == 0 ==> x % 8 == 0;\nloop invariant (x % 4) == 2 ==> x % 8 == 2;\nloop invariant (x % 8) == 0 ==> x % 16 == 0;\nloop invariant (x % 8) == 2 ==> x % 16 == 2;\nloop invariant (x % 8) == 4 ==> x % 16 == 4;\nloop invariant (x % 8) == 6 ==> x % 16 == 6;\nloop invariant (x % 16) == 0 ==> x % 32 == 0;\nloop invariant (x % 16) == 2 ==> x % 32 == 2;\nloop invariant (x % 16) == 4 ==> x % 32 == 4;\nloop invariant (x % 16) == 6 ==> x % 32 == 6;\nloop invariant (x % 16) == 8 ==> x % 32 == 8;\nloop invariant (x % 16) == 10 ==> x % 32 == 10;\nloop invariant (x % 16) == 12 ==> x % 32 == 12;\nloop invariant (x % 16) == 14 ==> x % 32 == 14;\nloop invariant (x % 32) == 0 ==> x % 64 == 0;\nloop invariant (x % 32) == 2 ==> x % 64 == 2;\nloop invariant (x % 32) == 4 ==> x % 64 == 4;\nloop invariant (x % 32) == 6 ==> x % 64 == 6;\nloop invariant (x % 32) == 8 ==> x % 64 == 8;\nloop invariant (x % 32) == 10 ==> x % 64 == 10;\nloop invariant (x % 32) == 12 ==> x % 64 == 12;\nloop invariant (x % 32) == 14 ==> x % 64 == 14;\nloop invariant (x % 32) == 16 ==> x % 64 == 16;\nloop invariant (x % 32) == 18 ==> x % 64 == 18;\nloop invariant (x % 32) == 20 ==> x % 64 == 20;\nloop invariant (x % 32) == 22 ==> x % 64 == 22;\nloop invariant (x % 32) == 24 ==> x % 64 == 24;\nloop invariant (x % 32) == 26 ==> x % 64 == 26;\nloop invariant (x % 32) == 28 ==> x % 64 == 28;\nloop invariant (x % 32) == 30 ==> x % 64 == 30;\nloop invariant (x % 64) == 0 ==> x % 128 == 0;\nloop invariant (x % 64) == 2 ==> x % 128 == 2;\nloop invariant (x % 64) == 4 ==> x % 128 == 4;\nloop invariant (x % 64) == 6 ==> x % 128 == 6;\nloop invariant (x % 64) == 8 ==> x % 128 == 8;\nloop invariant (x % 64) == 10 ==> x % 128 == 10;\nloop invariant (x % 64) == 12 ==> x % 128 == 12;\nloop invariant (x % 64) == 14 ==> x % 128 == 14;\nloop invariant (x % 64) == 16 ==> x % 128 == 16;\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y < 100000;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (x % 2 == 0);\nloop invariant x % 2 != y % 2 ==> (x % 2 == 1);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant y % 2 == 0 ==> (x % 2 == 0);\nloop invariant y % 2 != 0 ==> (x % 2 == 1);\nloop invariant x % 2 == y % 2 ==> (x % 2 == 0);\nloop invariant x % 2 != y % 2 ==> (x % 2 == 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant x <= y * 2;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant y % 2 == 0 ==> x % 2 == 0 && x >= 2 * y;\nloop invariant y % 2 == 1 ==> x % 2 == 1 && x >= 2 * y + 1;\nloop invariant x >= y;\nloop invariant x >= 2 * y;\nloop invariant x >= 2 * y - 1;\nloop invariant x >= 2 * y + 2;\nloop invariant x >= 2 * y - 2;\nloop invariant x >= 2 * y + 2 * 2;\nloop invariant x >= 2 * y - 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> x >= (y + 2);\nloop invariant x % 2 == 1 ==> x >= (y - 1);\nloop invariant x % 2 == 0 ==> x <= (y + 4);\nloop invariant x % 2 == 1 ==> x <= (y + 2);\nloop invariant x % 2 == 0 ==> x >= (y + 4);\nloop invariant x % 2 == 1 ==> x <= (y - 1);\n*/\n```",
                "```\n/*@\nloop invariant ( ((x % 2) == (y % 2)) ==> x >= 0);\nloop invariant ( ((x % 2) == (y % 2)) ==> x <= 99);\nloop invariant ( ((x % 2) == (y % 2)) ==> x >= y);\nloop invariant ( ((x % 2) == (y % 2)) ==> y >= 0);\nloop invariant ( ((x % 2) == (y % 2)) ==> y <= 99);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant 0 <= y <= 99999;\nloop invariant y % 2 == x % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant x == y || x == y + 1;\nloop invariant x % 2 == y % 2;\nloop invariant x == 99 || y == 99;\nloop invariant x % 2 == y % 2 || x == 99 || y == 99;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2^32 - 1;\nloop invariant (x % 2) == (y % 2);\nloop invariant x >= y;\nloop invariant x <= y + 10;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant y % 2 == 0 ==> (x % 2) == (y % 2);\nloop invariant y % 2 == 1 ==> (x % 2) != (y % 2);\nloop invariant (x % 2) == 0 ==> x % 4 == 0;\nloop invariant (x % 2) == 1 ==> x % 4 == 2;\nloop invariant (x % 4) == 0 ==> x % 8 == 0;\nloop invariant (x % 4) == 2 ==> x % 8 == 2;\nloop invariant (x % 8) == 0 ==> x % 16 == 0;\nloop invariant (x % 8) == 2 ==> x % 16 == 2;\nloop invariant (x % 8) == 4 ==> x % 16 == 4;\nloop invariant (x % 8) == 6 ==> x % 16 == 6;\nloop invariant (x % 16) == 0 ==> x % 32 == 0;\nloop invariant (x % 16) == 2 ==> x % 32 == 2;\nloop invariant (x % 16) == 4 ==> x % 32 == 4;\nloop invariant (x % 16) == 6 ==> x % 32 == 6;\nloop invariant (x % 16) == 8 ==> x % 32 == 8;\nloop invariant (x % 16) == 10 ==> x % 32 == 10;\nloop invariant (x % 16) == 12 ==> x % 32 == 12;\nloop invariant (x % 16) == 14 ==> x % 32 == 14;\nloop invariant (x % 32) == 0 ==> x % 64 == 0;\nloop invariant (x % 32) == 2 ==> x % 64 == 2;\nloop invariant (x % 32) == 4 ==> x % 64 == 4;\nloop invariant (x % 32) == 6 ==> x % 64 == 6;\nloop invariant (x % 32) == 8 ==> x % 64 == 8;\nloop invariant (x % 32) == 10 ==> x % 64 == 10;\nloop invariant (x % 32) == 12 ==> x % 64 == 12;\nloop invariant (x % 32) == 14 ==> x % 64 == 14;\nloop invariant (x % 32) == 16 ==> x % 64 == 16;\nloop invariant (x % 32) == 18 ==> x % 64 == 18;\nloop invariant (x % 32) == 20 ==> x % 64 == 20;\nloop invariant (x % 32) == 22 ==> x % 64 == 22;\nloop invariant (x % 32) == 24 ==> x % 64 == 24;\nloop invariant (x % 32) == 26 ==> x % 64 == 26;\nloop invariant (x % 32) == 28 ==> x % 64 == 28;\nloop invariant (x % 32) == 30 ==> x % 64 == 30;\nloop invariant (x % 64) == 0 ==> x % 128 == 0;\nloop invariant (x % 64) == 2 ==> x % 128 == 2;\nloop invariant (x % 64) == 4 ==> x % 128 == 4;\nloop invariant (x % 64) == 6 ==> x % 128 == 6;\nloop invariant (x % 64) == 8 ==> x % 128 == 8;\nloop invariant (x % 64) == 10 ==> x % 128 == 10;\nloop invariant (x % 64) == 12 ==> x % 128 == 12;\nloop invariant (x % 64) == 14 ==> x % 128 == 14;\nloop invariant (x % 64) == 16 ==> x % 128 == 16;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 198 is established but not preserved.\nloop invariant y % 2 == 0 ==> (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> (x % 2) != (y % 2) is established but not preserved.\nloop invariant (x % 2) == 0 ==> x % 4 == 0 is established but not preserved.\nloop invariant (x % 2) == 1 ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant (x % 4) == 0 ==> x % 8 == 0 is established but not preserved.\nloop invariant (x % 4) == 2 ==> x % 8 == 2 is partially proven to be inductive.\nloop invariant (x % 8) == 0 ==> x % 16 == 0 is established but not preserved.\nloop invariant (x % 8) == 2 ==> x % 16 == 2 is partially proven to be inductive.\nloop invariant (x % 8) == 4 ==> x % 16 == 4 is partially proven to be inductive.\nloop invariant (x % 8) == 6 ==> x % 16 == 6 is partially proven to be inductive.\nloop invariant (x % 16) == 0 ==> x % 32 == 0 is established but not preserved.\nloop invariant (x % 16) == 2 ==> x % 32 == 2 is partially proven to be inductive.\nloop invariant (x % 16) == 4 ==> x % 32 == 4 is partially proven to be inductive.\nloop invariant (x % 16) == 6 ==> x % 32 == 6 is partially proven to be inductive.\nloop invariant (x % 16) == 8 ==> x % 32 == 8 is partially proven to be inductive.\nloop invariant (x % 16) == 10 ==> x % 32 == 10 is partially proven to be inductive.\nloop invariant (x % 16) == 12 ==> x % 32 == 12 is partially proven to be inductive.\nloop invariant (x % 16) == 14 ==> x % 32 == 14 is partially proven to be inductive.\nloop invariant (x % 32) == 0 ==> x % 64 == 0 is established but not preserved.\nloop invariant (x % 32) == 2 ==> x % 64 == 2 is partially proven to be inductive.\nloop invariant (x % 32) == 4 ==> x % 64 == 4 is partially proven to be inductive.\nloop invariant (x % 32) == 6 ==> x % 64 == 6 is partially proven to be inductive.\nloop invariant (x % 32) == 8 ==> x % 64 == 8 is partially proven to be inductive.\nloop invariant (x % 32) == 10 ==> x % 64 == 10 is partially proven to be inductive.\nloop invariant (x % 32) == 12 ==> x % 64 == 12 is partially proven to be inductive.\nloop invariant (x % 32) == 14 ==> x % 64 == 14 is partially proven to be inductive.\nloop invariant (x % 32) == 16 ==> x % 64 == 16 is partially proven to be inductive.\nloop invariant (x % 32) == 18 ==> x % 64 == 18 is partially proven to be inductive.\nloop invariant (x % 32) == 20 ==> x % 64 == 20 is partially proven to be inductive.\nloop invariant (x % 32) == 22 ==> x % 64 == 22 is partially proven to be inductive.\nloop invariant (x % 32) == 24 ==> x % 64 == 24 is partially proven to be inductive.\nloop invariant (x % 32) == 26 ==> x % 64 == 26 is partially proven to be inductive.\nloop invariant (x % 32) == 28 ==> x % 64 == 28 is partially proven to be inductive.\nloop invariant (x % 32) == 30 ==> x % 64 == 30 is partially proven to be inductive.\nloop invariant (x % 64) == 0 ==> x % 128 == 0 is established but not preserved.\nloop invariant (x % 64) == 2 ==> x % 128 == 2 is partially proven to be inductive.\nloop invariant (x % 64) == 4 ==> x % 128 == 4 is partially proven to be inductive.\nloop invariant (x % 64) == 6 ==> x % 128 == 6 is partially proven to be inductive.\nloop invariant (x % 64) == 8 ==> x % 128 == 8 is partially proven to be inductive.\nloop invariant (x % 64) == 10 ==> x % 128 == 10 is partially proven to be inductive.\nloop invariant (x % 64) == 12 ==> x % 128 == 12 is partially proven to be inductive.\nloop invariant (x % 64) == 14 ==> x % 128 == 14 is partially proven to be inductive.\nloop invariant (x % 64) == 16 ==> x % 128 == 16 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> (x % 2) == (y % 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= 99 is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y < 100000;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y < 100000 is preserved but not established.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (x % 2 == 0);\nloop invariant x % 2 != y % 2 ==> (x % 2 == 1);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant y % 2 == 0 ==> (x % 2 == 0);\nloop invariant y % 2 != 0 ==> (x % 2 == 1);\nloop invariant x % 2 == y % 2 ==> (x % 2 == 0);\nloop invariant x % 2 != y % 2 ==> (x % 2 == 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == y % 2 ==> (x % 2 == 0) is partially proven to be inductive.\nloop invariant x % 2 != y % 2 ==> (x % 2 == 1) is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x % 2 == 0) is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x % 2 == 1) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\nloop invariant i4: x >= 0;\n\nloop invariant i6: y % 2 == 0 ==> (x % 2 == 0);\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 198 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant x <= y * 2;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant x <= y * 2 is established but not preserved.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 19,
                    "annotations": "```\n/*@\nloop invariant y % 2 == 0 ==> x % 2 == 0 && x >= 2 * y;\nloop invariant y % 2 == 1 ==> x % 2 == 1 && x >= 2 * y + 1;\nloop invariant x >= y;\nloop invariant x >= 2 * y;\nloop invariant x >= 2 * y - 1;\nloop invariant x >= 2 * y + 2;\nloop invariant x >= 2 * y - 2;\nloop invariant x >= 2 * y + 2 * 2;\nloop invariant x >= 2 * y - 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y % 2 == 0 ==> x % 2 == 0 && x >= 2 * y is preserved but not established.\nloop invariant y % 2 == 1 ==> x % 2 == 1 && x >= 2 * y + 1 is preserved but not established.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= 2 * y is partially proven to be inductive.\nloop invariant x >= 2 * y - 1 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 is preserved but not established.\nloop invariant x >= 2 * y - 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> x >= (y + 2);\nloop invariant x % 2 == 1 ==> x >= (y - 1);\nloop invariant x % 2 == 0 ==> x <= (y + 4);\nloop invariant x % 2 == 1 ==> x <= (y + 2);\nloop invariant x % 2 == 0 ==> x >= (y + 4);\nloop invariant x % 2 == 1 ==> x <= (y - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is preserved but not established.\nloop invariant x % 2 == 0 ==> x >= (y + 2) is preserved but not established.\nloop invariant x % 2 == 1 ==> x >= (y - 1) is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x <= (y + 4) is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x <= (y + 2) is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= (y + 4) is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x <= (y - 1) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant ( ((x % 2) == (y % 2)) ==> x >= 0);\nloop invariant ( ((x % 2) == (y % 2)) ==> x <= 99);\nloop invariant ( ((x % 2) == (y % 2)) ==> x >= y);\nloop invariant ( ((x % 2) == (y % 2)) ==> y >= 0);\nloop invariant ( ((x % 2) == (y % 2)) ==> y <= 99);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( ((x % 2) == (y % 2)) ==> x >= 0) is partially proven to be inductive.\nloop invariant ( ((x % 2) == (y % 2)) ==> x <= 99) is established but not preserved.\nloop invariant ( ((x % 2) == (y % 2)) ==> x >= y) is neither established nor preserved.\nloop invariant ( ((x % 2) == (y % 2)) ==> y >= 0) is partially proven to be inductive.\nloop invariant ( ((x % 2) == (y % 2)) ==> y <= 99) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: ( ((x % 2) == (y % 2)) ==> x >= 0);\n\n\nloop invariant i4: ( ((x % 2) == (y % 2)) ==> y >= 0);\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2) is established but not preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant 0 <= y <= 99999;\nloop invariant y % 2 == x % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 198 is established but not preserved.\nloop invariant 0 <= y <= 99999 is preserved but not established.\nloop invariant y % 2 == x % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 18,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant x == y || x == y + 1;\nloop invariant x % 2 == y % 2;\nloop invariant x == 99 || y == 99;\nloop invariant x % 2 == y % 2 || x == 99 || y == 99;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant x == y || x == y + 1 is preserved but not established.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 is preserved but not established.\nloop invariant x % 2 == y % 2 || x == 99 || y == 99 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2^32 - 1;\nloop invariant (x % 2) == (y % 2);\nloop invariant x >= y;\nloop invariant x <= y + 10;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 137: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x <= 198;\nloop invariant i2: y % 2 == 0 ==> (x % 2) == (y % 2);\nloop invariant i3: y % 2 == 1 ==> (x % 2) != (y % 2);\nloop invariant i4: (x % 2) == 0 ==> x % 4 == 0;\nloop invariant i5: (x % 2) == 1 ==> x % 4 == 2;\nloop invariant i6: (x % 4) == 0 ==> x % 8 == 0;\nloop invariant i7: (x % 4) == 2 ==> x % 8 == 2;\nloop invariant i8: (x % 8) == 0 ==> x % 16 == 0;\nloop invariant i9: (x % 8) == 2 ==> x % 16 == 2;\nloop invariant i10: (x % 8) == 4 ==> x % 16 == 4;\nloop invariant i11: (x % 8) == 6 ==> x % 16 == 6;\nloop invariant i12: (x % 16) == 0 ==> x % 32 == 0;\nloop invariant i13: (x % 16) == 2 ==> x % 32 == 2;\nloop invariant i14: (x % 16) == 4 ==> x % 32 == 4;\nloop invariant i15: (x % 16) == 6 ==> x % 32 == 6;\nloop invariant i16: (x % 16) == 8 ==> x % 32 == 8;\nloop invariant i17: (x % 16) == 10 ==> x % 32 == 10;\nloop invariant i18: (x % 16) == 12 ==> x % 32 == 12;\nloop invariant i19: (x % 16) == 14 ==> x % 32 == 14;\nloop invariant i20: (x % 32) == 0 ==> x % 64 == 0;\nloop invariant i21: (x % 32) == 2 ==> x % 64 == 2;\nloop invariant i22: (x % 32) == 4 ==> x % 64 == 4;\nloop invariant i23: (x % 32) == 6 ==> x % 64 == 6;\nloop invariant i24: (x % 32) == 8 ==> x % 64 == 8;\nloop invariant i25: (x % 32) == 10 ==> x % 64 == 10;\nloop invariant i26: (x % 32) == 12 ==> x % 64 == 12;\nloop invariant i27: (x % 32) == 14 ==> x % 64 == 14;\nloop invariant i28: (x % 32) == 16 ==> x % 64 == 16;\nloop invariant i29: (x % 32) == 18 ==> x % 64 == 18;\nloop invariant i30: (x % 32) == 20 ==> x % 64 == 20;\nloop invariant i31: (x % 32) == 22 ==> x % 64 == 22;\nloop invariant i32: (x % 32) == 24 ==> x % 64 == 24;\nloop invariant i33: (x % 32) == 26 ==> x % 64 == 26;\nloop invariant i34: (x % 32) == 28 ==> x % 64 == 28;\nloop invariant i35: (x % 32) == 30 ==> x % 64 == 30;\nloop invariant i36: (x % 64) == 0 ==> x % 128 == 0;\nloop invariant i37: (x % 64) == 2 ==> x % 128 == 2;\nloop invariant i38: (x % 64) == 4 ==> x % 128 == 4;\nloop invariant i39: (x % 64) == 6 ==> x % 128 == 6;\nloop invariant i40: (x % 64) == 8 ==> x % 128 == 8;\nloop invariant i41: (x % 64) == 10 ==> x % 128 == 10;\nloop invariant i42: (x % 64) == 12 ==> x % 128 == 12;\nloop invariant i43: (x % 64) == 14 ==> x % 128 == 14;\nloop invariant i44: (x % 64) == 16 ==> x % 128 == 16;\nloop invariant i45: x >= 0;\nloop invariant i46: y >= 0;\nloop invariant i47: x <= 99;\nloop invariant i48: x % 2 == y % 2;\nloop invariant i49: 0 <= x <= 99;\nloop invariant i50: 0 <= y < 100000;\nloop invariant i51: x % 2 == y % 2 ==> (x % 2 == 0);\nloop invariant i52: x % 2 != y % 2 ==> (x % 2 == 1);\nloop invariant i53: y % 2 == 0 ==> (x % 2 == 0);\nloop invariant i54: y % 2 != 0 ==> (x % 2 == 1);\nloop invariant i55: 0 <= y <= 99;\nloop invariant i56: (x % 2) == (y % 2);\nloop invariant i57: 0 <= y;\nloop invariant i58: x <= y * 2;\nloop invariant i59: y % 2 == 0 ==> x % 2 == 0 && x >= 2 * y;\nloop invariant i60: y % 2 == 1 ==> x % 2 == 1 && x >= 2 * y + 1;\nloop invariant i61: x >= y;\nloop invariant i62: x >= 2 * y;\nloop invariant i63: x >= 2 * y - 1;\nloop invariant i64: x >= 2 * y + 2;\nloop invariant i65: x >= 2 * y - 2;\nloop invariant i66: x >= 2 * y + 2 * 2;\nloop invariant i67: x >= 2 * y - 2 * 2;\nloop invariant i68: x >= 2 * y + 2 * 2 * 2;\nloop invariant i69: x >= 2 * y - 2 * 2 * 2;\nloop invariant i70: x >= 2 * y + 2 * 2 * 2 * 2;\nloop invariant i71: x >= 2 * y - 2 * 2 * 2 * 2;\nloop invariant i72: x >= 2 * y + 2 * 2 * 2 * 2 * 2;\nloop invariant i73: x >= 2 * y - 2 * 2 * 2 * 2 * 2;\nloop invariant i74: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i75: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i76: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i77: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i78: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i79: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i80: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i81: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i82: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i83: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i84: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i85: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i86: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i87: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i88: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i89: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i90: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i91: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i92: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i93: y % 2 == 1 ==> x % 2 == 1;\nloop invariant i94: x % 2 == 0 ==> x >= (y + 2);\nloop invariant i95: x % 2 == 1 ==> x >= (y - 1);\nloop invariant i96: x % 2 == 0 ==> x <= (y + 4);\nloop invariant i97: x % 2 == 1 ==> x <= (y + 2);\nloop invariant i98: x % 2 == 0 ==> x >= (y + 4);\nloop invariant i99: x % 2 == 1 ==> x <= (y - 1);\nloop invariant i100: ( ((x % 2) == (y % 2)) ==> x >= 0);\nloop invariant i101: ( ((x % 2) == (y % 2)) ==> x <= 99);\nloop invariant i102: ( ((x % 2) == (y % 2)) ==> x >= y);\nloop invariant i103: ( ((x % 2) == (y % 2)) ==> y >= 0);\nloop invariant i104: ( ((x % 2) == (y % 2)) ==> y <= 99);\nloop invariant i105: 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2);\nloop invariant i106: 0 <= y <= 99999;\nloop invariant i107: y % 2 == x % 2;\nloop invariant i108: x == y || x == y + 1;\nloop invariant i109: x == 99 || y == 99;\nloop invariant i110: x % 2 == y % 2 || x == 99 || y == 99;\nloop invariant i111: x == 99 || y == 99 || x % 2 == y % 2;\nloop invariant i112: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1;\nloop invariant i113: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y;\nloop invariant i114: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2;\nloop invariant i115: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2;\nloop invariant i116: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant i117: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant i118: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant i119: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\nloop invariant i120: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant i121: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant i122: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant i123: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\nloop invariant i124: 0 <= y <= 2^32 - 1;\nloop invariant i125: x <= y + 10;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "combined_annotation_num_solver_calls": 42,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> (x % 2) == (y % 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i45: x >= 0;\nloop invariant i46: y >= 0;\n\n\n\n\n\n\nloop invariant i53: y % 2 == 0 ==> (x % 2 == 0);\n\n\n\nloop invariant i57: 0 <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i92: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\nloop invariant i100: ( ((x % 2) == (y % 2)) ==> x >= 0);\n\n\nloop invariant i103: ( ((x % 2) == (y % 2)) ==> y >= 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= (i - 1) * a;\nloop invariant sn <= i * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i*a;\nloop invariant i == n || sn == n*a;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 2 * i <= sn <= 2 * n;\nloop invariant 1 <= sn / i <= n;\nloop invariant sn % i == 0;\nloop invariant sn == n * a;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (a * i) + (a * (i - 1) * (i - 2) / 2);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = i * a;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn <= n * 2;\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * a;\n*/\n```",
                "```\n/*@\nloop invariant ( i >= 1 && i <= n );\nloop invariant ( sn >= a * (i - 1) && sn <= a * i );\nloop invariant ( sn >= 0 && sn <= a * n );\nloop invariant ( sn == a * (n - i + 1) );\nloop invariant ( sn == a * n - a * i + a );\nloop invariant ( sn == a * (n - i) + a );\nloop invariant ( sn == a * (n - 1) + a * i );\nloop invariant ( sn == a * (n - 1) + a * (i - 1) + a );\nloop invariant ( sn == a * (n - 1) + a );\nloop invariant ( sn == a * (n - 1) );\nloop invariant ( sn == a * (n - 2) + a * 2 );\nloop invariant ( sn == a * (n - 2) + a * 1 + a );\nloop invariant ( sn == a * (n - 2) + a );\nloop invariant ( sn == a * (n - 2) );\nloop invariant ( sn == a * (n - 3) + a * 3 );\nloop invariant ( sn == a * (n - 3) + a * 2 + a );\nloop invariant ( sn == a * (n - 3) + a * 1 + a );\nloop invariant ( sn == a * (n - 3) + a );\nloop invariant ( sn == a * (n - 3) );\nloop invariant ( sn == a * (n - 4) + a * 4 );\nloop invariant ( sn == a * (n - 4) + a * 3 + a );\nloop invariant ( sn == a * (n - 4) + a * 2 + a );\nloop invariant ( sn == a * (n - 4) + a * 1 + a );\nloop invariant ( sn == a * (n - 4) + a );\nloop invariant ( sn == a * (n - 4) );\nloop invariant ( sn == a * (n - 5) + a * 5 );\nloop invariant ( sn == a * (n - 5) + a * 4 + a );\nloop invariant ( sn == a * (n - 5) + a * 3 + a );\nloop invariant ( sn == a * (n - 5) + a * 2 + a );\nloop invariant ( sn == a * (n - 5) + a * 1 + a );\nloop invariant ( sn == a * (n - 5) + a );\nloop invariant ( sn == a * (n - 5) );\nloop invariant ( sn == a * (n - 6) + a * 6 );\nloop invariant ( sn == a * (n - 6) + a * 5 + a );\nloop invariant ( sn == a * (n - 6) + a * 4 + a );\nloop invariant ( sn == a * (n - 6) + a * 3 + a );\nloop invariant ( sn == a * (n - 6) + a * 2 + a );\nloop invariant ( sn == a * (n - 6) + a * 1 + a );\nloop invariant ( sn == a * (n - 6) + a );\nloop invariant ( sn == a * (n - 6) );\nloop invariant ( sn == a * (n - 7) + a * 7 );\nloop invariant ( sn == a * (n - 7) + a * 6 + a );\nloop invariant ( sn == a * (n - 7) + a * 5 + a );\nloop invariant ( sn == a * (n - 7) + a * 4 + a );\nloop invariant ( sn == a * (n - 7) + a * 3 + a );\nloop invariant ( sn == a * (n - 7) + a * 2 + a );\nloop invariant ( sn == a * (n - 7) + a * 1 + a );\nloop invariant ( sn == a * (n - 7) + a );\nloop invariant ( sn == a * (n - 7) );\nloop invariant ( sn == a * (n - 8) + a * 8 );\nloop invariant ( sn == a * (n - 8) + a * 7 + a );\nloop invariant ( sn == a * (n - 8) + a * 6 + a );\nloop invariant ( sn == a * (n - 8) + a * 5 + a );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant i * a == n * a || sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn <= n*a;\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a || sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= min(n, 1000);\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant i >= 1;\nloop invariant i <= min(n, 1000);\nloop invariant sn == a * (i - 1);\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == i * a;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= (i - 1) * a;\nloop invariant sn <= i * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= (i - 1) * a is partially proven to be inductive.\nloop invariant sn <= i * a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn >= (i - 1) * a;\nloop invariant i3: sn <= i * a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i*a + sn is preserved but not established.\nloop invariant sn == (i-1)*a + sn is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i*a;\nloop invariant i == n || sn == n*a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn == i*a is preserved but not established.\nloop invariant i == n || sn == n*a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 2 * i <= sn <= 2 * n;\nloop invariant 1 <= sn / i <= n;\nloop invariant sn % i == 0;\nloop invariant sn == n * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 2 * i <= sn <= 2 * n is preserved but not established.\nloop invariant 1 <= sn / i <= n is partially proven to be inductive.\nloop invariant sn % i == 0 is partially proven to be inductive.\nloop invariant sn == n * a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (a * i) + (a * (i - 1) * (i - 2) / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn == (a * i) + (a * (i - 1) * (i - 2) / 2) is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = i * a;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn <= n * 2;\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\nloop invariant i3: i >= 1;\n\nloop invariant i5: sn >= 0;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 28,
                    "annotations": "```\n/*@\nloop invariant ( i >= 1 && i <= n );\nloop invariant ( sn >= a * (i - 1) && sn <= a * i );\nloop invariant ( sn >= 0 && sn <= a * n );\nloop invariant ( sn == a * (n - i + 1) );\nloop invariant ( sn == a * n - a * i + a );\nloop invariant ( sn == a * (n - i) + a );\nloop invariant ( sn == a * (n - 1) + a * i );\nloop invariant ( sn == a * (n - 1) + a * (i - 1) + a );\nloop invariant ( sn == a * (n - 1) + a );\nloop invariant ( sn == a * (n - 1) );\nloop invariant ( sn == a * (n - 2) + a * 2 );\nloop invariant ( sn == a * (n - 2) + a * 1 + a );\nloop invariant ( sn == a * (n - 2) + a );\nloop invariant ( sn == a * (n - 2) );\nloop invariant ( sn == a * (n - 3) + a * 3 );\nloop invariant ( sn == a * (n - 3) + a * 2 + a );\nloop invariant ( sn == a * (n - 3) + a * 1 + a );\nloop invariant ( sn == a * (n - 3) + a );\nloop invariant ( sn == a * (n - 3) );\nloop invariant ( sn == a * (n - 4) + a * 4 );\nloop invariant ( sn == a * (n - 4) + a * 3 + a );\nloop invariant ( sn == a * (n - 4) + a * 2 + a );\nloop invariant ( sn == a * (n - 4) + a * 1 + a );\nloop invariant ( sn == a * (n - 4) + a );\nloop invariant ( sn == a * (n - 4) );\nloop invariant ( sn == a * (n - 5) + a * 5 );\nloop invariant ( sn == a * (n - 5) + a * 4 + a );\nloop invariant ( sn == a * (n - 5) + a * 3 + a );\nloop invariant ( sn == a * (n - 5) + a * 2 + a );\nloop invariant ( sn == a * (n - 5) + a * 1 + a );\nloop invariant ( sn == a * (n - 5) + a );\nloop invariant ( sn == a * (n - 5) );\nloop invariant ( sn == a * (n - 6) + a * 6 );\nloop invariant ( sn == a * (n - 6) + a * 5 + a );\nloop invariant ( sn == a * (n - 6) + a * 4 + a );\nloop invariant ( sn == a * (n - 6) + a * 3 + a );\nloop invariant ( sn == a * (n - 6) + a * 2 + a );\nloop invariant ( sn == a * (n - 6) + a * 1 + a );\nloop invariant ( sn == a * (n - 6) + a );\nloop invariant ( sn == a * (n - 6) );\nloop invariant ( sn == a * (n - 7) + a * 7 );\nloop invariant ( sn == a * (n - 7) + a * 6 + a );\nloop invariant ( sn == a * (n - 7) + a * 5 + a );\nloop invariant ( sn == a * (n - 7) + a * 4 + a );\nloop invariant ( sn == a * (n - 7) + a * 3 + a );\nloop invariant ( sn == a * (n - 7) + a * 2 + a );\nloop invariant ( sn == a * (n - 7) + a * 1 + a );\nloop invariant ( sn == a * (n - 7) + a );\nloop invariant ( sn == a * (n - 7) );\nloop invariant ( sn == a * (n - 8) + a * 8 );\nloop invariant ( sn == a * (n - 8) + a * 7 + a );\nloop invariant ( sn == a * (n - 8) + a * 6 + a );\nloop invariant ( sn == a * (n - 8) + a * 5 + a );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( i >= 1 && i <= n ) is preserved but not established.\nloop invariant ( sn >= a * (i - 1) && sn <= a * i ) is partially proven to be inductive.\nloop invariant ( sn >= 0 && sn <= a * n ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - i + 1) ) is preserved but not established.\nloop invariant ( sn == a * n - a * i + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - i) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 1) + a * i ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 1) + a * (i - 1) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 1) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 1) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 2) + a * 2 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 2) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 2) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 2) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 3) + a * 3 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 3) + a * 2 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 3) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 3) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 3) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) + a * 4 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) + a * 3 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) + a * 2 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a * 5 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a * 4 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a * 3 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a * 2 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 6 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 5 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 4 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 3 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 2 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 7 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 6 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 5 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 4 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 3 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 2 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 8) + a * 8 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 8) + a * 7 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 8) + a * 6 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 8) + a * 5 + a ) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: ( sn >= a * (i - 1) && sn <= a * i );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant i * a == n * a || sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nloop invariant i * a == n * a || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn <= n*a;\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant sn <= n*a is established but not preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\nloop invariant i3: sn >= 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a || sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn == i * a || sn == 0 is established but not preserved.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= min(n, 1000);\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant i >= 1;\nloop invariant i <= min(n, 1000);\nloop invariant sn == a * (i - 1);\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic function min. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i >= 1;\n\nloop invariant i6: sn == a * (i - 1);\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == i * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n * a is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 30: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sn >= (i - 1) * a;\nloop invariant i3: sn <= i * a;\nloop invariant i4: sn == i*a + sn;\nloop invariant i5: sn == (i-1)*a + sn;\nloop invariant i6: 1 <= i <= n;\nloop invariant i7: sn == i*a;\nloop invariant i8: i == n || sn == n*a;\nloop invariant i9: 2 * i <= sn <= 2 * n;\nloop invariant i10: 1 <= sn / i <= n;\nloop invariant i11: sn % i == 0;\nloop invariant i12: sn == n * a;\nloop invariant i13: sn == (a * i) + (a * (i - 1) * (i - 2) / 2);\nloop invariant i14: sn = i * a;\nloop invariant i15: i >= 1;\nloop invariant i16: i <= n;\nloop invariant i17: sn >= 0;\nloop invariant i18: sn <= n * a;\nloop invariant i19: sn <= n * 2;\nloop invariant i20: 0 <= i <= n + 1;\nloop invariant i21: sn == i * a;\nloop invariant i22: ( i >= 1 && i <= n );\nloop invariant i23: ( sn >= a * (i - 1) && sn <= a * i );\nloop invariant i24: ( sn >= 0 && sn <= a * n );\nloop invariant i25: ( sn == a * (n - i + 1) );\nloop invariant i26: ( sn == a * n - a * i + a );\nloop invariant i27: ( sn == a * (n - i) + a );\nloop invariant i28: ( sn == a * (n - 1) + a * i );\nloop invariant i29: ( sn == a * (n - 1) + a * (i - 1) + a );\nloop invariant i30: ( sn == a * (n - 1) + a );\nloop invariant i31: ( sn == a * (n - 1) );\nloop invariant i32: ( sn == a * (n - 2) + a * 2 );\nloop invariant i33: ( sn == a * (n - 2) + a * 1 + a );\nloop invariant i34: ( sn == a * (n - 2) + a );\nloop invariant i35: ( sn == a * (n - 2) );\nloop invariant i36: ( sn == a * (n - 3) + a * 3 );\nloop invariant i37: ( sn == a * (n - 3) + a * 2 + a );\nloop invariant i38: ( sn == a * (n - 3) + a * 1 + a );\nloop invariant i39: ( sn == a * (n - 3) + a );\nloop invariant i40: ( sn == a * (n - 3) );\nloop invariant i41: ( sn == a * (n - 4) + a * 4 );\nloop invariant i42: ( sn == a * (n - 4) + a * 3 + a );\nloop invariant i43: ( sn == a * (n - 4) + a * 2 + a );\nloop invariant i44: ( sn == a * (n - 4) + a * 1 + a );\nloop invariant i45: ( sn == a * (n - 4) + a );\nloop invariant i46: ( sn == a * (n - 4) );\nloop invariant i47: ( sn == a * (n - 5) + a * 5 );\nloop invariant i48: ( sn == a * (n - 5) + a * 4 + a );\nloop invariant i49: ( sn == a * (n - 5) + a * 3 + a );\nloop invariant i50: ( sn == a * (n - 5) + a * 2 + a );\nloop invariant i51: ( sn == a * (n - 5) + a * 1 + a );\nloop invariant i52: ( sn == a * (n - 5) + a );\nloop invariant i53: ( sn == a * (n - 5) );\nloop invariant i54: ( sn == a * (n - 6) + a * 6 );\nloop invariant i55: ( sn == a * (n - 6) + a * 5 + a );\nloop invariant i56: ( sn == a * (n - 6) + a * 4 + a );\nloop invariant i57: ( sn == a * (n - 6) + a * 3 + a );\nloop invariant i58: ( sn == a * (n - 6) + a * 2 + a );\nloop invariant i59: ( sn == a * (n - 6) + a * 1 + a );\nloop invariant i60: ( sn == a * (n - 6) + a );\nloop invariant i61: ( sn == a * (n - 6) );\nloop invariant i62: ( sn == a * (n - 7) + a * 7 );\nloop invariant i63: ( sn == a * (n - 7) + a * 6 + a );\nloop invariant i64: ( sn == a * (n - 7) + a * 5 + a );\nloop invariant i65: ( sn == a * (n - 7) + a * 4 + a );\nloop invariant i66: ( sn == a * (n - 7) + a * 3 + a );\nloop invariant i67: ( sn == a * (n - 7) + a * 2 + a );\nloop invariant i68: ( sn == a * (n - 7) + a * 1 + a );\nloop invariant i69: ( sn == a * (n - 7) + a );\nloop invariant i70: ( sn == a * (n - 7) );\nloop invariant i71: ( sn == a * (n - 8) + a * 8 );\nloop invariant i72: ( sn == a * (n - 8) + a * 7 + a );\nloop invariant i73: ( sn == a * (n - 8) + a * 6 + a );\nloop invariant i74: ( sn == a * (n - 8) + a * 5 + a );\nloop invariant i75: i * a == n * a || sn == 0;\nloop invariant i76: sn <= n*a;\nloop invariant i77: sn == i * a || sn == 0;\nloop invariant i78: 1 <= i <= min(n, 1000);\nloop invariant i79: i <= min(n, 1000);\nloop invariant i80: sn == a * (i - 1);\nloop invariant i81: sn <= a * n;\nloop invariant i82: sn == a * i;\nloop invariant i83: i1;\nloop invariant i84: i2;\nloop invariant i85: i3;\nloop invariant i86: i4;\nloop invariant i87: i5;\nloop invariant i88: i6;\nloop invariant i89: i7;\nloop invariant i90: i8;\nloop invariant i91: i9;\nloop invariant i92: i10;\nloop invariant i93: i11;\nloop invariant i94: i12;\nloop invariant i95: i13;\nloop invariant i96: i14;\nloop invariant i97: i15;\nloop invariant i98: i16;\nloop invariant i99: i17;\nloop invariant i100: i18;\nloop invariant i101: i19;\nloop invariant i102: i20;\nloop invariant i103: i21;\nloop invariant i104: i22;\nloop invariant i105: i23;\nloop invariant i106: i24;\nloop invariant i107: i25;\nloop invariant i108: i26;\nloop invariant i109: i27;\nloop invariant i110: i28;\nloop invariant i111: i29;\nloop invariant i112: i30;\nloop invariant i113: i31;\nloop invariant i114: i32;\nloop invariant i115: i33;\nloop invariant i116: i34;\nloop invariant i117: i35;\nloop invariant i118: i36;\nloop invariant i119: i37;\nloop invariant i120: i38;\nloop invariant i121: i39;\nloop invariant i122: i40;\nloop invariant i123: i41;\nloop invariant i124: i42;\nloop invariant i125: i43;\nloop invariant i126: i44;\nloop invariant i127: i45;\nloop invariant i128: i46;\nloop invariant i129: i47;\nloop invariant i130: i48;\nloop invariant i131: i49;\nloop invariant i132: i50;\nloop invariant i133: i51;\nloop invariant i134: i52;\nloop invariant i135: i53;\nloop invariant i136: i54;\nloop invariant i137: i55;\nloop invariant i138: i56;\nloop invariant i139: i57;\nloop invariant i140: i58;\nloop invariant i141: i59;\nloop invariant i142: i60;\nloop invariant i143: i61;\nloop invariant i144: i62;\nloop invariant i145: i63;\nloop invariant i146: i64;\nloop invariant i147: i65;\nloop invariant i148: i66;\nloop invariant i149: i67;\nloop invariant i150: i68;\nloop invariant i151: i69;\nloop invariant i152: i70;\nloop invariant i153: i71;\nloop invariant i154: i72;\nloop invariant i155: i73;\nloop invariant i156: i74;\nloop invariant i157: i75;\nloop invariant i158: i76;\nloop invariant i159: i77;\nloop invariant i160: i78;\nloop invariant i161: i79;\nloop invariant i162: i80;\nloop invariant i163: i81;\nloop invariant i164: i82;\nloop invariant i165: i83;\nloop invariant i166: i84;\nloop invariant i167: i85;\nloop invariant i168: i86;\nloop invariant i169: i87;\nloop invariant i170: i88;\nloop invariant i171: i89;\nloop invariant i172: i90;\nloop invariant i173: i91;\nloop invariant i174: i92;\nloop invariant i175: i93;\nloop invariant i176: i94;\nloop invariant i177: i95;\nloop invariant i178: i96;\nloop invariant i179: i97;\nloop invariant i180: i98;\nloop invariant i181: i99;\nloop invariant i182: i100;\nloop invariant i183: i101;\nloop invariant i184: i102;\nloop invariant i185: i103;\nloop invariant i186: i104;\nloop invariant i187: i105;\nloop invariant i188: i106;\nloop invariant i189: i107;\nloop invariant i190: i108;\nloop invariant i191: i109;\nloop invariant i192: i110;\nloop invariant i193: i111;\nloop invariant i194: i112;\nloop invariant i195: i113;\nloop invariant i196: i114;\nloop invariant i197: i115;\nloop invariant i198: i116;\nloop invariant i199: i117;\nloop invariant i200: i118;\nloop invariant i201: i119;\nloop invariant i202: i120;\nloop invariant i203: i121;\nloop invariant i204: i122;\nloop invariant i205: i123;\nloop invariant i206: i124;\nloop invariant i207: i125;\nloop invariant i208: i126;\nloop invariant i209: i127;\nloop invariant i210: i128;\nloop invariant i211: i129;\nloop invariant i212: i130;\nloop invariant i213: i131;\nloop invariant i214: i132;\nloop invariant i215: i133;\nloop invariant i216: i134;\nloop invariant i217: i135;\nloop invariant i218: i136;\nloop invariant i219: i137;\nloop invariant i220: i138;\nloop invariant i221: i139;\nloop invariant i222: i140;\nloop invariant i223: i141;\nloop invariant i224: i142;\nloop invariant i225: i143;\nloop invariant i226: i144;\nloop invariant i227: i145;\nloop invariant i228: i146;\nloop invariant i229: i147;\nloop invariant i230: i148;\nloop invariant i231: i149;\nloop invariant i232: i150;\nloop invariant i233: i151;\nloop invariant i234: i152;\nloop invariant i235: i153;\nloop invariant i236: i154;\nloop invariant i237: i155;\nloop invariant i238: i156;\nloop invariant i239: i157;\nloop invariant i240: i158;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 198,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn >= (i - 1) * a;\nloop invariant i3: sn <= i * a;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: i >= 1;\n\nloop invariant i17: sn >= 0;\n\n\n\n\n\nloop invariant i23: ( sn >= a * (i - 1) && sn <= a * i );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i80: sn == a * (i - 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0;\nloop invariant x >= y;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y <= 100;\nloop invariant x % 2 == y % 2;\nloop invariant (x == 0) || (x == 1) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\nloop invariant (x == 0) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 198;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 4) == (0 || 1);\nloop invariant (x % 2) == (y % 2);\nloop invariant (y % 2) == (0 || 1);\nloop invariant (y % 4) == (0 || 1);\nloop invariant (y % 2) == (0 || 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x % 4 == 0;\nloop invariant y % 2 == 1 ==> x % 4 == 2;\nloop invariant y % 2 == 0 ==> x % 8 == 0;\nloop invariant y % 2 == 1 ==> x % 8 == 4;\nloop invariant y % 2 == 0 ==> x % 16 == 0;\nloop invariant y % 2 == 1 ==> x % 16 == 8;\nloop invariant y % 2 == 0 ==> x % 32 == 0;\nloop invariant y % 2 == 1 ==> x % 32 == 16;\nloop invariant y % 2 == 0 ==> x % 64 == 0;\nloop invariant y % 2 == 1 ==> x % 64 == 32;\nloop invariant y % 2 == 0 ==> x % 128 == 0;\nloop invariant y % 2 == 1 ==> x % 128 == 64;\nloop invariant y % 2 == 0 ==> x % 256 == 0;\nloop invariant y % 2 == 1 ==> x % 256 == 128;\nloop invariant y % 2 == 0 ==> x % 512 == 0;\nloop invariant y % 2 == 1 ==> x % 512 == 256;\nloop invariant y % 2 == 0 ==> x % 1024 == 0;\nloop invariant y % 2 == 1 ==> x % 1024 == 512;\nloop invariant y % 2 == 0 ==> x % 2048 == 0;\nloop invariant y % 2 == 1 ==> x % 2048 == 1024;\nloop invariant y % 2 == 0 ==> x % 4096 == 0;\nloop invariant y % 2 == 1 ==> x % 4096 == 2048;\nloop invariant y % 2 == 0 ==> x % 8192 == 0;\nloop invariant y % 2 == 1 ==> x % 8192 == 4096;\nloop invariant y % 2 == 0 ==> x % 16384 == 0;\nloop invariant y % 2 == 1 ==> x % 16384 == 8192;\nloop invariant y % 2 == 0 ==> x % 32768 == 0;\nloop invariant y % 2 == 1 ==> x % 32768 == 16384;\nloop invariant y % 2 == 0 ==> x % 65536 == 0;\nloop invariant y % 2 == 1 ==> x % 65536 == 32768;\nloop invariant y % 2 == 0 ==> x % 131072 == 0;\nloop invariant y % 2 == 1 ==> x % 131072 == 65536;\nloop invariant y % 2 == 0 ==> x % 262144 == 0;\nloop invariant y % 2 == 1 ==> x % 262144 == 131072;\nloop invariant y % 2 == 0 ==> x % 524288 == 0;\nloop invariant y % 2 == 1 ==> x % 524288 == 262144;\nloop invariant y % 2 == 0 ==> x % 1048576 == 0;\nloop invariant y % 2 == 1 ==> x % 1048576 == 524288;\nloop invariant y % 2 == 0 ==> x % 2097152 == 0;\nloop invariant y % 2 == 1 ==> x % 2097152 == 1048576;\nloop invariant y % 2 == 0 ==> x % 4194304 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 2 * y;\nloop invariant x <= y;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant y % 2 == (x - 99) % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y < 2; loop invariant x >= 0; loop invariant x % 2 == y % 2; loop invariant x <= y * 3; loop invariant x % 4 == 0; loop invariant x % 8 == 0; loop invariant x % 16 == 0; loop invariant x % 32 == 0; loop invariant x % 64 == 0; loop invariant x % 128 == 0; loop invariant x % 256 == 0; loop invariant x % 512 == 0; loop invariant x % 1024 == 0; loop invariant x % 2048 == 0; loop invariant x % 4096 == 0; loop invariant x % 8192 == 0; loop invariant x % 16384 == 0; loop invariant x % 32768 == 0; loop invariant x % 65536 == 0; loop invariant x % 131072 == 0; loop invariant x % 262144 == 0; loop invariant x % 524288 == 0; loop invariant x % 1048576 == 0; loop invariant x % 2097152 == 0; loop invariant x % 4194304 == 0; loop invariant x % 8388608 == 0; loop invariant x % 16777216 == 0; loop invariant x % 33554432 == 0; loop invariant x % 67108864 == 0; loop invariant x % 134217728 == 0; loop invariant x % 268435456 == 0; loop invariant x % 536870912 == 0; loop invariant x % 1073741824 == 0; loop invariant x % 2147483648 == 0; loop invariant x % 4294967296 == 0; loop invariant x % 8589934592 == 0; loop invariant x % 17179869184 == 0; loop invariant x % 34359738368 == 0; loop invariant x % 68719476736 == 0; loop invariant x % 137438953472 == 0; loop invariant x % 274877906944 == 0; loop invariant x % 549755813888 == 0; loop invariant x % 1099511627776 == 0; loop invariant x % 2199023255552 == 0; loop invariant x % 4398046511104 == 0; loop invariant x % 8796093022208 == 0; loop invariant x % 17592186044416 == 0; loop invariant x % 35184372088832 == 0; loop invariant x % 70368744177664 == 0; loop invariant x % 140737488355328 == 0; loop invariant x % 281474976710656 == 0; loop invariant x % 562949953421312 == 0; loop invariant x % 1125899906842624 == 0; loop invariant x % 2251799813685248 == 0; loop invariant x % 4503599627370496 == 0; loop invariant x % 9007199254740992 == 0; loop invariant x % 18014398509481984 == 0;\n*/\n```",
                "```\n/*@\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y < 100;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + y % 2 == 1;\nloop invariant x % 2 == 0 ==> x - y % 2 == 0;\nloop invariant x % 2 == 1 ==> x - y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + 2 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + 2 * y % 2 == 1;\nloop invariant x % 2 == 0 ==> x - 2 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x - 2 * y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + 4 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + 4 * y % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant y % 2 == x % 2;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 512 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 512 == 256;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 512 == 256;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0;\nloop invariant x >= y;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == 0 is preserved but not established.\nloop invariant x >= y is preserved but not established.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y <= 100;\nloop invariant x % 2 == y % 2;\nloop invariant (x == 0) || (x == 1) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\nloop invariant (x == 0) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x < 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant (x == 0) || (x == 1) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98) is partially proven to be inductive.\nloop invariant (x == 0) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 198;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 198 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 4) == (0 || 1);\nloop invariant (x % 2) == (y % 2);\nloop invariant (y % 2) == (0 || 1);\nloop invariant (y % 4) == (0 || 1);\nloop invariant (y % 2) == (0 || 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant (x % 4) == (0 || 1) is preserved but not established.\nloop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant (y % 2) == (0 || 1) is partially proven to be inductive.\nloop invariant (y % 4) == (0 || 1) is partially proven to be inductive.\nloop invariant (y % 2) == (0 || 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 24,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x % 4 == 0;\nloop invariant y % 2 == 1 ==> x % 4 == 2;\nloop invariant y % 2 == 0 ==> x % 8 == 0;\nloop invariant y % 2 == 1 ==> x % 8 == 4;\nloop invariant y % 2 == 0 ==> x % 16 == 0;\nloop invariant y % 2 == 1 ==> x % 16 == 8;\nloop invariant y % 2 == 0 ==> x % 32 == 0;\nloop invariant y % 2 == 1 ==> x % 32 == 16;\nloop invariant y % 2 == 0 ==> x % 64 == 0;\nloop invariant y % 2 == 1 ==> x % 64 == 32;\nloop invariant y % 2 == 0 ==> x % 128 == 0;\nloop invariant y % 2 == 1 ==> x % 128 == 64;\nloop invariant y % 2 == 0 ==> x % 256 == 0;\nloop invariant y % 2 == 1 ==> x % 256 == 128;\nloop invariant y % 2 == 0 ==> x % 512 == 0;\nloop invariant y % 2 == 1 ==> x % 512 == 256;\nloop invariant y % 2 == 0 ==> x % 1024 == 0;\nloop invariant y % 2 == 1 ==> x % 1024 == 512;\nloop invariant y % 2 == 0 ==> x % 2048 == 0;\nloop invariant y % 2 == 1 ==> x % 2048 == 1024;\nloop invariant y % 2 == 0 ==> x % 4096 == 0;\nloop invariant y % 2 == 1 ==> x % 4096 == 2048;\nloop invariant y % 2 == 0 ==> x % 8192 == 0;\nloop invariant y % 2 == 1 ==> x % 8192 == 4096;\nloop invariant y % 2 == 0 ==> x % 16384 == 0;\nloop invariant y % 2 == 1 ==> x % 16384 == 8192;\nloop invariant y % 2 == 0 ==> x % 32768 == 0;\nloop invariant y % 2 == 1 ==> x % 32768 == 16384;\nloop invariant y % 2 == 0 ==> x % 65536 == 0;\nloop invariant y % 2 == 1 ==> x % 65536 == 32768;\nloop invariant y % 2 == 0 ==> x % 131072 == 0;\nloop invariant y % 2 == 1 ==> x % 131072 == 65536;\nloop invariant y % 2 == 0 ==> x % 262144 == 0;\nloop invariant y % 2 == 1 ==> x % 262144 == 131072;\nloop invariant y % 2 == 0 ==> x % 524288 == 0;\nloop invariant y % 2 == 1 ==> x % 524288 == 262144;\nloop invariant y % 2 == 0 ==> x % 1048576 == 0;\nloop invariant y % 2 == 1 ==> x % 1048576 == 524288;\nloop invariant y % 2 == 0 ==> x % 2097152 == 0;\nloop invariant y % 2 == 1 ==> x % 2097152 == 1048576;\nloop invariant y % 2 == 0 ==> x % 4194304 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is preserved but not established.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 8 == 0 is established but not preserved.\nloop invariant y % 2 == 1 ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 512 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 512 == 256 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 1024 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 1024 == 512 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2048 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2048 == 1024 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4096 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 4096 == 2048 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 8192 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 8192 == 4096 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 16384 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 16384 == 8192 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 32768 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 32768 == 16384 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 65536 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 65536 == 32768 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 131072 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 131072 == 65536 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 262144 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 262144 == 131072 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 524288 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 524288 == 262144 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 1048576 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 1048576 == 524288 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2097152 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2097152 == 1048576 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4194304 == 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: y % 2 == 0 ==> x % 2 == 0;\n\nloop invariant i5: y % 2 == 0 ==> x % 4 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * y;\nloop invariant x <= y;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 2 * y is established but not preserved.\nloop invariant x <= y is established but not preserved.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant y % 2 == (x - 99) % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is preserved but not established.\nloop invariant y % 2 == (x - 99) % 2 is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y < 2; loop invariant x >= 0; loop invariant x % 2 == y % 2; loop invariant x <= y * 3; loop invariant x % 4 == 0; loop invariant x % 8 == 0; loop invariant x % 16 == 0; loop invariant x % 32 == 0; loop invariant x % 64 == 0; loop invariant x % 128 == 0; loop invariant x % 256 == 0; loop invariant x % 512 == 0; loop invariant x % 1024 == 0; loop invariant x % 2048 == 0; loop invariant x % 4096 == 0; loop invariant x % 8192 == 0; loop invariant x % 16384 == 0; loop invariant x % 32768 == 0; loop invariant x % 65536 == 0; loop invariant x % 131072 == 0; loop invariant x % 262144 == 0; loop invariant x % 524288 == 0; loop invariant x % 1048576 == 0; loop invariant x % 2097152 == 0; loop invariant x % 4194304 == 0; loop invariant x % 8388608 == 0; loop invariant x % 16777216 == 0; loop invariant x % 33554432 == 0; loop invariant x % 67108864 == 0; loop invariant x % 134217728 == 0; loop invariant x % 268435456 == 0; loop invariant x % 536870912 == 0; loop invariant x % 1073741824 == 0; loop invariant x % 2147483648 == 0; loop invariant x % 4294967296 == 0; loop invariant x % 8589934592 == 0; loop invariant x % 17179869184 == 0; loop invariant x % 34359738368 == 0; loop invariant x % 68719476736 == 0; loop invariant x % 137438953472 == 0; loop invariant x % 274877906944 == 0; loop invariant x % 549755813888 == 0; loop invariant x % 1099511627776 == 0; loop invariant x % 2199023255552 == 0; loop invariant x % 4398046511104 == 0; loop invariant x % 8796093022208 == 0; loop invariant x % 17592186044416 == 0; loop invariant x % 35184372088832 == 0; loop invariant x % 70368744177664 == 0; loop invariant x % 140737488355328 == 0; loop invariant x % 281474976710656 == 0; loop invariant x % 562949953421312 == 0; loop invariant x % 1125899906842624 == 0; loop invariant x % 2251799813685248 == 0; loop invariant x % 4503599627370496 == 0; loop invariant x % 9007199254740992 == 0; loop invariant x % 18014398509481984 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y < 2; loop invariant x >= 0; loop invariant x % 2 == y % 2; loop invariant x <= y * 3; loop invariant x % 4 == 0; loop invariant x % 8 == 0; loop invariant x % 16 == 0; loop invariant x % 32 == 0; loop invariant x % 64 == 0; loop invariant x % 128 == 0; loop invariant x % 256 == 0; loop invariant x % 512 == 0; loop invariant x % 1024 == 0; loop invariant x % 2048 == 0; loop invariant x % 4096 == 0; loop invariant x % 8192 == 0; loop invariant x % 16384 == 0; loop invariant x % 32768 == 0; loop invariant x % 65536 == 0; loop invariant x % 131072 == 0; loop invariant x % 262144 == 0; loop invariant x % 524288 == 0; loop invariant x % 1048576 == 0; loop invariant x % 2097152 == 0; loop invariant x % 4194304 == 0; loop invariant x % 8388608 == 0; loop invariant x % 16777216 == 0; loop invariant x % 33554432 == 0; loop invariant x % 67108864 == 0; loop invariant x % 134217728 == 0; loop invariant x % 268435456 == 0; loop invariant x % 536870912 == 0; loop invariant x % 1073741824 == 0; loop invariant x % 2147483648 == 0; loop invariant x % 4294967296 == 0; loop invariant x % 8589934592 == 0; loop invariant x % 17179869184 == 0; loop invariant x % 34359738368 == 0; loop invariant x % 68719476736 == 0; loop invariant x % 137438953472 == 0; loop invariant x % 274877906944 == 0; loop invariant x % 549755813888 == 0; loop invariant x % 1099511627776 == 0; loop invariant x % 2199023255552 == 0; loop invariant x % 4398046511104 == 0; loop invariant x % 8796093022208 == 0; loop invariant x % 17592186044416 == 0; loop invariant x % 35184372088832 == 0; loop invariant x % 70368744177664 == 0; loop invariant x % 140737488355328 == 0; loop invariant x % 281474976710656 == 0; loop invariant x % 562949953421312 == 0; loop invariant x % 1125899906842624 == 0; loop invariant x % 2251799813685248 == 0; loop invariant x % 4503599627370496 == 0; loop invariant x % 9007199254740992 == 0; loop invariant x % 18014398509481984 == 0 is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y < 100;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + y % 2 == 1;\nloop invariant x % 2 == 0 ==> x - y % 2 == 0;\nloop invariant x % 2 == 1 ==> x - y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + 2 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + 2 * y % 2 == 1;\nloop invariant x % 2 == 0 ==> x - 2 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x - 2 * y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + 4 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + 4 * y % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant 0 <= x < 100 is partially proven to be inductive.\nloop invariant 0 <= y < 100 is preserved but not established.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + y % 2 == 0 is established but not preserved.\nloop invariant x % 2 == 1 ==> x + y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x - y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x - y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + 2 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x + 2 * y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x - 2 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x - 2 * y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + 4 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x + 4 * y % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\nloop invariant i5: x % 2 == 1 ==> y % 2 == 1;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 20,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant y % 2 == x % 2;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 512 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 512 == 256;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 512 == 256;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is preserved but not established.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 8 == 0 is established but not preserved.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 512 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 512 == 256 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 512 == 256 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i6: (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0;\n\n\nloop invariant i9: (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0;\n\n\n\nloop invariant i13: (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0;\n\n\n\nloop invariant i17: (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0;\n\n\n\nloop invariant i21: (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0;\n\n\n\nloop invariant i25: (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0;\n\n\n\nloop invariant i29: (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0;\n\n\n\nloop invariant i33: (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0;\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 is preserved but not established.\nloop invariant x >= y is preserved but not established.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant 0 <= x < 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 100 is partially proven to be inductive.\nloop invariant (x == 0) || (x == 1) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98) is partially proven to be inductive.\nloop invariant (x == 0) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98) is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 198 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant (x % 4) == (0 || 1) is preserved but not established.\nloop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant (y % 2) == (0 || 1) is partially proven to be inductive.\nloop invariant (y % 4) == (0 || 1) is partially proven to be inductive.\nloop invariant (y % 2) == (0 || 2) is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 8 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 512 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 512 == 256 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 1024 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 1024 == 512 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2048 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2048 == 1024 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4096 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 4096 == 2048 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 8192 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 8192 == 4096 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 16384 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 16384 == 8192 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 32768 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 32768 == 16384 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 65536 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 65536 == 32768 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 131072 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 131072 == 65536 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 262144 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 262144 == 131072 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 524288 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 524288 == 262144 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 1048576 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 1048576 == 524288 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2097152 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2097152 == 1048576 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4194304 == 0 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is partially proven to be inductive.\nloop invariant 0 <= x <= 2 * y is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y % 2 == (x - 99) % 2 is partially proven to be inductive.\nloop invariant 0 <= y < 2; loop invariant x >= 0; loop invariant x % 2 == y % 2; loop invariant x <= y * 3; loop invariant x % 4 == 0; loop invariant x % 8 == 0; loop invariant x % 16 == 0; loop invariant x % 32 == 0; loop invariant x % 64 == 0; loop invariant x % 128 == 0; loop invariant x % 256 == 0; loop invariant x % 512 == 0; loop invariant x % 1024 == 0; loop invariant x % 2048 == 0; loop invariant x % 4096 == 0; loop invariant x % 8192 == 0; loop invariant x % 16384 == 0; loop invariant x % 32768 == 0; loop invariant x % 65536 == 0; loop invariant x % 131072 == 0; loop invariant x % 262144 == 0; loop invariant x % 524288 == 0; loop invariant x % 1048576 == 0; loop invariant x % 2097152 == 0; loop invariant x % 4194304 == 0; loop invariant x % 8388608 == 0; loop invariant x % 16777216 == 0; loop invariant x % 33554432 == 0; loop invariant x % 67108864 == 0; loop invariant x % 134217728 == 0; loop invariant x % 268435456 == 0; loop invariant x % 536870912 == 0; loop invariant x % 1073741824 == 0; loop invariant x % 2147483648 == 0; loop invariant x % 4294967296 == 0; loop invariant x % 8589934592 == 0; loop invariant x % 17179869184 == 0; loop invariant x % 34359738368 == 0; loop invariant x % 68719476736 == 0; loop invariant x % 137438953472 == 0; loop invariant x % 274877906944 == 0; loop invariant x % 549755813888 == 0; loop invariant x % 1099511627776 == 0; loop invariant x % 2199023255552 == 0; loop invariant x % 4398046511104 == 0; loop invariant x % 8796093022208 == 0; loop invariant x % 17592186044416 == 0; loop invariant x % 35184372088832 == 0; loop invariant x % 70368744177664 == 0; loop invariant x % 140737488355328 == 0; loop invariant x % 281474976710656 == 0; loop invariant x % 562949953421312 == 0; loop invariant x % 1125899906842624 == 0; loop invariant x % 2251799813685248 == 0; loop invariant x % 4503599627370496 == 0; loop invariant x % 9007199254740992 == 0; loop invariant x % 18014398509481984 == 0 is partially proven to be inductive.\nloop invariant 0 <= y < 100 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x + y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x - y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x - y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + 2 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x + 2 * y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x - 2 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x - 2 * y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + 4 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x + 4 * y % 2 == 1 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 8 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 512 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 512 == 256 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 512 == 256 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= x <= 99;\nloop invariant i2: y % 2 == 0;\nloop invariant i3: x >= y;\nloop invariant i4: x % 2 == 0;\nloop invariant i5: x % 2 == y % 2;\nloop invariant i6: 0 <= x < 100;\nloop invariant i7: 0 <= y <= 100;\nloop invariant i8: (x == 0) || (x == 1) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\nloop invariant i9: (x == 0) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\nloop invariant i10: x >= 0;\nloop invariant i11: x <= 198;\nloop invariant i12: y >= 0;\nloop invariant i13: y <= 99;\nloop invariant i14: (x % 4) == (0 || 1);\nloop invariant i15: (x % 2) == (y % 2);\nloop invariant i16: (y % 2) == (0 || 1);\nloop invariant i17: (y % 4) == (0 || 1);\nloop invariant i18: (y % 2) == (0 || 2);\nloop invariant i19: 0 <= y <= 100000;\nloop invariant i20: x >= (1 + (y - 1) * y / 2);\nloop invariant i21: y % 2 == x % 2;\nloop invariant i22: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i23: y % 2 == 1 ==> x % 2 == 1;\nloop invariant i24: y % 2 == 0 ==> x % 4 == 0;\nloop invariant i25: y % 2 == 1 ==> x % 4 == 2;\nloop invariant i26: y % 2 == 0 ==> x % 8 == 0;\nloop invariant i27: y % 2 == 1 ==> x % 8 == 4;\nloop invariant i28: y % 2 == 0 ==> x % 16 == 0;\nloop invariant i29: y % 2 == 1 ==> x % 16 == 8;\nloop invariant i30: y % 2 == 0 ==> x % 32 == 0;\nloop invariant i31: y % 2 == 1 ==> x % 32 == 16;\nloop invariant i32: y % 2 == 0 ==> x % 64 == 0;\nloop invariant i33: y % 2 == 1 ==> x % 64 == 32;\nloop invariant i34: y % 2 == 0 ==> x % 128 == 0;\nloop invariant i35: y % 2 == 1 ==> x % 128 == 64;\nloop invariant i36: y % 2 == 0 ==> x % 256 == 0;\nloop invariant i37: y % 2 == 1 ==> x % 256 == 128;\nloop invariant i38: y % 2 == 0 ==> x % 512 == 0;\nloop invariant i39: y % 2 == 1 ==> x % 512 == 256;\nloop invariant i40: y % 2 == 0 ==> x % 1024 == 0;\nloop invariant i41: y % 2 == 1 ==> x % 1024 == 512;\nloop invariant i42: y % 2 == 0 ==> x % 2048 == 0;\nloop invariant i43: y % 2 == 1 ==> x % 2048 == 1024;\nloop invariant i44: y % 2 == 0 ==> x % 4096 == 0;\nloop invariant i45: y % 2 == 1 ==> x % 4096 == 2048;\nloop invariant i46: y % 2 == 0 ==> x % 8192 == 0;\nloop invariant i47: y % 2 == 1 ==> x % 8192 == 4096;\nloop invariant i48: y % 2 == 0 ==> x % 16384 == 0;\nloop invariant i49: y % 2 == 1 ==> x % 16384 == 8192;\nloop invariant i50: y % 2 == 0 ==> x % 32768 == 0;\nloop invariant i51: y % 2 == 1 ==> x % 32768 == 16384;\nloop invariant i52: y % 2 == 0 ==> x % 65536 == 0;\nloop invariant i53: y % 2 == 1 ==> x % 65536 == 32768;\nloop invariant i54: y % 2 == 0 ==> x % 131072 == 0;\nloop invariant i55: y % 2 == 1 ==> x % 131072 == 65536;\nloop invariant i56: y % 2 == 0 ==> x % 262144 == 0;\nloop invariant i57: y % 2 == 1 ==> x % 262144 == 131072;\nloop invariant i58: y % 2 == 0 ==> x % 524288 == 0;\nloop invariant i59: y % 2 == 1 ==> x % 524288 == 262144;\nloop invariant i60: y % 2 == 0 ==> x % 1048576 == 0;\nloop invariant i61: y % 2 == 1 ==> x % 1048576 == 524288;\nloop invariant i62: y % 2 == 0 ==> x % 2097152 == 0;\nloop invariant i63: y % 2 == 1 ==> x % 2097152 == 1048576;\nloop invariant i64: y % 2 == 0 ==> x % 4194304 == 0;\nloop invariant i65: 0 <= y <= 99;\nloop invariant i66: 0 <= x <= 2 * y;\nloop invariant i67: x <= y;\nloop invariant i68: y % 2 == (x - 99) % 2;\nloop invariant i69: 0 <= y < 2; loop invariant x >= 0; loop invariant x % 2 == y % 2; loop invariant x <= y * 3; loop invariant x % 4 == 0; loop invariant x % 8 == 0; loop invariant x % 16 == 0; loop invariant x % 32 == 0; loop invariant x % 64 == 0; loop invariant x % 128 == 0; loop invariant x % 256 == 0; loop invariant x % 512 == 0; loop invariant x % 1024 == 0; loop invariant x % 2048 == 0; loop invariant x % 4096 == 0; loop invariant x % 8192 == 0; loop invariant x % 16384 == 0; loop invariant x % 32768 == 0; loop invariant x % 65536 == 0; loop invariant x % 131072 == 0; loop invariant x % 262144 == 0; loop invariant x % 524288 == 0; loop invariant x % 1048576 == 0; loop invariant x % 2097152 == 0; loop invariant x % 4194304 == 0; loop invariant x % 8388608 == 0; loop invariant x % 16777216 == 0; loop invariant x % 33554432 == 0; loop invariant x % 67108864 == 0; loop invariant x % 134217728 == 0; loop invariant x % 268435456 == 0; loop invariant x % 536870912 == 0; loop invariant x % 1073741824 == 0; loop invariant x % 2147483648 == 0; loop invariant x % 4294967296 == 0; loop invariant x % 8589934592 == 0; loop invariant x % 17179869184 == 0; loop invariant x % 34359738368 == 0; loop invariant x % 68719476736 == 0; loop invariant x % 137438953472 == 0; loop invariant x % 274877906944 == 0; loop invariant x % 549755813888 == 0; loop invariant x % 1099511627776 == 0; loop invariant x % 2199023255552 == 0; loop invariant x % 4398046511104 == 0; loop invariant x % 8796093022208 == 0; loop invariant x % 17592186044416 == 0; loop invariant x % 35184372088832 == 0; loop invariant x % 70368744177664 == 0; loop invariant x % 140737488355328 == 0; loop invariant x % 281474976710656 == 0; loop invariant x % 562949953421312 == 0; loop invariant x % 1125899906842624 == 0; loop invariant x % 2251799813685248 == 0; loop invariant x % 4503599627370496 == 0; loop invariant x % 9007199254740992 == 0; loop invariant x % 18014398509481984 == 0;\nloop invariant i70: 0 <= y < 100;\nloop invariant i71: x % 2 == 0 ==> y % 2 == 0;\nloop invariant i72: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i73: x % 2 == 0 ==> x + y % 2 == 0;\nloop invariant i74: x % 2 == 1 ==> x + y % 2 == 1;\nloop invariant i75: x % 2 == 0 ==> x - y % 2 == 0;\nloop invariant i76: x % 2 == 1 ==> x - y % 2 == 1;\nloop invariant i77: x % 2 == 0 ==> x + 2 * y % 2 == 0;\nloop invariant i78: x % 2 == 1 ==> x + 2 * y % 2 == 1;\nloop invariant i79: x % 2 == 0 ==> x - 2 * y % 2 == 0;\nloop invariant i80: x % 2 == 1 ==> x - 2 * y % 2 == 1;\nloop invariant i81: x % 2 == 0 ==> x + 4 * y % 2 == 0;\nloop invariant i82: x % 2 == 1 ==> x + 4 * y % 2 == 1;\nloop invariant i83: (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant i84: (x % 2 == 1 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant i85: (x % 2 == 0 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant i86: (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant i87: (x % 2 == 0 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant i88: (x % 2 == 1 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant i89: (x % 2 == 0 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant i90: (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant i91: (x % 2 == 0 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant i92: (x % 2 == 1 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant i93: (x % 2 == 0 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant i94: (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant i95: (x % 2 == 0 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant i96: (x % 2 == 1 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant i97: (x % 2 == 0 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant i98: (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant i99: (x % 2 == 0 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant i100: (x % 2 == 1 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant i101: (x % 2 == 0 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant i102: (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant i103: (x % 2 == 0 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant i104: (x % 2 == 1 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant i105: (x % 2 == 0 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant i106: (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant i107: (x % 2 == 0 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant i108: (x % 2 == 1 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant i109: (x % 2 == 0 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant i110: (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant i111: (x % 2 == 0 && y % 2 == 0) ==> x % 512 == 0;\nloop invariant i112: (x % 2 == 1 && y % 2 == 1) ==> x % 512 == 256;\nloop invariant i113: (x % 2 == 0 && y % 2 == 1) ==> x % 512 == 256;\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "combined_annotation_num_solver_calls": 49,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x >= 0;\n\nloop invariant i12: y >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i22: y % 2 == 0 ==> x % 2 == 0;\n\nloop invariant i24: y % 2 == 0 ==> x % 4 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: x % 2 == 1 ==> y % 2 == 1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i83: (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0;\n\n\nloop invariant i86: (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0;\n\n\n\nloop invariant i90: (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0;\n\n\n\nloop invariant i94: (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0;\n\n\n\nloop invariant i98: (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0;\n\n\n\nloop invariant i102: (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0;\n\n\n\nloop invariant i106: (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0;\n\n\n\nloop invariant i110: (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0;\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= v3 <= unknown_int();\nloop invariant 1 <= v1 <= 5;\nloop invariant 1 <= v2 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> 2* x2 - x1 - x3>=0;\nloop invariant 2*x2 - x1 - x3 <= 0 ==> 2*x2 -x1-x3 <=0;\nloop invariant v2 +5 >=0 ==> v2 +5 >=0;\nloop invariant v2 <= 5 ==> v2 <= 5;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant v3  >= 0 ==> v3  >= 0;\nloop invariant v1 <= 5 ==> v1 <= 5;\nloop invariant 2*v2 + 2*t  >= v1 + v3 ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant 5*t  + 75 >= x2 ==> 5*t  + 75 >= x2;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75 ==> x2 + 5*t >= 75;\nloop invariant t >= 0 ==> t >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= t <= 100000;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x2 <= 75;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant x2 >= 0;\nloop invariant x2 <= 75;\nloop invariant x3 >= -50;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v1 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x2 <= 75;\nloop invariant 0 <= x3 <= (-50);\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\nloop invariant (2*v2 - v1 - v3 == 0);\nloop invariant (v2 + 5 >= 0);\nloop invariant (v2 <= 5);\nloop invariant (x2 + 5*t >= 75);\nloop invariant (v1 - v3 >= 0);\nloop invariant (v1 <= 5);\nloop invariant (v1 - 2*v2 + v3 + 2*t >= 0);\nloop invariant (v2 <= 6);\nloop invariant (v3 >= 0);\nloop invariant (v2 + 6 >= 0);\nloop invariant (2*v2 + 2*t >= v1 + v3);\nloop invariant (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0);\nloop invariant (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0);\nloop invariant (x1 + v1 >= x1) ==> (x1 + v1 >= x1);\nloop invariant (x3 + v3 >= x3) ==> (x3 + v3 >= x3);\nloop invariant (x2 + v2 >= x2) ==> (x2 + v2 >= x2);\nloop invariant (v2 - 1 >= v2) ==> (v2 - 1 >= v2);\nloop invariant (v2 + 1 >= v2) ==> (v2 + 1 >= v2);\nloop invariant (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant (t + 1 <= t) ==> (t + 1 <= t);\nloop invariant (v2 - 1 <= v2) ==> (v2 - 1 <= v2);\nloop invariant (v2 + 1 <= v2) ==> (v2 + 1 <= v2);\nloop invariant (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant (t + 1 <= t) ==> (t + 1 <= t);\n*/\n```",
                "```\n/*@\nloop invariant x1 + v1 * t >= x2 + v2 * t;\nloop invariant x2 + v2 * t >= x3 + v3 * t;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant unknown_int() ==> (v2 + 5 >= 0);\nloop invariant unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= t <= 100;\nloop invariant (x1 - x3) = (v1 + t * v1 + t * v2);\nloop invariant x2 = (75 + v2 + t * v2);\nloop invariant v2 = (5 - t);\nloop invariant v1 = (5 + t);\nloop invariant v3 = (0 + t * v3);\nloop invariant t = (0 + t);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v1 >= 0;\nloop invariant v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2-1) && (t = t+1);\nloop invariant 2*x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2+1) && (t = t+1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x3 + v3 >= 0;\nloop invariant x2 + v2 >= 0;\nloop invariant x1 + v1 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= v2 <= 6;\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 >= -50;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant 5 * t + 75 >= x2;\nloop invariant x2 + 5 * t >= 75;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v1 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant 0 <= v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x1 >= 100 + v1 * t;\nloop invariant x3 <= -50 + v3 * t;\nloop invariant x2 >= 75 + v2 * t;\nloop invariant -50 <= x1 + x3;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x2 >= -25;\nloop invariant x1 + x2 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= v1 <= 5;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant 5*t  + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3  >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                "```\n/*@\n\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= v3 <= unknown_int();\nloop invariant 1 <= v1 <= 5;\nloop invariant 1 <= v2 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> 2* x2 - x1 - x3>=0;\nloop invariant 2*x2 - x1 - x3 <= 0 ==> 2*x2 -x1-x3 <=0;\nloop invariant v2 +5 >=0 ==> v2 +5 >=0;\nloop invariant v2 <= 5 ==> v2 <= 5;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant v3  >= 0 ==> v3  >= 0;\nloop invariant v1 <= 5 ==> v1 <= 5;\nloop invariant 2*v2 + 2*t  >= v1 + v3 ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant 5*t  + 75 >= x2 ==> 5*t  + 75 >= x2;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75 ==> x2 + 5*t >= 75;\nloop invariant t >= 0 ==> t >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 45: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\nloop invariant i4: v1 - v3 >= 0;\n\nloop invariant i6: 2*x2 - x1 - x3 >= 0 ==> 2* x2 - x1 - x3>=0;\nloop invariant i7: 2*x2 - x1 - x3 <= 0 ==> 2*x2 -x1-x3 <=0;\nloop invariant i8: v2 +5 >=0 ==> v2 +5 >=0;\nloop invariant i9: v2 <= 5 ==> v2 <= 5;\nloop invariant i10: v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant i11: v3  >= 0 ==> v3  >= 0;\nloop invariant i12: v1 <= 5 ==> v1 <= 5;\nloop invariant i13: 2*v2 + 2*t  >= v1 + v3 ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant i14: 5*t  + 75 >= x2 ==> 5*t  + 75 >= x2;\nloop invariant i15: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i16: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i17: x2 + 5*t >= 75 ==> x2 + 5*t >= 75;\nloop invariant i18: t >= 0 ==> t >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= t <= 100000;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= t <= 100000 is preserved but not established.\nloop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant x1 == 100 is partially proven to be inductive.\nloop invariant x2 == 75 is partially proven to be inductive.\nloop invariant x3 == -50 is partially proven to be inductive.\nloop invariant t == 0 is partially proven to be inductive.\nloop invariant x1 + x2 + x3 == 225 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 == 0 is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= v1 <= 5;\nloop invariant i3: v1 - v3 >= 0;\n\n\nloop invariant i6: 2*v2 + 2*t >= v1 + v3;\nloop invariant i7: v2 + 6 >= 0;\nloop invariant i8: 5*t + 75 >= x2;\nloop invariant i9: v3 >= 0;\nloop invariant i10: v1 <= 5;\nloop invariant i11: v2 <= 6;\nloop invariant i12: x2 + 5*t >= 75;\nloop invariant i13: v1 - 2*v2 + v3 + 2*t >= 0;\n\n\n\n\n\n\nloop invariant i20: v1 >= 0;\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x2 <= 75;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x2 <= 75 is established but not preserved.\nloop invariant 0 <= v2 <= 5 is established but not preserved.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant x1 >= x2 is established but not preserved.\nloop invariant x3 <= x2 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 is partially proven to be inductive.\nloop invariant x3 + v3 <= x2 is established but not preserved.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant t >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\nloop invariant i8: x2 + 5*t >= 75;\nloop invariant i9: v2 + 6 >= 0;\nloop invariant i10: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i11: v1 - v3 >= 0;\nloop invariant i12: v1 <= 5;\nloop invariant i13: 5*t + 75 >= x2;\nloop invariant i14: 2*v2 + 2*t >= v1 + v3;\nloop invariant i15: v2 <= 6;\nloop invariant i16: v3 >= 0;\nloop invariant i17: t >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= t <= 5 is preserved but not established.\nloop invariant 0 <= x2 <= 5 is partially proven to be inductive.\nloop invariant 0 <= x1 <= 100 is partially proven to be inductive.\nloop invariant 0 <= x3 <= 50 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 6 is partially proven to be inductive.\nloop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 5 is partially proven to be inductive.\nloop invariant 0 <= t <= 6 is partially proven to be inductive.\nloop invariant 0 <= t <= 5 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\nloop invariant i6: 0 <= v1 <= 5;\nloop invariant i7: 0 <= v3 <= 5;\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant x2 >= 0;\nloop invariant x2 <= 75;\nloop invariant x3 >= -50;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v1 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 <= 100 is established but not preserved.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x2 <= 75 is established but not preserved.\nloop invariant x3 >= -50 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant v2 >= 0 is established but not preserved.\nloop invariant v2 <= 5 is established but not preserved.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 - v1 - v3 == 0 is established but not preserved.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\nloop invariant i4: x3 >= -50;\n\nloop invariant i6: v1 >= 0;\nloop invariant i7: v1 <= 5;\n\n\nloop invariant i10: v3 >= 0;\n\n\nloop invariant i13: v2 <= 6;\nloop invariant i14: v2 + 6 >= 0;\nloop invariant i15: x2 + 5*t >= 75;\nloop invariant i16: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i17: v1 - v3 >= 0;\nloop invariant i18: 2*v2 + 2*t >= v1 + v3;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x2 <= 75;\nloop invariant 0 <= x3 <= (-50);\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\nloop invariant (2*v2 - v1 - v3 == 0);\nloop invariant (v2 + 5 >= 0);\nloop invariant (v2 <= 5);\nloop invariant (x2 + 5*t >= 75);\nloop invariant (v1 - v3 >= 0);\nloop invariant (v1 <= 5);\nloop invariant (v1 - 2*v2 + v3 + 2*t >= 0);\nloop invariant (v2 <= 6);\nloop invariant (v3 >= 0);\nloop invariant (v2 + 6 >= 0);\nloop invariant (2*v2 + 2*t >= v1 + v3);\nloop invariant (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0);\nloop invariant (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0);\nloop invariant (x1 + v1 >= x1) ==> (x1 + v1 >= x1);\nloop invariant (x3 + v3 >= x3) ==> (x3 + v3 >= x3);\nloop invariant (x2 + v2 >= x2) ==> (x2 + v2 >= x2);\nloop invariant (v2 - 1 >= v2) ==> (v2 - 1 >= v2);\nloop invariant (v2 + 1 >= v2) ==> (v2 + 1 >= v2);\nloop invariant (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant (t + 1 <= t) ==> (t + 1 <= t);\nloop invariant (v2 - 1 <= v2) ==> (v2 - 1 <= v2);\nloop invariant (v2 + 1 <= v2) ==> (v2 + 1 <= v2);\nloop invariant (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant (t + 1 <= t) ==> (t + 1 <= t);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x1 <= 100 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 75 is partially proven to be inductive.\nloop invariant 0 <= x3 <= (-50) is preserved but not established.\nloop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 5 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant t >= 0 is partially proven to be inductive.\nloop invariant (2*v2 - v1 - v3 == 0) is partially proven to be inductive.\nloop invariant (v2 + 5 >= 0) is partially proven to be inductive.\nloop invariant (v2 <= 5) is partially proven to be inductive.\nloop invariant (x2 + 5*t >= 75) is partially proven to be inductive.\nloop invariant (v1 - v3 >= 0) is partially proven to be inductive.\nloop invariant (v1 <= 5) is partially proven to be inductive.\nloop invariant (v1 - 2*v2 + v3 + 2*t >= 0) is partially proven to be inductive.\nloop invariant (v2 <= 6) is partially proven to be inductive.\nloop invariant (v3 >= 0) is partially proven to be inductive.\nloop invariant (v2 + 6 >= 0) is partially proven to be inductive.\nloop invariant (2*v2 + 2*t >= v1 + v3) is partially proven to be inductive.\nloop invariant (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0) is partially proven to be inductive.\nloop invariant (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0) is partially proven to be inductive.\nloop invariant (x1 + v1 >= x1) ==> (x1 + v1 >= x1) is partially proven to be inductive.\nloop invariant (x3 + v3 >= x3) ==> (x3 + v3 >= x3) is partially proven to be inductive.\nloop invariant (x2 + v2 >= x2) ==> (x2 + v2 >= x2) is partially proven to be inductive.\nloop invariant (v2 - 1 >= v2) ==> (v2 - 1 >= v2) is partially proven to be inductive.\nloop invariant (v2 + 1 >= v2) ==> (v2 + 1 >= v2) is partially proven to be inductive.\nloop invariant (t + 1 >= t) ==> (t + 1 >= t) is partially proven to be inductive.\nloop invariant (t + 1 <= t) ==> (t + 1 <= t) is partially proven to be inductive.\nloop invariant (v2 - 1 <= v2) ==> (v2 - 1 <= v2) is partially proven to be inductive.\nloop invariant (v2 + 1 <= v2) ==> (v2 + 1 <= v2) is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\nloop invariant i4: 0 <= v1 <= 5;\n\nloop invariant i6: v3 >= 0;\n\n\nloop invariant i9: t >= 0;\n\n\n\nloop invariant i13: (x2 + 5*t >= 75);\nloop invariant i14: (v1 - v3 >= 0);\nloop invariant i15: (v1 <= 5);\nloop invariant i16: (v1 - 2*v2 + v3 + 2*t >= 0);\nloop invariant i17: (v2 <= 6);\nloop invariant i18: (v3 >= 0);\nloop invariant i19: (v2 + 6 >= 0);\nloop invariant i20: (2*v2 + 2*t >= v1 + v3);\nloop invariant i21: (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0);\nloop invariant i22: (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0);\nloop invariant i23: (x1 + v1 >= x1) ==> (x1 + v1 >= x1);\nloop invariant i24: (x3 + v3 >= x3) ==> (x3 + v3 >= x3);\nloop invariant i25: (x2 + v2 >= x2) ==> (x2 + v2 >= x2);\nloop invariant i26: (v2 - 1 >= v2) ==> (v2 - 1 >= v2);\nloop invariant i27: (v2 + 1 >= v2) ==> (v2 + 1 >= v2);\nloop invariant i28: (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant i29: (t + 1 <= t) ==> (t + 1 <= t);\nloop invariant i30: (v2 - 1 <= v2) ==> (v2 - 1 <= v2);\nloop invariant i31: (v2 + 1 <= v2) ==> (v2 + 1 <= v2);\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant x1 + v1 * t >= x2 + v2 * t;\nloop invariant x2 + v2 * t >= x3 + v3 * t;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant unknown_int() ==> (v2 + 5 >= 0);\nloop invariant unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 58: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: v1 <= 5;\n\nloop invariant i5: v3 >= 0;\n\nloop invariant i7: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i8: 5 * t + 75 >= x2;\nloop invariant i9: v2 <= 6;\nloop invariant i10: v2 + 6 >= 0;\nloop invariant i11: x2 + 5 * t >= 75;\nloop invariant i12: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i13: v1 - v3 >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= t <= 100;\nloop invariant (x1 - x3) = (v1 + t * v1 + t * v2);\nloop invariant x2 = (75 + v2 + t * v2);\nloop invariant v2 = (5 - t);\nloop invariant v1 = (5 + t);\nloop invariant v3 = (0 + t * v3);\nloop invariant t = (0 + t);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 46: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v1 >= 0;\nloop invariant v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2-1) && (t = t+1);\nloop invariant 2*x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2+1) && (t = t+1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 54: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: v1 >= 0;\nloop invariant i3: v3 >= 0;\nloop invariant i4: 2*v2 + 2*t >= v1 + v3;\nloop invariant i5: v2 <= 6;\nloop invariant i6: x2 + 5*t >= 75;\nloop invariant i7: v2 + 6 >= 0;\nloop invariant i8: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i9: v1 - v3 >= 0;\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x3 + v3 >= 0;\nloop invariant x2 + v2 >= 0;\nloop invariant x1 + v1 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 5 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant x3 + v3 >= 0 is preserved but not established.\nloop invariant x2 + v2 >= 0 is partially proven to be inductive.\nloop invariant x1 + v1 >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t  >= v1 + v3 is partially proven to be inductive.\nloop invariant v3  >= 0 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= v1 <= 5;\n\nloop invariant i3: v2 + 6 >= 0;\nloop invariant i4: v3 >= 0;\nloop invariant i5: x2 + 5*t >= 75;\n\n\nloop invariant i8: x1 + v1 >= 0;\nloop invariant i9: v1 - v3 >= 0;\nloop invariant i10: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i11: 2*v2 + 2*t  >= v1 + v3;\nloop invariant i12: v3  >= 0;\nloop invariant i13: v2 <= 6;\n\nloop invariant i15: v1 <= 5;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= v2 <= 6;\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 >= -50;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant 5 * t + 75 >= x2;\nloop invariant x2 + 5 * t >= 75;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant 0 <= t <= 5 is established but not preserved.\nloop invariant 0 <= v2 <= 6 is established but not preserved.\nloop invariant x1 >= 100 is partially proven to be inductive.\nloop invariant x2 >= 75 is partially proven to be inductive.\nloop invariant x3 >= -50 is established but not preserved.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2 * v2 - v1 - v3 == 0 is established but not preserved.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant 5 * t + 75 >= x2 is partially proven to be inductive.\nloop invariant x2 + 5 * t >= 75 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Unproven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= v1 <= 5;\n\n\nloop invariant i4: x1 >= 100;\n\n\nloop invariant i7: v1 - v3 >= 0;\n\n\n\n\nloop invariant i12: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i13: v2 + 6 >= 0;\n\nloop invariant i15: 5 * t + 75 >= x2;\nloop invariant i16: x2 + 5 * t >= 75;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v1 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is established but not preserved.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant t >= 0 is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Unproven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: v3 >= 0;\nloop invariant i3: t >= 0;\nloop invariant i4: v1 >= 0;\nloop invariant i5: 2*v2 + 2*t >= v1 + v3;\nloop invariant i6: 5*t + 75 >= x2;\nloop invariant i7: v2 <= 6;\nloop invariant i8: v2 + 6 >= 0;\nloop invariant i9: x2 + 5*t >= 75;\nloop invariant i10: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i11: v1 - v3 >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant 0 <= v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x1 >= 100 + v1 * t;\nloop invariant x3 <= -50 + v3 * t;\nloop invariant x2 >= 75 + v2 * t;\nloop invariant -50 <= x1 + x3;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x2 >= -25;\nloop invariant x1 + x2 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= v1 <= 5 is preserved but not established.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant 0 <= v3 is partially proven to be inductive.\nloop invariant 2 * v2 + 2 * t >= v1 + v3 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant 5 * t + 75 >= x2 is partially proven to be inductive.\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5 * t >= 75 is partially proven to be inductive.\nloop invariant x1 >= 100 + v1 * t is partially proven to be inductive.\nloop invariant x3 <= -50 + v3 * t is partially proven to be inductive.\nloop invariant x2 >= 75 + v2 * t is partially proven to be inductive.\nloop invariant -50 <= x1 + x3 is partially proven to be inductive.\nloop invariant x2 + x3 >= -25 is partially proven to be inductive.\nloop invariant x2 + x3 <= 60 is partially proven to be inductive.\nloop invariant x1 + x2 >= -25 is partially proven to be inductive.\nloop invariant x1 + x2 <= 60 is preserved but not established.\nloop invariant x1 + x3 >= -75 is partially proven to be inductive.\nloop invariant x1 + x3 <= 25 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: v2 + 6 >= 0;\nloop invariant i3: 0 <= v3;\nloop invariant i4: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i5: v2 <= 6;\nloop invariant i6: 5 * t + 75 >= x2;\nloop invariant i7: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i8: v1 - v3 >= 0;\nloop invariant i9: x2 + 5 * t >= 75;\nloop invariant i10: x1 >= 100 + v1 * t;\nloop invariant i11: x3 <= -50 + v3 * t;\n\nloop invariant i13: -50 <= x1 + x3;\n\n\n\n\nloop invariant i18: x1 + x3 >= -75;\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= v1 <= 5;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant 5*t  + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3  >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= v1 <= 5 is preserved but not established.\nloop invariant 2*v2 + 2*t  >= v1 + v3 is partially proven to be inductive.\nloop invariant 5*t  + 75 >= x2 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v3  >= 0 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 2*v2 + 2*t  >= v1 + v3;\nloop invariant i3: 5*t  + 75 >= x2;\nloop invariant i4: v2 <= 6;\nloop invariant i5: v3  >= 0;\nloop invariant i6: v2 + 6 >= 0;\nloop invariant i7: x2 + 5*t >= 75;\nloop invariant i8: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i9: v1 - v3 >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                    "houdini_error": "No annotations found"
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 45: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 1 <= v3 <= unknown_int();\nloop invariant i2: 1 <= v1 <= 5;\nloop invariant i3: 1 <= v2 <= 5;\nloop invariant i4: v1 - v3 >= 0;\nloop invariant i5: 2*v2 - v1 - v3 == 0;\nloop invariant i6: 2*x2 - x1 - x3 >= 0 ==> 2* x2 - x1 - x3>=0;\nloop invariant i7: 2*x2 - x1 - x3 <= 0 ==> 2*x2 -x1-x3 <=0;\nloop invariant i8: v2 +5 >=0 ==> v2 +5 >=0;\nloop invariant i9: v2 <= 5 ==> v2 <= 5;\nloop invariant i10: v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant i11: v3  >= 0 ==> v3  >= 0;\nloop invariant i12: v1 <= 5 ==> v1 <= 5;\nloop invariant i13: 2*v2 + 2*t  >= v1 + v3 ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant i14: 5*t  + 75 >= x2 ==> 5*t  + 75 >= x2;\nloop invariant i15: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i16: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i17: x2 + 5*t >= 75 ==> x2 + 5*t >= 75;\nloop invariant i18: t >= 0 ==> t >= 0;\nloop invariant i19: 1 <= t <= 100000;\nloop invariant i20: 0 <= v1 <= 5;\nloop invariant i21: v2 + 5 >= 0;\nloop invariant i22: v2 <= 5;\nloop invariant i23: 2*v2 + 2*t >= v1 + v3;\nloop invariant i24: v2 + 6 >= 0;\nloop invariant i25: 5*t + 75 >= x2;\nloop invariant i26: v3 >= 0;\nloop invariant i27: v1 <= 5;\nloop invariant i28: v2 <= 6;\nloop invariant i29: x2 + 5*t >= 75;\nloop invariant i30: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i31: x1 == 100;\nloop invariant i32: x2 == 75;\nloop invariant i33: x3 == -50;\nloop invariant i34: t == 0;\nloop invariant i35: x1 + x2 + x3 == 225;\nloop invariant i36: v1 + v2 + v3 == 0;\nloop invariant i37: v1 >= 0;\nloop invariant i38: v2 >= 0;\nloop invariant i39: 0 <= x2 <= 75;\nloop invariant i40: 0 <= v2 <= 5;\nloop invariant i41: x1 >= x2;\nloop invariant i42: x3 <= x2;\nloop invariant i43: x1 + v1 >= x2;\nloop invariant i44: x3 + v3 <= x2;\nloop invariant i45: t >= 0;\nloop invariant i46: 1 <= t <= 5;\nloop invariant i47: 0 <= x2 <= 5;\nloop invariant i48: 0 <= x1 <= 100;\nloop invariant i49: 0 <= x3 <= 50;\nloop invariant i50: 0 <= v2 <= 6;\nloop invariant i51: 0 <= v3 <= 5;\nloop invariant i52: 0 <= t <= 6;\nloop invariant i53: 0 <= t <= 5;\nloop invariant i54: x2 >= 0;\nloop invariant i55: x2 <= 75;\nloop invariant i56: x3 >= -50;\nloop invariant i57: 2*x2 - x1 - x3 >= 0;\nloop invariant i58: 0 <= x3 <= (-50);\nloop invariant i59: (2*v2 - v1 - v3 == 0);\nloop invariant i60: (v2 + 5 >= 0);\nloop invariant i61: (v2 <= 5);\nloop invariant i62: (x2 + 5*t >= 75);\nloop invariant i63: (v1 - v3 >= 0);\nloop invariant i64: (v1 <= 5);\nloop invariant i65: (v1 - 2*v2 + v3 + 2*t >= 0);\nloop invariant i66: (v2 <= 6);\nloop invariant i67: (v3 >= 0);\nloop invariant i68: (v2 + 6 >= 0);\nloop invariant i69: (2*v2 + 2*t >= v1 + v3);\nloop invariant i70: (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0);\nloop invariant i71: (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0);\nloop invariant i72: (x1 + v1 >= x1) ==> (x1 + v1 >= x1);\nloop invariant i73: (x3 + v3 >= x3) ==> (x3 + v3 >= x3);\nloop invariant i74: (x2 + v2 >= x2) ==> (x2 + v2 >= x2);\nloop invariant i75: (v2 - 1 >= v2) ==> (v2 - 1 >= v2);\nloop invariant i76: (v2 + 1 >= v2) ==> (v2 + 1 >= v2);\nloop invariant i77: (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant i78: (t + 1 <= t) ==> (t + 1 <= t);\nloop invariant i79: (v2 - 1 <= v2) ==> (v2 - 1 <= v2);\nloop invariant i80: (v2 + 1 <= v2) ==> (v2 + 1 <= v2);\nloop invariant i81: x1 + v1 * t >= x2 + v2 * t;\nloop invariant i82: x2 + v2 * t >= x3 + v3 * t;\nloop invariant i83: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i84: 5 * t + 75 >= x2;\nloop invariant i85: x2 + 5 * t >= 75;\nloop invariant i86: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i87: unknown_int() ==> (v2 + 5 >= 0);\nloop invariant i88: unknown_int() ==> (v2 <= 5);\nloop invariant i89: !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant i90: !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant i91: !unknown_int() ==> (v2 <= 6);\nloop invariant i92: !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant i93: !unknown_int() ==> (v2 <= 5);\nloop invariant i94: !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant i95: 0 <= t <= 100;\nloop invariant i96: (x1 - x3) = (v1 + t * v1 + t * v2);\nloop invariant i97: x2 = (75 + v2 + t * v2);\nloop invariant i98: v2 = (5 - t);\nloop invariant i99: v1 = (5 + t);\nloop invariant i100: v3 = (0 + t * v3);\nloop invariant i101: t = (0 + t);\nloop invariant i102: 2*x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2-1) && (t = t+1);\nloop invariant i103: 2*x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2+1) && (t = t+1);\nloop invariant i104: x3 + v3 >= 0;\nloop invariant i105: x2 + v2 >= 0;\nloop invariant i106: x1 + v1 >= 0;\nloop invariant i107: 2*v2 + 2*t  >= v1 + v3;\nloop invariant i108: v3  >= 0;\nloop invariant i109: x1 >= 100;\nloop invariant i110: x2 >= 75;\nloop invariant i111: 2 * v2 - v1 - v3 == 0;\nloop invariant i112: 2 * x2 - x1 - x3 >= 0;\nloop invariant i113: 0 <= v3;\nloop invariant i114: x1 >= 100 + v1 * t;\nloop invariant i115: x3 <= -50 + v3 * t;\nloop invariant i116: x2 >= 75 + v2 * t;\nloop invariant i117: -50 <= x1 + x3;\nloop invariant i118: x2 + x3 >= -25;\nloop invariant i119: x2 + x3 <= 60;\nloop invariant i120: x1 + x2 >= -25;\nloop invariant i121: x1 + x2 <= 60;\nloop invariant i122: x1 + x3 >= -75;\nloop invariant i123: x1 + x3 <= 25;\nloop invariant i124: 5*t  + 75 >= x2;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 39,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\nloop invariant i4: v1 - v3 >= 0;\n\nloop invariant i6: 2*x2 - x1 - x3 >= 0 ==> 2* x2 - x1 - x3>=0;\nloop invariant i7: 2*x2 - x1 - x3 <= 0 ==> 2*x2 -x1-x3 <=0;\nloop invariant i8: v2 +5 >=0 ==> v2 +5 >=0;\nloop invariant i9: v2 <= 5 ==> v2 <= 5;\nloop invariant i10: v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant i11: v3  >= 0 ==> v3  >= 0;\nloop invariant i12: v1 <= 5 ==> v1 <= 5;\nloop invariant i13: 2*v2 + 2*t  >= v1 + v3 ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant i14: 5*t  + 75 >= x2 ==> 5*t  + 75 >= x2;\nloop invariant i15: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i16: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i17: x2 + 5*t >= 75 ==> x2 + 5*t >= 75;\nloop invariant i18: t >= 0 ==> t >= 0;\n\nloop invariant i20: 0 <= v1 <= 5;\n\n\nloop invariant i23: 2*v2 + 2*t >= v1 + v3;\nloop invariant i24: v2 + 6 >= 0;\nloop invariant i25: 5*t + 75 >= x2;\nloop invariant i26: v3 >= 0;\nloop invariant i27: v1 <= 5;\nloop invariant i28: v2 <= 6;\nloop invariant i29: x2 + 5*t >= 75;\nloop invariant i30: v1 - 2*v2 + v3 + 2*t >= 0;\n\n\n\n\n\n\nloop invariant i37: v1 >= 0;\n\n\n\n\n\n\n\nloop invariant i45: t >= 0;\n\n\n\n\n\nloop invariant i51: 0 <= v3 <= 5;\n\n\n\n\nloop invariant i56: x3 >= -50;\n\n\n\n\n\nloop invariant i62: (x2 + 5*t >= 75);\nloop invariant i63: (v1 - v3 >= 0);\nloop invariant i64: (v1 <= 5);\nloop invariant i65: (v1 - 2*v2 + v3 + 2*t >= 0);\nloop invariant i66: (v2 <= 6);\nloop invariant i67: (v3 >= 0);\nloop invariant i68: (v2 + 6 >= 0);\nloop invariant i69: (2*v2 + 2*t >= v1 + v3);\nloop invariant i70: (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0);\nloop invariant i71: (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0);\nloop invariant i72: (x1 + v1 >= x1) ==> (x1 + v1 >= x1);\nloop invariant i73: (x3 + v3 >= x3) ==> (x3 + v3 >= x3);\nloop invariant i74: (x2 + v2 >= x2) ==> (x2 + v2 >= x2);\nloop invariant i75: (v2 - 1 >= v2) ==> (v2 - 1 >= v2);\nloop invariant i76: (v2 + 1 >= v2) ==> (v2 + 1 >= v2);\nloop invariant i77: (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant i78: (t + 1 <= t) ==> (t + 1 <= t);\nloop invariant i79: (v2 - 1 <= v2) ==> (v2 - 1 <= v2);\nloop invariant i80: (v2 + 1 <= v2) ==> (v2 + 1 <= v2);\n\n\nloop invariant i83: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i84: 5 * t + 75 >= x2;\nloop invariant i85: x2 + 5 * t >= 75;\nloop invariant i86: v1 - 2 * v2 + v3 + 2 * t >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i106: x1 + v1 >= 0;\nloop invariant i107: 2*v2 + 2*t  >= v1 + v3;\nloop invariant i108: v3  >= 0;\nloop invariant i109: x1 >= 100;\n\n\n\nloop invariant i113: 0 <= v3;\nloop invariant i114: x1 >= 100 + v1 * t;\nloop invariant i115: x3 <= -50 + v3 * t;\n\nloop invariant i117: -50 <= x1 + x3;\n\n\n\n\nloop invariant i122: x1 + x3 >= -75;\n\nloop invariant i124: 5*t  + 75 >= x2;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant sn == x*a || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant sn >= 0;\nloop invariant sn <= a*x;\nloop invariant x*a >= 0;\nloop invariant x*a <= n1*a;\nloop invariant x*a == sn || x*a == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= 2*x;\nloop invariant sn == x*a || x == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant sn == x * a;\nloop invariant sn == 0 || sn == x * a;\nloop invariant sn == 0 || sn == (x + 1) * a;\nloop invariant sn == 0 || sn == (x + 2) * a;\nloop invariant sn == 0 || sn == (x + 3) * a;\nloop invariant sn == 0 || sn == (x + 4) * a;\nloop invariant sn == 0 || sn == (x + 5) * a;\nloop invariant sn == 0 || sn == (x + 6) * a;\nloop invariant sn == 0 || sn == (x + 7) * a;\nloop invariant sn == 0 || sn == (x + 8) * a;\nloop invariant sn == 0 || sn == (x + 9) * a;\nloop invariant sn == 0 || sn == (x + 10) * a;\nloop invariant sn == 0 || sn == (x + 11) * a;\nloop invariant sn == 0 || sn == (x + 12) * a;\nloop invariant sn == 0 || sn == (x + 13) * a;\nloop invariant sn == 0 || sn == (x + 14) * a;\nloop invariant sn == 0 || sn == (x + 15) * a;\nloop invariant sn == 0 || sn == (x + 16) * a;\nloop invariant sn == 0 || sn == (x + 17) * a;\nloop invariant sn == 0 || sn == (x + 18) * a;\nloop invariant sn == 0 || sn == (x + 19) * a;\nloop invariant sn == 0 || sn == (x + 20) * a;\nloop invariant sn == 0 || sn == (x + 21) * a;\nloop invariant sn == 0 || sn == (x + 22) * a;\nloop invariant sn == 0 || sn == (x + 23) * a;\nloop invariant sn == 0 || sn == (x + 24) * a;\nloop invariant sn == 0 || sn == (x + 25) * a;\nloop invariant sn == 0 || sn == (x + 26) * a;\nloop invariant sn == 0 || sn == (x + 27) * a;\nloop invariant sn == 0 || sn == (x + 28) * a;\nloop invariant sn == 0 || sn == (x + 29) * a;\nloop invariant sn == 0 || sn == (x + 30) * a;\nloop invariant sn == 0 || sn == (x + 31) * a;\nloop invariant sn == 0 || sn == (x + 32) * a;\nloop invariant sn == 0 || sn == (x + 33) * a;\nloop invariant sn == 0 || sn == (x + 34) * a;\nloop invariant sn == 0 || sn == (x + 35) * a;\nloop invariant sn == 0 || sn == (x + 36) * a;\nloop invariant sn == 0 || sn == (x + 37) * a;\nloop invariant sn == 0 || sn == (x + 38) * a;\nloop invariant sn == 0 || sn == (x + 39) * a;\nloop invariant sn == 0 || sn == (x + 40) * a;\nloop invariant sn == 0 || sn == (x + 41) * a;\nloop invariant sn == 0 || sn == (x + 42) * a;\nloop invariant sn == 0 || sn == (x + 43) * a;\nloop invariant sn == 0 || sn == (x + 44) * a;\nloop invariant sn == 0 || sn == (x + 45) * a;\nloop invariant sn == 0 || sn == (x + 46) * a;\nloop invariant sn == 0 || sn == (x + 47) * a;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= loop1;\nloop invariant sn == x * a;\nloop invariant x <= loop1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= sn <= x*a;\nloop invariant x <= sn/a;\nloop invariant x <= a;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant sn == x*a || x == 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x >= 0;\nloop invariant x <= 100000;\nloop invariant sn >= 0;\nloop invariant sn <= 100000*a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 1;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn == a ==> x == 1;\nloop invariant sn == 2*a ==> x == 2;\nloop invariant sn == 3*a ==> x == 3;\nloop invariant sn == 4*a ==> x == 4;\nloop invariant sn == 5*a ==> x == 5;\nloop invariant sn == 6*a ==> x == 6;\nloop invariant sn == 7*a ==> x == 7;\nloop invariant sn == 8*a ==> x == 8;\nloop invariant sn == 9*a ==> x == 9;\nloop invariant sn == 10*a ==> x == 10;\nloop invariant sn == 11*a ==> x == 11;\nloop invariant sn == 12*a ==> x == 12;\nloop invariant sn == 13*a ==> x == 13;\nloop invariant sn == 14*a ==> x == 14;\nloop invariant sn == 15*a ==> x == 15;\nloop invariant sn == 16*a ==> x == 16;\nloop invariant sn == 17*a ==> x == 17;\nloop invariant sn == 18*a ==> x == 18;\nloop invariant sn == 19*a ==> x == 19;\nloop invariant sn == 20*a ==> x == 20;\nloop invariant sn == 21*a ==> x == 21;\nloop invariant sn == 22*a ==> x == 22;\nloop invariant sn == 23*a ==> x == 23;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= 2 \\* n1; loop invariant 0 <= x <= n1; loop invariant sn == x \\* a;\n*/\n```",
                "```\n/*@\nloop invariant 1 ==> sn==0;\nloop invariant 2 ==> sn>=0;\nloop invariant 3 ==> x>=0;\nloop invariant 4 ==> sn==x*a || sn == 0;\nloop invariant 5 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 6 ==> sn<=x*a;\nloop invariant 7 ==> sn<=x*a ==> sn>=0;\nloop invariant 8 ==> sn>=0 ==> sn<=x*a;\nloop invariant 9 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 10 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n1;\nloop invariant 0 <= sn <= a * n1;\nloop invariant sn == x * a || sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x ( x is non-deterministic ) <= loop1 + 1;\nloop invariant 0 <= x <= loop1 + 1;\nloop invariant sn >= x * a || sn == 0;\nloop invariant sn <= (loop1 + 1) * a;\nloop invariant loop1 >= x - 1;\nloop invariant loop1 <= x;\nloop invariant x <= n1 + 1;\nloop invariant x >= n1 - 1;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant n1 >= 1;\nloop invariant n1 <= x;\nloop invariant sn <= (x + 1) * a;\nloop invariant sn >= x * a;\nloop invariant a >= 0;\nloop invariant x <= a * x;\nloop invariant x >= a * x;\nloop invariant x <= a * x + a;\nloop invariant x >= a * x + a;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= x*a || sn == 0;\nloop invariant 0 <= x <= a;\n*/\n```",
                "```\n/*@\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= unknown_uint();\nloop invariant 0 <= sn <= x * a;\nloop invariant (sn == x * a || sn == 0) ==> (sn <= x * a);\nloop invariant (sn == x * a || sn == 0) ==> (sn >= 0);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant sn == x*a || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant sn >= 0;\nloop invariant sn <= a*x;\nloop invariant x*a >= 0;\nloop invariant x*a <= n1*a;\nloop invariant x*a == sn || x*a == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= x*a is partially proven to be inductive.\nloop invariant sn == x*a || sn == 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n1 is established but not preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= a*x is partially proven to be inductive.\nloop invariant x*a >= 0 is partially proven to be inductive.\nloop invariant x*a <= n1*a is partially proven to be inductive.\nloop invariant x*a == sn || x*a == 0 is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\nloop invariant i2: sn == x*a || sn == 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= a*x;\nloop invariant i7: x*a >= 0;\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2*x;\nloop invariant sn == x*a || x == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= 2*x is partially proven to be inductive.\nloop invariant sn == x*a || x == 0 is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= 2*x;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 53,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant sn == x * a;\nloop invariant sn == 0 || sn == x * a;\nloop invariant sn == 0 || sn == (x + 1) * a;\nloop invariant sn == 0 || sn == (x + 2) * a;\nloop invariant sn == 0 || sn == (x + 3) * a;\nloop invariant sn == 0 || sn == (x + 4) * a;\nloop invariant sn == 0 || sn == (x + 5) * a;\nloop invariant sn == 0 || sn == (x + 6) * a;\nloop invariant sn == 0 || sn == (x + 7) * a;\nloop invariant sn == 0 || sn == (x + 8) * a;\nloop invariant sn == 0 || sn == (x + 9) * a;\nloop invariant sn == 0 || sn == (x + 10) * a;\nloop invariant sn == 0 || sn == (x + 11) * a;\nloop invariant sn == 0 || sn == (x + 12) * a;\nloop invariant sn == 0 || sn == (x + 13) * a;\nloop invariant sn == 0 || sn == (x + 14) * a;\nloop invariant sn == 0 || sn == (x + 15) * a;\nloop invariant sn == 0 || sn == (x + 16) * a;\nloop invariant sn == 0 || sn == (x + 17) * a;\nloop invariant sn == 0 || sn == (x + 18) * a;\nloop invariant sn == 0 || sn == (x + 19) * a;\nloop invariant sn == 0 || sn == (x + 20) * a;\nloop invariant sn == 0 || sn == (x + 21) * a;\nloop invariant sn == 0 || sn == (x + 22) * a;\nloop invariant sn == 0 || sn == (x + 23) * a;\nloop invariant sn == 0 || sn == (x + 24) * a;\nloop invariant sn == 0 || sn == (x + 25) * a;\nloop invariant sn == 0 || sn == (x + 26) * a;\nloop invariant sn == 0 || sn == (x + 27) * a;\nloop invariant sn == 0 || sn == (x + 28) * a;\nloop invariant sn == 0 || sn == (x + 29) * a;\nloop invariant sn == 0 || sn == (x + 30) * a;\nloop invariant sn == 0 || sn == (x + 31) * a;\nloop invariant sn == 0 || sn == (x + 32) * a;\nloop invariant sn == 0 || sn == (x + 33) * a;\nloop invariant sn == 0 || sn == (x + 34) * a;\nloop invariant sn == 0 || sn == (x + 35) * a;\nloop invariant sn == 0 || sn == (x + 36) * a;\nloop invariant sn == 0 || sn == (x + 37) * a;\nloop invariant sn == 0 || sn == (x + 38) * a;\nloop invariant sn == 0 || sn == (x + 39) * a;\nloop invariant sn == 0 || sn == (x + 40) * a;\nloop invariant sn == 0 || sn == (x + 41) * a;\nloop invariant sn == 0 || sn == (x + 42) * a;\nloop invariant sn == 0 || sn == (x + 43) * a;\nloop invariant sn == 0 || sn == (x + 44) * a;\nloop invariant sn == 0 || sn == (x + 45) * a;\nloop invariant sn == 0 || sn == (x + 46) * a;\nloop invariant sn == 0 || sn == (x + 47) * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\n\nloop invariant i5: sn == 0 || sn == x * a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= loop1;\nloop invariant sn == x * a;\nloop invariant x <= loop1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= loop1 is preserved but not established.\nloop invariant sn == x * a is partially proven to be inductive.\nloop invariant x <= loop1 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= sn <= x*a;\nloop invariant x <= sn/a;\nloop invariant x <= a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= sn <= x*a is preserved but not established.\nloop invariant x <= sn/a is partially proven to be inductive.\nloop invariant x <= a is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant sn == x*a || x == 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x >= 0;\nloop invariant x <= 100000;\nloop invariant sn >= 0;\nloop invariant sn <= 100000*a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant sn == x*a || x == 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100000 is established but not preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 100000*a is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: sn >= 0;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 1;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn == a ==> x == 1;\nloop invariant sn == 2*a ==> x == 2;\nloop invariant sn == 3*a ==> x == 3;\nloop invariant sn == 4*a ==> x == 4;\nloop invariant sn == 5*a ==> x == 5;\nloop invariant sn == 6*a ==> x == 6;\nloop invariant sn == 7*a ==> x == 7;\nloop invariant sn == 8*a ==> x == 8;\nloop invariant sn == 9*a ==> x == 9;\nloop invariant sn == 10*a ==> x == 10;\nloop invariant sn == 11*a ==> x == 11;\nloop invariant sn == 12*a ==> x == 12;\nloop invariant sn == 13*a ==> x == 13;\nloop invariant sn == 14*a ==> x == 14;\nloop invariant sn == 15*a ==> x == 15;\nloop invariant sn == 16*a ==> x == 16;\nloop invariant sn == 17*a ==> x == 17;\nloop invariant sn == 18*a ==> x == 18;\nloop invariant sn == 19*a ==> x == 19;\nloop invariant sn == 20*a ==> x == 20;\nloop invariant sn == 21*a ==> x == 21;\nloop invariant sn == 22*a ==> x == 22;\nloop invariant sn == 23*a ==> x == 23;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x <= 1 is established but not preserved.\nloop invariant sn == x*a || sn == 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant sn == a ==> x == 1 is partially proven to be inductive.\nloop invariant sn == 2*a ==> x == 2 is partially proven to be inductive.\nloop invariant sn == 3*a ==> x == 3 is partially proven to be inductive.\nloop invariant sn == 4*a ==> x == 4 is partially proven to be inductive.\nloop invariant sn == 5*a ==> x == 5 is partially proven to be inductive.\nloop invariant sn == 6*a ==> x == 6 is partially proven to be inductive.\nloop invariant sn == 7*a ==> x == 7 is partially proven to be inductive.\nloop invariant sn == 8*a ==> x == 8 is partially proven to be inductive.\nloop invariant sn == 9*a ==> x == 9 is partially proven to be inductive.\nloop invariant sn == 10*a ==> x == 10 is partially proven to be inductive.\nloop invariant sn == 11*a ==> x == 11 is partially proven to be inductive.\nloop invariant sn == 12*a ==> x == 12 is partially proven to be inductive.\nloop invariant sn == 13*a ==> x == 13 is partially proven to be inductive.\nloop invariant sn == 14*a ==> x == 14 is partially proven to be inductive.\nloop invariant sn == 15*a ==> x == 15 is partially proven to be inductive.\nloop invariant sn == 16*a ==> x == 16 is partially proven to be inductive.\nloop invariant sn == 17*a ==> x == 17 is partially proven to be inductive.\nloop invariant sn == 18*a ==> x == 18 is partially proven to be inductive.\nloop invariant sn == 19*a ==> x == 19 is partially proven to be inductive.\nloop invariant sn == 20*a ==> x == 20 is partially proven to be inductive.\nloop invariant sn == 21*a ==> x == 21 is partially proven to be inductive.\nloop invariant sn == 22*a ==> x == 22 is partially proven to be inductive.\nloop invariant sn == 23*a ==> x == 23 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: sn == x*a || sn == 0;\n\nloop invariant i5: sn == a ==> x == 1;\nloop invariant i6: sn == 2*a ==> x == 2;\nloop invariant i7: sn == 3*a ==> x == 3;\nloop invariant i8: sn == 4*a ==> x == 4;\nloop invariant i9: sn == 5*a ==> x == 5;\nloop invariant i10: sn == 6*a ==> x == 6;\nloop invariant i11: sn == 7*a ==> x == 7;\nloop invariant i12: sn == 8*a ==> x == 8;\nloop invariant i13: sn == 9*a ==> x == 9;\nloop invariant i14: sn == 10*a ==> x == 10;\nloop invariant i15: sn == 11*a ==> x == 11;\nloop invariant i16: sn == 12*a ==> x == 12;\nloop invariant i17: sn == 13*a ==> x == 13;\nloop invariant i18: sn == 14*a ==> x == 14;\nloop invariant i19: sn == 15*a ==> x == 15;\nloop invariant i20: sn == 16*a ==> x == 16;\nloop invariant i21: sn == 17*a ==> x == 17;\nloop invariant i22: sn == 18*a ==> x == 18;\nloop invariant i23: sn == 19*a ==> x == 19;\nloop invariant i24: sn == 20*a ==> x == 20;\nloop invariant i25: sn == 21*a ==> x == 21;\nloop invariant i26: sn == 22*a ==> x == 22;\nloop invariant i27: sn == 23*a ==> x == 23;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2 \\* n1; loop invariant 0 <= x <= n1; loop invariant sn == x \\* a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: lexical error, illegal character \\",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 ==> sn==0;\nloop invariant 2 ==> sn>=0;\nloop invariant 3 ==> x>=0;\nloop invariant 4 ==> sn==x*a || sn == 0;\nloop invariant 5 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 6 ==> sn<=x*a;\nloop invariant 7 ==> sn<=x*a ==> sn>=0;\nloop invariant 8 ==> sn>=0 ==> sn<=x*a;\nloop invariant 9 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 10 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 ==> sn==0 is established but not preserved.\nloop invariant 2 ==> sn>=0 is partially proven to be inductive.\nloop invariant 3 ==> x>=0 is partially proven to be inductive.\nloop invariant 4 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 5 ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 6 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 7 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 8 ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 9 ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 10 ==> sn<=x*a ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: 2 ==> sn>=0;\nloop invariant i3: 3 ==> x>=0;\nloop invariant i4: 4 ==> sn==x*a || sn == 0;\nloop invariant i5: 5 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i6: 6 ==> sn<=x*a;\nloop invariant i7: 7 ==> sn<=x*a ==> sn>=0;\nloop invariant i8: 8 ==> sn>=0 ==> sn<=x*a;\nloop invariant i9: 9 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i10: 10 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i11: 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i12: 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i13: 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i14: 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i15: 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i16: 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i17: 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i18: 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i19: 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i20: 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i21: 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i22: 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i23: 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i24: 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i25: 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i26: 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i27: 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i28: 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i29: 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i30: 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i31: 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i32: 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i33: 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n1;\nloop invariant 0 <= sn <= a * n1;\nloop invariant sn == x * a || sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n1 is preserved but not established.\nloop invariant 0 <= sn <= a * n1 is partially proven to be inductive.\nloop invariant sn == x * a || sn == 0 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\nloop invariant i3: sn == x * a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 1 <= x ( x is non-deterministic ) <= loop1 + 1;\nloop invariant 0 <= x <= loop1 + 1;\nloop invariant sn >= x * a || sn == 0;\nloop invariant sn <= (loop1 + 1) * a;\nloop invariant loop1 >= x - 1;\nloop invariant loop1 <= x;\nloop invariant x <= n1 + 1;\nloop invariant x >= n1 - 1;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant n1 >= 1;\nloop invariant n1 <= x;\nloop invariant sn <= (x + 1) * a;\nloop invariant sn >= x * a;\nloop invariant a >= 0;\nloop invariant x <= a * x;\nloop invariant x >= a * x;\nloop invariant x <= a * x + a;\nloop invariant x >= a * x + a;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token 'is'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\nloop invariant i3: sn >= x * a || sn == 0;\n\n\n\n\n\nloop invariant i9: sn <= x * a;\nloop invariant i10: sn >= 0;\n\n\nloop invariant i13: sn <= (x + 1) * a;\n\nloop invariant i15: a >= 0;\nloop invariant i16: x <= a * x;\n\nloop invariant i18: x <= a * x + a;\n\nloop invariant i20: x <= a * x + a + 1;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a || sn == 0;\nloop invariant 0 <= x <= a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= x*a || sn == 0 is partially proven to be inductive.\nloop invariant 0 <= x <= a is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a || sn == 0;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token 'and'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= unknown_uint();\nloop invariant 0 <= sn <= x * a;\nloop invariant (sn == x * a || sn == 0) ==> (sn <= x * a);\nloop invariant (sn == x * a || sn == 0) ==> (sn >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: 0 <= sn <= x * a;\nloop invariant i3: (sn == x * a || sn == 0) ==> (sn <= x * a);\nloop invariant i4: (sn == x * a || sn == 0) ==> (sn >= 0);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 115: lexical error, illegal character \\",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\nloop invariant i2: sn == x*a || sn == 0;\nloop invariant i3: x >= 0;\nloop invariant i4: x <= n1;\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= a*x;\nloop invariant i7: x*a >= 0;\nloop invariant i8: x*a <= n1*a;\nloop invariant i9: x*a == sn || x*a == 0;\nloop invariant i10: 0 <= sn <= 2*x;\nloop invariant i11: sn == x*a || x == 0;\nloop invariant i12: 1 <= x <= 100000;\nloop invariant i13: y <= x;\nloop invariant i14: x >= (1 + (y - 1) * y / 2);\nloop invariant i15: sn == x * a;\nloop invariant i16: sn == 0 || sn == x * a;\nloop invariant i17: sn == 0 || sn == (x + 1) * a;\nloop invariant i18: sn == 0 || sn == (x + 2) * a;\nloop invariant i19: sn == 0 || sn == (x + 3) * a;\nloop invariant i20: sn == 0 || sn == (x + 4) * a;\nloop invariant i21: sn == 0 || sn == (x + 5) * a;\nloop invariant i22: sn == 0 || sn == (x + 6) * a;\nloop invariant i23: sn == 0 || sn == (x + 7) * a;\nloop invariant i24: sn == 0 || sn == (x + 8) * a;\nloop invariant i25: sn == 0 || sn == (x + 9) * a;\nloop invariant i26: sn == 0 || sn == (x + 10) * a;\nloop invariant i27: sn == 0 || sn == (x + 11) * a;\nloop invariant i28: sn == 0 || sn == (x + 12) * a;\nloop invariant i29: sn == 0 || sn == (x + 13) * a;\nloop invariant i30: sn == 0 || sn == (x + 14) * a;\nloop invariant i31: sn == 0 || sn == (x + 15) * a;\nloop invariant i32: sn == 0 || sn == (x + 16) * a;\nloop invariant i33: sn == 0 || sn == (x + 17) * a;\nloop invariant i34: sn == 0 || sn == (x + 18) * a;\nloop invariant i35: sn == 0 || sn == (x + 19) * a;\nloop invariant i36: sn == 0 || sn == (x + 20) * a;\nloop invariant i37: sn == 0 || sn == (x + 21) * a;\nloop invariant i38: sn == 0 || sn == (x + 22) * a;\nloop invariant i39: sn == 0 || sn == (x + 23) * a;\nloop invariant i40: sn == 0 || sn == (x + 24) * a;\nloop invariant i41: sn == 0 || sn == (x + 25) * a;\nloop invariant i42: sn == 0 || sn == (x + 26) * a;\nloop invariant i43: sn == 0 || sn == (x + 27) * a;\nloop invariant i44: sn == 0 || sn == (x + 28) * a;\nloop invariant i45: sn == 0 || sn == (x + 29) * a;\nloop invariant i46: sn == 0 || sn == (x + 30) * a;\nloop invariant i47: sn == 0 || sn == (x + 31) * a;\nloop invariant i48: sn == 0 || sn == (x + 32) * a;\nloop invariant i49: sn == 0 || sn == (x + 33) * a;\nloop invariant i50: sn == 0 || sn == (x + 34) * a;\nloop invariant i51: sn == 0 || sn == (x + 35) * a;\nloop invariant i52: sn == 0 || sn == (x + 36) * a;\nloop invariant i53: sn == 0 || sn == (x + 37) * a;\nloop invariant i54: sn == 0 || sn == (x + 38) * a;\nloop invariant i55: sn == 0 || sn == (x + 39) * a;\nloop invariant i56: sn == 0 || sn == (x + 40) * a;\nloop invariant i57: sn == 0 || sn == (x + 41) * a;\nloop invariant i58: sn == 0 || sn == (x + 42) * a;\nloop invariant i59: sn == 0 || sn == (x + 43) * a;\nloop invariant i60: sn == 0 || sn == (x + 44) * a;\nloop invariant i61: sn == 0 || sn == (x + 45) * a;\nloop invariant i62: sn == 0 || sn == (x + 46) * a;\nloop invariant i63: sn == 0 || sn == (x + 47) * a;\nloop invariant i64: 1 <= x <= loop1;\nloop invariant i65: x <= loop1;\nloop invariant i66: 1 <= sn <= x*a;\nloop invariant i67: x <= sn/a;\nloop invariant i68: x <= a;\nloop invariant i69: sn == 0 ==> x == 0;\nloop invariant i70: x <= 100000;\nloop invariant i71: sn <= 100000*a;\nloop invariant i72: 0 <= x;\nloop invariant i73: x <= 1;\nloop invariant i74: sn == a ==> x == 1;\nloop invariant i75: sn == 2*a ==> x == 2;\nloop invariant i76: sn == 3*a ==> x == 3;\nloop invariant i77: sn == 4*a ==> x == 4;\nloop invariant i78: sn == 5*a ==> x == 5;\nloop invariant i79: sn == 6*a ==> x == 6;\nloop invariant i80: sn == 7*a ==> x == 7;\nloop invariant i81: sn == 8*a ==> x == 8;\nloop invariant i82: sn == 9*a ==> x == 9;\nloop invariant i83: sn == 10*a ==> x == 10;\nloop invariant i84: sn == 11*a ==> x == 11;\nloop invariant i85: sn == 12*a ==> x == 12;\nloop invariant i86: sn == 13*a ==> x == 13;\nloop invariant i87: sn == 14*a ==> x == 14;\nloop invariant i88: sn == 15*a ==> x == 15;\nloop invariant i89: sn == 16*a ==> x == 16;\nloop invariant i90: sn == 17*a ==> x == 17;\nloop invariant i91: sn == 18*a ==> x == 18;\nloop invariant i92: sn == 19*a ==> x == 19;\nloop invariant i93: sn == 20*a ==> x == 20;\nloop invariant i94: sn == 21*a ==> x == 21;\nloop invariant i95: sn == 22*a ==> x == 22;\nloop invariant i96: sn == 23*a ==> x == 23;\nloop invariant i97: 0 <= sn <= 2 \\* n1; loop invariant 0 <= x <= n1; loop invariant sn == x \\* a;\nloop invariant i98: 1 ==> sn==0;\nloop invariant i99: 2 ==> sn>=0;\nloop invariant i100: 3 ==> x>=0;\nloop invariant i101: 4 ==> sn==x*a || sn == 0;\nloop invariant i102: 5 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i103: 6 ==> sn<=x*a;\nloop invariant i104: 7 ==> sn<=x*a ==> sn>=0;\nloop invariant i105: 8 ==> sn>=0 ==> sn<=x*a;\nloop invariant i106: 9 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i107: 10 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i108: 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i109: 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i110: 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i111: 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i112: 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i113: 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i114: 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i115: 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i116: 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i117: 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i118: 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i119: 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i120: 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i121: 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i122: 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i123: 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i124: 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i125: 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i126: 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i127: 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i128: 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i129: 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i130: 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i131: 1 <= x <= n1;\nloop invariant i132: 0 <= sn <= a * n1;\nloop invariant i133: sn == x * a || sn == 0;\nloop invariant i134: 1 <= x ( x is non-deterministic ) <= loop1 + 1;\nloop invariant i135: 0 <= x <= loop1 + 1;\nloop invariant i136: sn >= x * a || sn == 0;\nloop invariant i137: sn <= (loop1 + 1) * a;\nloop invariant i138: loop1 >= x - 1;\nloop invariant i139: loop1 <= x;\nloop invariant i140: x <= n1 + 1;\nloop invariant i141: x >= n1 - 1;\nloop invariant i142: sn <= x * a;\nloop invariant i143: n1 >= 1;\nloop invariant i144: n1 <= x;\nloop invariant i145: sn <= (x + 1) * a;\nloop invariant i146: sn >= x * a;\nloop invariant i147: a >= 0;\nloop invariant i148: x <= a * x;\nloop invariant i149: x >= a * x;\nloop invariant i150: x <= a * x + a;\nloop invariant i151: x >= a * x + a;\nloop invariant i152: x <= a * x + a + 1;\nloop invariant i153: x >= a * x + a + 1;\nloop invariant i154: 0 <= sn <= x*a || sn == 0;\nloop invariant i155: 0 <= x <= a;\nloop invariant i156: loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == a * x;\nloop invariant i157: loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant i158: 1 <= x <= unknown_uint();\nloop invariant i159: 0 <= sn <= x * a;\nloop invariant i160: (sn == x * a || sn == 0) ==> (sn <= x * a);\nloop invariant i161: (sn == x * a || sn == 0) ==> (sn >= 0);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
            "combined_annotation_num_solver_calls": 76,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\nloop invariant i2: sn == x*a || sn == 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= a*x;\nloop invariant i7: x*a >= 0;\n\n\nloop invariant i10: 0 <= sn <= 2*x;\n\n\n\n\n\nloop invariant i16: sn == 0 || sn == x * a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: 0 <= x;\n\nloop invariant i74: sn == a ==> x == 1;\nloop invariant i75: sn == 2*a ==> x == 2;\nloop invariant i76: sn == 3*a ==> x == 3;\nloop invariant i77: sn == 4*a ==> x == 4;\nloop invariant i78: sn == 5*a ==> x == 5;\nloop invariant i79: sn == 6*a ==> x == 6;\nloop invariant i80: sn == 7*a ==> x == 7;\nloop invariant i81: sn == 8*a ==> x == 8;\nloop invariant i82: sn == 9*a ==> x == 9;\nloop invariant i83: sn == 10*a ==> x == 10;\nloop invariant i84: sn == 11*a ==> x == 11;\nloop invariant i85: sn == 12*a ==> x == 12;\nloop invariant i86: sn == 13*a ==> x == 13;\nloop invariant i87: sn == 14*a ==> x == 14;\nloop invariant i88: sn == 15*a ==> x == 15;\nloop invariant i89: sn == 16*a ==> x == 16;\nloop invariant i90: sn == 17*a ==> x == 17;\nloop invariant i91: sn == 18*a ==> x == 18;\nloop invariant i92: sn == 19*a ==> x == 19;\nloop invariant i93: sn == 20*a ==> x == 20;\nloop invariant i94: sn == 21*a ==> x == 21;\nloop invariant i95: sn == 22*a ==> x == 22;\nloop invariant i96: sn == 23*a ==> x == 23;\n\n\nloop invariant i99: 2 ==> sn>=0;\nloop invariant i100: 3 ==> x>=0;\nloop invariant i101: 4 ==> sn==x*a || sn == 0;\nloop invariant i102: 5 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i103: 6 ==> sn<=x*a;\nloop invariant i104: 7 ==> sn<=x*a ==> sn>=0;\nloop invariant i105: 8 ==> sn>=0 ==> sn<=x*a;\nloop invariant i106: 9 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i107: 10 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i108: 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i109: 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i110: 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i111: 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i112: 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i113: 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i114: 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i115: 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i116: 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i117: 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i118: 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i119: 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i120: 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i121: 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i122: 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i123: 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i124: 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i125: 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i126: 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i127: 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i128: 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i129: 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i130: 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\n\n\nloop invariant i133: sn == x * a || sn == 0;\n\n\nloop invariant i136: sn >= x * a || sn == 0;\n\n\n\n\n\nloop invariant i142: sn <= x * a;\n\n\nloop invariant i145: sn <= (x + 1) * a;\n\nloop invariant i147: a >= 0;\nloop invariant i148: x <= a * x;\n\nloop invariant i150: x <= a * x + a;\n\nloop invariant i152: x <= a * x + a + 1;\n\nloop invariant i154: 0 <= sn <= x*a || sn == 0;\n\n\n\n\nloop invariant i159: 0 <= sn <= x * a;\nloop invariant i160: (sn == x * a || sn == 0) ==> (sn <= x * a);\nloop invariant i161: (sn == x * a || sn == 0) ==> (sn >= 0);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  while((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= n <= 10000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant h1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 == h2 - (f1 + g1);\nloop invariant h2 == h1 + (f1 + g1);\nloop invariant f1 == g1 - h1;\nloop invariant f2 == g2 - h2;\nloop invariant f1 == h1 - g1;\nloop invariant f2 == h2 - g2;\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant f1 + g1 == h2 - g2;\nloop invariant f2 + g2 == h1 - g1;\nloop invariant f1 == h2 - g2 - g1;\nloop invariant f2 == h1 - g1 - g2;\nloop invariant f1 == h1 - g1 - g2;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g1 - g2;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= f1 <= g1 <= h1;\nloop invariant 0 <= f2 <= g2 <= h2;\nloop invariant h2 == h1 + f1 ==> n > 0;\nloop invariant h2 == h1 + f1 ==> n <= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant f1 >= g1;\nloop invariant f2 >= g2;\nloop invariant f1 >= 0 && f1 <= 100000;\nloop invariant f2 >= 0 && f2 <= 100000;\nloop invariant g1 >= 0 && g1 <= 100000;\nloop invariant g2 >= 0 && g2 <= 100000;\nloop invariant h1 >= 0 && h1 <= 100000;\nloop invariant h2 >= 0 && h2 <= 100000;\nloop invariant n >= 0 && n <= 100000;\nloop invariant f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant f1 >= g1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant f2 >= g2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant h1 >= 0 ==> h1 >= 0 && h1 <= 100000;\nloop invariant h2 >= 0 ==> h2 >= 0 && h2 <= 100000;\nloop invariant n > 0 ==> n >= 0 && n <= 100000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant (f1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (f2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (g1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\nloop invariant (f1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (f2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (g1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= unknown();\nloop invariant 0 <= f1 <= unknown();\nloop invariant 0 <= f2 <= unknown();\nloop invariant 1 <= g1 <= unknown();\nloop invariant 1 <= g2 <= unknown();\nloop invariant h2 >= f2 + g2;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 >= f1 + g1;\nloop invariant h1 <= f1 + g1;\nloop invariant f1 >= 0;\nloop invariant f1 <= unknown();\nloop invariant f2 >= 0;\nloop invariant f2 <= unknown();\nloop invariant g1 >= 1;\nloop invariant g1 <= unknown();\nloop invariant g2 >= 1;\nloop invariant g2 <= unknown();\nloop invariant h1 >= 0;\nloop invariant h1 <= unknown();\nloop invariant h2 >= 0;\nloop invariant h2 <= unknown();\nloop invariant h1 == h2 - f1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 == f1 + g1;\nloop invariant f1 <= g1;\nloop invariant f2 <= g2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= f1 <= 1;\nloop invariant 0 <= f2 <= 1;\nloop invariant 0 <= g1 <= 1;\nloop invariant 0 <= g2 <= 1;\nloop invariant 1 <= n;\nloop invariant (h1 == f1 + g1);\nloop invariant (h2 == f2 + g2);\nloop invariant (h2 == h1 + f1);\nloop invariant (f2 == f1 + g1);\nloop invariant (g2 == g1 + f1);\nloop invariant (f2 == f1 + g1);\nloop invariant (g2 == g1 + f1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= h1;\nloop invariant f2 <= h2;\nloop invariant g1 <= h1;\nloop invariant g2 <= h2;\nloop invariant h1 <= f1 + g1;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 <= f1 + f2;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 <= f1 + g2;\nloop invariant h2 <= f2 + g1;\nloop invariant h1 <= f1 + g1 + f2;\nloop invariant h2 <= f2 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2;\nloop invariant h2 <= f2 + g2 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2;\nloop invariant h2 <= f2 + g2 + g1 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant n <= 100000;\nloop invariant f1 + g1 <= n;\nloop invariant f2 + g2 <= n;\nloop invariant f1 <= n;\nloop invariant f2 <= n;\nloop invariant g1 <= n;\nloop invariant g2 <= n;\nloop invariant h1 <= n;\nloop invariant h2 <= n;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant f2 <= g2;\nloop invariant h1 <= g1;\nloop invariant h2 <= g2;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 >= g1 - n;\nloop invariant f2 >= g2 - n;\nloop invariant g1 >= f1 - n;\nloop invariant g2 >= f2 - n;\nloop invariant h1 >= f1 - n;\nloop invariant h2 >= f2 - n;\nloop invariant h1 >= g1 - n;\nloop invariant h2 >= g2 - n;\nloop invariant f1 >= h1 - n;\nloop invariant f2 >= h2 - n;\nloop invariant g1 >= h1 - n;\nloop invariant g2 >= h2 - n;\nloop invariant f1 >= h1 - f2;\nloop invariant f2 >= h2 - f1;\nloop invariant g1 >= h1 - f1;\nloop invariant g2 >= h2 - f2;\nloop invariant h1 >= f1 - f2;\nloop invariant h2 >= f2 - f1;\nloop invariant h1 >= g1 - g2;\nloop invariant h2 >= g2 - g1;\nloop invariant h1 >= f1 - g2;\nloop invariant h2 >= f2 - g1;\nloop invariant h1 >= g1 - f2;\nloop invariant h2 >= g2 - f1;\nloop invariant h1 >= h2 - f1;\nloop invariant h2 >= h1 - f2;\nloop invariant h1 >= h2 - g1;\nloop invariant h2 >= h1 - g2;\nloop invariant h1 >= h2 - f2;\nloop invariant h2 >= h1 - f1;\nloop invariant h1 >= h2 - g2;\nloop invariant h2 >= h1 - g1;\nloop invariant h1 >= h2 - h1;\nloop invariant h2 >= h1 - h2;\nloop invariant h1 >= h2 - h2;\nloop invariant h2 >= h1 - h1;\nloop invariant h1 >= h2 - h1 + h2;\nloop invariant h2 >= h1 - h2 + h1;\nloop invariant h1 >= h2 - h2 + h1;\nloop invariant h2 >= h1 - h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\n*/\n```",
                "```\n/*@\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant g1 >= 1;\nloop invariant h1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g2 >= 1;\nloop invariant h2 >= 0;\nloop invariant h1 + f1 >= h2;\nloop invariant g1 >= g2;\nloop invariant h1 >= h2;\nloop invariant f1 >= f2;\nloop invariant n >= 0;\nloop invariant n <= 100000;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 + g1 == f2 + g2;\nloop invariant f1 + g1 >= f2 + g2;\nloop invariant h1 >= f1 + g1;\nloop invariant h2 >= f2 + g2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= f1 <= f2;\nloop invariant f2 <= g1 <= g2;loop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n <= unknown();\nloop invariant 0 <= f1 <= f2 <= g1 <= g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h2 == h1 + f1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 2147483647;\nloop invariant 0 <= f1 <= f2 <= g1 <= g2 <= h1 <= h2 <= 2147483647;\nloop invariant h2 == h1 + f1;\nloop invariant f2 == f1 + g1;\nloop invariant g2 == g1 + h1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == 2 * f2 + g2;\nloop invariant f2 == 2 * f1 + g1;\nloop invariant g2 == 2 * g1 + h1;\nloop invariant h2 == h1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1;\nloop invariant g2 == g1 + h1 + f1;\nloop invariant h2 == h1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= original_ n;\nloop invariant f1 = original_f1 + (original_g1 + 1) * (original_g1 + 2) / 2;\nloop invariant f2 = original_f2 + (original_g2 + 1) * (original_g2 + 2) / 2;\nloop invariant g1 == original_g1 + n;\nloop invariant g2 == original_g2 + n;\nloop invariant h1 == original_h1 + (original_f1 + original_g1 + 1) * (original_f1 + original_g1 + 2) / 2;\nloop invariant h2 == original_h2 + (original_f2 + original_g2 + 1) * (original_f2 + original_g2 + 2) / 2;\nloop invariant original_f1 == original_f2;\nloop invariant original_g1 == original_g2;\nloop invariant original_h1 == original_h2;\nloop invariant original_n >= 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 22,
                    "annotations": "```\n/*@\nloop invariant 1 <= n <= 10000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant h1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 == h2 - (f1 + g1);\nloop invariant h2 == h1 + (f1 + g1);\nloop invariant f1 == g1 - h1;\nloop invariant f2 == g2 - h2;\nloop invariant f1 == h1 - g1;\nloop invariant f2 == h2 - g2;\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant f1 + g1 == h2 - g2;\nloop invariant f2 + g2 == h1 - g1;\nloop invariant f1 == h2 - g2 - g1;\nloop invariant f2 == h1 - g1 - g2;\nloop invariant f1 == h1 - g1 - g2;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g1 - g2;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n <= 10000 is preserved but not established.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 0 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant g1 <= g2 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is preserved but not established.\nloop invariant h2 == f2 + g2 is partially proven to be inductive.\nloop invariant h1 == h2 - (f1 + g1) is partially proven to be inductive.\nloop invariant h2 == h1 + (f1 + g1) is partially proven to be inductive.\nloop invariant f1 == g1 - h1 is partially proven to be inductive.\nloop invariant f2 == g2 - h2 is partially proven to be inductive.\nloop invariant f1 == h1 - g1 is partially proven to be inductive.\nloop invariant f2 == h2 - g2 is partially proven to be inductive.\nloop invariant f1 + g1 == h1 is partially proven to be inductive.\nloop invariant f2 + g2 == h2 is partially proven to be inductive.\nloop invariant f1 + g1 == h2 - g2 is partially proven to be inductive.\nloop invariant f2 + g2 == h1 - g1 is partially proven to be inductive.\nloop invariant f1 == h2 - g2 - g1 is partially proven to be inductive.\nloop invariant f2 == h1 - g1 - g2 is partially proven to be inductive.\nloop invariant f1 == h1 - g1 - g2 is partially proven to be inductive.\nloop invariant f2 == h2 - g2 - g1 is partially proven to be inductive.\nloop invariant f1 == h2 - g1 - g2 is partially proven to be inductive.\nloop invariant f2 == h1 - g2 - g1 is partially proven to be inductive.\nloop invariant f1 == h1 - g2 - g1 is partially proven to be inductive.\nloop invariant f2 == h2 - g1 - g2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\nloop invariant i8: h1 <= h2;\nloop invariant i9: f1 <= f2;\nloop invariant i10: g1 <= g2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= f1 <= g1 <= h1;\nloop invariant 0 <= f2 <= g2 <= h2;\nloop invariant h2 == h1 + f1 ==> n > 0;\nloop invariant h2 == h1 + f1 ==> n <= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= f1 <= g1 <= h1 is preserved but not established.\nloop invariant 0 <= f2 <= g2 <= h2 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 ==> n > 0 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 ==> n <= 0 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 100000 is preserved but not established.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 0 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant g1 <= g2 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 <= g1 is partially proven to be inductive.\nloop invariant g1 <= h1 is preserved but not established.\nloop invariant f2 <= g2 is partially proven to be inductive.\nloop invariant g2 <= h2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\nloop invariant i8: f1 <= f2;\nloop invariant i9: g1 <= g2;\nloop invariant i10: h1 <= h2;\nloop invariant i11: f1 <= g1;\n\nloop invariant i13: f2 <= g2;\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant f1 >= g1;\nloop invariant f2 >= g2;\nloop invariant f1 >= 0 && f1 <= 100000;\nloop invariant f2 >= 0 && f2 <= 100000;\nloop invariant g1 >= 0 && g1 <= 100000;\nloop invariant g2 >= 0 && g2 <= 100000;\nloop invariant h1 >= 0 && h1 <= 100000;\nloop invariant h2 >= 0 && h2 <= 100000;\nloop invariant n >= 0 && n <= 100000;\nloop invariant f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant f1 >= g1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant f2 >= g2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant h1 >= 0 ==> h1 >= 0 && h1 <= 100000;\nloop invariant h2 >= 0 ==> h2 >= 0 && h2 <= 100000;\nloop invariant n > 0 ==> n >= 0 && n <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 100000 is preserved but not established.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 0 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant f1 + g1 == h1 is preserved but not established.\nloop invariant f2 + g2 == h2 is partially proven to be inductive.\nloop invariant f1 >= g1 is partially proven to be inductive.\nloop invariant f2 >= g2 is partially proven to be inductive.\nloop invariant f1 >= 0 && f1 <= 100000 is partially proven to be inductive.\nloop invariant f2 >= 0 && f2 <= 100000 is partially proven to be inductive.\nloop invariant g1 >= 0 && g1 <= 100000 is partially proven to be inductive.\nloop invariant g2 >= 0 && g2 <= 100000 is partially proven to be inductive.\nloop invariant h1 >= 0 && h1 <= 100000 is partially proven to be inductive.\nloop invariant h2 >= 0 && h2 <= 100000 is partially proven to be inductive.\nloop invariant n >= 0 && n <= 100000 is partially proven to be inductive.\nloop invariant f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000 is partially proven to be inductive.\nloop invariant f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000 is partially proven to be inductive.\nloop invariant f1 >= g1 ==> f1 >= 0 && f1 <= 100000 is partially proven to be inductive.\nloop invariant f2 >= g2 ==> f2 >= 0 && f2 <= 100000 is partially proven to be inductive.\nloop invariant h1 >= 0 ==> h1 >= 0 && h1 <= 100000 is partially proven to be inductive.\nloop invariant h2 >= 0 ==> h2 >= 0 && h2 <= 100000 is partially proven to be inductive.\nloop invariant n > 0 ==> n >= 0 && n <= 100000 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant i20: f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000;\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant (f1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (f2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (g1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\nloop invariant (f1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (f2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (g1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant (f1 == (g1 - f1)) ==> (h1 == (f1 + g1)) is partially proven to be inductive.\nloop invariant (f2 == (g2 - f2)) ==> (h2 == (f2 + g2)) is partially proven to be inductive.\nloop invariant (g1 == (g1 - f1)) ==> (h1 == (f1 + g1)) is preserved but not established.\nloop invariant (g2 == (g2 - f2)) ==> (h2 == (f2 + g2)) is partially proven to be inductive.\nloop invariant (h1 == (f1 + g1)) ==> (h1 == (f1 + g1)) is partially proven to be inductive.\nloop invariant (h2 == (f2 + g2)) ==> (h2 == (f2 + g2)) is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\nloop invariant i5: (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant i6: (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant i7: (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 17,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= unknown();\nloop invariant 0 <= f1 <= unknown();\nloop invariant 0 <= f2 <= unknown();\nloop invariant 1 <= g1 <= unknown();\nloop invariant 1 <= g2 <= unknown();\nloop invariant h2 >= f2 + g2;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 >= f1 + g1;\nloop invariant h1 <= f1 + g1;\nloop invariant f1 >= 0;\nloop invariant f1 <= unknown();\nloop invariant f2 >= 0;\nloop invariant f2 <= unknown();\nloop invariant g1 >= 1;\nloop invariant g1 <= unknown();\nloop invariant g2 >= 1;\nloop invariant g2 <= unknown();\nloop invariant h1 >= 0;\nloop invariant h1 <= unknown();\nloop invariant h2 >= 0;\nloop invariant h2 <= unknown();\nloop invariant h1 == h2 - f1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 == f1 + g1;\nloop invariant f1 <= g1;\nloop invariant f2 <= g2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: h2 <= f2 + g2;\n\nloop invariant i9: h1 <= f1 + g1;\nloop invariant i10: f1 >= 0;\n\nloop invariant i12: f2 >= 0;\n\nloop invariant i14: g1 >= 1;\n\nloop invariant i16: g2 >= 1;\n\nloop invariant i18: h1 >= 0;\n\nloop invariant i20: h2 >= 0;\n\nloop invariant i22: h1 == h2 - f1;\n\n\nloop invariant i25: f1 <= g1;\nloop invariant i26: f2 <= g2;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= f1 <= 1;\nloop invariant 0 <= f2 <= 1;\nloop invariant 0 <= g1 <= 1;\nloop invariant 0 <= g2 <= 1;\nloop invariant 1 <= n;\nloop invariant (h1 == f1 + g1);\nloop invariant (h2 == f2 + g2);\nloop invariant (h2 == h1 + f1);\nloop invariant (f2 == f1 + g1);\nloop invariant (g2 == g1 + f1);\nloop invariant (f2 == f1 + g1);\nloop invariant (g2 == g1 + f1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= f1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= f2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= g1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= g2 <= 1 is partially proven to be inductive.\nloop invariant 1 <= n is preserved but not established.\nloop invariant (h1 == f1 + g1) is preserved but not established.\nloop invariant (h2 == f2 + g2) is partially proven to be inductive.\nloop invariant (h2 == h1 + f1) is partially proven to be inductive.\nloop invariant (f2 == f1 + g1) is partially proven to be inductive.\nloop invariant (g2 == g1 + f1) is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: (h2 == h1 + f1);\n\nloop invariant i10: (g2 == g1 + f1);\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= h1;\nloop invariant f2 <= h2;\nloop invariant g1 <= h1;\nloop invariant g2 <= h2;\nloop invariant h1 <= f1 + g1;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 <= f1 + f2;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 <= f1 + g2;\nloop invariant h2 <= f2 + g1;\nloop invariant h1 <= f1 + g1 + f2;\nloop invariant h2 <= f2 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2;\nloop invariant h2 <= f2 + g2 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2;\nloop invariant h2 <= f2 + g2 + g1 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 100000 is preserved but not established.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 0 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant g1 <= g2 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 <= h1 is partially proven to be inductive.\nloop invariant f2 <= h2 is preserved but not established.\nloop invariant g1 <= h1 is partially proven to be inductive.\nloop invariant g2 <= h2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + f2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + f2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + f1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\nloop invariant i8: f1 <= f2;\nloop invariant i9: g1 <= g2;\nloop invariant i10: h1 <= h2;\nloop invariant i11: f1 <= h1;\n\n\n\nloop invariant i15: h1 <= f1 + g1;\nloop invariant i16: h2 <= f2 + g2;\n\nloop invariant i18: h1 <= f1 + g2;\nloop invariant i19: h2 <= f2 + g1;\nloop invariant i20: h1 <= f1 + g1 + f2;\nloop invariant i21: h2 <= f2 + g2 + g1;\nloop invariant i22: h1 <= f1 + g1 + g2;\nloop invariant i23: h2 <= f2 + g2 + f1;\nloop invariant i24: h1 <= f1 + g1 + g2 + f2;\nloop invariant i25: h2 <= f2 + g2 + g1 + f1;\nloop invariant i26: h1 <= f1 + g1 + g2 + f2 + f1;\nloop invariant i27: h2 <= f2 + g2 + g1 + f1 + g2;\nloop invariant i28: h1 <= f1 + g1 + g2 + f2 + f1 + g2;\nloop invariant i29: h2 <= f2 + g2 + g1 + f1 + g2 + f1;\nloop invariant i30: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1;\nloop invariant i31: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1;\nloop invariant i32: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1;\nloop invariant i33: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2;\nloop invariant i34: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2;\nloop invariant i35: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i36: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i37: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i38: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i39: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i40: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i41: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i42: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i43: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i44: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i45: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant i46: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 20,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant n <= 100000;\nloop invariant f1 + g1 <= n;\nloop invariant f2 + g2 <= n;\nloop invariant f1 <= n;\nloop invariant f2 <= n;\nloop invariant g1 <= n;\nloop invariant g2 <= n;\nloop invariant h1 <= n;\nloop invariant h2 <= n;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant f2 <= g2;\nloop invariant h1 <= g1;\nloop invariant h2 <= g2;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 >= g1 - n;\nloop invariant f2 >= g2 - n;\nloop invariant g1 >= f1 - n;\nloop invariant g2 >= f2 - n;\nloop invariant h1 >= f1 - n;\nloop invariant h2 >= f2 - n;\nloop invariant h1 >= g1 - n;\nloop invariant h2 >= g2 - n;\nloop invariant f1 >= h1 - n;\nloop invariant f2 >= h2 - n;\nloop invariant g1 >= h1 - n;\nloop invariant g2 >= h2 - n;\nloop invariant f1 >= h1 - f2;\nloop invariant f2 >= h2 - f1;\nloop invariant g1 >= h1 - f1;\nloop invariant g2 >= h2 - f2;\nloop invariant h1 >= f1 - f2;\nloop invariant h2 >= f2 - f1;\nloop invariant h1 >= g1 - g2;\nloop invariant h2 >= g2 - g1;\nloop invariant h1 >= f1 - g2;\nloop invariant h2 >= f2 - g1;\nloop invariant h1 >= g1 - f2;\nloop invariant h2 >= g2 - f1;\nloop invariant h1 >= h2 - f1;\nloop invariant h2 >= h1 - f2;\nloop invariant h1 >= h2 - g1;\nloop invariant h2 >= h1 - g2;\nloop invariant h1 >= h2 - f2;\nloop invariant h2 >= h1 - f1;\nloop invariant h1 >= h2 - g2;\nloop invariant h2 >= h1 - g1;\nloop invariant h1 >= h2 - h1;\nloop invariant h2 >= h1 - h2;\nloop invariant h1 >= h2 - h2;\nloop invariant h2 >= h1 - h1;\nloop invariant h1 >= h2 - h1 + h2;\nloop invariant h2 >= h1 - h2 + h1;\nloop invariant h1 >= h2 - h2 + h1;\nloop invariant h2 >= h1 - h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant n <= 100000 is preserved but not established.\nloop invariant f1 + g1 <= n is preserved but not established.\nloop invariant f2 + g2 <= n is preserved but not established.\nloop invariant f1 <= n is partially proven to be inductive.\nloop invariant f2 <= n is partially proven to be inductive.\nloop invariant g1 <= n is partially proven to be inductive.\nloop invariant g2 <= n is partially proven to be inductive.\nloop invariant h1 <= n is partially proven to be inductive.\nloop invariant h2 <= n is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant g1 <= g2 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 <= g1 is partially proven to be inductive.\nloop invariant f2 <= g2 is partially proven to be inductive.\nloop invariant h1 <= g1 is partially proven to be inductive.\nloop invariant h2 <= g2 is partially proven to be inductive.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 0 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant f1 >= g1 - n is partially proven to be inductive.\nloop invariant f2 >= g2 - n is partially proven to be inductive.\nloop invariant g1 >= f1 - n is partially proven to be inductive.\nloop invariant g2 >= f2 - n is partially proven to be inductive.\nloop invariant h1 >= f1 - n is partially proven to be inductive.\nloop invariant h2 >= f2 - n is partially proven to be inductive.\nloop invariant h1 >= g1 - n is partially proven to be inductive.\nloop invariant h2 >= g2 - n is partially proven to be inductive.\nloop invariant f1 >= h1 - n is partially proven to be inductive.\nloop invariant f2 >= h2 - n is partially proven to be inductive.\nloop invariant g1 >= h1 - n is partially proven to be inductive.\nloop invariant g2 >= h2 - n is partially proven to be inductive.\nloop invariant f1 >= h1 - f2 is partially proven to be inductive.\nloop invariant f2 >= h2 - f1 is partially proven to be inductive.\nloop invariant g1 >= h1 - f1 is partially proven to be inductive.\nloop invariant g2 >= h2 - f2 is partially proven to be inductive.\nloop invariant h1 >= f1 - f2 is partially proven to be inductive.\nloop invariant h2 >= f2 - f1 is preserved but not established.\nloop invariant h1 >= g1 - g2 is partially proven to be inductive.\nloop invariant h2 >= g2 - g1 is partially proven to be inductive.\nloop invariant h1 >= f1 - g2 is partially proven to be inductive.\nloop invariant h2 >= f2 - g1 is partially proven to be inductive.\nloop invariant h1 >= g1 - f2 is partially proven to be inductive.\nloop invariant h2 >= g2 - f1 is partially proven to be inductive.\nloop invariant h1 >= h2 - f1 is partially proven to be inductive.\nloop invariant h2 >= h1 - f2 is partially proven to be inductive.\nloop invariant h1 >= h2 - g1 is partially proven to be inductive.\nloop invariant h2 >= h1 - g2 is partially proven to be inductive.\nloop invariant h1 >= h2 - f2 is partially proven to be inductive.\nloop invariant h2 >= h1 - f1 is partially proven to be inductive.\nloop invariant h1 >= h2 - g2 is partially proven to be inductive.\nloop invariant h2 >= h1 - g1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h1 is partially proven to be inductive.\nloop invariant h2 >= h1 - h2 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h1 + h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h2 + h1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: f1 <= f2;\nloop invariant i12: g1 <= g2;\nloop invariant i13: h1 <= h2;\nloop invariant i14: f1 <= g1;\nloop invariant i15: f2 <= g2;\nloop invariant i16: h1 <= g1;\nloop invariant i17: h2 <= g2;\nloop invariant i18: f1 >= 0;\nloop invariant i19: f2 >= 0;\nloop invariant i20: g1 >= 0;\nloop invariant i21: g2 >= 0;\nloop invariant i22: h1 >= 0;\nloop invariant i23: h2 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i36: f1 >= h1 - f2;\n\nloop invariant i38: g1 >= h1 - f1;\nloop invariant i39: g2 >= h2 - f2;\nloop invariant i40: h1 >= f1 - f2;\n\nloop invariant i42: h1 >= g1 - g2;\nloop invariant i43: h2 >= g2 - g1;\nloop invariant i44: h1 >= f1 - g2;\nloop invariant i45: h2 >= f2 - g1;\nloop invariant i46: h1 >= g1 - f2;\n\nloop invariant i48: h1 >= h2 - f1;\nloop invariant i49: h2 >= h1 - f2;\nloop invariant i50: h1 >= h2 - g1;\nloop invariant i51: h2 >= h1 - g2;\nloop invariant i52: h1 >= h2 - f2;\nloop invariant i53: h2 >= h1 - f1;\nloop invariant i54: h1 >= h2 - g2;\nloop invariant i55: h2 >= h1 - g1;\nloop invariant i56: h1 >= h2 - h1;\nloop invariant i57: h2 >= h1 - h2;\nloop invariant i58: h1 >= h2 - h2;\nloop invariant i59: h2 >= h1 - h1;\n\nloop invariant i61: h2 >= h1 - h2 + h1;\nloop invariant i62: h1 >= h2 - h2 + h1;\nloop invariant i63: h2 >= h1 - h1 + h2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant f1 + g1 == h1 is preserved but not established.\nloop invariant f2 + g2 == h2 is partially proven to be inductive.\nloop invariant (f1 + g1) == (h1 - h2) is partially proven to be inductive.\nloop invariant (f2 + g2) == (h2 - h1) is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant g1 >= 1;\nloop invariant h1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g2 >= 1;\nloop invariant h2 >= 0;\nloop invariant h1 + f1 >= h2;\nloop invariant g1 >= g2;\nloop invariant h1 >= h2;\nloop invariant f1 >= f2;\nloop invariant n >= 0;\nloop invariant n <= 100000;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 + g1 == f2 + g2;\nloop invariant f1 + g1 >= f2 + g2;\nloop invariant h1 >= f1 + g1;\nloop invariant h2 >= f2 + g2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 100000 is preserved but not established.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 1 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 1 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant h1 + f1 >= h2 is partially proven to be inductive.\nloop invariant g1 >= g2 is partially proven to be inductive.\nloop invariant h1 >= h2 is partially proven to be inductive.\nloop invariant f1 >= f2 is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n <= 100000 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is partially proven to be inductive.\nloop invariant h2 == f2 + g2 is partially proven to be inductive.\nloop invariant f1 + g1 == f2 + g2 is partially proven to be inductive.\nloop invariant f1 + g1 >= f2 + g2 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: g1 >= 1;\nloop invariant i4: h1 >= 0;\nloop invariant i5: f2 >= 0;\nloop invariant i6: g2 >= 1;\nloop invariant i7: h2 >= 0;\nloop invariant i8: h1 + f1 >= h2;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant 0 <= f1 <= f2;\nloop invariant f2 <= g1 <= g2;loop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= f1 <= f2 is partially proven to be inductive.\nloop invariant f2 <= g1 <= g2;loop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is preserved but not established.\nloop invariant h2 == f2 + g2 is partially proven to be inductive.\nloop invariant f1 == g1 - h1 + h2 is partially proven to be inductive.\nloop invariant f2 == g2 - h2 + h1 is partially proven to be inductive.\nloop invariant h1 == h2 - f2 + f1 is partially proven to be inductive.\nloop invariant h2 == h1 - f1 + f2 is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant f2 <= g1 is partially proven to be inductive.\nloop invariant g1 <= g2 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 == f2 - g1 + g2 is partially proven to be inductive.\nloop invariant f2 == g1 - h1 + h2 is partially proven to be inductive.\nloop invariant g1 == h1 - f1 + f2 is partially proven to be inductive.\nloop invariant g2 == h2 - f2 + f1 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: 0 <= f1 <= f2;\n\n\n\n\n\n\n\nloop invariant i9: f1 <= f2;\n\nloop invariant i11: g1 <= g2;\nloop invariant i12: h1 <= h2;\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= n <= unknown();\nloop invariant 0 <= f1 <= f2 <= g1 <= g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h2 == h1 + f1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\nloop invariant i5: h1 <= h2;\nloop invariant i6: f1 <= f2;\nloop invariant i7: g1 <= g2;\nloop invariant i8: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 38,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 2147483647;\nloop invariant 0 <= f1 <= f2 <= g1 <= g2 <= h1 <= h2 <= 2147483647;\nloop invariant h2 == h1 + f1;\nloop invariant f2 == f1 + g1;\nloop invariant g2 == g1 + h1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == 2 * f2 + g2;\nloop invariant f2 == 2 * f1 + g1;\nloop invariant g2 == 2 * g1 + h1;\nloop invariant h2 == h1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1;\nloop invariant g2 == g1 + h1 + f1;\nloop invariant h2 == h1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 2147483647 is preserved but not established.\nloop invariant 0 <= f1 <= f2 <= g1 <= g2 <= h1 <= h2 <= 2147483647 is preserved but not established.\nloop invariant h2 == h1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is partially proven to be inductive.\nloop invariant h2 == 2 * f2 + g2 is partially proven to be inductive.\nloop invariant f2 == 2 * f1 + g1 is partially proven to be inductive.\nloop invariant g2 == 2 * g1 + h1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\nloop invariant i3: h2 == h1 + f1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= original_ n;\nloop invariant f1 = original_f1 + (original_g1 + 1) * (original_g1 + 2) / 2;\nloop invariant f2 = original_f2 + (original_g2 + 1) * (original_g2 + 2) / 2;\nloop invariant g1 == original_g1 + n;\nloop invariant g2 == original_g2 + n;\nloop invariant h1 == original_h1 + (original_f1 + original_g1 + 1) * (original_f1 + original_g1 + 2) / 2;\nloop invariant h2 == original_h2 + (original_f2 + original_g2 + 1) * (original_f2 + original_g2 + 2) / 2;\nloop invariant original_f1 == original_f2;\nloop invariant original_g1 == original_g2;\nloop invariant original_h1 == original_h2;\nloop invariant original_n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token 'n'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 79: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: 1 <= n <= 10000;\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\nloop invariant i8: h1 <= h2;\nloop invariant i9: f1 <= f2;\nloop invariant i10: g1 <= g2;\nloop invariant i11: h1 == f1 + g1;\nloop invariant i12: h2 == f2 + g2;\nloop invariant i13: h1 == h2 - (f1 + g1);\nloop invariant i14: h2 == h1 + (f1 + g1);\nloop invariant i15: f1 == g1 - h1;\nloop invariant i16: f2 == g2 - h2;\nloop invariant i17: f1 == h1 - g1;\nloop invariant i18: f2 == h2 - g2;\nloop invariant i19: f1 + g1 == h1;\nloop invariant i20: f2 + g2 == h2;\nloop invariant i21: f1 + g1 == h2 - g2;\nloop invariant i22: f2 + g2 == h1 - g1;\nloop invariant i23: f1 == h2 - g2 - g1;\nloop invariant i24: f2 == h1 - g1 - g2;\nloop invariant i25: f1 == h1 - g1 - g2;\nloop invariant i26: f2 == h2 - g2 - g1;\nloop invariant i27: f1 == h2 - g1 - g2;\nloop invariant i28: f2 == h1 - g2 - g1;\nloop invariant i29: f1 == h1 - g2 - g1;\nloop invariant i30: f2 == h2 - g1 - g2;\nloop invariant i31: 0 <= n;\nloop invariant i32: 0 <= f1 <= g1 <= h1;\nloop invariant i33: 0 <= f2 <= g2 <= h2;\nloop invariant i34: h2 == h1 + f1 ==> n > 0;\nloop invariant i35: h2 == h1 + f1 ==> n <= 0;\nloop invariant i36: 0 <= n <= 100000;\nloop invariant i37: f1 <= g1;\nloop invariant i38: g1 <= h1;\nloop invariant i39: f2 <= g2;\nloop invariant i40: g2 <= h2;\nloop invariant i41: f1 >= g1;\nloop invariant i42: f2 >= g2;\nloop invariant i43: f1 >= 0 && f1 <= 100000;\nloop invariant i44: f2 >= 0 && f2 <= 100000;\nloop invariant i45: g1 >= 0 && g1 <= 100000;\nloop invariant i46: g2 >= 0 && g2 <= 100000;\nloop invariant i47: h1 >= 0 && h1 <= 100000;\nloop invariant i48: h2 >= 0 && h2 <= 100000;\nloop invariant i49: n >= 0 && n <= 100000;\nloop invariant i50: f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant i51: f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant i52: f1 >= g1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant i53: f2 >= g2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant i54: h1 >= 0 ==> h1 >= 0 && h1 <= 100000;\nloop invariant i55: h2 >= 0 ==> h2 >= 0 && h2 <= 100000;\nloop invariant i56: n > 0 ==> n >= 0 && n <= 100000;\nloop invariant i57: (f1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant i58: (f2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant i59: (g1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant i60: (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant i61: (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant i62: (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\nloop invariant i63: 0 <= n <= unknown();\nloop invariant i64: 0 <= f1 <= unknown();\nloop invariant i65: 0 <= f2 <= unknown();\nloop invariant i66: 1 <= g1 <= unknown();\nloop invariant i67: 1 <= g2 <= unknown();\nloop invariant i68: h2 >= f2 + g2;\nloop invariant i69: h2 <= f2 + g2;\nloop invariant i70: h1 >= f1 + g1;\nloop invariant i71: h1 <= f1 + g1;\nloop invariant i72: f1 <= unknown();\nloop invariant i73: f2 <= unknown();\nloop invariant i74: g1 >= 1;\nloop invariant i75: g1 <= unknown();\nloop invariant i76: g2 >= 1;\nloop invariant i77: g2 <= unknown();\nloop invariant i78: h1 <= unknown();\nloop invariant i79: h2 <= unknown();\nloop invariant i80: h1 == h2 - f1;\nloop invariant i81: 0 <= f1 <= 1;\nloop invariant i82: 0 <= f2 <= 1;\nloop invariant i83: 0 <= g1 <= 1;\nloop invariant i84: 0 <= g2 <= 1;\nloop invariant i85: 1 <= n;\nloop invariant i86: (h1 == f1 + g1);\nloop invariant i87: (h2 == f2 + g2);\nloop invariant i88: (h2 == h1 + f1);\nloop invariant i89: (f2 == f1 + g1);\nloop invariant i90: (g2 == g1 + f1);\nloop invariant i91: f1 <= h1;\nloop invariant i92: f2 <= h2;\nloop invariant i93: h1 <= f1 + f2;\nloop invariant i94: h1 <= f1 + g2;\nloop invariant i95: h2 <= f2 + g1;\nloop invariant i96: h1 <= f1 + g1 + f2;\nloop invariant i97: h2 <= f2 + g2 + g1;\nloop invariant i98: h1 <= f1 + g1 + g2;\nloop invariant i99: h2 <= f2 + g2 + f1;\nloop invariant i100: h1 <= f1 + g1 + g2 + f2;\nloop invariant i101: h2 <= f2 + g2 + g1 + f1;\nloop invariant i102: h1 <= f1 + g1 + g2 + f2 + f1;\nloop invariant i103: h2 <= f2 + g2 + g1 + f1 + g2;\nloop invariant i104: h1 <= f1 + g1 + g2 + f2 + f1 + g2;\nloop invariant i105: h2 <= f2 + g2 + g1 + f1 + g2 + f1;\nloop invariant i106: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1;\nloop invariant i107: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1;\nloop invariant i108: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1;\nloop invariant i109: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2;\nloop invariant i110: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2;\nloop invariant i111: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i112: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i113: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i114: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i115: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i116: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i117: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i118: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i119: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i120: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i121: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant i122: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant i123: n <= 100000;\nloop invariant i124: f1 + g1 <= n;\nloop invariant i125: f2 + g2 <= n;\nloop invariant i126: f1 <= n;\nloop invariant i127: f2 <= n;\nloop invariant i128: g1 <= n;\nloop invariant i129: g2 <= n;\nloop invariant i130: h1 <= n;\nloop invariant i131: h2 <= n;\nloop invariant i132: h1 <= g1;\nloop invariant i133: h2 <= g2;\nloop invariant i134: f1 >= g1 - n;\nloop invariant i135: f2 >= g2 - n;\nloop invariant i136: g1 >= f1 - n;\nloop invariant i137: g2 >= f2 - n;\nloop invariant i138: h1 >= f1 - n;\nloop invariant i139: h2 >= f2 - n;\nloop invariant i140: h1 >= g1 - n;\nloop invariant i141: h2 >= g2 - n;\nloop invariant i142: f1 >= h1 - n;\nloop invariant i143: f2 >= h2 - n;\nloop invariant i144: g1 >= h1 - n;\nloop invariant i145: g2 >= h2 - n;\nloop invariant i146: f1 >= h1 - f2;\nloop invariant i147: f2 >= h2 - f1;\nloop invariant i148: g1 >= h1 - f1;\nloop invariant i149: g2 >= h2 - f2;\nloop invariant i150: h1 >= f1 - f2;\nloop invariant i151: h2 >= f2 - f1;\nloop invariant i152: h1 >= g1 - g2;\nloop invariant i153: h2 >= g2 - g1;\nloop invariant i154: h1 >= f1 - g2;\nloop invariant i155: h2 >= f2 - g1;\nloop invariant i156: h1 >= g1 - f2;\nloop invariant i157: h2 >= g2 - f1;\nloop invariant i158: h1 >= h2 - f1;\nloop invariant i159: h2 >= h1 - f2;\nloop invariant i160: h1 >= h2 - g1;\nloop invariant i161: h2 >= h1 - g2;\nloop invariant i162: h1 >= h2 - f2;\nloop invariant i163: h2 >= h1 - f1;\nloop invariant i164: h1 >= h2 - g2;\nloop invariant i165: h2 >= h1 - g1;\nloop invariant i166: h1 >= h2 - h1;\nloop invariant i167: h2 >= h1 - h2;\nloop invariant i168: h1 >= h2 - h2;\nloop invariant i169: h2 >= h1 - h1;\nloop invariant i170: h1 >= h2 - h1 + h2;\nloop invariant i171: h2 >= h1 - h2 + h1;\nloop invariant i172: h1 >= h2 - h2 + h1;\nloop invariant i173: h2 >= h1 - h1 + h2;\nloop invariant i174: h1 >= h2 - h2 + h1 + h2;\nloop invariant i175: h2 >= h1 - h1 + h2 + h1;\nloop invariant i176: h1 >= h2 - h2 + h1 + h2 + h1;\nloop invariant i177: h2 >= h1 - h1 + h2 + h1 + h2;\nloop invariant i178: h1 >= h2 - h2 + h1 + h2 + h1 + h2;\nloop invariant i179: h2 >= h1 - h1 + h2 + h1 + h2 + h1;\nloop invariant i180: h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant i181: h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant i182: h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant i183: h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant i184: h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant i185: h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant i186: h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant i187: h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant i188: (f1 + g1) == (h1 - h2);\nloop invariant i189: (f2 + g2) == (h2 - h1);\nloop invariant i190: h1 + f1 >= h2;\nloop invariant i191: g1 >= g2;\nloop invariant i192: h1 >= h2;\nloop invariant i193: f1 >= f2;\nloop invariant i194: n >= 0;\nloop invariant i195: f1 + g1 == f2 + g2;\nloop invariant i196: f1 + g1 >= f2 + g2;\nloop invariant i197: 0 <= f1 <= f2;\nloop invariant i198: f2 <= g1 <= g2;loop invariant h1 <= h2;\nloop invariant i199: f1 == g1 - h1 + h2;\nloop invariant i200: f2 == g2 - h2 + h1;\nloop invariant i201: h1 == h2 - f2 + f1;\nloop invariant i202: h2 == h1 - f1 + f2;\nloop invariant i203: f2 <= g1;\nloop invariant i204: f1 == f2 - g1 + g2;\nloop invariant i205: f2 == g1 - h1 + h2;\nloop invariant i206: g1 == h1 - f1 + f2;\nloop invariant i207: g2 == h2 - f2 + f1;\nloop invariant i208: 1 <= n <= unknown();\nloop invariant i209: 0 <= f1 <= f2 <= g1 <= g2;\nloop invariant i210: h2 == h1 + f1;\nloop invariant i211: 0 <= n <= 2147483647;\nloop invariant i212: 0 <= f1 <= f2 <= g1 <= g2 <= h1 <= h2 <= 2147483647;\nloop invariant i213: f2 == f1 + g1;\nloop invariant i214: g2 == g1 + h1;\nloop invariant i215: h2 == 2 * f2 + g2;\nloop invariant i216: f2 == 2 * f1 + g1;\nloop invariant i217: g2 == 2 * g1 + h1;\nloop invariant i218: h2 == h1 + f1 + g1;\nloop invariant i219: f2 == f1 + g1 + h1;\nloop invariant i220: g2 == g1 + h1 + f1;\nloop invariant i221: h2 == h1 + f1 + g1 + f1;\nloop invariant i222: f2 == f1 + g1 + h1 + f1;\nloop invariant i223: g2 == g1 + h1 + f1 + g1;\nloop invariant i224: h2 == h1 + f1 + g1 + f1 + g1;\nloop invariant i225: f2 == f1 + g1 + h1 + f1 + g1;\nloop invariant i226: g2 == g1 + h1 + f1 + g1 + h1;\nloop invariant i227: h2 == h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i228: f2 == f1 + g1 + h1 + f1 + g1 + f1;\nloop invariant i229: g2 == g1 + h1 + f1 + g1 + h1 + g1;\nloop invariant i230: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant i231: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1;\nloop invariant i232: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1;\nloop invariant i233: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i234: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i235: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1;\nloop invariant i236: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant i237: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant i238: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant i239: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i240: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i241: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\nloop invariant i242: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant i243: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant i244: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant i245: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i246: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i247: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\nloop invariant i248: 0 <= n <= original_ n;\nloop invariant i249: f1 = original_f1 + (original_g1 + 1) * (original_g1 + 2) / 2;\nloop invariant i250: f2 = original_f2 + (original_g2 + 1) * (original_g2 + 2) / 2;\nloop invariant i251: g1 == original_g1 + n;\nloop invariant i252: g2 == original_g2 + n;\nloop invariant i253: h1 == original_h1 + (original_f1 + original_g1 + 1) * (original_f1 + original_g1 + 2) / 2;\nloop invariant i254: h2 == original_h2 + (original_f2 + original_g2 + 1) * (original_f2 + original_g2 + 2) / 2;\nloop invariant i255: original_f1 == original_f2;\nloop invariant i256: original_g1 == original_g2;\nloop invariant i257: original_h1 == original_h2;\nloop invariant i258: original_n >= 0;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
            "combined_annotation_num_solver_calls": 133,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\nloop invariant i8: h1 <= h2;\nloop invariant i9: f1 <= f2;\nloop invariant i10: g1 <= g2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i37: f1 <= g1;\n\nloop invariant i39: f2 <= g2;\n\n\n\n\n\n\n\n\n\n\nloop invariant i50: f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant i51: f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant i52: f1 >= g1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant i53: f2 >= g2 ==> f2 >= 0 && f2 <= 100000;\n\n\n\n\n\n\nloop invariant i60: (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant i61: (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant i62: (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\n\n\n\n\n\n\nloop invariant i69: h2 <= f2 + g2;\n\nloop invariant i71: h1 <= f1 + g1;\n\n\nloop invariant i74: g1 >= 1;\n\nloop invariant i76: g2 >= 1;\n\n\n\nloop invariant i80: h1 == h2 - f1;\n\n\n\n\n\n\n\nloop invariant i88: (h2 == h1 + f1);\n\nloop invariant i90: (g2 == g1 + f1);\nloop invariant i91: f1 <= h1;\n\nloop invariant i93: h1 <= f1 + f2;\nloop invariant i94: h1 <= f1 + g2;\nloop invariant i95: h2 <= f2 + g1;\nloop invariant i96: h1 <= f1 + g1 + f2;\nloop invariant i97: h2 <= f2 + g2 + g1;\nloop invariant i98: h1 <= f1 + g1 + g2;\nloop invariant i99: h2 <= f2 + g2 + f1;\nloop invariant i100: h1 <= f1 + g1 + g2 + f2;\nloop invariant i101: h2 <= f2 + g2 + g1 + f1;\nloop invariant i102: h1 <= f1 + g1 + g2 + f2 + f1;\nloop invariant i103: h2 <= f2 + g2 + g1 + f1 + g2;\nloop invariant i104: h1 <= f1 + g1 + g2 + f2 + f1 + g2;\nloop invariant i105: h2 <= f2 + g2 + g1 + f1 + g2 + f1;\nloop invariant i106: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1;\nloop invariant i107: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1;\nloop invariant i108: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1;\nloop invariant i109: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2;\nloop invariant i110: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2;\nloop invariant i111: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i112: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i113: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i114: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i115: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i116: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i117: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i118: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i119: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i120: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i121: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant i122: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\n\n\n\n\n\n\n\n\n\nloop invariant i132: h1 <= g1;\nloop invariant i133: h2 <= g2;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i146: f1 >= h1 - f2;\nloop invariant i147: f2 >= h2 - f1;\nloop invariant i148: g1 >= h1 - f1;\nloop invariant i149: g2 >= h2 - f2;\nloop invariant i150: h1 >= f1 - f2;\n\nloop invariant i152: h1 >= g1 - g2;\nloop invariant i153: h2 >= g2 - g1;\nloop invariant i154: h1 >= f1 - g2;\nloop invariant i155: h2 >= f2 - g1;\nloop invariant i156: h1 >= g1 - f2;\n\nloop invariant i158: h1 >= h2 - f1;\nloop invariant i159: h2 >= h1 - f2;\nloop invariant i160: h1 >= h2 - g1;\nloop invariant i161: h2 >= h1 - g2;\nloop invariant i162: h1 >= h2 - f2;\nloop invariant i163: h2 >= h1 - f1;\nloop invariant i164: h1 >= h2 - g2;\nloop invariant i165: h2 >= h1 - g1;\nloop invariant i166: h1 >= h2 - h1;\nloop invariant i167: h2 >= h1 - h2;\nloop invariant i168: h1 >= h2 - h2;\nloop invariant i169: h2 >= h1 - h1;\n\nloop invariant i171: h2 >= h1 - h2 + h1;\nloop invariant i172: h1 >= h2 - h2 + h1;\nloop invariant i173: h2 >= h1 - h1 + h2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i190: h1 + f1 >= h2;\n\n\n\n\n\n\nloop invariant i197: 0 <= f1 <= f2;\nloop invariant i198: f2 <= g1 <= g2;loop invariant h1 <= h2;\n\nloop invariant i200: f2 == g2 - h2 + h1;\n\n\nloop invariant i203: f2 <= g1;\n\n\n\n\n\nloop invariant i209: 0 <= f1 <= f2 <= g1 <= g2;\nloop invariant i210: h2 == h1 + f1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  while(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n-1; loop invariant x >= 0; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n - 1;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant x = n; loop invariant n > 0; loop invariant x <= n; loop invariant x > 0; loop invariant x >= 1; loop invariant x <= n - 1; loop invariant x < n; loop invariant x >= 0; loop invariant n >= 1; loop invariant n < x; loop invariant n <= x; loop invariant n != x; loop invariant n == x; loop invariant n == x + 1; loop invariant n == x + 2; loop invariant n == x + 3; loop invariant n == x + 4; loop invariant n == x + 5; loop invariant n == x + 6; loop invariant n == x + 7; loop invariant n == x + 8; loop invariant n == x + 9; loop invariant n == x + 10; loop invariant n == x + 11; loop invariant n == x + 12; loop invariant n == x + 13; loop invariant n == x + 14; loop invariant n == x + 15; loop invariant n == x + 16; loop invariant n == x + 17; loop invariant n == x + 18; loop invariant n == x + 19; loop invariant n == x + 20; loop invariant n == x + 21; loop invariant n == x + 22; loop invariant n == x + 23; loop invariant n == x + 24; loop invariant n == x + 25; loop invariant n == x + 26; loop invariant n == x + 27; loop invariant n == x + 28; loop invariant n == x + 29; loop invariant n == x + 30; loop invariant n == x + 31; loop invariant n == x + 32; loop invariant n == x + 33; loop invariant n == x + 34; loop invariant n == x + 35; loop invariant n == x + 36; loop invariant n == x + 37; loop invariant n == x + 38; loop invariant n == x + 39; loop invariant n == x + 40; loop invariant n == x + 41; loop invariant n == x + 42; loop invariant n == x + 43; loop invariant n == x + 44; loop invariant n == x + 45; loop invariant n == x + 46; loop invariant n == x + 47; loop invariant n == x + 48; loop invariant n == x + 49; loop invariant n == x + 50; loop invariant n == x + 51; loop invariant n == x + 52; loop invariant n == x + 53; loop invariant n == x + 54; loop invariant n == x + 55; loop invariant n == x + 56; loop invariant n == x + 57; loop invariant n == x + 58; loop invariant n == x + 59; loop invariant n == x + 60; loop invariant n == x + 61; loop invariant n == x + 62; loop invariant n == x + 63; loop invariant n == x + 64; loop invariant n == x + 65; loop invariant n == x + 66; loop invariant n == x + 67; loop invariant n == x + 68; loop invariant n == x + 69; loop invariant n == x + 70; loop invariant n == x + 71; loop invariant n == x + 72; loop invariant n == x + 73; loop invariant n == x + 74; loop invariant n == x + 75; loop invariant n == x + 76; loop invariant n == x + 77; loop invariant n == x + 78; loop invariant n == x + 79; loop invariant n == x + 80; loop invariant n == x + 81; loop invariant n == x + 82; loop invariant n == x + 83; loop invariant n == x + 84; loop invariant n == x + 85; loop invariant n == x + 86; loop invariant n == x + 87; loop invariant n == x + 88; loop invariant n == x + 89; loop invariant n == x + 90; loop invariant n == x + 91; loop invariant n == x + 92;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant x <= n;\nloop invariant n >= 1;\nloop invariant x >= 0;\n*/\n```",
                "```\n/*@\nloop invariant x >= n - 1;\nloop invariant x <= n;\nloop invariant n >= 1;\nloop invariant x <= n - 1 ==> x < n;\nloop invariant x >= n ==> x >= n;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n; loop invariant x <= n; loop invariant x <= n-1; loop invariant x+1 <= n; loop invariant x+1 <= n-1; loop invariant x+2 <= n-1; loop invariant x+3 <= n-1; loop invariant x+4 <= n-1; loop invariant x+5 <= n-1; loop invariant x+6 <= n-1; loop invariant x+7 <= n-1; loop invariant x+8 <= n-1; loop invariant x+9 <= n-1; loop invariant x+10 <= n-1; loop invariant x+11 <= n-1; loop invariant x+12 <= n-1; loop invariant x+13 <= n-1; loop invariant x+14 <= n-1; loop invariant x+15 <= n-1; loop invariant x+16 <= n-1; loop invariant x+17 <= n-1; loop invariant x+18 <= n-1; loop invariant x+19 <= n-1; loop invariant x+20 <= n-1; loop invariant x+21 <= n-1; loop invariant x+22 <= n-1; loop invariant x+23 <= n-1; loop invariant x+24 <= n-1; loop invariant x+25 <= n-1; loop invariant x+26 <= n-1; loop invariant x+27 <= n-1; loop invariant x+28 <= n-1; loop invariant x+29 <= n-1; loop invariant x+30 <= n-1; loop invariant x+31 <= n-1; loop invariant x+32 <= n-1; loop invariant x+33 <= n-1; loop invariant x+34 <= n-1; loop invariant x+35 <= n-1; loop invariant x+36 <= n-1; loop invariant x+37 <= n-1; loop invariant x+38 <= n-1; loop invariant x+39 <= n-1; loop invariant x+40 <= n-1; loop invariant x+41 <= n-1; loop invariant x+42 <= n-1; loop invariant x+43 <= n-1; loop invariant x+44 <= n-1; loop invariant x+45 <= n-1; loop invariant x+46 <= n-1; loop invariant x+47 <= n-1; loop invariant x+48 <= n-1; loop invariant x+49 <= n-1; loop invariant x+50 <= n-1; loop invariant x+51 <= n-1; loop invariant x+52 <= n-1; loop invariant x+53 <= n-1; loop invariant x+54 <= n-1; loop invariant x+55 <= n-1; loop invariant x+56 <= n-1; loop invariant x+57 <= n-1; loop invariant x+58 <= n-1; loop invariant x+59 <= n-1; loop invariant x+60 <= n-1; loop invariant x+61 <= n-1; loop invariant x+62 <= n-1; loop invariant x+63 <= n-1; loop invariant x+64 <= n-1; loop invariant x+65 <= n-1; loop invariant x+66 <= n-1; loop invariant x+67 <= n-1; loop invariant x+68 <= n-1; loop invariant x+69 <= n-1; loop invariant x+70 <= n-1; loop invariant x+71 <= n-1; loop invariant x+72 <= n-1; loop invariant x+73 <= n-1; loop invariant x+74 <= n-1; loop invariant x+75 <= n-1; loop invariant x+76 <= n-1; loop invariant x+77 <= n-1; loop invariant x+78 <= n-1; loop invariant x+79 <= n-1; loop invariant x+80 <= n-1; loop invariant x+81 <= n-1; loop invariant x+82 <= n-1; loop invariant x+83 <= n-1; loop invariant x+84 <= n-1; loop invariant x+85 <= n-1; loop invariant x+86 <= n-1; loop invariant x+87 <= n-1; loop invariant x+88 <= n-1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant (x <= n-1 ==> n>=1 && x>=0 && x <= n-1);\nloop invariant (x >= n+1 ==> n>=1 && x>=0 && x >= n+1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant x >= 0;\nloop invariant x <= n-1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant x <= n-1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= x;\nloop invariant x >= n;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n-1; loop invariant x >= 0; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n-1; loop invariant x >= 0; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n is preserved but not established.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n - 1;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n - 1 is neither established nor preserved.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\nloop invariant i4: x >= 0;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant x = n; loop invariant n > 0; loop invariant x <= n; loop invariant x > 0; loop invariant x >= 1; loop invariant x <= n - 1; loop invariant x < n; loop invariant x >= 0; loop invariant n >= 1; loop invariant n < x; loop invariant n <= x; loop invariant n != x; loop invariant n == x; loop invariant n == x + 1; loop invariant n == x + 2; loop invariant n == x + 3; loop invariant n == x + 4; loop invariant n == x + 5; loop invariant n == x + 6; loop invariant n == x + 7; loop invariant n == x + 8; loop invariant n == x + 9; loop invariant n == x + 10; loop invariant n == x + 11; loop invariant n == x + 12; loop invariant n == x + 13; loop invariant n == x + 14; loop invariant n == x + 15; loop invariant n == x + 16; loop invariant n == x + 17; loop invariant n == x + 18; loop invariant n == x + 19; loop invariant n == x + 20; loop invariant n == x + 21; loop invariant n == x + 22; loop invariant n == x + 23; loop invariant n == x + 24; loop invariant n == x + 25; loop invariant n == x + 26; loop invariant n == x + 27; loop invariant n == x + 28; loop invariant n == x + 29; loop invariant n == x + 30; loop invariant n == x + 31; loop invariant n == x + 32; loop invariant n == x + 33; loop invariant n == x + 34; loop invariant n == x + 35; loop invariant n == x + 36; loop invariant n == x + 37; loop invariant n == x + 38; loop invariant n == x + 39; loop invariant n == x + 40; loop invariant n == x + 41; loop invariant n == x + 42; loop invariant n == x + 43; loop invariant n == x + 44; loop invariant n == x + 45; loop invariant n == x + 46; loop invariant n == x + 47; loop invariant n == x + 48; loop invariant n == x + 49; loop invariant n == x + 50; loop invariant n == x + 51; loop invariant n == x + 52; loop invariant n == x + 53; loop invariant n == x + 54; loop invariant n == x + 55; loop invariant n == x + 56; loop invariant n == x + 57; loop invariant n == x + 58; loop invariant n == x + 59; loop invariant n == x + 60; loop invariant n == x + 61; loop invariant n == x + 62; loop invariant n == x + 63; loop invariant n == x + 64; loop invariant n == x + 65; loop invariant n == x + 66; loop invariant n == x + 67; loop invariant n == x + 68; loop invariant n == x + 69; loop invariant n == x + 70; loop invariant n == x + 71; loop invariant n == x + 72; loop invariant n == x + 73; loop invariant n == x + 74; loop invariant n == x + 75; loop invariant n == x + 76; loop invariant n == x + 77; loop invariant n == x + 78; loop invariant n == x + 79; loop invariant n == x + 80; loop invariant n == x + 81; loop invariant n == x + 82; loop invariant n == x + 83; loop invariant n == x + 84; loop invariant n == x + 85; loop invariant n == x + 86; loop invariant n == x + 87; loop invariant n == x + 88; loop invariant n == x + 89; loop invariant n == x + 90; loop invariant n == x + 91; loop invariant n == x + 92;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant x <= n;\nloop invariant n >= 1;\nloop invariant x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n-1 is neither established nor preserved.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\nloop invariant i4: x >= 0;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= n - 1;\nloop invariant x <= n;\nloop invariant n >= 1;\nloop invariant x <= n - 1 ==> x < n;\nloop invariant x >= n ==> x >= n;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\nloop invariant x >= n ==> x >= n;\nloop invariant n >= 1 ==> n >= 1;\nloop invariant x <= n - 1 ==> x <= n - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= n - 1 is preserved but not established.\nloop invariant x <= n is preserved but not established.\nloop invariant n >= 1 is preserved but not established.\nloop invariant x <= n - 1 ==> x < n is partially proven to be inductive.\nloop invariant x >= n ==> x >= n is partially proven to be inductive.\nloop invariant x <= n - 1 ==> x <= n - 1 is partially proven to be inductive.\nloop invariant n >= 1 ==> n >= 1 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\nloop invariant i4: x <= n - 1 ==> x < n;\nloop invariant i5: x >= n ==> x >= n;\nloop invariant i6: x <= n - 1 ==> x <= n - 1;\nloop invariant i7: n >= 1 ==> n >= 1;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n; loop invariant x <= n; loop invariant x <= n-1; loop invariant x+1 <= n; loop invariant x+1 <= n-1; loop invariant x+2 <= n-1; loop invariant x+3 <= n-1; loop invariant x+4 <= n-1; loop invariant x+5 <= n-1; loop invariant x+6 <= n-1; loop invariant x+7 <= n-1; loop invariant x+8 <= n-1; loop invariant x+9 <= n-1; loop invariant x+10 <= n-1; loop invariant x+11 <= n-1; loop invariant x+12 <= n-1; loop invariant x+13 <= n-1; loop invariant x+14 <= n-1; loop invariant x+15 <= n-1; loop invariant x+16 <= n-1; loop invariant x+17 <= n-1; loop invariant x+18 <= n-1; loop invariant x+19 <= n-1; loop invariant x+20 <= n-1; loop invariant x+21 <= n-1; loop invariant x+22 <= n-1; loop invariant x+23 <= n-1; loop invariant x+24 <= n-1; loop invariant x+25 <= n-1; loop invariant x+26 <= n-1; loop invariant x+27 <= n-1; loop invariant x+28 <= n-1; loop invariant x+29 <= n-1; loop invariant x+30 <= n-1; loop invariant x+31 <= n-1; loop invariant x+32 <= n-1; loop invariant x+33 <= n-1; loop invariant x+34 <= n-1; loop invariant x+35 <= n-1; loop invariant x+36 <= n-1; loop invariant x+37 <= n-1; loop invariant x+38 <= n-1; loop invariant x+39 <= n-1; loop invariant x+40 <= n-1; loop invariant x+41 <= n-1; loop invariant x+42 <= n-1; loop invariant x+43 <= n-1; loop invariant x+44 <= n-1; loop invariant x+45 <= n-1; loop invariant x+46 <= n-1; loop invariant x+47 <= n-1; loop invariant x+48 <= n-1; loop invariant x+49 <= n-1; loop invariant x+50 <= n-1; loop invariant x+51 <= n-1; loop invariant x+52 <= n-1; loop invariant x+53 <= n-1; loop invariant x+54 <= n-1; loop invariant x+55 <= n-1; loop invariant x+56 <= n-1; loop invariant x+57 <= n-1; loop invariant x+58 <= n-1; loop invariant x+59 <= n-1; loop invariant x+60 <= n-1; loop invariant x+61 <= n-1; loop invariant x+62 <= n-1; loop invariant x+63 <= n-1; loop invariant x+64 <= n-1; loop invariant x+65 <= n-1; loop invariant x+66 <= n-1; loop invariant x+67 <= n-1; loop invariant x+68 <= n-1; loop invariant x+69 <= n-1; loop invariant x+70 <= n-1; loop invariant x+71 <= n-1; loop invariant x+72 <= n-1; loop invariant x+73 <= n-1; loop invariant x+74 <= n-1; loop invariant x+75 <= n-1; loop invariant x+76 <= n-1; loop invariant x+77 <= n-1; loop invariant x+78 <= n-1; loop invariant x+79 <= n-1; loop invariant x+80 <= n-1; loop invariant x+81 <= n-1; loop invariant x+82 <= n-1; loop invariant x+83 <= n-1; loop invariant x+84 <= n-1; loop invariant x+85 <= n-1; loop invariant x+86 <= n-1; loop invariant x+87 <= n-1; loop invariant x+88 <= n-1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n; loop invariant x <= n; loop invariant x <= n-1; loop invariant x+1 <= n; loop invariant x+1 <= n-1; loop invariant x+2 <= n-1; loop invariant x+3 <= n-1; loop invariant x+4 <= n-1; loop invariant x+5 <= n-1; loop invariant x+6 <= n-1; loop invariant x+7 <= n-1; loop invariant x+8 <= n-1; loop invariant x+9 <= n-1; loop invariant x+10 <= n-1; loop invariant x+11 <= n-1; loop invariant x+12 <= n-1; loop invariant x+13 <= n-1; loop invariant x+14 <= n-1; loop invariant x+15 <= n-1; loop invariant x+16 <= n-1; loop invariant x+17 <= n-1; loop invariant x+18 <= n-1; loop invariant x+19 <= n-1; loop invariant x+20 <= n-1; loop invariant x+21 <= n-1; loop invariant x+22 <= n-1; loop invariant x+23 <= n-1; loop invariant x+24 <= n-1; loop invariant x+25 <= n-1; loop invariant x+26 <= n-1; loop invariant x+27 <= n-1; loop invariant x+28 <= n-1; loop invariant x+29 <= n-1; loop invariant x+30 <= n-1; loop invariant x+31 <= n-1; loop invariant x+32 <= n-1; loop invariant x+33 <= n-1; loop invariant x+34 <= n-1; loop invariant x+35 <= n-1; loop invariant x+36 <= n-1; loop invariant x+37 <= n-1; loop invariant x+38 <= n-1; loop invariant x+39 <= n-1; loop invariant x+40 <= n-1; loop invariant x+41 <= n-1; loop invariant x+42 <= n-1; loop invariant x+43 <= n-1; loop invariant x+44 <= n-1; loop invariant x+45 <= n-1; loop invariant x+46 <= n-1; loop invariant x+47 <= n-1; loop invariant x+48 <= n-1; loop invariant x+49 <= n-1; loop invariant x+50 <= n-1; loop invariant x+51 <= n-1; loop invariant x+52 <= n-1; loop invariant x+53 <= n-1; loop invariant x+54 <= n-1; loop invariant x+55 <= n-1; loop invariant x+56 <= n-1; loop invariant x+57 <= n-1; loop invariant x+58 <= n-1; loop invariant x+59 <= n-1; loop invariant x+60 <= n-1; loop invariant x+61 <= n-1; loop invariant x+62 <= n-1; loop invariant x+63 <= n-1; loop invariant x+64 <= n-1; loop invariant x+65 <= n-1; loop invariant x+66 <= n-1; loop invariant x+67 <= n-1; loop invariant x+68 <= n-1; loop invariant x+69 <= n-1; loop invariant x+70 <= n-1; loop invariant x+71 <= n-1; loop invariant x+72 <= n-1; loop invariant x+73 <= n-1; loop invariant x+74 <= n-1; loop invariant x+75 <= n-1; loop invariant x+76 <= n-1; loop invariant x+77 <= n-1; loop invariant x+78 <= n-1; loop invariant x+79 <= n-1; loop invariant x+80 <= n-1; loop invariant x+81 <= n-1; loop invariant x+82 <= n-1; loop invariant x+83 <= n-1; loop invariant x+84 <= n-1; loop invariant x+85 <= n-1; loop invariant x+86 <= n-1; loop invariant x+87 <= n-1; loop invariant x+88 <= n-1 is preserved but not established.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant (x <= n-1 ==> n>=1 && x>=0 && x <= n-1);\nloop invariant (x >= n+1 ==> n>=1 && x>=0 && x >= n+1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nloop invariant (x <= n-1 ==> n>=1 && x>=0 && x <= n-1) is partially proven to be inductive.\nloop invariant (x >= n+1 ==> n>=1 && x>=0 && x >= n+1) is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: (x <= n-1 ==> n>=1 && x>=0 && x <= n-1);\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant x >= 0;\nloop invariant x <= n-1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n-1 is neither established nor preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n-1 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant x <= n-1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 1 is preserved but not established.\nloop invariant x <= n-1 is established but not preserved.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\nloop invariant x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant x == n is preserved but not established.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= x;\nloop invariant x >= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= x is preserved but not established.\nloop invariant x >= n is partially proven to be inductive.\nAssertion \\false: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 1 is preserved but not established.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 21: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\nloop invariant i1: 0 <= x <= n; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n-1; loop invariant x >= 0; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n; loop invariant x >= 0; loop invariant x <= n;\nloop invariant i2: 0 <= x <= n;\nloop invariant i3: x <= n - 1;\nloop invariant i4: x <= n;\nloop invariant i5: x >= 0;\nloop invariant i6: x = n; loop invariant n > 0; loop invariant x <= n; loop invariant x > 0; loop invariant x >= 1; loop invariant x <= n - 1; loop invariant x < n; loop invariant x >= 0; loop invariant n >= 1; loop invariant n < x; loop invariant n <= x; loop invariant n != x; loop invariant n == x; loop invariant n == x + 1; loop invariant n == x + 2; loop invariant n == x + 3; loop invariant n == x + 4; loop invariant n == x + 5; loop invariant n == x + 6; loop invariant n == x + 7; loop invariant n == x + 8; loop invariant n == x + 9; loop invariant n == x + 10; loop invariant n == x + 11; loop invariant n == x + 12; loop invariant n == x + 13; loop invariant n == x + 14; loop invariant n == x + 15; loop invariant n == x + 16; loop invariant n == x + 17; loop invariant n == x + 18; loop invariant n == x + 19; loop invariant n == x + 20; loop invariant n == x + 21; loop invariant n == x + 22; loop invariant n == x + 23; loop invariant n == x + 24; loop invariant n == x + 25; loop invariant n == x + 26; loop invariant n == x + 27; loop invariant n == x + 28; loop invariant n == x + 29; loop invariant n == x + 30; loop invariant n == x + 31; loop invariant n == x + 32; loop invariant n == x + 33; loop invariant n == x + 34; loop invariant n == x + 35; loop invariant n == x + 36; loop invariant n == x + 37; loop invariant n == x + 38; loop invariant n == x + 39; loop invariant n == x + 40; loop invariant n == x + 41; loop invariant n == x + 42; loop invariant n == x + 43; loop invariant n == x + 44; loop invariant n == x + 45; loop invariant n == x + 46; loop invariant n == x + 47; loop invariant n == x + 48; loop invariant n == x + 49; loop invariant n == x + 50; loop invariant n == x + 51; loop invariant n == x + 52; loop invariant n == x + 53; loop invariant n == x + 54; loop invariant n == x + 55; loop invariant n == x + 56; loop invariant n == x + 57; loop invariant n == x + 58; loop invariant n == x + 59; loop invariant n == x + 60; loop invariant n == x + 61; loop invariant n == x + 62; loop invariant n == x + 63; loop invariant n == x + 64; loop invariant n == x + 65; loop invariant n == x + 66; loop invariant n == x + 67; loop invariant n == x + 68; loop invariant n == x + 69; loop invariant n == x + 70; loop invariant n == x + 71; loop invariant n == x + 72; loop invariant n == x + 73; loop invariant n == x + 74; loop invariant n == x + 75; loop invariant n == x + 76; loop invariant n == x + 77; loop invariant n == x + 78; loop invariant n == x + 79; loop invariant n == x + 80; loop invariant n == x + 81; loop invariant n == x + 82; loop invariant n == x + 83; loop invariant n == x + 84; loop invariant n == x + 85; loop invariant n == x + 86; loop invariant n == x + 87; loop invariant n == x + 88; loop invariant n == x + 89; loop invariant n == x + 90; loop invariant n == x + 91; loop invariant n == x + 92;\nloop invariant i7: x == n;\nloop invariant i8: 0 <= x <= n-1;\nloop invariant i9: n >= 1;\nloop invariant i10: x >= n - 1;\nloop invariant i11: x <= n - 1 ==> x < n;\nloop invariant i12: x >= n ==> x >= n;\nloop invariant i13: x <= n - 1 ==> x <= n - 1;\nloop invariant i14: n >= 1 ==> n >= 1;\nloop invariant i15: 0 <= x <= n; loop invariant x <= n; loop invariant x <= n-1; loop invariant x+1 <= n; loop invariant x+1 <= n-1; loop invariant x+2 <= n-1; loop invariant x+3 <= n-1; loop invariant x+4 <= n-1; loop invariant x+5 <= n-1; loop invariant x+6 <= n-1; loop invariant x+7 <= n-1; loop invariant x+8 <= n-1; loop invariant x+9 <= n-1; loop invariant x+10 <= n-1; loop invariant x+11 <= n-1; loop invariant x+12 <= n-1; loop invariant x+13 <= n-1; loop invariant x+14 <= n-1; loop invariant x+15 <= n-1; loop invariant x+16 <= n-1; loop invariant x+17 <= n-1; loop invariant x+18 <= n-1; loop invariant x+19 <= n-1; loop invariant x+20 <= n-1; loop invariant x+21 <= n-1; loop invariant x+22 <= n-1; loop invariant x+23 <= n-1; loop invariant x+24 <= n-1; loop invariant x+25 <= n-1; loop invariant x+26 <= n-1; loop invariant x+27 <= n-1; loop invariant x+28 <= n-1; loop invariant x+29 <= n-1; loop invariant x+30 <= n-1; loop invariant x+31 <= n-1; loop invariant x+32 <= n-1; loop invariant x+33 <= n-1; loop invariant x+34 <= n-1; loop invariant x+35 <= n-1; loop invariant x+36 <= n-1; loop invariant x+37 <= n-1; loop invariant x+38 <= n-1; loop invariant x+39 <= n-1; loop invariant x+40 <= n-1; loop invariant x+41 <= n-1; loop invariant x+42 <= n-1; loop invariant x+43 <= n-1; loop invariant x+44 <= n-1; loop invariant x+45 <= n-1; loop invariant x+46 <= n-1; loop invariant x+47 <= n-1; loop invariant x+48 <= n-1; loop invariant x+49 <= n-1; loop invariant x+50 <= n-1; loop invariant x+51 <= n-1; loop invariant x+52 <= n-1; loop invariant x+53 <= n-1; loop invariant x+54 <= n-1; loop invariant x+55 <= n-1; loop invariant x+56 <= n-1; loop invariant x+57 <= n-1; loop invariant x+58 <= n-1; loop invariant x+59 <= n-1; loop invariant x+60 <= n-1; loop invariant x+61 <= n-1; loop invariant x+62 <= n-1; loop invariant x+63 <= n-1; loop invariant x+64 <= n-1; loop invariant x+65 <= n-1; loop invariant x+66 <= n-1; loop invariant x+67 <= n-1; loop invariant x+68 <= n-1; loop invariant x+69 <= n-1; loop invariant x+70 <= n-1; loop invariant x+71 <= n-1; loop invariant x+72 <= n-1; loop invariant x+73 <= n-1; loop invariant x+74 <= n-1; loop invariant x+75 <= n-1; loop invariant x+76 <= n-1; loop invariant x+77 <= n-1; loop invariant x+78 <= n-1; loop invariant x+79 <= n-1; loop invariant x+80 <= n-1; loop invariant x+81 <= n-1; loop invariant x+82 <= n-1; loop invariant x+83 <= n-1; loop invariant x+84 <= n-1; loop invariant x+85 <= n-1; loop invariant x+86 <= n-1; loop invariant x+87 <= n-1; loop invariant x+88 <= n-1;\nloop invariant i16: 0 <= x;\nloop invariant i17: (x <= n-1 ==> n>=1 && x>=0 && x <= n-1);\nloop invariant i18: (x >= n+1 ==> n>=1 && x>=0 && x >= n+1);\nloop invariant i19: x <= n-1;\nloop invariant i20: 0 <= n <= x;\nloop invariant i21: x >= n;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
            "combined_annotation_num_solver_calls": 9,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\n\nloop invariant i5: x >= 0;\n\n\n\n\n\nloop invariant i11: x <= n - 1 ==> x < n;\nloop invariant i12: x >= n ==> x >= n;\nloop invariant i13: x <= n - 1 ==> x <= n - 1;\nloop invariant i14: n >= 1 ==> n >= 1;\n\nloop invariant i16: 0 <= x;\nloop invariant i17: (x <= n-1 ==> n>=1 && x>=0 && x <= n-1);\n\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\twhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 499999 <= y <= 500000;\nloop invariant z == 0;\nloop invariant x % 2 == y % 2;\nloop invariant (x < 500000 ==> x == (x + 1));\nloop invariant (x >= 500000 && x < 750000 ==> x == (x + 1));\nloop invariant (x >= 750000 ==> x == (x + 2));\nloop invariant (x < 500000 ==> y == (y + 0));\nloop invariant (x >= 500000 && x < 750000 ==> y == (y + 1));\nloop invariant (x >= 750000 ==> y == (y + 1));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant x == y;\nloop invariant x == z;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant y >= 1000000;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= 1000000;\nloop invariant y <= 1000000;\nloop invariant z <= 1000000;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000 + (z * 2);\nloop invariant x <= y;\nloop invariant (x < 500000) ==> (x == z);\nloop invariant (x >= 500000) && (x < 750000) ==> (x == z);\nloop invariant (x >= 750000) ==> (x == z + 1);\nloop invariant (x >= 750000) ==> (y == z + 1);\nloop invariant (x == 1000000) ==> (z == 249999);\nloop invariant (x == 1000000) ==> (y == 500000 + 249999);\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 1000000;\nloop invariant y >= 0;\nloop invariant y <= 500000;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant x == 0 ==> y == 500000;\nloop invariant x >= 500000 ==> x <= 750000 ==> y == z;\nloop invariant x >= 750000 ==> x < 1000000 ==> y == z + (x - 750000) / 2;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x == 1000000 ==> z == 1000000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000;\nloop invariant 0 <= z <= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant x < y ==> x < 750000;\nloop invariant x >= y ==> x >= 750000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant x >= (1 + y);\nloop invariant 0 <= y <= 500000;\nloop invariant x <= (z + 1000000);\nloop invariant x <= (z + y);\nloop invariant x <= (z + x);\nloop invariant x <= (z + z);\nloop invariant x <= (z + 1000000);\nloop invariant x <= (z + 500000);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 750000;\nloop invariant z == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000 + x;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x < 500000 ==> x == y + 1;\nloop invariant 500000 <= x < 750000 ==> x == y + 1;\nloop invariant 750000 <= x <= 1000000 ==> x == y + 1;\nloop invariant x == 1000000 ==> x == y + 1;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant (x < 500000 ==> x + 1 == x');\nloop invariant (x < 750000 && x >= 500000 ==> x + 1 == x');\nloop invariant (x >= 750000 ==> x + 2 == x');\nloop invariant (x < 500000 ==> y == y');\nloop invariant (x >= 500000 && x < 750000 ==> y == y' + 1);\nloop invariant (x >= 750000 ==> y == y' + 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z >= 0;\nloop invariant x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2;\nloop invariant y = (x + z) * (x + z - 1) / 2;\nloop invariant x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2 + z * (z + 1) / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant 500000 <= z <= 1000000;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x == 1000000 ==> z == 1000000;\nloop invariant x < 500000 ==> x == z;\nloop invariant x < 500000 ==> y == 0;\nloop invariant x >= 500000 ==> x < 750000 ==> x == z;\nloop invariant x >= 500000 ==> x < 750000 ==> y == z - 500000;\nloop invariant x >= 750000 ==> x == y + z - 750000;\nloop invariant x >= 750000 ==> y == z - 500000;\nloop invariant x >= 750000 ==> z == 1000000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;loop invariant y >= 0;loop invariant y <= 500000;loop invariant z = 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 499999 <= y <= 500000;\nloop invariant z == 0;\nloop invariant x % 2 == y % 2;\nloop invariant (x < 500000 ==> x == (x + 1));\nloop invariant (x >= 500000 && x < 750000 ==> x == (x + 1));\nloop invariant (x >= 750000 ==> x == (x + 2));\nloop invariant (x < 500000 ==> y == (y + 0));\nloop invariant (x >= 500000 && x < 750000 ==> y == (y + 1));\nloop invariant (x >= 750000 ==> y == (y + 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 499999 <= y <= 500000 is partially proven to be inductive.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant (x < 500000 ==> x == (x + 1)) is preserved but not established.\nloop invariant (x >= 500000 && x < 750000 ==> x == (x + 1)) is partially proven to be inductive.\nloop invariant (x >= 750000 ==> x == (x + 2)) is partially proven to be inductive.\nloop invariant (x < 500000 ==> y == (y + 0)) is partially proven to be inductive.\nloop invariant (x >= 500000 && x < 750000 ==> y == (y + 1)) is partially proven to be inductive.\nloop invariant (x >= 750000 ==> y == (y + 1)) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n\n\n\n\nloop invariant i8: (x < 500000 ==> y == (y + 0));\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant x == y;\nloop invariant x == z;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 500000 <= y <= 1000000 is partially proven to be inductive.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant x == y is preserved but not established.\nloop invariant x == z is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant y >= 1000000;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= 1000000;\nloop invariant y <= 1000000;\nloop invariant z <= 1000000;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant y >= 1000000 is preserved but not established.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= 1000000 is partially proven to be inductive.\nloop invariant y <= 1000000 is partially proven to be inductive.\nloop invariant z <= 1000000 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant z <= x is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n\n\nloop invariant i8: z <= 1000000;\n\n\nloop invariant i11: z <= x;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000 + (z * 2);\nloop invariant x <= y;\nloop invariant (x < 500000) ==> (x == z);\nloop invariant (x >= 500000) && (x < 750000) ==> (x == z);\nloop invariant (x >= 750000) ==> (x == z + 1);\nloop invariant (x >= 750000) ==> (y == z + 1);\nloop invariant (x == 1000000) ==> (z == 249999);\nloop invariant (x == 1000000) ==> (y == 500000 + 249999);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 500000 + (z * 2) is established but not preserved.\nloop invariant x <= y is established but not preserved.\nloop invariant (x < 500000) ==> (x == z) is established but not preserved.\nloop invariant (x >= 500000) && (x < 750000) ==> (x == z) is established but not preserved.\nloop invariant (x >= 750000) ==> (x == z + 1) is partially proven to be inductive.\nloop invariant (x >= 750000) ==> (y == z + 1) is established but not preserved.\nloop invariant (x == 1000000) ==> (z == 249999) is partially proven to be inductive.\nloop invariant (x == 1000000) ==> (y == 500000 + 249999) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 1000000;\nloop invariant y >= 0;\nloop invariant y <= 500000;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant x == 0 ==> y == 500000;\nloop invariant x >= 500000 ==> x <= 750000 ==> y == z;\nloop invariant x >= 750000 ==> x < 1000000 ==> y == z + (x - 750000) / 2;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x == 1000000 ==> z == 1000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x < 1000000 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 500000 is established but not preserved.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 1000000 is partially proven to be inductive.\nloop invariant x == 0 ==> y == 500000 is partially proven to be inductive.\nloop invariant x >= 500000 ==> x <= 750000 ==> y == z is established but not preserved.\nloop invariant x >= 750000 ==> x < 1000000 ==> y == z + (x - 750000) / 2 is partially proven to be inductive.\nloop invariant x == 1000000 ==> y == 1000000 is partially proven to be inductive.\nloop invariant x == 1000000 ==> z == 1000000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\nloop invariant i5: z >= 0;\nloop invariant i6: z <= 1000000;\nloop invariant i7: x == 0 ==> y == 500000;\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000;\nloop invariant 0 <= z <= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 500000 <= y <= 500000 is partially proven to be inductive.\nloop invariant 0 <= z <= 0 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: 0 <= z <= 0;\n\n\nloop invariant i6: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i7: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i8: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i9: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i10: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i11: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i12: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i13: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant x < y ==> x < 750000;\nloop invariant x >= y ==> x >= 750000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 0 <= y <= 1000000 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant x < y ==> x < 750000 is established but not preserved.\nloop invariant x >= y ==> x >= 750000 is established but not preserved.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant x >= (1 + y);\nloop invariant 0 <= y <= 500000;\nloop invariant x <= (z + 1000000);\nloop invariant x <= (z + y);\nloop invariant x <= (z + x);\nloop invariant x <= (z + z);\nloop invariant x <= (z + 1000000);\nloop invariant x <= (z + 500000);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant x >= (1 + y) is preserved but not established.\nloop invariant 0 <= y <= 500000 is partially proven to be inductive.\nloop invariant x <= (z + 1000000) is partially proven to be inductive.\nloop invariant x <= (z + y) is partially proven to be inductive.\nloop invariant x <= (z + x) is partially proven to be inductive.\nloop invariant x <= (z + z) is partially proven to be inductive.\nloop invariant x <= (z + 500000) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n\n\n\nloop invariant i6: x <= (z + x);\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 750000;\nloop invariant z == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 750000 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000 + x;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x < 500000 ==> x == y + 1;\nloop invariant 500000 <= x < 750000 ==> x == y + 1;\nloop invariant 750000 <= x <= 1000000 ==> x == y + 1;\nloop invariant x == 1000000 ==> x == y + 1;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 0 <= y <= 500000 + x is partially proven to be inductive.\nloop invariant x < 500000 ==> y + x == 1000000 is preserved but not established.\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000 is partially proven to be inductive.\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000 is partially proven to be inductive.\nloop invariant x == 1000000 ==> y == 1000000 is partially proven to be inductive.\nloop invariant x < 500000 ==> x == y + 1 is partially proven to be inductive.\nloop invariant 500000 <= x < 750000 ==> x == y + 1 is partially proven to be inductive.\nloop invariant 750000 <= x <= 1000000 ==> x == y + 1 is partially proven to be inductive.\nloop invariant x == 1000000 ==> x == y + 1 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\nloop invariant i2: 0 <= y <= 500000 + x;\n\n\n\n\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant (x < 500000 ==> x + 1 == x');\nloop invariant (x < 750000 && x >= 500000 ==> x + 1 == x');\nloop invariant (x >= 750000 ==> x + 2 == x');\nloop invariant (x < 500000 ==> y == y');\nloop invariant (x >= 500000 && x < 750000 ==> y == y' + 1);\nloop invariant (x >= 750000 ==> y == y' + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: lexical error, illegal character '",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 0 <= y <= 1000000;\nloop invariant i3: z == 0;\n\nloop invariant i5: (x < 750000 && x >= 500000 ==> x + 1 == x');\nloop invariant i6: (x >= 750000 ==> x + 2 == x');\nloop invariant i7: (x < 500000 ==> y == y');\nloop invariant i8: (x >= 500000 && x < 750000 ==> y == y' + 1);\nloop invariant i9: (x >= 750000 ==> y == y' + 1);\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z >= 0;\nloop invariant x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2;\nloop invariant y = (x + z) * (x + z - 1) / 2;\nloop invariant x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2 + z * (z + 1) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z >= 0;\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant 500000 <= z <= 1000000;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x == 1000000 ==> z == 1000000;\nloop invariant x < 500000 ==> x == z;\nloop invariant x < 500000 ==> y == 0;\nloop invariant x >= 500000 ==> x < 750000 ==> x == z;\nloop invariant x >= 500000 ==> x < 750000 ==> y == z - 500000;\nloop invariant x >= 750000 ==> x == y + z - 750000;\nloop invariant x >= 750000 ==> y == z - 500000;\nloop invariant x >= 750000 ==> z == 1000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 0 <= y <= 1000000 is partially proven to be inductive.\nloop invariant 500000 <= z <= 1000000 is preserved but not established.\nloop invariant x == 1000000 ==> y == 1000000 is partially proven to be inductive.\nloop invariant x == 1000000 ==> z == 1000000 is partially proven to be inductive.\nloop invariant x < 500000 ==> x == z is partially proven to be inductive.\nloop invariant x < 500000 ==> y == 0 is partially proven to be inductive.\nloop invariant x >= 500000 ==> x < 750000 ==> x == z is partially proven to be inductive.\nloop invariant x >= 500000 ==> x < 750000 ==> y == z - 500000 is partially proven to be inductive.\nloop invariant x >= 750000 ==> x == y + z - 750000 is partially proven to be inductive.\nloop invariant x >= 750000 ==> y == z - 500000 is partially proven to be inductive.\nloop invariant x >= 750000 ==> z == 1000000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;loop invariant y >= 0;loop invariant y <= 500000;loop invariant z = 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 80: lexical error, illegal character '",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 499999 <= y <= 500000;\nloop invariant i3: z == 0;\nloop invariant i4: x % 2 == y % 2;\nloop invariant i5: (x < 500000 ==> x == (x + 1));\nloop invariant i6: (x >= 500000 && x < 750000 ==> x == (x + 1));\nloop invariant i7: (x >= 750000 ==> x == (x + 2));\nloop invariant i8: (x < 500000 ==> y == (y + 0));\nloop invariant i9: (x >= 500000 && x < 750000 ==> y == (y + 1));\nloop invariant i10: (x >= 750000 ==> y == (y + 1));\nloop invariant i11: 500000 <= y <= 1000000;\nloop invariant i12: x == y;\nloop invariant i13: x == z;\nloop invariant i14: y >= 1000000;\nloop invariant i15: z >= 0;\nloop invariant i16: x >= 0;\nloop invariant i17: y >= 0;\nloop invariant i18: x <= 1000000;\nloop invariant i19: y <= 1000000;\nloop invariant i20: z <= 1000000;\nloop invariant i21: x <= y;\nloop invariant i22: y <= z;\nloop invariant i23: z <= x;\nloop invariant i24: 500000 <= y <= 500000 + (z * 2);\nloop invariant i25: (x < 500000) ==> (x == z);\nloop invariant i26: (x >= 500000) && (x < 750000) ==> (x == z);\nloop invariant i27: (x >= 750000) ==> (x == z + 1);\nloop invariant i28: (x >= 750000) ==> (y == z + 1);\nloop invariant i29: (x == 1000000) ==> (z == 249999);\nloop invariant i30: (x == 1000000) ==> (y == 500000 + 249999);\nloop invariant i31: x < 1000000;\nloop invariant i32: y <= 500000;\nloop invariant i33: x == 0 ==> y == 500000;\nloop invariant i34: x >= 500000 ==> x <= 750000 ==> y == z;\nloop invariant i35: x >= 750000 ==> x < 1000000 ==> y == z + (x - 750000) / 2;\nloop invariant i36: x == 1000000 ==> y == 1000000;\nloop invariant i37: x == 1000000 ==> z == 1000000;\nloop invariant i38: 500000 <= y <= 500000;\nloop invariant i39: 0 <= z <= 0;\nloop invariant i40: x >= (1 + (y - 1) * y / 2);\nloop invariant i41: x >= (1 + (z - 1) * z / 2);\nloop invariant i42: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i43: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i44: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i45: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i46: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i47: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i48: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i49: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i50: 0 <= y <= 1000000;\nloop invariant i51: x < y ==> x < 750000;\nloop invariant i52: x >= y ==> x >= 750000;\nloop invariant i53: x >= (1 + y);\nloop invariant i54: 0 <= y <= 500000;\nloop invariant i55: x <= (z + 1000000);\nloop invariant i56: x <= (z + y);\nloop invariant i57: x <= (z + x);\nloop invariant i58: x <= (z + z);\nloop invariant i59: x <= (z + 500000);\nloop invariant i60: 500000 <= y <= 750000;\nloop invariant i61: 0 <= y <= 500000 + x;\nloop invariant i62: x < 500000 ==> y + x == 1000000;\nloop invariant i63: 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant i64: 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant i65: x < 500000 ==> x == y + 1;\nloop invariant i66: 500000 <= x < 750000 ==> x == y + 1;\nloop invariant i67: 750000 <= x <= 1000000 ==> x == y + 1;\nloop invariant i68: x == 1000000 ==> x == y + 1;\nloop invariant i69: (x < 500000 ==> x + 1 == x');\nloop invariant i70: (x < 750000 && x >= 500000 ==> x + 1 == x');\nloop invariant i71: (x >= 750000 ==> x + 2 == x');\nloop invariant i72: (x < 500000 ==> y == y');\nloop invariant i73: (x >= 500000 && x < 750000 ==> y == y' + 1);\nloop invariant i74: (x >= 750000 ==> y == y' + 1);\nloop invariant i75: x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2;\nloop invariant i76: y = (x + z) * (x + z - 1) / 2;\nloop invariant i77: x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2 + z * (z + 1) / 2;\nloop invariant i78: 500000 <= z <= 1000000;\nloop invariant i79: x < 500000 ==> x == z;\nloop invariant i80: x < 500000 ==> y == 0;\nloop invariant i81: x >= 500000 ==> x < 750000 ==> x == z;\nloop invariant i82: x >= 500000 ==> x < 750000 ==> y == z - 500000;\nloop invariant i83: x >= 750000 ==> x == y + z - 750000;\nloop invariant i84: x >= 750000 ==> y == z - 500000;\nloop invariant i85: x >= 750000 ==> z == 1000000;\nloop invariant i86: 0 <= x <= 1000000;loop invariant y >= 0;loop invariant y <= 500000;loop invariant z = 0;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
            "combined_annotation_num_solver_calls": 3,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 499999 <= y <= 500000;\nloop invariant i3: z == 0;\nloop invariant i4: x % 2 == y % 2;\nloop invariant i5: (x < 500000 ==> x == (x + 1));\nloop invariant i6: (x >= 500000 && x < 750000 ==> x == (x + 1));\nloop invariant i7: (x >= 750000 ==> x == (x + 2));\nloop invariant i8: (x < 500000 ==> y == (y + 0));\nloop invariant i9: (x >= 500000 && x < 750000 ==> y == (y + 1));\nloop invariant i10: (x >= 750000 ==> y == (y + 1));\nloop invariant i11: 500000 <= y <= 1000000;\nloop invariant i12: x == y;\nloop invariant i13: x == z;\nloop invariant i14: y >= 1000000;\nloop invariant i15: z >= 0;\nloop invariant i16: x >= 0;\nloop invariant i17: y >= 0;\nloop invariant i18: x <= 1000000;\nloop invariant i19: y <= 1000000;\nloop invariant i20: z <= 1000000;\nloop invariant i21: x <= y;\nloop invariant i22: y <= z;\nloop invariant i23: z <= x;\nloop invariant i24: 500000 <= y <= 500000 + (z * 2);\nloop invariant i25: (x < 500000) ==> (x == z);\nloop invariant i26: (x >= 500000) && (x < 750000) ==> (x == z);\nloop invariant i27: (x >= 750000) ==> (x == z + 1);\nloop invariant i28: (x >= 750000) ==> (y == z + 1);\nloop invariant i29: (x == 1000000) ==> (z == 249999);\nloop invariant i30: (x == 1000000) ==> (y == 500000 + 249999);\nloop invariant i31: x < 1000000;\nloop invariant i32: y <= 500000;\nloop invariant i33: x == 0 ==> y == 500000;\nloop invariant i34: x >= 500000 ==> x <= 750000 ==> y == z;\nloop invariant i35: x >= 750000 ==> x < 1000000 ==> y == z + (x - 750000) / 2;\nloop invariant i36: x == 1000000 ==> y == 1000000;\nloop invariant i37: x == 1000000 ==> z == 1000000;\nloop invariant i38: 500000 <= y <= 500000;\nloop invariant i39: 0 <= z <= 0;\nloop invariant i40: x >= (1 + (y - 1) * y / 2);\nloop invariant i41: x >= (1 + (z - 1) * z / 2);\nloop invariant i42: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i43: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i44: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i45: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i46: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i47: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i48: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i49: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i50: 0 <= y <= 1000000;\nloop invariant i51: x < y ==> x < 750000;\nloop invariant i52: x >= y ==> x >= 750000;\nloop invariant i53: x >= (1 + y);\nloop invariant i54: 0 <= y <= 500000;\nloop invariant i55: x <= (z + 1000000);\nloop invariant i56: x <= (z + y);\nloop invariant i57: x <= (z + x);\nloop invariant i58: x <= (z + z);\nloop invariant i59: x <= (z + 500000);\nloop invariant i60: 500000 <= y <= 750000;\nloop invariant i61: 0 <= y <= 500000 + x;\nloop invariant i62: x < 500000 ==> y + x == 1000000;\nloop invariant i63: 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant i64: 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant i65: x < 500000 ==> x == y + 1;\nloop invariant i66: 500000 <= x < 750000 ==> x == y + 1;\nloop invariant i67: 750000 <= x <= 1000000 ==> x == y + 1;\nloop invariant i68: x == 1000000 ==> x == y + 1;\n\nloop invariant i70: (x < 750000 && x >= 500000 ==> x + 1 == x');\nloop invariant i71: (x >= 750000 ==> x + 2 == x');\nloop invariant i72: (x < 500000 ==> y == y');\nloop invariant i73: (x >= 500000 && x < 750000 ==> y == y' + 1);\nloop invariant i74: (x >= 750000 ==> y == y' + 1);\nloop invariant i75: x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2;\nloop invariant i76: y = (x + z) * (x + z - 1) / 2;\nloop invariant i77: x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2 + z * (z + 1) / 2;\nloop invariant i78: 500000 <= z <= 1000000;\nloop invariant i79: x < 500000 ==> x == z;\nloop invariant i80: x < 500000 ==> y == 0;\nloop invariant i81: x >= 500000 ==> x < 750000 ==> x == z;\nloop invariant i82: x >= 500000 ==> x < 750000 ==> y == z - 500000;\nloop invariant i83: x >= 750000 ==> x == y + z - 750000;\nloop invariant i84: x >= 750000 ==> y == z - 500000;\nloop invariant i85: x >= 750000 ==> z == 1000000;\nloop invariant i86: 0 <= x <= 1000000;loop invariant y >= 0;loop invariant y <= 500000;loop invariant z = 0;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= -1;\nloop invariant x == 100;\nloop invariant flag == 1;\nloop invariant x >= y;\nloop invariant y < 0;\nloop invariant flag == 1 ==> x == 99;\nloop invariant flag == 1 ==> y == -2;\nloop invariant flag == 1 ==> flag == 1;\nloop invariant flag == 1 ==> x >= y;\nloop invariant flag == 1 ==> y < 0;\nloop invariant flag < 1 ==> x == 0;\nloop invariant flag < 1 ==> y == 0;\nloop invariant flag < 1 ==> flag == 0;\nloop invariant flag < 1 ==> x >= y;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 50;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant flag < 1;\nloop invariant flag >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant flag == 0 || flag == 1;\nloop invariant (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0);\n*/\n```",
                "```\n/*@\nloop invariant x <= 99;\nloop invariant y <= 0;\nloop invariant y >= -50;\nloop invariant x >= 0;\nloop invariant x < y ==> y == -2;\nloop invariant x >= y ==> x == 99;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant -1 <= y <= 0;\nloop invariant flag == 0 || flag == 1;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y <= (x - 1) * x / 2;\nloop invariant flag == 0 || flag == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y < 50;\nloop invariant x >= 0;\nloop invariant x <= 50;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant x + y >= 0;\nloop invariant x + y <= 100;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant (y=-2) ==> flag=1;\nloop invariant flag<1 ==> x <= 50;\nloop invariant flag<1 ==> (1 <= y <= 50);\nloop invariant flag<1 ==> x <= y-1;\nloop invariant flag<1 ==> x >= -1;\nloop invariant flag<1 ==> y >= -1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2;\nloop invariant flag == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant -50 <= x <= 100;\nloop invariant flag == 0 || flag == 1;\nloop invariant flag == 0 ==> x == 0;\nloop invariant flag == 1 ==> y == -2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y < 0;\nloop invariant x >= 99;\nloop invariant flag == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant x <= y;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x + y >= 0;\nloop invariant x + y <= 98;\nloop invariant y - x >= -1;\nloop invariant y - x <= 50;\nloop invariant (y < 0) ==> (flag == 1);\nloop invariant (flag < 1) ==> (x < 50);\nloop invariant (x < 50) ==> (y > 0);\nloop invariant (flag < 1) ==> (y >= 0);\nloop invariant (flag < 1) ==> (y <= 100);\nloop invariant (flag < 1) ==> (x + y >= 0);\nloop invariant (flag < 1) ==> (x + y <= 98);\nloop invariant (flag < 1) ==> (y - x >= -1);\nloop invariant (flag < 1) ==> (y - x <= 50);\nloop invariant (flag < 1) ==> (flag == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant -2 <= y <= 1;\nloop invariant (flag == 0) ==> (x < 50 && y <= 1);\nloop invariant (flag == 1) ==> (x >= 50 && y == -2);\nloop invariant (flag == 0) ==> (x == 0 && y == 0);\nloop invariant (flag == 1) ==> (x == 99 && y == -2);\nloop invariant (flag == 0) ==> (x < y);\nloop invariant (flag == 1) ==> (x >= y);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= -1;\nloop invariant x == 100;\nloop invariant flag == 1;\nloop invariant x >= y;\nloop invariant y < 0;\nloop invariant flag == 1 ==> x == 99;\nloop invariant flag == 1 ==> y == -2;\nloop invariant flag == 1 ==> flag == 1;\nloop invariant flag == 1 ==> x >= y;\nloop invariant flag == 1 ==> y < 0;\nloop invariant flag < 1 ==> x == 0;\nloop invariant flag < 1 ==> y == 0;\nloop invariant flag < 1 ==> flag == 0;\nloop invariant flag < 1 ==> x >= y;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 50;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= -1 is preserved but not established.\nloop invariant x == 100 is partially proven to be inductive.\nloop invariant flag == 1 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y < 0 is partially proven to be inductive.\nloop invariant flag == 1 ==> x == 99 is partially proven to be inductive.\nloop invariant flag == 1 ==> y == -2 is partially proven to be inductive.\nloop invariant flag == 1 ==> flag == 1 is partially proven to be inductive.\nloop invariant flag == 1 ==> x >= y is partially proven to be inductive.\nloop invariant flag == 1 ==> y < 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x == 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> y == 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> flag == 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x >= y is partially proven to be inductive.\nloop invariant flag < 1 ==> y >= 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x < 50 is partially proven to be inductive.\nloop invariant flag < 1 ==> y < 50 is partially proven to be inductive.\nloop invariant flag < 1 ==> x < 100 is partially proven to be inductive.\nloop invariant flag < 1 ==> y < 100 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\nloop invariant i8: flag == 1 ==> flag == 1;\n\n\n\n\nloop invariant i13: flag < 1 ==> flag == 0;\nloop invariant i14: flag < 1 ==> x >= y;\n\n\nloop invariant i17: flag < 1 ==> y < 50;\n\nloop invariant i19: flag < 1 ==> y < 100;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant flag < 1;\nloop invariant flag >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant y >= -1 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant flag < 1 is partially proven to be inductive.\nloop invariant flag >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant flag <= 0 is partially proven to be inductive.\nloop invariant flag >= 1 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: x >= y;\n\nloop invariant i7: flag >= 0;\n\nloop invariant i9: y <= 100;\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant flag == 0 || flag == 1;\nloop invariant (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant flag == 0 || flag == 1 is partially proven to be inductive.\nloop invariant (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0) is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i2: 0 <= y <= 100000;\nloop invariant i3: x >= (1 + (y - 1) * y / 2);\nloop invariant i4: flag == 0 || flag == 1;\nloop invariant i5: (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x <= 99;\nloop invariant y <= 0;\nloop invariant y >= -50;\nloop invariant x >= 0;\nloop invariant x < y ==> y == -2;\nloop invariant x >= y ==> x == 99;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x <= 99 is partially proven to be inductive.\nloop invariant y <= 0 is partially proven to be inductive.\nloop invariant y >= -50 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x < y ==> y == -2 is partially proven to be inductive.\nloop invariant x >= y ==> x == 99 is preserved but not established.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: x < y ==> y == -2;\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant -1 <= y <= 0;\nloop invariant flag == 0 || flag == 1;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y <= (x - 1) * x / 2;\nloop invariant flag == 0 || flag == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is partially proven to be inductive.\nloop invariant -1 <= y <= 0 is partially proven to be inductive.\nloop invariant flag == 0 || flag == 1 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant y <= (x - 1) * x / 2 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\nloop invariant i3: flag == 0 || flag == 1;\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y < 50;\nloop invariant x >= 0;\nloop invariant x <= 50;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant x + y >= 0;\nloop invariant x + y <= 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y < 50 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 50 is established but not preserved.\nloop invariant y >= -50 is partially proven to be inductive.\nloop invariant y <= 50 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x + y <= 100 is partially proven to be inductive.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant (y=-2) ==> flag=1;\nloop invariant flag<1 ==> x <= 50;\nloop invariant flag<1 ==> (1 <= y <= 50);\nloop invariant flag<1 ==> x <= y-1;\nloop invariant flag<1 ==> x >= -1;\nloop invariant flag<1 ==> y >= -1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: 0 <= flag <= 1;\n\n\n\n\nloop invariant i6: flag<1 ==> x >= -1;\nloop invariant i7: flag<1 ==> y >= -1;\n\nloop invariant i9: flag<1 ==> x >= y-1;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\nloop invariant i4: x >= 0;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2;\nloop invariant flag == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant flag == 1 is preserved but not established.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant -50 <= x <= 100;\nloop invariant flag == 0 || flag == 1;\nloop invariant flag == 0 ==> x == 0;\nloop invariant flag == 1 ==> y == -2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 50 is established but not preserved.\nloop invariant -50 <= x <= 100 is partially proven to be inductive.\nloop invariant flag == 0 || flag == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> x == 0 is established but not preserved.\nloop invariant flag == 1 ==> y == -2 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\nloop invariant i3: flag == 0 || flag == 1;\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y < 0;\nloop invariant x >= 99;\nloop invariant flag == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y < 0 is preserved but not established.\nloop invariant x >= 99 is partially proven to be inductive.\nloop invariant flag == 1 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant x <= y;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x + y >= 0;\nloop invariant x + y <= 98;\nloop invariant y - x >= -1;\nloop invariant y - x <= 50;\nloop invariant (y < 0) ==> (flag == 1);\nloop invariant (flag < 1) ==> (x < 50);\nloop invariant (x < 50) ==> (y > 0);\nloop invariant (flag < 1) ==> (y >= 0);\nloop invariant (flag < 1) ==> (y <= 100);\nloop invariant (flag < 1) ==> (x + y >= 0);\nloop invariant (flag < 1) ==> (x + y <= 98);\nloop invariant (flag < 1) ==> (y - x >= -1);\nloop invariant (flag < 1) ==> (y - x <= 50);\nloop invariant (flag < 1) ==> (flag == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x + y <= 98 is partially proven to be inductive.\nloop invariant y - x >= -1 is partially proven to be inductive.\nloop invariant y - x <= 50 is partially proven to be inductive.\nloop invariant (y < 0) ==> (flag == 1) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (x < 50) is partially proven to be inductive.\nloop invariant (x < 50) ==> (y > 0) is preserved but not established.\nloop invariant (flag < 1) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (y <= 100) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (x + y >= 0) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (x + y <= 98) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (y - x >= -1) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (y - x <= 50) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (flag == 0) is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\nloop invariant i4: y <= 100;\n\n\n\nloop invariant i8: y - x <= 50;\n\n\n\n\nloop invariant i13: (flag < 1) ==> (y <= 100);\nloop invariant i14: (flag < 1) ==> (x + y >= 0);\n\n\nloop invariant i17: (flag < 1) ==> (y - x <= 50);\nloop invariant i18: (flag < 1) ==> (flag == 0);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant -2 <= y <= 1;\nloop invariant (flag == 0) ==> (x < 50 && y <= 1);\nloop invariant (flag == 1) ==> (x >= 50 && y == -2);\nloop invariant (flag == 0) ==> (x == 0 && y == 0);\nloop invariant (flag == 1) ==> (x == 99 && y == -2);\nloop invariant (flag == 0) ==> (x < y);\nloop invariant (flag == 1) ==> (x >= y);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant -2 <= y <= 1 is partially proven to be inductive.\nloop invariant (flag == 0) ==> (x < 50 && y <= 1) is partially proven to be inductive.\nloop invariant (flag == 1) ==> (x >= 50 && y == -2) is partially proven to be inductive.\nloop invariant (flag == 0) ==> (x == 0 && y == 0) is partially proven to be inductive.\nloop invariant (flag == 1) ==> (x == 99 && y == -2) is partially proven to be inductive.\nloop invariant (flag == 0) ==> (x < y) is preserved but not established.\nloop invariant (flag == 1) ==> (x >= y) is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 59: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: 0 <= y <= -1;\nloop invariant i4: x == 100;\nloop invariant i5: flag == 1;\nloop invariant i6: x >= y;\nloop invariant i7: y < 0;\nloop invariant i8: flag == 1 ==> x == 99;\nloop invariant i9: flag == 1 ==> y == -2;\nloop invariant i10: flag == 1 ==> flag == 1;\nloop invariant i11: flag == 1 ==> x >= y;\nloop invariant i12: flag == 1 ==> y < 0;\nloop invariant i13: flag < 1 ==> x == 0;\nloop invariant i14: flag < 1 ==> y == 0;\nloop invariant i15: flag < 1 ==> flag == 0;\nloop invariant i16: flag < 1 ==> x >= y;\nloop invariant i17: flag < 1 ==> y >= 0;\nloop invariant i18: flag < 1 ==> x < 50;\nloop invariant i19: flag < 1 ==> y < 50;\nloop invariant i20: flag < 1 ==> x < 100;\nloop invariant i21: flag < 1 ==> y < 100;\nloop invariant i22: y >= -1;\nloop invariant i23: x >= 0;\nloop invariant i24: flag < 1;\nloop invariant i25: flag >= 0;\nloop invariant i26: x <= 100;\nloop invariant i27: y <= 100;\nloop invariant i28: flag <= 0;\nloop invariant i29: flag >= 1;\nloop invariant i30: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i31: flag == 0 || flag == 1;\nloop invariant i32: (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0);\nloop invariant i33: x <= 99;\nloop invariant i34: y <= 0;\nloop invariant i35: y >= -50;\nloop invariant i36: x < y ==> y == -2;\nloop invariant i37: x >= y ==> x == 99;\nloop invariant i38: 0 <= x <= 50;\nloop invariant i39: -1 <= y <= 0;\nloop invariant i40: y <= (x - 1) * x / 2;\nloop invariant i41: 0 <= y < 50;\nloop invariant i42: x <= 50;\nloop invariant i43: y <= 50;\nloop invariant i44: x + y >= 0;\nloop invariant i45: x + y <= 100;\nloop invariant i46: 0 <= flag <= 1;\nloop invariant i47: (y=-2) ==> flag=1;\nloop invariant i48: flag<1 ==> x <= 50;\nloop invariant i49: flag<1 ==> (1 <= y <= 50);\nloop invariant i50: flag<1 ==> x <= y-1;\nloop invariant i51: flag<1 ==> x >= -1;\nloop invariant i52: flag<1 ==> y >= -1;\nloop invariant i53: flag<1 ==> x <= y+1;\nloop invariant i54: flag<1 ==> x >= y-1;\nloop invariant i55: y >= 0;\nloop invariant i56: 0 <= x <= 99;\nloop invariant i57: 0 <= y <= 2;\nloop invariant i58: 0 <= y <= 50;\nloop invariant i59: -50 <= x <= 100;\nloop invariant i60: flag == 0 ==> x == 0;\nloop invariant i61: 0 <= y < 0;\nloop invariant i62: x >= 99;\nloop invariant i63: x <= y;\nloop invariant i64: x + y <= 98;\nloop invariant i65: y - x >= -1;\nloop invariant i66: y - x <= 50;\nloop invariant i67: (y < 0) ==> (flag == 1);\nloop invariant i68: (flag < 1) ==> (x < 50);\nloop invariant i69: (x < 50) ==> (y > 0);\nloop invariant i70: (flag < 1) ==> (y >= 0);\nloop invariant i71: (flag < 1) ==> (y <= 100);\nloop invariant i72: (flag < 1) ==> (x + y >= 0);\nloop invariant i73: (flag < 1) ==> (x + y <= 98);\nloop invariant i74: (flag < 1) ==> (y - x >= -1);\nloop invariant i75: (flag < 1) ==> (y - x <= 50);\nloop invariant i76: (flag < 1) ==> (flag == 0);\nloop invariant i77: -2 <= y <= 1;\nloop invariant i78: (flag == 0) ==> (x < 50 && y <= 1);\nloop invariant i79: (flag == 1) ==> (x >= 50 && y == -2);\nloop invariant i80: (flag == 0) ==> (x == 0 && y == 0);\nloop invariant i81: (flag == 1) ==> (x == 99 && y == -2);\nloop invariant i82: (flag == 0) ==> (x < y);\nloop invariant i83: (flag == 1) ==> (x >= y);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
            "combined_annotation_num_solver_calls": 9,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: 0 <= y <= 100000;\n\n\n\n\nloop invariant i6: x >= y;\n\nloop invariant i8: flag == 1 ==> x == 99;\nloop invariant i9: flag == 1 ==> y == -2;\nloop invariant i10: flag == 1 ==> flag == 1;\nloop invariant i11: flag == 1 ==> x >= y;\nloop invariant i12: flag == 1 ==> y < 0;\nloop invariant i13: flag < 1 ==> x == 0;\nloop invariant i14: flag < 1 ==> y == 0;\nloop invariant i15: flag < 1 ==> flag == 0;\nloop invariant i16: flag < 1 ==> x >= y;\nloop invariant i17: flag < 1 ==> y >= 0;\nloop invariant i18: flag < 1 ==> x < 50;\nloop invariant i19: flag < 1 ==> y < 50;\nloop invariant i20: flag < 1 ==> x < 100;\nloop invariant i21: flag < 1 ==> y < 100;\nloop invariant i22: y >= -1;\nloop invariant i23: x >= 0;\nloop invariant i24: flag < 1;\nloop invariant i25: flag >= 0;\nloop invariant i26: x <= 100;\nloop invariant i27: y <= 100;\nloop invariant i28: flag <= 0;\n\nloop invariant i30: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i31: flag == 0 || flag == 1;\nloop invariant i32: (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0);\nloop invariant i33: x <= 99;\nloop invariant i34: y <= 0;\nloop invariant i35: y >= -50;\nloop invariant i36: x < y ==> y == -2;\nloop invariant i37: x >= y ==> x == 99;\nloop invariant i38: 0 <= x <= 50;\nloop invariant i39: -1 <= y <= 0;\nloop invariant i40: y <= (x - 1) * x / 2;\nloop invariant i41: 0 <= y < 50;\nloop invariant i42: x <= 50;\nloop invariant i43: y <= 50;\nloop invariant i44: x + y >= 0;\nloop invariant i45: x + y <= 100;\nloop invariant i46: 0 <= flag <= 1;\n\nloop invariant i48: flag<1 ==> x <= 50;\nloop invariant i49: flag<1 ==> (1 <= y <= 50);\nloop invariant i50: flag<1 ==> x <= y-1;\nloop invariant i51: flag<1 ==> x >= -1;\nloop invariant i52: flag<1 ==> y >= -1;\nloop invariant i53: flag<1 ==> x <= y+1;\nloop invariant i54: flag<1 ==> x >= y-1;\nloop invariant i55: y >= 0;\nloop invariant i56: 0 <= x <= 99;\nloop invariant i57: 0 <= y <= 2;\nloop invariant i58: 0 <= y <= 50;\nloop invariant i59: -50 <= x <= 100;\nloop invariant i60: flag == 0 ==> x == 0;\nloop invariant i61: 0 <= y < 0;\nloop invariant i62: x >= 99;\nloop invariant i63: x <= y;\nloop invariant i64: x + y <= 98;\nloop invariant i65: y - x >= -1;\nloop invariant i66: y - x <= 50;\nloop invariant i67: (y < 0) ==> (flag == 1);\nloop invariant i68: (flag < 1) ==> (x < 50);\nloop invariant i69: (x < 50) ==> (y > 0);\nloop invariant i70: (flag < 1) ==> (y >= 0);\nloop invariant i71: (flag < 1) ==> (y <= 100);\nloop invariant i72: (flag < 1) ==> (x + y >= 0);\nloop invariant i73: (flag < 1) ==> (x + y <= 98);\nloop invariant i74: (flag < 1) ==> (y - x >= -1);\nloop invariant i75: (flag < 1) ==> (y - x <= 50);\nloop invariant i76: (flag < 1) ==> (flag == 0);\nloop invariant i77: -2 <= y <= 1;\nloop invariant i78: (flag == 0) ==> (x < 50 && y <= 1);\nloop invariant i79: (flag == 1) ==> (x >= 50 && y == -2);\nloop invariant i80: (flag == 0) ==> (x == 0 && y == 0);\nloop invariant i81: (flag == 1) ==> (x == 99 && y == -2);\nloop invariant i82: (flag == 0) ==> (x < y);\nloop invariant i83: (flag == 1) ==> (x >= y);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    while (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT;\nloop invariant x - y <= 0;\nloop invariant x == -50;\nloop invariant y == unknown_int();\nloop invariant x + y >= 0;\nloop invariant x + y <= LARGE_INT;\nloop invariant x == x + y;\nloop invariant y == y + 1;\nloop invariant x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant x - y <= 0 ==> x + y <= LARGE_INT;\nloop invariant x == -50 ==> y == unknown_int();\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x + y <= LARGE_INT;\nloop invariant x == x + y ==> y == unknown_int();\nloop invariant y == y + 1 ==> x + y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> y == unknown_int();\nloop invariant x == x + y ==> y == unknown_int();\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\nloop invariant x == -50 ==> x + y <= LARGE_INT;\nloop invariant x == x + y ==> x + y <= LARGE_INT;\nloop invariant y == y + 1 ==> x + y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant x - y <= 0 ==> x + y <= LARGE_INT;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant x < 0 ==> x + y <= 0;\nloop invariant x < 0 ==> y > 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x >= 0 ==> y <= LARGE_INT;\nloop invariant x >= 0 ==> y == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y < LARGE_INT; loop invariant -50 <= x < 0; loop invariant x + y < LARGE_INT; loop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant -50 <= x;\nloop invariant x <= y;\nloop invariant x + y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x == -50 + y * unknown_int();\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant y <= LARGE_INT;\nloop invariant x < unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= (LARGE_INT - LARGE_INT + 1);\nloop invariant x + y >= 0;\nloop invariant y > 0 ==> y <= LARGE_INT;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= 0;\nloop invariant x == -50 + y;\nloop invariant y > -50;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant y > 0 ==> x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant y <= 0 ==> x >= -50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= y + 50;\nloop invariant x >= -50;\nloop invariant x >= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x < -50;\nloop invariant y >= -1000;\nloop invariant y < LARGE_INT;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x < (y - 1) * y / 2;\nloop invariant x + y >= -50;\nloop invariant x + y < -50;\nloop invariant x + y >= 0;\nloop invariant x + y < 0;\nloop invariant x + y >= 1;\nloop invariant x + y < 1;\nloop invariant x + y >= 2;\nloop invariant x + y < 2;\nloop invariant x + y >= 3;\nloop invariant x + y < 3;\nloop invariant x + y >= 4;\nloop invariant x + y < 4;\nloop invariant x + y >= 5;\nloop invariant x + y < 5;\nloop invariant x + y >= 6;\nloop invariant x + y < 6;\nloop invariant x + y >= 7;\nloop invariant x + y < 7;\nloop invariant x + y >= 8;\nloop invariant x + y < 8;\nloop invariant x + y >= 9;\nloop invariant x + y < 9;\nloop invariant x + y >= 10;\nloop invariant x + y < 10;\nloop invariant x + y >= 11;\nloop invariant x + y < 11;\nloop invariant x + y >= 12;\nloop invariant x + y < 12;\nloop invariant x + y >= 13;\nloop invariant x + y < 13;\nloop invariant x + y >= 14;\nloop invariant x + y < 14;\nloop invariant x + y >= 15;\nloop invariant x + y < 15;\nloop invariant x + y >= 16;\nloop invariant x + y < 16;\nloop invariant x + y >= 17;\nloop invariant x + y < 17;\nloop invariant x + y >= 18;\nloop invariant x + y < 18;\nloop invariant x + y >= 19;\nloop invariant x + y < 19;\nloop invariant x + y >= 20;\nloop invariant x + y < 20;\nloop invariant x + y >= 21;\nloop invariant x + y < 21;\nloop invariant x + y >= 22;\nloop invariant x + y < 22;\nloop invariant x + y >= 23;\nloop invariant x + y < 23;\nloop invariant x + y >= 24;\nloop invariant x + y < 24;\nloop invariant x + y >= 25;\nloop invariant x + y < 25;\nloop invariant x + y >= 26;\nloop invariant x + y < 26;\nloop invariant x + y >= 27;\nloop invariant x + y < 27;\nloop invariant x + y >= 28;\nloop invariant x + y < 28;\nloop invariant x + y >= 29;\nloop invariant x + y < 29;\nloop invariant x + y >= 30;\nloop invariant x + y < 30;\nloop invariant x + y >= 31;\nloop invariant x + y < 31;\nloop invariant x + y >= 32;\nloop invariant x + y < 32;\nloop invariant x + y >= 33;\nloop invariant x + y < 33;\nloop invariant x + y >= 34;\nloop invariant x + y < 34;\nloop invariant x + y >= 35;\nloop invariant x + y < 35;\nloop invariant x + y >= 36;\nloop invariant x + y < 36;\nloop invariant x + y >= 37;\nloop invariant x + y < 37;\nloop invariant x + y >= 38;\nloop invariant x + y < 38;\nloop invariant x + y >= 39;\nloop invariant x + y < 39;\nloop invariant x + y >= 40;\nloop invariant x + y < 40;\nloop invariant x + y >= 41;\nloop invariant x + y < 41;\nloop invariant x + y >= 42;\nloop invariant x + y < 42;\nloop invariant x + y >= 43;\nloop invariant x + y < 43;\nloop invariant x + y >= 44;\nloop invariant x + y < 44;\nloop invariant x + y >= 45;\nloop invariant x + y < 45;\nloop invariant x + y >= 46;\nloop invariant x + y < 46;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\nloop invariant x >= (y * y + y) / 2 - 50;\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= LARGE_INT; loop invariant -1000 < y < LARGE_INT; loop invariant x >= -50; loop invariant x >= y; loop invariant y > 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y);\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 18,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT;\nloop invariant x - y <= 0;\nloop invariant x == -50;\nloop invariant y == unknown_int();\nloop invariant x + y >= 0;\nloop invariant x + y <= LARGE_INT;\nloop invariant x == x + y;\nloop invariant y == y + 1;\nloop invariant x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant x - y <= 0 ==> x + y <= LARGE_INT;\nloop invariant x == -50 ==> y == unknown_int();\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x + y <= LARGE_INT;\nloop invariant x == x + y ==> y == unknown_int();\nloop invariant y == y + 1 ==> x + y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> y == unknown_int();\nloop invariant x == x + y ==> y == unknown_int();\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\nloop invariant x == -50 ==> x + y <= LARGE_INT;\nloop invariant x == x + y ==> x + y <= LARGE_INT;\nloop invariant y == y + 1 ==> x + y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant x - y <= 0 ==> x + y <= LARGE_INT;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: x - y >= LARGE_INT ==> x + y <= LARGE_INT;\n\n\n\n\nloop invariant i16: x - y >= LARGE_INT ==> x == x + y;\n\n\n\nloop invariant i20: y == y + 1 ==> x + y <= LARGE_INT;\n\n\n\n\nloop invariant i25: y == y + 1 ==> x == -50;\nloop invariant i26: x - y >= LARGE_INT ==> x == -50;\n\n\nloop invariant i29: y == y + 1 ==> x == x + y;\nloop invariant i30: x == x + y ==> x + y <= LARGE_INT;\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant x < 0 ==> x + y <= 0;\nloop invariant x < 0 ==> y > 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x >= 0 ==> y <= LARGE_INT;\nloop invariant x >= 0 ==> y == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y <= LARGE_INT is partially proven to be inductive.\nloop invariant x < 0 ==> x + y <= 0 is neither established nor preserved.\nloop invariant x < 0 ==> y > 0 is preserved but not established.\nloop invariant x >= 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x >= 0 ==> y <= LARGE_INT is partially proven to be inductive.\nloop invariant x >= 0 ==> y == 0 is established but not preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y < LARGE_INT; loop invariant -50 <= x < 0; loop invariant x + y < LARGE_INT; loop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y < LARGE_INT; loop invariant -50 <= x < 0; loop invariant x + y < LARGE_INT; loop invariant y > 0 is neither established nor preserved.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is neither established nor preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant -50 <= x;\nloop invariant x <= y;\nloop invariant x + y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x == -50 + y * unknown_int();\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant y <= LARGE_INT;\nloop invariant x < unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= (LARGE_INT - LARGE_INT + 1);\nloop invariant x + y >= 0;\nloop invariant y > 0 ==> y <= LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is neither established nor preserved.\nloop invariant -50 <= x <= (LARGE_INT - LARGE_INT + 1) is established but not preserved.\nloop invariant x + y >= 0 is preserved but not established.\nloop invariant y > 0 ==> y <= LARGE_INT is partially proven to be inductive.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= 0;\nloop invariant x == -50 + y;\nloop invariant y > -50;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant -50 <= x <= 0 is established but not preserved.\nloop invariant x == -50 + y is neither established nor preserved.\nloop invariant y > -50 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant y > 0 ==> x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant y <= 0 ==> x >= -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is neither established nor preserved.\nloop invariant x >= -50 + y * (LARGE_INT - y) / 2 is neither established nor preserved.\nloop invariant y > 0 ==> x >= -50 + y * (LARGE_INT - y) / 2 is partially proven to be inductive.\nloop invariant y <= 0 ==> x >= -50 is partially proven to be inductive.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 1000000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= y + 50;\nloop invariant x >= -50;\nloop invariant x >= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant x >= y + 50 is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 53,
                    "annotations": "```\n/*@\nloop invariant 0 <= x < -50;\nloop invariant y >= -1000;\nloop invariant y < LARGE_INT;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x < (y - 1) * y / 2;\nloop invariant x + y >= -50;\nloop invariant x + y < -50;\nloop invariant x + y >= 0;\nloop invariant x + y < 0;\nloop invariant x + y >= 1;\nloop invariant x + y < 1;\nloop invariant x + y >= 2;\nloop invariant x + y < 2;\nloop invariant x + y >= 3;\nloop invariant x + y < 3;\nloop invariant x + y >= 4;\nloop invariant x + y < 4;\nloop invariant x + y >= 5;\nloop invariant x + y < 5;\nloop invariant x + y >= 6;\nloop invariant x + y < 6;\nloop invariant x + y >= 7;\nloop invariant x + y < 7;\nloop invariant x + y >= 8;\nloop invariant x + y < 8;\nloop invariant x + y >= 9;\nloop invariant x + y < 9;\nloop invariant x + y >= 10;\nloop invariant x + y < 10;\nloop invariant x + y >= 11;\nloop invariant x + y < 11;\nloop invariant x + y >= 12;\nloop invariant x + y < 12;\nloop invariant x + y >= 13;\nloop invariant x + y < 13;\nloop invariant x + y >= 14;\nloop invariant x + y < 14;\nloop invariant x + y >= 15;\nloop invariant x + y < 15;\nloop invariant x + y >= 16;\nloop invariant x + y < 16;\nloop invariant x + y >= 17;\nloop invariant x + y < 17;\nloop invariant x + y >= 18;\nloop invariant x + y < 18;\nloop invariant x + y >= 19;\nloop invariant x + y < 19;\nloop invariant x + y >= 20;\nloop invariant x + y < 20;\nloop invariant x + y >= 21;\nloop invariant x + y < 21;\nloop invariant x + y >= 22;\nloop invariant x + y < 22;\nloop invariant x + y >= 23;\nloop invariant x + y < 23;\nloop invariant x + y >= 24;\nloop invariant x + y < 24;\nloop invariant x + y >= 25;\nloop invariant x + y < 25;\nloop invariant x + y >= 26;\nloop invariant x + y < 26;\nloop invariant x + y >= 27;\nloop invariant x + y < 27;\nloop invariant x + y >= 28;\nloop invariant x + y < 28;\nloop invariant x + y >= 29;\nloop invariant x + y < 29;\nloop invariant x + y >= 30;\nloop invariant x + y < 30;\nloop invariant x + y >= 31;\nloop invariant x + y < 31;\nloop invariant x + y >= 32;\nloop invariant x + y < 32;\nloop invariant x + y >= 33;\nloop invariant x + y < 33;\nloop invariant x + y >= 34;\nloop invariant x + y < 34;\nloop invariant x + y >= 35;\nloop invariant x + y < 35;\nloop invariant x + y >= 36;\nloop invariant x + y < 36;\nloop invariant x + y >= 37;\nloop invariant x + y < 37;\nloop invariant x + y >= 38;\nloop invariant x + y < 38;\nloop invariant x + y >= 39;\nloop invariant x + y < 39;\nloop invariant x + y >= 40;\nloop invariant x + y < 40;\nloop invariant x + y >= 41;\nloop invariant x + y < 41;\nloop invariant x + y >= 42;\nloop invariant x + y < 42;\nloop invariant x + y >= 43;\nloop invariant x + y < 43;\nloop invariant x + y >= 44;\nloop invariant x + y < 44;\nloop invariant x + y >= 45;\nloop invariant x + y < 45;\nloop invariant x + y >= 46;\nloop invariant x + y < 46;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x < -50 is preserved but not established.\nloop invariant y >= -1000 is partially proven to be inductive.\nloop invariant y < LARGE_INT is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x < (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x + y < 0 is partially proven to be inductive.\nloop invariant x + y >= 1 is partially proven to be inductive.\nloop invariant x + y < 1 is partially proven to be inductive.\nloop invariant x + y >= 2 is partially proven to be inductive.\nloop invariant x + y < 2 is partially proven to be inductive.\nloop invariant x + y >= 3 is partially proven to be inductive.\nloop invariant x + y < 3 is partially proven to be inductive.\nloop invariant x + y >= 4 is partially proven to be inductive.\nloop invariant x + y < 4 is partially proven to be inductive.\nloop invariant x + y >= 5 is partially proven to be inductive.\nloop invariant x + y < 5 is partially proven to be inductive.\nloop invariant x + y >= 6 is partially proven to be inductive.\nloop invariant x + y < 6 is partially proven to be inductive.\nloop invariant x + y >= 7 is partially proven to be inductive.\nloop invariant x + y < 7 is partially proven to be inductive.\nloop invariant x + y >= 8 is partially proven to be inductive.\nloop invariant x + y < 8 is partially proven to be inductive.\nloop invariant x + y >= 9 is partially proven to be inductive.\nloop invariant x + y < 9 is partially proven to be inductive.\nloop invariant x + y >= 10 is partially proven to be inductive.\nloop invariant x + y < 10 is partially proven to be inductive.\nloop invariant x + y >= 11 is partially proven to be inductive.\nloop invariant x + y < 11 is partially proven to be inductive.\nloop invariant x + y >= 12 is partially proven to be inductive.\nloop invariant x + y < 12 is partially proven to be inductive.\nloop invariant x + y >= 13 is partially proven to be inductive.\nloop invariant x + y < 13 is partially proven to be inductive.\nloop invariant x + y >= 14 is partially proven to be inductive.\nloop invariant x + y < 14 is partially proven to be inductive.\nloop invariant x + y >= 15 is partially proven to be inductive.\nloop invariant x + y < 15 is partially proven to be inductive.\nloop invariant x + y >= 16 is partially proven to be inductive.\nloop invariant x + y < 16 is partially proven to be inductive.\nloop invariant x + y >= 17 is partially proven to be inductive.\nloop invariant x + y < 17 is partially proven to be inductive.\nloop invariant x + y >= 18 is partially proven to be inductive.\nloop invariant x + y < 18 is partially proven to be inductive.\nloop invariant x + y >= 19 is partially proven to be inductive.\nloop invariant x + y < 19 is partially proven to be inductive.\nloop invariant x + y >= 20 is partially proven to be inductive.\nloop invariant x + y < 20 is partially proven to be inductive.\nloop invariant x + y >= 21 is partially proven to be inductive.\nloop invariant x + y < 21 is partially proven to be inductive.\nloop invariant x + y >= 22 is partially proven to be inductive.\nloop invariant x + y < 22 is partially proven to be inductive.\nloop invariant x + y >= 23 is partially proven to be inductive.\nloop invariant x + y < 23 is partially proven to be inductive.\nloop invariant x + y >= 24 is partially proven to be inductive.\nloop invariant x + y < 24 is partially proven to be inductive.\nloop invariant x + y >= 25 is partially proven to be inductive.\nloop invariant x + y < 25 is partially proven to be inductive.\nloop invariant x + y >= 26 is partially proven to be inductive.\nloop invariant x + y < 26 is partially proven to be inductive.\nloop invariant x + y >= 27 is partially proven to be inductive.\nloop invariant x + y < 27 is partially proven to be inductive.\nloop invariant x + y >= 28 is partially proven to be inductive.\nloop invariant x + y < 28 is partially proven to be inductive.\nloop invariant x + y >= 29 is partially proven to be inductive.\nloop invariant x + y < 29 is partially proven to be inductive.\nloop invariant x + y >= 30 is partially proven to be inductive.\nloop invariant x + y < 30 is partially proven to be inductive.\nloop invariant x + y >= 31 is partially proven to be inductive.\nloop invariant x + y < 31 is partially proven to be inductive.\nloop invariant x + y >= 32 is partially proven to be inductive.\nloop invariant x + y < 32 is partially proven to be inductive.\nloop invariant x + y >= 33 is partially proven to be inductive.\nloop invariant x + y < 33 is partially proven to be inductive.\nloop invariant x + y >= 34 is partially proven to be inductive.\nloop invariant x + y < 34 is partially proven to be inductive.\nloop invariant x + y >= 35 is partially proven to be inductive.\nloop invariant x + y < 35 is partially proven to be inductive.\nloop invariant x + y >= 36 is partially proven to be inductive.\nloop invariant x + y < 36 is partially proven to be inductive.\nloop invariant x + y >= 37 is partially proven to be inductive.\nloop invariant x + y < 37 is partially proven to be inductive.\nloop invariant x + y >= 38 is partially proven to be inductive.\nloop invariant x + y < 38 is partially proven to be inductive.\nloop invariant x + y >= 39 is partially proven to be inductive.\nloop invariant x + y < 39 is partially proven to be inductive.\nloop invariant x + y >= 40 is partially proven to be inductive.\nloop invariant x + y < 40 is partially proven to be inductive.\nloop invariant x + y >= 41 is partially proven to be inductive.\nloop invariant x + y < 41 is partially proven to be inductive.\nloop invariant x + y >= 42 is partially proven to be inductive.\nloop invariant x + y < 42 is partially proven to be inductive.\nloop invariant x + y >= 43 is partially proven to be inductive.\nloop invariant x + y < 43 is partially proven to be inductive.\nloop invariant x + y >= 44 is partially proven to be inductive.\nloop invariant x + y < 44 is partially proven to be inductive.\nloop invariant x + y >= 45 is partially proven to be inductive.\nloop invariant x + y < 45 is partially proven to be inductive.\nloop invariant x + y >= 46 is partially proven to be inductive.\nloop invariant x + y < 46 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: y >= -1000;\n\n\nloop invariant i5: x < (y - 1) * y / 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\nloop invariant x >= (y * y + y) / 2 - 50;\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= -50 + y is preserved but not established.\nloop invariant x >= (y * y + y) / 2 - 50 is partially proven to be inductive.\nloop invariant y > 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= LARGE_INT; loop invariant -1000 < y < LARGE_INT; loop invariant x >= -50; loop invariant x >= y; loop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= LARGE_INT; loop invariant -1000 < y < LARGE_INT; loop invariant x >= -50; loop invariant x >= y; loop invariant y > 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y);\nloop invariant i2: 0 <= x;\nloop invariant i3: 0 <= y <= LARGE_INT;\nloop invariant i4: x - y >= LARGE_INT;\nloop invariant i5: x - y <= 0;\nloop invariant i6: x == -50;\nloop invariant i7: y == unknown_int();\nloop invariant i8: x + y >= 0;\nloop invariant i9: x + y <= LARGE_INT;\nloop invariant i10: x == x + y;\nloop invariant i11: y == y + 1;\nloop invariant i12: x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant i13: x - y <= 0 ==> x + y <= LARGE_INT;\nloop invariant i14: x == -50 ==> y == unknown_int();\nloop invariant i15: x == x + y ==> y == y + 1;\nloop invariant i16: y == y + 1 ==> y == unknown_int();\nloop invariant i17: x - y >= LARGE_INT ==> x == x + y;\nloop invariant i18: x - y <= 0 ==> x == x + y;\nloop invariant i19: x == -50 ==> x + y <= LARGE_INT;\nloop invariant i20: x == x + y ==> y == unknown_int();\nloop invariant i21: y == y + 1 ==> x + y <= LARGE_INT;\nloop invariant i22: x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant i23: x - y <= 0 ==> y == unknown_int();\nloop invariant i24: x == -50 ==> x == x + y;\nloop invariant i25: x == x + y ==> x == -50;\nloop invariant i26: y == y + 1 ==> x == -50;\nloop invariant i27: x - y >= LARGE_INT ==> x == -50;\nloop invariant i28: x - y <= 0 ==> x == -50;\nloop invariant i29: x == -50 ==> y == y + 1;\nloop invariant i30: y == y + 1 ==> x == x + y;\nloop invariant i31: x == x + y ==> x + y <= LARGE_INT;\nloop invariant i32: 0 <= y;\nloop invariant i33: x >= -50;\nloop invariant i34: y <= LARGE_INT;\nloop invariant i35: x < 0 ==> x + y <= 0;\nloop invariant i36: x < 0 ==> y > 0;\nloop invariant i37: x >= 0 ==> x == 0;\nloop invariant i38: x >= 0 ==> y <= LARGE_INT;\nloop invariant i39: x >= 0 ==> y == 0;\nloop invariant i40: 0 <= y < LARGE_INT; loop invariant -50 <= x < 0; loop invariant x + y < LARGE_INT; loop invariant y > 0;\nloop invariant i41: 0 <= y <= 100000;\nloop invariant i42: -50 <= x;\nloop invariant i43: x <= y;\nloop invariant i44: y >= unknown_int();\nloop invariant i45: y > 0;\nloop invariant i46: x <= LARGE_INT;\nloop invariant i47: x == -50 + y * unknown_int();\nloop invariant i48: x < 0;\nloop invariant i49: x < unknown_int();\nloop invariant i50: -50 <= x <= (LARGE_INT - LARGE_INT + 1);\nloop invariant i51: y > 0 ==> y <= LARGE_INT;\nloop invariant i52: -50 <= x <= 0;\nloop invariant i53: x == -50 + y;\nloop invariant i54: y > -50;\nloop invariant i55: y >= 0;\nloop invariant i56: x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant i57: y > 0 ==> x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant i58: y <= 0 ==> x >= -50;\nloop invariant i59: 0 <= y <= 1000000;\nloop invariant i60: x >= (1 + (y - 1) * y / 2);\nloop invariant i61: x >= y + 50;\nloop invariant i62: x >= y;\nloop invariant i63: 0 <= x < -50;\nloop invariant i64: y >= -1000;\nloop invariant i65: y < LARGE_INT;\nloop invariant i66: x >= (y - 1) * y / 2;\nloop invariant i67: x < (y - 1) * y / 2;\nloop invariant i68: x + y >= -50;\nloop invariant i69: x + y < -50;\nloop invariant i70: x + y < 0;\nloop invariant i71: x + y >= 1;\nloop invariant i72: x + y < 1;\nloop invariant i73: x + y >= 2;\nloop invariant i74: x + y < 2;\nloop invariant i75: x + y >= 3;\nloop invariant i76: x + y < 3;\nloop invariant i77: x + y >= 4;\nloop invariant i78: x + y < 4;\nloop invariant i79: x + y >= 5;\nloop invariant i80: x + y < 5;\nloop invariant i81: x + y >= 6;\nloop invariant i82: x + y < 6;\nloop invariant i83: x + y >= 7;\nloop invariant i84: x + y < 7;\nloop invariant i85: x + y >= 8;\nloop invariant i86: x + y < 8;\nloop invariant i87: x + y >= 9;\nloop invariant i88: x + y < 9;\nloop invariant i89: x + y >= 10;\nloop invariant i90: x + y < 10;\nloop invariant i91: x + y >= 11;\nloop invariant i92: x + y < 11;\nloop invariant i93: x + y >= 12;\nloop invariant i94: x + y < 12;\nloop invariant i95: x + y >= 13;\nloop invariant i96: x + y < 13;\nloop invariant i97: x + y >= 14;\nloop invariant i98: x + y < 14;\nloop invariant i99: x + y >= 15;\nloop invariant i100: x + y < 15;\nloop invariant i101: x + y >= 16;\nloop invariant i102: x + y < 16;\nloop invariant i103: x + y >= 17;\nloop invariant i104: x + y < 17;\nloop invariant i105: x + y >= 18;\nloop invariant i106: x + y < 18;\nloop invariant i107: x + y >= 19;\nloop invariant i108: x + y < 19;\nloop invariant i109: x + y >= 20;\nloop invariant i110: x + y < 20;\nloop invariant i111: x + y >= 21;\nloop invariant i112: x + y < 21;\nloop invariant i113: x + y >= 22;\nloop invariant i114: x + y < 22;\nloop invariant i115: x + y >= 23;\nloop invariant i116: x + y < 23;\nloop invariant i117: x + y >= 24;\nloop invariant i118: x + y < 24;\nloop invariant i119: x + y >= 25;\nloop invariant i120: x + y < 25;\nloop invariant i121: x + y >= 26;\nloop invariant i122: x + y < 26;\nloop invariant i123: x + y >= 27;\nloop invariant i124: x + y < 27;\nloop invariant i125: x + y >= 28;\nloop invariant i126: x + y < 28;\nloop invariant i127: x + y >= 29;\nloop invariant i128: x + y < 29;\nloop invariant i129: x + y >= 30;\nloop invariant i130: x + y < 30;\nloop invariant i131: x + y >= 31;\nloop invariant i132: x + y < 31;\nloop invariant i133: x + y >= 32;\nloop invariant i134: x + y < 32;\nloop invariant i135: x + y >= 33;\nloop invariant i136: x + y < 33;\nloop invariant i137: x + y >= 34;\nloop invariant i138: x + y < 34;\nloop invariant i139: x + y >= 35;\nloop invariant i140: x + y < 35;\nloop invariant i141: x + y >= 36;\nloop invariant i142: x + y < 36;\nloop invariant i143: x + y >= 37;\nloop invariant i144: x + y < 37;\nloop invariant i145: x + y >= 38;\nloop invariant i146: x + y < 38;\nloop invariant i147: x + y >= 39;\nloop invariant i148: x + y < 39;\nloop invariant i149: x + y >= 40;\nloop invariant i150: x + y < 40;\nloop invariant i151: x + y >= 41;\nloop invariant i152: x + y < 41;\nloop invariant i153: x + y >= 42;\nloop invariant i154: x + y < 42;\nloop invariant i155: x + y >= 43;\nloop invariant i156: x + y < 43;\nloop invariant i157: x + y >= 44;\nloop invariant i158: x + y < 44;\nloop invariant i159: x + y >= 45;\nloop invariant i160: x + y < 45;\nloop invariant i161: x + y >= 46;\nloop invariant i162: x + y < 46;\nloop invariant i163: x >= -50 + y;\nloop invariant i164: x >= (y * y + y) / 2 - 50;\nloop invariant i165: 0 <= x <= LARGE_INT; loop invariant -1000 < y < LARGE_INT; loop invariant x >= -50; loop invariant x >= y; loop invariant y > 0;\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 11,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y);\nloop invariant i2: 0 <= x;\nloop invariant i3: 0 <= y <= LARGE_INT;\nloop invariant i4: x - y >= LARGE_INT;\nloop invariant i5: x - y <= 0;\nloop invariant i6: x == -50;\n\nloop invariant i8: x + y >= 0;\nloop invariant i9: x + y <= LARGE_INT;\nloop invariant i10: x == x + y;\nloop invariant i11: y == y + 1;\nloop invariant i12: x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant i13: x - y <= 0 ==> x + y <= LARGE_INT;\n\nloop invariant i15: x == x + y ==> y == y + 1;\n\nloop invariant i17: x - y >= LARGE_INT ==> x == x + y;\nloop invariant i18: x - y <= 0 ==> x == x + y;\nloop invariant i19: x == -50 ==> x + y <= LARGE_INT;\n\nloop invariant i21: y == y + 1 ==> x + y <= LARGE_INT;\n\n\nloop invariant i24: x == -50 ==> x == x + y;\nloop invariant i25: x == x + y ==> x == -50;\nloop invariant i26: y == y + 1 ==> x == -50;\nloop invariant i27: x - y >= LARGE_INT ==> x == -50;\nloop invariant i28: x - y <= 0 ==> x == -50;\nloop invariant i29: x == -50 ==> y == y + 1;\nloop invariant i30: y == y + 1 ==> x == x + y;\nloop invariant i31: x == x + y ==> x + y <= LARGE_INT;\nloop invariant i32: 0 <= y;\nloop invariant i33: x >= -50;\nloop invariant i34: y <= LARGE_INT;\nloop invariant i35: x < 0 ==> x + y <= 0;\nloop invariant i36: x < 0 ==> y > 0;\nloop invariant i37: x >= 0 ==> x == 0;\nloop invariant i38: x >= 0 ==> y <= LARGE_INT;\nloop invariant i39: x >= 0 ==> y == 0;\nloop invariant i40: 0 <= y < LARGE_INT; loop invariant -50 <= x < 0; loop invariant x + y < LARGE_INT; loop invariant y > 0;\nloop invariant i41: 0 <= y <= 100000;\nloop invariant i42: -50 <= x;\nloop invariant i43: x <= y;\n\nloop invariant i45: y > 0;\nloop invariant i46: x <= LARGE_INT;\n\nloop invariant i48: x < 0;\n\nloop invariant i50: -50 <= x <= (LARGE_INT - LARGE_INT + 1);\nloop invariant i51: y > 0 ==> y <= LARGE_INT;\nloop invariant i52: -50 <= x <= 0;\nloop invariant i53: x == -50 + y;\nloop invariant i54: y > -50;\nloop invariant i55: y >= 0;\nloop invariant i56: x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant i57: y > 0 ==> x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant i58: y <= 0 ==> x >= -50;\nloop invariant i59: 0 <= y <= 1000000;\nloop invariant i60: x >= (1 + (y - 1) * y / 2);\nloop invariant i61: x >= y + 50;\nloop invariant i62: x >= y;\nloop invariant i63: 0 <= x < -50;\nloop invariant i64: y >= -1000;\nloop invariant i65: y < LARGE_INT;\nloop invariant i66: x >= (y - 1) * y / 2;\nloop invariant i67: x < (y - 1) * y / 2;\nloop invariant i68: x + y >= -50;\nloop invariant i69: x + y < -50;\nloop invariant i70: x + y < 0;\nloop invariant i71: x + y >= 1;\nloop invariant i72: x + y < 1;\nloop invariant i73: x + y >= 2;\nloop invariant i74: x + y < 2;\nloop invariant i75: x + y >= 3;\nloop invariant i76: x + y < 3;\nloop invariant i77: x + y >= 4;\nloop invariant i78: x + y < 4;\nloop invariant i79: x + y >= 5;\nloop invariant i80: x + y < 5;\nloop invariant i81: x + y >= 6;\nloop invariant i82: x + y < 6;\nloop invariant i83: x + y >= 7;\nloop invariant i84: x + y < 7;\nloop invariant i85: x + y >= 8;\nloop invariant i86: x + y < 8;\nloop invariant i87: x + y >= 9;\nloop invariant i88: x + y < 9;\nloop invariant i89: x + y >= 10;\nloop invariant i90: x + y < 10;\nloop invariant i91: x + y >= 11;\nloop invariant i92: x + y < 11;\nloop invariant i93: x + y >= 12;\nloop invariant i94: x + y < 12;\nloop invariant i95: x + y >= 13;\nloop invariant i96: x + y < 13;\nloop invariant i97: x + y >= 14;\nloop invariant i98: x + y < 14;\nloop invariant i99: x + y >= 15;\nloop invariant i100: x + y < 15;\nloop invariant i101: x + y >= 16;\nloop invariant i102: x + y < 16;\nloop invariant i103: x + y >= 17;\nloop invariant i104: x + y < 17;\nloop invariant i105: x + y >= 18;\nloop invariant i106: x + y < 18;\nloop invariant i107: x + y >= 19;\nloop invariant i108: x + y < 19;\nloop invariant i109: x + y >= 20;\nloop invariant i110: x + y < 20;\nloop invariant i111: x + y >= 21;\nloop invariant i112: x + y < 21;\nloop invariant i113: x + y >= 22;\nloop invariant i114: x + y < 22;\nloop invariant i115: x + y >= 23;\nloop invariant i116: x + y < 23;\nloop invariant i117: x + y >= 24;\nloop invariant i118: x + y < 24;\nloop invariant i119: x + y >= 25;\nloop invariant i120: x + y < 25;\nloop invariant i121: x + y >= 26;\nloop invariant i122: x + y < 26;\nloop invariant i123: x + y >= 27;\nloop invariant i124: x + y < 27;\nloop invariant i125: x + y >= 28;\nloop invariant i126: x + y < 28;\nloop invariant i127: x + y >= 29;\nloop invariant i128: x + y < 29;\nloop invariant i129: x + y >= 30;\nloop invariant i130: x + y < 30;\nloop invariant i131: x + y >= 31;\nloop invariant i132: x + y < 31;\nloop invariant i133: x + y >= 32;\nloop invariant i134: x + y < 32;\nloop invariant i135: x + y >= 33;\nloop invariant i136: x + y < 33;\nloop invariant i137: x + y >= 34;\nloop invariant i138: x + y < 34;\nloop invariant i139: x + y >= 35;\nloop invariant i140: x + y < 35;\nloop invariant i141: x + y >= 36;\nloop invariant i142: x + y < 36;\nloop invariant i143: x + y >= 37;\nloop invariant i144: x + y < 37;\nloop invariant i145: x + y >= 38;\nloop invariant i146: x + y < 38;\nloop invariant i147: x + y >= 39;\nloop invariant i148: x + y < 39;\nloop invariant i149: x + y >= 40;\nloop invariant i150: x + y < 40;\nloop invariant i151: x + y >= 41;\nloop invariant i152: x + y < 41;\nloop invariant i153: x + y >= 42;\nloop invariant i154: x + y < 42;\nloop invariant i155: x + y >= 43;\nloop invariant i156: x + y < 43;\nloop invariant i157: x + y >= 44;\nloop invariant i158: x + y < 44;\nloop invariant i159: x + y >= 45;\nloop invariant i160: x + y < 45;\nloop invariant i161: x + y >= 46;\nloop invariant i162: x + y < 46;\nloop invariant i163: x >= -50 + y;\nloop invariant i164: x >= (y * y + y) / 2 - 50;\nloop invariant i165: 0 <= x <= LARGE_INT; loop invariant -1000 < y < LARGE_INT; loop invariant x >= -50; loop invariant x >= y; loop invariant y > 0;\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/104.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> (n < 0);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= (x - 1) > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n => (n < 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> (x < 0) || (x >= n) || (n == 0);\nloop invariant x < n ==> (x == n);\nloop invariant x < n ==> (x == n) ==> n < 0;\nloop invariant x < n ==> (x == n) ==> n == 0;\nloop invariant x < n ==> (x == n) ==> x >= n;\nloop invariant x < n ==> (x == n) ==> x <= n;\nloop invariant x < n ==> (x == n) ==> x < n;\nloop invariant x < n ==> (x == n) ==> n <= x;\nloop invariant x < n ==> (x == n) ==> n >= x;\nloop invariant x < n ==> (x == n) ==> x == n;\nloop invariant x < n ==> (x == n) ==> n == x;\nloop invariant x < n ==> (x == n) ==> x + n == n;\nloop invariant x < n ==> (x == n) ==> n + x == n;\nloop invariant x < n ==> (x == n) ==> x + x == n;\nloop invariant x < n ==> (x == n) ==> n + n == n;\nloop invariant x < n ==> (x == n) ==> x + n == x;\nloop invariant x < n ==> (x == n) ==> n + x == x;\nloop invariant x < n ==> (x == n) ==> x + x == x;\nloop invariant x < n ==> (x == n) ==> n + n == x;\nloop invariant x < n ==> (x == n) ==> x + n == n + x;\nloop invariant x < n ==> (x == n) ==> n + x == n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + x;\nloop invariant x < n ==> (x == n) ==> n + n == x + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + x;\nloop invariant x < n ==> (x == n) ==> x + x == n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + x;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + x;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\nloop invariant x == (n - (n - x));\nloop invariant x >= (n - (n - x));\nloop invariant x >= (n - (n - x));\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n <= 1000;\nloop invariant 0 <= x <= n;\nloop invariant x == (x + 1) ==> (x == (n - 1));\nloop invariant x == (n - 1) ==> (x == (n - 1));\nloop invariant x == (n - 1) ==> (n != 0) ==> (n < 0) ==> false;\nloop invariant x == (n - 1) ==> (n == 0);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n != 0) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n != 1) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n != 2) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n != 3) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n != 4) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n != 5) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n != 6) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7) ==> (n != 7) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7) ==> (n == 8);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7) ==> (n == 8) ==> (n != 8) ==> false;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x + 1 == n ==> n < 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> (n >= 0);\nloop invariant x == n ==> (n < 0) ==> false;\nloop invariant x == n ==> (n < 0) ==> (n < 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == (x - 1) + 1;\nloop invariant x == 0 ==> (x != n);\nloop invariant x == n ==> (x == n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n <= 0 ==> (n < 0);\nloop invariant n > 0 ==> (n >= 0);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> (n < 0);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\nloop invariant x == n ==> (n >= 0) ==> (x == n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n ==> (n < 0) is neither established nor preserved.\nloop invariant x == n ==> (n >= 0) ==> (x == n) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x == n ==> (n >= 0) ==> (x == n);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= (x - 1) > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= (x - 1) > 0 is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n => (n < 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> (x < 0) || (x >= n) || (n == 0);\nloop invariant x < n ==> (x == n);\nloop invariant x < n ==> (x == n) ==> n < 0;\nloop invariant x < n ==> (x == n) ==> n == 0;\nloop invariant x < n ==> (x == n) ==> x >= n;\nloop invariant x < n ==> (x == n) ==> x <= n;\nloop invariant x < n ==> (x == n) ==> x < n;\nloop invariant x < n ==> (x == n) ==> n <= x;\nloop invariant x < n ==> (x == n) ==> n >= x;\nloop invariant x < n ==> (x == n) ==> x == n;\nloop invariant x < n ==> (x == n) ==> n == x;\nloop invariant x < n ==> (x == n) ==> x + n == n;\nloop invariant x < n ==> (x == n) ==> n + x == n;\nloop invariant x < n ==> (x == n) ==> x + x == n;\nloop invariant x < n ==> (x == n) ==> n + n == n;\nloop invariant x < n ==> (x == n) ==> x + n == x;\nloop invariant x < n ==> (x == n) ==> n + x == x;\nloop invariant x < n ==> (x == n) ==> x + x == x;\nloop invariant x < n ==> (x == n) ==> n + n == x;\nloop invariant x < n ==> (x == n) ==> x + n == n + x;\nloop invariant x < n ==> (x == n) ==> n + x == n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + x;\nloop invariant x < n ==> (x == n) ==> n + n == x + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + x;\nloop invariant x < n ==> (x == n) ==> x + x == n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + x;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + x;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant x < n ==> (x == n) ==> x + n == n + n + n;\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x < n ==> (x < 0) || (x >= n) || (n == 0) is preserved but not established.\nloop invariant x < n ==> (x == n) is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n < 0 is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n == 0 is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x >= n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x <= n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x < n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n <= x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n >= x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x == n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n == x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x + n == n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n + x == n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x + x == n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n + n == n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x + n == x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n + x == x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x + x == x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n + n == x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x + n == n + x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n + x == n + n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x + x == n + x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n + n == x + n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x + n == n + n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n + x == n + x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x + x == n + n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n + n == x + x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x + n == n + n + x is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n + x == n + n + n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x + x == n + n + n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> n + n == x + n + n is partially proven to be inductive.\nloop invariant x < n ==> (x == n) ==> x + n == n + n + n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\nloop invariant i4: x < n ==> (x == n) ==> n < 0;\nloop invariant i5: x < n ==> (x == n) ==> n == 0;\nloop invariant i6: x < n ==> (x == n) ==> x >= n;\nloop invariant i7: x < n ==> (x == n) ==> x <= n;\nloop invariant i8: x < n ==> (x == n) ==> x < n;\nloop invariant i9: x < n ==> (x == n) ==> n <= x;\nloop invariant i10: x < n ==> (x == n) ==> n >= x;\nloop invariant i11: x < n ==> (x == n) ==> x == n;\nloop invariant i12: x < n ==> (x == n) ==> n == x;\nloop invariant i13: x < n ==> (x == n) ==> x + n == n;\nloop invariant i14: x < n ==> (x == n) ==> n + x == n;\nloop invariant i15: x < n ==> (x == n) ==> x + x == n;\nloop invariant i16: x < n ==> (x == n) ==> n + n == n;\nloop invariant i17: x < n ==> (x == n) ==> x + n == x;\nloop invariant i18: x < n ==> (x == n) ==> n + x == x;\nloop invariant i19: x < n ==> (x == n) ==> x + x == x;\nloop invariant i20: x < n ==> (x == n) ==> n + n == x;\nloop invariant i21: x < n ==> (x == n) ==> x + n == n + x;\nloop invariant i22: x < n ==> (x == n) ==> n + x == n + n;\nloop invariant i23: x < n ==> (x == n) ==> x + x == n + x;\nloop invariant i24: x < n ==> (x == n) ==> n + n == x + n;\nloop invariant i25: x < n ==> (x == n) ==> x + n == n + n;\nloop invariant i26: x < n ==> (x == n) ==> n + x == n + x;\nloop invariant i27: x < n ==> (x == n) ==> x + x == n + n;\nloop invariant i28: x < n ==> (x == n) ==> n + n == x + x;\nloop invariant i29: x < n ==> (x == n) ==> x + n == n + n + x;\nloop invariant i30: x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant i31: x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant i32: x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant i33: x < n ==> (x == n) ==> x + n == n + n + n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\nloop invariant x == (n - (n - x));\nloop invariant x >= (n - (n - x));\nloop invariant x >= (n - (n - x));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant x == (n - (n - x)) is partially proven to be inductive.\nloop invariant x >= (n - (n - x)) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x == (n - (n - x));\nloop invariant i4: x >= (n - (n - x));\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 15,
                    "annotations": "```\n/*@\nloop invariant 1 <= n <= 1000;\nloop invariant 0 <= x <= n;\nloop invariant x == (x + 1) ==> (x == (n - 1));\nloop invariant x == (n - 1) ==> (x == (n - 1));\nloop invariant x == (n - 1) ==> (n != 0) ==> (n < 0) ==> false;\nloop invariant x == (n - 1) ==> (n == 0);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n != 0) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n != 1) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n != 2) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n != 3) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n != 4) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n != 5) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n != 6) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7) ==> (n != 7) ==> false;\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7) ==> (n == 8);\nloop invariant x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7) ==> (n == 8) ==> (n != 8) ==> false;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unbound logic variable false. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: x == (x + 1) ==> (x == (n - 1));\nloop invariant i4: x == (n - 1) ==> (x == (n - 1));\n\n\n\n\n\nloop invariant i10: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2);\n\nloop invariant i12: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3);\n\nloop invariant i14: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4);\n\nloop invariant i16: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5);\n\nloop invariant i18: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6);\n\nloop invariant i20: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7);\n\nloop invariant i22: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7) ==> (n == 8);\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x < n ==> n >= 0;\nloop invariant x < n ==> x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x < n ==> n >= 0 is partially proven to be inductive.\nloop invariant x < n ==> x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x < n ==> n >= 0;\nloop invariant i3: x < n ==> x <= n;\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x + 1 == n ==> n < 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x + 1 == n ==> n < 0 is neither established nor preserved.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> (n >= 0);\nloop invariant x == n ==> (n < 0) ==> false;\nloop invariant x == n ==> (n < 0) ==> (n < 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unbound logic variable false. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\nloop invariant i4: x == n ==> (n < 0) ==> (n < 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == (x - 1) + 1;\nloop invariant x == 0 ==> (x != n);\nloop invariant x == n ==> (x == n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == (x - 1) + 1 is partially proven to be inductive.\nloop invariant x == 0 ==> (x != n) is preserved but not established.\nloop invariant x == n ==> (x == n) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x == (x - 1) + 1;\n\nloop invariant i4: x == n ==> (x == n);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n <= 0 ==> (n < 0);\nloop invariant n > 0 ==> (n >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n <= 0 ==> (n < 0) is preserved but not established.\nloop invariant n > 0 ==> (n >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: n > 0 ==> (n >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 23: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x == n;\nloop invariant i3: x == n ==> (n < 0);\nloop invariant i4: x == n ==> (n >= 0) ==> (x == n);\nloop invariant i5: n >= (x - 1) > 0;\nloop invariant i6: x == n => (n < 0);\nloop invariant i7: x < n ==> (x < 0) || (x >= n) || (n == 0);\nloop invariant i8: x < n ==> (x == n);\nloop invariant i9: x < n ==> (x == n) ==> n < 0;\nloop invariant i10: x < n ==> (x == n) ==> n == 0;\nloop invariant i11: x < n ==> (x == n) ==> x >= n;\nloop invariant i12: x < n ==> (x == n) ==> x <= n;\nloop invariant i13: x < n ==> (x == n) ==> x < n;\nloop invariant i14: x < n ==> (x == n) ==> n <= x;\nloop invariant i15: x < n ==> (x == n) ==> n >= x;\nloop invariant i16: x < n ==> (x == n) ==> x == n;\nloop invariant i17: x < n ==> (x == n) ==> n == x;\nloop invariant i18: x < n ==> (x == n) ==> x + n == n;\nloop invariant i19: x < n ==> (x == n) ==> n + x == n;\nloop invariant i20: x < n ==> (x == n) ==> x + x == n;\nloop invariant i21: x < n ==> (x == n) ==> n + n == n;\nloop invariant i22: x < n ==> (x == n) ==> x + n == x;\nloop invariant i23: x < n ==> (x == n) ==> n + x == x;\nloop invariant i24: x < n ==> (x == n) ==> x + x == x;\nloop invariant i25: x < n ==> (x == n) ==> n + n == x;\nloop invariant i26: x < n ==> (x == n) ==> x + n == n + x;\nloop invariant i27: x < n ==> (x == n) ==> n + x == n + n;\nloop invariant i28: x < n ==> (x == n) ==> x + x == n + x;\nloop invariant i29: x < n ==> (x == n) ==> n + n == x + n;\nloop invariant i30: x < n ==> (x == n) ==> x + n == n + n;\nloop invariant i31: x < n ==> (x == n) ==> n + x == n + x;\nloop invariant i32: x < n ==> (x == n) ==> x + x == n + n;\nloop invariant i33: x < n ==> (x == n) ==> n + n == x + x;\nloop invariant i34: x < n ==> (x == n) ==> x + n == n + n + x;\nloop invariant i35: x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant i36: x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant i37: x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant i38: x < n ==> (x == n) ==> x + n == n + n + n;\nloop invariant i39: n >= 0;\nloop invariant i40: x == (n - (n - x));\nloop invariant i41: x >= (n - (n - x));\nloop invariant i42: 1 <= n <= 1000;\nloop invariant i43: x == (x + 1) ==> (x == (n - 1));\nloop invariant i44: x == (n - 1) ==> (x == (n - 1));\nloop invariant i45: x == (n - 1) ==> (n != 0) ==> (n < 0) ==> false;\nloop invariant i46: x == (n - 1) ==> (n == 0);\nloop invariant i47: x == (n - 1) ==> (n == 0) ==> (n != 0) ==> false;\nloop invariant i48: x == (n - 1) ==> (n == 0) ==> (n == 1);\nloop invariant i49: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n != 1) ==> false;\nloop invariant i50: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2);\nloop invariant i51: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n != 2) ==> false;\nloop invariant i52: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3);\nloop invariant i53: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n != 3) ==> false;\nloop invariant i54: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4);\nloop invariant i55: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n != 4) ==> false;\nloop invariant i56: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5);\nloop invariant i57: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n != 5) ==> false;\nloop invariant i58: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6);\nloop invariant i59: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n != 6) ==> false;\nloop invariant i60: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7);\nloop invariant i61: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7) ==> (n != 7) ==> false;\nloop invariant i62: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7) ==> (n == 8);\nloop invariant i63: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7) ==> (n == 8) ==> (n != 8) ==> false;\nloop invariant i64: x < n ==> n >= 0;\nloop invariant i65: x < n ==> x <= n;\nloop invariant i66: x + 1 == n ==> n < 0;\nloop invariant i67: x >= 0;\nloop invariant i68: x <= n;\nloop invariant i69: x == n ==> (n >= 0);\nloop invariant i70: x == n ==> (n < 0) ==> false;\nloop invariant i71: x == n ==> (n < 0) ==> (n < 0);\nloop invariant i72: x == (x - 1) + 1;\nloop invariant i73: x == 0 ==> (x != n);\nloop invariant i74: x == n ==> (x == n);\nloop invariant i75: n <= 0 ==> (n < 0);\nloop invariant i76: n > 0 ==> (n >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 20,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\nloop invariant i4: x == n ==> (n >= 0) ==> (x == n);\n\n\n\n\nloop invariant i9: x < n ==> (x == n) ==> n < 0;\nloop invariant i10: x < n ==> (x == n) ==> n == 0;\nloop invariant i11: x < n ==> (x == n) ==> x >= n;\nloop invariant i12: x < n ==> (x == n) ==> x <= n;\nloop invariant i13: x < n ==> (x == n) ==> x < n;\nloop invariant i14: x < n ==> (x == n) ==> n <= x;\nloop invariant i15: x < n ==> (x == n) ==> n >= x;\nloop invariant i16: x < n ==> (x == n) ==> x == n;\nloop invariant i17: x < n ==> (x == n) ==> n == x;\nloop invariant i18: x < n ==> (x == n) ==> x + n == n;\nloop invariant i19: x < n ==> (x == n) ==> n + x == n;\nloop invariant i20: x < n ==> (x == n) ==> x + x == n;\nloop invariant i21: x < n ==> (x == n) ==> n + n == n;\nloop invariant i22: x < n ==> (x == n) ==> x + n == x;\nloop invariant i23: x < n ==> (x == n) ==> n + x == x;\nloop invariant i24: x < n ==> (x == n) ==> x + x == x;\nloop invariant i25: x < n ==> (x == n) ==> n + n == x;\nloop invariant i26: x < n ==> (x == n) ==> x + n == n + x;\nloop invariant i27: x < n ==> (x == n) ==> n + x == n + n;\nloop invariant i28: x < n ==> (x == n) ==> x + x == n + x;\nloop invariant i29: x < n ==> (x == n) ==> n + n == x + n;\nloop invariant i30: x < n ==> (x == n) ==> x + n == n + n;\nloop invariant i31: x < n ==> (x == n) ==> n + x == n + x;\nloop invariant i32: x < n ==> (x == n) ==> x + x == n + n;\nloop invariant i33: x < n ==> (x == n) ==> n + n == x + x;\nloop invariant i34: x < n ==> (x == n) ==> x + n == n + n + x;\nloop invariant i35: x < n ==> (x == n) ==> n + x == n + n + n;\nloop invariant i36: x < n ==> (x == n) ==> x + x == n + n + n;\nloop invariant i37: x < n ==> (x == n) ==> n + n == x + n + n;\nloop invariant i38: x < n ==> (x == n) ==> x + n == n + n + n;\n\nloop invariant i40: x == (n - (n - x));\nloop invariant i41: x >= (n - (n - x));\n\nloop invariant i43: x == (x + 1) ==> (x == (n - 1));\nloop invariant i44: x == (n - 1) ==> (x == (n - 1));\n\n\n\nloop invariant i48: x == (n - 1) ==> (n == 0) ==> (n == 1);\n\nloop invariant i50: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2);\n\nloop invariant i52: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3);\n\nloop invariant i54: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4);\n\nloop invariant i56: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5);\n\nloop invariant i58: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6);\n\nloop invariant i60: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7);\n\nloop invariant i62: x == (n - 1) ==> (n == 0) ==> (n == 1) ==> (n == 2) ==> (n == 3) ==> (n == 4) ==> (n == 5) ==> (n == 6) ==> (n == 7) ==> (n == 8);\n\nloop invariant i64: x < n ==> n >= 0;\nloop invariant i65: x < n ==> x <= n;\n\nloop invariant i67: x >= 0;\n\nloop invariant i69: x == n ==> (n >= 0);\n\nloop invariant i71: x == n ==> (n < 0) ==> (n < 0);\nloop invariant i72: x == (x - 1) + 1;\n\nloop invariant i74: x == n ==> (x == n);\n\nloop invariant i76: n > 0 ==> (n >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/110.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn <= n;\nloop invariant sn == 0 ==> i <= n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == (i - 1);\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - i + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = (i - 1);\nloop invariant sn <= n;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn = (i - 1);\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant (i <= n ==> sn == i - 1);\nloop invariant (i > n ==> sn == n);\nloop invariant (sn == n ==> i == n + 1);\nloop invariant (sn != n ==> i <= n);\nloop invariant (i > n ==> sn != n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn != 0 ==> i <= n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant i <= n + 1 ==> (sn == n);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn < n;\nloop invariant i == sn + 1;\nloop invariant n >= 1;\nloop invariant sn >= 0;\nloop invariant n >= sn;\nloop invariant n >= 1;\nloop invariant n >= i;\nloop invariant n >= i - 1;\nloop invariant n >= i - 2;\nloop invariant n >= i - 3;\nloop invariant n >= i - 4;\nloop invariant n >= i - 5;\nloop invariant n >= i - 6;\nloop invariant n >= i - 7;\nloop invariant n >= i - 8;\nloop invariant n >= i - 9;\nloop invariant n >= i - 10;\nloop invariant n >= i - 11;\nloop invariant n >= i - 12;\nloop invariant n >= i - 13;\nloop invariant n >= i - 14;\nloop invariant n >= i - 15;\nloop invariant n >= i - 16;\nloop invariant n >= i - 17;\nloop invariant n >= i - 18;\nloop invariant n >= i - 19;\nloop invariant n >= i - 20;\nloop invariant n >= i - 21;\nloop invariant n >= i - 22;\nloop invariant n >= i - 23;\nloop invariant n >= i - 24;\nloop invariant n >= i - 25;\nloop invariant n >= i - 26;\nloop invariant n >= i - 27;\nloop invariant n >= i - 28;\nloop invariant n >= i - 29;\nloop invariant n >= i - 30;\nloop invariant n >= i - 31;\nloop invariant n >= i - 32;\nloop invariant n >= i - 33;\nloop invariant n >= i - 34;\nloop invariant n >= i - 35;\nloop invariant n >= i - 36;\nloop invariant n >= i - 37;\nloop invariant n >= i - 38;\nloop invariant n >= i - 39;\nloop invariant n >= i - 40;\nloop invariant n >= i - 41;\nloop invariant n >= i - 42;\nloop invariant n >= i - 43;\nloop invariant n >= i - 44;\nloop invariant n >= i - 45;\nloop invariant n >= i - 46;\nloop invariant n >= i - 47;\nloop invariant n >= i - 48;\nloop invariant n >= i - 49;\nloop invariant n >= i - 50;\nloop invariant n >= i - 51;\nloop invariant n >= i - 52;\nloop invariant n >= i - 53;\nloop invariant n >= i - 54;\nloop invariant n >= i - 55;\nloop invariant n >= i - 56;\nloop invariant n >= i - 57;\nloop invariant n >= i - 58;\nloop invariant n >= i - 59;\nloop invariant n >= i - 60;\nloop invariant n >= i - 61;\nloop invariant n >= i - 62;\nloop invariant n >= i - 63;\nloop invariant n >= i - 64;\nloop invariant n >= i - 65;\nloop invariant n >= i - 66;\nloop invariant n >= i - 67;\nloop invariant n >= i - 68;\nloop invariant n >= i - 69;\nloop invariant n >= i - 70;\nloop invariant n >= i - 71;\nloop invariant n >= i - 72;\nloop invariant n >= i - 73;\nloop invariant n >= i - 74;\nloop invariant n >= i - 75;\nloop invariant n >= i - 76;\nloop invariant n >= i - 77;\nloop invariant n >= i - 78;\nloop invariant n >= i - 79;\nloop invariant n >= i - 80;\nloop invariant n >= i - 81;\nloop invariant n >= i - 82;\nloop invariant n >= i - 83;\nloop invariant n >= i - 84;\nloop invariant n >= i - 85;\nloop invariant n >= i - 86;\nloop invariant n >= i - 87;\nloop invariant n >= i - 88;\nloop invariant n >= i - 89;\nloop invariant n >= i - 90;\nloop invariant n >= i - 91;\nloop invariant n >= i - 92;\nloop invariant n >= i - 93;\nloop invariant n >= i - 94;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn >= 1;\nloop invariant sn == i - 1;\nloop invariant sn == (n - i + 1);\nloop invariant sn == ((i - 1) * (i - 2) / 2);\nloop invariant sn == (i * (i - 1) / 2);\nloop invariant sn == (i * (i - 1) / 2 - 1);\nloop invariant sn == (i * (i - 1) / 2 - 2);\nloop invariant sn == (i * (i - 1) / 2 - 3);\nloop invariant sn == (i * (i - 1) / 2 - 4);\nloop invariant sn == (i * (i - 1) / 2 - 5);\nloop invariant sn == (i * (i - 1) / 2 - 6);\nloop invariant sn == (i * (i - 1) / 2 - 7);\nloop invariant sn == (i * (i - 1) / 2 - 8);\nloop invariant sn == (i * (i - 1) / 2 - 9);\nloop invariant sn == (i * (i - 1) / 2 - 10);\nloop invariant sn == (i * (i - 1) / 2 - 11);\nloop invariant sn == (i * (i - 1) / 2 - 12);\nloop invariant sn == (i * (i - 1) / 2 - 13);\nloop invariant sn == (i * (i - 1) / 2 - 14);\nloop invariant sn == (i * (i - 1) / 2 - 15);\nloop invariant sn == (i * (i - 1) / 2 - 16);\nloop invariant sn == (i * (i - 1) / 2 - 17);\nloop invariant sn == (i * (i - 1) / 2 - 18);\nloop invariant sn == (i * (i - 1) / 2 - 19);\nloop invariant sn == (i * (i - 1) / 2 - 20);\nloop invariant sn == (i * (i - 1) / 2 - 21);\nloop invariant sn == (i * (i - 1) / 2 - 22);\nloop invariant sn == (i * (i - 1) / 2 - 23);\nloop invariant sn == (i * (i - 1) / 2 - 24);\nloop invariant sn == (i * (i - 1) / 2 - 25);\nloop invariant sn == (i * (i - 1) / 2 - 26);\nloop invariant sn == (i * (i - 1) / 2 - 27);\nloop invariant sn == (i * (i - 1) / 2 - 28);\nloop invariant sn == (i * (i - 1) / 2 - 29);\nloop invariant sn == (i * (i - 1) / 2 - 30);\nloop invariant sn == (i * (i - 1) / 2 - 31);\nloop invariant sn == (i * (i - 1) / 2 - 32);\nloop invariant sn == (i * (i - 1) / 2 - 33);\nloop invariant sn == (i * (i - 1) / 2 - 34);\nloop invariant sn == (i * (i - 1) / 2 - 35);\nloop invariant sn == (i * (i - 1) / 2 - 36);\nloop invariant sn == (i * (i - 1) / 2 - 37);\nloop invariant sn == (i * (i - 1) / 2 - 38);\nloop invariant sn == (i * (i - 1) / 2 - 39);\nloop invariant sn == (i * (i - 1) / 2 - 40);\nloop invariant sn == (i * (i - 1) / 2 - 41);\nloop invariant sn == (i * (i - 1) / 2 - 42);\nloop invariant sn == (i * (i - 1) / 2 - 43);\nloop invariant sn == (i * (i - 1) / 2 - 44);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i = sn + 1;\nloop invariant sn = i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant i - 1 = sn;\nloop invariant sn + 1 = i;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= 1 + n;\nloop invariant i - 1 <= sn <= sn + 1;\nloop invariant sn >= 1;\n*/\n```",
                "```\n/*@\nloop invariant n >= i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == (i - 1);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i == 1 ==> sn == 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i <= n is neither established nor preserved.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i - 1;\n\nloop invariant i5: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i >= 1;\n\nloop invariant i6: sn <= i;\nloop invariant i7: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn <= n;\nloop invariant sn == 0 ==> i <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == 0 ==> i <= n is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1);\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\nloop invariant i6: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == (i - 1);\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - i + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant 1 <= i <= n + 1 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant (i - 1) <= n is partially proven to be inductive.\nloop invariant n <= sn + (n - i + 1) is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant 1 <= i - 1 <= n is preserved but not established.\nloop invariant n <= sn + (n - (i - 1) + 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: sn == (i - 1);\n\nloop invariant i6: n <= sn + (n - i + 1);\n\n\nloop invariant i9: n <= sn + (n - (i - 1) + 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = (i - 1);\nloop invariant sn <= n;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn = (i - 1);\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant (i <= n ==> sn == i - 1);\nloop invariant (i > n ==> sn == n);\nloop invariant (sn == n ==> i == n + 1);\nloop invariant (sn != n ==> i <= n);\nloop invariant (i > n ==> sn != n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn != 0 ==> i <= n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant (i <= n ==> sn == i - 1) is partially proven to be inductive.\nloop invariant (i > n ==> sn == n) is partially proven to be inductive.\nloop invariant (sn == n ==> i == n + 1) is partially proven to be inductive.\nloop invariant (sn != n ==> i <= n) is partially proven to be inductive.\nloop invariant (i > n ==> sn != n) is partially proven to be inductive.\nloop invariant (sn == 0 ==> i == 1) is partially proven to be inductive.\nloop invariant (sn != 0 ==> i <= n) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: (i <= n ==> sn == i - 1);\n\nloop invariant i6: (sn == n ==> i == n + 1);\n\n\nloop invariant i9: (sn == 0 ==> i == 1);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant i <= n + 1 ==> (sn == n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i <= n + 1 ==> (sn == n) is preserved but not established.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 100,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn < n;\nloop invariant i == sn + 1;\nloop invariant n >= 1;\nloop invariant sn >= 0;\nloop invariant n >= sn;\nloop invariant n >= 1;\nloop invariant n >= i;\nloop invariant n >= i - 1;\nloop invariant n >= i - 2;\nloop invariant n >= i - 3;\nloop invariant n >= i - 4;\nloop invariant n >= i - 5;\nloop invariant n >= i - 6;\nloop invariant n >= i - 7;\nloop invariant n >= i - 8;\nloop invariant n >= i - 9;\nloop invariant n >= i - 10;\nloop invariant n >= i - 11;\nloop invariant n >= i - 12;\nloop invariant n >= i - 13;\nloop invariant n >= i - 14;\nloop invariant n >= i - 15;\nloop invariant n >= i - 16;\nloop invariant n >= i - 17;\nloop invariant n >= i - 18;\nloop invariant n >= i - 19;\nloop invariant n >= i - 20;\nloop invariant n >= i - 21;\nloop invariant n >= i - 22;\nloop invariant n >= i - 23;\nloop invariant n >= i - 24;\nloop invariant n >= i - 25;\nloop invariant n >= i - 26;\nloop invariant n >= i - 27;\nloop invariant n >= i - 28;\nloop invariant n >= i - 29;\nloop invariant n >= i - 30;\nloop invariant n >= i - 31;\nloop invariant n >= i - 32;\nloop invariant n >= i - 33;\nloop invariant n >= i - 34;\nloop invariant n >= i - 35;\nloop invariant n >= i - 36;\nloop invariant n >= i - 37;\nloop invariant n >= i - 38;\nloop invariant n >= i - 39;\nloop invariant n >= i - 40;\nloop invariant n >= i - 41;\nloop invariant n >= i - 42;\nloop invariant n >= i - 43;\nloop invariant n >= i - 44;\nloop invariant n >= i - 45;\nloop invariant n >= i - 46;\nloop invariant n >= i - 47;\nloop invariant n >= i - 48;\nloop invariant n >= i - 49;\nloop invariant n >= i - 50;\nloop invariant n >= i - 51;\nloop invariant n >= i - 52;\nloop invariant n >= i - 53;\nloop invariant n >= i - 54;\nloop invariant n >= i - 55;\nloop invariant n >= i - 56;\nloop invariant n >= i - 57;\nloop invariant n >= i - 58;\nloop invariant n >= i - 59;\nloop invariant n >= i - 60;\nloop invariant n >= i - 61;\nloop invariant n >= i - 62;\nloop invariant n >= i - 63;\nloop invariant n >= i - 64;\nloop invariant n >= i - 65;\nloop invariant n >= i - 66;\nloop invariant n >= i - 67;\nloop invariant n >= i - 68;\nloop invariant n >= i - 69;\nloop invariant n >= i - 70;\nloop invariant n >= i - 71;\nloop invariant n >= i - 72;\nloop invariant n >= i - 73;\nloop invariant n >= i - 74;\nloop invariant n >= i - 75;\nloop invariant n >= i - 76;\nloop invariant n >= i - 77;\nloop invariant n >= i - 78;\nloop invariant n >= i - 79;\nloop invariant n >= i - 80;\nloop invariant n >= i - 81;\nloop invariant n >= i - 82;\nloop invariant n >= i - 83;\nloop invariant n >= i - 84;\nloop invariant n >= i - 85;\nloop invariant n >= i - 86;\nloop invariant n >= i - 87;\nloop invariant n >= i - 88;\nloop invariant n >= i - 89;\nloop invariant n >= i - 90;\nloop invariant n >= i - 91;\nloop invariant n >= i - 92;\nloop invariant n >= i - 93;\nloop invariant n >= i - 94;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn < n is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant n >= sn is partially proven to be inductive.\nloop invariant n >= i is partially proven to be inductive.\nloop invariant n >= i - 1 is partially proven to be inductive.\nloop invariant n >= i - 2 is partially proven to be inductive.\nloop invariant n >= i - 3 is partially proven to be inductive.\nloop invariant n >= i - 4 is partially proven to be inductive.\nloop invariant n >= i - 5 is partially proven to be inductive.\nloop invariant n >= i - 6 is partially proven to be inductive.\nloop invariant n >= i - 7 is partially proven to be inductive.\nloop invariant n >= i - 8 is partially proven to be inductive.\nloop invariant n >= i - 9 is partially proven to be inductive.\nloop invariant n >= i - 10 is partially proven to be inductive.\nloop invariant n >= i - 11 is partially proven to be inductive.\nloop invariant n >= i - 12 is partially proven to be inductive.\nloop invariant n >= i - 13 is partially proven to be inductive.\nloop invariant n >= i - 14 is partially proven to be inductive.\nloop invariant n >= i - 15 is partially proven to be inductive.\nloop invariant n >= i - 16 is partially proven to be inductive.\nloop invariant n >= i - 17 is partially proven to be inductive.\nloop invariant n >= i - 18 is partially proven to be inductive.\nloop invariant n >= i - 19 is partially proven to be inductive.\nloop invariant n >= i - 20 is partially proven to be inductive.\nloop invariant n >= i - 21 is partially proven to be inductive.\nloop invariant n >= i - 22 is partially proven to be inductive.\nloop invariant n >= i - 23 is partially proven to be inductive.\nloop invariant n >= i - 24 is partially proven to be inductive.\nloop invariant n >= i - 25 is partially proven to be inductive.\nloop invariant n >= i - 26 is partially proven to be inductive.\nloop invariant n >= i - 27 is partially proven to be inductive.\nloop invariant n >= i - 28 is partially proven to be inductive.\nloop invariant n >= i - 29 is partially proven to be inductive.\nloop invariant n >= i - 30 is partially proven to be inductive.\nloop invariant n >= i - 31 is partially proven to be inductive.\nloop invariant n >= i - 32 is partially proven to be inductive.\nloop invariant n >= i - 33 is partially proven to be inductive.\nloop invariant n >= i - 34 is partially proven to be inductive.\nloop invariant n >= i - 35 is partially proven to be inductive.\nloop invariant n >= i - 36 is partially proven to be inductive.\nloop invariant n >= i - 37 is partially proven to be inductive.\nloop invariant n >= i - 38 is partially proven to be inductive.\nloop invariant n >= i - 39 is partially proven to be inductive.\nloop invariant n >= i - 40 is partially proven to be inductive.\nloop invariant n >= i - 41 is partially proven to be inductive.\nloop invariant n >= i - 42 is partially proven to be inductive.\nloop invariant n >= i - 43 is partially proven to be inductive.\nloop invariant n >= i - 44 is partially proven to be inductive.\nloop invariant n >= i - 45 is partially proven to be inductive.\nloop invariant n >= i - 46 is partially proven to be inductive.\nloop invariant n >= i - 47 is partially proven to be inductive.\nloop invariant n >= i - 48 is partially proven to be inductive.\nloop invariant n >= i - 49 is partially proven to be inductive.\nloop invariant n >= i - 50 is partially proven to be inductive.\nloop invariant n >= i - 51 is partially proven to be inductive.\nloop invariant n >= i - 52 is partially proven to be inductive.\nloop invariant n >= i - 53 is partially proven to be inductive.\nloop invariant n >= i - 54 is partially proven to be inductive.\nloop invariant n >= i - 55 is partially proven to be inductive.\nloop invariant n >= i - 56 is partially proven to be inductive.\nloop invariant n >= i - 57 is partially proven to be inductive.\nloop invariant n >= i - 58 is partially proven to be inductive.\nloop invariant n >= i - 59 is partially proven to be inductive.\nloop invariant n >= i - 60 is partially proven to be inductive.\nloop invariant n >= i - 61 is partially proven to be inductive.\nloop invariant n >= i - 62 is partially proven to be inductive.\nloop invariant n >= i - 63 is partially proven to be inductive.\nloop invariant n >= i - 64 is partially proven to be inductive.\nloop invariant n >= i - 65 is partially proven to be inductive.\nloop invariant n >= i - 66 is partially proven to be inductive.\nloop invariant n >= i - 67 is partially proven to be inductive.\nloop invariant n >= i - 68 is partially proven to be inductive.\nloop invariant n >= i - 69 is partially proven to be inductive.\nloop invariant n >= i - 70 is partially proven to be inductive.\nloop invariant n >= i - 71 is partially proven to be inductive.\nloop invariant n >= i - 72 is partially proven to be inductive.\nloop invariant n >= i - 73 is partially proven to be inductive.\nloop invariant n >= i - 74 is partially proven to be inductive.\nloop invariant n >= i - 75 is partially proven to be inductive.\nloop invariant n >= i - 76 is partially proven to be inductive.\nloop invariant n >= i - 77 is partially proven to be inductive.\nloop invariant n >= i - 78 is partially proven to be inductive.\nloop invariant n >= i - 79 is partially proven to be inductive.\nloop invariant n >= i - 80 is partially proven to be inductive.\nloop invariant n >= i - 81 is partially proven to be inductive.\nloop invariant n >= i - 82 is partially proven to be inductive.\nloop invariant n >= i - 83 is partially proven to be inductive.\nloop invariant n >= i - 84 is partially proven to be inductive.\nloop invariant n >= i - 85 is partially proven to be inductive.\nloop invariant n >= i - 86 is partially proven to be inductive.\nloop invariant n >= i - 87 is partially proven to be inductive.\nloop invariant n >= i - 88 is partially proven to be inductive.\nloop invariant n >= i - 89 is partially proven to be inductive.\nloop invariant n >= i - 90 is partially proven to be inductive.\nloop invariant n >= i - 91 is partially proven to be inductive.\nloop invariant n >= i - 92 is partially proven to be inductive.\nloop invariant n >= i - 93 is partially proven to be inductive.\nloop invariant n >= i - 94 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\n\nloop invariant i5: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 49,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn >= 1;\nloop invariant sn == i - 1;\nloop invariant sn == (n - i + 1);\nloop invariant sn == ((i - 1) * (i - 2) / 2);\nloop invariant sn == (i * (i - 1) / 2);\nloop invariant sn == (i * (i - 1) / 2 - 1);\nloop invariant sn == (i * (i - 1) / 2 - 2);\nloop invariant sn == (i * (i - 1) / 2 - 3);\nloop invariant sn == (i * (i - 1) / 2 - 4);\nloop invariant sn == (i * (i - 1) / 2 - 5);\nloop invariant sn == (i * (i - 1) / 2 - 6);\nloop invariant sn == (i * (i - 1) / 2 - 7);\nloop invariant sn == (i * (i - 1) / 2 - 8);\nloop invariant sn == (i * (i - 1) / 2 - 9);\nloop invariant sn == (i * (i - 1) / 2 - 10);\nloop invariant sn == (i * (i - 1) / 2 - 11);\nloop invariant sn == (i * (i - 1) / 2 - 12);\nloop invariant sn == (i * (i - 1) / 2 - 13);\nloop invariant sn == (i * (i - 1) / 2 - 14);\nloop invariant sn == (i * (i - 1) / 2 - 15);\nloop invariant sn == (i * (i - 1) / 2 - 16);\nloop invariant sn == (i * (i - 1) / 2 - 17);\nloop invariant sn == (i * (i - 1) / 2 - 18);\nloop invariant sn == (i * (i - 1) / 2 - 19);\nloop invariant sn == (i * (i - 1) / 2 - 20);\nloop invariant sn == (i * (i - 1) / 2 - 21);\nloop invariant sn == (i * (i - 1) / 2 - 22);\nloop invariant sn == (i * (i - 1) / 2 - 23);\nloop invariant sn == (i * (i - 1) / 2 - 24);\nloop invariant sn == (i * (i - 1) / 2 - 25);\nloop invariant sn == (i * (i - 1) / 2 - 26);\nloop invariant sn == (i * (i - 1) / 2 - 27);\nloop invariant sn == (i * (i - 1) / 2 - 28);\nloop invariant sn == (i * (i - 1) / 2 - 29);\nloop invariant sn == (i * (i - 1) / 2 - 30);\nloop invariant sn == (i * (i - 1) / 2 - 31);\nloop invariant sn == (i * (i - 1) / 2 - 32);\nloop invariant sn == (i * (i - 1) / 2 - 33);\nloop invariant sn == (i * (i - 1) / 2 - 34);\nloop invariant sn == (i * (i - 1) / 2 - 35);\nloop invariant sn == (i * (i - 1) / 2 - 36);\nloop invariant sn == (i * (i - 1) / 2 - 37);\nloop invariant sn == (i * (i - 1) / 2 - 38);\nloop invariant sn == (i * (i - 1) / 2 - 39);\nloop invariant sn == (i * (i - 1) / 2 - 40);\nloop invariant sn == (i * (i - 1) / 2 - 41);\nloop invariant sn == (i * (i - 1) / 2 - 42);\nloop invariant sn == (i * (i - 1) / 2 - 43);\nloop invariant sn == (i * (i - 1) / 2 - 44);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn >= 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) is partially proven to be inductive.\nloop invariant sn == ((i - 1) * (i - 2) / 2) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 1) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 2) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 3) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 4) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 5) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 6) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 7) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 8) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 9) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 10) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 11) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 12) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 13) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 14) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 15) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 16) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 17) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 18) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 19) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 20) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 21) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 22) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 23) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 24) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 25) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 26) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 27) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 28) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 29) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 30) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 31) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 32) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 33) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 34) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 35) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 36) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 37) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 38) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 39) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 40) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 41) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 42) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 43) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 44) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: sn == i - 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i = sn + 1;\nloop invariant sn = i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant i - 1 = sn;\nloop invariant sn + 1 = i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= 1 + n;\nloop invariant i - 1 <= sn <= sn + 1;\nloop invariant sn >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= 1 + n is preserved but not established.\nloop invariant i - 1 <= sn <= sn + 1 is partially proven to be inductive.\nloop invariant sn >= 1 is preserved but not established.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i - 1 <= sn <= sn + 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant n >= i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == (i - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant n >= i >= 1 is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == (i - 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == (i - 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i == 1 ==> sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant 0 <= sn <= n is established but not preserved.\nloop invariant i == n + 1 ==> sn == n is established but not preserved.\nloop invariant i == 1 ==> sn == 0 is established but not preserved.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 36: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i - 1;\nloop invariant i4: i <= n;\nloop invariant i5: sn == i - 1;\nloop invariant i6: 0 <= i <= n;\nloop invariant i7: sn <= n;\nloop invariant i8: i <= n + 1;\nloop invariant i9: sn <= i;\nloop invariant i10: sn == (i - 1);\nloop invariant i11: sn == 0 ==> i <= n;\nloop invariant i12: 1 <= n;\nloop invariant i13: 0 <= sn <= n;\nloop invariant i14: 1 <= i <= n + 1;\nloop invariant i15: (i - 1) <= n;\nloop invariant i16: n <= sn + (n - i + 1);\nloop invariant i17: 1 <= i - 1 <= n;\nloop invariant i18: n <= sn + (n - (i - 1) + 1);\nloop invariant i19: 1 <= i <= n;\nloop invariant i20: sn = (i - 1);\nloop invariant i21: n >= 0;\nloop invariant i22: -n <= sn;\nloop invariant i23: (i <= n ==> sn == i - 1);\nloop invariant i24: (i > n ==> sn == n);\nloop invariant i25: (sn == n ==> i == n + 1);\nloop invariant i26: (sn != n ==> i <= n);\nloop invariant i27: (i > n ==> sn != n);\nloop invariant i28: (sn == 0 ==> i == 1);\nloop invariant i29: (sn != 0 ==> i <= n);\nloop invariant i30: 0 <= i <= n + 1;\nloop invariant i31: i <= n + 1 ==> (sn == n);\nloop invariant i32: 0 <= sn < n;\nloop invariant i33: i == sn + 1;\nloop invariant i34: n >= 1;\nloop invariant i35: n >= sn;\nloop invariant i36: n >= i;\nloop invariant i37: n >= i - 1;\nloop invariant i38: n >= i - 2;\nloop invariant i39: n >= i - 3;\nloop invariant i40: n >= i - 4;\nloop invariant i41: n >= i - 5;\nloop invariant i42: n >= i - 6;\nloop invariant i43: n >= i - 7;\nloop invariant i44: n >= i - 8;\nloop invariant i45: n >= i - 9;\nloop invariant i46: n >= i - 10;\nloop invariant i47: n >= i - 11;\nloop invariant i48: n >= i - 12;\nloop invariant i49: n >= i - 13;\nloop invariant i50: n >= i - 14;\nloop invariant i51: n >= i - 15;\nloop invariant i52: n >= i - 16;\nloop invariant i53: n >= i - 17;\nloop invariant i54: n >= i - 18;\nloop invariant i55: n >= i - 19;\nloop invariant i56: n >= i - 20;\nloop invariant i57: n >= i - 21;\nloop invariant i58: n >= i - 22;\nloop invariant i59: n >= i - 23;\nloop invariant i60: n >= i - 24;\nloop invariant i61: n >= i - 25;\nloop invariant i62: n >= i - 26;\nloop invariant i63: n >= i - 27;\nloop invariant i64: n >= i - 28;\nloop invariant i65: n >= i - 29;\nloop invariant i66: n >= i - 30;\nloop invariant i67: n >= i - 31;\nloop invariant i68: n >= i - 32;\nloop invariant i69: n >= i - 33;\nloop invariant i70: n >= i - 34;\nloop invariant i71: n >= i - 35;\nloop invariant i72: n >= i - 36;\nloop invariant i73: n >= i - 37;\nloop invariant i74: n >= i - 38;\nloop invariant i75: n >= i - 39;\nloop invariant i76: n >= i - 40;\nloop invariant i77: n >= i - 41;\nloop invariant i78: n >= i - 42;\nloop invariant i79: n >= i - 43;\nloop invariant i80: n >= i - 44;\nloop invariant i81: n >= i - 45;\nloop invariant i82: n >= i - 46;\nloop invariant i83: n >= i - 47;\nloop invariant i84: n >= i - 48;\nloop invariant i85: n >= i - 49;\nloop invariant i86: n >= i - 50;\nloop invariant i87: n >= i - 51;\nloop invariant i88: n >= i - 52;\nloop invariant i89: n >= i - 53;\nloop invariant i90: n >= i - 54;\nloop invariant i91: n >= i - 55;\nloop invariant i92: n >= i - 56;\nloop invariant i93: n >= i - 57;\nloop invariant i94: n >= i - 58;\nloop invariant i95: n >= i - 59;\nloop invariant i96: n >= i - 60;\nloop invariant i97: n >= i - 61;\nloop invariant i98: n >= i - 62;\nloop invariant i99: n >= i - 63;\nloop invariant i100: n >= i - 64;\nloop invariant i101: n >= i - 65;\nloop invariant i102: n >= i - 66;\nloop invariant i103: n >= i - 67;\nloop invariant i104: n >= i - 68;\nloop invariant i105: n >= i - 69;\nloop invariant i106: n >= i - 70;\nloop invariant i107: n >= i - 71;\nloop invariant i108: n >= i - 72;\nloop invariant i109: n >= i - 73;\nloop invariant i110: n >= i - 74;\nloop invariant i111: n >= i - 75;\nloop invariant i112: n >= i - 76;\nloop invariant i113: n >= i - 77;\nloop invariant i114: n >= i - 78;\nloop invariant i115: n >= i - 79;\nloop invariant i116: n >= i - 80;\nloop invariant i117: n >= i - 81;\nloop invariant i118: n >= i - 82;\nloop invariant i119: n >= i - 83;\nloop invariant i120: n >= i - 84;\nloop invariant i121: n >= i - 85;\nloop invariant i122: n >= i - 86;\nloop invariant i123: n >= i - 87;\nloop invariant i124: n >= i - 88;\nloop invariant i125: n >= i - 89;\nloop invariant i126: n >= i - 90;\nloop invariant i127: n >= i - 91;\nloop invariant i128: n >= i - 92;\nloop invariant i129: n >= i - 93;\nloop invariant i130: n >= i - 94;\nloop invariant i131: sn >= 1;\nloop invariant i132: sn == (n - i + 1);\nloop invariant i133: sn == ((i - 1) * (i - 2) / 2);\nloop invariant i134: sn == (i * (i - 1) / 2);\nloop invariant i135: sn == (i * (i - 1) / 2 - 1);\nloop invariant i136: sn == (i * (i - 1) / 2 - 2);\nloop invariant i137: sn == (i * (i - 1) / 2 - 3);\nloop invariant i138: sn == (i * (i - 1) / 2 - 4);\nloop invariant i139: sn == (i * (i - 1) / 2 - 5);\nloop invariant i140: sn == (i * (i - 1) / 2 - 6);\nloop invariant i141: sn == (i * (i - 1) / 2 - 7);\nloop invariant i142: sn == (i * (i - 1) / 2 - 8);\nloop invariant i143: sn == (i * (i - 1) / 2 - 9);\nloop invariant i144: sn == (i * (i - 1) / 2 - 10);\nloop invariant i145: sn == (i * (i - 1) / 2 - 11);\nloop invariant i146: sn == (i * (i - 1) / 2 - 12);\nloop invariant i147: sn == (i * (i - 1) / 2 - 13);\nloop invariant i148: sn == (i * (i - 1) / 2 - 14);\nloop invariant i149: sn == (i * (i - 1) / 2 - 15);\nloop invariant i150: sn == (i * (i - 1) / 2 - 16);\nloop invariant i151: sn == (i * (i - 1) / 2 - 17);\nloop invariant i152: sn == (i * (i - 1) / 2 - 18);\nloop invariant i153: sn == (i * (i - 1) / 2 - 19);\nloop invariant i154: sn == (i * (i - 1) / 2 - 20);\nloop invariant i155: sn == (i * (i - 1) / 2 - 21);\nloop invariant i156: sn == (i * (i - 1) / 2 - 22);\nloop invariant i157: sn == (i * (i - 1) / 2 - 23);\nloop invariant i158: sn == (i * (i - 1) / 2 - 24);\nloop invariant i159: sn == (i * (i - 1) / 2 - 25);\nloop invariant i160: sn == (i * (i - 1) / 2 - 26);\nloop invariant i161: sn == (i * (i - 1) / 2 - 27);\nloop invariant i162: sn == (i * (i - 1) / 2 - 28);\nloop invariant i163: sn == (i * (i - 1) / 2 - 29);\nloop invariant i164: sn == (i * (i - 1) / 2 - 30);\nloop invariant i165: sn == (i * (i - 1) / 2 - 31);\nloop invariant i166: sn == (i * (i - 1) / 2 - 32);\nloop invariant i167: sn == (i * (i - 1) / 2 - 33);\nloop invariant i168: sn == (i * (i - 1) / 2 - 34);\nloop invariant i169: sn == (i * (i - 1) / 2 - 35);\nloop invariant i170: sn == (i * (i - 1) / 2 - 36);\nloop invariant i171: sn == (i * (i - 1) / 2 - 37);\nloop invariant i172: sn == (i * (i - 1) / 2 - 38);\nloop invariant i173: sn == (i * (i - 1) / 2 - 39);\nloop invariant i174: sn == (i * (i - 1) / 2 - 40);\nloop invariant i175: sn == (i * (i - 1) / 2 - 41);\nloop invariant i176: sn == (i * (i - 1) / 2 - 42);\nloop invariant i177: sn == (i * (i - 1) / 2 - 43);\nloop invariant i178: sn == (i * (i - 1) / 2 - 44);\nloop invariant i179: i = sn + 1;\nloop invariant i180: sn = i - 1;\nloop invariant i181: i - 1 = sn;\nloop invariant i182: sn + 1 = i;\nloop invariant i183: 1 <= i <= 1 + n;\nloop invariant i184: i - 1 <= sn <= sn + 1;\nloop invariant i185: n >= i >= 1;\nloop invariant i186: i == n + 1 ==> sn == n;\nloop invariant i187: i == 1 ==> sn == 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 114,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i - 1;\n\nloop invariant i5: sn == i - 1;\n\n\n\nloop invariant i9: sn <= i;\nloop invariant i10: sn == (i - 1);\n\n\n\n\n\nloop invariant i16: n <= sn + (n - i + 1);\n\nloop invariant i18: n <= sn + (n - (i - 1) + 1);\n\n\n\n\nloop invariant i23: (i <= n ==> sn == i - 1);\n\nloop invariant i25: (sn == n ==> i == n + 1);\n\n\nloop invariant i28: (sn == 0 ==> i == 1);\n\n\n\n\nloop invariant i33: i == sn + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i184: i - 1 <= sn <= sn + 1;\n\nloop invariant i186: i == n + 1 ==> sn == n;\nloop invariant i187: i == 1 ==> sn == 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i * a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant (i == 1 ==> (sn == 0 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i <= n ==> (sn <= n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i > n ==> (sn == n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i <= n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 > 1 || v2 > 1 || v3 > 1));\nloop invariant (i > n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 <= 1 || v2 <= 1 || v3 <= 1));\nloop invariant (i <= n ==> (sn == (sn + a*i)));\nloop invariant (i > n ==> (sn == (n*a)));\nloop invariant (i <= n ==> (sn == (sn + a*i) || sn == 0));\nloop invariant (i > n ==> (sn == (n*a) || sn == 0));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 1 <= sn <= n * a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant (sn == n * a) ==> (i == n + 1);\nloop invariant (sn == 0) ==> (i == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn <= i * a;\nloop invariant sn >= i * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant v1 == v2;\nloop invariant v2 == v3; loop invariant i == n;\nloop invariant sn == n*a;\nloop invariant v1 == 0;\nloop invariant v2 == 0;\nloop invariant v3 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i - 1 <= n;\nloop invariant 0 <= sn <= (n * a);\nloop invariant 0 <= sn <= a * i;\nloop invariant 0 <= sn <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant v1 >= 0 && v1 <= 1;\nloop invariant v2 >= 0 && v2 <= 1;\nloop invariant v3 >= 0 && v3 <= 1;\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (i == n+1 ==> sn == n*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant i >= 1 && i <= n + 1;\nloop invariant v1 <= INT_MAX && v1 >= INT_MIN;\nloop invariant v2 <= INT_MAX && v2 >= INT_MIN;\nloop invariant v3 <= INT_MAX && v3 >= INT_MIN;\nloop invariant i <= n + 1 ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i == 1 ==> sn == 0 && i == 1 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i == n + 1 ==> sn == n * a && i == n + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i*a;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 3*RAND_MAX;\nloop invariant v1 <= v2 <= v3;\nloop invariant (i == 1 ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "```\n/*@\n\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n*a is partially proven to be inductive.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i * a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant (i == 1 ==> (sn == 0 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i <= n ==> (sn <= n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i > n ==> (sn == n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i <= n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 > 1 || v2 > 1 || v3 > 1));\nloop invariant (i > n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 <= 1 || v2 <= 1 || v3 <= 1));\nloop invariant (i <= n ==> (sn == (sn + a*i)));\nloop invariant (i > n ==> (sn == (n*a)));\nloop invariant (i <= n ==> (sn == (sn + a*i) || sn == 0));\nloop invariant (i > n ==> (sn == (n*a) || sn == 0));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 23: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: a >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n * a is established but not preserved.\nloop invariant 0 <= v1 <= INT_MAX is neither established nor preserved.\nloop invariant 0 <= v2 <= INT_MAX is neither established nor preserved.\nloop invariant 0 <= v3 <= INT_MAX is neither established nor preserved.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 1 <= sn <= n * a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant (sn == n * a) ==> (i == n + 1);\nloop invariant (sn == 0) ==> (i == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant 1 <= sn <= n * a is preserved but not established.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant (sn == n * a) ==> (i == n + 1) is partially proven to be inductive.\nloop invariant (sn == 0) ==> (i == 0) is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn <= i * a;\nloop invariant sn >= i * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n * a is partially proven to be inductive.\nloop invariant sn <= i * a is partially proven to be inductive.\nloop invariant sn >= i * a - a is partially proven to be inductive.\nloop invariant sn <= (i + 1) * a - a is partially proven to be inductive.\nloop invariant sn >= (i + 1) * a - a is preserved but not established.\nloop invariant sn <= (i + 1) * a is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: sn <= i * a;\nloop invariant i4: sn >= i * a - a;\nloop invariant i5: sn <= (i + 1) * a - a;\n\nloop invariant i7: sn <= (i + 1) * a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant v1 == v2;\nloop invariant v2 == v3; loop invariant i == n;\nloop invariant sn == n*a;\nloop invariant v1 == 0;\nloop invariant v2 == 0;\nloop invariant v3 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn == i is preserved but not established.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nloop invariant v1 == v2 is partially proven to be inductive.\nloop invariant v2 == v3; loop invariant i == n is partially proven to be inductive.\nloop invariant sn == n*a is partially proven to be inductive.\nloop invariant v1 == 0 is partially proven to be inductive.\nloop invariant v2 == 0 is partially proven to be inductive.\nloop invariant v3 == 0 is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 15,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i - 1 <= n;\nloop invariant 0 <= sn <= (n * a);\nloop invariant 0 <= sn <= a * i;\nloop invariant 0 <= sn <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant i - 1 <= n is partially proven to be inductive.\nloop invariant 0 <= sn <= (n * a) is partially proven to be inductive.\nloop invariant 0 <= sn <= a * i is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\nloop invariant i4: 0 <= sn <= a * i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant v1 >= 0 && v1 <= 1;\nloop invariant v2 >= 0 && v2 <= 1;\nloop invariant v3 >= 0 && v3 <= 1;\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (i == n+1 ==> sn == n*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant 0 <= sn <= n*a is partially proven to be inductive.\nloop invariant v1 >= 0 && v1 <= 1 is preserved but not established.\nloop invariant v2 >= 0 && v2 <= 1 is preserved but not established.\nloop invariant v3 >= 0 && v3 <= 1 is preserved but not established.\nloop invariant (i == 0 ==> sn == 0) is partially proven to be inductive.\nloop invariant (i == 0 ==> v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant (i == n+1 ==> sn == n*a && v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0) is preserved but not established.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n*a is established but not preserved.\nloop invariant 0 <= v1 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v2 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v3 <= RAND_MAX is neither established nor preserved.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant i >= 1 && i <= n + 1;\nloop invariant v1 <= INT_MAX && v1 >= INT_MIN;\nloop invariant v2 <= INT_MAX && v2 >= INT_MIN;\nloop invariant v3 <= INT_MAX && v3 >= INT_MIN;\nloop invariant i <= n + 1 ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i == 1 ==> sn == 0 && i == 1 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i == n + 1 ==> sn == n * a && i == n + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: v1 <= INT_MAX && v1 >= INT_MIN;\nloop invariant i4: v2 <= INT_MAX && v2 >= INT_MIN;\nloop invariant i5: v3 <= INT_MAX && v3 >= INT_MIN;\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i*a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= v1 is preserved but not established.\nloop invariant 0 <= v2 is preserved but not established.\nloop invariant 0 <= v3 is preserved but not established.\nloop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 3*RAND_MAX;\nloop invariant v1 <= v2 <= v3;\nloop invariant (i == 1 ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n*a is established but not preserved.\nloop invariant 0 <= v1 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v2 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v3 <= RAND_MAX is neither established nor preserved.\nloop invariant v1 + v2 + v3 >= 0 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 <= 3*RAND_MAX is partially proven to be inductive.\nloop invariant v1 <= v2 <= v3 is neither established nor preserved.\nloop invariant (i == 1 ==> sn == 0) is partially proven to be inductive.\nloop invariant (i == n ==> sn == n*a) is neither established nor preserved.\nloop invariant (i > n ==> sn == n*a) is partially proven to be inductive.\nloop invariant (i < 1 ==> sn == 0) is partially proven to be inductive.\nloop invariant (i > n ==> sn == 0) is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\nloop invariant i7: v1 + v2 + v3 <= 3*RAND_MAX;\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: a == 1;\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ''",
                    "houdini_error": "No annotations found"
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 19: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= sn <= n*a;\nloop invariant i3: sn == i*a;\nloop invariant i4: 1 <= i <= n;\nloop invariant i5: sn == i * a;\nloop invariant i6: v1 == unknown_int();\nloop invariant i7: v2 == unknown_int();\nloop invariant i8: v3 == unknown_int();\nloop invariant i9: 0 <= sn <= n;\nloop invariant i10: a >= 0;\nloop invariant i11: v1 >= 0;\nloop invariant i12: v2 >= 0;\nloop invariant i13: v3 >= 0;\nloop invariant i14: v1 <= 1;\nloop invariant i15: v2 <= 1;\nloop invariant i16: v3 <= 1;\nloop invariant i17: (i == 1 ==> (sn == 0 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant i18: (i <= n ==> (sn <= n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant i19: (i > n ==> (sn == n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant i20: (i <= n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 > 1 || v2 > 1 || v3 > 1));\nloop invariant i21: (i > n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 <= 1 || v2 <= 1 || v3 <= 1));\nloop invariant i22: (i <= n ==> (sn == (sn + a*i)));\nloop invariant i23: (i > n ==> (sn == (n*a)));\nloop invariant i24: (i <= n ==> (sn == (sn + a*i) || sn == 0));\nloop invariant i25: (i > n ==> (sn == (n*a) || sn == 0));\nloop invariant i26: 0 <= sn <= n * a;\nloop invariant i27: 0 <= v1 <= INT_MAX;\nloop invariant i28: 0 <= v2 <= INT_MAX;\nloop invariant i29: 0 <= v3 <= INT_MAX;\nloop invariant i30: 0 <= i <= n + 1;\nloop invariant i31: 1 <= sn <= n * a;\nloop invariant i32: (sn == n * a) ==> (i == n + 1);\nloop invariant i33: (sn == 0) ==> (i == 0);\nloop invariant i34: sn <= i * a;\nloop invariant i35: sn >= i * a - a;\nloop invariant i36: sn <= (i + 1) * a - a;\nloop invariant i37: sn >= (i + 1) * a - a;\nloop invariant i38: sn <= (i + 1) * a;\nloop invariant i39: sn == i;\nloop invariant i40: 0 <= v1 <= 1;\nloop invariant i41: 0 <= v2 <= 1;\nloop invariant i42: 0 <= v3 <= 1;\nloop invariant i43: v1 == v2;\nloop invariant i44: v2 == v3; loop invariant i == n;\nloop invariant i45: sn == n*a;\nloop invariant i46: v1 == 0;\nloop invariant i47: v2 == 0;\nloop invariant i48: v3 == 0;\nloop invariant i49: i - 1 <= n;\nloop invariant i50: 0 <= sn <= (n * a);\nloop invariant i51: 0 <= sn <= a * i;\nloop invariant i52: 0 <= sn <= a * n;\nloop invariant i53: 0 <= sn <= a * n && a * i <= a * n;\nloop invariant i54: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant i55: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i;\nloop invariant i56: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n;\nloop invariant i57: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant i58: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n;\nloop invariant i59: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i60: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i61: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i62: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i63: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i64: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i65: 1 <= n;\nloop invariant i66: v1 >= 0 && v1 <= 1;\nloop invariant i67: v2 >= 0 && v2 <= 1;\nloop invariant i68: v3 >= 0 && v3 <= 1;\nloop invariant i69: (i == 0 ==> sn == 0);\nloop invariant i70: (i == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i71: (i == n+1 ==> sn == n*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i72: (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i73: 0 <= v1 <= RAND_MAX;\nloop invariant i74: 0 <= v2 <= RAND_MAX;\nloop invariant i75: 0 <= v3 <= RAND_MAX;\nloop invariant i76: i >= 1 && i <= n + 1;\nloop invariant i77: v1 <= INT_MAX && v1 >= INT_MIN;\nloop invariant i78: v2 <= INT_MAX && v2 >= INT_MIN;\nloop invariant i79: v3 <= INT_MAX && v3 >= INT_MIN;\nloop invariant i80: i <= n + 1 ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i81: i == 1 ==> sn == 0 && i == 1 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i82: i == n + 1 ==> sn == n * a && i == n + 1;\nloop invariant i83: 0 <= v1;\nloop invariant i84: 0 <= v2;\nloop invariant i85: 0 <= v3;\nloop invariant i86: v1 + v2 + v3 >= 0;\nloop invariant i87: v1 + v2 + v3 <= 3*RAND_MAX;\nloop invariant i88: v1 <= v2 <= v3;\nloop invariant i89: (i == 1 ==> sn == 0);\nloop invariant i90: (i == n ==> sn == n*a);\nloop invariant i91: (i > n ==> sn == n*a);\nloop invariant i92: (i < 1 ==> sn == 0);\nloop invariant i93: (i > n ==> sn == 0);\nloop invariant i94: a == 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 34,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: a >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i34: sn <= i * a;\nloop invariant i35: sn >= i * a - a;\nloop invariant i36: sn <= (i + 1) * a - a;\n\nloop invariant i38: sn <= (i + 1) * a;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i51: 0 <= sn <= a * i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i69: (i == 0 ==> sn == 0);\nloop invariant i70: (i == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\n\n\n\n\n\n\nloop invariant i77: v1 <= INT_MAX && v1 >= INT_MIN;\nloop invariant i78: v2 <= INT_MAX && v2 >= INT_MIN;\nloop invariant i79: v3 <= INT_MAX && v3 >= INT_MIN;\n\n\n\n\n\n\n\nloop invariant i87: v1 + v2 + v3 <= 3*RAND_MAX;\n\n\n\n\nloop invariant i92: (i < 1 ==> sn == 0);\n\nloop invariant i94: a == 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "checker_output_after_prune": false
        }
    ],
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/104.c",
            "../dataset/loop_invariants/code2inv/110.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c"
        ],
        "skipped": [],
        "total": 20,
        "success_count": 4,
        "failure_count": 16,
        "success_rate": 0.2
    }
}