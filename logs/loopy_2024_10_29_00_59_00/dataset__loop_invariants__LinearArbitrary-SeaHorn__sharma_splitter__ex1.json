{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= -1;\nloop invariant x == 100;\nloop invariant flag == 1;\nloop invariant x >= y;\nloop invariant y < 0;\nloop invariant flag == 1 ==> x == 99;\nloop invariant flag == 1 ==> y == -2;\nloop invariant flag == 1 ==> flag == 1;\nloop invariant flag == 1 ==> x >= y;\nloop invariant flag == 1 ==> y < 0;\nloop invariant flag < 1 ==> x == 0;\nloop invariant flag < 1 ==> y == 0;\nloop invariant flag < 1 ==> flag == 0;\nloop invariant flag < 1 ==> x >= y;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 50;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant flag < 1;\nloop invariant flag >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant flag == 0 || flag == 1;\nloop invariant (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0);\n*/\n```",
            "```\n/*@\nloop invariant x <= 99;\nloop invariant y <= 0;\nloop invariant y >= -50;\nloop invariant x >= 0;\nloop invariant x < y ==> y == -2;\nloop invariant x >= y ==> x == 99;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant -1 <= y <= 0;\nloop invariant flag == 0 || flag == 1;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y <= (x - 1) * x / 2;\nloop invariant flag == 0 || flag == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y < 50;\nloop invariant x >= 0;\nloop invariant x <= 50;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant x + y >= 0;\nloop invariant x + y <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant (y=-2) ==> flag=1;\nloop invariant flag<1 ==> x <= 50;\nloop invariant flag<1 ==> (1 <= y <= 50);\nloop invariant flag<1 ==> x <= y-1;\nloop invariant flag<1 ==> x >= -1;\nloop invariant flag<1 ==> y >= -1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2;\nloop invariant flag == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant -50 <= x <= 100;\nloop invariant flag == 0 || flag == 1;\nloop invariant flag == 0 ==> x == 0;\nloop invariant flag == 1 ==> y == -2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y < 0;\nloop invariant x >= 99;\nloop invariant flag == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant x <= y;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x + y >= 0;\nloop invariant x + y <= 98;\nloop invariant y - x >= -1;\nloop invariant y - x <= 50;\nloop invariant (y < 0) ==> (flag == 1);\nloop invariant (flag < 1) ==> (x < 50);\nloop invariant (x < 50) ==> (y > 0);\nloop invariant (flag < 1) ==> (y >= 0);\nloop invariant (flag < 1) ==> (y <= 100);\nloop invariant (flag < 1) ==> (x + y >= 0);\nloop invariant (flag < 1) ==> (x + y <= 98);\nloop invariant (flag < 1) ==> (y - x >= -1);\nloop invariant (flag < 1) ==> (y - x <= 50);\nloop invariant (flag < 1) ==> (flag == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant -2 <= y <= 1;\nloop invariant (flag == 0) ==> (x < 50 && y <= 1);\nloop invariant (flag == 1) ==> (x >= 50 && y == -2);\nloop invariant (flag == 0) ==> (x == 0 && y == 0);\nloop invariant (flag == 1) ==> (x == 99 && y == -2);\nloop invariant (flag == 0) ==> (x < y);\nloop invariant (flag == 1) ==> (x >= y);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= -1;\nloop invariant x == 100;\nloop invariant flag == 1;\nloop invariant x >= y;\nloop invariant y < 0;\nloop invariant flag == 1 ==> x == 99;\nloop invariant flag == 1 ==> y == -2;\nloop invariant flag == 1 ==> flag == 1;\nloop invariant flag == 1 ==> x >= y;\nloop invariant flag == 1 ==> y < 0;\nloop invariant flag < 1 ==> x == 0;\nloop invariant flag < 1 ==> y == 0;\nloop invariant flag < 1 ==> flag == 0;\nloop invariant flag < 1 ==> x >= y;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 50;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\nloop invariant flag < 1 ==> x < 100;\nloop invariant flag < 1 ==> y < 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= -1 is preserved but not established.\nloop invariant x == 100 is partially proven to be inductive.\nloop invariant flag == 1 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant y < 0 is partially proven to be inductive.\nloop invariant flag == 1 ==> x == 99 is partially proven to be inductive.\nloop invariant flag == 1 ==> y == -2 is partially proven to be inductive.\nloop invariant flag == 1 ==> flag == 1 is partially proven to be inductive.\nloop invariant flag == 1 ==> x >= y is partially proven to be inductive.\nloop invariant flag == 1 ==> y < 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x == 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> y == 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> flag == 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x >= y is partially proven to be inductive.\nloop invariant flag < 1 ==> y >= 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x < 50 is partially proven to be inductive.\nloop invariant flag < 1 ==> y < 50 is partially proven to be inductive.\nloop invariant flag < 1 ==> x < 100 is partially proven to be inductive.\nloop invariant flag < 1 ==> y < 100 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\nloop invariant i8: flag == 1 ==> flag == 1;\n\n\n\n\nloop invariant i13: flag < 1 ==> flag == 0;\nloop invariant i14: flag < 1 ==> x >= y;\n\n\nloop invariant i17: flag < 1 ==> y < 50;\n\nloop invariant i19: flag < 1 ==> y < 100;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x >= y;\nloop invariant flag < 1;\nloop invariant flag >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant flag <= 0;\nloop invariant flag >= 1;\nloop invariant x >= y;\nloop invariant y >= -1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant y >= -1 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant flag < 1 is partially proven to be inductive.\nloop invariant flag >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant flag <= 0 is partially proven to be inductive.\nloop invariant flag >= 1 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: x >= y;\n\nloop invariant i7: flag >= 0;\n\nloop invariant i9: y <= 100;\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant flag == 0 || flag == 1;\nloop invariant (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant flag == 0 || flag == 1 is partially proven to be inductive.\nloop invariant (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0) is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i2: 0 <= y <= 100000;\nloop invariant i3: x >= (1 + (y - 1) * y / 2);\nloop invariant i4: flag == 0 || flag == 1;\nloop invariant i5: (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x <= 99;\nloop invariant y <= 0;\nloop invariant y >= -50;\nloop invariant x >= 0;\nloop invariant x < y ==> y == -2;\nloop invariant x >= y ==> x == 99;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= 99 is partially proven to be inductive.\nloop invariant y <= 0 is partially proven to be inductive.\nloop invariant y >= -50 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x < y ==> y == -2 is partially proven to be inductive.\nloop invariant x >= y ==> x == 99 is preserved but not established.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\nloop invariant i4: x >= 0;\nloop invariant i5: x < y ==> y == -2;\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant -1 <= y <= 0;\nloop invariant flag == 0 || flag == 1;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y <= (x - 1) * x / 2;\nloop invariant flag == 0 || flag == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is partially proven to be inductive.\nloop invariant -1 <= y <= 0 is partially proven to be inductive.\nloop invariant flag == 0 || flag == 1 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant y <= (x - 1) * x / 2 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\nloop invariant i3: flag == 0 || flag == 1;\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y < 50;\nloop invariant x >= 0;\nloop invariant x <= 50;\nloop invariant y >= -50;\nloop invariant y <= 50;\nloop invariant x + y >= 0;\nloop invariant x + y <= 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y < 50 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 50 is established but not preserved.\nloop invariant y >= -50 is partially proven to be inductive.\nloop invariant y <= 50 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x + y <= 100 is partially proven to be inductive.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= flag <= 1;\nloop invariant (y=-2) ==> flag=1;\nloop invariant flag<1 ==> x <= 50;\nloop invariant flag<1 ==> (1 <= y <= 50);\nloop invariant flag<1 ==> x <= y-1;\nloop invariant flag<1 ==> x >= -1;\nloop invariant flag<1 ==> y >= -1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\nloop invariant flag<1 ==> x <= y+1;\nloop invariant flag<1 ==> x >= y-1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: 0 <= flag <= 1;\n\n\n\n\nloop invariant i6: flag<1 ==> x >= -1;\nloop invariant i7: flag<1 ==> y >= -1;\n\nloop invariant i9: flag<1 ==> x >= y-1;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\nloop invariant i4: x >= 0;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2;\nloop invariant flag == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is partially proven to be inductive.\nloop invariant flag == 1 is preserved but not established.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant -50 <= x <= 100;\nloop invariant flag == 0 || flag == 1;\nloop invariant flag == 0 ==> x == 0;\nloop invariant flag == 1 ==> y == -2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 50 is established but not preserved.\nloop invariant -50 <= x <= 100 is partially proven to be inductive.\nloop invariant flag == 0 || flag == 1 is partially proven to be inductive.\nloop invariant flag == 0 ==> x == 0 is established but not preserved.\nloop invariant flag == 1 ==> y == -2 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\nloop invariant i3: flag == 0 || flag == 1;\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y < 0;\nloop invariant x >= 99;\nloop invariant flag == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y < 0 is preserved but not established.\nloop invariant x >= 99 is partially proven to be inductive.\nloop invariant flag == 1 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant x <= y;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x + y >= 0;\nloop invariant x + y <= 98;\nloop invariant y - x >= -1;\nloop invariant y - x <= 50;\nloop invariant (y < 0) ==> (flag == 1);\nloop invariant (flag < 1) ==> (x < 50);\nloop invariant (x < 50) ==> (y > 0);\nloop invariant (flag < 1) ==> (y >= 0);\nloop invariant (flag < 1) ==> (y <= 100);\nloop invariant (flag < 1) ==> (x + y >= 0);\nloop invariant (flag < 1) ==> (x + y <= 98);\nloop invariant (flag < 1) ==> (y - x >= -1);\nloop invariant (flag < 1) ==> (y - x <= 50);\nloop invariant (flag < 1) ==> (flag == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x + y <= 98 is partially proven to be inductive.\nloop invariant y - x >= -1 is partially proven to be inductive.\nloop invariant y - x <= 50 is partially proven to be inductive.\nloop invariant (y < 0) ==> (flag == 1) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (x < 50) is partially proven to be inductive.\nloop invariant (x < 50) ==> (y > 0) is preserved but not established.\nloop invariant (flag < 1) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (y <= 100) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (x + y >= 0) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (x + y <= 98) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (y - x >= -1) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (y - x <= 50) is partially proven to be inductive.\nloop invariant (flag < 1) ==> (flag == 0) is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\nloop invariant i4: y <= 100;\n\n\n\nloop invariant i8: y - x <= 50;\n\n\n\n\nloop invariant i13: (flag < 1) ==> (y <= 100);\nloop invariant i14: (flag < 1) ==> (x + y >= 0);\n\n\nloop invariant i17: (flag < 1) ==> (y - x <= 50);\nloop invariant i18: (flag < 1) ==> (flag == 0);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant -2 <= y <= 1;\nloop invariant (flag == 0) ==> (x < 50 && y <= 1);\nloop invariant (flag == 1) ==> (x >= 50 && y == -2);\nloop invariant (flag == 0) ==> (x == 0 && y == 0);\nloop invariant (flag == 1) ==> (x == 99 && y == -2);\nloop invariant (flag == 0) ==> (x < y);\nloop invariant (flag == 1) ==> (x >= y);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant -2 <= y <= 1 is partially proven to be inductive.\nloop invariant (flag == 0) ==> (x < 50 && y <= 1) is partially proven to be inductive.\nloop invariant (flag == 1) ==> (x >= 50 && y == -2) is partially proven to be inductive.\nloop invariant (flag == 0) ==> (x == 0 && y == 0) is partially proven to be inductive.\nloop invariant (flag == 1) ==> (x == 99 && y == -2) is partially proven to be inductive.\nloop invariant (flag == 0) ==> (x < y) is preserved but not established.\nloop invariant (flag == 1) ==> (x >= y) is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 59: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: 0 <= y <= -1;\nloop invariant i4: x == 100;\nloop invariant i5: flag == 1;\nloop invariant i6: x >= y;\nloop invariant i7: y < 0;\nloop invariant i8: flag == 1 ==> x == 99;\nloop invariant i9: flag == 1 ==> y == -2;\nloop invariant i10: flag == 1 ==> flag == 1;\nloop invariant i11: flag == 1 ==> x >= y;\nloop invariant i12: flag == 1 ==> y < 0;\nloop invariant i13: flag < 1 ==> x == 0;\nloop invariant i14: flag < 1 ==> y == 0;\nloop invariant i15: flag < 1 ==> flag == 0;\nloop invariant i16: flag < 1 ==> x >= y;\nloop invariant i17: flag < 1 ==> y >= 0;\nloop invariant i18: flag < 1 ==> x < 50;\nloop invariant i19: flag < 1 ==> y < 50;\nloop invariant i20: flag < 1 ==> x < 100;\nloop invariant i21: flag < 1 ==> y < 100;\nloop invariant i22: y >= -1;\nloop invariant i23: x >= 0;\nloop invariant i24: flag < 1;\nloop invariant i25: flag >= 0;\nloop invariant i26: x <= 100;\nloop invariant i27: y <= 100;\nloop invariant i28: flag <= 0;\nloop invariant i29: flag >= 1;\nloop invariant i30: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i31: flag == 0 || flag == 1;\nloop invariant i32: (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0);\nloop invariant i33: x <= 99;\nloop invariant i34: y <= 0;\nloop invariant i35: y >= -50;\nloop invariant i36: x < y ==> y == -2;\nloop invariant i37: x >= y ==> x == 99;\nloop invariant i38: 0 <= x <= 50;\nloop invariant i39: -1 <= y <= 0;\nloop invariant i40: y <= (x - 1) * x / 2;\nloop invariant i41: 0 <= y < 50;\nloop invariant i42: x <= 50;\nloop invariant i43: y <= 50;\nloop invariant i44: x + y >= 0;\nloop invariant i45: x + y <= 100;\nloop invariant i46: 0 <= flag <= 1;\nloop invariant i47: (y=-2) ==> flag=1;\nloop invariant i48: flag<1 ==> x <= 50;\nloop invariant i49: flag<1 ==> (1 <= y <= 50);\nloop invariant i50: flag<1 ==> x <= y-1;\nloop invariant i51: flag<1 ==> x >= -1;\nloop invariant i52: flag<1 ==> y >= -1;\nloop invariant i53: flag<1 ==> x <= y+1;\nloop invariant i54: flag<1 ==> x >= y-1;\nloop invariant i55: y >= 0;\nloop invariant i56: 0 <= x <= 99;\nloop invariant i57: 0 <= y <= 2;\nloop invariant i58: 0 <= y <= 50;\nloop invariant i59: -50 <= x <= 100;\nloop invariant i60: flag == 0 ==> x == 0;\nloop invariant i61: 0 <= y < 0;\nloop invariant i62: x >= 99;\nloop invariant i63: x <= y;\nloop invariant i64: x + y <= 98;\nloop invariant i65: y - x >= -1;\nloop invariant i66: y - x <= 50;\nloop invariant i67: (y < 0) ==> (flag == 1);\nloop invariant i68: (flag < 1) ==> (x < 50);\nloop invariant i69: (x < 50) ==> (y > 0);\nloop invariant i70: (flag < 1) ==> (y >= 0);\nloop invariant i71: (flag < 1) ==> (y <= 100);\nloop invariant i72: (flag < 1) ==> (x + y >= 0);\nloop invariant i73: (flag < 1) ==> (x + y <= 98);\nloop invariant i74: (flag < 1) ==> (y - x >= -1);\nloop invariant i75: (flag < 1) ==> (y - x <= 50);\nloop invariant i76: (flag < 1) ==> (flag == 0);\nloop invariant i77: -2 <= y <= 1;\nloop invariant i78: (flag == 0) ==> (x < 50 && y <= 1);\nloop invariant i79: (flag == 1) ==> (x >= 50 && y == -2);\nloop invariant i80: (flag == 0) ==> (x == 0 && y == 0);\nloop invariant i81: (flag == 1) ==> (x == 99 && y == -2);\nloop invariant i82: (flag == 0) ==> (x < y);\nloop invariant i83: (flag == 1) ==> (x >= y);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: 0 <= y <= 100000;\n\n\n\n\nloop invariant i6: x >= y;\n\nloop invariant i8: flag == 1 ==> x == 99;\nloop invariant i9: flag == 1 ==> y == -2;\nloop invariant i10: flag == 1 ==> flag == 1;\nloop invariant i11: flag == 1 ==> x >= y;\nloop invariant i12: flag == 1 ==> y < 0;\nloop invariant i13: flag < 1 ==> x == 0;\nloop invariant i14: flag < 1 ==> y == 0;\nloop invariant i15: flag < 1 ==> flag == 0;\nloop invariant i16: flag < 1 ==> x >= y;\nloop invariant i17: flag < 1 ==> y >= 0;\nloop invariant i18: flag < 1 ==> x < 50;\nloop invariant i19: flag < 1 ==> y < 50;\nloop invariant i20: flag < 1 ==> x < 100;\nloop invariant i21: flag < 1 ==> y < 100;\nloop invariant i22: y >= -1;\nloop invariant i23: x >= 0;\nloop invariant i24: flag < 1;\nloop invariant i25: flag >= 0;\nloop invariant i26: x <= 100;\nloop invariant i27: y <= 100;\nloop invariant i28: flag <= 0;\n\nloop invariant i30: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i31: flag == 0 || flag == 1;\nloop invariant i32: (flag == 0 ==> x < 50 && y >= 0) || (flag == 1 ==> y < 0);\nloop invariant i33: x <= 99;\nloop invariant i34: y <= 0;\nloop invariant i35: y >= -50;\nloop invariant i36: x < y ==> y == -2;\nloop invariant i37: x >= y ==> x == 99;\nloop invariant i38: 0 <= x <= 50;\nloop invariant i39: -1 <= y <= 0;\nloop invariant i40: y <= (x - 1) * x / 2;\nloop invariant i41: 0 <= y < 50;\nloop invariant i42: x <= 50;\nloop invariant i43: y <= 50;\nloop invariant i44: x + y >= 0;\nloop invariant i45: x + y <= 100;\nloop invariant i46: 0 <= flag <= 1;\n\nloop invariant i48: flag<1 ==> x <= 50;\nloop invariant i49: flag<1 ==> (1 <= y <= 50);\nloop invariant i50: flag<1 ==> x <= y-1;\nloop invariant i51: flag<1 ==> x >= -1;\nloop invariant i52: flag<1 ==> y >= -1;\nloop invariant i53: flag<1 ==> x <= y+1;\nloop invariant i54: flag<1 ==> x >= y-1;\nloop invariant i55: y >= 0;\nloop invariant i56: 0 <= x <= 99;\nloop invariant i57: 0 <= y <= 2;\nloop invariant i58: 0 <= y <= 50;\nloop invariant i59: -50 <= x <= 100;\nloop invariant i60: flag == 0 ==> x == 0;\nloop invariant i61: 0 <= y < 0;\nloop invariant i62: x >= 99;\nloop invariant i63: x <= y;\nloop invariant i64: x + y <= 98;\nloop invariant i65: y - x >= -1;\nloop invariant i66: y - x <= 50;\nloop invariant i67: (y < 0) ==> (flag == 1);\nloop invariant i68: (flag < 1) ==> (x < 50);\nloop invariant i69: (x < 50) ==> (y > 0);\nloop invariant i70: (flag < 1) ==> (y >= 0);\nloop invariant i71: (flag < 1) ==> (y <= 100);\nloop invariant i72: (flag < 1) ==> (x + y >= 0);\nloop invariant i73: (flag < 1) ==> (x + y <= 98);\nloop invariant i74: (flag < 1) ==> (y - x >= -1);\nloop invariant i75: (flag < 1) ==> (y - x <= 50);\nloop invariant i76: (flag < 1) ==> (flag == 0);\nloop invariant i77: -2 <= y <= 1;\nloop invariant i78: (flag == 0) ==> (x < 50 && y <= 1);\nloop invariant i79: (flag == 1) ==> (x >= 50 && y == -2);\nloop invariant i80: (flag == 0) ==> (x == 0 && y == 0);\nloop invariant i81: (flag == 1) ==> (x == 99 && y == -2);\nloop invariant i82: (flag == 0) ==> (x < y);\nloop invariant i83: (flag == 1) ==> (x >= y);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c"
        ],
        "skipped": [],
        "total": 16,
        "success_count": 4,
        "failure_count": 12,
        "success_rate": 0.25
    }
}