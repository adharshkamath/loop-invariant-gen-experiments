{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n; sn <= n ==> sn >= 0;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == n ==> v1 == INT_MAX;\nloop invariant sn == n ==> v2 == INT_MAX;\nloop invariant sn == n ==> v3 == INT_MAX;\nloop invariant sn == n ==> v1 == INT_MIN;\nloop invariant sn == n ==> v2 == INT_MIN;\nloop invariant sn == n ==> v3 == INT_MIN;\nloop invariant sn == n ==> v1 == n;\nloop invariant sn == n ==> v2 == n;\nloop invariant sn == n ==> v3 == n;\nloop invariant sn == n ==> v1 == 0;\nloop invariant sn == n ==> v2 == 0;\nloop invariant sn == n ==> v3 == 0;\nloop invariant sn == n ==> v1 == -1;\nloop invariant sn == n ==> v2 == -1;\nloop invariant sn == n ==> v3 == -1;\nloop invariant sn == n ==> v1 == -2;\nloop invariant sn == n ==> v2 == -2;\nloop invariant sn == n ==> v3 == -2;\nloop invariant sn == n ==> v1 == -3;\nloop invariant sn == n ==> v2 == -3;\nloop invariant sn == n ==> v3 == -3;\nloop invariant sn == n ==> v1 == -4;\nloop invariant sn == n ==> v2 == -4;\nloop invariant sn == n ==> v3 == -4;\nloop invariant sn == n ==> v1 == -5;\nloop invariant sn == n ==> v2 == -5;\nloop invariant sn == n ==> v3 == -5;\nloop invariant sn == n ==> v1 == -6;\nloop invariant sn == n ==> v2 == -6;\nloop invariant sn == n ==> v3 == -6;\nloop invariant sn == n ==> v1 == -7;\nloop invariant sn == n ==> v2 == -7;\nloop invariant sn == n ==> v3 == -7;\nloop invariant sn == n ==> v1 == -8;\nloop invariant sn == n ==> v2 == -8;\nloop invariant sn == n ==> v3 == -8;\nloop invariant sn == n ==> v1 == -9;\nloop invariant sn == n ==> v2 == -9;\nloop invariant sn == n ==> v3 == -9;\nloop invariant sn == n ==> v1 == -10;\nloop invariant sn == n ==> v2 == -10;\nloop invariant sn == n ==> v3 == -10;\nloop invariant sn == n ==> v1 == -11;\nloop invariant sn == n ==> v2 == -11;\nloop invariant sn == n ==> v3 == -11;\nloop invariant sn == n ==> v1 == -12;\nloop invariant sn == n ==> v2 == -12;\nloop invariant sn == n ==> v3 == -12;\nloop invariant sn == n ==> v1 == -13;\nloop invariant sn == n ==> v2 == -13;\nloop invariant sn == n ==> v3 == -13;\nloop invariant sn == n ==> v1 == -14;\nloop invariant sn == n ==> v2 == -14;\nloop invariant sn == n ==> v3 == -14;\nloop invariant sn == n ==> v1 == -15;\nloop invariant sn == n ==> v2 == -15;\nloop invariant sn == n ==> v3 == -15;\nloop invariant sn == n ==> v1 == -16;\nloop invariant sn == n ==> v2 == -16;\nloop invariant sn == n ==> v3 == -16;\nloop invariant sn == n ==> v1 == -17;\nloop invariant sn == n ==> v2 == -17;\nloop invariant sn == n ==> v3 == -17;\nloop invariant sn == n ==> v1 == -18;\nloop invariant sn == n ==> v2 == -18;\nloop invariant sn == n ==> v3 == -18;\nloop invariant sn == n ==> v1 == -19;\nloop invariant sn == n ==> v2 == -19;\nloop invariant sn == n ==> v3 == -19;\nloop invariant sn == n ==> v1 == -20;\nloop invariant sn == n ==> v2 == -20;\nloop invariant sn == n ==> v3 == -20;\nloop invariant sn == n ==> v1 == -21;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n <= 2147483647;\nloop invariant -2147483648 <= v1 <= 2147483647;\nloop invariant -2147483648 <= v2 <= 2147483647;\nloop invariant -2147483648 <= v3 <= 2147483647;\nloop invariant 0 < i <= n;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant i <= n;\nloop invariant -2147483648 <= sn <= 2147483647;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn + 1 == ((i * (i + 1)) / 2);\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\n*/\n```",
            "```\n/*@\nloop invariant i = i + 1;\nloop invariant sn = sn + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant (sn + 1) >= 0;\nloop invariant (sn + 1) <= n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == v2;\nloop invariant v1 == v3;\nloop invariant v2 == v3;\nloop invariant sn == n || sn == 0;\nloop invariant i == n + 1;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\nloop invariant sn == 0 || sn == n;\nloop invariant i == 1 || i == n + 1;\nloop invariant (i <= n ==> sn == n);\nloop invariant (i > n ==> sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\nloop invariant sn == (i-1);\nloop invariant (v1 <= v2) ==> (v2 <= v3);\nloop invariant (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == n * (n + 1) / 2;\nloop invariant i == n || i == 0;\nloop invariant i == n || sn == 0;\nloop invariant i == n || sn == n * (n + 1) / 2;\nloop invariant i == 0 || sn == n * (n + 1) / 2;\nloop invariant i == 0 || sn == 0;\nloop invariant i == 0 || sn == n * (n + 1) / 2;\nloop invariant i == n || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant ((i <= n ==> sn == i) && (i > n ==> sn == 0));\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant (sn == n ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (sn == n ==> v1 == v2 && v2 == v3);\nloop invariant (sn == 0 ==> v1 == v2 && v2 == v3);\nloop invariant (sn == n ==> v1 == v2);\nloop invariant (sn == 0 ==> v1 == v2);\nloop invariant (sn == n ==> v2 == v3);\nloop invariant (sn == 0 ==> v2 == v3);\nloop invariant (sn == n ==> v1 == v3);\nloop invariant (sn == 0 ==> v1 == v3);\nloop invariant (sn == n ==> v1 == v2 + v3);\nloop invariant (sn == 0 ==> v1 == v2 + v3);\nloop invariant (sn == n ==> v2 == v1 + v3);\nloop invariant (sn == 0 ==> v2 == v1 + v3);\nloop invariant (sn == n ==> v3 == v1 + v2);\nloop invariant (sn == 0 ==> v3 == v1 + v2);\nloop invariant (sn == n ==> v1 + v2 + v3 == 1);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 1);\nloop invariant (sn == n ==> v1 + v2 + v3 == 2);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 2);\nloop invariant (sn == n ==> v1 + v2 + v3 == 3);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 3);\nloop invariant (sn == n ==> v1 + v2 + v3 == 4);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 4);\nloop invariant (sn == n ==> v1 + v2 + v3 == 5);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 5);\nloop invariant (sn == n ==> v1 + v2 + v3 == 6);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 6);\nloop invariant (sn == n ==> v1 + v2 + v3 == 7);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 7);\nloop invariant (sn == n ==> v1 + v2 + v3 == 8);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 8);\nloop invariant (sn == n ==> v1 + v2 + v3 == 9);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 9);\nloop invariant (sn == n ==> v1 + v2 + v3 == 10);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 10);\nloop invariant (sn == n ==> v1 + v2 + v3 == 11);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 11);\nloop invariant (sn == n ==> v1 + v2 + v3 == 12);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 12);\nloop invariant (sn == n ==> v1 + v2 + v3 == 13);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 13);\nloop invariant (sn == n ==> v1 + v2 + v3 == 14);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 14);\nloop invariant (sn == n ==> v1 + v2 + v3 == 15);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 15);\nloop invariant (sn == n ==> v1 + v2 + v3 == 16);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 16);\nloop invariant (sn == n ==> v1 + v2 + v3 == 17);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant v1 != v2;\nloop invariant v1 != v3;\nloop invariant v2 != v3;\nloop invariant (sn == n ==> 1 <= i <= n);\nloop invariant (sn == n ==> v1 == unknown_int());\nloop invariant (sn == n ==> v2 == unknown_int());\nloop invariant (sn == n ==> v3 == unknown_int());\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn == 0 ==> v1 == unknown_int());\nloop invariant (sn == 0 ==> v2 == unknown_int());\nloop invariant (sn == 0 ==> v3 == unknown_int());\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn == (i - 1);\nloop invariant v1 == sn;\nloop invariant v2 == sn;\nloop invariant v3 == sn;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn == (i - 1);\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 20,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n; sn <= n ==> sn >= 0;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant sn == 0 ==> v1 == 0;\nloop invariant sn == 0 ==> v2 == 0;\nloop invariant sn == 0 ==> v3 == 0;\nloop invariant sn == n ==> v1 == INT_MAX;\nloop invariant sn == n ==> v2 == INT_MAX;\nloop invariant sn == n ==> v3 == INT_MAX;\nloop invariant sn == n ==> v1 == INT_MIN;\nloop invariant sn == n ==> v2 == INT_MIN;\nloop invariant sn == n ==> v3 == INT_MIN;\nloop invariant sn == n ==> v1 == n;\nloop invariant sn == n ==> v2 == n;\nloop invariant sn == n ==> v3 == n;\nloop invariant sn == n ==> v1 == 0;\nloop invariant sn == n ==> v2 == 0;\nloop invariant sn == n ==> v3 == 0;\nloop invariant sn == n ==> v1 == -1;\nloop invariant sn == n ==> v2 == -1;\nloop invariant sn == n ==> v3 == -1;\nloop invariant sn == n ==> v1 == -2;\nloop invariant sn == n ==> v2 == -2;\nloop invariant sn == n ==> v3 == -2;\nloop invariant sn == n ==> v1 == -3;\nloop invariant sn == n ==> v2 == -3;\nloop invariant sn == n ==> v3 == -3;\nloop invariant sn == n ==> v1 == -4;\nloop invariant sn == n ==> v2 == -4;\nloop invariant sn == n ==> v3 == -4;\nloop invariant sn == n ==> v1 == -5;\nloop invariant sn == n ==> v2 == -5;\nloop invariant sn == n ==> v3 == -5;\nloop invariant sn == n ==> v1 == -6;\nloop invariant sn == n ==> v2 == -6;\nloop invariant sn == n ==> v3 == -6;\nloop invariant sn == n ==> v1 == -7;\nloop invariant sn == n ==> v2 == -7;\nloop invariant sn == n ==> v3 == -7;\nloop invariant sn == n ==> v1 == -8;\nloop invariant sn == n ==> v2 == -8;\nloop invariant sn == n ==> v3 == -8;\nloop invariant sn == n ==> v1 == -9;\nloop invariant sn == n ==> v2 == -9;\nloop invariant sn == n ==> v3 == -9;\nloop invariant sn == n ==> v1 == -10;\nloop invariant sn == n ==> v2 == -10;\nloop invariant sn == n ==> v3 == -10;\nloop invariant sn == n ==> v1 == -11;\nloop invariant sn == n ==> v2 == -11;\nloop invariant sn == n ==> v3 == -11;\nloop invariant sn == n ==> v1 == -12;\nloop invariant sn == n ==> v2 == -12;\nloop invariant sn == n ==> v3 == -12;\nloop invariant sn == n ==> v1 == -13;\nloop invariant sn == n ==> v2 == -13;\nloop invariant sn == n ==> v3 == -13;\nloop invariant sn == n ==> v1 == -14;\nloop invariant sn == n ==> v2 == -14;\nloop invariant sn == n ==> v3 == -14;\nloop invariant sn == n ==> v1 == -15;\nloop invariant sn == n ==> v2 == -15;\nloop invariant sn == n ==> v3 == -15;\nloop invariant sn == n ==> v1 == -16;\nloop invariant sn == n ==> v2 == -16;\nloop invariant sn == n ==> v3 == -16;\nloop invariant sn == n ==> v1 == -17;\nloop invariant sn == n ==> v2 == -17;\nloop invariant sn == n ==> v3 == -17;\nloop invariant sn == n ==> v1 == -18;\nloop invariant sn == n ==> v2 == -18;\nloop invariant sn == n ==> v3 == -18;\nloop invariant sn == n ==> v1 == -19;\nloop invariant sn == n ==> v2 == -19;\nloop invariant sn == n ==> v3 == -19;\nloop invariant sn == n ==> v1 == -20;\nloop invariant sn == n ==> v2 == -20;\nloop invariant sn == n ==> v3 == -20;\nloop invariant sn == n ==> v1 == -21;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token 'sn'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= n <= 2147483647;\nloop invariant -2147483648 <= v1 <= 2147483647;\nloop invariant -2147483648 <= v2 <= 2147483647;\nloop invariant -2147483648 <= v3 <= 2147483647;\nloop invariant 0 < i <= n;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant i <= n;\nloop invariant -2147483648 <= sn <= 2147483647;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn + 1 == ((i * (i + 1)) / 2);\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\nloop invariant sn + 1 == sn * (sn + 1) / 2;\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i <= n+1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= n <= 2147483647 is preserved but not established.\nloop invariant -2147483648 <= v1 <= 2147483647 is partially proven to be inductive.\nloop invariant -2147483648 <= v2 <= 2147483647 is partially proven to be inductive.\nloop invariant -2147483648 <= v3 <= 2147483647 is partially proven to be inductive.\nloop invariant 0 < i <= n is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant -2147483648 <= sn <= 2147483647 is partially proven to be inductive.\nloop invariant sn + 1 == sn * (sn + 1) / 2 is preserved but not established.\nloop invariant sn + 1 == ((i * (i + 1)) / 2) is partially proven to be inductive.\nloop invariant sn * (sn + 1) / 2 == sn * sn + sn / 2 is partially proven to be inductive.\nloop invariant i <= n+1 is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: -2147483648 <= v1 <= 2147483647;\nloop invariant i3: -2147483648 <= v2 <= 2147483647;\nloop invariant i4: -2147483648 <= v3 <= 2147483647;\n\n\nloop invariant i7: sn >= 0;\n\nloop invariant i9: -2147483648 <= sn <= 2147483647;\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant i = i + 1;\nloop invariant sn = sn + 1;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant v1 >= -2147483648;\nloop invariant v1 <= 2147483647;\nloop invariant v2 >= -2147483648;\nloop invariant v2 <= 2147483647;\nloop invariant v3 >= -2147483648;\nloop invariant v3 <= 2147483647;\nloop invariant (sn + 1) >= 0;\nloop invariant (sn + 1) <= n + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant v1 >= -2147483648 is partially proven to be inductive.\nloop invariant v1 <= 2147483647 is partially proven to be inductive.\nloop invariant v2 >= -2147483648 is partially proven to be inductive.\nloop invariant v2 <= 2147483647 is partially proven to be inductive.\nloop invariant v3 >= -2147483648 is partially proven to be inductive.\nloop invariant v3 <= 2147483647 is partially proven to be inductive.\nloop invariant (sn + 1) >= 0 is partially proven to be inductive.\nloop invariant (sn + 1) <= n + 1 is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i;\nloop invariant i4: v1 >= -2147483648;\nloop invariant i5: v1 <= 2147483647;\nloop invariant i6: v2 >= -2147483648;\nloop invariant i7: v2 <= 2147483647;\nloop invariant i8: v3 >= -2147483648;\nloop invariant i9: v3 <= 2147483647;\nloop invariant i10: (sn + 1) >= 0;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == v2;\nloop invariant v1 == v3;\nloop invariant v2 == v3;\nloop invariant sn == n || sn == 0;\nloop invariant i == n + 1;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == n;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant v1 >= 0 is preserved but not established.\nloop invariant v2 >= 0 is preserved but not established.\nloop invariant v3 >= 0 is preserved but not established.\nloop invariant v1 <= 1 is preserved but not established.\nloop invariant v2 <= 1 is preserved but not established.\nloop invariant v3 <= 1 is preserved but not established.\nloop invariant v1 == v2 is preserved but not established.\nloop invariant v1 == v3 is preserved but not established.\nloop invariant v2 == v3 is partially proven to be inductive.\nloop invariant sn == n || sn == 0 is partially proven to be inductive.\nloop invariant i == n + 1 is preserved but not established.\nloop invariant sn == n is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= unknown_int();\nloop invariant 0 <= v2 <= unknown_int();\nloop invariant 0 <= v3 <= unknown_int();\nloop invariant sn == 0 || sn == n;\nloop invariant i == 1 || i == n + 1;\nloop invariant (i <= n ==> sn == n);\nloop invariant (i > n ==> sn == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\nloop invariant sn == (i-1);\nloop invariant (v1 <= v2) ==> (v2 <= v3);\nloop invariant (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant 0 <= v1 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v2 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v3 <= RAND_MAX is neither established nor preserved.\nloop invariant sn == (i-1) is partially proven to be inductive.\nloop invariant (v1 <= v2) ==> (v2 <= v3) is neither established nor preserved.\nloop invariant sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3) is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\nloop invariant i6: sn == (i-1);\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == n * (n + 1) / 2;\nloop invariant i == n || i == 0;\nloop invariant i == n || sn == 0;\nloop invariant i == n || sn == n * (n + 1) / 2;\nloop invariant i == 0 || sn == n * (n + 1) / 2;\nloop invariant i == 0 || sn == 0;\nloop invariant i == 0 || sn == n * (n + 1) / 2;\nloop invariant i == n || sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant 0 <= v1 <= 1 is preserved but not established.\nloop invariant 0 <= v2 <= 1 is preserved but not established.\nloop invariant 0 <= v3 <= 1 is preserved but not established.\nloop invariant sn == n * (n + 1) / 2 is preserved but not established.\nloop invariant i == n || i == 0 is partially proven to be inductive.\nloop invariant i == n || sn == 0 is partially proven to be inductive.\nloop invariant i == n || sn == n * (n + 1) / 2 is partially proven to be inductive.\nloop invariant i == 0 || sn == n * (n + 1) / 2 is partially proven to be inductive.\nloop invariant i == 0 || sn == 0 is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= i;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant ((i <= n ==> sn == i) && (i > n ==> sn == 0));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i;\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant (sn == n ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (sn == n ==> v1 == v2 && v2 == v3);\nloop invariant (sn == 0 ==> v1 == v2 && v2 == v3);\nloop invariant (sn == n ==> v1 == v2);\nloop invariant (sn == 0 ==> v1 == v2);\nloop invariant (sn == n ==> v2 == v3);\nloop invariant (sn == 0 ==> v2 == v3);\nloop invariant (sn == n ==> v1 == v3);\nloop invariant (sn == 0 ==> v1 == v3);\nloop invariant (sn == n ==> v1 == v2 + v3);\nloop invariant (sn == 0 ==> v1 == v2 + v3);\nloop invariant (sn == n ==> v2 == v1 + v3);\nloop invariant (sn == 0 ==> v2 == v1 + v3);\nloop invariant (sn == n ==> v3 == v1 + v2);\nloop invariant (sn == 0 ==> v3 == v1 + v2);\nloop invariant (sn == n ==> v1 + v2 + v3 == 1);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 1);\nloop invariant (sn == n ==> v1 + v2 + v3 == 2);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 2);\nloop invariant (sn == n ==> v1 + v2 + v3 == 3);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 3);\nloop invariant (sn == n ==> v1 + v2 + v3 == 4);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 4);\nloop invariant (sn == n ==> v1 + v2 + v3 == 5);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 5);\nloop invariant (sn == n ==> v1 + v2 + v3 == 6);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 6);\nloop invariant (sn == n ==> v1 + v2 + v3 == 7);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 7);\nloop invariant (sn == n ==> v1 + v2 + v3 == 8);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 8);\nloop invariant (sn == n ==> v1 + v2 + v3 == 9);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 9);\nloop invariant (sn == n ==> v1 + v2 + v3 == 10);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 10);\nloop invariant (sn == n ==> v1 + v2 + v3 == 11);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 11);\nloop invariant (sn == n ==> v1 + v2 + v3 == 12);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 12);\nloop invariant (sn == n ==> v1 + v2 + v3 == 13);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 13);\nloop invariant (sn == n ==> v1 + v2 + v3 == 14);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 14);\nloop invariant (sn == n ==> v1 + v2 + v3 == 15);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 15);\nloop invariant (sn == n ==> v1 + v2 + v3 == 16);\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 16);\nloop invariant (sn == n ==> v1 + v2 + v3 == 17);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn >= i is preserved but not established.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nloop invariant (sn == n ==> v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 == v2 && v2 == v3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 == v2 && v2 == v3) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 == v2) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 == v2) is partially proven to be inductive.\nloop invariant (sn == n ==> v2 == v3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v2 == v3) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 == v3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 == v3) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 == v2 + v3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 == v2 + v3) is partially proven to be inductive.\nloop invariant (sn == n ==> v2 == v1 + v3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v2 == v1 + v3) is partially proven to be inductive.\nloop invariant (sn == n ==> v3 == v1 + v2) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v3 == v1 + v2) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 1) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 1) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 2) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 2) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 3) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 3) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 4) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 4) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 5) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 5) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 6) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 6) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 7) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 7) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 8) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 8) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 9) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 9) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 10) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 10) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 11) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 11) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 12) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 12) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 13) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 13) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 14) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 14) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 15) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 15) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 16) is partially proven to be inductive.\nloop invariant (sn == 0 ==> v1 + v2 + v3 == 16) is partially proven to be inductive.\nloop invariant (sn == n ==> v1 + v2 + v3 == 17) is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i is preserved but not established.\nloop invariant 0 <= v1 <= RAND_MAX is partially proven to be inductive.\nloop invariant 0 <= v2 <= RAND_MAX is partially proven to be inductive.\nloop invariant 0 <= v3 <= RAND_MAX is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant v1 != v2;\nloop invariant v1 != v3;\nloop invariant v2 != v3;\nloop invariant (sn == n ==> 1 <= i <= n);\nloop invariant (sn == n ==> v1 == unknown_int());\nloop invariant (sn == n ==> v2 == unknown_int());\nloop invariant (sn == n ==> v3 == unknown_int());\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn == 0 ==> v1 == unknown_int());\nloop invariant (sn == 0 ==> v2 == unknown_int());\nloop invariant (sn == 0 ==> v3 == unknown_int());\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn <= i;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant sn == (i - 1);\nloop invariant v1 == sn;\nloop invariant v2 == sn;\nloop invariant v3 == sn;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant v1 >= 0 is neither established nor preserved.\nloop invariant v2 >= 0 is neither established nor preserved.\nloop invariant v3 >= 0 is neither established nor preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant v1 == sn is neither established nor preserved.\nloop invariant v2 == sn is neither established nor preserved.\nloop invariant v3 == sn is neither established nor preserved.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\nloop invariant i4: sn <= i;\n\n\n\nloop invariant i8: sn == (i - 1);\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 14: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\nloop invariant i1: 0 <= sn <= n;\nloop invariant i2: sn == (i - 1);\nloop invariant i3: v1 == unknown_int();\nloop invariant i4: v2 == unknown_int();\nloop invariant i5: v3 == unknown_int();\nloop invariant i6: 0 <= sn <= n; sn <= n ==> sn >= 0;\nloop invariant i7: 0 <= v1 <= INT_MAX;\nloop invariant i8: 0 <= v2 <= INT_MAX;\nloop invariant i9: 0 <= v3 <= INT_MAX;\nloop invariant i10: sn == 0 ==> v1 == 0;\nloop invariant i11: sn == 0 ==> v2 == 0;\nloop invariant i12: sn == 0 ==> v3 == 0;\nloop invariant i13: sn == n ==> v1 == INT_MAX;\nloop invariant i14: sn == n ==> v2 == INT_MAX;\nloop invariant i15: sn == n ==> v3 == INT_MAX;\nloop invariant i16: sn == n ==> v1 == INT_MIN;\nloop invariant i17: sn == n ==> v2 == INT_MIN;\nloop invariant i18: sn == n ==> v3 == INT_MIN;\nloop invariant i19: sn == n ==> v1 == n;\nloop invariant i20: sn == n ==> v2 == n;\nloop invariant i21: sn == n ==> v3 == n;\nloop invariant i22: sn == n ==> v1 == 0;\nloop invariant i23: sn == n ==> v2 == 0;\nloop invariant i24: sn == n ==> v3 == 0;\nloop invariant i25: sn == n ==> v1 == -1;\nloop invariant i26: sn == n ==> v2 == -1;\nloop invariant i27: sn == n ==> v3 == -1;\nloop invariant i28: sn == n ==> v1 == -2;\nloop invariant i29: sn == n ==> v2 == -2;\nloop invariant i30: sn == n ==> v3 == -2;\nloop invariant i31: sn == n ==> v1 == -3;\nloop invariant i32: sn == n ==> v2 == -3;\nloop invariant i33: sn == n ==> v3 == -3;\nloop invariant i34: sn == n ==> v1 == -4;\nloop invariant i35: sn == n ==> v2 == -4;\nloop invariant i36: sn == n ==> v3 == -4;\nloop invariant i37: sn == n ==> v1 == -5;\nloop invariant i38: sn == n ==> v2 == -5;\nloop invariant i39: sn == n ==> v3 == -5;\nloop invariant i40: sn == n ==> v1 == -6;\nloop invariant i41: sn == n ==> v2 == -6;\nloop invariant i42: sn == n ==> v3 == -6;\nloop invariant i43: sn == n ==> v1 == -7;\nloop invariant i44: sn == n ==> v2 == -7;\nloop invariant i45: sn == n ==> v3 == -7;\nloop invariant i46: sn == n ==> v1 == -8;\nloop invariant i47: sn == n ==> v2 == -8;\nloop invariant i48: sn == n ==> v3 == -8;\nloop invariant i49: sn == n ==> v1 == -9;\nloop invariant i50: sn == n ==> v2 == -9;\nloop invariant i51: sn == n ==> v3 == -9;\nloop invariant i52: sn == n ==> v1 == -10;\nloop invariant i53: sn == n ==> v2 == -10;\nloop invariant i54: sn == n ==> v3 == -10;\nloop invariant i55: sn == n ==> v1 == -11;\nloop invariant i56: sn == n ==> v2 == -11;\nloop invariant i57: sn == n ==> v3 == -11;\nloop invariant i58: sn == n ==> v1 == -12;\nloop invariant i59: sn == n ==> v2 == -12;\nloop invariant i60: sn == n ==> v3 == -12;\nloop invariant i61: sn == n ==> v1 == -13;\nloop invariant i62: sn == n ==> v2 == -13;\nloop invariant i63: sn == n ==> v3 == -13;\nloop invariant i64: sn == n ==> v1 == -14;\nloop invariant i65: sn == n ==> v2 == -14;\nloop invariant i66: sn == n ==> v3 == -14;\nloop invariant i67: sn == n ==> v1 == -15;\nloop invariant i68: sn == n ==> v2 == -15;\nloop invariant i69: sn == n ==> v3 == -15;\nloop invariant i70: sn == n ==> v1 == -16;\nloop invariant i71: sn == n ==> v2 == -16;\nloop invariant i72: sn == n ==> v3 == -16;\nloop invariant i73: sn == n ==> v1 == -17;\nloop invariant i74: sn == n ==> v2 == -17;\nloop invariant i75: sn == n ==> v3 == -17;\nloop invariant i76: sn == n ==> v1 == -18;\nloop invariant i77: sn == n ==> v2 == -18;\nloop invariant i78: sn == n ==> v3 == -18;\nloop invariant i79: sn == n ==> v1 == -19;\nloop invariant i80: sn == n ==> v2 == -19;\nloop invariant i81: sn == n ==> v3 == -19;\nloop invariant i82: sn == n ==> v1 == -20;\nloop invariant i83: sn == n ==> v2 == -20;\nloop invariant i84: sn == n ==> v3 == -20;\nloop invariant i85: sn == n ==> v1 == -21;\nloop invariant i86: 1 <= n <= 2147483647;\nloop invariant i87: -2147483648 <= v1 <= 2147483647;\nloop invariant i88: -2147483648 <= v2 <= 2147483647;\nloop invariant i89: -2147483648 <= v3 <= 2147483647;\nloop invariant i90: 0 < i <= n;\nloop invariant i91: sn <= n;\nloop invariant i92: sn >= 0;\nloop invariant i93: i <= n;\nloop invariant i94: -2147483648 <= sn <= 2147483647;\nloop invariant i95: sn + 1 == sn * (sn + 1) / 2;\nloop invariant i96: sn + 1 == ((i * (i + 1)) / 2);\nloop invariant i97: sn * (sn + 1) / 2 == sn * sn + sn / 2;\nloop invariant i98: i <= n+1;\nloop invariant i99: i = i + 1;\nloop invariant i100: sn = sn + 1;\nloop invariant i101: v1 = unknown_int();\nloop invariant i102: v2 = unknown_int();\nloop invariant i103: v3 = unknown_int();\nloop invariant i104: 0 <= i <= n;\nloop invariant i105: sn <= i;\nloop invariant i106: v1 >= -2147483648;\nloop invariant i107: v1 <= 2147483647;\nloop invariant i108: v2 >= -2147483648;\nloop invariant i109: v2 <= 2147483647;\nloop invariant i110: v3 >= -2147483648;\nloop invariant i111: v3 <= 2147483647;\nloop invariant i112: (sn + 1) >= 0;\nloop invariant i113: (sn + 1) <= n + 1;\nloop invariant i114: 0 <= n;\nloop invariant i115: i >= 1;\nloop invariant i116: i <= n + 1;\nloop invariant i117: v1 >= 0;\nloop invariant i118: v2 >= 0;\nloop invariant i119: v3 >= 0;\nloop invariant i120: v1 <= 1;\nloop invariant i121: v2 <= 1;\nloop invariant i122: v3 <= 1;\nloop invariant i123: v1 == v2;\nloop invariant i124: v1 == v3;\nloop invariant i125: v2 == v3;\nloop invariant i126: sn == n || sn == 0;\nloop invariant i127: i == n + 1;\nloop invariant i128: sn == n;\nloop invariant i129: 0 <= v1 <= unknown_int();\nloop invariant i130: 0 <= v2 <= unknown_int();\nloop invariant i131: 0 <= v3 <= unknown_int();\nloop invariant i132: sn == 0 || sn == n;\nloop invariant i133: i == 1 || i == n + 1;\nloop invariant i134: (i <= n ==> sn == n);\nloop invariant i135: (i > n ==> sn == 0);\nloop invariant i136: 0 <= v1 <= RAND_MAX;\nloop invariant i137: 0 <= v2 <= RAND_MAX;\nloop invariant i138: 0 <= v3 <= RAND_MAX;\nloop invariant i139: sn == (i-1);\nloop invariant i140: (v1 <= v2) ==> (v2 <= v3);\nloop invariant i141: sn == n || sn == 0 ==> (v1 <= v2) ==> (v2 <= v3);\nloop invariant i142: 0 <= v1 <= 1;\nloop invariant i143: 0 <= v2 <= 1;\nloop invariant i144: 0 <= v3 <= 1;\nloop invariant i145: sn == n * (n + 1) / 2;\nloop invariant i146: i == n || i == 0;\nloop invariant i147: i == n || sn == 0;\nloop invariant i148: i == n || sn == n * (n + 1) / 2;\nloop invariant i149: i == 0 || sn == n * (n + 1) / 2;\nloop invariant i150: i == 0 || sn == 0;\nloop invariant i151: 1 <= i <= n;\nloop invariant i152: ((i <= n ==> sn == i) && (i > n ==> sn == 0));\nloop invariant i153: sn == i;\nloop invariant i154: sn >= i;\nloop invariant i155: (sn == n ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i156: (sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i157: (sn == n ==> v1 == v2 && v2 == v3);\nloop invariant i158: (sn == 0 ==> v1 == v2 && v2 == v3);\nloop invariant i159: (sn == n ==> v1 == v2);\nloop invariant i160: (sn == 0 ==> v1 == v2);\nloop invariant i161: (sn == n ==> v2 == v3);\nloop invariant i162: (sn == 0 ==> v2 == v3);\nloop invariant i163: (sn == n ==> v1 == v3);\nloop invariant i164: (sn == 0 ==> v1 == v3);\nloop invariant i165: (sn == n ==> v1 == v2 + v3);\nloop invariant i166: (sn == 0 ==> v1 == v2 + v3);\nloop invariant i167: (sn == n ==> v2 == v1 + v3);\nloop invariant i168: (sn == 0 ==> v2 == v1 + v3);\nloop invariant i169: (sn == n ==> v3 == v1 + v2);\nloop invariant i170: (sn == 0 ==> v3 == v1 + v2);\nloop invariant i171: (sn == n ==> v1 + v2 + v3 == 1);\nloop invariant i172: (sn == 0 ==> v1 + v2 + v3 == 1);\nloop invariant i173: (sn == n ==> v1 + v2 + v3 == 2);\nloop invariant i174: (sn == 0 ==> v1 + v2 + v3 == 2);\nloop invariant i175: (sn == n ==> v1 + v2 + v3 == 3);\nloop invariant i176: (sn == 0 ==> v1 + v2 + v3 == 3);\nloop invariant i177: (sn == n ==> v1 + v2 + v3 == 4);\nloop invariant i178: (sn == 0 ==> v1 + v2 + v3 == 4);\nloop invariant i179: (sn == n ==> v1 + v2 + v3 == 5);\nloop invariant i180: (sn == 0 ==> v1 + v2 + v3 == 5);\nloop invariant i181: (sn == n ==> v1 + v2 + v3 == 6);\nloop invariant i182: (sn == 0 ==> v1 + v2 + v3 == 6);\nloop invariant i183: (sn == n ==> v1 + v2 + v3 == 7);\nloop invariant i184: (sn == 0 ==> v1 + v2 + v3 == 7);\nloop invariant i185: (sn == n ==> v1 + v2 + v3 == 8);\nloop invariant i186: (sn == 0 ==> v1 + v2 + v3 == 8);\nloop invariant i187: (sn == n ==> v1 + v2 + v3 == 9);\nloop invariant i188: (sn == 0 ==> v1 + v2 + v3 == 9);\nloop invariant i189: (sn == n ==> v1 + v2 + v3 == 10);\nloop invariant i190: (sn == 0 ==> v1 + v2 + v3 == 10);\nloop invariant i191: (sn == n ==> v1 + v2 + v3 == 11);\nloop invariant i192: (sn == 0 ==> v1 + v2 + v3 == 11);\nloop invariant i193: (sn == n ==> v1 + v2 + v3 == 12);\nloop invariant i194: (sn == 0 ==> v1 + v2 + v3 == 12);\nloop invariant i195: (sn == n ==> v1 + v2 + v3 == 13);\nloop invariant i196: (sn == 0 ==> v1 + v2 + v3 == 13);\nloop invariant i197: (sn == n ==> v1 + v2 + v3 == 14);\nloop invariant i198: (sn == 0 ==> v1 + v2 + v3 == 14);\nloop invariant i199: (sn == n ==> v1 + v2 + v3 == 15);\nloop invariant i200: (sn == 0 ==> v1 + v2 + v3 == 15);\nloop invariant i201: (sn == n ==> v1 + v2 + v3 == 16);\nloop invariant i202: (sn == 0 ==> v1 + v2 + v3 == 16);\nloop invariant i203: (sn == n ==> v1 + v2 + v3 == 17);\nloop invariant i204: v1 != v2;\nloop invariant i205: v1 != v3;\nloop invariant i206: v2 != v3;\nloop invariant i207: (sn == n ==> 1 <= i <= n);\nloop invariant i208: (sn == n ==> v1 == unknown_int());\nloop invariant i209: (sn == n ==> v2 == unknown_int());\nloop invariant i210: (sn == n ==> v3 == unknown_int());\nloop invariant i211: (sn == 0 ==> i == 1);\nloop invariant i212: (sn == 0 ==> v1 == unknown_int());\nloop invariant i213: (sn == 0 ==> v2 == unknown_int());\nloop invariant i214: (sn == 0 ==> v3 == unknown_int());\nloop invariant i215: v1 == sn;\nloop invariant i216: v2 == sn;\nloop invariant i217: v3 == sn;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 50,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn == (i - 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i87: -2147483648 <= v1 <= 2147483647;\nloop invariant i88: -2147483648 <= v2 <= 2147483647;\nloop invariant i89: -2147483648 <= v3 <= 2147483647;\n\n\nloop invariant i92: sn >= 0;\n\nloop invariant i94: -2147483648 <= sn <= 2147483647;\n\n\n\n\n\n\n\n\n\n\nloop invariant i105: sn <= i;\nloop invariant i106: v1 >= -2147483648;\nloop invariant i107: v1 <= 2147483647;\nloop invariant i108: v2 >= -2147483648;\nloop invariant i109: v2 <= 2147483647;\nloop invariant i110: v3 >= -2147483648;\nloop invariant i111: v3 <= 2147483647;\nloop invariant i112: (sn + 1) >= 0;\n\n\nloop invariant i115: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i139: sn == (i-1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i211: (sn == 0 ==> i == 1);\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c"
        ],
        "skipped": [],
        "total": 2,
        "success_count": 1,
        "failure_count": 1,
        "success_rate": 0.5
    }
}