{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant y % 2 == 0 ==> (x % 2) == (y % 2);\nloop invariant y % 2 == 1 ==> (x % 2) != (y % 2);\nloop invariant (x % 2) == 0 ==> x % 4 == 0;\nloop invariant (x % 2) == 1 ==> x % 4 == 2;\nloop invariant (x % 4) == 0 ==> x % 8 == 0;\nloop invariant (x % 4) == 2 ==> x % 8 == 2;\nloop invariant (x % 8) == 0 ==> x % 16 == 0;\nloop invariant (x % 8) == 2 ==> x % 16 == 2;\nloop invariant (x % 8) == 4 ==> x % 16 == 4;\nloop invariant (x % 8) == 6 ==> x % 16 == 6;\nloop invariant (x % 16) == 0 ==> x % 32 == 0;\nloop invariant (x % 16) == 2 ==> x % 32 == 2;\nloop invariant (x % 16) == 4 ==> x % 32 == 4;\nloop invariant (x % 16) == 6 ==> x % 32 == 6;\nloop invariant (x % 16) == 8 ==> x % 32 == 8;\nloop invariant (x % 16) == 10 ==> x % 32 == 10;\nloop invariant (x % 16) == 12 ==> x % 32 == 12;\nloop invariant (x % 16) == 14 ==> x % 32 == 14;\nloop invariant (x % 32) == 0 ==> x % 64 == 0;\nloop invariant (x % 32) == 2 ==> x % 64 == 2;\nloop invariant (x % 32) == 4 ==> x % 64 == 4;\nloop invariant (x % 32) == 6 ==> x % 64 == 6;\nloop invariant (x % 32) == 8 ==> x % 64 == 8;\nloop invariant (x % 32) == 10 ==> x % 64 == 10;\nloop invariant (x % 32) == 12 ==> x % 64 == 12;\nloop invariant (x % 32) == 14 ==> x % 64 == 14;\nloop invariant (x % 32) == 16 ==> x % 64 == 16;\nloop invariant (x % 32) == 18 ==> x % 64 == 18;\nloop invariant (x % 32) == 20 ==> x % 64 == 20;\nloop invariant (x % 32) == 22 ==> x % 64 == 22;\nloop invariant (x % 32) == 24 ==> x % 64 == 24;\nloop invariant (x % 32) == 26 ==> x % 64 == 26;\nloop invariant (x % 32) == 28 ==> x % 64 == 28;\nloop invariant (x % 32) == 30 ==> x % 64 == 30;\nloop invariant (x % 64) == 0 ==> x % 128 == 0;\nloop invariant (x % 64) == 2 ==> x % 128 == 2;\nloop invariant (x % 64) == 4 ==> x % 128 == 4;\nloop invariant (x % 64) == 6 ==> x % 128 == 6;\nloop invariant (x % 64) == 8 ==> x % 128 == 8;\nloop invariant (x % 64) == 10 ==> x % 128 == 10;\nloop invariant (x % 64) == 12 ==> x % 128 == 12;\nloop invariant (x % 64) == 14 ==> x % 128 == 14;\nloop invariant (x % 64) == 16 ==> x % 128 == 16;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y < 100000;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (x % 2 == 0);\nloop invariant x % 2 != y % 2 ==> (x % 2 == 1);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant y % 2 == 0 ==> (x % 2 == 0);\nloop invariant y % 2 != 0 ==> (x % 2 == 1);\nloop invariant x % 2 == y % 2 ==> (x % 2 == 0);\nloop invariant x % 2 != y % 2 ==> (x % 2 == 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant x <= y * 2;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant y % 2 == 0 ==> x % 2 == 0 && x >= 2 * y;\nloop invariant y % 2 == 1 ==> x % 2 == 1 && x >= 2 * y + 1;\nloop invariant x >= y;\nloop invariant x >= 2 * y;\nloop invariant x >= 2 * y - 1;\nloop invariant x >= 2 * y + 2;\nloop invariant x >= 2 * y - 2;\nloop invariant x >= 2 * y + 2 * 2;\nloop invariant x >= 2 * y - 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> x >= (y + 2);\nloop invariant x % 2 == 1 ==> x >= (y - 1);\nloop invariant x % 2 == 0 ==> x <= (y + 4);\nloop invariant x % 2 == 1 ==> x <= (y + 2);\nloop invariant x % 2 == 0 ==> x >= (y + 4);\nloop invariant x % 2 == 1 ==> x <= (y - 1);\n*/\n```",
            "```\n/*@\nloop invariant ( ((x % 2) == (y % 2)) ==> x >= 0);\nloop invariant ( ((x % 2) == (y % 2)) ==> x <= 99);\nloop invariant ( ((x % 2) == (y % 2)) ==> x >= y);\nloop invariant ( ((x % 2) == (y % 2)) ==> y >= 0);\nloop invariant ( ((x % 2) == (y % 2)) ==> y <= 99);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant 0 <= y <= 99999;\nloop invariant y % 2 == x % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant x == y || x == y + 1;\nloop invariant x % 2 == y % 2;\nloop invariant x == 99 || y == 99;\nloop invariant x % 2 == y % 2 || x == 99 || y == 99;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2^32 - 1;\nloop invariant (x % 2) == (y % 2);\nloop invariant x >= y;\nloop invariant x <= y + 10;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant y % 2 == 0 ==> (x % 2) == (y % 2);\nloop invariant y % 2 == 1 ==> (x % 2) != (y % 2);\nloop invariant (x % 2) == 0 ==> x % 4 == 0;\nloop invariant (x % 2) == 1 ==> x % 4 == 2;\nloop invariant (x % 4) == 0 ==> x % 8 == 0;\nloop invariant (x % 4) == 2 ==> x % 8 == 2;\nloop invariant (x % 8) == 0 ==> x % 16 == 0;\nloop invariant (x % 8) == 2 ==> x % 16 == 2;\nloop invariant (x % 8) == 4 ==> x % 16 == 4;\nloop invariant (x % 8) == 6 ==> x % 16 == 6;\nloop invariant (x % 16) == 0 ==> x % 32 == 0;\nloop invariant (x % 16) == 2 ==> x % 32 == 2;\nloop invariant (x % 16) == 4 ==> x % 32 == 4;\nloop invariant (x % 16) == 6 ==> x % 32 == 6;\nloop invariant (x % 16) == 8 ==> x % 32 == 8;\nloop invariant (x % 16) == 10 ==> x % 32 == 10;\nloop invariant (x % 16) == 12 ==> x % 32 == 12;\nloop invariant (x % 16) == 14 ==> x % 32 == 14;\nloop invariant (x % 32) == 0 ==> x % 64 == 0;\nloop invariant (x % 32) == 2 ==> x % 64 == 2;\nloop invariant (x % 32) == 4 ==> x % 64 == 4;\nloop invariant (x % 32) == 6 ==> x % 64 == 6;\nloop invariant (x % 32) == 8 ==> x % 64 == 8;\nloop invariant (x % 32) == 10 ==> x % 64 == 10;\nloop invariant (x % 32) == 12 ==> x % 64 == 12;\nloop invariant (x % 32) == 14 ==> x % 64 == 14;\nloop invariant (x % 32) == 16 ==> x % 64 == 16;\nloop invariant (x % 32) == 18 ==> x % 64 == 18;\nloop invariant (x % 32) == 20 ==> x % 64 == 20;\nloop invariant (x % 32) == 22 ==> x % 64 == 22;\nloop invariant (x % 32) == 24 ==> x % 64 == 24;\nloop invariant (x % 32) == 26 ==> x % 64 == 26;\nloop invariant (x % 32) == 28 ==> x % 64 == 28;\nloop invariant (x % 32) == 30 ==> x % 64 == 30;\nloop invariant (x % 64) == 0 ==> x % 128 == 0;\nloop invariant (x % 64) == 2 ==> x % 128 == 2;\nloop invariant (x % 64) == 4 ==> x % 128 == 4;\nloop invariant (x % 64) == 6 ==> x % 128 == 6;\nloop invariant (x % 64) == 8 ==> x % 128 == 8;\nloop invariant (x % 64) == 10 ==> x % 128 == 10;\nloop invariant (x % 64) == 12 ==> x % 128 == 12;\nloop invariant (x % 64) == 14 ==> x % 128 == 14;\nloop invariant (x % 64) == 16 ==> x % 128 == 16;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 198 is established but not preserved.\nloop invariant y % 2 == 0 ==> (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> (x % 2) != (y % 2) is established but not preserved.\nloop invariant (x % 2) == 0 ==> x % 4 == 0 is established but not preserved.\nloop invariant (x % 2) == 1 ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant (x % 4) == 0 ==> x % 8 == 0 is established but not preserved.\nloop invariant (x % 4) == 2 ==> x % 8 == 2 is partially proven to be inductive.\nloop invariant (x % 8) == 0 ==> x % 16 == 0 is established but not preserved.\nloop invariant (x % 8) == 2 ==> x % 16 == 2 is partially proven to be inductive.\nloop invariant (x % 8) == 4 ==> x % 16 == 4 is partially proven to be inductive.\nloop invariant (x % 8) == 6 ==> x % 16 == 6 is partially proven to be inductive.\nloop invariant (x % 16) == 0 ==> x % 32 == 0 is established but not preserved.\nloop invariant (x % 16) == 2 ==> x % 32 == 2 is partially proven to be inductive.\nloop invariant (x % 16) == 4 ==> x % 32 == 4 is partially proven to be inductive.\nloop invariant (x % 16) == 6 ==> x % 32 == 6 is partially proven to be inductive.\nloop invariant (x % 16) == 8 ==> x % 32 == 8 is partially proven to be inductive.\nloop invariant (x % 16) == 10 ==> x % 32 == 10 is partially proven to be inductive.\nloop invariant (x % 16) == 12 ==> x % 32 == 12 is partially proven to be inductive.\nloop invariant (x % 16) == 14 ==> x % 32 == 14 is partially proven to be inductive.\nloop invariant (x % 32) == 0 ==> x % 64 == 0 is established but not preserved.\nloop invariant (x % 32) == 2 ==> x % 64 == 2 is partially proven to be inductive.\nloop invariant (x % 32) == 4 ==> x % 64 == 4 is partially proven to be inductive.\nloop invariant (x % 32) == 6 ==> x % 64 == 6 is partially proven to be inductive.\nloop invariant (x % 32) == 8 ==> x % 64 == 8 is partially proven to be inductive.\nloop invariant (x % 32) == 10 ==> x % 64 == 10 is partially proven to be inductive.\nloop invariant (x % 32) == 12 ==> x % 64 == 12 is partially proven to be inductive.\nloop invariant (x % 32) == 14 ==> x % 64 == 14 is partially proven to be inductive.\nloop invariant (x % 32) == 16 ==> x % 64 == 16 is partially proven to be inductive.\nloop invariant (x % 32) == 18 ==> x % 64 == 18 is partially proven to be inductive.\nloop invariant (x % 32) == 20 ==> x % 64 == 20 is partially proven to be inductive.\nloop invariant (x % 32) == 22 ==> x % 64 == 22 is partially proven to be inductive.\nloop invariant (x % 32) == 24 ==> x % 64 == 24 is partially proven to be inductive.\nloop invariant (x % 32) == 26 ==> x % 64 == 26 is partially proven to be inductive.\nloop invariant (x % 32) == 28 ==> x % 64 == 28 is partially proven to be inductive.\nloop invariant (x % 32) == 30 ==> x % 64 == 30 is partially proven to be inductive.\nloop invariant (x % 64) == 0 ==> x % 128 == 0 is established but not preserved.\nloop invariant (x % 64) == 2 ==> x % 128 == 2 is partially proven to be inductive.\nloop invariant (x % 64) == 4 ==> x % 128 == 4 is partially proven to be inductive.\nloop invariant (x % 64) == 6 ==> x % 128 == 6 is partially proven to be inductive.\nloop invariant (x % 64) == 8 ==> x % 128 == 8 is partially proven to be inductive.\nloop invariant (x % 64) == 10 ==> x % 128 == 10 is partially proven to be inductive.\nloop invariant (x % 64) == 12 ==> x % 128 == 12 is partially proven to be inductive.\nloop invariant (x % 64) == 14 ==> x % 128 == 14 is partially proven to be inductive.\nloop invariant (x % 64) == 16 ==> x % 128 == 16 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> (x % 2) == (y % 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= 99 is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y < 100000;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y < 100000 is preserved but not established.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2 ==> (x % 2 == 0);\nloop invariant x % 2 != y % 2 ==> (x % 2 == 1);\nloop invariant x >= 0;\nloop invariant x <= 99;\nloop invariant y % 2 == 0 ==> (x % 2 == 0);\nloop invariant y % 2 != 0 ==> (x % 2 == 1);\nloop invariant x % 2 == y % 2 ==> (x % 2 == 0);\nloop invariant x % 2 != y % 2 ==> (x % 2 == 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x % 2 == y % 2 ==> (x % 2 == 0) is partially proven to be inductive.\nloop invariant x % 2 != y % 2 ==> (x % 2 == 1) is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> (x % 2 == 0) is partially proven to be inductive.\nloop invariant y % 2 != 0 ==> (x % 2 == 1) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\nloop invariant i4: x >= 0;\n\nloop invariant i6: y % 2 == 0 ==> (x % 2 == 0);\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 198 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant x <= y * 2;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant x <= y * 2 is established but not preserved.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 19,
                "annotations": "```\n/*@\nloop invariant y % 2 == 0 ==> x % 2 == 0 && x >= 2 * y;\nloop invariant y % 2 == 1 ==> x % 2 == 1 && x >= 2 * y + 1;\nloop invariant x >= y;\nloop invariant x >= 2 * y;\nloop invariant x >= 2 * y - 1;\nloop invariant x >= 2 * y + 2;\nloop invariant x >= 2 * y - 2;\nloop invariant x >= 2 * y + 2 * 2;\nloop invariant x >= 2 * y - 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y % 2 == 0 ==> x % 2 == 0 && x >= 2 * y is preserved but not established.\nloop invariant y % 2 == 1 ==> x % 2 == 1 && x >= 2 * y + 1 is preserved but not established.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x >= 2 * y is partially proven to be inductive.\nloop invariant x >= 2 * y - 1 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 is preserved but not established.\nloop invariant x >= 2 * y - 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nloop invariant x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == 0 ==> x >= (y + 2);\nloop invariant x % 2 == 1 ==> x >= (y - 1);\nloop invariant x % 2 == 0 ==> x <= (y + 4);\nloop invariant x % 2 == 1 ==> x <= (y + 2);\nloop invariant x % 2 == 0 ==> x >= (y + 4);\nloop invariant x % 2 == 1 ==> x <= (y - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is preserved but not established.\nloop invariant x % 2 == 0 ==> x >= (y + 2) is preserved but not established.\nloop invariant x % 2 == 1 ==> x >= (y - 1) is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x <= (y + 4) is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x <= (y + 2) is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= (y + 4) is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x <= (y - 1) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant ( ((x % 2) == (y % 2)) ==> x >= 0);\nloop invariant ( ((x % 2) == (y % 2)) ==> x <= 99);\nloop invariant ( ((x % 2) == (y % 2)) ==> x >= y);\nloop invariant ( ((x % 2) == (y % 2)) ==> y >= 0);\nloop invariant ( ((x % 2) == (y % 2)) ==> y <= 99);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( ((x % 2) == (y % 2)) ==> x >= 0) is partially proven to be inductive.\nloop invariant ( ((x % 2) == (y % 2)) ==> x <= 99) is established but not preserved.\nloop invariant ( ((x % 2) == (y % 2)) ==> x >= y) is neither established nor preserved.\nloop invariant ( ((x % 2) == (y % 2)) ==> y >= 0) is partially proven to be inductive.\nloop invariant ( ((x % 2) == (y % 2)) ==> y <= 99) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: ( ((x % 2) == (y % 2)) ==> x >= 0);\n\n\nloop invariant i4: ( ((x % 2) == (y % 2)) ==> y >= 0);\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2) is established but not preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant 0 <= y <= 99999;\nloop invariant y % 2 == x % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 198 is established but not preserved.\nloop invariant 0 <= y <= 99999 is preserved but not established.\nloop invariant y % 2 == x % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant x == y || x == y + 1;\nloop invariant x % 2 == y % 2;\nloop invariant x == 99 || y == 99;\nloop invariant x % 2 == y % 2 || x == 99 || y == 99;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant x == y || x == y + 1 is preserved but not established.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 is preserved but not established.\nloop invariant x % 2 == y % 2 || x == 99 || y == 99 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 is partially proven to be inductive.\nloop invariant x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2^32 - 1;\nloop invariant (x % 2) == (y % 2);\nloop invariant x >= y;\nloop invariant x <= y + 10;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 137: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x <= 198;\nloop invariant i2: y % 2 == 0 ==> (x % 2) == (y % 2);\nloop invariant i3: y % 2 == 1 ==> (x % 2) != (y % 2);\nloop invariant i4: (x % 2) == 0 ==> x % 4 == 0;\nloop invariant i5: (x % 2) == 1 ==> x % 4 == 2;\nloop invariant i6: (x % 4) == 0 ==> x % 8 == 0;\nloop invariant i7: (x % 4) == 2 ==> x % 8 == 2;\nloop invariant i8: (x % 8) == 0 ==> x % 16 == 0;\nloop invariant i9: (x % 8) == 2 ==> x % 16 == 2;\nloop invariant i10: (x % 8) == 4 ==> x % 16 == 4;\nloop invariant i11: (x % 8) == 6 ==> x % 16 == 6;\nloop invariant i12: (x % 16) == 0 ==> x % 32 == 0;\nloop invariant i13: (x % 16) == 2 ==> x % 32 == 2;\nloop invariant i14: (x % 16) == 4 ==> x % 32 == 4;\nloop invariant i15: (x % 16) == 6 ==> x % 32 == 6;\nloop invariant i16: (x % 16) == 8 ==> x % 32 == 8;\nloop invariant i17: (x % 16) == 10 ==> x % 32 == 10;\nloop invariant i18: (x % 16) == 12 ==> x % 32 == 12;\nloop invariant i19: (x % 16) == 14 ==> x % 32 == 14;\nloop invariant i20: (x % 32) == 0 ==> x % 64 == 0;\nloop invariant i21: (x % 32) == 2 ==> x % 64 == 2;\nloop invariant i22: (x % 32) == 4 ==> x % 64 == 4;\nloop invariant i23: (x % 32) == 6 ==> x % 64 == 6;\nloop invariant i24: (x % 32) == 8 ==> x % 64 == 8;\nloop invariant i25: (x % 32) == 10 ==> x % 64 == 10;\nloop invariant i26: (x % 32) == 12 ==> x % 64 == 12;\nloop invariant i27: (x % 32) == 14 ==> x % 64 == 14;\nloop invariant i28: (x % 32) == 16 ==> x % 64 == 16;\nloop invariant i29: (x % 32) == 18 ==> x % 64 == 18;\nloop invariant i30: (x % 32) == 20 ==> x % 64 == 20;\nloop invariant i31: (x % 32) == 22 ==> x % 64 == 22;\nloop invariant i32: (x % 32) == 24 ==> x % 64 == 24;\nloop invariant i33: (x % 32) == 26 ==> x % 64 == 26;\nloop invariant i34: (x % 32) == 28 ==> x % 64 == 28;\nloop invariant i35: (x % 32) == 30 ==> x % 64 == 30;\nloop invariant i36: (x % 64) == 0 ==> x % 128 == 0;\nloop invariant i37: (x % 64) == 2 ==> x % 128 == 2;\nloop invariant i38: (x % 64) == 4 ==> x % 128 == 4;\nloop invariant i39: (x % 64) == 6 ==> x % 128 == 6;\nloop invariant i40: (x % 64) == 8 ==> x % 128 == 8;\nloop invariant i41: (x % 64) == 10 ==> x % 128 == 10;\nloop invariant i42: (x % 64) == 12 ==> x % 128 == 12;\nloop invariant i43: (x % 64) == 14 ==> x % 128 == 14;\nloop invariant i44: (x % 64) == 16 ==> x % 128 == 16;\nloop invariant i45: x >= 0;\nloop invariant i46: y >= 0;\nloop invariant i47: x <= 99;\nloop invariant i48: x % 2 == y % 2;\nloop invariant i49: 0 <= x <= 99;\nloop invariant i50: 0 <= y < 100000;\nloop invariant i51: x % 2 == y % 2 ==> (x % 2 == 0);\nloop invariant i52: x % 2 != y % 2 ==> (x % 2 == 1);\nloop invariant i53: y % 2 == 0 ==> (x % 2 == 0);\nloop invariant i54: y % 2 != 0 ==> (x % 2 == 1);\nloop invariant i55: 0 <= y <= 99;\nloop invariant i56: (x % 2) == (y % 2);\nloop invariant i57: 0 <= y;\nloop invariant i58: x <= y * 2;\nloop invariant i59: y % 2 == 0 ==> x % 2 == 0 && x >= 2 * y;\nloop invariant i60: y % 2 == 1 ==> x % 2 == 1 && x >= 2 * y + 1;\nloop invariant i61: x >= y;\nloop invariant i62: x >= 2 * y;\nloop invariant i63: x >= 2 * y - 1;\nloop invariant i64: x >= 2 * y + 2;\nloop invariant i65: x >= 2 * y - 2;\nloop invariant i66: x >= 2 * y + 2 * 2;\nloop invariant i67: x >= 2 * y - 2 * 2;\nloop invariant i68: x >= 2 * y + 2 * 2 * 2;\nloop invariant i69: x >= 2 * y - 2 * 2 * 2;\nloop invariant i70: x >= 2 * y + 2 * 2 * 2 * 2;\nloop invariant i71: x >= 2 * y - 2 * 2 * 2 * 2;\nloop invariant i72: x >= 2 * y + 2 * 2 * 2 * 2 * 2;\nloop invariant i73: x >= 2 * y - 2 * 2 * 2 * 2 * 2;\nloop invariant i74: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i75: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i76: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i77: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i78: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i79: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i80: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i81: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i82: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i83: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i84: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i85: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i86: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i87: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i88: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i89: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i90: x >= 2 * y + 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i91: x >= 2 * y - 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2;\nloop invariant i92: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i93: y % 2 == 1 ==> x % 2 == 1;\nloop invariant i94: x % 2 == 0 ==> x >= (y + 2);\nloop invariant i95: x % 2 == 1 ==> x >= (y - 1);\nloop invariant i96: x % 2 == 0 ==> x <= (y + 4);\nloop invariant i97: x % 2 == 1 ==> x <= (y + 2);\nloop invariant i98: x % 2 == 0 ==> x >= (y + 4);\nloop invariant i99: x % 2 == 1 ==> x <= (y - 1);\nloop invariant i100: ( ((x % 2) == (y % 2)) ==> x >= 0);\nloop invariant i101: ( ((x % 2) == (y % 2)) ==> x <= 99);\nloop invariant i102: ( ((x % 2) == (y % 2)) ==> x >= y);\nloop invariant i103: ( ((x % 2) == (y % 2)) ==> y >= 0);\nloop invariant i104: ( ((x % 2) == (y % 2)) ==> y <= 99);\nloop invariant i105: 0 <= x <= 99; loop invariant 0 <= y; loop invariant (x % 2) == (y % 2);\nloop invariant i106: 0 <= y <= 99999;\nloop invariant i107: y % 2 == x % 2;\nloop invariant i108: x == y || x == y + 1;\nloop invariant i109: x == 99 || y == 99;\nloop invariant i110: x % 2 == y % 2 || x == 99 || y == 99;\nloop invariant i111: x == 99 || y == 99 || x % 2 == y % 2;\nloop invariant i112: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1;\nloop invariant i113: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y;\nloop invariant i114: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2;\nloop invariant i115: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2;\nloop invariant i116: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant i117: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant i118: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant i119: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\nloop invariant i120: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4;\nloop invariant i121: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4;\nloop invariant i122: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2;\nloop invariant i123: x == 99 || y == 99 || x % 2 == y % 2 || x == y + 1 || x == y || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2 || x == y - 4 || x == y + 4 || x == y - 2 || x == y + 2;\nloop invariant i124: 0 <= y <= 2^32 - 1;\nloop invariant i125: x <= y + 10;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 42,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> (x % 2) == (y % 2);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i45: x >= 0;\nloop invariant i46: y >= 0;\n\n\n\n\n\n\nloop invariant i53: y % 2 == 0 ==> (x % 2 == 0);\n\n\n\nloop invariant i57: 0 <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i92: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\nloop invariant i100: ( ((x % 2) == (y % 2)) ==> x >= 0);\n\n\nloop invariant i103: ( ((x % 2) == (y % 2)) ==> y >= 0);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c"
        ],
        "skipped": [],
        "total": 8,
        "success_count": 2,
        "failure_count": 6,
        "success_rate": 0.25
    }
}