{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\twhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 499999 <= y <= 500000;\nloop invariant z == 0;\nloop invariant x % 2 == y % 2;\nloop invariant (x < 500000 ==> x == (x + 1));\nloop invariant (x >= 500000 && x < 750000 ==> x == (x + 1));\nloop invariant (x >= 750000 ==> x == (x + 2));\nloop invariant (x < 500000 ==> y == (y + 0));\nloop invariant (x >= 500000 && x < 750000 ==> y == (y + 1));\nloop invariant (x >= 750000 ==> y == (y + 1));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant x == y;\nloop invariant x == z;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant y >= 1000000;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= 1000000;\nloop invariant y <= 1000000;\nloop invariant z <= 1000000;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000 + (z * 2);\nloop invariant x <= y;\nloop invariant (x < 500000) ==> (x == z);\nloop invariant (x >= 500000) && (x < 750000) ==> (x == z);\nloop invariant (x >= 750000) ==> (x == z + 1);\nloop invariant (x >= 750000) ==> (y == z + 1);\nloop invariant (x == 1000000) ==> (z == 249999);\nloop invariant (x == 1000000) ==> (y == 500000 + 249999);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 1000000;\nloop invariant y >= 0;\nloop invariant y <= 500000;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant x == 0 ==> y == 500000;\nloop invariant x >= 500000 ==> x <= 750000 ==> y == z;\nloop invariant x >= 750000 ==> x < 1000000 ==> y == z + (x - 750000) / 2;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x == 1000000 ==> z == 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000;\nloop invariant 0 <= z <= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant x < y ==> x < 750000;\nloop invariant x >= y ==> x >= 750000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant x >= (1 + y);\nloop invariant 0 <= y <= 500000;\nloop invariant x <= (z + 1000000);\nloop invariant x <= (z + y);\nloop invariant x <= (z + x);\nloop invariant x <= (z + z);\nloop invariant x <= (z + 1000000);\nloop invariant x <= (z + 500000);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 750000;\nloop invariant z == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000 + x;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x < 500000 ==> x == y + 1;\nloop invariant 500000 <= x < 750000 ==> x == y + 1;\nloop invariant 750000 <= x <= 1000000 ==> x == y + 1;\nloop invariant x == 1000000 ==> x == y + 1;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant (x < 500000 ==> x + 1 == x');\nloop invariant (x < 750000 && x >= 500000 ==> x + 1 == x');\nloop invariant (x >= 750000 ==> x + 2 == x');\nloop invariant (x < 500000 ==> y == y');\nloop invariant (x >= 500000 && x < 750000 ==> y == y' + 1);\nloop invariant (x >= 750000 ==> y == y' + 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z >= 0;\nloop invariant x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2;\nloop invariant y = (x + z) * (x + z - 1) / 2;\nloop invariant x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2 + z * (z + 1) / 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant 500000 <= z <= 1000000;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x == 1000000 ==> z == 1000000;\nloop invariant x < 500000 ==> x == z;\nloop invariant x < 500000 ==> y == 0;\nloop invariant x >= 500000 ==> x < 750000 ==> x == z;\nloop invariant x >= 500000 ==> x < 750000 ==> y == z - 500000;\nloop invariant x >= 750000 ==> x == y + z - 750000;\nloop invariant x >= 750000 ==> y == z - 500000;\nloop invariant x >= 750000 ==> z == 1000000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 1000000;loop invariant y >= 0;loop invariant y <= 500000;loop invariant z = 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 499999 <= y <= 500000;\nloop invariant z == 0;\nloop invariant x % 2 == y % 2;\nloop invariant (x < 500000 ==> x == (x + 1));\nloop invariant (x >= 500000 && x < 750000 ==> x == (x + 1));\nloop invariant (x >= 750000 ==> x == (x + 2));\nloop invariant (x < 500000 ==> y == (y + 0));\nloop invariant (x >= 500000 && x < 750000 ==> y == (y + 1));\nloop invariant (x >= 750000 ==> y == (y + 1));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 499999 <= y <= 500000 is partially proven to be inductive.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant (x < 500000 ==> x == (x + 1)) is preserved but not established.\nloop invariant (x >= 500000 && x < 750000 ==> x == (x + 1)) is partially proven to be inductive.\nloop invariant (x >= 750000 ==> x == (x + 2)) is partially proven to be inductive.\nloop invariant (x < 500000 ==> y == (y + 0)) is partially proven to be inductive.\nloop invariant (x >= 500000 && x < 750000 ==> y == (y + 1)) is partially proven to be inductive.\nloop invariant (x >= 750000 ==> y == (y + 1)) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n\n\n\n\nloop invariant i8: (x < 500000 ==> y == (y + 0));\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant x == y;\nloop invariant x == z;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 500000 <= y <= 1000000 is partially proven to be inductive.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant x == y is preserved but not established.\nloop invariant x == z is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant y >= 1000000;\nloop invariant z >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x <= 1000000;\nloop invariant y <= 1000000;\nloop invariant z <= 1000000;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\nloop invariant x <= y;\nloop invariant y <= z;\nloop invariant z <= x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant y >= 1000000 is preserved but not established.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x <= 1000000 is partially proven to be inductive.\nloop invariant y <= 1000000 is partially proven to be inductive.\nloop invariant z <= 1000000 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y <= z is partially proven to be inductive.\nloop invariant z <= x is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: y >= 0;\n\n\nloop invariant i8: z <= 1000000;\n\n\nloop invariant i11: z <= x;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000 + (z * 2);\nloop invariant x <= y;\nloop invariant (x < 500000) ==> (x == z);\nloop invariant (x >= 500000) && (x < 750000) ==> (x == z);\nloop invariant (x >= 750000) ==> (x == z + 1);\nloop invariant (x >= 750000) ==> (y == z + 1);\nloop invariant (x == 1000000) ==> (z == 249999);\nloop invariant (x == 1000000) ==> (y == 500000 + 249999);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 500000 + (z * 2) is established but not preserved.\nloop invariant x <= y is established but not preserved.\nloop invariant (x < 500000) ==> (x == z) is established but not preserved.\nloop invariant (x >= 500000) && (x < 750000) ==> (x == z) is established but not preserved.\nloop invariant (x >= 750000) ==> (x == z + 1) is partially proven to be inductive.\nloop invariant (x >= 750000) ==> (y == z + 1) is established but not preserved.\nloop invariant (x == 1000000) ==> (z == 249999) is partially proven to be inductive.\nloop invariant (x == 1000000) ==> (y == 500000 + 249999) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x < 1000000;\nloop invariant y >= 0;\nloop invariant y <= 500000;\nloop invariant z >= 0;\nloop invariant z <= 1000000;\nloop invariant x == 0 ==> y == 500000;\nloop invariant x >= 500000 ==> x <= 750000 ==> y == z;\nloop invariant x >= 750000 ==> x < 1000000 ==> y == z + (x - 750000) / 2;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x == 1000000 ==> z == 1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x < 1000000 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 500000 is established but not preserved.\nloop invariant z >= 0 is partially proven to be inductive.\nloop invariant z <= 1000000 is partially proven to be inductive.\nloop invariant x == 0 ==> y == 500000 is partially proven to be inductive.\nloop invariant x >= 500000 ==> x <= 750000 ==> y == z is established but not preserved.\nloop invariant x >= 750000 ==> x < 1000000 ==> y == z + (x - 750000) / 2 is partially proven to be inductive.\nloop invariant x == 1000000 ==> y == 1000000 is partially proven to be inductive.\nloop invariant x == 1000000 ==> z == 1000000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\nloop invariant i5: z >= 0;\nloop invariant i6: z <= 1000000;\nloop invariant i7: x == 0 ==> y == 500000;\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000;\nloop invariant 0 <= z <= 0;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 500000 <= y <= 500000 is partially proven to be inductive.\nloop invariant 0 <= z <= 0 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: 0 <= z <= 0;\n\n\nloop invariant i6: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i7: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i8: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i9: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i10: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i11: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i12: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i13: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant x < y ==> x < 750000;\nloop invariant x >= y ==> x >= 750000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 0 <= y <= 1000000 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant x < y ==> x < 750000 is established but not preserved.\nloop invariant x >= y ==> x >= 750000 is established but not preserved.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant x >= (1 + y);\nloop invariant 0 <= y <= 500000;\nloop invariant x <= (z + 1000000);\nloop invariant x <= (z + y);\nloop invariant x <= (z + x);\nloop invariant x <= (z + z);\nloop invariant x <= (z + 1000000);\nloop invariant x <= (z + 500000);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant x >= (1 + y) is preserved but not established.\nloop invariant 0 <= y <= 500000 is partially proven to be inductive.\nloop invariant x <= (z + 1000000) is partially proven to be inductive.\nloop invariant x <= (z + y) is partially proven to be inductive.\nloop invariant x <= (z + x) is partially proven to be inductive.\nloop invariant x <= (z + z) is partially proven to be inductive.\nloop invariant x <= (z + 500000) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n\n\n\nloop invariant i6: x <= (z + x);\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 750000;\nloop invariant z == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 750000 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000 + x;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x < 500000 ==> x == y + 1;\nloop invariant 500000 <= x < 750000 ==> x == y + 1;\nloop invariant 750000 <= x <= 1000000 ==> x == y + 1;\nloop invariant x == 1000000 ==> x == y + 1;\nloop invariant x < 500000 ==> y + x == 1000000;\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 0 <= y <= 500000 + x is partially proven to be inductive.\nloop invariant x < 500000 ==> y + x == 1000000 is preserved but not established.\nloop invariant 500000 <= x < 750000 ==> y + (x - 500000) == 1000000 is partially proven to be inductive.\nloop invariant 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000 is partially proven to be inductive.\nloop invariant x == 1000000 ==> y == 1000000 is partially proven to be inductive.\nloop invariant x < 500000 ==> x == y + 1 is partially proven to be inductive.\nloop invariant 500000 <= x < 750000 ==> x == y + 1 is partially proven to be inductive.\nloop invariant 750000 <= x <= 1000000 ==> x == y + 1 is partially proven to be inductive.\nloop invariant x == 1000000 ==> x == y + 1 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\nloop invariant i2: 0 <= y <= 500000 + x;\n\n\n\n\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant (x < 500000 ==> x + 1 == x');\nloop invariant (x < 750000 && x >= 500000 ==> x + 1 == x');\nloop invariant (x >= 750000 ==> x + 2 == x');\nloop invariant (x < 500000 ==> y == y');\nloop invariant (x >= 500000 && x < 750000 ==> y == y' + 1);\nloop invariant (x >= 750000 ==> y == y' + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: lexical error, illegal character '",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 0 <= y <= 1000000;\nloop invariant i3: z == 0;\n\nloop invariant i5: (x < 750000 && x >= 500000 ==> x + 1 == x');\nloop invariant i6: (x >= 750000 ==> x + 2 == x');\nloop invariant i7: (x < 500000 ==> y == y');\nloop invariant i8: (x >= 500000 && x < 750000 ==> y == y' + 1);\nloop invariant i9: (x >= 750000 ==> y == y' + 1);\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z >= 0;\nloop invariant x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2;\nloop invariant y = (x + z) * (x + z - 1) / 2;\nloop invariant x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2 + z * (z + 1) / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z >= 0;\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 1000000;\nloop invariant 500000 <= z <= 1000000;\nloop invariant x == 1000000 ==> y == 1000000;\nloop invariant x == 1000000 ==> z == 1000000;\nloop invariant x < 500000 ==> x == z;\nloop invariant x < 500000 ==> y == 0;\nloop invariant x >= 500000 ==> x < 750000 ==> x == z;\nloop invariant x >= 500000 ==> x < 750000 ==> y == z - 500000;\nloop invariant x >= 750000 ==> x == y + z - 750000;\nloop invariant x >= 750000 ==> y == z - 500000;\nloop invariant x >= 750000 ==> z == 1000000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 0 <= y <= 1000000 is partially proven to be inductive.\nloop invariant 500000 <= z <= 1000000 is preserved but not established.\nloop invariant x == 1000000 ==> y == 1000000 is partially proven to be inductive.\nloop invariant x == 1000000 ==> z == 1000000 is partially proven to be inductive.\nloop invariant x < 500000 ==> x == z is partially proven to be inductive.\nloop invariant x < 500000 ==> y == 0 is partially proven to be inductive.\nloop invariant x >= 500000 ==> x < 750000 ==> x == z is partially proven to be inductive.\nloop invariant x >= 500000 ==> x < 750000 ==> y == z - 500000 is partially proven to be inductive.\nloop invariant x >= 750000 ==> x == y + z - 750000 is partially proven to be inductive.\nloop invariant x >= 750000 ==> y == z - 500000 is partially proven to be inductive.\nloop invariant x >= 750000 ==> z == 1000000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;loop invariant y >= 0;loop invariant y <= 500000;loop invariant z = 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 80: lexical error, illegal character '",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 499999 <= y <= 500000;\nloop invariant i3: z == 0;\nloop invariant i4: x % 2 == y % 2;\nloop invariant i5: (x < 500000 ==> x == (x + 1));\nloop invariant i6: (x >= 500000 && x < 750000 ==> x == (x + 1));\nloop invariant i7: (x >= 750000 ==> x == (x + 2));\nloop invariant i8: (x < 500000 ==> y == (y + 0));\nloop invariant i9: (x >= 500000 && x < 750000 ==> y == (y + 1));\nloop invariant i10: (x >= 750000 ==> y == (y + 1));\nloop invariant i11: 500000 <= y <= 1000000;\nloop invariant i12: x == y;\nloop invariant i13: x == z;\nloop invariant i14: y >= 1000000;\nloop invariant i15: z >= 0;\nloop invariant i16: x >= 0;\nloop invariant i17: y >= 0;\nloop invariant i18: x <= 1000000;\nloop invariant i19: y <= 1000000;\nloop invariant i20: z <= 1000000;\nloop invariant i21: x <= y;\nloop invariant i22: y <= z;\nloop invariant i23: z <= x;\nloop invariant i24: 500000 <= y <= 500000 + (z * 2);\nloop invariant i25: (x < 500000) ==> (x == z);\nloop invariant i26: (x >= 500000) && (x < 750000) ==> (x == z);\nloop invariant i27: (x >= 750000) ==> (x == z + 1);\nloop invariant i28: (x >= 750000) ==> (y == z + 1);\nloop invariant i29: (x == 1000000) ==> (z == 249999);\nloop invariant i30: (x == 1000000) ==> (y == 500000 + 249999);\nloop invariant i31: x < 1000000;\nloop invariant i32: y <= 500000;\nloop invariant i33: x == 0 ==> y == 500000;\nloop invariant i34: x >= 500000 ==> x <= 750000 ==> y == z;\nloop invariant i35: x >= 750000 ==> x < 1000000 ==> y == z + (x - 750000) / 2;\nloop invariant i36: x == 1000000 ==> y == 1000000;\nloop invariant i37: x == 1000000 ==> z == 1000000;\nloop invariant i38: 500000 <= y <= 500000;\nloop invariant i39: 0 <= z <= 0;\nloop invariant i40: x >= (1 + (y - 1) * y / 2);\nloop invariant i41: x >= (1 + (z - 1) * z / 2);\nloop invariant i42: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i43: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i44: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i45: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i46: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i47: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i48: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i49: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i50: 0 <= y <= 1000000;\nloop invariant i51: x < y ==> x < 750000;\nloop invariant i52: x >= y ==> x >= 750000;\nloop invariant i53: x >= (1 + y);\nloop invariant i54: 0 <= y <= 500000;\nloop invariant i55: x <= (z + 1000000);\nloop invariant i56: x <= (z + y);\nloop invariant i57: x <= (z + x);\nloop invariant i58: x <= (z + z);\nloop invariant i59: x <= (z + 500000);\nloop invariant i60: 500000 <= y <= 750000;\nloop invariant i61: 0 <= y <= 500000 + x;\nloop invariant i62: x < 500000 ==> y + x == 1000000;\nloop invariant i63: 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant i64: 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant i65: x < 500000 ==> x == y + 1;\nloop invariant i66: 500000 <= x < 750000 ==> x == y + 1;\nloop invariant i67: 750000 <= x <= 1000000 ==> x == y + 1;\nloop invariant i68: x == 1000000 ==> x == y + 1;\nloop invariant i69: (x < 500000 ==> x + 1 == x');\nloop invariant i70: (x < 750000 && x >= 500000 ==> x + 1 == x');\nloop invariant i71: (x >= 750000 ==> x + 2 == x');\nloop invariant i72: (x < 500000 ==> y == y');\nloop invariant i73: (x >= 500000 && x < 750000 ==> y == y' + 1);\nloop invariant i74: (x >= 750000 ==> y == y' + 1);\nloop invariant i75: x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2;\nloop invariant i76: y = (x + z) * (x + z - 1) / 2;\nloop invariant i77: x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2 + z * (z + 1) / 2;\nloop invariant i78: 500000 <= z <= 1000000;\nloop invariant i79: x < 500000 ==> x == z;\nloop invariant i80: x < 500000 ==> y == 0;\nloop invariant i81: x >= 500000 ==> x < 750000 ==> x == z;\nloop invariant i82: x >= 500000 ==> x < 750000 ==> y == z - 500000;\nloop invariant i83: x >= 750000 ==> x == y + z - 750000;\nloop invariant i84: x >= 750000 ==> y == z - 500000;\nloop invariant i85: x >= 750000 ==> z == 1000000;\nloop invariant i86: 0 <= x <= 1000000;loop invariant y >= 0;loop invariant y <= 500000;loop invariant z = 0;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 499999 <= y <= 500000;\nloop invariant i3: z == 0;\nloop invariant i4: x % 2 == y % 2;\nloop invariant i5: (x < 500000 ==> x == (x + 1));\nloop invariant i6: (x >= 500000 && x < 750000 ==> x == (x + 1));\nloop invariant i7: (x >= 750000 ==> x == (x + 2));\nloop invariant i8: (x < 500000 ==> y == (y + 0));\nloop invariant i9: (x >= 500000 && x < 750000 ==> y == (y + 1));\nloop invariant i10: (x >= 750000 ==> y == (y + 1));\nloop invariant i11: 500000 <= y <= 1000000;\nloop invariant i12: x == y;\nloop invariant i13: x == z;\nloop invariant i14: y >= 1000000;\nloop invariant i15: z >= 0;\nloop invariant i16: x >= 0;\nloop invariant i17: y >= 0;\nloop invariant i18: x <= 1000000;\nloop invariant i19: y <= 1000000;\nloop invariant i20: z <= 1000000;\nloop invariant i21: x <= y;\nloop invariant i22: y <= z;\nloop invariant i23: z <= x;\nloop invariant i24: 500000 <= y <= 500000 + (z * 2);\nloop invariant i25: (x < 500000) ==> (x == z);\nloop invariant i26: (x >= 500000) && (x < 750000) ==> (x == z);\nloop invariant i27: (x >= 750000) ==> (x == z + 1);\nloop invariant i28: (x >= 750000) ==> (y == z + 1);\nloop invariant i29: (x == 1000000) ==> (z == 249999);\nloop invariant i30: (x == 1000000) ==> (y == 500000 + 249999);\nloop invariant i31: x < 1000000;\nloop invariant i32: y <= 500000;\nloop invariant i33: x == 0 ==> y == 500000;\nloop invariant i34: x >= 500000 ==> x <= 750000 ==> y == z;\nloop invariant i35: x >= 750000 ==> x < 1000000 ==> y == z + (x - 750000) / 2;\nloop invariant i36: x == 1000000 ==> y == 1000000;\nloop invariant i37: x == 1000000 ==> z == 1000000;\nloop invariant i38: 500000 <= y <= 500000;\nloop invariant i39: 0 <= z <= 0;\nloop invariant i40: x >= (1 + (y - 1) * y / 2);\nloop invariant i41: x >= (1 + (z - 1) * z / 2);\nloop invariant i42: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i43: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i44: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i45: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i46: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i47: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i48: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2);\nloop invariant i49: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (z - 1) * z / 2) ==> x >= (1 + (y - 1) * y / 2);\nloop invariant i50: 0 <= y <= 1000000;\nloop invariant i51: x < y ==> x < 750000;\nloop invariant i52: x >= y ==> x >= 750000;\nloop invariant i53: x >= (1 + y);\nloop invariant i54: 0 <= y <= 500000;\nloop invariant i55: x <= (z + 1000000);\nloop invariant i56: x <= (z + y);\nloop invariant i57: x <= (z + x);\nloop invariant i58: x <= (z + z);\nloop invariant i59: x <= (z + 500000);\nloop invariant i60: 500000 <= y <= 750000;\nloop invariant i61: 0 <= y <= 500000 + x;\nloop invariant i62: x < 500000 ==> y + x == 1000000;\nloop invariant i63: 500000 <= x < 750000 ==> y + (x - 500000) == 1000000;\nloop invariant i64: 750000 <= x <= 1000000 ==> y + (x - 750000) == 1000000;\nloop invariant i65: x < 500000 ==> x == y + 1;\nloop invariant i66: 500000 <= x < 750000 ==> x == y + 1;\nloop invariant i67: 750000 <= x <= 1000000 ==> x == y + 1;\nloop invariant i68: x == 1000000 ==> x == y + 1;\n\nloop invariant i70: (x < 750000 && x >= 500000 ==> x + 1 == x');\nloop invariant i71: (x >= 750000 ==> x + 2 == x');\nloop invariant i72: (x < 500000 ==> y == y');\nloop invariant i73: (x >= 500000 && x < 750000 ==> y == y' + 1);\nloop invariant i74: (x >= 750000 ==> y == y' + 1);\nloop invariant i75: x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2;\nloop invariant i76: y = (x + z) * (x + z - 1) / 2;\nloop invariant i77: x + y = (1000000 + 500000) * (1000000 + 500000 - 1) / 2 + z * (z + 1) / 2;\nloop invariant i78: 500000 <= z <= 1000000;\nloop invariant i79: x < 500000 ==> x == z;\nloop invariant i80: x < 500000 ==> y == 0;\nloop invariant i81: x >= 500000 ==> x < 750000 ==> x == z;\nloop invariant i82: x >= 500000 ==> x < 750000 ==> y == z - 500000;\nloop invariant i83: x >= 750000 ==> x == y + z - 750000;\nloop invariant i84: x >= 750000 ==> y == z - 500000;\nloop invariant i85: x >= 750000 ==> z == 1000000;\nloop invariant i86: 0 <= x <= 1000000;loop invariant y >= 0;loop invariant y <= 500000;loop invariant z = 0;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c"
        ],
        "skipped": [],
        "total": 15,
        "success_count": 4,
        "failure_count": 11,
        "success_rate": 0.26666666666666666
    }
}