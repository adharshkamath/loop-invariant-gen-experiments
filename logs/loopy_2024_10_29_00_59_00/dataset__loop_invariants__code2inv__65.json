{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/65.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y == 100 - x;\nloop invariant y <= 100;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x == 101 implies y == 0;\nloop invariant x < 101 implies y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 1 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant y <= 100 - x;\nloop invariant x <= 100 - y;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x <= 100 ==> y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 101;\nloop invariant 99 >= y >= 0;\nloop invariant 99 <= x + y <= 101;\nloop invariant y + x == 100;\nloop invariant y == 100 - x;\nloop invariant (x <= 100) ==> y >= 0;\nloop invariant (x <= 100) ==> y == 100 - x;\nloop invariant (x <= 100) ==> 99 <= x + y <= 101;\nloop invariant (x <= 100) ==> 99 <= y <= 100;\nloop invariant (x <= 100) ==> y + x == 100;\nloop invariant (x <= 100) ==> 99 <= x <= 100;\nloop invariant x == 100 ==> y == 0;\nloop invariant x == 100 ==> y + x == 100;\nloop invariant x == 100 ==> 99 <= y <= 0;\nloop invariant x == 100 ==> y + x == 100;\nloop invariant x == 100 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x >= 1;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -100 <= y <= 0;\nloop invariant y = 100 - x;\nloop invariant x + abs(y) < 101;\nloop invariant x + y < 101;\nloop invariant x + abs(y) = 100;\nloop invariant x + y = 100;\nloop invariant x + abs(y) = 100 ==> x <= 50;\nloop invariant x + y = 100 ==> x <= 50;\nloop invariant x + abs(y) = 100 ==> y <= 50;\nloop invariant x + y = 100 ==> y <= 50;\nloop invariant x + abs(y) = 100 ==> x >= -50;\nloop invariant x + y = 100 ==> x >= -50;\nloop invariant x + abs(y) = 100 ==> y >= -50;\nloop invariant x + y = 100 ==> y >= -50;\nloop invariant x <= 50 ==> abs(y) <= 50;\nloop invariant y <= 50 ==> x <= 50;\nloop invariant x >= -50 ==> abs(y) <= 50;\nloop invariant y >= -50 ==> x <= 50;\nloop invariant x <= 50 ==> y >= -50;\nloop invariant y <= 50 ==> x >= -50;\nloop invariant x >= -50 ==> y >= -50;\nloop invariant y >= -50 ==> x >= -50;\nloop invariant x + abs(y) = 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> x + abs(y) = 100;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x == 101 - y;\nloop invariant x <= x + 1;\nloop invariant y == 100 - (x - 1);\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\nloop invariant x + y >= 100;\nloop invariant x >= 1 && x <= 100 ==> y >= 0 && y <= 99;\nloop invariant x >= 1 && x <= 100 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 100 ==> x + y >= 100;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 101 ==> x + y == 101;\nloop invariant x == 101 ==> y == 100 - x;\nloop invariant x >= 1 && x <= 101 ==> y >= 0 && y <= 100;\nloop invariant x >= 1 && x <= 101 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 101 ==> x + y >= 101;\nloop invariant x == 102 ==> y == -2;\nloop invariant x == 102 ==> x + y == 100;\nloop invariant x == 102 ==> y == 100 - x;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\nloop invariant x + y >= 100;\nloop invariant x >= 1 && x <= 100 ==> y >= 0 && y <= 99;\nloop invariant x >= 1 && x <= 100 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 100 ==> x + y >= 100;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 101 ==> x + y == 101;\nloop invariant x == 101 ==> y == 100 - x;\nloop invariant x >= 1 && x <= 101 ==> y >= 0 && y <= 100;\nloop invariant x >= 1 && x <= 101 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 101 ==> x + y >= 101;\nloop invariant x == 102 ==> y == -2;\nloop invariant x == 102 ==> x + y == 100;\nloop invariant x == 102 ==> y == 100 - x;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y >= 101;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 102 ==> y == -2;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y >= 101;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 102 ==> y == -2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x < 100 ==> y == 100 - x;\nloop invariant x == 100 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant y = 100 - x ==> y >= 0;\nloop invariant y = 100 - x ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y == (100 - x);\nloop invariant (x <= 100) ==> (y >= 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y == 100 - x;\nloop invariant y <= 100;\nloop invariant y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 100 is established but not preserved.\nloop invariant y == 100 - x is neither established nor preserved.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x == 101 implies y == 0;\nloop invariant x < 101 implies y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token 'implies'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 1 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant y <= 100 - x;\nloop invariant x <= 100 - y;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x <= 100 ==> y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x >= y is neither established nor preserved.\nAssertion y >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 101;\nloop invariant 99 >= y >= 0;\nloop invariant 99 <= x + y <= 101;\nloop invariant y + x == 100;\nloop invariant y == 100 - x;\nloop invariant (x <= 100) ==> y >= 0;\nloop invariant (x <= 100) ==> y == 100 - x;\nloop invariant (x <= 100) ==> 99 <= x + y <= 101;\nloop invariant (x <= 100) ==> 99 <= y <= 100;\nloop invariant (x <= 100) ==> y + x == 100;\nloop invariant (x <= 100) ==> 99 <= x <= 100;\nloop invariant x == 100 ==> y == 0;\nloop invariant x == 100 ==> y + x == 100;\nloop invariant x == 100 ==> 99 <= y <= 0;\nloop invariant x == 100 ==> y + x == 100;\nloop invariant x == 100 ==> y == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 101 is partially proven to be inductive.\nloop invariant 99 >= y >= 0 is preserved but not established.\nloop invariant 99 <= x + y <= 101 is preserved but not established.\nloop invariant y + x == 100 is preserved but not established.\nloop invariant y == 100 - x is partially proven to be inductive.\nloop invariant (x <= 100) ==> y >= 0 is partially proven to be inductive.\nloop invariant (x <= 100) ==> y == 100 - x is partially proven to be inductive.\nloop invariant (x <= 100) ==> 99 <= x + y <= 101 is partially proven to be inductive.\nloop invariant (x <= 100) ==> 99 <= y <= 100 is partially proven to be inductive.\nloop invariant (x <= 100) ==> y + x == 100 is partially proven to be inductive.\nloop invariant (x <= 100) ==> 99 <= x <= 100 is preserved but not established.\nloop invariant x == 100 ==> y == 0 is partially proven to be inductive.\nloop invariant x == 100 ==> y + x == 100 is partially proven to be inductive.\nloop invariant x == 100 ==> 99 <= y <= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 0 <= x <= 101;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x >= 1;\nloop invariant y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\nloop invariant i3: x >= 1;\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 22,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant -100 <= y <= 0;\nloop invariant y = 100 - x;\nloop invariant x + abs(y) < 101;\nloop invariant x + y < 101;\nloop invariant x + abs(y) = 100;\nloop invariant x + y = 100;\nloop invariant x + abs(y) = 100 ==> x <= 50;\nloop invariant x + y = 100 ==> x <= 50;\nloop invariant x + abs(y) = 100 ==> y <= 50;\nloop invariant x + y = 100 ==> y <= 50;\nloop invariant x + abs(y) = 100 ==> x >= -50;\nloop invariant x + y = 100 ==> x >= -50;\nloop invariant x + abs(y) = 100 ==> y >= -50;\nloop invariant x + y = 100 ==> y >= -50;\nloop invariant x <= 50 ==> abs(y) <= 50;\nloop invariant y <= 50 ==> x <= 50;\nloop invariant x >= -50 ==> abs(y) <= 50;\nloop invariant y >= -50 ==> x <= 50;\nloop invariant x <= 50 ==> y >= -50;\nloop invariant y <= 50 ==> x >= -50;\nloop invariant x >= -50 ==> y >= -50;\nloop invariant y >= -50 ==> x >= -50;\nloop invariant x + abs(y) = 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> x + abs(y) = 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: y <= 50 ==> x >= -50;\n\nloop invariant i23: y >= -50 ==> x >= -50;\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x == 101 - y;\nloop invariant x <= x + 1;\nloop invariant y == 100 - (x - 1);\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y >= 0 ==> x == 101 - y;\nloop invariant y >= 0 ==> x <= x + 1;\nloop invariant y >= 0 ==> y == 100 - (x - 1);\nloop invariant y >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x == 101 - y is preserved but not established.\nloop invariant x <= x + 1 is partially proven to be inductive.\nloop invariant y == 100 - (x - 1) is partially proven to be inductive.\nloop invariant y >= 0 ==> x <= 100 is partially proven to be inductive.\nloop invariant y >= 0 ==> x == 101 - y is partially proven to be inductive.\nloop invariant y >= 0 ==> x <= x + 1 is partially proven to be inductive.\nloop invariant y >= 0 ==> y == 100 - (x - 1) is partially proven to be inductive.\nloop invariant y >= 0 ==> y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\nloop invariant i4: x <= x + 1;\n\n\n\nloop invariant i8: y >= 0 ==> x <= x + 1;\n\nloop invariant i10: y >= 0 ==> y >= 0;\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\nloop invariant x + y >= 100;\nloop invariant x >= 1 && x <= 100 ==> y >= 0 && y <= 99;\nloop invariant x >= 1 && x <= 100 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 100 ==> x + y >= 100;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 101 ==> x + y == 101;\nloop invariant x == 101 ==> y == 100 - x;\nloop invariant x >= 1 && x <= 101 ==> y >= 0 && y <= 100;\nloop invariant x >= 1 && x <= 101 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 101 ==> x + y >= 101;\nloop invariant x == 102 ==> y == -2;\nloop invariant x == 102 ==> x + y == 100;\nloop invariant x == 102 ==> y == 100 - x;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 99;\nloop invariant y = 100 - x;\nloop invariant x + y >= 100;\nloop invariant x >= 1 && x <= 100 ==> y >= 0 && y <= 99;\nloop invariant x >= 1 && x <= 100 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 100 ==> x + y >= 100;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 101 ==> x + y == 101;\nloop invariant x == 101 ==> y == 100 - x;\nloop invariant x >= 1 && x <= 101 ==> y >= 0 && y <= 100;\nloop invariant x >= 1 && x <= 101 ==> y = 100 - x;\nloop invariant x >= 1 && x <= 101 ==> x + y >= 101;\nloop invariant x == 102 ==> y == -2;\nloop invariant x == 102 ==> x + y == 100;\nloop invariant x == 102 ==> y == 100 - x;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y >= 101;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 102 ==> y == -2;\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y >= 101;\nloop invariant x == 101 ==> y == 0;\nloop invariant x == 102 ==> y == -2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= 101;\n\n\n\n\n\n\nloop invariant i8: x == 101 ==> y == 0;\nloop invariant i9: x == 101 ==> x + y == 101;\n\n\n\n\nloop invariant i14: x == 102 ==> y == -2;\nloop invariant i15: x == 102 ==> x + y == 100;\nloop invariant i16: x == 102 ==> y == 100 - x;\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 101;\nloop invariant 0 <= y <= 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 101 is partially proven to be inductive.\nloop invariant 0 <= y <= 100 is preserved but not established.\nAssertion y >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= 101;\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x < 100 ==> y == 100 - x;\nloop invariant x == 100 ==> y == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x < 100 ==> y == 100 - x is neither established nor preserved.\nloop invariant x == 100 ==> y == 0 is established but not preserved.\nAssertion y >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant y = 100 - x ==> y >= 0;\nloop invariant y = 100 - x ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y = 100 - x;\nloop invariant y <= 100 ==> y = 100 - x;\nloop invariant x >= 0 ==> x = 100 - y;\nloop invariant x <= 100 ==> x = 100 - y;\nloop invariant y >= 0 ==> x = 100 - y;\nloop invariant y <= 100 ==> x = 100 - y;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant y >= 0 ==> y <= 100;\nloop invariant y <= 100 ==> y >= 0;\nloop invariant x >= 0 ==> x <= 100;\nloop invariant x <= 100 ==> x >= 0;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\nloop invariant i5: x >= 0;\n\n\n\nloop invariant i9: x <= 100 ==> x >= 0;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y == (100 - x);\nloop invariant (x <= 100) ==> (y >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant y == (100 - x) is neither established nor preserved.\nloop invariant (x <= 100) ==> (y >= 0) is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token 'implies'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= 100;\nloop invariant i2: y == 100 - x;\nloop invariant i3: y <= 100;\nloop invariant i4: y >= 0;\nloop invariant i5: 0 <= y <= 100;\nloop invariant i6: x == 101 implies y == 0;\nloop invariant i7: x < 101 implies y >= 0;\nloop invariant i8: 1 <= y <= 100;\nloop invariant i9: y = 100 - x;\nloop invariant i10: y <= 100 - x;\nloop invariant i11: x <= 100 - y;\nloop invariant i12: x <= 100;\nloop invariant i13: 0 <= x <= 100;\nloop invariant i14: x <= 100 ==> y >= 0;\nloop invariant i15: x >= y;\nloop invariant i16: 0 <= x <= 101;\nloop invariant i17: 99 >= y >= 0;\nloop invariant i18: 99 <= x + y <= 101;\nloop invariant i19: y + x == 100;\nloop invariant i20: (x <= 100) ==> y >= 0;\nloop invariant i21: (x <= 100) ==> y == 100 - x;\nloop invariant i22: (x <= 100) ==> 99 <= x + y <= 101;\nloop invariant i23: (x <= 100) ==> 99 <= y <= 100;\nloop invariant i24: (x <= 100) ==> y + x == 100;\nloop invariant i25: (x <= 100) ==> 99 <= x <= 100;\nloop invariant i26: x == 100 ==> y == 0;\nloop invariant i27: x == 100 ==> y + x == 100;\nloop invariant i28: x == 100 ==> 99 <= y <= 0;\nloop invariant i29: x >= 1;\nloop invariant i30: -100 <= y <= 0;\nloop invariant i31: x + abs(y) < 101;\nloop invariant i32: x + y < 101;\nloop invariant i33: x + abs(y) = 100;\nloop invariant i34: x + y = 100;\nloop invariant i35: x + abs(y) = 100 ==> x <= 50;\nloop invariant i36: x + y = 100 ==> x <= 50;\nloop invariant i37: x + abs(y) = 100 ==> y <= 50;\nloop invariant i38: x + y = 100 ==> y <= 50;\nloop invariant i39: x + abs(y) = 100 ==> x >= -50;\nloop invariant i40: x + y = 100 ==> x >= -50;\nloop invariant i41: x + abs(y) = 100 ==> y >= -50;\nloop invariant i42: x + y = 100 ==> y >= -50;\nloop invariant i43: x <= 50 ==> abs(y) <= 50;\nloop invariant i44: y <= 50 ==> x <= 50;\nloop invariant i45: x >= -50 ==> abs(y) <= 50;\nloop invariant i46: y >= -50 ==> x <= 50;\nloop invariant i47: x <= 50 ==> y >= -50;\nloop invariant i48: y <= 50 ==> x >= -50;\nloop invariant i49: x >= -50 ==> y >= -50;\nloop invariant i50: y >= -50 ==> x >= -50;\nloop invariant i51: x + abs(y) = 100 ==> x + y = 100;\nloop invariant i52: x + y = 100 ==> x + abs(y) = 100;\nloop invariant i53: x == 101 - y;\nloop invariant i54: x <= x + 1;\nloop invariant i55: y == 100 - (x - 1);\nloop invariant i56: y >= 0 ==> x <= 100;\nloop invariant i57: y >= 0 ==> x == 101 - y;\nloop invariant i58: y >= 0 ==> x <= x + 1;\nloop invariant i59: y >= 0 ==> y == 100 - (x - 1);\nloop invariant i60: y >= 0 ==> y >= 0;\nloop invariant i61: 1 <= x <= 101;\nloop invariant i62: 0 <= y <= 99;\nloop invariant i63: x + y >= 100;\nloop invariant i64: x >= 1 && x <= 100 ==> y >= 0 && y <= 99;\nloop invariant i65: x >= 1 && x <= 100 ==> y = 100 - x;\nloop invariant i66: x >= 1 && x <= 100 ==> x + y >= 100;\nloop invariant i67: x == 101 ==> y == 0;\nloop invariant i68: x == 101 ==> x + y == 101;\nloop invariant i69: x == 101 ==> y == 100 - x;\nloop invariant i70: x >= 1 && x <= 101 ==> y >= 0 && y <= 100;\nloop invariant i71: x >= 1 && x <= 101 ==> y = 100 - x;\nloop invariant i72: x >= 1 && x <= 101 ==> x + y >= 101;\nloop invariant i73: x == 102 ==> y == -2;\nloop invariant i74: x == 102 ==> x + y == 100;\nloop invariant i75: x == 102 ==> y == 100 - x;\nloop invariant i76: x + y >= 101;\nloop invariant i77: x < 100 ==> y == 100 - x;\nloop invariant i78: x >= 0;\nloop invariant i79: x <= 100 ==> y = 100 - x;\nloop invariant i80: x >= 0 ==> y >= 0;\nloop invariant i81: y >= 0 ==> y <= 100;\nloop invariant i82: x <= 100 ==> x >= 0;\nloop invariant i83: y = 100 - x ==> y >= 0;\nloop invariant i84: y = 100 - x ==> y <= 100;\nloop invariant i85: y >= 0 ==> y = 100 - x;\nloop invariant i86: y <= 100 ==> y = 100 - x;\nloop invariant i87: x >= 0 ==> x = 100 - y;\nloop invariant i88: x <= 100 ==> x = 100 - y;\nloop invariant i89: y >= 0 ==> x = 100 - y;\nloop invariant i90: y <= 100 ==> x = 100 - y;\nloop invariant i91: x <= 100 ==> y <= 100;\nloop invariant i92: y <= 100 ==> y >= 0;\nloop invariant i93: x >= 0 ==> x <= 100;\nloop invariant i94: y == (100 - x);\nloop invariant i95: (x <= 100) ==> (y >= 0);\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 50,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: 0 <= x <= 101;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i29: x >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i48: y <= 50 ==> x >= -50;\n\nloop invariant i50: y >= -50 ==> x >= -50;\n\n\n\nloop invariant i54: x <= x + 1;\n\n\n\nloop invariant i58: y >= 0 ==> x <= x + 1;\n\nloop invariant i60: y >= 0 ==> y >= 0;\nloop invariant i61: 1 <= x <= 101;\n\n\n\n\n\nloop invariant i67: x == 101 ==> y == 0;\nloop invariant i68: x == 101 ==> x + y == 101;\n\n\n\n\nloop invariant i73: x == 102 ==> y == -2;\nloop invariant i74: x == 102 ==> x + y == 100;\nloop invariant i75: x == 102 ==> y == 100 - x;\n\n\nloop invariant i78: x >= 0;\n\n\n\nloop invariant i82: x <= 100 ==> x >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c"
        ],
        "failure": [],
        "skipped": [],
        "total": 1,
        "success_count": 1,
        "failure_count": 0,
        "success_rate": 1.0
    }
}