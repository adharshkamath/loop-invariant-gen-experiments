{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0;\nloop invariant x >= y;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y <= 100;\nloop invariant x % 2 == y % 2;\nloop invariant (x == 0) || (x == 1) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\nloop invariant (x == 0) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 198;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 4) == (0 || 1);\nloop invariant (x % 2) == (y % 2);\nloop invariant (y % 2) == (0 || 1);\nloop invariant (y % 4) == (0 || 1);\nloop invariant (y % 2) == (0 || 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x % 4 == 0;\nloop invariant y % 2 == 1 ==> x % 4 == 2;\nloop invariant y % 2 == 0 ==> x % 8 == 0;\nloop invariant y % 2 == 1 ==> x % 8 == 4;\nloop invariant y % 2 == 0 ==> x % 16 == 0;\nloop invariant y % 2 == 1 ==> x % 16 == 8;\nloop invariant y % 2 == 0 ==> x % 32 == 0;\nloop invariant y % 2 == 1 ==> x % 32 == 16;\nloop invariant y % 2 == 0 ==> x % 64 == 0;\nloop invariant y % 2 == 1 ==> x % 64 == 32;\nloop invariant y % 2 == 0 ==> x % 128 == 0;\nloop invariant y % 2 == 1 ==> x % 128 == 64;\nloop invariant y % 2 == 0 ==> x % 256 == 0;\nloop invariant y % 2 == 1 ==> x % 256 == 128;\nloop invariant y % 2 == 0 ==> x % 512 == 0;\nloop invariant y % 2 == 1 ==> x % 512 == 256;\nloop invariant y % 2 == 0 ==> x % 1024 == 0;\nloop invariant y % 2 == 1 ==> x % 1024 == 512;\nloop invariant y % 2 == 0 ==> x % 2048 == 0;\nloop invariant y % 2 == 1 ==> x % 2048 == 1024;\nloop invariant y % 2 == 0 ==> x % 4096 == 0;\nloop invariant y % 2 == 1 ==> x % 4096 == 2048;\nloop invariant y % 2 == 0 ==> x % 8192 == 0;\nloop invariant y % 2 == 1 ==> x % 8192 == 4096;\nloop invariant y % 2 == 0 ==> x % 16384 == 0;\nloop invariant y % 2 == 1 ==> x % 16384 == 8192;\nloop invariant y % 2 == 0 ==> x % 32768 == 0;\nloop invariant y % 2 == 1 ==> x % 32768 == 16384;\nloop invariant y % 2 == 0 ==> x % 65536 == 0;\nloop invariant y % 2 == 1 ==> x % 65536 == 32768;\nloop invariant y % 2 == 0 ==> x % 131072 == 0;\nloop invariant y % 2 == 1 ==> x % 131072 == 65536;\nloop invariant y % 2 == 0 ==> x % 262144 == 0;\nloop invariant y % 2 == 1 ==> x % 262144 == 131072;\nloop invariant y % 2 == 0 ==> x % 524288 == 0;\nloop invariant y % 2 == 1 ==> x % 524288 == 262144;\nloop invariant y % 2 == 0 ==> x % 1048576 == 0;\nloop invariant y % 2 == 1 ==> x % 1048576 == 524288;\nloop invariant y % 2 == 0 ==> x % 2097152 == 0;\nloop invariant y % 2 == 1 ==> x % 2097152 == 1048576;\nloop invariant y % 2 == 0 ==> x % 4194304 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 2 * y;\nloop invariant x <= y;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant y % 2 == (x - 99) % 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y < 2; loop invariant x >= 0; loop invariant x % 2 == y % 2; loop invariant x <= y * 3; loop invariant x % 4 == 0; loop invariant x % 8 == 0; loop invariant x % 16 == 0; loop invariant x % 32 == 0; loop invariant x % 64 == 0; loop invariant x % 128 == 0; loop invariant x % 256 == 0; loop invariant x % 512 == 0; loop invariant x % 1024 == 0; loop invariant x % 2048 == 0; loop invariant x % 4096 == 0; loop invariant x % 8192 == 0; loop invariant x % 16384 == 0; loop invariant x % 32768 == 0; loop invariant x % 65536 == 0; loop invariant x % 131072 == 0; loop invariant x % 262144 == 0; loop invariant x % 524288 == 0; loop invariant x % 1048576 == 0; loop invariant x % 2097152 == 0; loop invariant x % 4194304 == 0; loop invariant x % 8388608 == 0; loop invariant x % 16777216 == 0; loop invariant x % 33554432 == 0; loop invariant x % 67108864 == 0; loop invariant x % 134217728 == 0; loop invariant x % 268435456 == 0; loop invariant x % 536870912 == 0; loop invariant x % 1073741824 == 0; loop invariant x % 2147483648 == 0; loop invariant x % 4294967296 == 0; loop invariant x % 8589934592 == 0; loop invariant x % 17179869184 == 0; loop invariant x % 34359738368 == 0; loop invariant x % 68719476736 == 0; loop invariant x % 137438953472 == 0; loop invariant x % 274877906944 == 0; loop invariant x % 549755813888 == 0; loop invariant x % 1099511627776 == 0; loop invariant x % 2199023255552 == 0; loop invariant x % 4398046511104 == 0; loop invariant x % 8796093022208 == 0; loop invariant x % 17592186044416 == 0; loop invariant x % 35184372088832 == 0; loop invariant x % 70368744177664 == 0; loop invariant x % 140737488355328 == 0; loop invariant x % 281474976710656 == 0; loop invariant x % 562949953421312 == 0; loop invariant x % 1125899906842624 == 0; loop invariant x % 2251799813685248 == 0; loop invariant x % 4503599627370496 == 0; loop invariant x % 9007199254740992 == 0; loop invariant x % 18014398509481984 == 0;\n*/\n```",
            "```\n/*@\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y < 100;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + y % 2 == 1;\nloop invariant x % 2 == 0 ==> x - y % 2 == 0;\nloop invariant x % 2 == 1 ==> x - y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + 2 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + 2 * y % 2 == 1;\nloop invariant x % 2 == 0 ==> x - 2 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x - 2 * y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + 4 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + 4 * y % 2 == 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant y % 2 == x % 2;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 512 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 512 == 256;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 512 == 256;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0;\nloop invariant x >= y;\nloop invariant x % 2 == 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == 0 is preserved but not established.\nloop invariant x >= y is preserved but not established.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y <= 100;\nloop invariant x % 2 == y % 2;\nloop invariant (x == 0) || (x == 1) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\nloop invariant (x == 0) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x < 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant (x == 0) || (x == 1) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98) is partially proven to be inductive.\nloop invariant (x == 0) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 198;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 198 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant (x % 4) == (0 || 1);\nloop invariant (x % 2) == (y % 2);\nloop invariant (y % 2) == (0 || 1);\nloop invariant (y % 4) == (0 || 1);\nloop invariant (y % 2) == (0 || 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant (x % 4) == (0 || 1) is preserved but not established.\nloop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant (y % 2) == (0 || 1) is partially proven to be inductive.\nloop invariant (y % 4) == (0 || 1) is partially proven to be inductive.\nloop invariant (y % 2) == (0 || 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 24,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x % 4 == 0;\nloop invariant y % 2 == 1 ==> x % 4 == 2;\nloop invariant y % 2 == 0 ==> x % 8 == 0;\nloop invariant y % 2 == 1 ==> x % 8 == 4;\nloop invariant y % 2 == 0 ==> x % 16 == 0;\nloop invariant y % 2 == 1 ==> x % 16 == 8;\nloop invariant y % 2 == 0 ==> x % 32 == 0;\nloop invariant y % 2 == 1 ==> x % 32 == 16;\nloop invariant y % 2 == 0 ==> x % 64 == 0;\nloop invariant y % 2 == 1 ==> x % 64 == 32;\nloop invariant y % 2 == 0 ==> x % 128 == 0;\nloop invariant y % 2 == 1 ==> x % 128 == 64;\nloop invariant y % 2 == 0 ==> x % 256 == 0;\nloop invariant y % 2 == 1 ==> x % 256 == 128;\nloop invariant y % 2 == 0 ==> x % 512 == 0;\nloop invariant y % 2 == 1 ==> x % 512 == 256;\nloop invariant y % 2 == 0 ==> x % 1024 == 0;\nloop invariant y % 2 == 1 ==> x % 1024 == 512;\nloop invariant y % 2 == 0 ==> x % 2048 == 0;\nloop invariant y % 2 == 1 ==> x % 2048 == 1024;\nloop invariant y % 2 == 0 ==> x % 4096 == 0;\nloop invariant y % 2 == 1 ==> x % 4096 == 2048;\nloop invariant y % 2 == 0 ==> x % 8192 == 0;\nloop invariant y % 2 == 1 ==> x % 8192 == 4096;\nloop invariant y % 2 == 0 ==> x % 16384 == 0;\nloop invariant y % 2 == 1 ==> x % 16384 == 8192;\nloop invariant y % 2 == 0 ==> x % 32768 == 0;\nloop invariant y % 2 == 1 ==> x % 32768 == 16384;\nloop invariant y % 2 == 0 ==> x % 65536 == 0;\nloop invariant y % 2 == 1 ==> x % 65536 == 32768;\nloop invariant y % 2 == 0 ==> x % 131072 == 0;\nloop invariant y % 2 == 1 ==> x % 131072 == 65536;\nloop invariant y % 2 == 0 ==> x % 262144 == 0;\nloop invariant y % 2 == 1 ==> x % 262144 == 131072;\nloop invariant y % 2 == 0 ==> x % 524288 == 0;\nloop invariant y % 2 == 1 ==> x % 524288 == 262144;\nloop invariant y % 2 == 0 ==> x % 1048576 == 0;\nloop invariant y % 2 == 1 ==> x % 1048576 == 524288;\nloop invariant y % 2 == 0 ==> x % 2097152 == 0;\nloop invariant y % 2 == 1 ==> x % 2097152 == 1048576;\nloop invariant y % 2 == 0 ==> x % 4194304 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is preserved but not established.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 8 == 0 is established but not preserved.\nloop invariant y % 2 == 1 ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 512 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 512 == 256 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 1024 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 1024 == 512 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2048 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2048 == 1024 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4096 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 4096 == 2048 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 8192 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 8192 == 4096 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 16384 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 16384 == 8192 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 32768 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 32768 == 16384 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 65536 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 65536 == 32768 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 131072 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 131072 == 65536 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 262144 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 262144 == 131072 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 524288 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 524288 == 262144 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 1048576 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 1048576 == 524288 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2097152 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2097152 == 1048576 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4194304 == 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\nloop invariant i3: y % 2 == 0 ==> x % 2 == 0;\n\nloop invariant i5: y % 2 == 0 ==> x % 4 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nAssertion x % 2 == y % 2: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 2 * y;\nloop invariant x <= y;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 * y is established but not preserved.\nloop invariant x <= y is established but not preserved.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\nloop invariant y % 2 == (x - 99) % 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is preserved but not established.\nloop invariant y % 2 == (x - 99) % 2 is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y < 2; loop invariant x >= 0; loop invariant x % 2 == y % 2; loop invariant x <= y * 3; loop invariant x % 4 == 0; loop invariant x % 8 == 0; loop invariant x % 16 == 0; loop invariant x % 32 == 0; loop invariant x % 64 == 0; loop invariant x % 128 == 0; loop invariant x % 256 == 0; loop invariant x % 512 == 0; loop invariant x % 1024 == 0; loop invariant x % 2048 == 0; loop invariant x % 4096 == 0; loop invariant x % 8192 == 0; loop invariant x % 16384 == 0; loop invariant x % 32768 == 0; loop invariant x % 65536 == 0; loop invariant x % 131072 == 0; loop invariant x % 262144 == 0; loop invariant x % 524288 == 0; loop invariant x % 1048576 == 0; loop invariant x % 2097152 == 0; loop invariant x % 4194304 == 0; loop invariant x % 8388608 == 0; loop invariant x % 16777216 == 0; loop invariant x % 33554432 == 0; loop invariant x % 67108864 == 0; loop invariant x % 134217728 == 0; loop invariant x % 268435456 == 0; loop invariant x % 536870912 == 0; loop invariant x % 1073741824 == 0; loop invariant x % 2147483648 == 0; loop invariant x % 4294967296 == 0; loop invariant x % 8589934592 == 0; loop invariant x % 17179869184 == 0; loop invariant x % 34359738368 == 0; loop invariant x % 68719476736 == 0; loop invariant x % 137438953472 == 0; loop invariant x % 274877906944 == 0; loop invariant x % 549755813888 == 0; loop invariant x % 1099511627776 == 0; loop invariant x % 2199023255552 == 0; loop invariant x % 4398046511104 == 0; loop invariant x % 8796093022208 == 0; loop invariant x % 17592186044416 == 0; loop invariant x % 35184372088832 == 0; loop invariant x % 70368744177664 == 0; loop invariant x % 140737488355328 == 0; loop invariant x % 281474976710656 == 0; loop invariant x % 562949953421312 == 0; loop invariant x % 1125899906842624 == 0; loop invariant x % 2251799813685248 == 0; loop invariant x % 4503599627370496 == 0; loop invariant x % 9007199254740992 == 0; loop invariant x % 18014398509481984 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y < 2; loop invariant x >= 0; loop invariant x % 2 == y % 2; loop invariant x <= y * 3; loop invariant x % 4 == 0; loop invariant x % 8 == 0; loop invariant x % 16 == 0; loop invariant x % 32 == 0; loop invariant x % 64 == 0; loop invariant x % 128 == 0; loop invariant x % 256 == 0; loop invariant x % 512 == 0; loop invariant x % 1024 == 0; loop invariant x % 2048 == 0; loop invariant x % 4096 == 0; loop invariant x % 8192 == 0; loop invariant x % 16384 == 0; loop invariant x % 32768 == 0; loop invariant x % 65536 == 0; loop invariant x % 131072 == 0; loop invariant x % 262144 == 0; loop invariant x % 524288 == 0; loop invariant x % 1048576 == 0; loop invariant x % 2097152 == 0; loop invariant x % 4194304 == 0; loop invariant x % 8388608 == 0; loop invariant x % 16777216 == 0; loop invariant x % 33554432 == 0; loop invariant x % 67108864 == 0; loop invariant x % 134217728 == 0; loop invariant x % 268435456 == 0; loop invariant x % 536870912 == 0; loop invariant x % 1073741824 == 0; loop invariant x % 2147483648 == 0; loop invariant x % 4294967296 == 0; loop invariant x % 8589934592 == 0; loop invariant x % 17179869184 == 0; loop invariant x % 34359738368 == 0; loop invariant x % 68719476736 == 0; loop invariant x % 137438953472 == 0; loop invariant x % 274877906944 == 0; loop invariant x % 549755813888 == 0; loop invariant x % 1099511627776 == 0; loop invariant x % 2199023255552 == 0; loop invariant x % 4398046511104 == 0; loop invariant x % 8796093022208 == 0; loop invariant x % 17592186044416 == 0; loop invariant x % 35184372088832 == 0; loop invariant x % 70368744177664 == 0; loop invariant x % 140737488355328 == 0; loop invariant x % 281474976710656 == 0; loop invariant x % 562949953421312 == 0; loop invariant x % 1125899906842624 == 0; loop invariant x % 2251799813685248 == 0; loop invariant x % 4503599627370496 == 0; loop invariant x % 9007199254740992 == 0; loop invariant x % 18014398509481984 == 0 is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x < 100;\nloop invariant 0 <= y < 100;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + y % 2 == 1;\nloop invariant x % 2 == 0 ==> x - y % 2 == 0;\nloop invariant x % 2 == 1 ==> x - y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + 2 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + 2 * y % 2 == 1;\nloop invariant x % 2 == 0 ==> x - 2 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x - 2 * y % 2 == 1;\nloop invariant x % 2 == 0 ==> x + 4 * y % 2 == 0;\nloop invariant x % 2 == 1 ==> x + 4 * y % 2 == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant 0 <= x < 100 is partially proven to be inductive.\nloop invariant 0 <= y < 100 is preserved but not established.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + y % 2 == 0 is established but not preserved.\nloop invariant x % 2 == 1 ==> x + y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x - y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x - y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + 2 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x + 2 * y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x - 2 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x - 2 * y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + 4 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x + 4 * y % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\nloop invariant i5: x % 2 == 1 ==> y % 2 == 1;\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 20,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant y % 2 == x % 2;\nloop invariant x % 2 == 0 ==> y % 2 == 0;\nloop invariant x % 2 == 1 ==> y % 2 == 1;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 512 == 0;\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 512 == 256;\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 512 == 256;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is preserved but not established.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 8 == 0 is established but not preserved.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 512 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 512 == 256 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 512 == 256 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n\nloop invariant i5: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i6: (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0;\n\n\nloop invariant i9: (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0;\n\n\n\nloop invariant i13: (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0;\n\n\n\nloop invariant i17: (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0;\n\n\n\nloop invariant i21: (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0;\n\n\n\nloop invariant i25: (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0;\n\n\n\nloop invariant i29: (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0;\n\n\n\nloop invariant i33: (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0;\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 is preserved but not established.\nloop invariant x >= y is preserved but not established.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant 0 <= x < 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 100 is partially proven to be inductive.\nloop invariant (x == 0) || (x == 1) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98) is partially proven to be inductive.\nloop invariant (x == 0) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98) is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 198 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nloop invariant (x % 4) == (0 || 1) is preserved but not established.\nloop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nloop invariant (y % 2) == (0 || 1) is partially proven to be inductive.\nloop invariant (y % 4) == (0 || 1) is partially proven to be inductive.\nloop invariant (y % 2) == (0 || 2) is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nloop invariant y % 2 == x % 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 8 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 512 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 512 == 256 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 1024 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 1024 == 512 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2048 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2048 == 1024 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4096 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 4096 == 2048 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 8192 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 8192 == 4096 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 16384 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 16384 == 8192 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 32768 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 32768 == 16384 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 65536 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 65536 == 32768 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 131072 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 131072 == 65536 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 262144 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 262144 == 131072 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 524288 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 524288 == 262144 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 1048576 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 1048576 == 524288 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2097152 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2097152 == 1048576 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 4194304 == 0 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is partially proven to be inductive.\nloop invariant 0 <= x <= 2 * y is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant y % 2 == (x - 99) % 2 is partially proven to be inductive.\nloop invariant 0 <= y < 2; loop invariant x >= 0; loop invariant x % 2 == y % 2; loop invariant x <= y * 3; loop invariant x % 4 == 0; loop invariant x % 8 == 0; loop invariant x % 16 == 0; loop invariant x % 32 == 0; loop invariant x % 64 == 0; loop invariant x % 128 == 0; loop invariant x % 256 == 0; loop invariant x % 512 == 0; loop invariant x % 1024 == 0; loop invariant x % 2048 == 0; loop invariant x % 4096 == 0; loop invariant x % 8192 == 0; loop invariant x % 16384 == 0; loop invariant x % 32768 == 0; loop invariant x % 65536 == 0; loop invariant x % 131072 == 0; loop invariant x % 262144 == 0; loop invariant x % 524288 == 0; loop invariant x % 1048576 == 0; loop invariant x % 2097152 == 0; loop invariant x % 4194304 == 0; loop invariant x % 8388608 == 0; loop invariant x % 16777216 == 0; loop invariant x % 33554432 == 0; loop invariant x % 67108864 == 0; loop invariant x % 134217728 == 0; loop invariant x % 268435456 == 0; loop invariant x % 536870912 == 0; loop invariant x % 1073741824 == 0; loop invariant x % 2147483648 == 0; loop invariant x % 4294967296 == 0; loop invariant x % 8589934592 == 0; loop invariant x % 17179869184 == 0; loop invariant x % 34359738368 == 0; loop invariant x % 68719476736 == 0; loop invariant x % 137438953472 == 0; loop invariant x % 274877906944 == 0; loop invariant x % 549755813888 == 0; loop invariant x % 1099511627776 == 0; loop invariant x % 2199023255552 == 0; loop invariant x % 4398046511104 == 0; loop invariant x % 8796093022208 == 0; loop invariant x % 17592186044416 == 0; loop invariant x % 35184372088832 == 0; loop invariant x % 70368744177664 == 0; loop invariant x % 140737488355328 == 0; loop invariant x % 281474976710656 == 0; loop invariant x % 562949953421312 == 0; loop invariant x % 1125899906842624 == 0; loop invariant x % 2251799813685248 == 0; loop invariant x % 4503599627370496 == 0; loop invariant x % 9007199254740992 == 0; loop invariant x % 18014398509481984 == 0 is partially proven to be inductive.\nloop invariant 0 <= y < 100 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x + y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x - y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x - y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + 2 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x + 2 * y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x - 2 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x - 2 * y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x + 4 * y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 ==> x + 4 * y % 2 == 1 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 4 == 2 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 8 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 8 == 4 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 16 == 8 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 32 == 16 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 64 == 32 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 128 == 64 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 256 == 128 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 0) ==> x % 512 == 0 is partially proven to be inductive.\nloop invariant (x % 2 == 1 && y % 2 == 1) ==> x % 512 == 256 is partially proven to be inductive.\nloop invariant (x % 2 == 0 && y % 2 == 1) ==> x % 512 == 256 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= x <= 99;\nloop invariant i2: y % 2 == 0;\nloop invariant i3: x >= y;\nloop invariant i4: x % 2 == 0;\nloop invariant i5: x % 2 == y % 2;\nloop invariant i6: 0 <= x < 100;\nloop invariant i7: 0 <= y <= 100;\nloop invariant i8: (x == 0) || (x == 1) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\nloop invariant i9: (x == 0) || (x == 2) || (x == 4) || (x == 6) || (x == 8) || (x == 10) || (x == 12) || (x == 14) || (x == 16) || (x == 18) || (x == 20) || (x == 22) || (x == 24) || (x == 26) || (x == 28) || (x == 30) || (x == 32) || (x == 34) || (x == 36) || (x == 38) || (x == 40) || (x == 42) || (x == 44) || (x == 46) || (x == 48) || (x == 50) || (x == 52) || (x == 54) || (x == 56) || (x == 58) || (x == 60) || (x == 62) || (x == 64) || (x == 66) || (x == 68) || (x == 70) || (x == 72) || (x == 74) || (x == 76) || (x == 78) || (x == 80) || (x == 82) || (x == 84) || (x == 86) || (x == 88) || (x == 90) || (x == 92) || (x == 94) || (x == 96) || (x == 98);\nloop invariant i10: x >= 0;\nloop invariant i11: x <= 198;\nloop invariant i12: y >= 0;\nloop invariant i13: y <= 99;\nloop invariant i14: (x % 4) == (0 || 1);\nloop invariant i15: (x % 2) == (y % 2);\nloop invariant i16: (y % 2) == (0 || 1);\nloop invariant i17: (y % 4) == (0 || 1);\nloop invariant i18: (y % 2) == (0 || 2);\nloop invariant i19: 0 <= y <= 100000;\nloop invariant i20: x >= (1 + (y - 1) * y / 2);\nloop invariant i21: y % 2 == x % 2;\nloop invariant i22: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i23: y % 2 == 1 ==> x % 2 == 1;\nloop invariant i24: y % 2 == 0 ==> x % 4 == 0;\nloop invariant i25: y % 2 == 1 ==> x % 4 == 2;\nloop invariant i26: y % 2 == 0 ==> x % 8 == 0;\nloop invariant i27: y % 2 == 1 ==> x % 8 == 4;\nloop invariant i28: y % 2 == 0 ==> x % 16 == 0;\nloop invariant i29: y % 2 == 1 ==> x % 16 == 8;\nloop invariant i30: y % 2 == 0 ==> x % 32 == 0;\nloop invariant i31: y % 2 == 1 ==> x % 32 == 16;\nloop invariant i32: y % 2 == 0 ==> x % 64 == 0;\nloop invariant i33: y % 2 == 1 ==> x % 64 == 32;\nloop invariant i34: y % 2 == 0 ==> x % 128 == 0;\nloop invariant i35: y % 2 == 1 ==> x % 128 == 64;\nloop invariant i36: y % 2 == 0 ==> x % 256 == 0;\nloop invariant i37: y % 2 == 1 ==> x % 256 == 128;\nloop invariant i38: y % 2 == 0 ==> x % 512 == 0;\nloop invariant i39: y % 2 == 1 ==> x % 512 == 256;\nloop invariant i40: y % 2 == 0 ==> x % 1024 == 0;\nloop invariant i41: y % 2 == 1 ==> x % 1024 == 512;\nloop invariant i42: y % 2 == 0 ==> x % 2048 == 0;\nloop invariant i43: y % 2 == 1 ==> x % 2048 == 1024;\nloop invariant i44: y % 2 == 0 ==> x % 4096 == 0;\nloop invariant i45: y % 2 == 1 ==> x % 4096 == 2048;\nloop invariant i46: y % 2 == 0 ==> x % 8192 == 0;\nloop invariant i47: y % 2 == 1 ==> x % 8192 == 4096;\nloop invariant i48: y % 2 == 0 ==> x % 16384 == 0;\nloop invariant i49: y % 2 == 1 ==> x % 16384 == 8192;\nloop invariant i50: y % 2 == 0 ==> x % 32768 == 0;\nloop invariant i51: y % 2 == 1 ==> x % 32768 == 16384;\nloop invariant i52: y % 2 == 0 ==> x % 65536 == 0;\nloop invariant i53: y % 2 == 1 ==> x % 65536 == 32768;\nloop invariant i54: y % 2 == 0 ==> x % 131072 == 0;\nloop invariant i55: y % 2 == 1 ==> x % 131072 == 65536;\nloop invariant i56: y % 2 == 0 ==> x % 262144 == 0;\nloop invariant i57: y % 2 == 1 ==> x % 262144 == 131072;\nloop invariant i58: y % 2 == 0 ==> x % 524288 == 0;\nloop invariant i59: y % 2 == 1 ==> x % 524288 == 262144;\nloop invariant i60: y % 2 == 0 ==> x % 1048576 == 0;\nloop invariant i61: y % 2 == 1 ==> x % 1048576 == 524288;\nloop invariant i62: y % 2 == 0 ==> x % 2097152 == 0;\nloop invariant i63: y % 2 == 1 ==> x % 2097152 == 1048576;\nloop invariant i64: y % 2 == 0 ==> x % 4194304 == 0;\nloop invariant i65: 0 <= y <= 99;\nloop invariant i66: 0 <= x <= 2 * y;\nloop invariant i67: x <= y;\nloop invariant i68: y % 2 == (x - 99) % 2;\nloop invariant i69: 0 <= y < 2; loop invariant x >= 0; loop invariant x % 2 == y % 2; loop invariant x <= y * 3; loop invariant x % 4 == 0; loop invariant x % 8 == 0; loop invariant x % 16 == 0; loop invariant x % 32 == 0; loop invariant x % 64 == 0; loop invariant x % 128 == 0; loop invariant x % 256 == 0; loop invariant x % 512 == 0; loop invariant x % 1024 == 0; loop invariant x % 2048 == 0; loop invariant x % 4096 == 0; loop invariant x % 8192 == 0; loop invariant x % 16384 == 0; loop invariant x % 32768 == 0; loop invariant x % 65536 == 0; loop invariant x % 131072 == 0; loop invariant x % 262144 == 0; loop invariant x % 524288 == 0; loop invariant x % 1048576 == 0; loop invariant x % 2097152 == 0; loop invariant x % 4194304 == 0; loop invariant x % 8388608 == 0; loop invariant x % 16777216 == 0; loop invariant x % 33554432 == 0; loop invariant x % 67108864 == 0; loop invariant x % 134217728 == 0; loop invariant x % 268435456 == 0; loop invariant x % 536870912 == 0; loop invariant x % 1073741824 == 0; loop invariant x % 2147483648 == 0; loop invariant x % 4294967296 == 0; loop invariant x % 8589934592 == 0; loop invariant x % 17179869184 == 0; loop invariant x % 34359738368 == 0; loop invariant x % 68719476736 == 0; loop invariant x % 137438953472 == 0; loop invariant x % 274877906944 == 0; loop invariant x % 549755813888 == 0; loop invariant x % 1099511627776 == 0; loop invariant x % 2199023255552 == 0; loop invariant x % 4398046511104 == 0; loop invariant x % 8796093022208 == 0; loop invariant x % 17592186044416 == 0; loop invariant x % 35184372088832 == 0; loop invariant x % 70368744177664 == 0; loop invariant x % 140737488355328 == 0; loop invariant x % 281474976710656 == 0; loop invariant x % 562949953421312 == 0; loop invariant x % 1125899906842624 == 0; loop invariant x % 2251799813685248 == 0; loop invariant x % 4503599627370496 == 0; loop invariant x % 9007199254740992 == 0; loop invariant x % 18014398509481984 == 0;\nloop invariant i70: 0 <= y < 100;\nloop invariant i71: x % 2 == 0 ==> y % 2 == 0;\nloop invariant i72: x % 2 == 1 ==> y % 2 == 1;\nloop invariant i73: x % 2 == 0 ==> x + y % 2 == 0;\nloop invariant i74: x % 2 == 1 ==> x + y % 2 == 1;\nloop invariant i75: x % 2 == 0 ==> x - y % 2 == 0;\nloop invariant i76: x % 2 == 1 ==> x - y % 2 == 1;\nloop invariant i77: x % 2 == 0 ==> x + 2 * y % 2 == 0;\nloop invariant i78: x % 2 == 1 ==> x + 2 * y % 2 == 1;\nloop invariant i79: x % 2 == 0 ==> x - 2 * y % 2 == 0;\nloop invariant i80: x % 2 == 1 ==> x - 2 * y % 2 == 1;\nloop invariant i81: x % 2 == 0 ==> x + 4 * y % 2 == 0;\nloop invariant i82: x % 2 == 1 ==> x + 4 * y % 2 == 1;\nloop invariant i83: (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant i84: (x % 2 == 1 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant i85: (x % 2 == 0 && y % 2 == 1) ==> x % 4 == 2;\nloop invariant i86: (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0;\nloop invariant i87: (x % 2 == 0 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant i88: (x % 2 == 1 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant i89: (x % 2 == 0 && y % 2 == 1) ==> x % 8 == 4;\nloop invariant i90: (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0;\nloop invariant i91: (x % 2 == 0 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant i92: (x % 2 == 1 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant i93: (x % 2 == 0 && y % 2 == 1) ==> x % 16 == 8;\nloop invariant i94: (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0;\nloop invariant i95: (x % 2 == 0 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant i96: (x % 2 == 1 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant i97: (x % 2 == 0 && y % 2 == 1) ==> x % 32 == 16;\nloop invariant i98: (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0;\nloop invariant i99: (x % 2 == 0 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant i100: (x % 2 == 1 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant i101: (x % 2 == 0 && y % 2 == 1) ==> x % 64 == 32;\nloop invariant i102: (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0;\nloop invariant i103: (x % 2 == 0 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant i104: (x % 2 == 1 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant i105: (x % 2 == 0 && y % 2 == 1) ==> x % 128 == 64;\nloop invariant i106: (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0;\nloop invariant i107: (x % 2 == 0 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant i108: (x % 2 == 1 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant i109: (x % 2 == 0 && y % 2 == 1) ==> x % 256 == 128;\nloop invariant i110: (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0;\nloop invariant i111: (x % 2 == 0 && y % 2 == 0) ==> x % 512 == 0;\nloop invariant i112: (x % 2 == 1 && y % 2 == 1) ==> x % 512 == 256;\nloop invariant i113: (x % 2 == 0 && y % 2 == 1) ==> x % 512 == 256;\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "combined_annotation_num_solver_calls": 49,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x >= 0;\n\nloop invariant i12: y >= 0;\n\n\n\n\n\n\n\n\n\nloop invariant i22: y % 2 == 0 ==> x % 2 == 0;\n\nloop invariant i24: y % 2 == 0 ==> x % 4 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: x % 2 == 1 ==> y % 2 == 1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i83: (x % 2 == 0 && y % 2 == 0) ==> x % 4 == 0;\n\n\nloop invariant i86: (x % 2 == 1 && y % 2 == 0) ==> x % 4 == 0;\n\n\n\nloop invariant i90: (x % 2 == 1 && y % 2 == 0) ==> x % 8 == 0;\n\n\n\nloop invariant i94: (x % 2 == 1 && y % 2 == 0) ==> x % 16 == 0;\n\n\n\nloop invariant i98: (x % 2 == 1 && y % 2 == 0) ==> x % 32 == 0;\n\n\n\nloop invariant i102: (x % 2 == 1 && y % 2 == 0) ==> x % 64 == 0;\n\n\n\nloop invariant i106: (x % 2 == 1 && y % 2 == 0) ==> x % 128 == 0;\n\n\n\nloop invariant i110: (x % 2 == 1 && y % 2 == 0) ==> x % 256 == 0;\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c"
        ],
        "skipped": [],
        "total": 10,
        "success_count": 2,
        "failure_count": 8,
        "success_rate": 0.2
    }
}