{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= (i - 1) * a;\nloop invariant sn <= i * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i*a;\nloop invariant i == n || sn == n*a;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 2 * i <= sn <= 2 * n;\nloop invariant 1 <= sn / i <= n;\nloop invariant sn % i == 0;\nloop invariant sn == n * a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (a * i) + (a * (i - 1) * (i - 2) / 2);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = i * a;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn <= n * 2;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * a;\n*/\n```",
            "```\n/*@\nloop invariant ( i >= 1 && i <= n );\nloop invariant ( sn >= a * (i - 1) && sn <= a * i );\nloop invariant ( sn >= 0 && sn <= a * n );\nloop invariant ( sn == a * (n - i + 1) );\nloop invariant ( sn == a * n - a * i + a );\nloop invariant ( sn == a * (n - i) + a );\nloop invariant ( sn == a * (n - 1) + a * i );\nloop invariant ( sn == a * (n - 1) + a * (i - 1) + a );\nloop invariant ( sn == a * (n - 1) + a );\nloop invariant ( sn == a * (n - 1) );\nloop invariant ( sn == a * (n - 2) + a * 2 );\nloop invariant ( sn == a * (n - 2) + a * 1 + a );\nloop invariant ( sn == a * (n - 2) + a );\nloop invariant ( sn == a * (n - 2) );\nloop invariant ( sn == a * (n - 3) + a * 3 );\nloop invariant ( sn == a * (n - 3) + a * 2 + a );\nloop invariant ( sn == a * (n - 3) + a * 1 + a );\nloop invariant ( sn == a * (n - 3) + a );\nloop invariant ( sn == a * (n - 3) );\nloop invariant ( sn == a * (n - 4) + a * 4 );\nloop invariant ( sn == a * (n - 4) + a * 3 + a );\nloop invariant ( sn == a * (n - 4) + a * 2 + a );\nloop invariant ( sn == a * (n - 4) + a * 1 + a );\nloop invariant ( sn == a * (n - 4) + a );\nloop invariant ( sn == a * (n - 4) );\nloop invariant ( sn == a * (n - 5) + a * 5 );\nloop invariant ( sn == a * (n - 5) + a * 4 + a );\nloop invariant ( sn == a * (n - 5) + a * 3 + a );\nloop invariant ( sn == a * (n - 5) + a * 2 + a );\nloop invariant ( sn == a * (n - 5) + a * 1 + a );\nloop invariant ( sn == a * (n - 5) + a );\nloop invariant ( sn == a * (n - 5) );\nloop invariant ( sn == a * (n - 6) + a * 6 );\nloop invariant ( sn == a * (n - 6) + a * 5 + a );\nloop invariant ( sn == a * (n - 6) + a * 4 + a );\nloop invariant ( sn == a * (n - 6) + a * 3 + a );\nloop invariant ( sn == a * (n - 6) + a * 2 + a );\nloop invariant ( sn == a * (n - 6) + a * 1 + a );\nloop invariant ( sn == a * (n - 6) + a );\nloop invariant ( sn == a * (n - 6) );\nloop invariant ( sn == a * (n - 7) + a * 7 );\nloop invariant ( sn == a * (n - 7) + a * 6 + a );\nloop invariant ( sn == a * (n - 7) + a * 5 + a );\nloop invariant ( sn == a * (n - 7) + a * 4 + a );\nloop invariant ( sn == a * (n - 7) + a * 3 + a );\nloop invariant ( sn == a * (n - 7) + a * 2 + a );\nloop invariant ( sn == a * (n - 7) + a * 1 + a );\nloop invariant ( sn == a * (n - 7) + a );\nloop invariant ( sn == a * (n - 7) );\nloop invariant ( sn == a * (n - 8) + a * 8 );\nloop invariant ( sn == a * (n - 8) + a * 7 + a );\nloop invariant ( sn == a * (n - 8) + a * 6 + a );\nloop invariant ( sn == a * (n - 8) + a * 5 + a );\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant i * a == n * a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn <= n*a;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= min(n, 1000);\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant i >= 1;\nloop invariant i <= min(n, 1000);\nloop invariant sn == a * (i - 1);\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == i * a;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= (i - 1) * a;\nloop invariant sn <= i * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= (i - 1) * a is partially proven to be inductive.\nloop invariant sn <= i * a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn >= (i - 1) * a;\nloop invariant i3: sn <= i * a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\nloop invariant sn == (i-1)*a + sn;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i*a + sn is preserved but not established.\nloop invariant sn == (i-1)*a + sn is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i*a;\nloop invariant i == n || sn == n*a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn == i*a is preserved but not established.\nloop invariant i == n || sn == n*a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 2 * i <= sn <= 2 * n;\nloop invariant 1 <= sn / i <= n;\nloop invariant sn % i == 0;\nloop invariant sn == n * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 2 * i <= sn <= 2 * n is preserved but not established.\nloop invariant 1 <= sn / i <= n is partially proven to be inductive.\nloop invariant sn % i == 0 is partially proven to be inductive.\nloop invariant sn == n * a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (a * i) + (a * (i - 1) * (i - 2) / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn == (a * i) + (a * (i - 1) * (i - 2) / 2) is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = i * a;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn <= n * 2;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\nloop invariant i3: i >= 1;\n\nloop invariant i5: sn >= 0;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 28,
                "annotations": "```\n/*@\nloop invariant ( i >= 1 && i <= n );\nloop invariant ( sn >= a * (i - 1) && sn <= a * i );\nloop invariant ( sn >= 0 && sn <= a * n );\nloop invariant ( sn == a * (n - i + 1) );\nloop invariant ( sn == a * n - a * i + a );\nloop invariant ( sn == a * (n - i) + a );\nloop invariant ( sn == a * (n - 1) + a * i );\nloop invariant ( sn == a * (n - 1) + a * (i - 1) + a );\nloop invariant ( sn == a * (n - 1) + a );\nloop invariant ( sn == a * (n - 1) );\nloop invariant ( sn == a * (n - 2) + a * 2 );\nloop invariant ( sn == a * (n - 2) + a * 1 + a );\nloop invariant ( sn == a * (n - 2) + a );\nloop invariant ( sn == a * (n - 2) );\nloop invariant ( sn == a * (n - 3) + a * 3 );\nloop invariant ( sn == a * (n - 3) + a * 2 + a );\nloop invariant ( sn == a * (n - 3) + a * 1 + a );\nloop invariant ( sn == a * (n - 3) + a );\nloop invariant ( sn == a * (n - 3) );\nloop invariant ( sn == a * (n - 4) + a * 4 );\nloop invariant ( sn == a * (n - 4) + a * 3 + a );\nloop invariant ( sn == a * (n - 4) + a * 2 + a );\nloop invariant ( sn == a * (n - 4) + a * 1 + a );\nloop invariant ( sn == a * (n - 4) + a );\nloop invariant ( sn == a * (n - 4) );\nloop invariant ( sn == a * (n - 5) + a * 5 );\nloop invariant ( sn == a * (n - 5) + a * 4 + a );\nloop invariant ( sn == a * (n - 5) + a * 3 + a );\nloop invariant ( sn == a * (n - 5) + a * 2 + a );\nloop invariant ( sn == a * (n - 5) + a * 1 + a );\nloop invariant ( sn == a * (n - 5) + a );\nloop invariant ( sn == a * (n - 5) );\nloop invariant ( sn == a * (n - 6) + a * 6 );\nloop invariant ( sn == a * (n - 6) + a * 5 + a );\nloop invariant ( sn == a * (n - 6) + a * 4 + a );\nloop invariant ( sn == a * (n - 6) + a * 3 + a );\nloop invariant ( sn == a * (n - 6) + a * 2 + a );\nloop invariant ( sn == a * (n - 6) + a * 1 + a );\nloop invariant ( sn == a * (n - 6) + a );\nloop invariant ( sn == a * (n - 6) );\nloop invariant ( sn == a * (n - 7) + a * 7 );\nloop invariant ( sn == a * (n - 7) + a * 6 + a );\nloop invariant ( sn == a * (n - 7) + a * 5 + a );\nloop invariant ( sn == a * (n - 7) + a * 4 + a );\nloop invariant ( sn == a * (n - 7) + a * 3 + a );\nloop invariant ( sn == a * (n - 7) + a * 2 + a );\nloop invariant ( sn == a * (n - 7) + a * 1 + a );\nloop invariant ( sn == a * (n - 7) + a );\nloop invariant ( sn == a * (n - 7) );\nloop invariant ( sn == a * (n - 8) + a * 8 );\nloop invariant ( sn == a * (n - 8) + a * 7 + a );\nloop invariant ( sn == a * (n - 8) + a * 6 + a );\nloop invariant ( sn == a * (n - 8) + a * 5 + a );\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( i >= 1 && i <= n ) is preserved but not established.\nloop invariant ( sn >= a * (i - 1) && sn <= a * i ) is partially proven to be inductive.\nloop invariant ( sn >= 0 && sn <= a * n ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - i + 1) ) is preserved but not established.\nloop invariant ( sn == a * n - a * i + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - i) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 1) + a * i ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 1) + a * (i - 1) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 1) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 1) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 2) + a * 2 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 2) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 2) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 2) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 3) + a * 3 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 3) + a * 2 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 3) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 3) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 3) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) + a * 4 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) + a * 3 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) + a * 2 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 4) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a * 5 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a * 4 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a * 3 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a * 2 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 5) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 6 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 5 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 4 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 3 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 2 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 6) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 7 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 6 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 5 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 4 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 3 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 2 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a * 1 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 7) ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 8) + a * 8 ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 8) + a * 7 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 8) + a * 6 + a ) is partially proven to be inductive.\nloop invariant ( sn == a * (n - 8) + a * 5 + a ) is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: ( sn >= a * (i - 1) && sn <= a * i );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant i * a == n * a || sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nloop invariant i * a == n * a || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn <= n*a;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant sn <= n*a is established but not preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\nloop invariant i3: sn >= 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a || sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn == i * a || sn == 0 is established but not preserved.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= min(n, 1000);\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant i >= 1;\nloop invariant i <= min(n, 1000);\nloop invariant sn == a * (i - 1);\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\nloop invariant sn == a * i;\nloop invariant sn <= a * n;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic function min. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i >= 1;\n\nloop invariant i6: sn == a * (i - 1);\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == i * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n * a is partially proven to be inductive.\nloop invariant sn == i * a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 30: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sn >= (i - 1) * a;\nloop invariant i3: sn <= i * a;\nloop invariant i4: sn == i*a + sn;\nloop invariant i5: sn == (i-1)*a + sn;\nloop invariant i6: 1 <= i <= n;\nloop invariant i7: sn == i*a;\nloop invariant i8: i == n || sn == n*a;\nloop invariant i9: 2 * i <= sn <= 2 * n;\nloop invariant i10: 1 <= sn / i <= n;\nloop invariant i11: sn % i == 0;\nloop invariant i12: sn == n * a;\nloop invariant i13: sn == (a * i) + (a * (i - 1) * (i - 2) / 2);\nloop invariant i14: sn = i * a;\nloop invariant i15: i >= 1;\nloop invariant i16: i <= n;\nloop invariant i17: sn >= 0;\nloop invariant i18: sn <= n * a;\nloop invariant i19: sn <= n * 2;\nloop invariant i20: 0 <= i <= n + 1;\nloop invariant i21: sn == i * a;\nloop invariant i22: ( i >= 1 && i <= n );\nloop invariant i23: ( sn >= a * (i - 1) && sn <= a * i );\nloop invariant i24: ( sn >= 0 && sn <= a * n );\nloop invariant i25: ( sn == a * (n - i + 1) );\nloop invariant i26: ( sn == a * n - a * i + a );\nloop invariant i27: ( sn == a * (n - i) + a );\nloop invariant i28: ( sn == a * (n - 1) + a * i );\nloop invariant i29: ( sn == a * (n - 1) + a * (i - 1) + a );\nloop invariant i30: ( sn == a * (n - 1) + a );\nloop invariant i31: ( sn == a * (n - 1) );\nloop invariant i32: ( sn == a * (n - 2) + a * 2 );\nloop invariant i33: ( sn == a * (n - 2) + a * 1 + a );\nloop invariant i34: ( sn == a * (n - 2) + a );\nloop invariant i35: ( sn == a * (n - 2) );\nloop invariant i36: ( sn == a * (n - 3) + a * 3 );\nloop invariant i37: ( sn == a * (n - 3) + a * 2 + a );\nloop invariant i38: ( sn == a * (n - 3) + a * 1 + a );\nloop invariant i39: ( sn == a * (n - 3) + a );\nloop invariant i40: ( sn == a * (n - 3) );\nloop invariant i41: ( sn == a * (n - 4) + a * 4 );\nloop invariant i42: ( sn == a * (n - 4) + a * 3 + a );\nloop invariant i43: ( sn == a * (n - 4) + a * 2 + a );\nloop invariant i44: ( sn == a * (n - 4) + a * 1 + a );\nloop invariant i45: ( sn == a * (n - 4) + a );\nloop invariant i46: ( sn == a * (n - 4) );\nloop invariant i47: ( sn == a * (n - 5) + a * 5 );\nloop invariant i48: ( sn == a * (n - 5) + a * 4 + a );\nloop invariant i49: ( sn == a * (n - 5) + a * 3 + a );\nloop invariant i50: ( sn == a * (n - 5) + a * 2 + a );\nloop invariant i51: ( sn == a * (n - 5) + a * 1 + a );\nloop invariant i52: ( sn == a * (n - 5) + a );\nloop invariant i53: ( sn == a * (n - 5) );\nloop invariant i54: ( sn == a * (n - 6) + a * 6 );\nloop invariant i55: ( sn == a * (n - 6) + a * 5 + a );\nloop invariant i56: ( sn == a * (n - 6) + a * 4 + a );\nloop invariant i57: ( sn == a * (n - 6) + a * 3 + a );\nloop invariant i58: ( sn == a * (n - 6) + a * 2 + a );\nloop invariant i59: ( sn == a * (n - 6) + a * 1 + a );\nloop invariant i60: ( sn == a * (n - 6) + a );\nloop invariant i61: ( sn == a * (n - 6) );\nloop invariant i62: ( sn == a * (n - 7) + a * 7 );\nloop invariant i63: ( sn == a * (n - 7) + a * 6 + a );\nloop invariant i64: ( sn == a * (n - 7) + a * 5 + a );\nloop invariant i65: ( sn == a * (n - 7) + a * 4 + a );\nloop invariant i66: ( sn == a * (n - 7) + a * 3 + a );\nloop invariant i67: ( sn == a * (n - 7) + a * 2 + a );\nloop invariant i68: ( sn == a * (n - 7) + a * 1 + a );\nloop invariant i69: ( sn == a * (n - 7) + a );\nloop invariant i70: ( sn == a * (n - 7) );\nloop invariant i71: ( sn == a * (n - 8) + a * 8 );\nloop invariant i72: ( sn == a * (n - 8) + a * 7 + a );\nloop invariant i73: ( sn == a * (n - 8) + a * 6 + a );\nloop invariant i74: ( sn == a * (n - 8) + a * 5 + a );\nloop invariant i75: i * a == n * a || sn == 0;\nloop invariant i76: sn <= n*a;\nloop invariant i77: sn == i * a || sn == 0;\nloop invariant i78: 1 <= i <= min(n, 1000);\nloop invariant i79: i <= min(n, 1000);\nloop invariant i80: sn == a * (i - 1);\nloop invariant i81: sn <= a * n;\nloop invariant i82: sn == a * i;\nloop invariant i83: i1;\nloop invariant i84: i2;\nloop invariant i85: i3;\nloop invariant i86: i4;\nloop invariant i87: i5;\nloop invariant i88: i6;\nloop invariant i89: i7;\nloop invariant i90: i8;\nloop invariant i91: i9;\nloop invariant i92: i10;\nloop invariant i93: i11;\nloop invariant i94: i12;\nloop invariant i95: i13;\nloop invariant i96: i14;\nloop invariant i97: i15;\nloop invariant i98: i16;\nloop invariant i99: i17;\nloop invariant i100: i18;\nloop invariant i101: i19;\nloop invariant i102: i20;\nloop invariant i103: i21;\nloop invariant i104: i22;\nloop invariant i105: i23;\nloop invariant i106: i24;\nloop invariant i107: i25;\nloop invariant i108: i26;\nloop invariant i109: i27;\nloop invariant i110: i28;\nloop invariant i111: i29;\nloop invariant i112: i30;\nloop invariant i113: i31;\nloop invariant i114: i32;\nloop invariant i115: i33;\nloop invariant i116: i34;\nloop invariant i117: i35;\nloop invariant i118: i36;\nloop invariant i119: i37;\nloop invariant i120: i38;\nloop invariant i121: i39;\nloop invariant i122: i40;\nloop invariant i123: i41;\nloop invariant i124: i42;\nloop invariant i125: i43;\nloop invariant i126: i44;\nloop invariant i127: i45;\nloop invariant i128: i46;\nloop invariant i129: i47;\nloop invariant i130: i48;\nloop invariant i131: i49;\nloop invariant i132: i50;\nloop invariant i133: i51;\nloop invariant i134: i52;\nloop invariant i135: i53;\nloop invariant i136: i54;\nloop invariant i137: i55;\nloop invariant i138: i56;\nloop invariant i139: i57;\nloop invariant i140: i58;\nloop invariant i141: i59;\nloop invariant i142: i60;\nloop invariant i143: i61;\nloop invariant i144: i62;\nloop invariant i145: i63;\nloop invariant i146: i64;\nloop invariant i147: i65;\nloop invariant i148: i66;\nloop invariant i149: i67;\nloop invariant i150: i68;\nloop invariant i151: i69;\nloop invariant i152: i70;\nloop invariant i153: i71;\nloop invariant i154: i72;\nloop invariant i155: i73;\nloop invariant i156: i74;\nloop invariant i157: i75;\nloop invariant i158: i76;\nloop invariant i159: i77;\nloop invariant i160: i78;\nloop invariant i161: i79;\nloop invariant i162: i80;\nloop invariant i163: i81;\nloop invariant i164: i82;\nloop invariant i165: i83;\nloop invariant i166: i84;\nloop invariant i167: i85;\nloop invariant i168: i86;\nloop invariant i169: i87;\nloop invariant i170: i88;\nloop invariant i171: i89;\nloop invariant i172: i90;\nloop invariant i173: i91;\nloop invariant i174: i92;\nloop invariant i175: i93;\nloop invariant i176: i94;\nloop invariant i177: i95;\nloop invariant i178: i96;\nloop invariant i179: i97;\nloop invariant i180: i98;\nloop invariant i181: i99;\nloop invariant i182: i100;\nloop invariant i183: i101;\nloop invariant i184: i102;\nloop invariant i185: i103;\nloop invariant i186: i104;\nloop invariant i187: i105;\nloop invariant i188: i106;\nloop invariant i189: i107;\nloop invariant i190: i108;\nloop invariant i191: i109;\nloop invariant i192: i110;\nloop invariant i193: i111;\nloop invariant i194: i112;\nloop invariant i195: i113;\nloop invariant i196: i114;\nloop invariant i197: i115;\nloop invariant i198: i116;\nloop invariant i199: i117;\nloop invariant i200: i118;\nloop invariant i201: i119;\nloop invariant i202: i120;\nloop invariant i203: i121;\nloop invariant i204: i122;\nloop invariant i205: i123;\nloop invariant i206: i124;\nloop invariant i207: i125;\nloop invariant i208: i126;\nloop invariant i209: i127;\nloop invariant i210: i128;\nloop invariant i211: i129;\nloop invariant i212: i130;\nloop invariant i213: i131;\nloop invariant i214: i132;\nloop invariant i215: i133;\nloop invariant i216: i134;\nloop invariant i217: i135;\nloop invariant i218: i136;\nloop invariant i219: i137;\nloop invariant i220: i138;\nloop invariant i221: i139;\nloop invariant i222: i140;\nloop invariant i223: i141;\nloop invariant i224: i142;\nloop invariant i225: i143;\nloop invariant i226: i144;\nloop invariant i227: i145;\nloop invariant i228: i146;\nloop invariant i229: i147;\nloop invariant i230: i148;\nloop invariant i231: i149;\nloop invariant i232: i150;\nloop invariant i233: i151;\nloop invariant i234: i152;\nloop invariant i235: i153;\nloop invariant i236: i154;\nloop invariant i237: i155;\nloop invariant i238: i156;\nloop invariant i239: i157;\nloop invariant i240: i158;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 198,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn >= (i - 1) * a;\nloop invariant i3: sn <= i * a;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i15: i >= 1;\n\nloop invariant i17: sn >= 0;\n\n\n\n\n\nloop invariant i23: ( sn >= a * (i - 1) && sn <= a * i );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i80: sn == a * (i - 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c"
        ],
        "skipped": [],
        "total": 9,
        "success_count": 2,
        "failure_count": 7,
        "success_rate": 0.2222222222222222
    }
}