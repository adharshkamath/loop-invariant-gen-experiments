{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    while (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT;\nloop invariant x - y <= 0;\nloop invariant x == -50;\nloop invariant y == unknown_int();\nloop invariant x + y >= 0;\nloop invariant x + y <= LARGE_INT;\nloop invariant x == x + y;\nloop invariant y == y + 1;\nloop invariant x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant x - y <= 0 ==> x + y <= LARGE_INT;\nloop invariant x == -50 ==> y == unknown_int();\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x + y <= LARGE_INT;\nloop invariant x == x + y ==> y == unknown_int();\nloop invariant y == y + 1 ==> x + y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> y == unknown_int();\nloop invariant x == x + y ==> y == unknown_int();\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\nloop invariant x == -50 ==> x + y <= LARGE_INT;\nloop invariant x == x + y ==> x + y <= LARGE_INT;\nloop invariant y == y + 1 ==> x + y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant x - y <= 0 ==> x + y <= LARGE_INT;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant x < 0 ==> x + y <= 0;\nloop invariant x < 0 ==> y > 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x >= 0 ==> y <= LARGE_INT;\nloop invariant x >= 0 ==> y == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y < LARGE_INT; loop invariant -50 <= x < 0; loop invariant x + y < LARGE_INT; loop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant -50 <= x;\nloop invariant x <= y;\nloop invariant x + y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x == -50 + y * unknown_int();\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant y <= LARGE_INT;\nloop invariant x < unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= (LARGE_INT - LARGE_INT + 1);\nloop invariant x + y >= 0;\nloop invariant y > 0 ==> y <= LARGE_INT;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= 0;\nloop invariant x == -50 + y;\nloop invariant y > -50;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant y > 0 ==> x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant y <= 0 ==> x >= -50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= y + 50;\nloop invariant x >= -50;\nloop invariant x >= y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x < -50;\nloop invariant y >= -1000;\nloop invariant y < LARGE_INT;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x < (y - 1) * y / 2;\nloop invariant x + y >= -50;\nloop invariant x + y < -50;\nloop invariant x + y >= 0;\nloop invariant x + y < 0;\nloop invariant x + y >= 1;\nloop invariant x + y < 1;\nloop invariant x + y >= 2;\nloop invariant x + y < 2;\nloop invariant x + y >= 3;\nloop invariant x + y < 3;\nloop invariant x + y >= 4;\nloop invariant x + y < 4;\nloop invariant x + y >= 5;\nloop invariant x + y < 5;\nloop invariant x + y >= 6;\nloop invariant x + y < 6;\nloop invariant x + y >= 7;\nloop invariant x + y < 7;\nloop invariant x + y >= 8;\nloop invariant x + y < 8;\nloop invariant x + y >= 9;\nloop invariant x + y < 9;\nloop invariant x + y >= 10;\nloop invariant x + y < 10;\nloop invariant x + y >= 11;\nloop invariant x + y < 11;\nloop invariant x + y >= 12;\nloop invariant x + y < 12;\nloop invariant x + y >= 13;\nloop invariant x + y < 13;\nloop invariant x + y >= 14;\nloop invariant x + y < 14;\nloop invariant x + y >= 15;\nloop invariant x + y < 15;\nloop invariant x + y >= 16;\nloop invariant x + y < 16;\nloop invariant x + y >= 17;\nloop invariant x + y < 17;\nloop invariant x + y >= 18;\nloop invariant x + y < 18;\nloop invariant x + y >= 19;\nloop invariant x + y < 19;\nloop invariant x + y >= 20;\nloop invariant x + y < 20;\nloop invariant x + y >= 21;\nloop invariant x + y < 21;\nloop invariant x + y >= 22;\nloop invariant x + y < 22;\nloop invariant x + y >= 23;\nloop invariant x + y < 23;\nloop invariant x + y >= 24;\nloop invariant x + y < 24;\nloop invariant x + y >= 25;\nloop invariant x + y < 25;\nloop invariant x + y >= 26;\nloop invariant x + y < 26;\nloop invariant x + y >= 27;\nloop invariant x + y < 27;\nloop invariant x + y >= 28;\nloop invariant x + y < 28;\nloop invariant x + y >= 29;\nloop invariant x + y < 29;\nloop invariant x + y >= 30;\nloop invariant x + y < 30;\nloop invariant x + y >= 31;\nloop invariant x + y < 31;\nloop invariant x + y >= 32;\nloop invariant x + y < 32;\nloop invariant x + y >= 33;\nloop invariant x + y < 33;\nloop invariant x + y >= 34;\nloop invariant x + y < 34;\nloop invariant x + y >= 35;\nloop invariant x + y < 35;\nloop invariant x + y >= 36;\nloop invariant x + y < 36;\nloop invariant x + y >= 37;\nloop invariant x + y < 37;\nloop invariant x + y >= 38;\nloop invariant x + y < 38;\nloop invariant x + y >= 39;\nloop invariant x + y < 39;\nloop invariant x + y >= 40;\nloop invariant x + y < 40;\nloop invariant x + y >= 41;\nloop invariant x + y < 41;\nloop invariant x + y >= 42;\nloop invariant x + y < 42;\nloop invariant x + y >= 43;\nloop invariant x + y < 43;\nloop invariant x + y >= 44;\nloop invariant x + y < 44;\nloop invariant x + y >= 45;\nloop invariant x + y < 45;\nloop invariant x + y >= 46;\nloop invariant x + y < 46;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\nloop invariant x >= (y * y + y) / 2 - 50;\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= LARGE_INT; loop invariant -1000 < y < LARGE_INT; loop invariant x >= -50; loop invariant x >= y; loop invariant y > 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y);\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 18,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT;\nloop invariant x - y <= 0;\nloop invariant x == -50;\nloop invariant y == unknown_int();\nloop invariant x + y >= 0;\nloop invariant x + y <= LARGE_INT;\nloop invariant x == x + y;\nloop invariant y == y + 1;\nloop invariant x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant x - y <= 0 ==> x + y <= LARGE_INT;\nloop invariant x == -50 ==> y == unknown_int();\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x + y <= LARGE_INT;\nloop invariant x == x + y ==> y == unknown_int();\nloop invariant y == y + 1 ==> x + y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> y == unknown_int();\nloop invariant x == x + y ==> y == unknown_int();\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\nloop invariant x == -50 ==> x + y <= LARGE_INT;\nloop invariant x == x + y ==> x + y <= LARGE_INT;\nloop invariant y == y + 1 ==> x + y <= LARGE_INT;\nloop invariant x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant x - y <= 0 ==> x + y <= LARGE_INT;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> x == x + y;\nloop invariant x - y >= LARGE_INT ==> x == x + y;\nloop invariant x - y <= 0 ==> x == x + y;\nloop invariant x == -50 ==> x == x + y;\nloop invariant x == x + y ==> x == -50;\nloop invariant y == y + 1 ==> x == -50;\nloop invariant x - y >= LARGE_INT ==> x == -50;\nloop invariant x - y <= 0 ==> x == -50;\nloop invariant x == -50 ==> y == y + 1;\nloop invariant x == x + y ==> y == y + 1;\nloop invariant y == y + 1 ==> y == unknown_int();\nloop invariant x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant x - y <= 0 ==> y == unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: x - y >= LARGE_INT ==> x + y <= LARGE_INT;\n\n\n\n\nloop invariant i16: x - y >= LARGE_INT ==> x == x + y;\n\n\n\nloop invariant i20: y == y + 1 ==> x + y <= LARGE_INT;\n\n\n\n\nloop invariant i25: y == y + 1 ==> x == -50;\nloop invariant i26: x - y >= LARGE_INT ==> x == -50;\n\n\nloop invariant i29: y == y + 1 ==> x == x + y;\nloop invariant i30: x == x + y ==> x + y <= LARGE_INT;\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant x < 0 ==> x + y <= 0;\nloop invariant x < 0 ==> y > 0;\nloop invariant x >= 0 ==> x == 0;\nloop invariant x >= 0 ==> y <= LARGE_INT;\nloop invariant x >= 0 ==> y == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant y <= LARGE_INT is partially proven to be inductive.\nloop invariant x < 0 ==> x + y <= 0 is neither established nor preserved.\nloop invariant x < 0 ==> y > 0 is preserved but not established.\nloop invariant x >= 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x >= 0 ==> y <= LARGE_INT is partially proven to be inductive.\nloop invariant x >= 0 ==> y == 0 is established but not preserved.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y < LARGE_INT; loop invariant -50 <= x < 0; loop invariant x + y < LARGE_INT; loop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y < LARGE_INT; loop invariant -50 <= x < 0; loop invariant x + y < LARGE_INT; loop invariant y > 0 is neither established nor preserved.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is neither established nor preserved.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant -50 <= x;\nloop invariant x <= y;\nloop invariant x + y >= 0;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\nloop invariant x >= -50;\nloop invariant x <= y;\nloop invariant y > 0;\nloop invariant x <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant y <= LARGE_INT;\nloop invariant y >= unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x == -50 + y * unknown_int();\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant y <= LARGE_INT;\nloop invariant x < unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= (LARGE_INT - LARGE_INT + 1);\nloop invariant x + y >= 0;\nloop invariant y > 0 ==> y <= LARGE_INT;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is neither established nor preserved.\nloop invariant -50 <= x <= (LARGE_INT - LARGE_INT + 1) is established but not preserved.\nloop invariant x + y >= 0 is preserved but not established.\nloop invariant y > 0 ==> y <= LARGE_INT is partially proven to be inductive.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= 0;\nloop invariant x == -50 + y;\nloop invariant y > -50;\nloop invariant y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant -50 <= x <= 0 is established but not preserved.\nloop invariant x == -50 + y is neither established nor preserved.\nloop invariant y > -50 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant y > 0 ==> x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant y <= 0 ==> x >= -50;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is neither established nor preserved.\nloop invariant x >= -50 + y * (LARGE_INT - y) / 2 is neither established nor preserved.\nloop invariant y > 0 ==> x >= -50 + y * (LARGE_INT - y) / 2 is partially proven to be inductive.\nloop invariant y <= 0 ==> x >= -50 is partially proven to be inductive.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 1000000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= y + 50;\nloop invariant x >= -50;\nloop invariant x >= y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant x >= y + 50 is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 53,
                "annotations": "```\n/*@\nloop invariant 0 <= x < -50;\nloop invariant y >= -1000;\nloop invariant y < LARGE_INT;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant x < (y - 1) * y / 2;\nloop invariant x + y >= -50;\nloop invariant x + y < -50;\nloop invariant x + y >= 0;\nloop invariant x + y < 0;\nloop invariant x + y >= 1;\nloop invariant x + y < 1;\nloop invariant x + y >= 2;\nloop invariant x + y < 2;\nloop invariant x + y >= 3;\nloop invariant x + y < 3;\nloop invariant x + y >= 4;\nloop invariant x + y < 4;\nloop invariant x + y >= 5;\nloop invariant x + y < 5;\nloop invariant x + y >= 6;\nloop invariant x + y < 6;\nloop invariant x + y >= 7;\nloop invariant x + y < 7;\nloop invariant x + y >= 8;\nloop invariant x + y < 8;\nloop invariant x + y >= 9;\nloop invariant x + y < 9;\nloop invariant x + y >= 10;\nloop invariant x + y < 10;\nloop invariant x + y >= 11;\nloop invariant x + y < 11;\nloop invariant x + y >= 12;\nloop invariant x + y < 12;\nloop invariant x + y >= 13;\nloop invariant x + y < 13;\nloop invariant x + y >= 14;\nloop invariant x + y < 14;\nloop invariant x + y >= 15;\nloop invariant x + y < 15;\nloop invariant x + y >= 16;\nloop invariant x + y < 16;\nloop invariant x + y >= 17;\nloop invariant x + y < 17;\nloop invariant x + y >= 18;\nloop invariant x + y < 18;\nloop invariant x + y >= 19;\nloop invariant x + y < 19;\nloop invariant x + y >= 20;\nloop invariant x + y < 20;\nloop invariant x + y >= 21;\nloop invariant x + y < 21;\nloop invariant x + y >= 22;\nloop invariant x + y < 22;\nloop invariant x + y >= 23;\nloop invariant x + y < 23;\nloop invariant x + y >= 24;\nloop invariant x + y < 24;\nloop invariant x + y >= 25;\nloop invariant x + y < 25;\nloop invariant x + y >= 26;\nloop invariant x + y < 26;\nloop invariant x + y >= 27;\nloop invariant x + y < 27;\nloop invariant x + y >= 28;\nloop invariant x + y < 28;\nloop invariant x + y >= 29;\nloop invariant x + y < 29;\nloop invariant x + y >= 30;\nloop invariant x + y < 30;\nloop invariant x + y >= 31;\nloop invariant x + y < 31;\nloop invariant x + y >= 32;\nloop invariant x + y < 32;\nloop invariant x + y >= 33;\nloop invariant x + y < 33;\nloop invariant x + y >= 34;\nloop invariant x + y < 34;\nloop invariant x + y >= 35;\nloop invariant x + y < 35;\nloop invariant x + y >= 36;\nloop invariant x + y < 36;\nloop invariant x + y >= 37;\nloop invariant x + y < 37;\nloop invariant x + y >= 38;\nloop invariant x + y < 38;\nloop invariant x + y >= 39;\nloop invariant x + y < 39;\nloop invariant x + y >= 40;\nloop invariant x + y < 40;\nloop invariant x + y >= 41;\nloop invariant x + y < 41;\nloop invariant x + y >= 42;\nloop invariant x + y < 42;\nloop invariant x + y >= 43;\nloop invariant x + y < 43;\nloop invariant x + y >= 44;\nloop invariant x + y < 44;\nloop invariant x + y >= 45;\nloop invariant x + y < 45;\nloop invariant x + y >= 46;\nloop invariant x + y < 46;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x < -50 is preserved but not established.\nloop invariant y >= -1000 is partially proven to be inductive.\nloop invariant y < LARGE_INT is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x < (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x + y < 0 is partially proven to be inductive.\nloop invariant x + y >= 1 is partially proven to be inductive.\nloop invariant x + y < 1 is partially proven to be inductive.\nloop invariant x + y >= 2 is partially proven to be inductive.\nloop invariant x + y < 2 is partially proven to be inductive.\nloop invariant x + y >= 3 is partially proven to be inductive.\nloop invariant x + y < 3 is partially proven to be inductive.\nloop invariant x + y >= 4 is partially proven to be inductive.\nloop invariant x + y < 4 is partially proven to be inductive.\nloop invariant x + y >= 5 is partially proven to be inductive.\nloop invariant x + y < 5 is partially proven to be inductive.\nloop invariant x + y >= 6 is partially proven to be inductive.\nloop invariant x + y < 6 is partially proven to be inductive.\nloop invariant x + y >= 7 is partially proven to be inductive.\nloop invariant x + y < 7 is partially proven to be inductive.\nloop invariant x + y >= 8 is partially proven to be inductive.\nloop invariant x + y < 8 is partially proven to be inductive.\nloop invariant x + y >= 9 is partially proven to be inductive.\nloop invariant x + y < 9 is partially proven to be inductive.\nloop invariant x + y >= 10 is partially proven to be inductive.\nloop invariant x + y < 10 is partially proven to be inductive.\nloop invariant x + y >= 11 is partially proven to be inductive.\nloop invariant x + y < 11 is partially proven to be inductive.\nloop invariant x + y >= 12 is partially proven to be inductive.\nloop invariant x + y < 12 is partially proven to be inductive.\nloop invariant x + y >= 13 is partially proven to be inductive.\nloop invariant x + y < 13 is partially proven to be inductive.\nloop invariant x + y >= 14 is partially proven to be inductive.\nloop invariant x + y < 14 is partially proven to be inductive.\nloop invariant x + y >= 15 is partially proven to be inductive.\nloop invariant x + y < 15 is partially proven to be inductive.\nloop invariant x + y >= 16 is partially proven to be inductive.\nloop invariant x + y < 16 is partially proven to be inductive.\nloop invariant x + y >= 17 is partially proven to be inductive.\nloop invariant x + y < 17 is partially proven to be inductive.\nloop invariant x + y >= 18 is partially proven to be inductive.\nloop invariant x + y < 18 is partially proven to be inductive.\nloop invariant x + y >= 19 is partially proven to be inductive.\nloop invariant x + y < 19 is partially proven to be inductive.\nloop invariant x + y >= 20 is partially proven to be inductive.\nloop invariant x + y < 20 is partially proven to be inductive.\nloop invariant x + y >= 21 is partially proven to be inductive.\nloop invariant x + y < 21 is partially proven to be inductive.\nloop invariant x + y >= 22 is partially proven to be inductive.\nloop invariant x + y < 22 is partially proven to be inductive.\nloop invariant x + y >= 23 is partially proven to be inductive.\nloop invariant x + y < 23 is partially proven to be inductive.\nloop invariant x + y >= 24 is partially proven to be inductive.\nloop invariant x + y < 24 is partially proven to be inductive.\nloop invariant x + y >= 25 is partially proven to be inductive.\nloop invariant x + y < 25 is partially proven to be inductive.\nloop invariant x + y >= 26 is partially proven to be inductive.\nloop invariant x + y < 26 is partially proven to be inductive.\nloop invariant x + y >= 27 is partially proven to be inductive.\nloop invariant x + y < 27 is partially proven to be inductive.\nloop invariant x + y >= 28 is partially proven to be inductive.\nloop invariant x + y < 28 is partially proven to be inductive.\nloop invariant x + y >= 29 is partially proven to be inductive.\nloop invariant x + y < 29 is partially proven to be inductive.\nloop invariant x + y >= 30 is partially proven to be inductive.\nloop invariant x + y < 30 is partially proven to be inductive.\nloop invariant x + y >= 31 is partially proven to be inductive.\nloop invariant x + y < 31 is partially proven to be inductive.\nloop invariant x + y >= 32 is partially proven to be inductive.\nloop invariant x + y < 32 is partially proven to be inductive.\nloop invariant x + y >= 33 is partially proven to be inductive.\nloop invariant x + y < 33 is partially proven to be inductive.\nloop invariant x + y >= 34 is partially proven to be inductive.\nloop invariant x + y < 34 is partially proven to be inductive.\nloop invariant x + y >= 35 is partially proven to be inductive.\nloop invariant x + y < 35 is partially proven to be inductive.\nloop invariant x + y >= 36 is partially proven to be inductive.\nloop invariant x + y < 36 is partially proven to be inductive.\nloop invariant x + y >= 37 is partially proven to be inductive.\nloop invariant x + y < 37 is partially proven to be inductive.\nloop invariant x + y >= 38 is partially proven to be inductive.\nloop invariant x + y < 38 is partially proven to be inductive.\nloop invariant x + y >= 39 is partially proven to be inductive.\nloop invariant x + y < 39 is partially proven to be inductive.\nloop invariant x + y >= 40 is partially proven to be inductive.\nloop invariant x + y < 40 is partially proven to be inductive.\nloop invariant x + y >= 41 is partially proven to be inductive.\nloop invariant x + y < 41 is partially proven to be inductive.\nloop invariant x + y >= 42 is partially proven to be inductive.\nloop invariant x + y < 42 is partially proven to be inductive.\nloop invariant x + y >= 43 is partially proven to be inductive.\nloop invariant x + y < 43 is partially proven to be inductive.\nloop invariant x + y >= 44 is partially proven to be inductive.\nloop invariant x + y < 44 is partially proven to be inductive.\nloop invariant x + y >= 45 is partially proven to be inductive.\nloop invariant x + y < 45 is partially proven to be inductive.\nloop invariant x + y >= 46 is partially proven to be inductive.\nloop invariant x + y < 46 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\nloop invariant i2: y >= -1000;\n\n\nloop invariant i5: x < (y - 1) * y / 2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\nloop invariant x >= (y * y + y) / 2 - 50;\nloop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= -50 + y is preserved but not established.\nloop invariant x >= (y * y + y) / 2 - 50 is partially proven to be inductive.\nloop invariant y > 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= LARGE_INT; loop invariant -1000 < y < LARGE_INT; loop invariant x >= -50; loop invariant x >= y; loop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= LARGE_INT; loop invariant -1000 < y < LARGE_INT; loop invariant x >= -50; loop invariant x >= y; loop invariant y > 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y);\nloop invariant i2: 0 <= x;\nloop invariant i3: 0 <= y <= LARGE_INT;\nloop invariant i4: x - y >= LARGE_INT;\nloop invariant i5: x - y <= 0;\nloop invariant i6: x == -50;\nloop invariant i7: y == unknown_int();\nloop invariant i8: x + y >= 0;\nloop invariant i9: x + y <= LARGE_INT;\nloop invariant i10: x == x + y;\nloop invariant i11: y == y + 1;\nloop invariant i12: x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant i13: x - y <= 0 ==> x + y <= LARGE_INT;\nloop invariant i14: x == -50 ==> y == unknown_int();\nloop invariant i15: x == x + y ==> y == y + 1;\nloop invariant i16: y == y + 1 ==> y == unknown_int();\nloop invariant i17: x - y >= LARGE_INT ==> x == x + y;\nloop invariant i18: x - y <= 0 ==> x == x + y;\nloop invariant i19: x == -50 ==> x + y <= LARGE_INT;\nloop invariant i20: x == x + y ==> y == unknown_int();\nloop invariant i21: y == y + 1 ==> x + y <= LARGE_INT;\nloop invariant i22: x - y >= LARGE_INT ==> y == unknown_int();\nloop invariant i23: x - y <= 0 ==> y == unknown_int();\nloop invariant i24: x == -50 ==> x == x + y;\nloop invariant i25: x == x + y ==> x == -50;\nloop invariant i26: y == y + 1 ==> x == -50;\nloop invariant i27: x - y >= LARGE_INT ==> x == -50;\nloop invariant i28: x - y <= 0 ==> x == -50;\nloop invariant i29: x == -50 ==> y == y + 1;\nloop invariant i30: y == y + 1 ==> x == x + y;\nloop invariant i31: x == x + y ==> x + y <= LARGE_INT;\nloop invariant i32: 0 <= y;\nloop invariant i33: x >= -50;\nloop invariant i34: y <= LARGE_INT;\nloop invariant i35: x < 0 ==> x + y <= 0;\nloop invariant i36: x < 0 ==> y > 0;\nloop invariant i37: x >= 0 ==> x == 0;\nloop invariant i38: x >= 0 ==> y <= LARGE_INT;\nloop invariant i39: x >= 0 ==> y == 0;\nloop invariant i40: 0 <= y < LARGE_INT; loop invariant -50 <= x < 0; loop invariant x + y < LARGE_INT; loop invariant y > 0;\nloop invariant i41: 0 <= y <= 100000;\nloop invariant i42: -50 <= x;\nloop invariant i43: x <= y;\nloop invariant i44: y >= unknown_int();\nloop invariant i45: y > 0;\nloop invariant i46: x <= LARGE_INT;\nloop invariant i47: x == -50 + y * unknown_int();\nloop invariant i48: x < 0;\nloop invariant i49: x < unknown_int();\nloop invariant i50: -50 <= x <= (LARGE_INT - LARGE_INT + 1);\nloop invariant i51: y > 0 ==> y <= LARGE_INT;\nloop invariant i52: -50 <= x <= 0;\nloop invariant i53: x == -50 + y;\nloop invariant i54: y > -50;\nloop invariant i55: y >= 0;\nloop invariant i56: x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant i57: y > 0 ==> x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant i58: y <= 0 ==> x >= -50;\nloop invariant i59: 0 <= y <= 1000000;\nloop invariant i60: x >= (1 + (y - 1) * y / 2);\nloop invariant i61: x >= y + 50;\nloop invariant i62: x >= y;\nloop invariant i63: 0 <= x < -50;\nloop invariant i64: y >= -1000;\nloop invariant i65: y < LARGE_INT;\nloop invariant i66: x >= (y - 1) * y / 2;\nloop invariant i67: x < (y - 1) * y / 2;\nloop invariant i68: x + y >= -50;\nloop invariant i69: x + y < -50;\nloop invariant i70: x + y < 0;\nloop invariant i71: x + y >= 1;\nloop invariant i72: x + y < 1;\nloop invariant i73: x + y >= 2;\nloop invariant i74: x + y < 2;\nloop invariant i75: x + y >= 3;\nloop invariant i76: x + y < 3;\nloop invariant i77: x + y >= 4;\nloop invariant i78: x + y < 4;\nloop invariant i79: x + y >= 5;\nloop invariant i80: x + y < 5;\nloop invariant i81: x + y >= 6;\nloop invariant i82: x + y < 6;\nloop invariant i83: x + y >= 7;\nloop invariant i84: x + y < 7;\nloop invariant i85: x + y >= 8;\nloop invariant i86: x + y < 8;\nloop invariant i87: x + y >= 9;\nloop invariant i88: x + y < 9;\nloop invariant i89: x + y >= 10;\nloop invariant i90: x + y < 10;\nloop invariant i91: x + y >= 11;\nloop invariant i92: x + y < 11;\nloop invariant i93: x + y >= 12;\nloop invariant i94: x + y < 12;\nloop invariant i95: x + y >= 13;\nloop invariant i96: x + y < 13;\nloop invariant i97: x + y >= 14;\nloop invariant i98: x + y < 14;\nloop invariant i99: x + y >= 15;\nloop invariant i100: x + y < 15;\nloop invariant i101: x + y >= 16;\nloop invariant i102: x + y < 16;\nloop invariant i103: x + y >= 17;\nloop invariant i104: x + y < 17;\nloop invariant i105: x + y >= 18;\nloop invariant i106: x + y < 18;\nloop invariant i107: x + y >= 19;\nloop invariant i108: x + y < 19;\nloop invariant i109: x + y >= 20;\nloop invariant i110: x + y < 20;\nloop invariant i111: x + y >= 21;\nloop invariant i112: x + y < 21;\nloop invariant i113: x + y >= 22;\nloop invariant i114: x + y < 22;\nloop invariant i115: x + y >= 23;\nloop invariant i116: x + y < 23;\nloop invariant i117: x + y >= 24;\nloop invariant i118: x + y < 24;\nloop invariant i119: x + y >= 25;\nloop invariant i120: x + y < 25;\nloop invariant i121: x + y >= 26;\nloop invariant i122: x + y < 26;\nloop invariant i123: x + y >= 27;\nloop invariant i124: x + y < 27;\nloop invariant i125: x + y >= 28;\nloop invariant i126: x + y < 28;\nloop invariant i127: x + y >= 29;\nloop invariant i128: x + y < 29;\nloop invariant i129: x + y >= 30;\nloop invariant i130: x + y < 30;\nloop invariant i131: x + y >= 31;\nloop invariant i132: x + y < 31;\nloop invariant i133: x + y >= 32;\nloop invariant i134: x + y < 32;\nloop invariant i135: x + y >= 33;\nloop invariant i136: x + y < 33;\nloop invariant i137: x + y >= 34;\nloop invariant i138: x + y < 34;\nloop invariant i139: x + y >= 35;\nloop invariant i140: x + y < 35;\nloop invariant i141: x + y >= 36;\nloop invariant i142: x + y < 36;\nloop invariant i143: x + y >= 37;\nloop invariant i144: x + y < 37;\nloop invariant i145: x + y >= 38;\nloop invariant i146: x + y < 38;\nloop invariant i147: x + y >= 39;\nloop invariant i148: x + y < 39;\nloop invariant i149: x + y >= 40;\nloop invariant i150: x + y < 40;\nloop invariant i151: x + y >= 41;\nloop invariant i152: x + y < 41;\nloop invariant i153: x + y >= 42;\nloop invariant i154: x + y < 42;\nloop invariant i155: x + y >= 43;\nloop invariant i156: x + y < 43;\nloop invariant i157: x + y >= 44;\nloop invariant i158: x + y < 44;\nloop invariant i159: x + y >= 45;\nloop invariant i160: x + y < 45;\nloop invariant i161: x + y >= 46;\nloop invariant i162: x + y < 46;\nloop invariant i163: x >= -50 + y;\nloop invariant i164: x >= (y * y + y) / 2 - 50;\nloop invariant i165: 0 <= x <= LARGE_INT; loop invariant -1000 < y < LARGE_INT; loop invariant x >= -50; loop invariant x >= y; loop invariant y > 0;\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 1000000 >= y; loop invariant x + y >= x; loop invariant x <= x + y; loop invariant x <= y; loop invariant x >= 0; loop invariant y >= 0; loop invariant x >= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y); loop invariant x <= -(50 + y);\nloop invariant i2: 0 <= x;\nloop invariant i3: 0 <= y <= LARGE_INT;\nloop invariant i4: x - y >= LARGE_INT;\nloop invariant i5: x - y <= 0;\nloop invariant i6: x == -50;\n\nloop invariant i8: x + y >= 0;\nloop invariant i9: x + y <= LARGE_INT;\nloop invariant i10: x == x + y;\nloop invariant i11: y == y + 1;\nloop invariant i12: x - y >= LARGE_INT ==> x + y <= LARGE_INT;\nloop invariant i13: x - y <= 0 ==> x + y <= LARGE_INT;\n\nloop invariant i15: x == x + y ==> y == y + 1;\n\nloop invariant i17: x - y >= LARGE_INT ==> x == x + y;\nloop invariant i18: x - y <= 0 ==> x == x + y;\nloop invariant i19: x == -50 ==> x + y <= LARGE_INT;\n\nloop invariant i21: y == y + 1 ==> x + y <= LARGE_INT;\n\n\nloop invariant i24: x == -50 ==> x == x + y;\nloop invariant i25: x == x + y ==> x == -50;\nloop invariant i26: y == y + 1 ==> x == -50;\nloop invariant i27: x - y >= LARGE_INT ==> x == -50;\nloop invariant i28: x - y <= 0 ==> x == -50;\nloop invariant i29: x == -50 ==> y == y + 1;\nloop invariant i30: y == y + 1 ==> x == x + y;\nloop invariant i31: x == x + y ==> x + y <= LARGE_INT;\nloop invariant i32: 0 <= y;\nloop invariant i33: x >= -50;\nloop invariant i34: y <= LARGE_INT;\nloop invariant i35: x < 0 ==> x + y <= 0;\nloop invariant i36: x < 0 ==> y > 0;\nloop invariant i37: x >= 0 ==> x == 0;\nloop invariant i38: x >= 0 ==> y <= LARGE_INT;\nloop invariant i39: x >= 0 ==> y == 0;\nloop invariant i40: 0 <= y < LARGE_INT; loop invariant -50 <= x < 0; loop invariant x + y < LARGE_INT; loop invariant y > 0;\nloop invariant i41: 0 <= y <= 100000;\nloop invariant i42: -50 <= x;\nloop invariant i43: x <= y;\n\nloop invariant i45: y > 0;\nloop invariant i46: x <= LARGE_INT;\n\nloop invariant i48: x < 0;\n\nloop invariant i50: -50 <= x <= (LARGE_INT - LARGE_INT + 1);\nloop invariant i51: y > 0 ==> y <= LARGE_INT;\nloop invariant i52: -50 <= x <= 0;\nloop invariant i53: x == -50 + y;\nloop invariant i54: y > -50;\nloop invariant i55: y >= 0;\nloop invariant i56: x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant i57: y > 0 ==> x >= -50 + y * (LARGE_INT - y) / 2;\nloop invariant i58: y <= 0 ==> x >= -50;\nloop invariant i59: 0 <= y <= 1000000;\nloop invariant i60: x >= (1 + (y - 1) * y / 2);\nloop invariant i61: x >= y + 50;\nloop invariant i62: x >= y;\nloop invariant i63: 0 <= x < -50;\nloop invariant i64: y >= -1000;\nloop invariant i65: y < LARGE_INT;\nloop invariant i66: x >= (y - 1) * y / 2;\nloop invariant i67: x < (y - 1) * y / 2;\nloop invariant i68: x + y >= -50;\nloop invariant i69: x + y < -50;\nloop invariant i70: x + y < 0;\nloop invariant i71: x + y >= 1;\nloop invariant i72: x + y < 1;\nloop invariant i73: x + y >= 2;\nloop invariant i74: x + y < 2;\nloop invariant i75: x + y >= 3;\nloop invariant i76: x + y < 3;\nloop invariant i77: x + y >= 4;\nloop invariant i78: x + y < 4;\nloop invariant i79: x + y >= 5;\nloop invariant i80: x + y < 5;\nloop invariant i81: x + y >= 6;\nloop invariant i82: x + y < 6;\nloop invariant i83: x + y >= 7;\nloop invariant i84: x + y < 7;\nloop invariant i85: x + y >= 8;\nloop invariant i86: x + y < 8;\nloop invariant i87: x + y >= 9;\nloop invariant i88: x + y < 9;\nloop invariant i89: x + y >= 10;\nloop invariant i90: x + y < 10;\nloop invariant i91: x + y >= 11;\nloop invariant i92: x + y < 11;\nloop invariant i93: x + y >= 12;\nloop invariant i94: x + y < 12;\nloop invariant i95: x + y >= 13;\nloop invariant i96: x + y < 13;\nloop invariant i97: x + y >= 14;\nloop invariant i98: x + y < 14;\nloop invariant i99: x + y >= 15;\nloop invariant i100: x + y < 15;\nloop invariant i101: x + y >= 16;\nloop invariant i102: x + y < 16;\nloop invariant i103: x + y >= 17;\nloop invariant i104: x + y < 17;\nloop invariant i105: x + y >= 18;\nloop invariant i106: x + y < 18;\nloop invariant i107: x + y >= 19;\nloop invariant i108: x + y < 19;\nloop invariant i109: x + y >= 20;\nloop invariant i110: x + y < 20;\nloop invariant i111: x + y >= 21;\nloop invariant i112: x + y < 21;\nloop invariant i113: x + y >= 22;\nloop invariant i114: x + y < 22;\nloop invariant i115: x + y >= 23;\nloop invariant i116: x + y < 23;\nloop invariant i117: x + y >= 24;\nloop invariant i118: x + y < 24;\nloop invariant i119: x + y >= 25;\nloop invariant i120: x + y < 25;\nloop invariant i121: x + y >= 26;\nloop invariant i122: x + y < 26;\nloop invariant i123: x + y >= 27;\nloop invariant i124: x + y < 27;\nloop invariant i125: x + y >= 28;\nloop invariant i126: x + y < 28;\nloop invariant i127: x + y >= 29;\nloop invariant i128: x + y < 29;\nloop invariant i129: x + y >= 30;\nloop invariant i130: x + y < 30;\nloop invariant i131: x + y >= 31;\nloop invariant i132: x + y < 31;\nloop invariant i133: x + y >= 32;\nloop invariant i134: x + y < 32;\nloop invariant i135: x + y >= 33;\nloop invariant i136: x + y < 33;\nloop invariant i137: x + y >= 34;\nloop invariant i138: x + y < 34;\nloop invariant i139: x + y >= 35;\nloop invariant i140: x + y < 35;\nloop invariant i141: x + y >= 36;\nloop invariant i142: x + y < 36;\nloop invariant i143: x + y >= 37;\nloop invariant i144: x + y < 37;\nloop invariant i145: x + y >= 38;\nloop invariant i146: x + y < 38;\nloop invariant i147: x + y >= 39;\nloop invariant i148: x + y < 39;\nloop invariant i149: x + y >= 40;\nloop invariant i150: x + y < 40;\nloop invariant i151: x + y >= 41;\nloop invariant i152: x + y < 41;\nloop invariant i153: x + y >= 42;\nloop invariant i154: x + y < 42;\nloop invariant i155: x + y >= 43;\nloop invariant i156: x + y < 43;\nloop invariant i157: x + y >= 44;\nloop invariant i158: x + y < 44;\nloop invariant i159: x + y >= 45;\nloop invariant i160: x + y < 45;\nloop invariant i161: x + y >= 46;\nloop invariant i162: x + y < 46;\nloop invariant i163: x >= -50 + y;\nloop invariant i164: x >= (y * y + y) / 2 - 50;\nloop invariant i165: 0 <= x <= LARGE_INT; loop invariant -1000 < y < LARGE_INT; loop invariant x >= -50; loop invariant x >= y; loop invariant y > 0;\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 17,
        "success_count": 4,
        "failure_count": 13,
        "success_rate": 0.23529411764705882
    }
}