{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  while((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= n <= 10000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant h1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 == h2 - (f1 + g1);\nloop invariant h2 == h1 + (f1 + g1);\nloop invariant f1 == g1 - h1;\nloop invariant f2 == g2 - h2;\nloop invariant f1 == h1 - g1;\nloop invariant f2 == h2 - g2;\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant f1 + g1 == h2 - g2;\nloop invariant f2 + g2 == h1 - g1;\nloop invariant f1 == h2 - g2 - g1;\nloop invariant f2 == h1 - g1 - g2;\nloop invariant f1 == h1 - g1 - g2;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g1 - g2;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= f1 <= g1 <= h1;\nloop invariant 0 <= f2 <= g2 <= h2;\nloop invariant h2 == h1 + f1 ==> n > 0;\nloop invariant h2 == h1 + f1 ==> n <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant f1 >= g1;\nloop invariant f2 >= g2;\nloop invariant f1 >= 0 && f1 <= 100000;\nloop invariant f2 >= 0 && f2 <= 100000;\nloop invariant g1 >= 0 && g1 <= 100000;\nloop invariant g2 >= 0 && g2 <= 100000;\nloop invariant h1 >= 0 && h1 <= 100000;\nloop invariant h2 >= 0 && h2 <= 100000;\nloop invariant n >= 0 && n <= 100000;\nloop invariant f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant f1 >= g1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant f2 >= g2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant h1 >= 0 ==> h1 >= 0 && h1 <= 100000;\nloop invariant h2 >= 0 ==> h2 >= 0 && h2 <= 100000;\nloop invariant n > 0 ==> n >= 0 && n <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant (f1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (f2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (g1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\nloop invariant (f1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (f2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (g1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= unknown();\nloop invariant 0 <= f1 <= unknown();\nloop invariant 0 <= f2 <= unknown();\nloop invariant 1 <= g1 <= unknown();\nloop invariant 1 <= g2 <= unknown();\nloop invariant h2 >= f2 + g2;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 >= f1 + g1;\nloop invariant h1 <= f1 + g1;\nloop invariant f1 >= 0;\nloop invariant f1 <= unknown();\nloop invariant f2 >= 0;\nloop invariant f2 <= unknown();\nloop invariant g1 >= 1;\nloop invariant g1 <= unknown();\nloop invariant g2 >= 1;\nloop invariant g2 <= unknown();\nloop invariant h1 >= 0;\nloop invariant h1 <= unknown();\nloop invariant h2 >= 0;\nloop invariant h2 <= unknown();\nloop invariant h1 == h2 - f1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 == f1 + g1;\nloop invariant f1 <= g1;\nloop invariant f2 <= g2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= f1 <= 1;\nloop invariant 0 <= f2 <= 1;\nloop invariant 0 <= g1 <= 1;\nloop invariant 0 <= g2 <= 1;\nloop invariant 1 <= n;\nloop invariant (h1 == f1 + g1);\nloop invariant (h2 == f2 + g2);\nloop invariant (h2 == h1 + f1);\nloop invariant (f2 == f1 + g1);\nloop invariant (g2 == g1 + f1);\nloop invariant (f2 == f1 + g1);\nloop invariant (g2 == g1 + f1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= h1;\nloop invariant f2 <= h2;\nloop invariant g1 <= h1;\nloop invariant g2 <= h2;\nloop invariant h1 <= f1 + g1;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 <= f1 + f2;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 <= f1 + g2;\nloop invariant h2 <= f2 + g1;\nloop invariant h1 <= f1 + g1 + f2;\nloop invariant h2 <= f2 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2;\nloop invariant h2 <= f2 + g2 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2;\nloop invariant h2 <= f2 + g2 + g1 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n;\nloop invariant n <= 100000;\nloop invariant f1 + g1 <= n;\nloop invariant f2 + g2 <= n;\nloop invariant f1 <= n;\nloop invariant f2 <= n;\nloop invariant g1 <= n;\nloop invariant g2 <= n;\nloop invariant h1 <= n;\nloop invariant h2 <= n;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant f2 <= g2;\nloop invariant h1 <= g1;\nloop invariant h2 <= g2;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 >= g1 - n;\nloop invariant f2 >= g2 - n;\nloop invariant g1 >= f1 - n;\nloop invariant g2 >= f2 - n;\nloop invariant h1 >= f1 - n;\nloop invariant h2 >= f2 - n;\nloop invariant h1 >= g1 - n;\nloop invariant h2 >= g2 - n;\nloop invariant f1 >= h1 - n;\nloop invariant f2 >= h2 - n;\nloop invariant g1 >= h1 - n;\nloop invariant g2 >= h2 - n;\nloop invariant f1 >= h1 - f2;\nloop invariant f2 >= h2 - f1;\nloop invariant g1 >= h1 - f1;\nloop invariant g2 >= h2 - f2;\nloop invariant h1 >= f1 - f2;\nloop invariant h2 >= f2 - f1;\nloop invariant h1 >= g1 - g2;\nloop invariant h2 >= g2 - g1;\nloop invariant h1 >= f1 - g2;\nloop invariant h2 >= f2 - g1;\nloop invariant h1 >= g1 - f2;\nloop invariant h2 >= g2 - f1;\nloop invariant h1 >= h2 - f1;\nloop invariant h2 >= h1 - f2;\nloop invariant h1 >= h2 - g1;\nloop invariant h2 >= h1 - g2;\nloop invariant h1 >= h2 - f2;\nloop invariant h2 >= h1 - f1;\nloop invariant h1 >= h2 - g2;\nloop invariant h2 >= h1 - g1;\nloop invariant h1 >= h2 - h1;\nloop invariant h2 >= h1 - h2;\nloop invariant h1 >= h2 - h2;\nloop invariant h2 >= h1 - h1;\nloop invariant h1 >= h2 - h1 + h2;\nloop invariant h2 >= h1 - h2 + h1;\nloop invariant h1 >= h2 - h2 + h1;\nloop invariant h2 >= h1 - h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\n*/\n```",
            "```\n/*@\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant g1 >= 1;\nloop invariant h1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g2 >= 1;\nloop invariant h2 >= 0;\nloop invariant h1 + f1 >= h2;\nloop invariant g1 >= g2;\nloop invariant h1 >= h2;\nloop invariant f1 >= f2;\nloop invariant n >= 0;\nloop invariant n <= 100000;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 + g1 == f2 + g2;\nloop invariant f1 + g1 >= f2 + g2;\nloop invariant h1 >= f1 + g1;\nloop invariant h2 >= f2 + g2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= f1 <= f2;\nloop invariant f2 <= g1 <= g2;loop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n <= unknown();\nloop invariant 0 <= f1 <= f2 <= g1 <= g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h2 == h1 + f1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 2147483647;\nloop invariant 0 <= f1 <= f2 <= g1 <= g2 <= h1 <= h2 <= 2147483647;\nloop invariant h2 == h1 + f1;\nloop invariant f2 == f1 + g1;\nloop invariant g2 == g1 + h1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == 2 * f2 + g2;\nloop invariant f2 == 2 * f1 + g1;\nloop invariant g2 == 2 * g1 + h1;\nloop invariant h2 == h1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1;\nloop invariant g2 == g1 + h1 + f1;\nloop invariant h2 == h1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= original_ n;\nloop invariant f1 = original_f1 + (original_g1 + 1) * (original_g1 + 2) / 2;\nloop invariant f2 = original_f2 + (original_g2 + 1) * (original_g2 + 2) / 2;\nloop invariant g1 == original_g1 + n;\nloop invariant g2 == original_g2 + n;\nloop invariant h1 == original_h1 + (original_f1 + original_g1 + 1) * (original_f1 + original_g1 + 2) / 2;\nloop invariant h2 == original_h2 + (original_f2 + original_g2 + 1) * (original_f2 + original_g2 + 2) / 2;\nloop invariant original_f1 == original_f2;\nloop invariant original_g1 == original_g2;\nloop invariant original_h1 == original_h2;\nloop invariant original_n >= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 22,
                "annotations": "```\n/*@\nloop invariant 1 <= n <= 10000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant h1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 == h2 - (f1 + g1);\nloop invariant h2 == h1 + (f1 + g1);\nloop invariant f1 == g1 - h1;\nloop invariant f2 == g2 - h2;\nloop invariant f1 == h1 - g1;\nloop invariant f2 == h2 - g2;\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant f1 + g1 == h2 - g2;\nloop invariant f2 + g2 == h1 - g1;\nloop invariant f1 == h2 - g2 - g1;\nloop invariant f2 == h1 - g1 - g2;\nloop invariant f1 == h1 - g1 - g2;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g1 - g2;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\nloop invariant f1 == h1 - g2 - g1;\nloop invariant f2 == h2 - g2 - g1;\nloop invariant f1 == h2 - g1 - g2;\nloop invariant f2 == h1 - g2 - g1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= n <= 10000 is preserved but not established.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 0 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant g1 <= g2 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is preserved but not established.\nloop invariant h2 == f2 + g2 is partially proven to be inductive.\nloop invariant h1 == h2 - (f1 + g1) is partially proven to be inductive.\nloop invariant h2 == h1 + (f1 + g1) is partially proven to be inductive.\nloop invariant f1 == g1 - h1 is partially proven to be inductive.\nloop invariant f2 == g2 - h2 is partially proven to be inductive.\nloop invariant f1 == h1 - g1 is partially proven to be inductive.\nloop invariant f2 == h2 - g2 is partially proven to be inductive.\nloop invariant f1 + g1 == h1 is partially proven to be inductive.\nloop invariant f2 + g2 == h2 is partially proven to be inductive.\nloop invariant f1 + g1 == h2 - g2 is partially proven to be inductive.\nloop invariant f2 + g2 == h1 - g1 is partially proven to be inductive.\nloop invariant f1 == h2 - g2 - g1 is partially proven to be inductive.\nloop invariant f2 == h1 - g1 - g2 is partially proven to be inductive.\nloop invariant f1 == h1 - g1 - g2 is partially proven to be inductive.\nloop invariant f2 == h2 - g2 - g1 is partially proven to be inductive.\nloop invariant f1 == h2 - g1 - g2 is partially proven to be inductive.\nloop invariant f2 == h1 - g2 - g1 is partially proven to be inductive.\nloop invariant f1 == h1 - g2 - g1 is partially proven to be inductive.\nloop invariant f2 == h2 - g1 - g2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\nloop invariant i8: h1 <= h2;\nloop invariant i9: f1 <= f2;\nloop invariant i10: g1 <= g2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= f1 <= g1 <= h1;\nloop invariant 0 <= f2 <= g2 <= h2;\nloop invariant h2 == h1 + f1 ==> n > 0;\nloop invariant h2 == h1 + f1 ==> n <= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= f1 <= g1 <= h1 is preserved but not established.\nloop invariant 0 <= f2 <= g2 <= h2 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 ==> n > 0 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 ==> n <= 0 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f2 <= g2;\nloop invariant g2 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 100000 is preserved but not established.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 0 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant g1 <= g2 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 <= g1 is partially proven to be inductive.\nloop invariant g1 <= h1 is preserved but not established.\nloop invariant f2 <= g2 is partially proven to be inductive.\nloop invariant g2 <= h2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\nloop invariant i8: f1 <= f2;\nloop invariant i9: g1 <= g2;\nloop invariant i10: h1 <= h2;\nloop invariant i11: f1 <= g1;\n\nloop invariant i13: f2 <= g2;\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant f1 >= g1;\nloop invariant f2 >= g2;\nloop invariant f1 >= 0 && f1 <= 100000;\nloop invariant f2 >= 0 && f2 <= 100000;\nloop invariant g1 >= 0 && g1 <= 100000;\nloop invariant g2 >= 0 && g2 <= 100000;\nloop invariant h1 >= 0 && h1 <= 100000;\nloop invariant h2 >= 0 && h2 <= 100000;\nloop invariant n >= 0 && n <= 100000;\nloop invariant f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant f1 >= g1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant f2 >= g2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant h1 >= 0 ==> h1 >= 0 && h1 <= 100000;\nloop invariant h2 >= 0 ==> h2 >= 0 && h2 <= 100000;\nloop invariant n > 0 ==> n >= 0 && n <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 100000 is preserved but not established.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 0 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant f1 + g1 == h1 is preserved but not established.\nloop invariant f2 + g2 == h2 is partially proven to be inductive.\nloop invariant f1 >= g1 is partially proven to be inductive.\nloop invariant f2 >= g2 is partially proven to be inductive.\nloop invariant f1 >= 0 && f1 <= 100000 is partially proven to be inductive.\nloop invariant f2 >= 0 && f2 <= 100000 is partially proven to be inductive.\nloop invariant g1 >= 0 && g1 <= 100000 is partially proven to be inductive.\nloop invariant g2 >= 0 && g2 <= 100000 is partially proven to be inductive.\nloop invariant h1 >= 0 && h1 <= 100000 is partially proven to be inductive.\nloop invariant h2 >= 0 && h2 <= 100000 is partially proven to be inductive.\nloop invariant n >= 0 && n <= 100000 is partially proven to be inductive.\nloop invariant f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000 is partially proven to be inductive.\nloop invariant f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000 is partially proven to be inductive.\nloop invariant f1 >= g1 ==> f1 >= 0 && f1 <= 100000 is partially proven to be inductive.\nloop invariant f2 >= g2 ==> f2 >= 0 && f2 <= 100000 is partially proven to be inductive.\nloop invariant h1 >= 0 ==> h1 >= 0 && h1 <= 100000 is partially proven to be inductive.\nloop invariant h2 >= 0 ==> h2 >= 0 && h2 <= 100000 is partially proven to be inductive.\nloop invariant n > 0 ==> n >= 0 && n <= 100000 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i19: f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant i20: f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000;\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant (f1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (f2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (g1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\nloop invariant (f1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (f2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (g1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant (f1 == (g1 - f1)) ==> (h1 == (f1 + g1)) is partially proven to be inductive.\nloop invariant (f2 == (g2 - f2)) ==> (h2 == (f2 + g2)) is partially proven to be inductive.\nloop invariant (g1 == (g1 - f1)) ==> (h1 == (f1 + g1)) is preserved but not established.\nloop invariant (g2 == (g2 - f2)) ==> (h2 == (f2 + g2)) is partially proven to be inductive.\nloop invariant (h1 == (f1 + g1)) ==> (h1 == (f1 + g1)) is partially proven to be inductive.\nloop invariant (h2 == (f2 + g2)) ==> (h2 == (f2 + g2)) is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\nloop invariant i5: (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant i6: (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant i7: (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 17,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= unknown();\nloop invariant 0 <= f1 <= unknown();\nloop invariant 0 <= f2 <= unknown();\nloop invariant 1 <= g1 <= unknown();\nloop invariant 1 <= g2 <= unknown();\nloop invariant h2 >= f2 + g2;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 >= f1 + g1;\nloop invariant h1 <= f1 + g1;\nloop invariant f1 >= 0;\nloop invariant f1 <= unknown();\nloop invariant f2 >= 0;\nloop invariant f2 <= unknown();\nloop invariant g1 >= 1;\nloop invariant g1 <= unknown();\nloop invariant g2 >= 1;\nloop invariant g2 <= unknown();\nloop invariant h1 >= 0;\nloop invariant h1 <= unknown();\nloop invariant h2 >= 0;\nloop invariant h2 <= unknown();\nloop invariant h1 == h2 - f1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 == f1 + g1;\nloop invariant f1 <= g1;\nloop invariant f2 <= g2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: h2 <= f2 + g2;\n\nloop invariant i9: h1 <= f1 + g1;\nloop invariant i10: f1 >= 0;\n\nloop invariant i12: f2 >= 0;\n\nloop invariant i14: g1 >= 1;\n\nloop invariant i16: g2 >= 1;\n\nloop invariant i18: h1 >= 0;\n\nloop invariant i20: h2 >= 0;\n\nloop invariant i22: h1 == h2 - f1;\n\n\nloop invariant i25: f1 <= g1;\nloop invariant i26: f2 <= g2;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= f1 <= 1;\nloop invariant 0 <= f2 <= 1;\nloop invariant 0 <= g1 <= 1;\nloop invariant 0 <= g2 <= 1;\nloop invariant 1 <= n;\nloop invariant (h1 == f1 + g1);\nloop invariant (h2 == f2 + g2);\nloop invariant (h2 == h1 + f1);\nloop invariant (f2 == f1 + g1);\nloop invariant (g2 == g1 + f1);\nloop invariant (f2 == f1 + g1);\nloop invariant (g2 == g1 + f1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= f1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= f2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= g1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= g2 <= 1 is partially proven to be inductive.\nloop invariant 1 <= n is preserved but not established.\nloop invariant (h1 == f1 + g1) is preserved but not established.\nloop invariant (h2 == f2 + g2) is partially proven to be inductive.\nloop invariant (h2 == h1 + f1) is partially proven to be inductive.\nloop invariant (f2 == f1 + g1) is partially proven to be inductive.\nloop invariant (g2 == g1 + f1) is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: (h2 == h1 + f1);\n\nloop invariant i10: (g2 == g1 + f1);\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= h1;\nloop invariant f2 <= h2;\nloop invariant g1 <= h1;\nloop invariant g2 <= h2;\nloop invariant h1 <= f1 + g1;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 <= f1 + f2;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 <= f1 + g2;\nloop invariant h2 <= f2 + g1;\nloop invariant h1 <= f1 + g1 + f2;\nloop invariant h2 <= f2 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2;\nloop invariant h2 <= f2 + g2 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2;\nloop invariant h2 <= f2 + g2 + g1 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 100000 is preserved but not established.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 0 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant g1 <= g2 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 <= h1 is partially proven to be inductive.\nloop invariant f2 <= h2 is preserved but not established.\nloop invariant g1 <= h1 is partially proven to be inductive.\nloop invariant g2 <= h2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + f2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + f2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + f1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\nloop invariant i8: f1 <= f2;\nloop invariant i9: g1 <= g2;\nloop invariant i10: h1 <= h2;\nloop invariant i11: f1 <= h1;\n\n\n\nloop invariant i15: h1 <= f1 + g1;\nloop invariant i16: h2 <= f2 + g2;\n\nloop invariant i18: h1 <= f1 + g2;\nloop invariant i19: h2 <= f2 + g1;\nloop invariant i20: h1 <= f1 + g1 + f2;\nloop invariant i21: h2 <= f2 + g2 + g1;\nloop invariant i22: h1 <= f1 + g1 + g2;\nloop invariant i23: h2 <= f2 + g2 + f1;\nloop invariant i24: h1 <= f1 + g1 + g2 + f2;\nloop invariant i25: h2 <= f2 + g2 + g1 + f1;\nloop invariant i26: h1 <= f1 + g1 + g2 + f2 + f1;\nloop invariant i27: h2 <= f2 + g2 + g1 + f1 + g2;\nloop invariant i28: h1 <= f1 + g1 + g2 + f2 + f1 + g2;\nloop invariant i29: h2 <= f2 + g2 + g1 + f1 + g2 + f1;\nloop invariant i30: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1;\nloop invariant i31: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1;\nloop invariant i32: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1;\nloop invariant i33: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2;\nloop invariant i34: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2;\nloop invariant i35: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i36: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i37: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i38: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i39: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i40: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i41: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i42: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i43: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i44: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i45: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant i46: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 20,
                "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant n <= 100000;\nloop invariant f1 + g1 <= n;\nloop invariant f2 + g2 <= n;\nloop invariant f1 <= n;\nloop invariant f2 <= n;\nloop invariant g1 <= n;\nloop invariant g2 <= n;\nloop invariant h1 <= n;\nloop invariant h2 <= n;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant f2 <= g2;\nloop invariant h1 <= g1;\nloop invariant h2 <= g2;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 >= g1 - n;\nloop invariant f2 >= g2 - n;\nloop invariant g1 >= f1 - n;\nloop invariant g2 >= f2 - n;\nloop invariant h1 >= f1 - n;\nloop invariant h2 >= f2 - n;\nloop invariant h1 >= g1 - n;\nloop invariant h2 >= g2 - n;\nloop invariant f1 >= h1 - n;\nloop invariant f2 >= h2 - n;\nloop invariant g1 >= h1 - n;\nloop invariant g2 >= h2 - n;\nloop invariant f1 >= h1 - f2;\nloop invariant f2 >= h2 - f1;\nloop invariant g1 >= h1 - f1;\nloop invariant g2 >= h2 - f2;\nloop invariant h1 >= f1 - f2;\nloop invariant h2 >= f2 - f1;\nloop invariant h1 >= g1 - g2;\nloop invariant h2 >= g2 - g1;\nloop invariant h1 >= f1 - g2;\nloop invariant h2 >= f2 - g1;\nloop invariant h1 >= g1 - f2;\nloop invariant h2 >= g2 - f1;\nloop invariant h1 >= h2 - f1;\nloop invariant h2 >= h1 - f2;\nloop invariant h1 >= h2 - g1;\nloop invariant h2 >= h1 - g2;\nloop invariant h1 >= h2 - f2;\nloop invariant h2 >= h1 - f1;\nloop invariant h1 >= h2 - g2;\nloop invariant h2 >= h1 - g1;\nloop invariant h1 >= h2 - h1;\nloop invariant h2 >= h1 - h2;\nloop invariant h1 >= h2 - h2;\nloop invariant h2 >= h1 - h1;\nloop invariant h1 >= h2 - h1 + h2;\nloop invariant h2 >= h1 - h2 + h1;\nloop invariant h1 >= h2 - h2 + h1;\nloop invariant h2 >= h1 - h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant n <= 100000 is preserved but not established.\nloop invariant f1 + g1 <= n is preserved but not established.\nloop invariant f2 + g2 <= n is preserved but not established.\nloop invariant f1 <= n is partially proven to be inductive.\nloop invariant f2 <= n is partially proven to be inductive.\nloop invariant g1 <= n is partially proven to be inductive.\nloop invariant g2 <= n is partially proven to be inductive.\nloop invariant h1 <= n is partially proven to be inductive.\nloop invariant h2 <= n is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant g1 <= g2 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 <= g1 is partially proven to be inductive.\nloop invariant f2 <= g2 is partially proven to be inductive.\nloop invariant h1 <= g1 is partially proven to be inductive.\nloop invariant h2 <= g2 is partially proven to be inductive.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 0 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant f1 >= g1 - n is partially proven to be inductive.\nloop invariant f2 >= g2 - n is partially proven to be inductive.\nloop invariant g1 >= f1 - n is partially proven to be inductive.\nloop invariant g2 >= f2 - n is partially proven to be inductive.\nloop invariant h1 >= f1 - n is partially proven to be inductive.\nloop invariant h2 >= f2 - n is partially proven to be inductive.\nloop invariant h1 >= g1 - n is partially proven to be inductive.\nloop invariant h2 >= g2 - n is partially proven to be inductive.\nloop invariant f1 >= h1 - n is partially proven to be inductive.\nloop invariant f2 >= h2 - n is partially proven to be inductive.\nloop invariant g1 >= h1 - n is partially proven to be inductive.\nloop invariant g2 >= h2 - n is partially proven to be inductive.\nloop invariant f1 >= h1 - f2 is partially proven to be inductive.\nloop invariant f2 >= h2 - f1 is partially proven to be inductive.\nloop invariant g1 >= h1 - f1 is partially proven to be inductive.\nloop invariant g2 >= h2 - f2 is partially proven to be inductive.\nloop invariant h1 >= f1 - f2 is partially proven to be inductive.\nloop invariant h2 >= f2 - f1 is preserved but not established.\nloop invariant h1 >= g1 - g2 is partially proven to be inductive.\nloop invariant h2 >= g2 - g1 is partially proven to be inductive.\nloop invariant h1 >= f1 - g2 is partially proven to be inductive.\nloop invariant h2 >= f2 - g1 is partially proven to be inductive.\nloop invariant h1 >= g1 - f2 is partially proven to be inductive.\nloop invariant h2 >= g2 - f1 is partially proven to be inductive.\nloop invariant h1 >= h2 - f1 is partially proven to be inductive.\nloop invariant h2 >= h1 - f2 is partially proven to be inductive.\nloop invariant h1 >= h2 - g1 is partially proven to be inductive.\nloop invariant h2 >= h1 - g2 is partially proven to be inductive.\nloop invariant h1 >= h2 - f2 is partially proven to be inductive.\nloop invariant h2 >= h1 - f1 is partially proven to be inductive.\nloop invariant h1 >= h2 - g2 is partially proven to be inductive.\nloop invariant h2 >= h1 - g1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h1 is partially proven to be inductive.\nloop invariant h2 >= h1 - h2 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h1 + h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h2 + h1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 is partially proven to be inductive.\nloop invariant h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: f1 <= f2;\nloop invariant i12: g1 <= g2;\nloop invariant i13: h1 <= h2;\nloop invariant i14: f1 <= g1;\nloop invariant i15: f2 <= g2;\nloop invariant i16: h1 <= g1;\nloop invariant i17: h2 <= g2;\nloop invariant i18: f1 >= 0;\nloop invariant i19: f2 >= 0;\nloop invariant i20: g1 >= 0;\nloop invariant i21: g2 >= 0;\nloop invariant i22: h1 >= 0;\nloop invariant i23: h2 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i36: f1 >= h1 - f2;\n\nloop invariant i38: g1 >= h1 - f1;\nloop invariant i39: g2 >= h2 - f2;\nloop invariant i40: h1 >= f1 - f2;\n\nloop invariant i42: h1 >= g1 - g2;\nloop invariant i43: h2 >= g2 - g1;\nloop invariant i44: h1 >= f1 - g2;\nloop invariant i45: h2 >= f2 - g1;\nloop invariant i46: h1 >= g1 - f2;\n\nloop invariant i48: h1 >= h2 - f1;\nloop invariant i49: h2 >= h1 - f2;\nloop invariant i50: h1 >= h2 - g1;\nloop invariant i51: h2 >= h1 - g2;\nloop invariant i52: h1 >= h2 - f2;\nloop invariant i53: h2 >= h1 - f1;\nloop invariant i54: h1 >= h2 - g2;\nloop invariant i55: h2 >= h1 - g1;\nloop invariant i56: h1 >= h2 - h1;\nloop invariant i57: h2 >= h1 - h2;\nloop invariant i58: h1 >= h2 - h2;\nloop invariant i59: h2 >= h1 - h1;\n\nloop invariant i61: h2 >= h1 - h2 + h1;\nloop invariant i62: h1 >= h2 - h2 + h1;\nloop invariant i63: h2 >= h1 - h1 + h2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant f1 + g1 == h1;\nloop invariant f2 + g2 == h2;\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\nloop invariant (f2 + g2) == (h2 - h1);\nloop invariant (f1 + g1) == (h1 - h2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant f1 + g1 == h1 is preserved but not established.\nloop invariant f2 + g2 == h2 is partially proven to be inductive.\nloop invariant (f1 + g1) == (h1 - h2) is partially proven to be inductive.\nloop invariant (f2 + g2) == (h2 - h1) is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant g1 >= 1;\nloop invariant h1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g2 >= 1;\nloop invariant h2 >= 0;\nloop invariant h1 + f1 >= h2;\nloop invariant g1 >= g2;\nloop invariant h1 >= h2;\nloop invariant f1 >= f2;\nloop invariant n >= 0;\nloop invariant n <= 100000;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 + g1 == f2 + g2;\nloop invariant f1 + g1 >= f2 + g2;\nloop invariant h1 >= f1 + g1;\nloop invariant h2 >= f2 + g2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 100000 is preserved but not established.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 1 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 1 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant h1 + f1 >= h2 is partially proven to be inductive.\nloop invariant g1 >= g2 is partially proven to be inductive.\nloop invariant h1 >= h2 is partially proven to be inductive.\nloop invariant f1 >= f2 is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n <= 100000 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is partially proven to be inductive.\nloop invariant h2 == f2 + g2 is partially proven to be inductive.\nloop invariant f1 + g1 == f2 + g2 is partially proven to be inductive.\nloop invariant f1 + g1 >= f2 + g2 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: g1 >= 1;\nloop invariant i4: h1 >= 0;\nloop invariant i5: f2 >= 0;\nloop invariant i6: g2 >= 1;\nloop invariant i7: h2 >= 0;\nloop invariant i8: h1 + f1 >= h2;\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 0 <= f1 <= f2;\nloop invariant f2 <= g1 <= g2;loop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\nloop invariant g1 == h1 - f1 + f2;\nloop invariant g2 == h2 - f2 + f1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1 + h2;\nloop invariant f2 == g2 - h2 + h1;\nloop invariant h1 == h2 - f2 + f1;\nloop invariant h2 == h1 - f1 + f2;\nloop invariant f1 <= f2;\nloop invariant f2 <= g1;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 == f2 - g1 + g2;\nloop invariant f2 == g1 - h1 + h2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= f1 <= f2 is partially proven to be inductive.\nloop invariant f2 <= g1 <= g2;loop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is preserved but not established.\nloop invariant h2 == f2 + g2 is partially proven to be inductive.\nloop invariant f1 == g1 - h1 + h2 is partially proven to be inductive.\nloop invariant f2 == g2 - h2 + h1 is partially proven to be inductive.\nloop invariant h1 == h2 - f2 + f1 is partially proven to be inductive.\nloop invariant h2 == h1 - f1 + f2 is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant f2 <= g1 is partially proven to be inductive.\nloop invariant g1 <= g2 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 == f2 - g1 + g2 is partially proven to be inductive.\nloop invariant f2 == g1 - h1 + h2 is partially proven to be inductive.\nloop invariant g1 == h1 - f1 + f2 is partially proven to be inductive.\nloop invariant g2 == h2 - f2 + f1 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: 0 <= f1 <= f2;\n\n\n\n\n\n\n\nloop invariant i9: f1 <= f2;\n\nloop invariant i11: g1 <= g2;\nloop invariant i12: h1 <= h2;\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= n <= unknown();\nloop invariant 0 <= f1 <= f2 <= g1 <= g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h2 == h1 + f1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\nloop invariant i5: h1 <= h2;\nloop invariant i6: f1 <= f2;\nloop invariant i7: g1 <= g2;\nloop invariant i8: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 38,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 2147483647;\nloop invariant 0 <= f1 <= f2 <= g1 <= g2 <= h1 <= h2 <= 2147483647;\nloop invariant h2 == h1 + f1;\nloop invariant f2 == f1 + g1;\nloop invariant g2 == g1 + h1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == 2 * f2 + g2;\nloop invariant f2 == 2 * f1 + g1;\nloop invariant g2 == 2 * g1 + h1;\nloop invariant h2 == h1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1;\nloop invariant g2 == g1 + h1 + f1;\nloop invariant h2 == h1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 2147483647 is preserved but not established.\nloop invariant 0 <= f1 <= f2 <= g1 <= g2 <= h1 <= h2 <= 2147483647 is preserved but not established.\nloop invariant h2 == h1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is partially proven to be inductive.\nloop invariant h2 == 2 * f2 + g2 is partially proven to be inductive.\nloop invariant f2 == 2 * f1 + g1 is partially proven to be inductive.\nloop invariant g2 == 2 * g1 + h1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 is partially proven to be inductive.\nloop invariant g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\nloop invariant i3: h2 == h1 + f1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 12,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= original_ n;\nloop invariant f1 = original_f1 + (original_g1 + 1) * (original_g1 + 2) / 2;\nloop invariant f2 = original_f2 + (original_g2 + 1) * (original_g2 + 2) / 2;\nloop invariant g1 == original_g1 + n;\nloop invariant g2 == original_g2 + n;\nloop invariant h1 == original_h1 + (original_f1 + original_g1 + 1) * (original_f1 + original_g1 + 2) / 2;\nloop invariant h2 == original_h2 + (original_f2 + original_g2 + 1) * (original_f2 + original_g2 + 2) / 2;\nloop invariant original_f1 == original_f2;\nloop invariant original_g1 == original_g2;\nloop invariant original_h1 == original_h2;\nloop invariant original_n >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token 'n'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 79: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: 1 <= n <= 10000;\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\nloop invariant i8: h1 <= h2;\nloop invariant i9: f1 <= f2;\nloop invariant i10: g1 <= g2;\nloop invariant i11: h1 == f1 + g1;\nloop invariant i12: h2 == f2 + g2;\nloop invariant i13: h1 == h2 - (f1 + g1);\nloop invariant i14: h2 == h1 + (f1 + g1);\nloop invariant i15: f1 == g1 - h1;\nloop invariant i16: f2 == g2 - h2;\nloop invariant i17: f1 == h1 - g1;\nloop invariant i18: f2 == h2 - g2;\nloop invariant i19: f1 + g1 == h1;\nloop invariant i20: f2 + g2 == h2;\nloop invariant i21: f1 + g1 == h2 - g2;\nloop invariant i22: f2 + g2 == h1 - g1;\nloop invariant i23: f1 == h2 - g2 - g1;\nloop invariant i24: f2 == h1 - g1 - g2;\nloop invariant i25: f1 == h1 - g1 - g2;\nloop invariant i26: f2 == h2 - g2 - g1;\nloop invariant i27: f1 == h2 - g1 - g2;\nloop invariant i28: f2 == h1 - g2 - g1;\nloop invariant i29: f1 == h1 - g2 - g1;\nloop invariant i30: f2 == h2 - g1 - g2;\nloop invariant i31: 0 <= n;\nloop invariant i32: 0 <= f1 <= g1 <= h1;\nloop invariant i33: 0 <= f2 <= g2 <= h2;\nloop invariant i34: h2 == h1 + f1 ==> n > 0;\nloop invariant i35: h2 == h1 + f1 ==> n <= 0;\nloop invariant i36: 0 <= n <= 100000;\nloop invariant i37: f1 <= g1;\nloop invariant i38: g1 <= h1;\nloop invariant i39: f2 <= g2;\nloop invariant i40: g2 <= h2;\nloop invariant i41: f1 >= g1;\nloop invariant i42: f2 >= g2;\nloop invariant i43: f1 >= 0 && f1 <= 100000;\nloop invariant i44: f2 >= 0 && f2 <= 100000;\nloop invariant i45: g1 >= 0 && g1 <= 100000;\nloop invariant i46: g2 >= 0 && g2 <= 100000;\nloop invariant i47: h1 >= 0 && h1 <= 100000;\nloop invariant i48: h2 >= 0 && h2 <= 100000;\nloop invariant i49: n >= 0 && n <= 100000;\nloop invariant i50: f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant i51: f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant i52: f1 >= g1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant i53: f2 >= g2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant i54: h1 >= 0 ==> h1 >= 0 && h1 <= 100000;\nloop invariant i55: h2 >= 0 ==> h2 >= 0 && h2 <= 100000;\nloop invariant i56: n > 0 ==> n >= 0 && n <= 100000;\nloop invariant i57: (f1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant i58: (f2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant i59: (g1 == (g1 - f1)) ==> (h1 == (f1 + g1));\nloop invariant i60: (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant i61: (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant i62: (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\nloop invariant i63: 0 <= n <= unknown();\nloop invariant i64: 0 <= f1 <= unknown();\nloop invariant i65: 0 <= f2 <= unknown();\nloop invariant i66: 1 <= g1 <= unknown();\nloop invariant i67: 1 <= g2 <= unknown();\nloop invariant i68: h2 >= f2 + g2;\nloop invariant i69: h2 <= f2 + g2;\nloop invariant i70: h1 >= f1 + g1;\nloop invariant i71: h1 <= f1 + g1;\nloop invariant i72: f1 <= unknown();\nloop invariant i73: f2 <= unknown();\nloop invariant i74: g1 >= 1;\nloop invariant i75: g1 <= unknown();\nloop invariant i76: g2 >= 1;\nloop invariant i77: g2 <= unknown();\nloop invariant i78: h1 <= unknown();\nloop invariant i79: h2 <= unknown();\nloop invariant i80: h1 == h2 - f1;\nloop invariant i81: 0 <= f1 <= 1;\nloop invariant i82: 0 <= f2 <= 1;\nloop invariant i83: 0 <= g1 <= 1;\nloop invariant i84: 0 <= g2 <= 1;\nloop invariant i85: 1 <= n;\nloop invariant i86: (h1 == f1 + g1);\nloop invariant i87: (h2 == f2 + g2);\nloop invariant i88: (h2 == h1 + f1);\nloop invariant i89: (f2 == f1 + g1);\nloop invariant i90: (g2 == g1 + f1);\nloop invariant i91: f1 <= h1;\nloop invariant i92: f2 <= h2;\nloop invariant i93: h1 <= f1 + f2;\nloop invariant i94: h1 <= f1 + g2;\nloop invariant i95: h2 <= f2 + g1;\nloop invariant i96: h1 <= f1 + g1 + f2;\nloop invariant i97: h2 <= f2 + g2 + g1;\nloop invariant i98: h1 <= f1 + g1 + g2;\nloop invariant i99: h2 <= f2 + g2 + f1;\nloop invariant i100: h1 <= f1 + g1 + g2 + f2;\nloop invariant i101: h2 <= f2 + g2 + g1 + f1;\nloop invariant i102: h1 <= f1 + g1 + g2 + f2 + f1;\nloop invariant i103: h2 <= f2 + g2 + g1 + f1 + g2;\nloop invariant i104: h1 <= f1 + g1 + g2 + f2 + f1 + g2;\nloop invariant i105: h2 <= f2 + g2 + g1 + f1 + g2 + f1;\nloop invariant i106: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1;\nloop invariant i107: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1;\nloop invariant i108: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1;\nloop invariant i109: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2;\nloop invariant i110: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2;\nloop invariant i111: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i112: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i113: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i114: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i115: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i116: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i117: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i118: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i119: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i120: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i121: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant i122: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant i123: n <= 100000;\nloop invariant i124: f1 + g1 <= n;\nloop invariant i125: f2 + g2 <= n;\nloop invariant i126: f1 <= n;\nloop invariant i127: f2 <= n;\nloop invariant i128: g1 <= n;\nloop invariant i129: g2 <= n;\nloop invariant i130: h1 <= n;\nloop invariant i131: h2 <= n;\nloop invariant i132: h1 <= g1;\nloop invariant i133: h2 <= g2;\nloop invariant i134: f1 >= g1 - n;\nloop invariant i135: f2 >= g2 - n;\nloop invariant i136: g1 >= f1 - n;\nloop invariant i137: g2 >= f2 - n;\nloop invariant i138: h1 >= f1 - n;\nloop invariant i139: h2 >= f2 - n;\nloop invariant i140: h1 >= g1 - n;\nloop invariant i141: h2 >= g2 - n;\nloop invariant i142: f1 >= h1 - n;\nloop invariant i143: f2 >= h2 - n;\nloop invariant i144: g1 >= h1 - n;\nloop invariant i145: g2 >= h2 - n;\nloop invariant i146: f1 >= h1 - f2;\nloop invariant i147: f2 >= h2 - f1;\nloop invariant i148: g1 >= h1 - f1;\nloop invariant i149: g2 >= h2 - f2;\nloop invariant i150: h1 >= f1 - f2;\nloop invariant i151: h2 >= f2 - f1;\nloop invariant i152: h1 >= g1 - g2;\nloop invariant i153: h2 >= g2 - g1;\nloop invariant i154: h1 >= f1 - g2;\nloop invariant i155: h2 >= f2 - g1;\nloop invariant i156: h1 >= g1 - f2;\nloop invariant i157: h2 >= g2 - f1;\nloop invariant i158: h1 >= h2 - f1;\nloop invariant i159: h2 >= h1 - f2;\nloop invariant i160: h1 >= h2 - g1;\nloop invariant i161: h2 >= h1 - g2;\nloop invariant i162: h1 >= h2 - f2;\nloop invariant i163: h2 >= h1 - f1;\nloop invariant i164: h1 >= h2 - g2;\nloop invariant i165: h2 >= h1 - g1;\nloop invariant i166: h1 >= h2 - h1;\nloop invariant i167: h2 >= h1 - h2;\nloop invariant i168: h1 >= h2 - h2;\nloop invariant i169: h2 >= h1 - h1;\nloop invariant i170: h1 >= h2 - h1 + h2;\nloop invariant i171: h2 >= h1 - h2 + h1;\nloop invariant i172: h1 >= h2 - h2 + h1;\nloop invariant i173: h2 >= h1 - h1 + h2;\nloop invariant i174: h1 >= h2 - h2 + h1 + h2;\nloop invariant i175: h2 >= h1 - h1 + h2 + h1;\nloop invariant i176: h1 >= h2 - h2 + h1 + h2 + h1;\nloop invariant i177: h2 >= h1 - h1 + h2 + h1 + h2;\nloop invariant i178: h1 >= h2 - h2 + h1 + h2 + h1 + h2;\nloop invariant i179: h2 >= h1 - h1 + h2 + h1 + h2 + h1;\nloop invariant i180: h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant i181: h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant i182: h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant i183: h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant i184: h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant i185: h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant i186: h1 >= h2 - h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2;\nloop invariant i187: h2 >= h1 - h1 + h2 + h1 + h2 + h1 + h2 + h1 + h2 + h1;\nloop invariant i188: (f1 + g1) == (h1 - h2);\nloop invariant i189: (f2 + g2) == (h2 - h1);\nloop invariant i190: h1 + f1 >= h2;\nloop invariant i191: g1 >= g2;\nloop invariant i192: h1 >= h2;\nloop invariant i193: f1 >= f2;\nloop invariant i194: n >= 0;\nloop invariant i195: f1 + g1 == f2 + g2;\nloop invariant i196: f1 + g1 >= f2 + g2;\nloop invariant i197: 0 <= f1 <= f2;\nloop invariant i198: f2 <= g1 <= g2;loop invariant h1 <= h2;\nloop invariant i199: f1 == g1 - h1 + h2;\nloop invariant i200: f2 == g2 - h2 + h1;\nloop invariant i201: h1 == h2 - f2 + f1;\nloop invariant i202: h2 == h1 - f1 + f2;\nloop invariant i203: f2 <= g1;\nloop invariant i204: f1 == f2 - g1 + g2;\nloop invariant i205: f2 == g1 - h1 + h2;\nloop invariant i206: g1 == h1 - f1 + f2;\nloop invariant i207: g2 == h2 - f2 + f1;\nloop invariant i208: 1 <= n <= unknown();\nloop invariant i209: 0 <= f1 <= f2 <= g1 <= g2;\nloop invariant i210: h2 == h1 + f1;\nloop invariant i211: 0 <= n <= 2147483647;\nloop invariant i212: 0 <= f1 <= f2 <= g1 <= g2 <= h1 <= h2 <= 2147483647;\nloop invariant i213: f2 == f1 + g1;\nloop invariant i214: g2 == g1 + h1;\nloop invariant i215: h2 == 2 * f2 + g2;\nloop invariant i216: f2 == 2 * f1 + g1;\nloop invariant i217: g2 == 2 * g1 + h1;\nloop invariant i218: h2 == h1 + f1 + g1;\nloop invariant i219: f2 == f1 + g1 + h1;\nloop invariant i220: g2 == g1 + h1 + f1;\nloop invariant i221: h2 == h1 + f1 + g1 + f1;\nloop invariant i222: f2 == f1 + g1 + h1 + f1;\nloop invariant i223: g2 == g1 + h1 + f1 + g1;\nloop invariant i224: h2 == h1 + f1 + g1 + f1 + g1;\nloop invariant i225: f2 == f1 + g1 + h1 + f1 + g1;\nloop invariant i226: g2 == g1 + h1 + f1 + g1 + h1;\nloop invariant i227: h2 == h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i228: f2 == f1 + g1 + h1 + f1 + g1 + f1;\nloop invariant i229: g2 == g1 + h1 + f1 + g1 + h1 + g1;\nloop invariant i230: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant i231: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1;\nloop invariant i232: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1;\nloop invariant i233: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i234: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i235: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1;\nloop invariant i236: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant i237: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant i238: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant i239: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i240: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i241: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\nloop invariant i242: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant i243: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1;\nloop invariant i244: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1;\nloop invariant i245: h2 == h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i246: f2 == f1 + g1 + h1 + f1 + g1 + f1 + g1 + f1 + g1 + f1 + g1 + f1;\nloop invariant i247: g2 == g1 + h1 + f1 + g1 + h1 + g1 + h1 + g1 + h1 + g1 + h1 + g1;\nloop invariant i248: 0 <= n <= original_ n;\nloop invariant i249: f1 = original_f1 + (original_g1 + 1) * (original_g1 + 2) / 2;\nloop invariant i250: f2 = original_f2 + (original_g2 + 1) * (original_g2 + 2) / 2;\nloop invariant i251: g1 == original_g1 + n;\nloop invariant i252: g2 == original_g2 + n;\nloop invariant i253: h1 == original_h1 + (original_f1 + original_g1 + 1) * (original_f1 + original_g1 + 2) / 2;\nloop invariant i254: h2 == original_h2 + (original_f2 + original_g2 + 1) * (original_f2 + original_g2 + 2) / 2;\nloop invariant i255: original_f1 == original_f2;\nloop invariant i256: original_g1 == original_g2;\nloop invariant i257: original_h1 == original_h2;\nloop invariant i258: original_n >= 0;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 133,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\nloop invariant i8: h1 <= h2;\nloop invariant i9: f1 <= f2;\nloop invariant i10: g1 <= g2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i37: f1 <= g1;\n\nloop invariant i39: f2 <= g2;\n\n\n\n\n\n\n\n\n\n\nloop invariant i50: f1 + g1 == h1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant i51: f2 + g2 == h2 ==> f2 >= 0 && f2 <= 100000;\nloop invariant i52: f1 >= g1 ==> f1 >= 0 && f1 <= 100000;\nloop invariant i53: f2 >= g2 ==> f2 >= 0 && f2 <= 100000;\n\n\n\n\n\n\nloop invariant i60: (g2 == (g2 - f2)) ==> (h2 == (f2 + g2));\nloop invariant i61: (h1 == (f1 + g1)) ==> (h1 == (f1 + g1));\nloop invariant i62: (h2 == (f2 + g2)) ==> (h2 == (f2 + g2));\n\n\n\n\n\n\nloop invariant i69: h2 <= f2 + g2;\n\nloop invariant i71: h1 <= f1 + g1;\n\n\nloop invariant i74: g1 >= 1;\n\nloop invariant i76: g2 >= 1;\n\n\n\nloop invariant i80: h1 == h2 - f1;\n\n\n\n\n\n\n\nloop invariant i88: (h2 == h1 + f1);\n\nloop invariant i90: (g2 == g1 + f1);\nloop invariant i91: f1 <= h1;\n\nloop invariant i93: h1 <= f1 + f2;\nloop invariant i94: h1 <= f1 + g2;\nloop invariant i95: h2 <= f2 + g1;\nloop invariant i96: h1 <= f1 + g1 + f2;\nloop invariant i97: h2 <= f2 + g2 + g1;\nloop invariant i98: h1 <= f1 + g1 + g2;\nloop invariant i99: h2 <= f2 + g2 + f1;\nloop invariant i100: h1 <= f1 + g1 + g2 + f2;\nloop invariant i101: h2 <= f2 + g2 + g1 + f1;\nloop invariant i102: h1 <= f1 + g1 + g2 + f2 + f1;\nloop invariant i103: h2 <= f2 + g2 + g1 + f1 + g2;\nloop invariant i104: h1 <= f1 + g1 + g2 + f2 + f1 + g2;\nloop invariant i105: h2 <= f2 + g2 + g1 + f1 + g2 + f1;\nloop invariant i106: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1;\nloop invariant i107: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1;\nloop invariant i108: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1;\nloop invariant i109: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2;\nloop invariant i110: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2;\nloop invariant i111: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i112: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1;\nloop invariant i113: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i114: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2;\nloop invariant i115: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i116: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2;\nloop invariant i117: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i118: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1;\nloop invariant i119: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i120: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2;\nloop invariant i121: h2 <= f2 + g2 + g1 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\nloop invariant i122: h1 <= f1 + g1 + g2 + f2 + f1 + g2 + f1 + g1 + g2 + g1 + g2 + g2 + g1 + g2 + g1;\n\n\n\n\n\n\n\n\n\nloop invariant i132: h1 <= g1;\nloop invariant i133: h2 <= g2;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i146: f1 >= h1 - f2;\nloop invariant i147: f2 >= h2 - f1;\nloop invariant i148: g1 >= h1 - f1;\nloop invariant i149: g2 >= h2 - f2;\nloop invariant i150: h1 >= f1 - f2;\n\nloop invariant i152: h1 >= g1 - g2;\nloop invariant i153: h2 >= g2 - g1;\nloop invariant i154: h1 >= f1 - g2;\nloop invariant i155: h2 >= f2 - g1;\nloop invariant i156: h1 >= g1 - f2;\n\nloop invariant i158: h1 >= h2 - f1;\nloop invariant i159: h2 >= h1 - f2;\nloop invariant i160: h1 >= h2 - g1;\nloop invariant i161: h2 >= h1 - g2;\nloop invariant i162: h1 >= h2 - f2;\nloop invariant i163: h2 >= h1 - f1;\nloop invariant i164: h1 >= h2 - g2;\nloop invariant i165: h2 >= h1 - g1;\nloop invariant i166: h1 >= h2 - h1;\nloop invariant i167: h2 >= h1 - h2;\nloop invariant i168: h1 >= h2 - h2;\nloop invariant i169: h2 >= h1 - h1;\n\nloop invariant i171: h2 >= h1 - h2 + h1;\nloop invariant i172: h1 >= h2 - h2 + h1;\nloop invariant i173: h2 >= h1 - h1 + h2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i190: h1 + f1 >= h2;\n\n\n\n\n\n\nloop invariant i197: 0 <= f1 <= f2;\nloop invariant i198: f2 <= g1 <= g2;loop invariant h1 <= h2;\n\nloop invariant i200: f2 == g2 - h2 + h1;\n\n\nloop invariant i203: f2 <= g1;\n\n\n\n\n\nloop invariant i209: 0 <= f1 <= f2 <= g1 <= g2;\nloop invariant i210: h2 == h1 + f1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c"
        ],
        "skipped": [],
        "total": 13,
        "success_count": 4,
        "failure_count": 9,
        "success_rate": 0.3076923076923077
    }
}