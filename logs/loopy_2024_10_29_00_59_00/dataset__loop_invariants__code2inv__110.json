{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/110.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn <= n;\nloop invariant sn == 0 ==> i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == (i - 1);\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - i + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = (i - 1);\nloop invariant sn <= n;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn = (i - 1);\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant (i <= n ==> sn == i - 1);\nloop invariant (i > n ==> sn == n);\nloop invariant (sn == n ==> i == n + 1);\nloop invariant (sn != n ==> i <= n);\nloop invariant (i > n ==> sn != n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn != 0 ==> i <= n);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant i <= n + 1 ==> (sn == n);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn < n;\nloop invariant i == sn + 1;\nloop invariant n >= 1;\nloop invariant sn >= 0;\nloop invariant n >= sn;\nloop invariant n >= 1;\nloop invariant n >= i;\nloop invariant n >= i - 1;\nloop invariant n >= i - 2;\nloop invariant n >= i - 3;\nloop invariant n >= i - 4;\nloop invariant n >= i - 5;\nloop invariant n >= i - 6;\nloop invariant n >= i - 7;\nloop invariant n >= i - 8;\nloop invariant n >= i - 9;\nloop invariant n >= i - 10;\nloop invariant n >= i - 11;\nloop invariant n >= i - 12;\nloop invariant n >= i - 13;\nloop invariant n >= i - 14;\nloop invariant n >= i - 15;\nloop invariant n >= i - 16;\nloop invariant n >= i - 17;\nloop invariant n >= i - 18;\nloop invariant n >= i - 19;\nloop invariant n >= i - 20;\nloop invariant n >= i - 21;\nloop invariant n >= i - 22;\nloop invariant n >= i - 23;\nloop invariant n >= i - 24;\nloop invariant n >= i - 25;\nloop invariant n >= i - 26;\nloop invariant n >= i - 27;\nloop invariant n >= i - 28;\nloop invariant n >= i - 29;\nloop invariant n >= i - 30;\nloop invariant n >= i - 31;\nloop invariant n >= i - 32;\nloop invariant n >= i - 33;\nloop invariant n >= i - 34;\nloop invariant n >= i - 35;\nloop invariant n >= i - 36;\nloop invariant n >= i - 37;\nloop invariant n >= i - 38;\nloop invariant n >= i - 39;\nloop invariant n >= i - 40;\nloop invariant n >= i - 41;\nloop invariant n >= i - 42;\nloop invariant n >= i - 43;\nloop invariant n >= i - 44;\nloop invariant n >= i - 45;\nloop invariant n >= i - 46;\nloop invariant n >= i - 47;\nloop invariant n >= i - 48;\nloop invariant n >= i - 49;\nloop invariant n >= i - 50;\nloop invariant n >= i - 51;\nloop invariant n >= i - 52;\nloop invariant n >= i - 53;\nloop invariant n >= i - 54;\nloop invariant n >= i - 55;\nloop invariant n >= i - 56;\nloop invariant n >= i - 57;\nloop invariant n >= i - 58;\nloop invariant n >= i - 59;\nloop invariant n >= i - 60;\nloop invariant n >= i - 61;\nloop invariant n >= i - 62;\nloop invariant n >= i - 63;\nloop invariant n >= i - 64;\nloop invariant n >= i - 65;\nloop invariant n >= i - 66;\nloop invariant n >= i - 67;\nloop invariant n >= i - 68;\nloop invariant n >= i - 69;\nloop invariant n >= i - 70;\nloop invariant n >= i - 71;\nloop invariant n >= i - 72;\nloop invariant n >= i - 73;\nloop invariant n >= i - 74;\nloop invariant n >= i - 75;\nloop invariant n >= i - 76;\nloop invariant n >= i - 77;\nloop invariant n >= i - 78;\nloop invariant n >= i - 79;\nloop invariant n >= i - 80;\nloop invariant n >= i - 81;\nloop invariant n >= i - 82;\nloop invariant n >= i - 83;\nloop invariant n >= i - 84;\nloop invariant n >= i - 85;\nloop invariant n >= i - 86;\nloop invariant n >= i - 87;\nloop invariant n >= i - 88;\nloop invariant n >= i - 89;\nloop invariant n >= i - 90;\nloop invariant n >= i - 91;\nloop invariant n >= i - 92;\nloop invariant n >= i - 93;\nloop invariant n >= i - 94;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn >= 1;\nloop invariant sn == i - 1;\nloop invariant sn == (n - i + 1);\nloop invariant sn == ((i - 1) * (i - 2) / 2);\nloop invariant sn == (i * (i - 1) / 2);\nloop invariant sn == (i * (i - 1) / 2 - 1);\nloop invariant sn == (i * (i - 1) / 2 - 2);\nloop invariant sn == (i * (i - 1) / 2 - 3);\nloop invariant sn == (i * (i - 1) / 2 - 4);\nloop invariant sn == (i * (i - 1) / 2 - 5);\nloop invariant sn == (i * (i - 1) / 2 - 6);\nloop invariant sn == (i * (i - 1) / 2 - 7);\nloop invariant sn == (i * (i - 1) / 2 - 8);\nloop invariant sn == (i * (i - 1) / 2 - 9);\nloop invariant sn == (i * (i - 1) / 2 - 10);\nloop invariant sn == (i * (i - 1) / 2 - 11);\nloop invariant sn == (i * (i - 1) / 2 - 12);\nloop invariant sn == (i * (i - 1) / 2 - 13);\nloop invariant sn == (i * (i - 1) / 2 - 14);\nloop invariant sn == (i * (i - 1) / 2 - 15);\nloop invariant sn == (i * (i - 1) / 2 - 16);\nloop invariant sn == (i * (i - 1) / 2 - 17);\nloop invariant sn == (i * (i - 1) / 2 - 18);\nloop invariant sn == (i * (i - 1) / 2 - 19);\nloop invariant sn == (i * (i - 1) / 2 - 20);\nloop invariant sn == (i * (i - 1) / 2 - 21);\nloop invariant sn == (i * (i - 1) / 2 - 22);\nloop invariant sn == (i * (i - 1) / 2 - 23);\nloop invariant sn == (i * (i - 1) / 2 - 24);\nloop invariant sn == (i * (i - 1) / 2 - 25);\nloop invariant sn == (i * (i - 1) / 2 - 26);\nloop invariant sn == (i * (i - 1) / 2 - 27);\nloop invariant sn == (i * (i - 1) / 2 - 28);\nloop invariant sn == (i * (i - 1) / 2 - 29);\nloop invariant sn == (i * (i - 1) / 2 - 30);\nloop invariant sn == (i * (i - 1) / 2 - 31);\nloop invariant sn == (i * (i - 1) / 2 - 32);\nloop invariant sn == (i * (i - 1) / 2 - 33);\nloop invariant sn == (i * (i - 1) / 2 - 34);\nloop invariant sn == (i * (i - 1) / 2 - 35);\nloop invariant sn == (i * (i - 1) / 2 - 36);\nloop invariant sn == (i * (i - 1) / 2 - 37);\nloop invariant sn == (i * (i - 1) / 2 - 38);\nloop invariant sn == (i * (i - 1) / 2 - 39);\nloop invariant sn == (i * (i - 1) / 2 - 40);\nloop invariant sn == (i * (i - 1) / 2 - 41);\nloop invariant sn == (i * (i - 1) / 2 - 42);\nloop invariant sn == (i * (i - 1) / 2 - 43);\nloop invariant sn == (i * (i - 1) / 2 - 44);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i = sn + 1;\nloop invariant sn = i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant i - 1 = sn;\nloop invariant sn + 1 = i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 1 + n;\nloop invariant i - 1 <= sn <= sn + 1;\nloop invariant sn >= 1;\n*/\n```",
            "```\n/*@\nloop invariant n >= i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == (i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i == 1 ==> sn == 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i <= n is neither established nor preserved.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i - 1;\n\nloop invariant i5: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn <= i;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i >= 1;\n\nloop invariant i6: sn <= i;\nloop invariant i7: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn == (i - 1);\nloop invariant sn <= n;\nloop invariant sn == 0 ==> i <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == 0 ==> i <= n is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1);\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\nloop invariant i6: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == (i - 1);\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - i + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\nloop invariant (i - 1) <= n;\nloop invariant n <= sn + (n - (i - 1) + 1);\nloop invariant sn <= n;\nloop invariant 1 <= i - 1 <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant 1 <= i <= n + 1 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant (i - 1) <= n is partially proven to be inductive.\nloop invariant n <= sn + (n - i + 1) is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant 1 <= i - 1 <= n is preserved but not established.\nloop invariant n <= sn + (n - (i - 1) + 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: sn == (i - 1);\n\nloop invariant i6: n <= sn + (n - i + 1);\n\n\nloop invariant i9: n <= sn + (n - (i - 1) + 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn = (i - 1);\nloop invariant sn <= n;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn = (i - 1);\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\nloop invariant i <= n + 1;\nloop invariant -n <= sn;\nloop invariant n >= 0;\nloop invariant sn >= 0;\nloop invariant -n <= sn;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant (i <= n ==> sn == i - 1);\nloop invariant (i > n ==> sn == n);\nloop invariant (sn == n ==> i == n + 1);\nloop invariant (sn != n ==> i <= n);\nloop invariant (i > n ==> sn != n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (sn != 0 ==> i <= n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant (i <= n ==> sn == i - 1) is partially proven to be inductive.\nloop invariant (i > n ==> sn == n) is partially proven to be inductive.\nloop invariant (sn == n ==> i == n + 1) is partially proven to be inductive.\nloop invariant (sn != n ==> i <= n) is partially proven to be inductive.\nloop invariant (i > n ==> sn != n) is partially proven to be inductive.\nloop invariant (sn == 0 ==> i == 1) is partially proven to be inductive.\nloop invariant (sn != 0 ==> i <= n) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: (i <= n ==> sn == i - 1);\n\nloop invariant i6: (sn == n ==> i == n + 1);\n\n\nloop invariant i9: (sn == 0 ==> i == 1);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant i <= n + 1 ==> (sn == n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i <= n + 1 ==> (sn == n) is preserved but not established.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 100,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn < n;\nloop invariant i == sn + 1;\nloop invariant n >= 1;\nloop invariant sn >= 0;\nloop invariant n >= sn;\nloop invariant n >= 1;\nloop invariant n >= i;\nloop invariant n >= i - 1;\nloop invariant n >= i - 2;\nloop invariant n >= i - 3;\nloop invariant n >= i - 4;\nloop invariant n >= i - 5;\nloop invariant n >= i - 6;\nloop invariant n >= i - 7;\nloop invariant n >= i - 8;\nloop invariant n >= i - 9;\nloop invariant n >= i - 10;\nloop invariant n >= i - 11;\nloop invariant n >= i - 12;\nloop invariant n >= i - 13;\nloop invariant n >= i - 14;\nloop invariant n >= i - 15;\nloop invariant n >= i - 16;\nloop invariant n >= i - 17;\nloop invariant n >= i - 18;\nloop invariant n >= i - 19;\nloop invariant n >= i - 20;\nloop invariant n >= i - 21;\nloop invariant n >= i - 22;\nloop invariant n >= i - 23;\nloop invariant n >= i - 24;\nloop invariant n >= i - 25;\nloop invariant n >= i - 26;\nloop invariant n >= i - 27;\nloop invariant n >= i - 28;\nloop invariant n >= i - 29;\nloop invariant n >= i - 30;\nloop invariant n >= i - 31;\nloop invariant n >= i - 32;\nloop invariant n >= i - 33;\nloop invariant n >= i - 34;\nloop invariant n >= i - 35;\nloop invariant n >= i - 36;\nloop invariant n >= i - 37;\nloop invariant n >= i - 38;\nloop invariant n >= i - 39;\nloop invariant n >= i - 40;\nloop invariant n >= i - 41;\nloop invariant n >= i - 42;\nloop invariant n >= i - 43;\nloop invariant n >= i - 44;\nloop invariant n >= i - 45;\nloop invariant n >= i - 46;\nloop invariant n >= i - 47;\nloop invariant n >= i - 48;\nloop invariant n >= i - 49;\nloop invariant n >= i - 50;\nloop invariant n >= i - 51;\nloop invariant n >= i - 52;\nloop invariant n >= i - 53;\nloop invariant n >= i - 54;\nloop invariant n >= i - 55;\nloop invariant n >= i - 56;\nloop invariant n >= i - 57;\nloop invariant n >= i - 58;\nloop invariant n >= i - 59;\nloop invariant n >= i - 60;\nloop invariant n >= i - 61;\nloop invariant n >= i - 62;\nloop invariant n >= i - 63;\nloop invariant n >= i - 64;\nloop invariant n >= i - 65;\nloop invariant n >= i - 66;\nloop invariant n >= i - 67;\nloop invariant n >= i - 68;\nloop invariant n >= i - 69;\nloop invariant n >= i - 70;\nloop invariant n >= i - 71;\nloop invariant n >= i - 72;\nloop invariant n >= i - 73;\nloop invariant n >= i - 74;\nloop invariant n >= i - 75;\nloop invariant n >= i - 76;\nloop invariant n >= i - 77;\nloop invariant n >= i - 78;\nloop invariant n >= i - 79;\nloop invariant n >= i - 80;\nloop invariant n >= i - 81;\nloop invariant n >= i - 82;\nloop invariant n >= i - 83;\nloop invariant n >= i - 84;\nloop invariant n >= i - 85;\nloop invariant n >= i - 86;\nloop invariant n >= i - 87;\nloop invariant n >= i - 88;\nloop invariant n >= i - 89;\nloop invariant n >= i - 90;\nloop invariant n >= i - 91;\nloop invariant n >= i - 92;\nloop invariant n >= i - 93;\nloop invariant n >= i - 94;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn < n is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant n >= sn is partially proven to be inductive.\nloop invariant n >= i is partially proven to be inductive.\nloop invariant n >= i - 1 is partially proven to be inductive.\nloop invariant n >= i - 2 is partially proven to be inductive.\nloop invariant n >= i - 3 is partially proven to be inductive.\nloop invariant n >= i - 4 is partially proven to be inductive.\nloop invariant n >= i - 5 is partially proven to be inductive.\nloop invariant n >= i - 6 is partially proven to be inductive.\nloop invariant n >= i - 7 is partially proven to be inductive.\nloop invariant n >= i - 8 is partially proven to be inductive.\nloop invariant n >= i - 9 is partially proven to be inductive.\nloop invariant n >= i - 10 is partially proven to be inductive.\nloop invariant n >= i - 11 is partially proven to be inductive.\nloop invariant n >= i - 12 is partially proven to be inductive.\nloop invariant n >= i - 13 is partially proven to be inductive.\nloop invariant n >= i - 14 is partially proven to be inductive.\nloop invariant n >= i - 15 is partially proven to be inductive.\nloop invariant n >= i - 16 is partially proven to be inductive.\nloop invariant n >= i - 17 is partially proven to be inductive.\nloop invariant n >= i - 18 is partially proven to be inductive.\nloop invariant n >= i - 19 is partially proven to be inductive.\nloop invariant n >= i - 20 is partially proven to be inductive.\nloop invariant n >= i - 21 is partially proven to be inductive.\nloop invariant n >= i - 22 is partially proven to be inductive.\nloop invariant n >= i - 23 is partially proven to be inductive.\nloop invariant n >= i - 24 is partially proven to be inductive.\nloop invariant n >= i - 25 is partially proven to be inductive.\nloop invariant n >= i - 26 is partially proven to be inductive.\nloop invariant n >= i - 27 is partially proven to be inductive.\nloop invariant n >= i - 28 is partially proven to be inductive.\nloop invariant n >= i - 29 is partially proven to be inductive.\nloop invariant n >= i - 30 is partially proven to be inductive.\nloop invariant n >= i - 31 is partially proven to be inductive.\nloop invariant n >= i - 32 is partially proven to be inductive.\nloop invariant n >= i - 33 is partially proven to be inductive.\nloop invariant n >= i - 34 is partially proven to be inductive.\nloop invariant n >= i - 35 is partially proven to be inductive.\nloop invariant n >= i - 36 is partially proven to be inductive.\nloop invariant n >= i - 37 is partially proven to be inductive.\nloop invariant n >= i - 38 is partially proven to be inductive.\nloop invariant n >= i - 39 is partially proven to be inductive.\nloop invariant n >= i - 40 is partially proven to be inductive.\nloop invariant n >= i - 41 is partially proven to be inductive.\nloop invariant n >= i - 42 is partially proven to be inductive.\nloop invariant n >= i - 43 is partially proven to be inductive.\nloop invariant n >= i - 44 is partially proven to be inductive.\nloop invariant n >= i - 45 is partially proven to be inductive.\nloop invariant n >= i - 46 is partially proven to be inductive.\nloop invariant n >= i - 47 is partially proven to be inductive.\nloop invariant n >= i - 48 is partially proven to be inductive.\nloop invariant n >= i - 49 is partially proven to be inductive.\nloop invariant n >= i - 50 is partially proven to be inductive.\nloop invariant n >= i - 51 is partially proven to be inductive.\nloop invariant n >= i - 52 is partially proven to be inductive.\nloop invariant n >= i - 53 is partially proven to be inductive.\nloop invariant n >= i - 54 is partially proven to be inductive.\nloop invariant n >= i - 55 is partially proven to be inductive.\nloop invariant n >= i - 56 is partially proven to be inductive.\nloop invariant n >= i - 57 is partially proven to be inductive.\nloop invariant n >= i - 58 is partially proven to be inductive.\nloop invariant n >= i - 59 is partially proven to be inductive.\nloop invariant n >= i - 60 is partially proven to be inductive.\nloop invariant n >= i - 61 is partially proven to be inductive.\nloop invariant n >= i - 62 is partially proven to be inductive.\nloop invariant n >= i - 63 is partially proven to be inductive.\nloop invariant n >= i - 64 is partially proven to be inductive.\nloop invariant n >= i - 65 is partially proven to be inductive.\nloop invariant n >= i - 66 is partially proven to be inductive.\nloop invariant n >= i - 67 is partially proven to be inductive.\nloop invariant n >= i - 68 is partially proven to be inductive.\nloop invariant n >= i - 69 is partially proven to be inductive.\nloop invariant n >= i - 70 is partially proven to be inductive.\nloop invariant n >= i - 71 is partially proven to be inductive.\nloop invariant n >= i - 72 is partially proven to be inductive.\nloop invariant n >= i - 73 is partially proven to be inductive.\nloop invariant n >= i - 74 is partially proven to be inductive.\nloop invariant n >= i - 75 is partially proven to be inductive.\nloop invariant n >= i - 76 is partially proven to be inductive.\nloop invariant n >= i - 77 is partially proven to be inductive.\nloop invariant n >= i - 78 is partially proven to be inductive.\nloop invariant n >= i - 79 is partially proven to be inductive.\nloop invariant n >= i - 80 is partially proven to be inductive.\nloop invariant n >= i - 81 is partially proven to be inductive.\nloop invariant n >= i - 82 is partially proven to be inductive.\nloop invariant n >= i - 83 is partially proven to be inductive.\nloop invariant n >= i - 84 is partially proven to be inductive.\nloop invariant n >= i - 85 is partially proven to be inductive.\nloop invariant n >= i - 86 is partially proven to be inductive.\nloop invariant n >= i - 87 is partially proven to be inductive.\nloop invariant n >= i - 88 is partially proven to be inductive.\nloop invariant n >= i - 89 is partially proven to be inductive.\nloop invariant n >= i - 90 is partially proven to be inductive.\nloop invariant n >= i - 91 is partially proven to be inductive.\nloop invariant n >= i - 92 is partially proven to be inductive.\nloop invariant n >= i - 93 is partially proven to be inductive.\nloop invariant n >= i - 94 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\n\nloop invariant i5: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 49,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn >= 1;\nloop invariant sn == i - 1;\nloop invariant sn == (n - i + 1);\nloop invariant sn == ((i - 1) * (i - 2) / 2);\nloop invariant sn == (i * (i - 1) / 2);\nloop invariant sn == (i * (i - 1) / 2 - 1);\nloop invariant sn == (i * (i - 1) / 2 - 2);\nloop invariant sn == (i * (i - 1) / 2 - 3);\nloop invariant sn == (i * (i - 1) / 2 - 4);\nloop invariant sn == (i * (i - 1) / 2 - 5);\nloop invariant sn == (i * (i - 1) / 2 - 6);\nloop invariant sn == (i * (i - 1) / 2 - 7);\nloop invariant sn == (i * (i - 1) / 2 - 8);\nloop invariant sn == (i * (i - 1) / 2 - 9);\nloop invariant sn == (i * (i - 1) / 2 - 10);\nloop invariant sn == (i * (i - 1) / 2 - 11);\nloop invariant sn == (i * (i - 1) / 2 - 12);\nloop invariant sn == (i * (i - 1) / 2 - 13);\nloop invariant sn == (i * (i - 1) / 2 - 14);\nloop invariant sn == (i * (i - 1) / 2 - 15);\nloop invariant sn == (i * (i - 1) / 2 - 16);\nloop invariant sn == (i * (i - 1) / 2 - 17);\nloop invariant sn == (i * (i - 1) / 2 - 18);\nloop invariant sn == (i * (i - 1) / 2 - 19);\nloop invariant sn == (i * (i - 1) / 2 - 20);\nloop invariant sn == (i * (i - 1) / 2 - 21);\nloop invariant sn == (i * (i - 1) / 2 - 22);\nloop invariant sn == (i * (i - 1) / 2 - 23);\nloop invariant sn == (i * (i - 1) / 2 - 24);\nloop invariant sn == (i * (i - 1) / 2 - 25);\nloop invariant sn == (i * (i - 1) / 2 - 26);\nloop invariant sn == (i * (i - 1) / 2 - 27);\nloop invariant sn == (i * (i - 1) / 2 - 28);\nloop invariant sn == (i * (i - 1) / 2 - 29);\nloop invariant sn == (i * (i - 1) / 2 - 30);\nloop invariant sn == (i * (i - 1) / 2 - 31);\nloop invariant sn == (i * (i - 1) / 2 - 32);\nloop invariant sn == (i * (i - 1) / 2 - 33);\nloop invariant sn == (i * (i - 1) / 2 - 34);\nloop invariant sn == (i * (i - 1) / 2 - 35);\nloop invariant sn == (i * (i - 1) / 2 - 36);\nloop invariant sn == (i * (i - 1) / 2 - 37);\nloop invariant sn == (i * (i - 1) / 2 - 38);\nloop invariant sn == (i * (i - 1) / 2 - 39);\nloop invariant sn == (i * (i - 1) / 2 - 40);\nloop invariant sn == (i * (i - 1) / 2 - 41);\nloop invariant sn == (i * (i - 1) / 2 - 42);\nloop invariant sn == (i * (i - 1) / 2 - 43);\nloop invariant sn == (i * (i - 1) / 2 - 44);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn >= 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == (n - i + 1) is partially proven to be inductive.\nloop invariant sn == ((i - 1) * (i - 2) / 2) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 1) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 2) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 3) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 4) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 5) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 6) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 7) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 8) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 9) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 10) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 11) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 12) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 13) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 14) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 15) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 16) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 17) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 18) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 19) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 20) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 21) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 22) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 23) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 24) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 25) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 26) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 27) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 28) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 29) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 30) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 31) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 32) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 33) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 34) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 35) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 36) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 37) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 38) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 39) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 40) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 41) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 42) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 43) is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2 - 44) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: sn == i - 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i = sn + 1;\nloop invariant sn = i - 1;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant i - 1 = sn;\nloop invariant sn + 1 = i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 1 + n;\nloop invariant i - 1 <= sn <= sn + 1;\nloop invariant sn >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 1 + n is preserved but not established.\nloop invariant i - 1 <= sn <= sn + 1 is partially proven to be inductive.\nloop invariant sn >= 1 is preserved but not established.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i - 1 <= sn <= sn + 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant n >= i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == (i - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n >= i >= 1 is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == (i - 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\nloop invariant 1 <= i <= n;\nloop invariant sn == (i - 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == (i - 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 0 <= sn <= n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i == 1 ==> sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant 0 <= sn <= n is established but not preserved.\nloop invariant i == n + 1 ==> sn == n is established but not preserved.\nloop invariant i == 1 ==> sn == 0 is established but not preserved.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 36: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i - 1;\nloop invariant i4: i <= n;\nloop invariant i5: sn == i - 1;\nloop invariant i6: 0 <= i <= n;\nloop invariant i7: sn <= n;\nloop invariant i8: i <= n + 1;\nloop invariant i9: sn <= i;\nloop invariant i10: sn == (i - 1);\nloop invariant i11: sn == 0 ==> i <= n;\nloop invariant i12: 1 <= n;\nloop invariant i13: 0 <= sn <= n;\nloop invariant i14: 1 <= i <= n + 1;\nloop invariant i15: (i - 1) <= n;\nloop invariant i16: n <= sn + (n - i + 1);\nloop invariant i17: 1 <= i - 1 <= n;\nloop invariant i18: n <= sn + (n - (i - 1) + 1);\nloop invariant i19: 1 <= i <= n;\nloop invariant i20: sn = (i - 1);\nloop invariant i21: n >= 0;\nloop invariant i22: -n <= sn;\nloop invariant i23: (i <= n ==> sn == i - 1);\nloop invariant i24: (i > n ==> sn == n);\nloop invariant i25: (sn == n ==> i == n + 1);\nloop invariant i26: (sn != n ==> i <= n);\nloop invariant i27: (i > n ==> sn != n);\nloop invariant i28: (sn == 0 ==> i == 1);\nloop invariant i29: (sn != 0 ==> i <= n);\nloop invariant i30: 0 <= i <= n + 1;\nloop invariant i31: i <= n + 1 ==> (sn == n);\nloop invariant i32: 0 <= sn < n;\nloop invariant i33: i == sn + 1;\nloop invariant i34: n >= 1;\nloop invariant i35: n >= sn;\nloop invariant i36: n >= i;\nloop invariant i37: n >= i - 1;\nloop invariant i38: n >= i - 2;\nloop invariant i39: n >= i - 3;\nloop invariant i40: n >= i - 4;\nloop invariant i41: n >= i - 5;\nloop invariant i42: n >= i - 6;\nloop invariant i43: n >= i - 7;\nloop invariant i44: n >= i - 8;\nloop invariant i45: n >= i - 9;\nloop invariant i46: n >= i - 10;\nloop invariant i47: n >= i - 11;\nloop invariant i48: n >= i - 12;\nloop invariant i49: n >= i - 13;\nloop invariant i50: n >= i - 14;\nloop invariant i51: n >= i - 15;\nloop invariant i52: n >= i - 16;\nloop invariant i53: n >= i - 17;\nloop invariant i54: n >= i - 18;\nloop invariant i55: n >= i - 19;\nloop invariant i56: n >= i - 20;\nloop invariant i57: n >= i - 21;\nloop invariant i58: n >= i - 22;\nloop invariant i59: n >= i - 23;\nloop invariant i60: n >= i - 24;\nloop invariant i61: n >= i - 25;\nloop invariant i62: n >= i - 26;\nloop invariant i63: n >= i - 27;\nloop invariant i64: n >= i - 28;\nloop invariant i65: n >= i - 29;\nloop invariant i66: n >= i - 30;\nloop invariant i67: n >= i - 31;\nloop invariant i68: n >= i - 32;\nloop invariant i69: n >= i - 33;\nloop invariant i70: n >= i - 34;\nloop invariant i71: n >= i - 35;\nloop invariant i72: n >= i - 36;\nloop invariant i73: n >= i - 37;\nloop invariant i74: n >= i - 38;\nloop invariant i75: n >= i - 39;\nloop invariant i76: n >= i - 40;\nloop invariant i77: n >= i - 41;\nloop invariant i78: n >= i - 42;\nloop invariant i79: n >= i - 43;\nloop invariant i80: n >= i - 44;\nloop invariant i81: n >= i - 45;\nloop invariant i82: n >= i - 46;\nloop invariant i83: n >= i - 47;\nloop invariant i84: n >= i - 48;\nloop invariant i85: n >= i - 49;\nloop invariant i86: n >= i - 50;\nloop invariant i87: n >= i - 51;\nloop invariant i88: n >= i - 52;\nloop invariant i89: n >= i - 53;\nloop invariant i90: n >= i - 54;\nloop invariant i91: n >= i - 55;\nloop invariant i92: n >= i - 56;\nloop invariant i93: n >= i - 57;\nloop invariant i94: n >= i - 58;\nloop invariant i95: n >= i - 59;\nloop invariant i96: n >= i - 60;\nloop invariant i97: n >= i - 61;\nloop invariant i98: n >= i - 62;\nloop invariant i99: n >= i - 63;\nloop invariant i100: n >= i - 64;\nloop invariant i101: n >= i - 65;\nloop invariant i102: n >= i - 66;\nloop invariant i103: n >= i - 67;\nloop invariant i104: n >= i - 68;\nloop invariant i105: n >= i - 69;\nloop invariant i106: n >= i - 70;\nloop invariant i107: n >= i - 71;\nloop invariant i108: n >= i - 72;\nloop invariant i109: n >= i - 73;\nloop invariant i110: n >= i - 74;\nloop invariant i111: n >= i - 75;\nloop invariant i112: n >= i - 76;\nloop invariant i113: n >= i - 77;\nloop invariant i114: n >= i - 78;\nloop invariant i115: n >= i - 79;\nloop invariant i116: n >= i - 80;\nloop invariant i117: n >= i - 81;\nloop invariant i118: n >= i - 82;\nloop invariant i119: n >= i - 83;\nloop invariant i120: n >= i - 84;\nloop invariant i121: n >= i - 85;\nloop invariant i122: n >= i - 86;\nloop invariant i123: n >= i - 87;\nloop invariant i124: n >= i - 88;\nloop invariant i125: n >= i - 89;\nloop invariant i126: n >= i - 90;\nloop invariant i127: n >= i - 91;\nloop invariant i128: n >= i - 92;\nloop invariant i129: n >= i - 93;\nloop invariant i130: n >= i - 94;\nloop invariant i131: sn >= 1;\nloop invariant i132: sn == (n - i + 1);\nloop invariant i133: sn == ((i - 1) * (i - 2) / 2);\nloop invariant i134: sn == (i * (i - 1) / 2);\nloop invariant i135: sn == (i * (i - 1) / 2 - 1);\nloop invariant i136: sn == (i * (i - 1) / 2 - 2);\nloop invariant i137: sn == (i * (i - 1) / 2 - 3);\nloop invariant i138: sn == (i * (i - 1) / 2 - 4);\nloop invariant i139: sn == (i * (i - 1) / 2 - 5);\nloop invariant i140: sn == (i * (i - 1) / 2 - 6);\nloop invariant i141: sn == (i * (i - 1) / 2 - 7);\nloop invariant i142: sn == (i * (i - 1) / 2 - 8);\nloop invariant i143: sn == (i * (i - 1) / 2 - 9);\nloop invariant i144: sn == (i * (i - 1) / 2 - 10);\nloop invariant i145: sn == (i * (i - 1) / 2 - 11);\nloop invariant i146: sn == (i * (i - 1) / 2 - 12);\nloop invariant i147: sn == (i * (i - 1) / 2 - 13);\nloop invariant i148: sn == (i * (i - 1) / 2 - 14);\nloop invariant i149: sn == (i * (i - 1) / 2 - 15);\nloop invariant i150: sn == (i * (i - 1) / 2 - 16);\nloop invariant i151: sn == (i * (i - 1) / 2 - 17);\nloop invariant i152: sn == (i * (i - 1) / 2 - 18);\nloop invariant i153: sn == (i * (i - 1) / 2 - 19);\nloop invariant i154: sn == (i * (i - 1) / 2 - 20);\nloop invariant i155: sn == (i * (i - 1) / 2 - 21);\nloop invariant i156: sn == (i * (i - 1) / 2 - 22);\nloop invariant i157: sn == (i * (i - 1) / 2 - 23);\nloop invariant i158: sn == (i * (i - 1) / 2 - 24);\nloop invariant i159: sn == (i * (i - 1) / 2 - 25);\nloop invariant i160: sn == (i * (i - 1) / 2 - 26);\nloop invariant i161: sn == (i * (i - 1) / 2 - 27);\nloop invariant i162: sn == (i * (i - 1) / 2 - 28);\nloop invariant i163: sn == (i * (i - 1) / 2 - 29);\nloop invariant i164: sn == (i * (i - 1) / 2 - 30);\nloop invariant i165: sn == (i * (i - 1) / 2 - 31);\nloop invariant i166: sn == (i * (i - 1) / 2 - 32);\nloop invariant i167: sn == (i * (i - 1) / 2 - 33);\nloop invariant i168: sn == (i * (i - 1) / 2 - 34);\nloop invariant i169: sn == (i * (i - 1) / 2 - 35);\nloop invariant i170: sn == (i * (i - 1) / 2 - 36);\nloop invariant i171: sn == (i * (i - 1) / 2 - 37);\nloop invariant i172: sn == (i * (i - 1) / 2 - 38);\nloop invariant i173: sn == (i * (i - 1) / 2 - 39);\nloop invariant i174: sn == (i * (i - 1) / 2 - 40);\nloop invariant i175: sn == (i * (i - 1) / 2 - 41);\nloop invariant i176: sn == (i * (i - 1) / 2 - 42);\nloop invariant i177: sn == (i * (i - 1) / 2 - 43);\nloop invariant i178: sn == (i * (i - 1) / 2 - 44);\nloop invariant i179: i = sn + 1;\nloop invariant i180: sn = i - 1;\nloop invariant i181: i - 1 = sn;\nloop invariant i182: sn + 1 = i;\nloop invariant i183: 1 <= i <= 1 + n;\nloop invariant i184: i - 1 <= sn <= sn + 1;\nloop invariant i185: n >= i >= 1;\nloop invariant i186: i == n + 1 ==> sn == n;\nloop invariant i187: i == 1 ==> sn == 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 114,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= i - 1;\n\nloop invariant i5: sn == i - 1;\n\n\n\nloop invariant i9: sn <= i;\nloop invariant i10: sn == (i - 1);\n\n\n\n\n\nloop invariant i16: n <= sn + (n - i + 1);\n\nloop invariant i18: n <= sn + (n - (i - 1) + 1);\n\n\n\n\nloop invariant i23: (i <= n ==> sn == i - 1);\n\nloop invariant i25: (sn == n ==> i == n + 1);\n\n\nloop invariant i28: (sn == 0 ==> i == 1);\n\n\n\n\nloop invariant i33: i == sn + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i184: i - 1 <= sn <= sn + 1;\n\nloop invariant i186: i == n + 1 ==> sn == n;\nloop invariant i187: i == 1 ==> sn == 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/104.c",
            "../dataset/loop_invariants/code2inv/110.c"
        ],
        "skipped": [],
        "total": 19,
        "success_count": 4,
        "failure_count": 15,
        "success_rate": 0.21052631578947367
    }
}