{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= v3 <= unknown_int();\nloop invariant 1 <= v1 <= 5;\nloop invariant 1 <= v2 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> 2* x2 - x1 - x3>=0;\nloop invariant 2*x2 - x1 - x3 <= 0 ==> 2*x2 -x1-x3 <=0;\nloop invariant v2 +5 >=0 ==> v2 +5 >=0;\nloop invariant v2 <= 5 ==> v2 <= 5;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant v3  >= 0 ==> v3  >= 0;\nloop invariant v1 <= 5 ==> v1 <= 5;\nloop invariant 2*v2 + 2*t  >= v1 + v3 ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant 5*t  + 75 >= x2 ==> 5*t  + 75 >= x2;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75 ==> x2 + 5*t >= 75;\nloop invariant t >= 0 ==> t >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= t <= 100000;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x2 <= 75;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant x2 >= 0;\nloop invariant x2 <= 75;\nloop invariant x3 >= -50;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v1 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x2 <= 75;\nloop invariant 0 <= x3 <= (-50);\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\nloop invariant (2*v2 - v1 - v3 == 0);\nloop invariant (v2 + 5 >= 0);\nloop invariant (v2 <= 5);\nloop invariant (x2 + 5*t >= 75);\nloop invariant (v1 - v3 >= 0);\nloop invariant (v1 <= 5);\nloop invariant (v1 - 2*v2 + v3 + 2*t >= 0);\nloop invariant (v2 <= 6);\nloop invariant (v3 >= 0);\nloop invariant (v2 + 6 >= 0);\nloop invariant (2*v2 + 2*t >= v1 + v3);\nloop invariant (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0);\nloop invariant (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0);\nloop invariant (x1 + v1 >= x1) ==> (x1 + v1 >= x1);\nloop invariant (x3 + v3 >= x3) ==> (x3 + v3 >= x3);\nloop invariant (x2 + v2 >= x2) ==> (x2 + v2 >= x2);\nloop invariant (v2 - 1 >= v2) ==> (v2 - 1 >= v2);\nloop invariant (v2 + 1 >= v2) ==> (v2 + 1 >= v2);\nloop invariant (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant (t + 1 <= t) ==> (t + 1 <= t);\nloop invariant (v2 - 1 <= v2) ==> (v2 - 1 <= v2);\nloop invariant (v2 + 1 <= v2) ==> (v2 + 1 <= v2);\nloop invariant (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant (t + 1 <= t) ==> (t + 1 <= t);\n*/\n```",
            "```\n/*@\nloop invariant x1 + v1 * t >= x2 + v2 * t;\nloop invariant x2 + v2 * t >= x3 + v3 * t;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant unknown_int() ==> (v2 + 5 >= 0);\nloop invariant unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= t <= 100;\nloop invariant (x1 - x3) = (v1 + t * v1 + t * v2);\nloop invariant x2 = (75 + v2 + t * v2);\nloop invariant v2 = (5 - t);\nloop invariant v1 = (5 + t);\nloop invariant v3 = (0 + t * v3);\nloop invariant t = (0 + t);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v1 >= 0;\nloop invariant v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2-1) && (t = t+1);\nloop invariant 2*x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2+1) && (t = t+1);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x3 + v3 >= 0;\nloop invariant x2 + v2 >= 0;\nloop invariant x1 + v1 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= v2 <= 6;\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 >= -50;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant 5 * t + 75 >= x2;\nloop invariant x2 + 5 * t >= 75;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v1 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant 0 <= v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x1 >= 100 + v1 * t;\nloop invariant x3 <= -50 + v3 * t;\nloop invariant x2 >= 75 + v2 * t;\nloop invariant -50 <= x1 + x3;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x2 >= -25;\nloop invariant x1 + x2 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= v1 <= 5;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant 5*t  + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3  >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= v3 <= unknown_int();\nloop invariant 1 <= v1 <= 5;\nloop invariant 1 <= v2 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> 2* x2 - x1 - x3>=0;\nloop invariant 2*x2 - x1 - x3 <= 0 ==> 2*x2 -x1-x3 <=0;\nloop invariant v2 +5 >=0 ==> v2 +5 >=0;\nloop invariant v2 <= 5 ==> v2 <= 5;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant v3  >= 0 ==> v3  >= 0;\nloop invariant v1 <= 5 ==> v1 <= 5;\nloop invariant 2*v2 + 2*t  >= v1 + v3 ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant 5*t  + 75 >= x2 ==> 5*t  + 75 >= x2;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75 ==> x2 + 5*t >= 75;\nloop invariant t >= 0 ==> t >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\nloop invariant i4: v1 - v3 >= 0;\n\nloop invariant i6: 2*x2 - x1 - x3 >= 0 ==> 2* x2 - x1 - x3>=0;\nloop invariant i7: 2*x2 - x1 - x3 <= 0 ==> 2*x2 -x1-x3 <=0;\nloop invariant i8: v2 +5 >=0 ==> v2 +5 >=0;\nloop invariant i9: v2 <= 5 ==> v2 <= 5;\nloop invariant i10: v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant i11: v3  >= 0 ==> v3  >= 0;\nloop invariant i12: v1 <= 5 ==> v1 <= 5;\nloop invariant i13: 2*v2 + 2*t  >= v1 + v3 ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant i14: 5*t  + 75 >= x2 ==> 5*t  + 75 >= x2;\nloop invariant i15: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i16: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i17: x2 + 5*t >= 75 ==> x2 + 5*t >= 75;\nloop invariant i18: t >= 0 ==> t >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= t <= 100000;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 == 100;\nloop invariant x2 == 75;\nloop invariant x3 == -50;\nloop invariant t == 0;\nloop invariant x1 + x2 + x3 == 225;\nloop invariant v1 + v2 + v3 == 0;\nloop invariant v1 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= t <= 100000 is preserved but not established.\nloop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant x1 == 100 is partially proven to be inductive.\nloop invariant x2 == 75 is partially proven to be inductive.\nloop invariant x3 == -50 is partially proven to be inductive.\nloop invariant t == 0 is partially proven to be inductive.\nloop invariant x1 + x2 + x3 == 225 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 == 0 is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= v1 <= 5;\nloop invariant i3: v1 - v3 >= 0;\n\n\nloop invariant i6: 2*v2 + 2*t >= v1 + v3;\nloop invariant i7: v2 + 6 >= 0;\nloop invariant i8: 5*t + 75 >= x2;\nloop invariant i9: v3 >= 0;\nloop invariant i10: v1 <= 5;\nloop invariant i11: v2 <= 6;\nloop invariant i12: x2 + 5*t >= 75;\nloop invariant i13: v1 - 2*v2 + v3 + 2*t >= 0;\n\n\n\n\n\n\nloop invariant i20: v1 >= 0;\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x2 <= 75;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant x1 >= x2;\nloop invariant x3 <= x2;\nloop invariant x1 + v1 >= x2;\nloop invariant x3 + v3 <= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 5*t + 75 >= x2;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x2 <= 75 is established but not preserved.\nloop invariant 0 <= v2 <= 5 is established but not preserved.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant x1 >= x2 is established but not preserved.\nloop invariant x3 <= x2 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 is partially proven to be inductive.\nloop invariant x3 + v3 <= x2 is established but not preserved.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant t >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\nloop invariant i8: x2 + 5*t >= 75;\nloop invariant i9: v2 + 6 >= 0;\nloop invariant i10: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i11: v1 - v3 >= 0;\nloop invariant i12: v1 <= 5;\nloop invariant i13: 5*t + 75 >= x2;\nloop invariant i14: 2*v2 + 2*t >= v1 + v3;\nloop invariant i15: v2 <= 6;\nloop invariant i16: v3 >= 0;\nloop invariant i17: t >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x3 <= 50;\nloop invariant 0 <= v2 <= 6;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v3 <= 5;\nloop invariant 0 <= t <= 6;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= x2 <= 5;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= t <= 5 is preserved but not established.\nloop invariant 0 <= x2 <= 5 is partially proven to be inductive.\nloop invariant 0 <= x1 <= 100 is partially proven to be inductive.\nloop invariant 0 <= x3 <= 50 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 6 is partially proven to be inductive.\nloop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 5 is partially proven to be inductive.\nloop invariant 0 <= t <= 6 is partially proven to be inductive.\nloop invariant 0 <= t <= 5 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\nloop invariant i6: 0 <= v1 <= 5;\nloop invariant i7: 0 <= v3 <= 5;\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant x2 >= 0;\nloop invariant x2 <= 75;\nloop invariant x3 >= -50;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v1 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 2*x2 - x1 - x3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 <= 100 is established but not preserved.\nloop invariant x2 >= 0 is partially proven to be inductive.\nloop invariant x2 <= 75 is established but not preserved.\nloop invariant x3 >= -50 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant v2 >= 0 is established but not preserved.\nloop invariant v2 <= 5 is established but not preserved.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 - v1 - v3 == 0 is established but not preserved.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\nloop invariant i4: x3 >= -50;\n\nloop invariant i6: v1 >= 0;\nloop invariant i7: v1 <= 5;\n\n\nloop invariant i10: v3 >= 0;\n\n\nloop invariant i13: v2 <= 6;\nloop invariant i14: v2 + 6 >= 0;\nloop invariant i15: x2 + 5*t >= 75;\nloop invariant i16: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i17: v1 - v3 >= 0;\nloop invariant i18: 2*v2 + 2*t >= v1 + v3;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x2 <= 75;\nloop invariant 0 <= x3 <= (-50);\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\nloop invariant (2*v2 - v1 - v3 == 0);\nloop invariant (v2 + 5 >= 0);\nloop invariant (v2 <= 5);\nloop invariant (x2 + 5*t >= 75);\nloop invariant (v1 - v3 >= 0);\nloop invariant (v1 <= 5);\nloop invariant (v1 - 2*v2 + v3 + 2*t >= 0);\nloop invariant (v2 <= 6);\nloop invariant (v3 >= 0);\nloop invariant (v2 + 6 >= 0);\nloop invariant (2*v2 + 2*t >= v1 + v3);\nloop invariant (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0);\nloop invariant (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0);\nloop invariant (x1 + v1 >= x1) ==> (x1 + v1 >= x1);\nloop invariant (x3 + v3 >= x3) ==> (x3 + v3 >= x3);\nloop invariant (x2 + v2 >= x2) ==> (x2 + v2 >= x2);\nloop invariant (v2 - 1 >= v2) ==> (v2 - 1 >= v2);\nloop invariant (v2 + 1 >= v2) ==> (v2 + 1 >= v2);\nloop invariant (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant (t + 1 <= t) ==> (t + 1 <= t);\nloop invariant (v2 - 1 <= v2) ==> (v2 - 1 <= v2);\nloop invariant (v2 + 1 <= v2) ==> (v2 + 1 <= v2);\nloop invariant (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant (t + 1 <= t) ==> (t + 1 <= t);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x1 <= 100 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 75 is partially proven to be inductive.\nloop invariant 0 <= x3 <= (-50) is preserved but not established.\nloop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 5 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant t >= 0 is partially proven to be inductive.\nloop invariant (2*v2 - v1 - v3 == 0) is partially proven to be inductive.\nloop invariant (v2 + 5 >= 0) is partially proven to be inductive.\nloop invariant (v2 <= 5) is partially proven to be inductive.\nloop invariant (x2 + 5*t >= 75) is partially proven to be inductive.\nloop invariant (v1 - v3 >= 0) is partially proven to be inductive.\nloop invariant (v1 <= 5) is partially proven to be inductive.\nloop invariant (v1 - 2*v2 + v3 + 2*t >= 0) is partially proven to be inductive.\nloop invariant (v2 <= 6) is partially proven to be inductive.\nloop invariant (v3 >= 0) is partially proven to be inductive.\nloop invariant (v2 + 6 >= 0) is partially proven to be inductive.\nloop invariant (2*v2 + 2*t >= v1 + v3) is partially proven to be inductive.\nloop invariant (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0) is partially proven to be inductive.\nloop invariant (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0) is partially proven to be inductive.\nloop invariant (x1 + v1 >= x1) ==> (x1 + v1 >= x1) is partially proven to be inductive.\nloop invariant (x3 + v3 >= x3) ==> (x3 + v3 >= x3) is partially proven to be inductive.\nloop invariant (x2 + v2 >= x2) ==> (x2 + v2 >= x2) is partially proven to be inductive.\nloop invariant (v2 - 1 >= v2) ==> (v2 - 1 >= v2) is partially proven to be inductive.\nloop invariant (v2 + 1 >= v2) ==> (v2 + 1 >= v2) is partially proven to be inductive.\nloop invariant (t + 1 >= t) ==> (t + 1 >= t) is partially proven to be inductive.\nloop invariant (t + 1 <= t) ==> (t + 1 <= t) is partially proven to be inductive.\nloop invariant (v2 - 1 <= v2) ==> (v2 - 1 <= v2) is partially proven to be inductive.\nloop invariant (v2 + 1 <= v2) ==> (v2 + 1 <= v2) is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\nloop invariant i4: 0 <= v1 <= 5;\n\nloop invariant i6: v3 >= 0;\n\n\nloop invariant i9: t >= 0;\n\n\n\nloop invariant i13: (x2 + 5*t >= 75);\nloop invariant i14: (v1 - v3 >= 0);\nloop invariant i15: (v1 <= 5);\nloop invariant i16: (v1 - 2*v2 + v3 + 2*t >= 0);\nloop invariant i17: (v2 <= 6);\nloop invariant i18: (v3 >= 0);\nloop invariant i19: (v2 + 6 >= 0);\nloop invariant i20: (2*v2 + 2*t >= v1 + v3);\nloop invariant i21: (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0);\nloop invariant i22: (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0);\nloop invariant i23: (x1 + v1 >= x1) ==> (x1 + v1 >= x1);\nloop invariant i24: (x3 + v3 >= x3) ==> (x3 + v3 >= x3);\nloop invariant i25: (x2 + v2 >= x2) ==> (x2 + v2 >= x2);\nloop invariant i26: (v2 - 1 >= v2) ==> (v2 - 1 >= v2);\nloop invariant i27: (v2 + 1 >= v2) ==> (v2 + 1 >= v2);\nloop invariant i28: (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant i29: (t + 1 <= t) ==> (t + 1 <= t);\nloop invariant i30: (v2 - 1 <= v2) ==> (v2 - 1 <= v2);\nloop invariant i31: (v2 + 1 <= v2) ==> (v2 + 1 <= v2);\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant x1 + v1 * t >= x2 + v2 * t;\nloop invariant x2 + v2 * t >= x3 + v3 * t;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant unknown_int() ==> (v2 + 5 >= 0);\nloop invariant unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\nloop invariant !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 5);\nloop invariant !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant !unknown_int() ==> (v2 <= 6);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 58: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: v1 <= 5;\n\nloop invariant i5: v3 >= 0;\n\nloop invariant i7: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i8: 5 * t + 75 >= x2;\nloop invariant i9: v2 <= 6;\nloop invariant i10: v2 + 6 >= 0;\nloop invariant i11: x2 + 5 * t >= 75;\nloop invariant i12: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i13: v1 - v3 >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= t <= 100;\nloop invariant (x1 - x3) = (v1 + t * v1 + t * v2);\nloop invariant x2 = (75 + v2 + t * v2);\nloop invariant v2 = (5 - t);\nloop invariant v1 = (5 + t);\nloop invariant v3 = (0 + t * v3);\nloop invariant t = (0 + t);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 46: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v1 >= 0;\nloop invariant v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2-1) && (t = t+1);\nloop invariant 2*x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2+1) && (t = t+1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 54: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: v1 >= 0;\nloop invariant i3: v3 >= 0;\nloop invariant i4: 2*v2 + 2*t >= v1 + v3;\nloop invariant i5: v2 <= 6;\nloop invariant i6: x2 + 5*t >= 75;\nloop invariant i7: v2 + 6 >= 0;\nloop invariant i8: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i9: v1 - v3 >= 0;\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x3 + v3 >= 0;\nloop invariant x2 + v2 >= 0;\nloop invariant x1 + v1 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant v1 <= 5;\nloop invariant v2 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3  >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v2 <= 5;\nloop invariant v1 <= 5;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 5 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant x3 + v3 >= 0 is preserved but not established.\nloop invariant x2 + v2 >= 0 is partially proven to be inductive.\nloop invariant x1 + v1 >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t  >= v1 + v3 is partially proven to be inductive.\nloop invariant v3  >= 0 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= v1 <= 5;\n\nloop invariant i3: v2 + 6 >= 0;\nloop invariant i4: v3 >= 0;\nloop invariant i5: x2 + 5*t >= 75;\n\n\nloop invariant i8: x1 + v1 >= 0;\nloop invariant i9: v1 - v3 >= 0;\nloop invariant i10: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i11: 2*v2 + 2*t  >= v1 + v3;\nloop invariant i12: v3  >= 0;\nloop invariant i13: v2 <= 6;\n\nloop invariant i15: v1 <= 5;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant 0 <= v2 <= 6;\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 >= -50;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant 5 * t + 75 >= x2;\nloop invariant x2 + 5 * t >= 75;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant 0 <= t <= 5 is established but not preserved.\nloop invariant 0 <= v2 <= 6 is established but not preserved.\nloop invariant x1 >= 100 is partially proven to be inductive.\nloop invariant x2 >= 75 is partially proven to be inductive.\nloop invariant x3 >= -50 is established but not preserved.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2 * v2 - v1 - v3 == 0 is established but not preserved.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant 5 * t + 75 >= x2 is partially proven to be inductive.\nloop invariant x2 + 5 * t >= 75 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Unproven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= v1 <= 5;\n\n\nloop invariant i4: x1 >= 100;\n\n\nloop invariant i7: v1 - v3 >= 0;\n\n\n\n\nloop invariant i12: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i13: v2 + 6 >= 0;\n\nloop invariant i15: 5 * t + 75 >= x2;\nloop invariant i16: x2 + 5 * t >= 75;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant t >= 0;\nloop invariant v1 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is established but not preserved.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant t >= 0 is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Unproven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: v3 >= 0;\nloop invariant i3: t >= 0;\nloop invariant i4: v1 >= 0;\nloop invariant i5: 2*v2 + 2*t >= v1 + v3;\nloop invariant i6: 5*t + 75 >= x2;\nloop invariant i7: v2 <= 6;\nloop invariant i8: v2 + 6 >= 0;\nloop invariant i9: x2 + 5*t >= 75;\nloop invariant i10: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i11: v1 - v3 >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 1 <= v1 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant 0 <= v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant v2 <= 6;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x1 >= 100 + v1 * t;\nloop invariant x3 <= -50 + v3 * t;\nloop invariant x2 >= 75 + v2 * t;\nloop invariant -50 <= x1 + x3;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x2 >= -25;\nloop invariant x1 + x2 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\nloop invariant x1 + x3 >= -75;\nloop invariant x1 + x3 <= 25;\nloop invariant x2 + x3 >= -25;\nloop invariant x2 + x3 <= 60;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= v1 <= 5 is preserved but not established.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant 0 <= v3 is partially proven to be inductive.\nloop invariant 2 * v2 + 2 * t >= v1 + v3 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant 5 * t + 75 >= x2 is partially proven to be inductive.\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5 * t >= 75 is partially proven to be inductive.\nloop invariant x1 >= 100 + v1 * t is partially proven to be inductive.\nloop invariant x3 <= -50 + v3 * t is partially proven to be inductive.\nloop invariant x2 >= 75 + v2 * t is partially proven to be inductive.\nloop invariant -50 <= x1 + x3 is partially proven to be inductive.\nloop invariant x2 + x3 >= -25 is partially proven to be inductive.\nloop invariant x2 + x3 <= 60 is partially proven to be inductive.\nloop invariant x1 + x2 >= -25 is partially proven to be inductive.\nloop invariant x1 + x2 <= 60 is preserved but not established.\nloop invariant x1 + x3 >= -75 is partially proven to be inductive.\nloop invariant x1 + x3 <= 25 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: v2 + 6 >= 0;\nloop invariant i3: 0 <= v3;\nloop invariant i4: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i5: v2 <= 6;\nloop invariant i6: 5 * t + 75 >= x2;\nloop invariant i7: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i8: v1 - v3 >= 0;\nloop invariant i9: x2 + 5 * t >= 75;\nloop invariant i10: x1 >= 100 + v1 * t;\nloop invariant i11: x3 <= -50 + v3 * t;\n\nloop invariant i13: -50 <= x1 + x3;\n\n\n\n\nloop invariant i18: x1 + x3 >= -75;\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= v1 <= 5;\nloop invariant 2*v2 + 2*t  >= v1 + v3;\nloop invariant 5*t  + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3  >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= v1 <= 5 is preserved but not established.\nloop invariant 2*v2 + 2*t  >= v1 + v3 is partially proven to be inductive.\nloop invariant 5*t  + 75 >= x2 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v3  >= 0 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 2*v2 + 2*t  >= v1 + v3;\nloop invariant i3: 5*t  + 75 >= x2;\nloop invariant i4: v2 <= 6;\nloop invariant i5: v3  >= 0;\nloop invariant i6: v2 + 6 >= 0;\nloop invariant i7: x2 + 5*t >= 75;\nloop invariant i8: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i9: v1 - v3 >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                "houdini_error": "No annotations found"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 45: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 1 <= v3 <= unknown_int();\nloop invariant i2: 1 <= v1 <= 5;\nloop invariant i3: 1 <= v2 <= 5;\nloop invariant i4: v1 - v3 >= 0;\nloop invariant i5: 2*v2 - v1 - v3 == 0;\nloop invariant i6: 2*x2 - x1 - x3 >= 0 ==> 2* x2 - x1 - x3>=0;\nloop invariant i7: 2*x2 - x1 - x3 <= 0 ==> 2*x2 -x1-x3 <=0;\nloop invariant i8: v2 +5 >=0 ==> v2 +5 >=0;\nloop invariant i9: v2 <= 5 ==> v2 <= 5;\nloop invariant i10: v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant i11: v3  >= 0 ==> v3  >= 0;\nloop invariant i12: v1 <= 5 ==> v1 <= 5;\nloop invariant i13: 2*v2 + 2*t  >= v1 + v3 ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant i14: 5*t  + 75 >= x2 ==> 5*t  + 75 >= x2;\nloop invariant i15: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i16: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i17: x2 + 5*t >= 75 ==> x2 + 5*t >= 75;\nloop invariant i18: t >= 0 ==> t >= 0;\nloop invariant i19: 1 <= t <= 100000;\nloop invariant i20: 0 <= v1 <= 5;\nloop invariant i21: v2 + 5 >= 0;\nloop invariant i22: v2 <= 5;\nloop invariant i23: 2*v2 + 2*t >= v1 + v3;\nloop invariant i24: v2 + 6 >= 0;\nloop invariant i25: 5*t + 75 >= x2;\nloop invariant i26: v3 >= 0;\nloop invariant i27: v1 <= 5;\nloop invariant i28: v2 <= 6;\nloop invariant i29: x2 + 5*t >= 75;\nloop invariant i30: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i31: x1 == 100;\nloop invariant i32: x2 == 75;\nloop invariant i33: x3 == -50;\nloop invariant i34: t == 0;\nloop invariant i35: x1 + x2 + x3 == 225;\nloop invariant i36: v1 + v2 + v3 == 0;\nloop invariant i37: v1 >= 0;\nloop invariant i38: v2 >= 0;\nloop invariant i39: 0 <= x2 <= 75;\nloop invariant i40: 0 <= v2 <= 5;\nloop invariant i41: x1 >= x2;\nloop invariant i42: x3 <= x2;\nloop invariant i43: x1 + v1 >= x2;\nloop invariant i44: x3 + v3 <= x2;\nloop invariant i45: t >= 0;\nloop invariant i46: 1 <= t <= 5;\nloop invariant i47: 0 <= x2 <= 5;\nloop invariant i48: 0 <= x1 <= 100;\nloop invariant i49: 0 <= x3 <= 50;\nloop invariant i50: 0 <= v2 <= 6;\nloop invariant i51: 0 <= v3 <= 5;\nloop invariant i52: 0 <= t <= 6;\nloop invariant i53: 0 <= t <= 5;\nloop invariant i54: x2 >= 0;\nloop invariant i55: x2 <= 75;\nloop invariant i56: x3 >= -50;\nloop invariant i57: 2*x2 - x1 - x3 >= 0;\nloop invariant i58: 0 <= x3 <= (-50);\nloop invariant i59: (2*v2 - v1 - v3 == 0);\nloop invariant i60: (v2 + 5 >= 0);\nloop invariant i61: (v2 <= 5);\nloop invariant i62: (x2 + 5*t >= 75);\nloop invariant i63: (v1 - v3 >= 0);\nloop invariant i64: (v1 <= 5);\nloop invariant i65: (v1 - 2*v2 + v3 + 2*t >= 0);\nloop invariant i66: (v2 <= 6);\nloop invariant i67: (v3 >= 0);\nloop invariant i68: (v2 + 6 >= 0);\nloop invariant i69: (2*v2 + 2*t >= v1 + v3);\nloop invariant i70: (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0);\nloop invariant i71: (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0);\nloop invariant i72: (x1 + v1 >= x1) ==> (x1 + v1 >= x1);\nloop invariant i73: (x3 + v3 >= x3) ==> (x3 + v3 >= x3);\nloop invariant i74: (x2 + v2 >= x2) ==> (x2 + v2 >= x2);\nloop invariant i75: (v2 - 1 >= v2) ==> (v2 - 1 >= v2);\nloop invariant i76: (v2 + 1 >= v2) ==> (v2 + 1 >= v2);\nloop invariant i77: (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant i78: (t + 1 <= t) ==> (t + 1 <= t);\nloop invariant i79: (v2 - 1 <= v2) ==> (v2 - 1 <= v2);\nloop invariant i80: (v2 + 1 <= v2) ==> (v2 + 1 <= v2);\nloop invariant i81: x1 + v1 * t >= x2 + v2 * t;\nloop invariant i82: x2 + v2 * t >= x3 + v3 * t;\nloop invariant i83: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i84: 5 * t + 75 >= x2;\nloop invariant i85: x2 + 5 * t >= 75;\nloop invariant i86: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i87: unknown_int() ==> (v2 + 5 >= 0);\nloop invariant i88: unknown_int() ==> (v2 <= 5);\nloop invariant i89: !unknown_int() ==> (2 * x2 - x1 - x3 >= 0);\nloop invariant i90: !unknown_int() ==> (v2 + 1 >= 0);\nloop invariant i91: !unknown_int() ==> (v2 <= 6);\nloop invariant i92: !unknown_int() ==> (v2 + 5 >= 0);\nloop invariant i93: !unknown_int() ==> (v2 <= 5);\nloop invariant i94: !unknown_int() ==> (2 * x2 - x1 - x3 <= 0);\nloop invariant i95: 0 <= t <= 100;\nloop invariant i96: (x1 - x3) = (v1 + t * v1 + t * v2);\nloop invariant i97: x2 = (75 + v2 + t * v2);\nloop invariant i98: v2 = (5 - t);\nloop invariant i99: v1 = (5 + t);\nloop invariant i100: v3 = (0 + t * v3);\nloop invariant i101: t = (0 + t);\nloop invariant i102: 2*x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2-1) && (t = t+1);\nloop invariant i103: 2*x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0 && v2 <= 5 && (x1 = x1+v1) && (x3 = x3+v3) && (x2 = x2+v2) && (v2 = v2+1) && (t = t+1);\nloop invariant i104: x3 + v3 >= 0;\nloop invariant i105: x2 + v2 >= 0;\nloop invariant i106: x1 + v1 >= 0;\nloop invariant i107: 2*v2 + 2*t  >= v1 + v3;\nloop invariant i108: v3  >= 0;\nloop invariant i109: x1 >= 100;\nloop invariant i110: x2 >= 75;\nloop invariant i111: 2 * v2 - v1 - v3 == 0;\nloop invariant i112: 2 * x2 - x1 - x3 >= 0;\nloop invariant i113: 0 <= v3;\nloop invariant i114: x1 >= 100 + v1 * t;\nloop invariant i115: x3 <= -50 + v3 * t;\nloop invariant i116: x2 >= 75 + v2 * t;\nloop invariant i117: -50 <= x1 + x3;\nloop invariant i118: x2 + x3 >= -25;\nloop invariant i119: x2 + x3 <= 60;\nloop invariant i120: x1 + x2 >= -25;\nloop invariant i121: x1 + x2 <= 60;\nloop invariant i122: x1 + x3 >= -75;\nloop invariant i123: x1 + x3 <= 25;\nloop invariant i124: 5*t  + 75 >= x2;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 39,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\nloop invariant i4: v1 - v3 >= 0;\n\nloop invariant i6: 2*x2 - x1 - x3 >= 0 ==> 2* x2 - x1 - x3>=0;\nloop invariant i7: 2*x2 - x1 - x3 <= 0 ==> 2*x2 -x1-x3 <=0;\nloop invariant i8: v2 +5 >=0 ==> v2 +5 >=0;\nloop invariant i9: v2 <= 5 ==> v2 <= 5;\nloop invariant i10: v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant i11: v3  >= 0 ==> v3  >= 0;\nloop invariant i12: v1 <= 5 ==> v1 <= 5;\nloop invariant i13: 2*v2 + 2*t  >= v1 + v3 ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant i14: 5*t  + 75 >= x2 ==> 5*t  + 75 >= x2;\nloop invariant i15: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i16: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i17: x2 + 5*t >= 75 ==> x2 + 5*t >= 75;\nloop invariant i18: t >= 0 ==> t >= 0;\n\nloop invariant i20: 0 <= v1 <= 5;\n\n\nloop invariant i23: 2*v2 + 2*t >= v1 + v3;\nloop invariant i24: v2 + 6 >= 0;\nloop invariant i25: 5*t + 75 >= x2;\nloop invariant i26: v3 >= 0;\nloop invariant i27: v1 <= 5;\nloop invariant i28: v2 <= 6;\nloop invariant i29: x2 + 5*t >= 75;\nloop invariant i30: v1 - 2*v2 + v3 + 2*t >= 0;\n\n\n\n\n\n\nloop invariant i37: v1 >= 0;\n\n\n\n\n\n\n\nloop invariant i45: t >= 0;\n\n\n\n\n\nloop invariant i51: 0 <= v3 <= 5;\n\n\n\n\nloop invariant i56: x3 >= -50;\n\n\n\n\n\nloop invariant i62: (x2 + 5*t >= 75);\nloop invariant i63: (v1 - v3 >= 0);\nloop invariant i64: (v1 <= 5);\nloop invariant i65: (v1 - 2*v2 + v3 + 2*t >= 0);\nloop invariant i66: (v2 <= 6);\nloop invariant i67: (v3 >= 0);\nloop invariant i68: (v2 + 6 >= 0);\nloop invariant i69: (2*v2 + 2*t >= v1 + v3);\nloop invariant i70: (2*x2 - x1 - x3 >= 0) ==> (2*x2 - x1 - x3 >= 0);\nloop invariant i71: (2*x2 - x1 - x3 <= 0) ==> (2*x2 - x1 - x3 <= 0);\nloop invariant i72: (x1 + v1 >= x1) ==> (x1 + v1 >= x1);\nloop invariant i73: (x3 + v3 >= x3) ==> (x3 + v3 >= x3);\nloop invariant i74: (x2 + v2 >= x2) ==> (x2 + v2 >= x2);\nloop invariant i75: (v2 - 1 >= v2) ==> (v2 - 1 >= v2);\nloop invariant i76: (v2 + 1 >= v2) ==> (v2 + 1 >= v2);\nloop invariant i77: (t + 1 >= t) ==> (t + 1 >= t);\nloop invariant i78: (t + 1 <= t) ==> (t + 1 <= t);\nloop invariant i79: (v2 - 1 <= v2) ==> (v2 - 1 <= v2);\nloop invariant i80: (v2 + 1 <= v2) ==> (v2 + 1 <= v2);\n\n\nloop invariant i83: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i84: 5 * t + 75 >= x2;\nloop invariant i85: x2 + 5 * t >= 75;\nloop invariant i86: v1 - 2 * v2 + v3 + 2 * t >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i106: x1 + v1 >= 0;\nloop invariant i107: 2*v2 + 2*t  >= v1 + v3;\nloop invariant i108: v3  >= 0;\nloop invariant i109: x1 >= 100;\n\n\n\nloop invariant i113: 0 <= v3;\nloop invariant i114: x1 >= 100 + v1 * t;\nloop invariant i115: x3 <= -50 + v3 * t;\n\nloop invariant i117: -50 <= x1 + x3;\n\n\n\n\nloop invariant i122: x1 + x3 >= -75;\n\nloop invariant i124: 5*t  + 75 >= x2;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c"
        ],
        "skipped": [],
        "total": 11,
        "success_count": 3,
        "failure_count": 8,
        "success_rate": 0.2727272727272727
    }
}