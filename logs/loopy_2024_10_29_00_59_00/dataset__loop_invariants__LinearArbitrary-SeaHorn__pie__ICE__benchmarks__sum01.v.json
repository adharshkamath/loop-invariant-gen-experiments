{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i * a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant (i == 1 ==> (sn == 0 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i <= n ==> (sn <= n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i > n ==> (sn == n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i <= n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 > 1 || v2 > 1 || v3 > 1));\nloop invariant (i > n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 <= 1 || v2 <= 1 || v3 <= 1));\nloop invariant (i <= n ==> (sn == (sn + a*i)));\nloop invariant (i > n ==> (sn == (n*a)));\nloop invariant (i <= n ==> (sn == (sn + a*i) || sn == 0));\nloop invariant (i > n ==> (sn == (n*a) || sn == 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 1 <= sn <= n * a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant (sn == n * a) ==> (i == n + 1);\nloop invariant (sn == 0) ==> (i == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn <= i * a;\nloop invariant sn >= i * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant v1 == v2;\nloop invariant v2 == v3; loop invariant i == n;\nloop invariant sn == n*a;\nloop invariant v1 == 0;\nloop invariant v2 == 0;\nloop invariant v3 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i - 1 <= n;\nloop invariant 0 <= sn <= (n * a);\nloop invariant 0 <= sn <= a * i;\nloop invariant 0 <= sn <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant v1 >= 0 && v1 <= 1;\nloop invariant v2 >= 0 && v2 <= 1;\nloop invariant v3 >= 0 && v3 <= 1;\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (i == n+1 ==> sn == n*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant i >= 1 && i <= n + 1;\nloop invariant v1 <= INT_MAX && v1 >= INT_MIN;\nloop invariant v2 <= INT_MAX && v2 >= INT_MIN;\nloop invariant v3 <= INT_MAX && v3 >= INT_MIN;\nloop invariant i <= n + 1 ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i == 1 ==> sn == 0 && i == 1 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i == n + 1 ==> sn == n * a && i == n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i*a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 3*RAND_MAX;\nloop invariant v1 <= v2 <= v3;\nloop invariant (i == 1 ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\n\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n*a is partially proven to be inductive.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i * a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a >= 0;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant (i == 1 ==> (sn == 0 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i <= n ==> (sn <= n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i > n ==> (sn == n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant (i <= n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 > 1 || v2 > 1 || v3 > 1));\nloop invariant (i > n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 <= 1 || v2 <= 1 || v3 <= 1));\nloop invariant (i <= n ==> (sn == (sn + a*i)));\nloop invariant (i > n ==> (sn == (n*a)));\nloop invariant (i <= n ==> (sn == (sn + a*i) || sn == 0));\nloop invariant (i > n ==> (sn == (n*a) || sn == 0));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 23: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: a >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n * a is established but not preserved.\nloop invariant 0 <= v1 <= INT_MAX is neither established nor preserved.\nloop invariant 0 <= v2 <= INT_MAX is neither established nor preserved.\nloop invariant 0 <= v3 <= INT_MAX is neither established nor preserved.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant 1 <= sn <= n * a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant (sn == n * a) ==> (i == n + 1);\nloop invariant (sn == 0) ==> (i == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant 1 <= sn <= n * a is preserved but not established.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant (sn == n * a) ==> (i == n + 1) is partially proven to be inductive.\nloop invariant (sn == 0) ==> (i == 0) is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn <= i * a;\nloop invariant sn >= i * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\nloop invariant sn <= (i + 1) * a - a;\nloop invariant sn >= (i + 1) * a - a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n * a is partially proven to be inductive.\nloop invariant sn <= i * a is partially proven to be inductive.\nloop invariant sn >= i * a - a is partially proven to be inductive.\nloop invariant sn <= (i + 1) * a - a is partially proven to be inductive.\nloop invariant sn >= (i + 1) * a - a is preserved but not established.\nloop invariant sn <= (i + 1) * a is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: sn <= i * a;\nloop invariant i4: sn >= i * a - a;\nloop invariant i5: sn <= (i + 1) * a - a;\n\nloop invariant i7: sn <= (i + 1) * a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant v1 == v2;\nloop invariant v2 == v3; loop invariant i == n;\nloop invariant sn == n*a;\nloop invariant v1 == 0;\nloop invariant v2 == 0;\nloop invariant v3 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant sn == i is preserved but not established.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nloop invariant v1 == v2 is partially proven to be inductive.\nloop invariant v2 == v3; loop invariant i == n is partially proven to be inductive.\nloop invariant sn == n*a is partially proven to be inductive.\nloop invariant v1 == 0 is partially proven to be inductive.\nloop invariant v2 == 0 is partially proven to be inductive.\nloop invariant v3 == 0 is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 15,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant i - 1 <= n;\nloop invariant 0 <= sn <= (n * a);\nloop invariant 0 <= sn <= a * i;\nloop invariant 0 <= sn <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant i - 1 <= n is partially proven to be inductive.\nloop invariant 0 <= sn <= (n * a) is partially proven to be inductive.\nloop invariant 0 <= sn <= a * i is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nloop invariant 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\nloop invariant i4: 0 <= sn <= a * i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant v1 >= 0 && v1 <= 1;\nloop invariant v2 >= 0 && v2 <= 1;\nloop invariant v3 >= 0 && v3 <= 1;\nloop invariant (i == 0 ==> sn == 0);\nloop invariant (i == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (i == n+1 ==> sn == n*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant 0 <= sn <= n*a is partially proven to be inductive.\nloop invariant v1 >= 0 && v1 <= 1 is preserved but not established.\nloop invariant v2 >= 0 && v2 <= 1 is preserved but not established.\nloop invariant v3 >= 0 && v3 <= 1 is preserved but not established.\nloop invariant (i == 0 ==> sn == 0) is partially proven to be inductive.\nloop invariant (i == 0 ==> v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant (i == n+1 ==> sn == n*a && v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0) is preserved but not established.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n*a is established but not preserved.\nloop invariant 0 <= v1 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v2 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v3 <= RAND_MAX is neither established nor preserved.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant i >= 1 && i <= n + 1;\nloop invariant v1 <= INT_MAX && v1 >= INT_MIN;\nloop invariant v2 <= INT_MAX && v2 >= INT_MIN;\nloop invariant v3 <= INT_MAX && v3 >= INT_MIN;\nloop invariant i <= n + 1 ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i == 1 ==> sn == 0 && i == 1 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i == n + 1 ==> sn == n * a && i == n + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: v1 <= INT_MAX && v1 >= INT_MIN;\nloop invariant i4: v2 <= INT_MAX && v2 >= INT_MIN;\nloop invariant i5: v3 <= INT_MAX && v3 >= INT_MIN;\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i*a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v1 is preserved but not established.\nloop invariant 0 <= v2 is preserved but not established.\nloop invariant 0 <= v3 is preserved but not established.\nloop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= v1 <= RAND_MAX;\nloop invariant 0 <= v2 <= RAND_MAX;\nloop invariant 0 <= v3 <= RAND_MAX;\nloop invariant v1 + v2 + v3 >= 0;\nloop invariant v1 + v2 + v3 <= 3*RAND_MAX;\nloop invariant v1 <= v2 <= v3;\nloop invariant (i == 1 ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i < 1 ==> sn == 0);\nloop invariant (i > n ==> sn == 0);\nloop invariant (i == n ==> sn == n*a);\nloop invariant (i > n ==> sn == n*a);\nloop invariant (i == n ==> sn == n*a);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n*a is established but not preserved.\nloop invariant 0 <= v1 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v2 <= RAND_MAX is neither established nor preserved.\nloop invariant 0 <= v3 <= RAND_MAX is neither established nor preserved.\nloop invariant v1 + v2 + v3 >= 0 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 <= 3*RAND_MAX is partially proven to be inductive.\nloop invariant v1 <= v2 <= v3 is neither established nor preserved.\nloop invariant (i == 1 ==> sn == 0) is partially proven to be inductive.\nloop invariant (i == n ==> sn == n*a) is neither established nor preserved.\nloop invariant (i > n ==> sn == n*a) is partially proven to be inductive.\nloop invariant (i < 1 ==> sn == 0) is partially proven to be inductive.\nloop invariant (i > n ==> sn == 0) is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\nloop invariant i7: v1 + v2 + v3 <= 3*RAND_MAX;\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant a == 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\nloop invariant i3: a == 1;\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ''",
                "houdini_error": "No annotations found"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= sn <= n*a;\nloop invariant i3: sn == i*a;\nloop invariant i4: 1 <= i <= n;\nloop invariant i5: sn == i * a;\nloop invariant i6: v1 == unknown_int();\nloop invariant i7: v2 == unknown_int();\nloop invariant i8: v3 == unknown_int();\nloop invariant i9: 0 <= sn <= n;\nloop invariant i10: a >= 0;\nloop invariant i11: v1 >= 0;\nloop invariant i12: v2 >= 0;\nloop invariant i13: v3 >= 0;\nloop invariant i14: v1 <= 1;\nloop invariant i15: v2 <= 1;\nloop invariant i16: v3 <= 1;\nloop invariant i17: (i == 1 ==> (sn == 0 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant i18: (i <= n ==> (sn <= n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant i19: (i > n ==> (sn == n*a && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int()));\nloop invariant i20: (i <= n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 > 1 || v2 > 1 || v3 > 1));\nloop invariant i21: (i > n ==> (v1 == unknown_int() || v2 == unknown_int() || v3 == unknown_int() || v1 <= 1 || v2 <= 1 || v3 <= 1));\nloop invariant i22: (i <= n ==> (sn == (sn + a*i)));\nloop invariant i23: (i > n ==> (sn == (n*a)));\nloop invariant i24: (i <= n ==> (sn == (sn + a*i) || sn == 0));\nloop invariant i25: (i > n ==> (sn == (n*a) || sn == 0));\nloop invariant i26: 0 <= sn <= n * a;\nloop invariant i27: 0 <= v1 <= INT_MAX;\nloop invariant i28: 0 <= v2 <= INT_MAX;\nloop invariant i29: 0 <= v3 <= INT_MAX;\nloop invariant i30: 0 <= i <= n + 1;\nloop invariant i31: 1 <= sn <= n * a;\nloop invariant i32: (sn == n * a) ==> (i == n + 1);\nloop invariant i33: (sn == 0) ==> (i == 0);\nloop invariant i34: sn <= i * a;\nloop invariant i35: sn >= i * a - a;\nloop invariant i36: sn <= (i + 1) * a - a;\nloop invariant i37: sn >= (i + 1) * a - a;\nloop invariant i38: sn <= (i + 1) * a;\nloop invariant i39: sn == i;\nloop invariant i40: 0 <= v1 <= 1;\nloop invariant i41: 0 <= v2 <= 1;\nloop invariant i42: 0 <= v3 <= 1;\nloop invariant i43: v1 == v2;\nloop invariant i44: v2 == v3; loop invariant i == n;\nloop invariant i45: sn == n*a;\nloop invariant i46: v1 == 0;\nloop invariant i47: v2 == 0;\nloop invariant i48: v3 == 0;\nloop invariant i49: i - 1 <= n;\nloop invariant i50: 0 <= sn <= (n * a);\nloop invariant i51: 0 <= sn <= a * i;\nloop invariant i52: 0 <= sn <= a * n;\nloop invariant i53: 0 <= sn <= a * n && a * i <= a * n;\nloop invariant i54: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant i55: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i;\nloop invariant i56: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n;\nloop invariant i57: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n;\nloop invariant i58: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n;\nloop invariant i59: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i60: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i61: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i62: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i63: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i64: 0 <= sn <= a * n && a * i <= a * n && a * (i - 1) <= a * n && a * (i - 1) <= a * i && a * i <= a * n && a * (i - 1) <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n && a * i <= a * n;\nloop invariant i65: 1 <= n;\nloop invariant i66: v1 >= 0 && v1 <= 1;\nloop invariant i67: v2 >= 0 && v2 <= 1;\nloop invariant i68: v3 >= 0 && v3 <= 1;\nloop invariant i69: (i == 0 ==> sn == 0);\nloop invariant i70: (i == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i71: (i == n+1 ==> sn == n*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i72: (1 <= i && i <= n ==> sn == i*a && v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i73: 0 <= v1 <= RAND_MAX;\nloop invariant i74: 0 <= v2 <= RAND_MAX;\nloop invariant i75: 0 <= v3 <= RAND_MAX;\nloop invariant i76: i >= 1 && i <= n + 1;\nloop invariant i77: v1 <= INT_MAX && v1 >= INT_MIN;\nloop invariant i78: v2 <= INT_MAX && v2 >= INT_MIN;\nloop invariant i79: v3 <= INT_MAX && v3 >= INT_MIN;\nloop invariant i80: i <= n + 1 ==> v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i81: i == 1 ==> sn == 0 && i == 1 && v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i82: i == n + 1 ==> sn == n * a && i == n + 1;\nloop invariant i83: 0 <= v1;\nloop invariant i84: 0 <= v2;\nloop invariant i85: 0 <= v3;\nloop invariant i86: v1 + v2 + v3 >= 0;\nloop invariant i87: v1 + v2 + v3 <= 3*RAND_MAX;\nloop invariant i88: v1 <= v2 <= v3;\nloop invariant i89: (i == 1 ==> sn == 0);\nloop invariant i90: (i == n ==> sn == n*a);\nloop invariant i91: (i > n ==> sn == n*a);\nloop invariant i92: (i < 1 ==> sn == 0);\nloop invariant i93: (i > n ==> sn == 0);\nloop invariant i94: a == 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 34,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: a >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i34: sn <= i * a;\nloop invariant i35: sn >= i * a - a;\nloop invariant i36: sn <= (i + 1) * a - a;\n\nloop invariant i38: sn <= (i + 1) * a;\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i51: 0 <= sn <= a * i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i69: (i == 0 ==> sn == 0);\nloop invariant i70: (i == 0 ==> v1 == 0 && v2 == 0 && v3 == 0);\n\n\n\n\n\n\nloop invariant i77: v1 <= INT_MAX && v1 >= INT_MIN;\nloop invariant i78: v2 <= INT_MAX && v2 >= INT_MIN;\nloop invariant i79: v3 <= INT_MAX && v3 >= INT_MIN;\n\n\n\n\n\n\n\nloop invariant i87: v1 + v2 + v3 <= 3*RAND_MAX;\n\n\n\n\nloop invariant i92: (i < 1 ==> sn == 0);\n\nloop invariant i94: a == 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/104.c",
            "../dataset/loop_invariants/code2inv/110.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c"
        ],
        "skipped": [],
        "total": 20,
        "success_count": 4,
        "failure_count": 16,
        "success_rate": 0.2
    }
}