{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant sn == x*a || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant sn >= 0;\nloop invariant sn <= a*x;\nloop invariant x*a >= 0;\nloop invariant x*a <= n1*a;\nloop invariant x*a == sn || x*a == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2*x;\nloop invariant sn == x*a || x == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant sn == x * a;\nloop invariant sn == 0 || sn == x * a;\nloop invariant sn == 0 || sn == (x + 1) * a;\nloop invariant sn == 0 || sn == (x + 2) * a;\nloop invariant sn == 0 || sn == (x + 3) * a;\nloop invariant sn == 0 || sn == (x + 4) * a;\nloop invariant sn == 0 || sn == (x + 5) * a;\nloop invariant sn == 0 || sn == (x + 6) * a;\nloop invariant sn == 0 || sn == (x + 7) * a;\nloop invariant sn == 0 || sn == (x + 8) * a;\nloop invariant sn == 0 || sn == (x + 9) * a;\nloop invariant sn == 0 || sn == (x + 10) * a;\nloop invariant sn == 0 || sn == (x + 11) * a;\nloop invariant sn == 0 || sn == (x + 12) * a;\nloop invariant sn == 0 || sn == (x + 13) * a;\nloop invariant sn == 0 || sn == (x + 14) * a;\nloop invariant sn == 0 || sn == (x + 15) * a;\nloop invariant sn == 0 || sn == (x + 16) * a;\nloop invariant sn == 0 || sn == (x + 17) * a;\nloop invariant sn == 0 || sn == (x + 18) * a;\nloop invariant sn == 0 || sn == (x + 19) * a;\nloop invariant sn == 0 || sn == (x + 20) * a;\nloop invariant sn == 0 || sn == (x + 21) * a;\nloop invariant sn == 0 || sn == (x + 22) * a;\nloop invariant sn == 0 || sn == (x + 23) * a;\nloop invariant sn == 0 || sn == (x + 24) * a;\nloop invariant sn == 0 || sn == (x + 25) * a;\nloop invariant sn == 0 || sn == (x + 26) * a;\nloop invariant sn == 0 || sn == (x + 27) * a;\nloop invariant sn == 0 || sn == (x + 28) * a;\nloop invariant sn == 0 || sn == (x + 29) * a;\nloop invariant sn == 0 || sn == (x + 30) * a;\nloop invariant sn == 0 || sn == (x + 31) * a;\nloop invariant sn == 0 || sn == (x + 32) * a;\nloop invariant sn == 0 || sn == (x + 33) * a;\nloop invariant sn == 0 || sn == (x + 34) * a;\nloop invariant sn == 0 || sn == (x + 35) * a;\nloop invariant sn == 0 || sn == (x + 36) * a;\nloop invariant sn == 0 || sn == (x + 37) * a;\nloop invariant sn == 0 || sn == (x + 38) * a;\nloop invariant sn == 0 || sn == (x + 39) * a;\nloop invariant sn == 0 || sn == (x + 40) * a;\nloop invariant sn == 0 || sn == (x + 41) * a;\nloop invariant sn == 0 || sn == (x + 42) * a;\nloop invariant sn == 0 || sn == (x + 43) * a;\nloop invariant sn == 0 || sn == (x + 44) * a;\nloop invariant sn == 0 || sn == (x + 45) * a;\nloop invariant sn == 0 || sn == (x + 46) * a;\nloop invariant sn == 0 || sn == (x + 47) * a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= loop1;\nloop invariant sn == x * a;\nloop invariant x <= loop1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= sn <= x*a;\nloop invariant x <= sn/a;\nloop invariant x <= a;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant sn == x*a || x == 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x >= 0;\nloop invariant x <= 100000;\nloop invariant sn >= 0;\nloop invariant sn <= 100000*a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 1;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn == a ==> x == 1;\nloop invariant sn == 2*a ==> x == 2;\nloop invariant sn == 3*a ==> x == 3;\nloop invariant sn == 4*a ==> x == 4;\nloop invariant sn == 5*a ==> x == 5;\nloop invariant sn == 6*a ==> x == 6;\nloop invariant sn == 7*a ==> x == 7;\nloop invariant sn == 8*a ==> x == 8;\nloop invariant sn == 9*a ==> x == 9;\nloop invariant sn == 10*a ==> x == 10;\nloop invariant sn == 11*a ==> x == 11;\nloop invariant sn == 12*a ==> x == 12;\nloop invariant sn == 13*a ==> x == 13;\nloop invariant sn == 14*a ==> x == 14;\nloop invariant sn == 15*a ==> x == 15;\nloop invariant sn == 16*a ==> x == 16;\nloop invariant sn == 17*a ==> x == 17;\nloop invariant sn == 18*a ==> x == 18;\nloop invariant sn == 19*a ==> x == 19;\nloop invariant sn == 20*a ==> x == 20;\nloop invariant sn == 21*a ==> x == 21;\nloop invariant sn == 22*a ==> x == 22;\nloop invariant sn == 23*a ==> x == 23;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2 \\* n1; loop invariant 0 <= x <= n1; loop invariant sn == x \\* a;\n*/\n```",
            "```\n/*@\nloop invariant 1 ==> sn==0;\nloop invariant 2 ==> sn>=0;\nloop invariant 3 ==> x>=0;\nloop invariant 4 ==> sn==x*a || sn == 0;\nloop invariant 5 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 6 ==> sn<=x*a;\nloop invariant 7 ==> sn<=x*a ==> sn>=0;\nloop invariant 8 ==> sn>=0 ==> sn<=x*a;\nloop invariant 9 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 10 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= n1;\nloop invariant 0 <= sn <= a * n1;\nloop invariant sn == x * a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x ( x is non-deterministic ) <= loop1 + 1;\nloop invariant 0 <= x <= loop1 + 1;\nloop invariant sn >= x * a || sn == 0;\nloop invariant sn <= (loop1 + 1) * a;\nloop invariant loop1 >= x - 1;\nloop invariant loop1 <= x;\nloop invariant x <= n1 + 1;\nloop invariant x >= n1 - 1;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant n1 >= 1;\nloop invariant n1 <= x;\nloop invariant sn <= (x + 1) * a;\nloop invariant sn >= x * a;\nloop invariant a >= 0;\nloop invariant x <= a * x;\nloop invariant x >= a * x;\nloop invariant x <= a * x + a;\nloop invariant x >= a * x + a;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= x*a || sn == 0;\nloop invariant 0 <= x <= a;\n*/\n```",
            "```\n/*@\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= x <= unknown_uint();\nloop invariant 0 <= sn <= x * a;\nloop invariant (sn == x * a || sn == 0) ==> (sn <= x * a);\nloop invariant (sn == x * a || sn == 0) ==> (sn >= 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant sn == x*a || sn == 0;\nloop invariant x >= 0;\nloop invariant x <= n1;\nloop invariant sn >= 0;\nloop invariant sn <= a*x;\nloop invariant x*a >= 0;\nloop invariant x*a <= n1*a;\nloop invariant x*a == sn || x*a == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= x*a is partially proven to be inductive.\nloop invariant sn == x*a || sn == 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n1 is established but not preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= a*x is partially proven to be inductive.\nloop invariant x*a >= 0 is partially proven to be inductive.\nloop invariant x*a <= n1*a is partially proven to be inductive.\nloop invariant x*a == sn || x*a == 0 is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\nloop invariant i2: sn == x*a || sn == 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= a*x;\nloop invariant i7: x*a >= 0;\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2*x;\nloop invariant sn == x*a || x == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= 2*x is partially proven to be inductive.\nloop invariant sn == x*a || x == 0 is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= 2*x;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 53,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= 100000;\nloop invariant y <= x;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant sn == x * a;\nloop invariant sn == 0 || sn == x * a;\nloop invariant sn == 0 || sn == (x + 1) * a;\nloop invariant sn == 0 || sn == (x + 2) * a;\nloop invariant sn == 0 || sn == (x + 3) * a;\nloop invariant sn == 0 || sn == (x + 4) * a;\nloop invariant sn == 0 || sn == (x + 5) * a;\nloop invariant sn == 0 || sn == (x + 6) * a;\nloop invariant sn == 0 || sn == (x + 7) * a;\nloop invariant sn == 0 || sn == (x + 8) * a;\nloop invariant sn == 0 || sn == (x + 9) * a;\nloop invariant sn == 0 || sn == (x + 10) * a;\nloop invariant sn == 0 || sn == (x + 11) * a;\nloop invariant sn == 0 || sn == (x + 12) * a;\nloop invariant sn == 0 || sn == (x + 13) * a;\nloop invariant sn == 0 || sn == (x + 14) * a;\nloop invariant sn == 0 || sn == (x + 15) * a;\nloop invariant sn == 0 || sn == (x + 16) * a;\nloop invariant sn == 0 || sn == (x + 17) * a;\nloop invariant sn == 0 || sn == (x + 18) * a;\nloop invariant sn == 0 || sn == (x + 19) * a;\nloop invariant sn == 0 || sn == (x + 20) * a;\nloop invariant sn == 0 || sn == (x + 21) * a;\nloop invariant sn == 0 || sn == (x + 22) * a;\nloop invariant sn == 0 || sn == (x + 23) * a;\nloop invariant sn == 0 || sn == (x + 24) * a;\nloop invariant sn == 0 || sn == (x + 25) * a;\nloop invariant sn == 0 || sn == (x + 26) * a;\nloop invariant sn == 0 || sn == (x + 27) * a;\nloop invariant sn == 0 || sn == (x + 28) * a;\nloop invariant sn == 0 || sn == (x + 29) * a;\nloop invariant sn == 0 || sn == (x + 30) * a;\nloop invariant sn == 0 || sn == (x + 31) * a;\nloop invariant sn == 0 || sn == (x + 32) * a;\nloop invariant sn == 0 || sn == (x + 33) * a;\nloop invariant sn == 0 || sn == (x + 34) * a;\nloop invariant sn == 0 || sn == (x + 35) * a;\nloop invariant sn == 0 || sn == (x + 36) * a;\nloop invariant sn == 0 || sn == (x + 37) * a;\nloop invariant sn == 0 || sn == (x + 38) * a;\nloop invariant sn == 0 || sn == (x + 39) * a;\nloop invariant sn == 0 || sn == (x + 40) * a;\nloop invariant sn == 0 || sn == (x + 41) * a;\nloop invariant sn == 0 || sn == (x + 42) * a;\nloop invariant sn == 0 || sn == (x + 43) * a;\nloop invariant sn == 0 || sn == (x + 44) * a;\nloop invariant sn == 0 || sn == (x + 45) * a;\nloop invariant sn == 0 || sn == (x + 46) * a;\nloop invariant sn == 0 || sn == (x + 47) * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\n\nloop invariant i5: sn == 0 || sn == x * a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= loop1;\nloop invariant sn == x * a;\nloop invariant x <= loop1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= loop1 is preserved but not established.\nloop invariant sn == x * a is partially proven to be inductive.\nloop invariant x <= loop1 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= sn <= x*a;\nloop invariant x <= sn/a;\nloop invariant x <= a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= sn <= x*a is preserved but not established.\nloop invariant x <= sn/a is partially proven to be inductive.\nloop invariant x <= a is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant sn == x*a || x == 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant x >= 0;\nloop invariant x <= 100000;\nloop invariant sn >= 0;\nloop invariant sn <= 100000*a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == x*a || x == 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100000 is established but not preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= 100000*a is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\nloop invariant i3: x >= 0;\n\nloop invariant i5: sn >= 0;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= 1;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn == a ==> x == 1;\nloop invariant sn == 2*a ==> x == 2;\nloop invariant sn == 3*a ==> x == 3;\nloop invariant sn == 4*a ==> x == 4;\nloop invariant sn == 5*a ==> x == 5;\nloop invariant sn == 6*a ==> x == 6;\nloop invariant sn == 7*a ==> x == 7;\nloop invariant sn == 8*a ==> x == 8;\nloop invariant sn == 9*a ==> x == 9;\nloop invariant sn == 10*a ==> x == 10;\nloop invariant sn == 11*a ==> x == 11;\nloop invariant sn == 12*a ==> x == 12;\nloop invariant sn == 13*a ==> x == 13;\nloop invariant sn == 14*a ==> x == 14;\nloop invariant sn == 15*a ==> x == 15;\nloop invariant sn == 16*a ==> x == 16;\nloop invariant sn == 17*a ==> x == 17;\nloop invariant sn == 18*a ==> x == 18;\nloop invariant sn == 19*a ==> x == 19;\nloop invariant sn == 20*a ==> x == 20;\nloop invariant sn == 21*a ==> x == 21;\nloop invariant sn == 22*a ==> x == 22;\nloop invariant sn == 23*a ==> x == 23;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x <= 1 is established but not preserved.\nloop invariant sn == x*a || sn == 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant sn == a ==> x == 1 is partially proven to be inductive.\nloop invariant sn == 2*a ==> x == 2 is partially proven to be inductive.\nloop invariant sn == 3*a ==> x == 3 is partially proven to be inductive.\nloop invariant sn == 4*a ==> x == 4 is partially proven to be inductive.\nloop invariant sn == 5*a ==> x == 5 is partially proven to be inductive.\nloop invariant sn == 6*a ==> x == 6 is partially proven to be inductive.\nloop invariant sn == 7*a ==> x == 7 is partially proven to be inductive.\nloop invariant sn == 8*a ==> x == 8 is partially proven to be inductive.\nloop invariant sn == 9*a ==> x == 9 is partially proven to be inductive.\nloop invariant sn == 10*a ==> x == 10 is partially proven to be inductive.\nloop invariant sn == 11*a ==> x == 11 is partially proven to be inductive.\nloop invariant sn == 12*a ==> x == 12 is partially proven to be inductive.\nloop invariant sn == 13*a ==> x == 13 is partially proven to be inductive.\nloop invariant sn == 14*a ==> x == 14 is partially proven to be inductive.\nloop invariant sn == 15*a ==> x == 15 is partially proven to be inductive.\nloop invariant sn == 16*a ==> x == 16 is partially proven to be inductive.\nloop invariant sn == 17*a ==> x == 17 is partially proven to be inductive.\nloop invariant sn == 18*a ==> x == 18 is partially proven to be inductive.\nloop invariant sn == 19*a ==> x == 19 is partially proven to be inductive.\nloop invariant sn == 20*a ==> x == 20 is partially proven to be inductive.\nloop invariant sn == 21*a ==> x == 21 is partially proven to be inductive.\nloop invariant sn == 22*a ==> x == 22 is partially proven to be inductive.\nloop invariant sn == 23*a ==> x == 23 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: sn == x*a || sn == 0;\n\nloop invariant i5: sn == a ==> x == 1;\nloop invariant i6: sn == 2*a ==> x == 2;\nloop invariant i7: sn == 3*a ==> x == 3;\nloop invariant i8: sn == 4*a ==> x == 4;\nloop invariant i9: sn == 5*a ==> x == 5;\nloop invariant i10: sn == 6*a ==> x == 6;\nloop invariant i11: sn == 7*a ==> x == 7;\nloop invariant i12: sn == 8*a ==> x == 8;\nloop invariant i13: sn == 9*a ==> x == 9;\nloop invariant i14: sn == 10*a ==> x == 10;\nloop invariant i15: sn == 11*a ==> x == 11;\nloop invariant i16: sn == 12*a ==> x == 12;\nloop invariant i17: sn == 13*a ==> x == 13;\nloop invariant i18: sn == 14*a ==> x == 14;\nloop invariant i19: sn == 15*a ==> x == 15;\nloop invariant i20: sn == 16*a ==> x == 16;\nloop invariant i21: sn == 17*a ==> x == 17;\nloop invariant i22: sn == 18*a ==> x == 18;\nloop invariant i23: sn == 19*a ==> x == 19;\nloop invariant i24: sn == 20*a ==> x == 20;\nloop invariant i25: sn == 21*a ==> x == 21;\nloop invariant i26: sn == 22*a ==> x == 22;\nloop invariant i27: sn == 23*a ==> x == 23;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2 \\* n1; loop invariant 0 <= x <= n1; loop invariant sn == x \\* a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: lexical error, illegal character \\",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 ==> sn==0;\nloop invariant 2 ==> sn>=0;\nloop invariant 3 ==> x>=0;\nloop invariant 4 ==> sn==x*a || sn == 0;\nloop invariant 5 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 6 ==> sn<=x*a;\nloop invariant 7 ==> sn<=x*a ==> sn>=0;\nloop invariant 8 ==> sn>=0 ==> sn<=x*a;\nloop invariant 9 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 10 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 ==> sn==0 is established but not preserved.\nloop invariant 2 ==> sn>=0 is partially proven to be inductive.\nloop invariant 3 ==> x>=0 is partially proven to be inductive.\nloop invariant 4 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 5 ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 6 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 7 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 8 ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 9 ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 10 ==> sn<=x*a ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0 is partially proven to be inductive.\nloop invariant 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 is partially proven to be inductive.\nloop invariant 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nloop invariant 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: 2 ==> sn>=0;\nloop invariant i3: 3 ==> x>=0;\nloop invariant i4: 4 ==> sn==x*a || sn == 0;\nloop invariant i5: 5 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i6: 6 ==> sn<=x*a;\nloop invariant i7: 7 ==> sn<=x*a ==> sn>=0;\nloop invariant i8: 8 ==> sn>=0 ==> sn<=x*a;\nloop invariant i9: 9 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i10: 10 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i11: 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i12: 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i13: 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i14: 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i15: 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i16: 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i17: 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i18: 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i19: 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i20: 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i21: 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i22: 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i23: 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i24: 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i25: 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i26: 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i27: 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i28: 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i29: 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i30: 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i31: 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i32: 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i33: 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= n1;\nloop invariant 0 <= sn <= a * n1;\nloop invariant sn == x * a || sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n1 is preserved but not established.\nloop invariant 0 <= sn <= a * n1 is partially proven to be inductive.\nloop invariant sn == x * a || sn == 0 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\nloop invariant i3: sn == x * a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 1 <= x ( x is non-deterministic ) <= loop1 + 1;\nloop invariant 0 <= x <= loop1 + 1;\nloop invariant sn >= x * a || sn == 0;\nloop invariant sn <= (loop1 + 1) * a;\nloop invariant loop1 >= x - 1;\nloop invariant loop1 <= x;\nloop invariant x <= n1 + 1;\nloop invariant x >= n1 - 1;\nloop invariant sn <= x * a;\nloop invariant sn >= 0;\nloop invariant n1 >= 1;\nloop invariant n1 <= x;\nloop invariant sn <= (x + 1) * a;\nloop invariant sn >= x * a;\nloop invariant a >= 0;\nloop invariant x <= a * x;\nloop invariant x >= a * x;\nloop invariant x <= a * x + a;\nloop invariant x >= a * x + a;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\nloop invariant x <= a * x + a + 1;\nloop invariant x >= a * x + a + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token 'is'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\nloop invariant i3: sn >= x * a || sn == 0;\n\n\n\n\n\nloop invariant i9: sn <= x * a;\nloop invariant i10: sn >= 0;\n\n\nloop invariant i13: sn <= (x + 1) * a;\n\nloop invariant i15: a >= 0;\nloop invariant i16: x <= a * x;\n\nloop invariant i18: x <= a * x + a;\n\nloop invariant i20: x <= a * x + a + 1;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a || sn == 0;\nloop invariant 0 <= x <= a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= x*a || sn == 0 is partially proven to be inductive.\nloop invariant 0 <= x <= a is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a || sn == 0;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token 'and'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= x <= unknown_uint();\nloop invariant 0 <= sn <= x * a;\nloop invariant (sn == x * a || sn == 0) ==> (sn <= x * a);\nloop invariant (sn == x * a || sn == 0) ==> (sn >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: 0 <= sn <= x * a;\nloop invariant i3: (sn == x * a || sn == 0) ==> (sn <= x * a);\nloop invariant i4: (sn == x * a || sn == 0) ==> (sn >= 0);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 115: lexical error, illegal character \\",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\nloop invariant i2: sn == x*a || sn == 0;\nloop invariant i3: x >= 0;\nloop invariant i4: x <= n1;\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= a*x;\nloop invariant i7: x*a >= 0;\nloop invariant i8: x*a <= n1*a;\nloop invariant i9: x*a == sn || x*a == 0;\nloop invariant i10: 0 <= sn <= 2*x;\nloop invariant i11: sn == x*a || x == 0;\nloop invariant i12: 1 <= x <= 100000;\nloop invariant i13: y <= x;\nloop invariant i14: x >= (1 + (y - 1) * y / 2);\nloop invariant i15: sn == x * a;\nloop invariant i16: sn == 0 || sn == x * a;\nloop invariant i17: sn == 0 || sn == (x + 1) * a;\nloop invariant i18: sn == 0 || sn == (x + 2) * a;\nloop invariant i19: sn == 0 || sn == (x + 3) * a;\nloop invariant i20: sn == 0 || sn == (x + 4) * a;\nloop invariant i21: sn == 0 || sn == (x + 5) * a;\nloop invariant i22: sn == 0 || sn == (x + 6) * a;\nloop invariant i23: sn == 0 || sn == (x + 7) * a;\nloop invariant i24: sn == 0 || sn == (x + 8) * a;\nloop invariant i25: sn == 0 || sn == (x + 9) * a;\nloop invariant i26: sn == 0 || sn == (x + 10) * a;\nloop invariant i27: sn == 0 || sn == (x + 11) * a;\nloop invariant i28: sn == 0 || sn == (x + 12) * a;\nloop invariant i29: sn == 0 || sn == (x + 13) * a;\nloop invariant i30: sn == 0 || sn == (x + 14) * a;\nloop invariant i31: sn == 0 || sn == (x + 15) * a;\nloop invariant i32: sn == 0 || sn == (x + 16) * a;\nloop invariant i33: sn == 0 || sn == (x + 17) * a;\nloop invariant i34: sn == 0 || sn == (x + 18) * a;\nloop invariant i35: sn == 0 || sn == (x + 19) * a;\nloop invariant i36: sn == 0 || sn == (x + 20) * a;\nloop invariant i37: sn == 0 || sn == (x + 21) * a;\nloop invariant i38: sn == 0 || sn == (x + 22) * a;\nloop invariant i39: sn == 0 || sn == (x + 23) * a;\nloop invariant i40: sn == 0 || sn == (x + 24) * a;\nloop invariant i41: sn == 0 || sn == (x + 25) * a;\nloop invariant i42: sn == 0 || sn == (x + 26) * a;\nloop invariant i43: sn == 0 || sn == (x + 27) * a;\nloop invariant i44: sn == 0 || sn == (x + 28) * a;\nloop invariant i45: sn == 0 || sn == (x + 29) * a;\nloop invariant i46: sn == 0 || sn == (x + 30) * a;\nloop invariant i47: sn == 0 || sn == (x + 31) * a;\nloop invariant i48: sn == 0 || sn == (x + 32) * a;\nloop invariant i49: sn == 0 || sn == (x + 33) * a;\nloop invariant i50: sn == 0 || sn == (x + 34) * a;\nloop invariant i51: sn == 0 || sn == (x + 35) * a;\nloop invariant i52: sn == 0 || sn == (x + 36) * a;\nloop invariant i53: sn == 0 || sn == (x + 37) * a;\nloop invariant i54: sn == 0 || sn == (x + 38) * a;\nloop invariant i55: sn == 0 || sn == (x + 39) * a;\nloop invariant i56: sn == 0 || sn == (x + 40) * a;\nloop invariant i57: sn == 0 || sn == (x + 41) * a;\nloop invariant i58: sn == 0 || sn == (x + 42) * a;\nloop invariant i59: sn == 0 || sn == (x + 43) * a;\nloop invariant i60: sn == 0 || sn == (x + 44) * a;\nloop invariant i61: sn == 0 || sn == (x + 45) * a;\nloop invariant i62: sn == 0 || sn == (x + 46) * a;\nloop invariant i63: sn == 0 || sn == (x + 47) * a;\nloop invariant i64: 1 <= x <= loop1;\nloop invariant i65: x <= loop1;\nloop invariant i66: 1 <= sn <= x*a;\nloop invariant i67: x <= sn/a;\nloop invariant i68: x <= a;\nloop invariant i69: sn == 0 ==> x == 0;\nloop invariant i70: x <= 100000;\nloop invariant i71: sn <= 100000*a;\nloop invariant i72: 0 <= x;\nloop invariant i73: x <= 1;\nloop invariant i74: sn == a ==> x == 1;\nloop invariant i75: sn == 2*a ==> x == 2;\nloop invariant i76: sn == 3*a ==> x == 3;\nloop invariant i77: sn == 4*a ==> x == 4;\nloop invariant i78: sn == 5*a ==> x == 5;\nloop invariant i79: sn == 6*a ==> x == 6;\nloop invariant i80: sn == 7*a ==> x == 7;\nloop invariant i81: sn == 8*a ==> x == 8;\nloop invariant i82: sn == 9*a ==> x == 9;\nloop invariant i83: sn == 10*a ==> x == 10;\nloop invariant i84: sn == 11*a ==> x == 11;\nloop invariant i85: sn == 12*a ==> x == 12;\nloop invariant i86: sn == 13*a ==> x == 13;\nloop invariant i87: sn == 14*a ==> x == 14;\nloop invariant i88: sn == 15*a ==> x == 15;\nloop invariant i89: sn == 16*a ==> x == 16;\nloop invariant i90: sn == 17*a ==> x == 17;\nloop invariant i91: sn == 18*a ==> x == 18;\nloop invariant i92: sn == 19*a ==> x == 19;\nloop invariant i93: sn == 20*a ==> x == 20;\nloop invariant i94: sn == 21*a ==> x == 21;\nloop invariant i95: sn == 22*a ==> x == 22;\nloop invariant i96: sn == 23*a ==> x == 23;\nloop invariant i97: 0 <= sn <= 2 \\* n1; loop invariant 0 <= x <= n1; loop invariant sn == x \\* a;\nloop invariant i98: 1 ==> sn==0;\nloop invariant i99: 2 ==> sn>=0;\nloop invariant i100: 3 ==> x>=0;\nloop invariant i101: 4 ==> sn==x*a || sn == 0;\nloop invariant i102: 5 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i103: 6 ==> sn<=x*a;\nloop invariant i104: 7 ==> sn<=x*a ==> sn>=0;\nloop invariant i105: 8 ==> sn>=0 ==> sn<=x*a;\nloop invariant i106: 9 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i107: 10 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i108: 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i109: 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i110: 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i111: 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i112: 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i113: 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i114: 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i115: 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i116: 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i117: 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i118: 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i119: 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i120: 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i121: 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i122: 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i123: 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i124: 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i125: 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i126: 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i127: 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i128: 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i129: 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i130: 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i131: 1 <= x <= n1;\nloop invariant i132: 0 <= sn <= a * n1;\nloop invariant i133: sn == x * a || sn == 0;\nloop invariant i134: 1 <= x ( x is non-deterministic ) <= loop1 + 1;\nloop invariant i135: 0 <= x <= loop1 + 1;\nloop invariant i136: sn >= x * a || sn == 0;\nloop invariant i137: sn <= (loop1 + 1) * a;\nloop invariant i138: loop1 >= x - 1;\nloop invariant i139: loop1 <= x;\nloop invariant i140: x <= n1 + 1;\nloop invariant i141: x >= n1 - 1;\nloop invariant i142: sn <= x * a;\nloop invariant i143: n1 >= 1;\nloop invariant i144: n1 <= x;\nloop invariant i145: sn <= (x + 1) * a;\nloop invariant i146: sn >= x * a;\nloop invariant i147: a >= 0;\nloop invariant i148: x <= a * x;\nloop invariant i149: x >= a * x;\nloop invariant i150: x <= a * x + a;\nloop invariant i151: x >= a * x + a;\nloop invariant i152: x <= a * x + a + 1;\nloop invariant i153: x >= a * x + a + 1;\nloop invariant i154: 0 <= sn <= x*a || sn == 0;\nloop invariant i155: 0 <= x <= a;\nloop invariant i156: loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == a * x;\nloop invariant i157: loop1 >= 0 and n1 >= 0 and sn >= 0 and x >= 0 and sn == 0 and x == 0 or sn == a * x;\nloop invariant i158: 1 <= x <= unknown_uint();\nloop invariant i159: 0 <= sn <= x * a;\nloop invariant i160: (sn == x * a || sn == 0) ==> (sn <= x * a);\nloop invariant i161: (sn == x * a || sn == 0) ==> (sn >= 0);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 76,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\nloop invariant i2: sn == x*a || sn == 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: sn >= 0;\nloop invariant i6: sn <= a*x;\nloop invariant i7: x*a >= 0;\n\n\nloop invariant i10: 0 <= sn <= 2*x;\n\n\n\n\n\nloop invariant i16: sn == 0 || sn == x * a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i72: 0 <= x;\n\nloop invariant i74: sn == a ==> x == 1;\nloop invariant i75: sn == 2*a ==> x == 2;\nloop invariant i76: sn == 3*a ==> x == 3;\nloop invariant i77: sn == 4*a ==> x == 4;\nloop invariant i78: sn == 5*a ==> x == 5;\nloop invariant i79: sn == 6*a ==> x == 6;\nloop invariant i80: sn == 7*a ==> x == 7;\nloop invariant i81: sn == 8*a ==> x == 8;\nloop invariant i82: sn == 9*a ==> x == 9;\nloop invariant i83: sn == 10*a ==> x == 10;\nloop invariant i84: sn == 11*a ==> x == 11;\nloop invariant i85: sn == 12*a ==> x == 12;\nloop invariant i86: sn == 13*a ==> x == 13;\nloop invariant i87: sn == 14*a ==> x == 14;\nloop invariant i88: sn == 15*a ==> x == 15;\nloop invariant i89: sn == 16*a ==> x == 16;\nloop invariant i90: sn == 17*a ==> x == 17;\nloop invariant i91: sn == 18*a ==> x == 18;\nloop invariant i92: sn == 19*a ==> x == 19;\nloop invariant i93: sn == 20*a ==> x == 20;\nloop invariant i94: sn == 21*a ==> x == 21;\nloop invariant i95: sn == 22*a ==> x == 22;\nloop invariant i96: sn == 23*a ==> x == 23;\n\n\nloop invariant i99: 2 ==> sn>=0;\nloop invariant i100: 3 ==> x>=0;\nloop invariant i101: 4 ==> sn==x*a || sn == 0;\nloop invariant i102: 5 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i103: 6 ==> sn<=x*a;\nloop invariant i104: 7 ==> sn<=x*a ==> sn>=0;\nloop invariant i105: 8 ==> sn>=0 ==> sn<=x*a;\nloop invariant i106: 9 ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i107: 10 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i108: 11 ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i109: 12 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i110: 13 ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i111: 14 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i112: 15 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i113: 16 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i114: 17 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i115: 18 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i116: 19 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i117: 20 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i118: 21 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i119: 22 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i120: 23 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i121: 24 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i122: 25 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i123: 26 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i124: 27 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i125: 28 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i126: 29 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn==x*a || sn == 0;\nloop invariant i127: 30 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn==x*a || sn == 0;\nloop invariant i128: 31 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0;\nloop invariant i129: 32 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\nloop invariant i130: 33 ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a ==> sn>=0 ==> sn<=x*a;\n\n\nloop invariant i133: sn == x * a || sn == 0;\n\n\nloop invariant i136: sn >= x * a || sn == 0;\n\n\n\n\n\nloop invariant i142: sn <= x * a;\n\n\nloop invariant i145: sn <= (x + 1) * a;\n\nloop invariant i147: a >= 0;\nloop invariant i148: x <= a * x;\n\nloop invariant i150: x <= a * x + a;\n\nloop invariant i152: x <= a * x + a + 1;\n\nloop invariant i154: 0 <= sn <= x*a || sn == 0;\n\n\n\n\nloop invariant i159: 0 <= sn <= x * a;\nloop invariant i160: (sn == x * a || sn == 0) ==> (sn <= x * a);\nloop invariant i161: (sn == x * a || sn == 0) ==> (sn >= 0);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c"
        ],
        "skipped": [],
        "total": 12,
        "success_count": 3,
        "failure_count": 9,
        "success_rate": 0.25
    }
}