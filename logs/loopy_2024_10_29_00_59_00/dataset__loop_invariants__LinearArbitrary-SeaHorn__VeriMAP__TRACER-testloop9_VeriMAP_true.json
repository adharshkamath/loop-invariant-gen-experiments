{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  while (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1 || x == 2 || x == 3);\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1 || x == 2 || x == 3 || x == 4);\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\nloop invariant (x == 1 ==> y == 3);\nloop invariant (x == 2 ==> y == 4);\nloop invariant (x == 3 ==> y == 5);\nloop invariant (x == 4 ==> y == 6);\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2);\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6);\nloop invariant (x == 1 ==> y == 3 ==> i == 0);\nloop invariant (x == 2 ==> y == 4 ==> i == 1);\nloop invariant (x == 3 ==> y == 5 ==> i == 2);\nloop invariant (x == 4 ==> y == 6 ==> i == 3);\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4);\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5);\n*/\n```",
            "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 1;\nloop invariant x <= 4;\nloop invariant y >= 1;\nloop invariant y <= 6;\nloop invariant ((i == 0 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant ((i == 1 && x == 2 && y == 3) ==> (x == 3 || x == 1));\nloop invariant ((i == 2 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant ((i == 3 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1));\nloop invariant ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2));\nloop invariant ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4));\nloop invariant ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\nloop invariant !(y == 6);\nloop invariant (x == 1 ==> i <= 4);\nloop invariant (x == 2 ==> i <= 5);\nloop invariant (x == 3 ==> i <= 5);\nloop invariant (x == 4 ==> i <= 5);\nloop invariant (x == 1 ==> y == 5);\nloop invariant (x == 2 ==> y == 4);\nloop invariant (x == 3 ==> y == 3);\nloop invariant (x == 4 ==> y == 6);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\nloop invariant (y == 3 ==> (i == 0));\nloop invariant (y == 4 ==> (i == 1));\nloop invariant (y == 5 ==> (i == 2));\nloop invariant (y == 6 ==> (i == 3));\nloop invariant (y == 3 ==> (x == 1));\nloop invariant (y == 4 ==> (x == 2));\nloop invariant (y == 5 ==> (x == 3));\nloop invariant (y == 6 ==> (x == 4));\nloop invariant (y == 3 ==> (i == 0 ==> x == 1));\nloop invariant (y == 4 ==> (i == 1 ==> x == 2));\nloop invariant (y == 5 ==> (i == 2 ==> x == 3));\nloop invariant (y == 6 ==> (i == 3 ==> x == 4));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == (1 + (y - 1) * y / 2));\nloop invariant (y == 5) ==> (x == 1);\nloop invariant (y == 4) ==> (x == 2);\nloop invariant (y == 3) ==> (x == 3);\nloop invariant (y == 6) ==> (x == 4);\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 6;\nloop invariant x == (i - 1) % 4 + 1;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 5 || y == 6;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6);\nloop invariant x == 2 || (x == 3 && y == 4);\nloop invariant x == 3 || (x == 2 && y == 3);\nloop invariant x == 4 || (x == 3 && y == 5);\nloop invariant x == 1 || (x == 4 && y == 6);\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 5 || y == 6;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6);\nloop invariant x == 2 || (x == 3 && y == 4);\nloop invariant x == 3 || (x == 2 && y == 3);\nloop invariant x == 4 || (x == 3 && y == 5);\nloop invariant x == 1 || (x == 4 && y == 6);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10 && 1 <= x <= 4 && (x == 1 || x == 2 || x == 3 || x == 4) && (y >= 3 && y <= 6);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1) ==> (y == 3);\nloop invariant (x == 2) ==> (y == 4);\nloop invariant (x == 3) ==> (y == 5);\nloop invariant (x == 4) ==> (y == 6);\nloop invariant i < 10 ==> (x != 4);\nloop invariant i < 10 ==> (y != 6);\nloop invariant i == 10 ==> (x == 1);\nloop invariant i == 10 ==> (y == 5);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant (y != 6) ==> (y == 1 || y == 2 || y == 3 || y == 4);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 1 ==> y == 3;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 3 ==> y == 5;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 2;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant (i == 0) ==> (x == 1);\nloop invariant (i == 1) ==> (x == 2);\nloop invariant (i == 2) ==> (x == 3);\nloop invariant (i == 3) ==> (x == 1);\nloop invariant (i == 4) ==> (x == 2);\nloop invariant (i == 5) ==> (x == 3);\nloop invariant (i == 6) ==> (x == 1);\nloop invariant (i == 7) ==> (x == 2);\nloop invariant (i == 8) ==> (x == 3);\nloop invariant (i == 9) ==> (x == 1);\nloop invariant (i == 10) ==> (x == 2);\nloop invariant (i == 0) ==> (y == 0);\nloop invariant (i == 1) ==> (y == 3);\nloop invariant (i == 2) ==> (y == 4);\nloop invariant (i == 3) ==> (y == 5);\nloop invariant (i == 4) ==> (y == 6);\nloop invariant (i == 5) ==> (y == 7);\nloop invariant (i == 6) ==> (y == 8);\nloop invariant (i == 7) ==> (y == 9);\nloop invariant (i == 8) ==> (y == 10);\nloop invariant (i == 9) ==> (y == 11);\nloop invariant (i == 10) ==> (y == 12);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1 || x == 2 || x == 3);\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == 1 || x == 2 || x == 3) is partially proven to be inductive.\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6) is preserved but not established.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: (x == 1 || x == 2 || x == 3);\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1 || x == 2 || x == 3 || x == 4);\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\nloop invariant (x == 1 ==> y == 3);\nloop invariant (x == 2 ==> y == 4);\nloop invariant (x == 3 ==> y == 5);\nloop invariant (x == 4 ==> y == 6);\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2);\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6);\nloop invariant (x == 1 ==> y == 3 ==> i == 0);\nloop invariant (x == 2 ==> y == 4 ==> i == 1);\nloop invariant (x == 3 ==> y == 5 ==> i == 2);\nloop invariant (x == 4 ==> y == 6 ==> i == 3);\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4);\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == 1 || x == 2 || x == 3 || x == 4) is partially proven to be inductive.\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6) is preserved but not established.\nloop invariant (x == 1 ==> y == 3) is neither established nor preserved.\nloop invariant (x == 2 ==> y == 4) is established but not preserved.\nloop invariant (x == 3 ==> y == 5) is established but not preserved.\nloop invariant (x == 4 ==> y == 6) is partially proven to be inductive.\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2) is partially proven to be inductive.\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 3 ==> i == 0) is partially proven to be inductive.\nloop invariant (x == 2 ==> y == 4 ==> i == 1) is partially proven to be inductive.\nloop invariant (x == 3 ==> y == 5 ==> i == 2) is partially proven to be inductive.\nloop invariant (x == 4 ==> y == 6 ==> i == 3) is partially proven to be inductive.\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4) is partially proven to be inductive.\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: (x == 1 || x == 2 || x == 3 || x == 4);\n\n\n\n\nloop invariant i7: (x == 4 ==> y == 6);\nloop invariant i8: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2);\n\nloop invariant i10: (x == 1 ==> y == 3 ==> i == 0);\nloop invariant i11: (x == 2 ==> y == 4 ==> i == 1);\nloop invariant i12: (x == 3 ==> y == 5 ==> i == 2);\nloop invariant i13: (x == 4 ==> y == 6 ==> i == 3);\nloop invariant i14: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4);\nloop invariant i15: (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant i >= 0;\nloop invariant i <= 10;\nloop invariant x >= 1;\nloop invariant x <= 4;\nloop invariant y >= 1;\nloop invariant y <= 6;\nloop invariant ((i == 0 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant ((i == 1 && x == 2 && y == 3) ==> (x == 3 || x == 1));\nloop invariant ((i == 2 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant ((i == 3 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1));\nloop invariant ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2));\nloop invariant ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4));\nloop invariant ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant y <= 6 is preserved but not established.\nloop invariant ((i == 0 && x == 1 && y == 0) ==> (x == 2 || x == 3)) is partially proven to be inductive.\nloop invariant ((i == 1 && x == 2 && y == 3) ==> (x == 3 || x == 1)) is established but not preserved.\nloop invariant ((i == 2 && x == 3 && y == 4) ==> (x == 1 || x == 2)) is established but not preserved.\nloop invariant ((i == 3 && x == 1 && y == 5) ==> (x == 3 || x == 4)) is established but not preserved.\nloop invariant ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3)) is partially proven to be inductive.\nloop invariant ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1)) is partially proven to be inductive.\nloop invariant ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4)) is partially proven to be inductive.\nloop invariant ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2)) is established but not preserved.\nloop invariant ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4)) is established but not preserved.\nloop invariant ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= 10;\nloop invariant i3: x >= 1;\nloop invariant i4: x <= 4;\n\n\n\n\n\n\nloop invariant i11: ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant i12: ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant i13: ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1));\nloop invariant i14: ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2));\nloop invariant i15: ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4));\n\n\nloop invariant i18: ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2));\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\nloop invariant !(y == 6);\nloop invariant (x == 1 ==> i <= 4);\nloop invariant (x == 2 ==> i <= 5);\nloop invariant (x == 3 ==> i <= 5);\nloop invariant (x == 4 ==> i <= 5);\nloop invariant (x == 1 ==> y == 5);\nloop invariant (x == 2 ==> y == 4);\nloop invariant (x == 3 ==> y == 3);\nloop invariant (x == 4 ==> y == 6);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 3 <= y <= 6 is preserved but not established.\nloop invariant !(y == 6) is preserved but not established.\nloop invariant (x == 1 ==> i <= 4) is established but not preserved.\nloop invariant (x == 2 ==> i <= 5) is partially proven to be inductive.\nloop invariant (x == 3 ==> i <= 5) is established but not preserved.\nloop invariant (x == 4 ==> i <= 5) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 5) is preserved but not established.\nloop invariant (x == 2 ==> y == 4) is established but not preserved.\nloop invariant (x == 3 ==> y == 3) is established but not preserved.\nloop invariant (x == 4 ==> y == 6) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n\n\n\n\nloop invariant i8: (x == 4 ==> i <= 5);\n\n\n\nloop invariant i12: (x == 4 ==> y == 6);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6);\nloop invariant (y == 3 ==> (i == 0));\nloop invariant (y == 4 ==> (i == 1));\nloop invariant (y == 5 ==> (i == 2));\nloop invariant (y == 6 ==> (i == 3));\nloop invariant (y == 3 ==> (x == 1));\nloop invariant (y == 4 ==> (x == 2));\nloop invariant (y == 5 ==> (x == 3));\nloop invariant (y == 6 ==> (x == 4));\nloop invariant (y == 3 ==> (i == 0 ==> x == 1));\nloop invariant (y == 4 ==> (i == 1 ==> x == 2));\nloop invariant (y == 5 ==> (i == 2 ==> x == 3));\nloop invariant (y == 6 ==> (i == 3 ==> x == 4));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6) is preserved but not established.\nloop invariant (y == 3 ==> (i == 0)) is established but not preserved.\nloop invariant (y == 4 ==> (i == 1)) is neither established nor preserved.\nloop invariant (y == 5 ==> (i == 2)) is neither established nor preserved.\nloop invariant (y == 6 ==> (i == 3)) is neither established nor preserved.\nloop invariant (y == 3 ==> (x == 1)) is partially proven to be inductive.\nloop invariant (y == 4 ==> (x == 2)) is partially proven to be inductive.\nloop invariant (y == 5 ==> (x == 3)) is partially proven to be inductive.\nloop invariant (y == 6 ==> (x == 4)) is partially proven to be inductive.\nloop invariant (y == 3 ==> (i == 0 ==> x == 1)) is partially proven to be inductive.\nloop invariant (y == 4 ==> (i == 1 ==> x == 2)) is partially proven to be inductive.\nloop invariant (y == 5 ==> (i == 2 ==> x == 3)) is partially proven to be inductive.\nloop invariant (y == 6 ==> (i == 3 ==> x == 4)) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n\n\n\n\n\n\n\n\nloop invariant i12: (y == 3 ==> (i == 0 ==> x == 1));\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == (1 + (y - 1) * y / 2));\nloop invariant (y == 5) ==> (x == 1);\nloop invariant (y == 4) ==> (x == 2);\nloop invariant (y == 3) ==> (x == 3);\nloop invariant (y == 6) ==> (x == 4);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == (1 + (y - 1) * y / 2)) is neither established nor preserved.\nloop invariant (y == 5) ==> (x == 1) is partially proven to be inductive.\nloop invariant (y == 4) ==> (x == 2) is partially proven to be inductive.\nloop invariant (y == 3) ==> (x == 3) is partially proven to be inductive.\nloop invariant (y == 6) ==> (x == 4) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: (y == 5) ==> (x == 1);\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 6;\nloop invariant x == (i - 1) % 4 + 1;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is preserved but not established.\nloop invariant y == 3 || y == 4 || y == 6 is preserved but not established.\nloop invariant x == (i - 1) % 4 + 1 is preserved but not established.\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2 is partially proven to be inductive.\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 4;\n\n\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is preserved but not established.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 5 || y == 6;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6);\nloop invariant x == 2 || (x == 3 && y == 4);\nloop invariant x == 3 || (x == 2 && y == 3);\nloop invariant x == 4 || (x == 3 && y == 5);\nloop invariant x == 1 || (x == 4 && y == 6);\nloop invariant 1 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant y == 3 || y == 4 || y == 5 || y == 6;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6);\nloop invariant x == 2 || (x == 3 && y == 4);\nloop invariant x == 3 || (x == 2 && y == 3);\nloop invariant x == 4 || (x == 3 && y == 5);\nloop invariant x == 1 || (x == 4 && y == 6);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 10 is preserved but not established.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is partially proven to be inductive.\nloop invariant y == 3 || y == 4 || y == 5 || y == 6 is partially proven to be inductive.\nloop invariant x == 1 || x == 2 || x == 3 || x == 4 is partially proven to be inductive.\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6) is partially proven to be inductive.\nloop invariant x == 2 || (x == 3 && y == 4) is partially proven to be inductive.\nloop invariant x == 3 || (x == 2 && y == 3) is partially proven to be inductive.\nloop invariant x == 4 || (x == 3 && y == 5) is partially proven to be inductive.\nloop invariant x == 1 || (x == 4 && y == 6) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\n\nloop invariant i2: 1 <= x <= 4;\n\n\nloop invariant i5: x == 1 || x == 2 || x == 3 || x == 4;\n\n\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10 && 1 <= x <= 4 && (x == 1 || x == 2 || x == 3 || x == 4) && (y >= 3 && y <= 6);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 && 1 <= x <= 4 && (x == 1 || x == 2 || x == 3 || x == 4) && (y >= 3 && y <= 6) is preserved but not established.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 1) ==> (y == 3);\nloop invariant (x == 2) ==> (y == 4);\nloop invariant (x == 3) ==> (y == 5);\nloop invariant (x == 4) ==> (y == 6);\nloop invariant i < 10 ==> (x != 4);\nloop invariant i < 10 ==> (y != 6);\nloop invariant i == 10 ==> (x == 1);\nloop invariant i == 10 ==> (y == 5);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == 1) ==> (y == 3) is neither established nor preserved.\nloop invariant (x == 2) ==> (y == 4) is established but not preserved.\nloop invariant (x == 3) ==> (y == 5) is established but not preserved.\nloop invariant (x == 4) ==> (y == 6) is partially proven to be inductive.\nloop invariant i < 10 ==> (x != 4) is partially proven to be inductive.\nloop invariant i < 10 ==> (y != 6) is partially proven to be inductive.\nloop invariant i == 10 ==> (x == 1) is established but not preserved.\nloop invariant i == 10 ==> (y == 5) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\n\nloop invariant i5: (x == 4) ==> (y == 6);\nloop invariant i6: i < 10 ==> (x != 4);\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant (y != 6) ==> (y == 1 || y == 2 || y == 3 || y == 4);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is preserved but not established.\nloop invariant (y != 6) ==> (y == 1 || y == 2 || y == 3 || y == 4) is neither established nor preserved.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 1 ==> y == 3;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 3 ==> y == 5;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 2;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 1;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 3;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\nloop invariant x == 4 ==> x != 1;\nloop invariant x == 1 ==> x != 2;\nloop invariant x == 2 ==> x != 3;\nloop invariant x == 3 ==> x != 4;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x == 1 ==> y == 3 is neither established nor preserved.\nloop invariant x == 2 ==> y == 4 is established but not preserved.\nloop invariant x == 3 ==> y == 5 is established but not preserved.\nloop invariant x == 4 ==> y == 6 is partially proven to be inductive.\nloop invariant x == 2 ==> x != 3 is partially proven to be inductive.\nloop invariant x == 3 ==> x != 4 is partially proven to be inductive.\nloop invariant x == 4 ==> x != 1 is partially proven to be inductive.\nloop invariant x == 1 ==> x != 2 is partially proven to be inductive.\nloop invariant x == 2 ==> x != 1 is partially proven to be inductive.\nloop invariant x == 3 ==> x != 2 is partially proven to be inductive.\nloop invariant x == 4 ==> x != 3 is partially proven to be inductive.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\n\nloop invariant i5: x == 4 ==> y == 6;\nloop invariant i6: x == 2 ==> x != 3;\nloop invariant i7: x == 3 ==> x != 4;\nloop invariant i8: x == 4 ==> x != 1;\nloop invariant i9: x == 1 ==> x != 2;\nloop invariant i10: x == 2 ==> x != 1;\nloop invariant i11: x == 3 ==> x != 2;\nloop invariant i12: x == 4 ==> x != 3;\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 13,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= 10;\nloop invariant (i == 0) ==> (x == 1);\nloop invariant (i == 1) ==> (x == 2);\nloop invariant (i == 2) ==> (x == 3);\nloop invariant (i == 3) ==> (x == 1);\nloop invariant (i == 4) ==> (x == 2);\nloop invariant (i == 5) ==> (x == 3);\nloop invariant (i == 6) ==> (x == 1);\nloop invariant (i == 7) ==> (x == 2);\nloop invariant (i == 8) ==> (x == 3);\nloop invariant (i == 9) ==> (x == 1);\nloop invariant (i == 10) ==> (x == 2);\nloop invariant (i == 0) ==> (y == 0);\nloop invariant (i == 1) ==> (y == 3);\nloop invariant (i == 2) ==> (y == 4);\nloop invariant (i == 3) ==> (y == 5);\nloop invariant (i == 4) ==> (y == 6);\nloop invariant (i == 5) ==> (y == 7);\nloop invariant (i == 6) ==> (y == 8);\nloop invariant (i == 7) ==> (y == 9);\nloop invariant (i == 8) ==> (y == 10);\nloop invariant (i == 9) ==> (y == 11);\nloop invariant (i == 10) ==> (y == 12);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 10 is preserved but not established.\nloop invariant (i == 0) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 1) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 2) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 3) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 4) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 5) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 6) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 7) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 8) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 9) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 10) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 0) ==> (y == 0) is partially proven to be inductive.\nloop invariant (i == 1) ==> (y == 3) is partially proven to be inductive.\nloop invariant (i == 2) ==> (y == 4) is partially proven to be inductive.\nloop invariant (i == 3) ==> (y == 5) is partially proven to be inductive.\nloop invariant (i == 4) ==> (y == 6) is partially proven to be inductive.\nloop invariant (i == 5) ==> (y == 7) is partially proven to be inductive.\nloop invariant (i == 6) ==> (y == 8) is partially proven to be inductive.\nloop invariant (i == 7) ==> (y == 9) is partially proven to be inductive.\nloop invariant (i == 8) ==> (y == 10) is partially proven to be inductive.\nloop invariant (i == 9) ==> (y == 11) is partially proven to be inductive.\nloop invariant (i == 10) ==> (y == 12) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == 1 || x == 2 || x == 3) is partially proven to be inductive.\nloop invariant (y == 3 || y == 4 || y == 5 || y == 6) is preserved but not established.\nloop invariant (x == 1 || x == 2 || x == 3 || x == 4) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 3) is preserved but not established.\nloop invariant (x == 2 ==> y == 4) is partially proven to be inductive.\nloop invariant (x == 3 ==> y == 5) is partially proven to be inductive.\nloop invariant (x == 4 ==> y == 6) is partially proven to be inductive.\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2) is partially proven to be inductive.\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 3 ==> i == 0) is partially proven to be inductive.\nloop invariant (x == 2 ==> y == 4 ==> i == 1) is partially proven to be inductive.\nloop invariant (x == 3 ==> y == 5 ==> i == 2) is partially proven to be inductive.\nloop invariant (x == 4 ==> y == 6 ==> i == 3) is partially proven to be inductive.\nloop invariant (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4) is partially proven to be inductive.\nloop invariant (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5) is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant i <= 10 is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant y <= 6 is partially proven to be inductive.\nloop invariant ((i == 0 && x == 1 && y == 0) ==> (x == 2 || x == 3)) is partially proven to be inductive.\nloop invariant ((i == 1 && x == 2 && y == 3) ==> (x == 3 || x == 1)) is partially proven to be inductive.\nloop invariant ((i == 2 && x == 3 && y == 4) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 3 && x == 1 && y == 5) ==> (x == 3 || x == 4)) is partially proven to be inductive.\nloop invariant ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3)) is partially proven to be inductive.\nloop invariant ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1)) is partially proven to be inductive.\nloop invariant ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4)) is partially proven to be inductive.\nloop invariant ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4)) is partially proven to be inductive.\nloop invariant ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2)) is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 3 <= y <= 6 is partially proven to be inductive.\nloop invariant !(y == 6) is partially proven to be inductive.\nloop invariant (x == 1 ==> i <= 4) is partially proven to be inductive.\nloop invariant (x == 2 ==> i <= 5) is partially proven to be inductive.\nloop invariant (x == 3 ==> i <= 5) is partially proven to be inductive.\nloop invariant (x == 4 ==> i <= 5) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 5) is preserved but not established.\nloop invariant (x == 3 ==> y == 3) is partially proven to be inductive.\nloop invariant (y == 3 ==> (i == 0)) is partially proven to be inductive.\nloop invariant (y == 4 ==> (i == 1)) is partially proven to be inductive.\nloop invariant (y == 5 ==> (i == 2)) is partially proven to be inductive.\nloop invariant (y == 6 ==> (i == 3)) is partially proven to be inductive.\nloop invariant (y == 3 ==> (x == 1)) is partially proven to be inductive.\nloop invariant (y == 4 ==> (x == 2)) is partially proven to be inductive.\nloop invariant (y == 5 ==> (x == 3)) is partially proven to be inductive.\nloop invariant (y == 6 ==> (x == 4)) is partially proven to be inductive.\nloop invariant (y == 3 ==> (i == 0 ==> x == 1)) is partially proven to be inductive.\nloop invariant (y == 4 ==> (i == 1 ==> x == 2)) is partially proven to be inductive.\nloop invariant (y == 5 ==> (i == 2 ==> x == 3)) is partially proven to be inductive.\nloop invariant (y == 6 ==> (i == 3 ==> x == 4)) is partially proven to be inductive.\nloop invariant (x == (1 + (y - 1) * y / 2)) is partially proven to be inductive.\nloop invariant (y == 5) ==> (x == 1) is partially proven to be inductive.\nloop invariant (y == 4) ==> (x == 2) is partially proven to be inductive.\nloop invariant (y == 3) ==> (x == 3) is partially proven to be inductive.\nloop invariant (y == 6) ==> (x == 4) is partially proven to be inductive.\nloop invariant 0 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is partially proven to be inductive.\nloop invariant y == 3 || y == 4 || y == 6 is partially proven to be inductive.\nloop invariant x == (i - 1) % 4 + 1 is partially proven to be inductive.\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2 is partially proven to be inductive.\nloop invariant y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 is partially proven to be inductive.\nloop invariant 1 <= i <= 10 is partially proven to be inductive.\nloop invariant y == 3 || y == 4 || y == 5 || y == 6 is partially proven to be inductive.\nloop invariant x == 1 || x == 2 || x == 3 || x == 4 is partially proven to be inductive.\nloop invariant y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6) is partially proven to be inductive.\nloop invariant x == 2 || (x == 3 && y == 4) is partially proven to be inductive.\nloop invariant x == 3 || (x == 2 && y == 3) is partially proven to be inductive.\nloop invariant x == 4 || (x == 3 && y == 5) is partially proven to be inductive.\nloop invariant x == 1 || (x == 4 && y == 6) is partially proven to be inductive.\nloop invariant 0 <= i <= 10 && 1 <= x <= 4 && (x == 1 || x == 2 || x == 3 || x == 4) && (y >= 3 && y <= 6) is partially proven to be inductive.\nloop invariant (x == 1) ==> (y == 3) is partially proven to be inductive.\nloop invariant (x == 2) ==> (y == 4) is partially proven to be inductive.\nloop invariant (x == 3) ==> (y == 5) is partially proven to be inductive.\nloop invariant (x == 4) ==> (y == 6) is partially proven to be inductive.\nloop invariant i < 10 ==> (x != 4) is partially proven to be inductive.\nloop invariant i < 10 ==> (y != 6) is partially proven to be inductive.\nloop invariant i == 10 ==> (x == 1) is partially proven to be inductive.\nloop invariant i == 10 ==> (y == 5) is partially proven to be inductive.\nloop invariant (y != 6) ==> (y == 1 || y == 2 || y == 3 || y == 4) is partially proven to be inductive.\nloop invariant x == 1 ==> y == 3 is partially proven to be inductive.\nloop invariant x == 2 ==> y == 4 is partially proven to be inductive.\nloop invariant x == 3 ==> y == 5 is partially proven to be inductive.\nloop invariant x == 4 ==> y == 6 is partially proven to be inductive.\nloop invariant x == 2 ==> x != 3 is partially proven to be inductive.\nloop invariant x == 3 ==> x != 4 is partially proven to be inductive.\nloop invariant x == 4 ==> x != 1 is partially proven to be inductive.\nloop invariant x == 1 ==> x != 2 is partially proven to be inductive.\nloop invariant x == 2 ==> x != 1 is partially proven to be inductive.\nloop invariant x == 3 ==> x != 2 is partially proven to be inductive.\nloop invariant x == 4 ==> x != 3 is partially proven to be inductive.\nloop invariant (i == 0) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 1) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 2) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 3) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 4) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 5) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 6) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 7) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 8) ==> (x == 3) is partially proven to be inductive.\nloop invariant (i == 9) ==> (x == 1) is partially proven to be inductive.\nloop invariant (i == 10) ==> (x == 2) is partially proven to be inductive.\nloop invariant (i == 0) ==> (y == 0) is partially proven to be inductive.\nloop invariant (i == 1) ==> (y == 3) is partially proven to be inductive.\nloop invariant (i == 2) ==> (y == 4) is partially proven to be inductive.\nloop invariant (i == 3) ==> (y == 5) is partially proven to be inductive.\nloop invariant (i == 4) ==> (y == 6) is partially proven to be inductive.\nloop invariant (i == 5) ==> (y == 7) is partially proven to be inductive.\nloop invariant (i == 6) ==> (y == 8) is partially proven to be inductive.\nloop invariant (i == 7) ==> (y == 9) is partially proven to be inductive.\nloop invariant (i == 8) ==> (y == 10) is partially proven to be inductive.\nloop invariant (i == 9) ==> (y == 11) is partially proven to be inductive.\nloop invariant (i == 10) ==> (y == 12) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: (x == 1 || x == 2 || x == 3);\nloop invariant i3: (y == 3 || y == 4 || y == 5 || y == 6);\nloop invariant i4: (x == 1 || x == 2 || x == 3 || x == 4);\nloop invariant i5: (x == 1 ==> y == 3);\nloop invariant i6: (x == 2 ==> y == 4);\nloop invariant i7: (x == 3 ==> y == 5);\nloop invariant i8: (x == 4 ==> y == 6);\nloop invariant i9: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2);\nloop invariant i10: (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6);\nloop invariant i11: (x == 1 ==> y == 3 ==> i == 0);\nloop invariant i12: (x == 2 ==> y == 4 ==> i == 1);\nloop invariant i13: (x == 3 ==> y == 5 ==> i == 2);\nloop invariant i14: (x == 4 ==> y == 6 ==> i == 3);\nloop invariant i15: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4);\nloop invariant i16: (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5);\nloop invariant i17: i >= 0;\nloop invariant i18: i <= 10;\nloop invariant i19: x >= 1;\nloop invariant i20: x <= 4;\nloop invariant i21: y >= 1;\nloop invariant i22: y <= 6;\nloop invariant i23: ((i == 0 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant i24: ((i == 1 && x == 2 && y == 3) ==> (x == 3 || x == 1));\nloop invariant i25: ((i == 2 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant i26: ((i == 3 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant i27: ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant i28: ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant i29: ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1));\nloop invariant i30: ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2));\nloop invariant i31: ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4));\nloop invariant i32: ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant i33: ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant i34: ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant i35: 1 <= x <= 4;\nloop invariant i36: 3 <= y <= 6;\nloop invariant i37: !(y == 6);\nloop invariant i38: (x == 1 ==> i <= 4);\nloop invariant i39: (x == 2 ==> i <= 5);\nloop invariant i40: (x == 3 ==> i <= 5);\nloop invariant i41: (x == 4 ==> i <= 5);\nloop invariant i42: (x == 1 ==> y == 5);\nloop invariant i43: (x == 3 ==> y == 3);\nloop invariant i44: (y == 3 ==> (i == 0));\nloop invariant i45: (y == 4 ==> (i == 1));\nloop invariant i46: (y == 5 ==> (i == 2));\nloop invariant i47: (y == 6 ==> (i == 3));\nloop invariant i48: (y == 3 ==> (x == 1));\nloop invariant i49: (y == 4 ==> (x == 2));\nloop invariant i50: (y == 5 ==> (x == 3));\nloop invariant i51: (y == 6 ==> (x == 4));\nloop invariant i52: (y == 3 ==> (i == 0 ==> x == 1));\nloop invariant i53: (y == 4 ==> (i == 1 ==> x == 2));\nloop invariant i54: (y == 5 ==> (i == 2 ==> x == 3));\nloop invariant i55: (y == 6 ==> (i == 3 ==> x == 4));\nloop invariant i56: (x == (1 + (y - 1) * y / 2));\nloop invariant i57: (y == 5) ==> (x == 1);\nloop invariant i58: (y == 4) ==> (x == 2);\nloop invariant i59: (y == 3) ==> (x == 3);\nloop invariant i60: (y == 6) ==> (x == 4);\nloop invariant i61: 0 <= x <= 4;\nloop invariant i62: 1 <= y <= 6;\nloop invariant i63: y == 3 || y == 4 || y == 6;\nloop invariant i64: x == (i - 1) % 4 + 1;\nloop invariant i65: y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6 || y == (i - 1) % 4 + 1 || y == (i - 1) % 4 + 2;\nloop invariant i66: y == (i - 1) % 4 + 2 || y == (i - 1) % 4 + 3 || y == (i - 1) % 4 + 5 || y == (i - 1) % 4 + 6;\nloop invariant i67: 1 <= i <= 10;\nloop invariant i68: y == 3 || y == 4 || y == 5 || y == 6;\nloop invariant i69: x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant i70: y == 3 || (x == 1 && y == 5) || (x == 4 && y == 6);\nloop invariant i71: x == 2 || (x == 3 && y == 4);\nloop invariant i72: x == 3 || (x == 2 && y == 3);\nloop invariant i73: x == 4 || (x == 3 && y == 5);\nloop invariant i74: x == 1 || (x == 4 && y == 6);\nloop invariant i75: 0 <= i <= 10 && 1 <= x <= 4 && (x == 1 || x == 2 || x == 3 || x == 4) && (y >= 3 && y <= 6);\nloop invariant i76: (x == 1) ==> (y == 3);\nloop invariant i77: (x == 2) ==> (y == 4);\nloop invariant i78: (x == 3) ==> (y == 5);\nloop invariant i79: (x == 4) ==> (y == 6);\nloop invariant i80: i < 10 ==> (x != 4);\nloop invariant i81: i < 10 ==> (y != 6);\nloop invariant i82: i == 10 ==> (x == 1);\nloop invariant i83: i == 10 ==> (y == 5);\nloop invariant i84: (y != 6) ==> (y == 1 || y == 2 || y == 3 || y == 4);\nloop invariant i85: x == 1 ==> y == 3;\nloop invariant i86: x == 2 ==> y == 4;\nloop invariant i87: x == 3 ==> y == 5;\nloop invariant i88: x == 4 ==> y == 6;\nloop invariant i89: x == 2 ==> x != 3;\nloop invariant i90: x == 3 ==> x != 4;\nloop invariant i91: x == 4 ==> x != 1;\nloop invariant i92: x == 1 ==> x != 2;\nloop invariant i93: x == 2 ==> x != 1;\nloop invariant i94: x == 3 ==> x != 2;\nloop invariant i95: x == 4 ==> x != 3;\nloop invariant i96: (i == 0) ==> (x == 1);\nloop invariant i97: (i == 1) ==> (x == 2);\nloop invariant i98: (i == 2) ==> (x == 3);\nloop invariant i99: (i == 3) ==> (x == 1);\nloop invariant i100: (i == 4) ==> (x == 2);\nloop invariant i101: (i == 5) ==> (x == 3);\nloop invariant i102: (i == 6) ==> (x == 1);\nloop invariant i103: (i == 7) ==> (x == 2);\nloop invariant i104: (i == 8) ==> (x == 3);\nloop invariant i105: (i == 9) ==> (x == 1);\nloop invariant i106: (i == 10) ==> (x == 2);\nloop invariant i107: (i == 0) ==> (y == 0);\nloop invariant i108: (i == 1) ==> (y == 3);\nloop invariant i109: (i == 2) ==> (y == 4);\nloop invariant i110: (i == 3) ==> (y == 5);\nloop invariant i111: (i == 4) ==> (y == 6);\nloop invariant i112: (i == 5) ==> (y == 7);\nloop invariant i113: (i == 6) ==> (y == 8);\nloop invariant i114: (i == 7) ==> (y == 9);\nloop invariant i115: (i == 8) ==> (y == 10);\nloop invariant i116: (i == 9) ==> (y == 11);\nloop invariant i117: (i == 10) ==> (y == 12);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 27,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: (x == 1 || x == 2 || x == 3);\n\nloop invariant i4: (x == 1 || x == 2 || x == 3 || x == 4);\n\n\n\nloop invariant i8: (x == 4 ==> y == 6);\nloop invariant i9: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2);\n\nloop invariant i11: (x == 1 ==> y == 3 ==> i == 0);\nloop invariant i12: (x == 2 ==> y == 4 ==> i == 1);\nloop invariant i13: (x == 3 ==> y == 5 ==> i == 2);\nloop invariant i14: (x == 4 ==> y == 6 ==> i == 3);\nloop invariant i15: (x != 1 ==> x != 2 ==> x != 3 ==> x != 4 ==> x == 2 ==> i == 4);\nloop invariant i16: (y != 3 ==> y != 4 ==> y != 5 ==> y != 6 ==> y == 6 ==> i == 5);\nloop invariant i17: i >= 0;\nloop invariant i18: i <= 10;\nloop invariant i19: x >= 1;\nloop invariant i20: x <= 4;\n\n\n\n\n\n\nloop invariant i27: ((i == 4 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant i28: ((i == 5 && x == 1 && y == 0) ==> (x == 2 || x == 3));\nloop invariant i29: ((i == 6 && x == 2 && y == 1) ==> (x == 3 || x == 1));\nloop invariant i30: ((i == 7 && x == 3 && y == 2) ==> (x == 1 || x == 2));\nloop invariant i31: ((i == 8 && x == 1 && y == 3) ==> (x == 3 || x == 4));\nloop invariant i32: ((i == 9 && x == 3 && y == 4) ==> (x == 1 || x == 2));\nloop invariant i33: ((i == 10 && x == 1 && y == 5) ==> (x == 3 || x == 4));\nloop invariant i34: ((i == 11 && x == 3 && y == 6) ==> (x == 1 || x == 2));\nloop invariant i35: 1 <= x <= 4;\n\n\n\n\n\nloop invariant i41: (x == 4 ==> i <= 5);\n\n\n\n\n\n\n\n\n\n\nloop invariant i52: (y == 3 ==> (i == 0 ==> x == 1));\nloop invariant i53: (y == 4 ==> (i == 1 ==> x == 2));\nloop invariant i54: (y == 5 ==> (i == 2 ==> x == 3));\nloop invariant i55: (y == 6 ==> (i == 3 ==> x == 4));\n\nloop invariant i57: (y == 5) ==> (x == 1);\n\n\n\nloop invariant i61: 0 <= x <= 4;\n\n\n\n\n\n\n\nloop invariant i69: x == 1 || x == 2 || x == 3 || x == 4;\n\n\n\n\n\n\n\n\n\nloop invariant i79: (x == 4) ==> (y == 6);\nloop invariant i80: i < 10 ==> (x != 4);\n\n\n\n\n\n\n\nloop invariant i88: x == 4 ==> y == 6;\nloop invariant i89: x == 2 ==> x != 3;\nloop invariant i90: x == 3 ==> x != 4;\nloop invariant i91: x == 4 ==> x != 1;\nloop invariant i92: x == 1 ==> x != 2;\nloop invariant i93: x == 2 ==> x != 1;\nloop invariant i94: x == 3 ==> x != 2;\nloop invariant i95: x == 4 ==> x != 3;\nloop invariant i96: (i == 0) ==> (x == 1);\nloop invariant i97: (i == 1) ==> (x == 2);\nloop invariant i98: (i == 2) ==> (x == 3);\nloop invariant i99: (i == 3) ==> (x == 1);\nloop invariant i100: (i == 4) ==> (x == 2);\nloop invariant i101: (i == 5) ==> (x == 3);\nloop invariant i102: (i == 6) ==> (x == 1);\nloop invariant i103: (i == 7) ==> (x == 2);\nloop invariant i104: (i == 8) ==> (x == 3);\nloop invariant i105: (i == 9) ==> (x == 1);\nloop invariant i106: (i == 10) ==> (x == 2);\n\nloop invariant i108: (i == 1) ==> (y == 3);\nloop invariant i109: (i == 2) ==> (y == 4);\nloop invariant i110: (i == 3) ==> (y == 5);\n\n\n\n\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/code2inv/65.c"
        ],
        "failure": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 4,
        "success_count": 1,
        "failure_count": 3,
        "success_rate": 0.25
    }
}