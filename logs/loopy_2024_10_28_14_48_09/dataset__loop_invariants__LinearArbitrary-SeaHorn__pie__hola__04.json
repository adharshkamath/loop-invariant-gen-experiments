{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  while( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x >= (-50 + y);\nloop invariant y >= 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= x;\nloop invariant x + y < 0 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0;\nloop invariant x + y < 0 ==> y > 0 ==> x < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> x >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x;\nloop invariant x + y < 0 ==> y > 0 ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y >= 0 ==> x >= y);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y >= 0 ==> x >= y);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x+y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant - x >= -50;\nloop invariant - y >= 0;\nloop invariant - y <= 100000;\nloop invariant - x >= -50 + y * (y - 1) / 2;\nloop invariant - x <= -50 + y * (y - 1) / 2 + y;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant -50 <= y <= 0;\nloop invariant y <= x <= -50;\nloop invariant y >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 200;\nloop invariant y > 0;\nloop invariant x <= y;\nloop invariant x >= y - 1;\nloop invariant x >= -50;\nloop invariant x <= -50 + y;\nloop invariant x >= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\n*/\n```",
            "```\n/*@\nloop invariant i1; loop invariant i2;\nloop invariant i1; loop invariant i2;\n*/\n```",
            "```\n/*@\nloop invariant 0 < y <= 50;\nloop invariant -50 + (y - 1) * y / 2 <= x < -50 + y * y / 2;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x >= (-50 + y);\nloop invariant y >= 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= y is preserved but not established.\nloop invariant 0 <= y <= INT_MAX is partially proven to be inductive.\nloop invariant x >= (-50 + y) is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= x;\nloop invariant x + y < 0 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0;\nloop invariant x + y < 0 ==> y > 0 ==> x < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> x >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x;\nloop invariant x + y < 0 ==> y > 0 ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant 0 <= y <= x is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> x < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> x >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> x + y < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x + y >= 0 ==> y <= 0 ==> x >= -50;\n\nloop invariant i8: x + y >= 0 ==> y <= 0 ==> y >= x;\n\nloop invariant i10: x + y >= 0 ==> y <= 0 ==> x + y >= -50;\nloop invariant i11: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i12: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i13: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i14: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant i15: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50;\nloop invariant i16: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50;\nloop invariant i17: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x;\nloop invariant i18: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x;\nloop invariant i19: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i20: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i21: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i22: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y >= 0 ==> x >= y);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y >= 0 ==> x >= y);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant (y >= 0 ==> x >= y) is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x+y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x+y >= 0 is preserved but not established.\nAssertion y > 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant - x >= -50;\nloop invariant - y >= 0;\nloop invariant - y <= 100000;\nloop invariant - x >= -50 + y * (y - 1) / 2;\nloop invariant - x <= -50 + y * (y - 1) / 2 + y;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant - x >= -50 is partially proven to be inductive.\nloop invariant - y >= 0 is preserved but not established.\nloop invariant - y <= 100000 is preserved but not established.\nloop invariant - x >= -50 + y * (y - 1) / 2 is preserved but not established.\nloop invariant - x <= -50 + y * (y - 1) / 2 + y is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant -50 <= y <= 0;\nloop invariant y <= x <= -50;\nloop invariant y >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant -50 <= y <= 0 is partially proven to be inductive.\nloop invariant y <= x <= -50 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 200;\nloop invariant y > 0;\nloop invariant x <= y;\nloop invariant x >= y - 1;\nloop invariant x >= -50;\nloop invariant x <= -50 + y;\nloop invariant x >= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant 0 <= y <= 200 is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x >= y - 1 is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x <= -50 + y is partially proven to be inductive.\nloop invariant x >= -50 + y - 1 is partially proven to be inductive.\nloop invariant x >= -50 + y - 2 is partially proven to be inductive.\nloop invariant x <= -50 + y - 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant i1; loop invariant i2;\nloop invariant i1; loop invariant i2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 < y <= 50;\nloop invariant -50 + (y - 1) * y / 2 <= x < -50 + y * y / 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 < y <= 50 is preserved but not established.\nloop invariant -50 + (y - 1) * y / 2 <= x < -50 + y * y / 2 is preserved but not established.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 64: unbound logic variable i1. Ignoring loop annotation",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: 0 <= x <= y;\nloop invariant i4: 0 <= y <= INT_MAX;\nloop invariant i5: x >= (-50 + y);\nloop invariant i6: y >= 1;\nloop invariant i7: 0 <= x <= -50;\nloop invariant i8: 0 <= y <= x;\nloop invariant i9: x + y < 0 ==> y > 0;\nloop invariant i10: x + y >= 0 ==> y <= 0;\nloop invariant i11: x + y < 0 ==> y > 0 ==> x < -50;\nloop invariant i12: x + y >= 0 ==> y <= 0 ==> x >= -50;\nloop invariant i13: x + y < 0 ==> y > 0 ==> y < x;\nloop invariant i14: x + y >= 0 ==> y <= 0 ==> y >= x;\nloop invariant i15: x + y < 0 ==> y > 0 ==> x + y < -50;\nloop invariant i16: x + y >= 0 ==> y <= 0 ==> x + y >= -50;\nloop invariant i17: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i18: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i19: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i20: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant i21: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50;\nloop invariant i22: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50;\nloop invariant i23: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x;\nloop invariant i24: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x;\nloop invariant i25: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i26: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i27: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i28: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant i29: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i30: (y >= 0 ==> x >= y);\nloop invariant i31: 0 <= y;\nloop invariant i32: x >= -50;\nloop invariant i33: x+y >= 0;\nloop invariant i34: - x >= -50;\nloop invariant i35: - y >= 0;\nloop invariant i36: - y <= 100000;\nloop invariant i37: - x >= -50 + y * (y - 1) / 2;\nloop invariant i38: - x <= -50 + y * (y - 1) / 2 + y;\nloop invariant i39: -50 <= y <= 0;\nloop invariant i40: y <= x <= -50;\nloop invariant i41: y >= 0;\nloop invariant i42: 0 <= y <= 200;\nloop invariant i43: y > 0;\nloop invariant i44: x <= y;\nloop invariant i45: x >= y - 1;\nloop invariant i46: x <= -50 + y;\nloop invariant i47: x >= -50 + y - 1;\nloop invariant i48: x >= -50 + y - 2;\nloop invariant i49: x <= -50 + y - 1;\nloop invariant i50: i1; loop invariant i2;\nloop invariant i51: 0 < y <= 50;\nloop invariant i52: -50 + (y - 1) * y / 2 <= x < -50 + y * y / 2;\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 18,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: x + y >= 0 ==> y <= 0 ==> x >= -50;\n\nloop invariant i14: x + y >= 0 ==> y <= 0 ==> y >= x;\n\nloop invariant i16: x + y >= 0 ==> y <= 0 ==> x + y >= -50;\nloop invariant i17: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i18: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i19: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i20: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant i21: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50;\nloop invariant i22: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50;\nloop invariant i23: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x;\nloop invariant i24: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x;\nloop invariant i25: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i26: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i27: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i28: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c"
        ],
        "skipped": [],
        "total": 3,
        "success_count": 0,
        "failure_count": 3,
        "success_rate": 0.0
    }
}