{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= a;\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= a * n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == (a * i);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = i * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n * a ==> i == n;\nloop invariant i == 0 ==> sn == 0;\nloop invariant i == n ==> sn == n * a;\nloop invariant sn == i * a ==> v1 == unknown_int();\nloop invariant sn == i * a ==> v2 == unknown_int();\nloop invariant sn == i * a ==> v3 == unknown_int();\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> 0 <= sn <= n * a;\nloop invariant sn == i * a ==> 0 <= v1 <= INT_MAX;\nloop invariant sn == i * a ==> 0 <= v2 <= INT_MAX;\nloop invariant sn == i * a ==> 0 <= v3 <= INT_MAX;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= a*n;\nloop invariant i >= 1;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= sn <= n*a;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == (n*a) ==> v1+v2+v3 <= n*a;\nloop invariant sn == 0 ==> v1+v2+v3 >= 0;\nloop invariant sn == (n*a) ==> v1+v2+v3 >= t;\nloop invariant sn == 0 ==> v1+v2+v3 <= t;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n*a;\nloop invariant 1 <= i <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == i*a - a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant i == unknown_int() || i == 1;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == 0;\nloop invariant sn == unknown_int() || sn == n*a;\nloop invariant v1 == unknown_int() || v1 == 1;\nloop invariant v2 == unknown_int() || v2 == 1;\nloop invariant v3 == unknown_int() || v3 == 1;\nloop invariant i == unknown_int() || i == n;\nloop invariant sn == unknown_int() || sn == n*a - a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+1;\nloop invariant sn == unknown_int() || sn == n*a;\nloop invariant v1 == unknown_int() || v1 == 1;\nloop invariant v2 == unknown_int() || v2 == 1;\nloop invariant v3 == unknown_int() || v3 == 1;\nloop invariant i == unknown_int() || i == -1;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+2;\nloop invariant sn == unknown_int() || sn == n*a - a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -2;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+3;\nloop invariant sn == unknown_int() || sn == n*a - 2*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -3;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+4;\nloop invariant sn == unknown_int() || sn == n*a - 3*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -4;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+5;\nloop invariant sn == unknown_int() || sn == n*a - 4*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -5;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= a <= 1;\nloop invariant sn + a = sn + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn == i*a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant sn >= 0;\nloop invariant sn == n * a;\nloop invariant sn == 0;\nloop invariant sn == (n * a) || sn == 0;\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant v1 == 0 && v2 == 0 && v3 == 0;\nloop invariant i%2 == 0 && sn%2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n * a ==> i == n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == i * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == n * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == i;\nloop invariant a == 1 ==> sn == 0 ==> i == 0;\nloop invariant a == 1 ==> sn == n ==> i == n;\nloop invariant a == 1 ==> sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n ==> i == n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\n*/\n```",
            "```\n/*@\nloop invariant i = n;\nloop invariant sn = n*a;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant i == n;\nloop invariant sn == n*a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant a == 1;\nloop invariant sn == i * a ==> (sn == n * a || sn == 0);\nloop invariant i * a == n * a ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a ==> (sn == n * a || sn == 0);\nloop invariant sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= a;\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= a * n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == (a * i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= a is partially proven to be inductive.\nloop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= a * n is partially proven to be inductive.\nloop invariant 0 <= v1 is preserved but not established.\nloop invariant 0 <= v2 is preserved but not established.\nloop invariant 0 <= v3 is preserved but not established.\nloop invariant sn == (a * i) is preserved but not established.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 1 <= a;\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = i * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n * a ==> i == n;\nloop invariant i == 0 ==> sn == 0;\nloop invariant i == n ==> sn == n * a;\nloop invariant sn == i * a ==> v1 == unknown_int();\nloop invariant sn == i * a ==> v2 == unknown_int();\nloop invariant sn == i * a ==> v3 == unknown_int();\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> 0 <= sn <= n * a;\nloop invariant sn == i * a ==> 0 <= v1 <= INT_MAX;\nloop invariant sn == i * a ==> 0 <= v2 <= INT_MAX;\nloop invariant sn == i * a ==> 0 <= v3 <= INT_MAX;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i14: sn == i * a ==> sn == i * a;\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= a*n;\nloop invariant i >= 1;\nloop invariant i <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= a*n is neither established nor preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is neither established nor preserved.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: i >= 1;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= sn <= n*a;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == (n*a) ==> v1+v2+v3 <= n*a;\nloop invariant sn == 0 ==> v1+v2+v3 >= 0;\nloop invariant sn == (n*a) ==> v1+v2+v3 >= t;\nloop invariant sn == 0 ==> v1+v2+v3 <= t;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 21: unbound logic variable t. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 31,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n*a;\nloop invariant 1 <= i <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == i*a - a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant i == unknown_int() || i == 1;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == 0;\nloop invariant sn == unknown_int() || sn == n*a;\nloop invariant v1 == unknown_int() || v1 == 1;\nloop invariant v2 == unknown_int() || v2 == 1;\nloop invariant v3 == unknown_int() || v3 == 1;\nloop invariant i == unknown_int() || i == n;\nloop invariant sn == unknown_int() || sn == n*a - a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+1;\nloop invariant sn == unknown_int() || sn == n*a;\nloop invariant v1 == unknown_int() || v1 == 1;\nloop invariant v2 == unknown_int() || v2 == 1;\nloop invariant v3 == unknown_int() || v3 == 1;\nloop invariant i == unknown_int() || i == -1;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+2;\nloop invariant sn == unknown_int() || sn == n*a - a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -2;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+3;\nloop invariant sn == unknown_int() || sn == n*a - 2*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -3;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+4;\nloop invariant sn == unknown_int() || sn == n*a - 3*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -4;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+5;\nloop invariant sn == unknown_int() || sn == n*a - 4*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -5;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\nloop invariant i6: sn == i*a - a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= a <= 1;\nloop invariant sn + a = sn + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: 0 <= a <= 1;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn == i*a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 31: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: v1 >= INT_MIN;\nloop invariant i6: v1 <= INT_MAX;\nloop invariant i7: v2 >= INT_MIN;\nloop invariant i8: v2 <= INT_MAX;\nloop invariant i9: v3 >= INT_MIN;\nloop invariant i10: v3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant sn >= 0;\nloop invariant sn == n * a;\nloop invariant sn == 0;\nloop invariant sn == (n * a) || sn == 0;\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= n * a is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == n * a is preserved but not established.\nloop invariant sn == 0 is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\nloop invariant i6: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i7: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i8: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i9: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i10: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i11: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i12: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i13: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i14: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i15: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant v1 == 0 && v2 == 0 && v3 == 0;\nloop invariant i%2 == 0 && sn%2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nloop invariant v1 == 0 && v2 == 0 && v3 == 0 is partially proven to be inductive.\nloop invariant i%2 == 0 && sn%2 == 0 is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 111,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 9,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n * a ==> i == n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == i * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == n * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == i;\nloop invariant a == 1 ==> sn == 0 ==> i == 0;\nloop invariant a == 1 ==> sn == n ==> i == n;\nloop invariant a == 1 ==> sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n ==> i == n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nloop invariant sn == 0 ==> i == 0 is partially proven to be inductive.\nloop invariant sn == n * a ==> i == n is partially proven to be inductive.\nloop invariant 0 <= v1 is partially proven to be inductive.\nloop invariant 0 <= v2 is partially proven to be inductive.\nloop invariant 0 <= v3 is partially proven to be inductive.\nloop invariant sn == i * a ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant sn == n * a ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant a == 1 ==> sn == i is partially proven to be inductive.\nloop invariant a == 1 ==> sn == 0 ==> i == 0 is partially proven to be inductive.\nloop invariant a == 1 ==> sn == n ==> i == n is partially proven to be inductive.\nloop invariant a == 1 ==> sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant a == 1 ==> sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant a == 1 ==> sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant sn == i is partially proven to be inductive.\nloop invariant sn == n ==> i == n is partially proven to be inductive.\nloop invariant sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "```\n/*@\nloop invariant i = n;\nloop invariant sn = n*a;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant i == n;\nloop invariant sn == n*a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant a == 1;\nloop invariant sn == i * a ==> (sn == n * a || sn == 0);\nloop invariant i * a == n * a ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a ==> (sn == n * a || sn == 0);\nloop invariant sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\nloop invariant i7: a == 1;\n\n\nloop invariant i10: sn == n * a ==> (sn == n * a || sn == 0);\nloop invariant i11: sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i12: sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 1 <= a;\nloop invariant i2: 0 <= n;\nloop invariant i3: 0 <= i <= n;\nloop invariant i4: 0 <= sn <= a * n;\nloop invariant i5: 0 <= v1;\nloop invariant i6: 0 <= v2;\nloop invariant i7: 0 <= v3;\nloop invariant i8: sn == (a * i);\nloop invariant i9: sn = i * a;\nloop invariant i10: 0 <= v1 <= INT_MAX;\nloop invariant i11: 0 <= v2 <= INT_MAX;\nloop invariant i12: 0 <= v3 <= INT_MAX;\nloop invariant i13: 0 <= sn <= n * a;\nloop invariant i14: sn == 0 ==> i == 0;\nloop invariant i15: sn == n * a ==> i == n;\nloop invariant i16: i == 0 ==> sn == 0;\nloop invariant i17: i == n ==> sn == n * a;\nloop invariant i18: sn == i * a ==> v1 == unknown_int();\nloop invariant i19: sn == i * a ==> v2 == unknown_int();\nloop invariant i20: sn == i * a ==> v3 == unknown_int();\nloop invariant i21: sn == i * a ==> sn == i * a;\nloop invariant i22: sn == i * a ==> 0 <= sn <= n * a;\nloop invariant i23: sn == i * a ==> 0 <= v1 <= INT_MAX;\nloop invariant i24: sn == i * a ==> 0 <= v2 <= INT_MAX;\nloop invariant i25: sn == i * a ==> 0 <= v3 <= INT_MAX;\nloop invariant i26: i1;\nloop invariant i27: i2;\nloop invariant i28: i3;\nloop invariant i29: i4;\nloop invariant i30: i5;\nloop invariant i31: i6;\nloop invariant i32: i7;\nloop invariant i33: i8;\nloop invariant i34: i9;\nloop invariant i35: i10;\nloop invariant i36: i11;\nloop invariant i37: i12;\nloop invariant i38: i13;\nloop invariant i39: i14;\nloop invariant i40: i15;\nloop invariant i41: i16;\nloop invariant i42: i17;\nloop invariant i43: i18;\nloop invariant i44: i19;\nloop invariant i45: i20;\nloop invariant i46: i21;\nloop invariant i47: i22;\nloop invariant i48: i23;\nloop invariant i49: i24;\nloop invariant i50: i25;\nloop invariant i51: i26;\nloop invariant i52: i27;\nloop invariant i53: i28;\nloop invariant i54: i29;\nloop invariant i55: i30;\nloop invariant i56: i31;\nloop invariant i57: i32;\nloop invariant i58: i33;\nloop invariant i59: i34;\nloop invariant i60: i35;\nloop invariant i61: i36;\nloop invariant i62: i37;\nloop invariant i63: i38;\nloop invariant i64: i39;\nloop invariant i65: i40;\nloop invariant i66: i41;\nloop invariant i67: i42;\nloop invariant i68: i43;\nloop invariant i69: i44;\nloop invariant i70: i45;\nloop invariant i71: i46;\nloop invariant i72: i47;\nloop invariant i73: i48;\nloop invariant i74: i49;\nloop invariant i75: i50;\nloop invariant i76: i51;\nloop invariant i77: i52;\nloop invariant i78: i53;\nloop invariant i79: i54;\nloop invariant i80: i55;\nloop invariant i81: i56;\nloop invariant i82: i57;\nloop invariant i83: i58;\nloop invariant i84: i59;\nloop invariant i85: i60;\nloop invariant i86: i61;\nloop invariant i87: i62;\nloop invariant i88: i63;\nloop invariant i89: i64;\nloop invariant i90: i65;\nloop invariant i91: i66;\nloop invariant i92: i67;\nloop invariant i93: i68;\nloop invariant i94: i69;\nloop invariant i95: i70;\nloop invariant i96: i71;\nloop invariant i97: i72;\nloop invariant i98: i73;\nloop invariant i99: i74;\nloop invariant i100: i75;\nloop invariant i101: i76;\nloop invariant i102: i77;\nloop invariant i103: i78;\nloop invariant i104: i79;\nloop invariant i105: i80;\nloop invariant i106: i81;\nloop invariant i107: i82;\nloop invariant i108: i83;\nloop invariant i109: i84;\nloop invariant i110: i85;\nloop invariant i111: i86;\nloop invariant i112: i87;\nloop invariant i113: i88;\nloop invariant i114: i89;\nloop invariant i115: i90;\nloop invariant i116: i91;\nloop invariant i117: i92;\nloop invariant i118: i93;\nloop invariant i119: i94;\nloop invariant i120: i95;\nloop invariant i121: i96;\nloop invariant i122: i97;\nloop invariant i123: i98;\nloop invariant i124: i99;\nloop invariant i125: i100;\nloop invariant i126: i101;\nloop invariant i127: i102;\nloop invariant i128: i103;\nloop invariant i129: i104;\nloop invariant i130: i105;\nloop invariant i131: i106;\nloop invariant i132: i107;\nloop invariant i133: i108;\nloop invariant i134: i109;\nloop invariant i135: i110;\nloop invariant i136: i111;\nloop invariant i137: i112;\nloop invariant i138: i113;\nloop invariant i139: i114;\nloop invariant i140: i115;\nloop invariant i141: i116;\nloop invariant i142: i117;\nloop invariant i143: i118;\nloop invariant i144: i119;\nloop invariant i145: i120;\nloop invariant i146: i121;\nloop invariant i147: i122;\nloop invariant i148: i123;\nloop invariant i149: i124;\nloop invariant i150: i125;\nloop invariant i151: i126;\nloop invariant i152: i127;\nloop invariant i153: i128;\nloop invariant i154: i129;\nloop invariant i155: i130;\nloop invariant i156: i131;\nloop invariant i157: i132;\nloop invariant i158: i133;\nloop invariant i159: i134;\nloop invariant i160: i135;\nloop invariant i161: i136;\nloop invariant i162: i137;\nloop invariant i163: i138;\nloop invariant i164: i139;\nloop invariant i165: i140;\nloop invariant i166: i141;\nloop invariant i167: i142;\nloop invariant i168: i143;\nloop invariant i169: i144;\nloop invariant i170: i145;\nloop invariant i171: i146;\nloop invariant i172: i147;\nloop invariant i173: i148;\nloop invariant i174: i149;\nloop invariant i175: i150;\nloop invariant i176: i151;\nloop invariant i177: i152;\nloop invariant i178: i153;\nloop invariant i179: i154;\nloop invariant i180: i155;\nloop invariant i181: i156;\nloop invariant i182: i157;\nloop invariant i183: i158;\nloop invariant i184: 0 <= sn <= a*n;\nloop invariant i185: i >= 1;\nloop invariant i186: i <= n;\nloop invariant i187: 1 <= sn <= n*a;\nloop invariant i188: 0 <= v1 <= 1;\nloop invariant i189: 0 <= v2 <= 1;\nloop invariant i190: 0 <= v3 <= 1;\nloop invariant i191: sn == (n*a) ==> v1+v2+v3 <= n*a;\nloop invariant i192: sn == 0 ==> v1+v2+v3 >= 0;\nloop invariant i193: sn == (n*a) ==> v1+v2+v3 >= t;\nloop invariant i194: sn == 0 ==> v1+v2+v3 <= t;\nloop invariant i195: 0 <= sn <= n*a;\nloop invariant i196: 1 <= i <= n;\nloop invariant i197: sn == i*a - a;\nloop invariant i198: v1 == unknown_int();\nloop invariant i199: v2 == unknown_int();\nloop invariant i200: v3 == unknown_int();\nloop invariant i201: i == unknown_int() || i == 1;\nloop invariant i202: sn == unknown_int() || sn == 0;\nloop invariant i203: v1 == unknown_int() || v1 == 0;\nloop invariant i204: v2 == unknown_int() || v2 == 0;\nloop invariant i205: v3 == unknown_int() || v3 == 0;\nloop invariant i206: i == unknown_int() || i == 0;\nloop invariant i207: sn == unknown_int() || sn == n*a;\nloop invariant i208: v1 == unknown_int() || v1 == 1;\nloop invariant i209: v2 == unknown_int() || v2 == 1;\nloop invariant i210: v3 == unknown_int() || v3 == 1;\nloop invariant i211: i == unknown_int() || i == n;\nloop invariant i212: sn == unknown_int() || sn == n*a - a;\nloop invariant i213: i == unknown_int() || i == n+1;\nloop invariant i214: i == unknown_int() || i == -1;\nloop invariant i215: i == unknown_int() || i == n+2;\nloop invariant i216: i == unknown_int() || i == -2;\nloop invariant i217: i == unknown_int() || i == n+3;\nloop invariant i218: sn == unknown_int() || sn == n*a - 2*a;\nloop invariant i219: i == unknown_int() || i == -3;\nloop invariant i220: i == unknown_int() || i == n+4;\nloop invariant i221: sn == unknown_int() || sn == n*a - 3*a;\nloop invariant i222: i == unknown_int() || i == -4;\nloop invariant i223: i == unknown_int() || i == n+5;\nloop invariant i224: sn == unknown_int() || sn == n*a - 4*a;\nloop invariant i225: i == unknown_int() || i == -5;\nloop invariant i226: 0 <= a <= 1;\nloop invariant i227: sn + a = sn + 1;\nloop invariant i228: sn + a = n*a + 1;\nloop invariant i229: 0 <= y <= 100000;\nloop invariant i230: x >= (1 + (y - 1) * y / 2);\nloop invariant i231: sn >= 0;\nloop invariant i232: sn <= n*a;\nloop invariant i233: v1 >= INT_MIN;\nloop invariant i234: v1 <= INT_MAX;\nloop invariant i235: v2 >= INT_MIN;\nloop invariant i236: v2 <= INT_MAX;\nloop invariant i237: v3 >= INT_MIN;\nloop invariant i238: v3 <= INT_MAX;\nloop invariant i239: sn == i*a;\nloop invariant i240: v1 >= 0;\nloop invariant i241: v2 >= 0;\nloop invariant i242: v3 >= 0;\nloop invariant i243: v1 <= 1;\nloop invariant i244: v2 <= 1;\nloop invariant i245: v3 <= 1;\nloop invariant i246: sn == n * a;\nloop invariant i247: sn == 0;\nloop invariant i248: sn == (n * a) || sn == 0;\nloop invariant i249: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i250: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i251: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i252: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i253: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i254: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i255: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i256: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i257: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i258: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i259: sn == i * a;\nloop invariant i260: v1 == 0 && v2 == 0 && v3 == 0;\nloop invariant i261: i%2 == 0 && sn%2 == 0;\nloop invariant i262: sn == i * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i263: sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i264: sn == n * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i265: a == 1 ==> sn == i;\nloop invariant i266: a == 1 ==> sn == 0 ==> i == 0;\nloop invariant i267: a == 1 ==> sn == n ==> i == n;\nloop invariant i268: a == 1 ==> sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i269: a == 1 ==> sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i270: a == 1 ==> sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i271: sn == i;\nloop invariant i272: sn == n ==> i == n;\nloop invariant i273: sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i274: sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i275: i = n;\nloop invariant i276: sn = n*a;\nloop invariant i277: v1 = unknown_int();\nloop invariant i278: v2 = unknown_int();\nloop invariant i279: v3 = unknown_int();\nloop invariant i280: i == n;\nloop invariant i281: sn == n*a;\nloop invariant i282: v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i283: a == 1;\nloop invariant i284: sn == i * a ==> (sn == n * a || sn == 0);\nloop invariant i285: i * a == n * a ==> (sn == n * a || sn == 0);\nloop invariant i286: sn == n * a ==> (sn == n * a || sn == 0);\nloop invariant i287: sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i288: sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 218,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 1 <= a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: i == 0 ==> sn == 0;\n\n\n\n\nloop invariant i21: sn == i * a ==> sn == i * a;\nloop invariant i22: sn == i * a ==> 0 <= sn <= n * a;\nloop invariant i23: sn == i * a ==> 0 <= v1 <= INT_MAX;\nloop invariant i24: sn == i * a ==> 0 <= v2 <= INT_MAX;\nloop invariant i25: sn == i * a ==> 0 <= v3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i185: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i197: sn == i*a - a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i226: 0 <= a <= 1;\n\n\n\n\nloop invariant i231: sn >= 0;\n\nloop invariant i233: v1 >= INT_MIN;\nloop invariant i234: v1 <= INT_MAX;\nloop invariant i235: v2 >= INT_MIN;\nloop invariant i236: v2 <= INT_MAX;\nloop invariant i237: v3 >= INT_MIN;\nloop invariant i238: v3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\nloop invariant i249: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i250: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i251: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i252: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i253: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i254: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i255: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i256: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i257: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i258: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\n\n\n\nloop invariant i262: sn == i * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\n\n\n\n\n\nloop invariant i268: a == 1 ==> sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\n\n\n\n\nloop invariant i273: sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\n\n\n\n\n\n\n\n\n\nloop invariant i283: a == 1;\nloop invariant i284: sn == i * a ==> (sn == n * a || sn == 0);\n\nloop invariant i286: sn == n * a ==> (sn == n * a || sn == 0);\nloop invariant i287: sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i288: sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "../dataset/loop_invariants/code2inv/104.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/110.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c"
        ],
        "skipped": [],
        "total": 20,
        "success_count": 5,
        "failure_count": 15,
        "success_rate": 0.25
    }
}