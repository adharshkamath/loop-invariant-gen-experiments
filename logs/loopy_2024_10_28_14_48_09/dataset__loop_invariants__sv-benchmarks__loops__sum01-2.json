{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= a;\nloop invariant sn <= n * a + a;\nloop invariant sn == i * a - a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n*a || sn == 0;\nloop invariant sn <= sn + a;\nloop invariant n >= 1 || sn == 0;\nloop invariant a == 2 || sn == 0;\nloop invariant i == n + 1 || sn == n*a;\nloop invariant i == 1 || sn == 0;\nloop invariant sn == sn + a || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == (a * i);\nloop invariant i <= n;\nloop invariant sn <= (a * n);\nloop invariant sn >= 0;\nloop invariant i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn - a*i <= 0;\nloop invariant sn - a*i >= -n*a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant n >= -1000 && n < 1000;\nloop invariant i >= 1 && i <= n;\nloop invariant sn == (n * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n * a || sn == 0;\nloop invariant 1 <= i <= n + 1;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant -1000 <= sn <= 100000;\nloop invariant sn == (i * a) ==> n == i;\nloop invariant sn == (i * a) ==> n == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0;\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant -1000 <= i <= n;\nloop invariant sn >= (n - i) * a;\nloop invariant sn <= i * a;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == (i + 1) * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 2 * i <= sn <= 2 * n;\nloop invariant sn == 2 * i;\nloop invariant sn == 2 * (i - 1) + a;\nloop invariant sn == 2 * (i - 1) + 2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
            "```\n/*@\nloop invariant a = 2; sn = sn + a; i = i + 1; i <= n ==> sn == i * a;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= a;\nloop invariant sn <= n * a + a;\nloop invariant sn == i * a - a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn >= a is preserved but not established.\nloop invariant sn <= n * a + a is partially proven to be inductive.\nloop invariant sn == i * a - a is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2) * a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: i >= 1;\n\n\n\nloop invariant i6: sn == i * a - a;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n*a || sn == 0;\nloop invariant sn <= sn + a;\nloop invariant n >= 1 || sn == 0;\nloop invariant a == 2 || sn == 0;\nloop invariant i == n + 1 || sn == n*a;\nloop invariant i == 1 || sn == 0;\nloop invariant sn == sn + a || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= n*a || sn == 0 is established but not preserved.\nloop invariant sn <= sn + a is partially proven to be inductive.\nloop invariant n >= 1 || sn == 0 is partially proven to be inductive.\nloop invariant a == 2 || sn == 0 is partially proven to be inductive.\nloop invariant i == n + 1 || sn == n*a is preserved but not established.\nloop invariant i == 1 || sn == 0 is partially proven to be inductive.\nloop invariant sn == sn + a || sn == 0 is partially proven to be inductive.\nloop invariant sn + a == sn + a || sn == 0 is partially proven to be inductive.\nloop invariant sn + a == sn || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn <= sn + a;\n\nloop invariant i4: a == 2 || sn == 0;\n\n\n\nloop invariant i8: sn + a == sn + a || sn == 0;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == (a * i);\nloop invariant i <= n;\nloop invariant sn <= (a * n);\nloop invariant sn >= 0;\nloop invariant i <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == (a * i) is preserved but not established.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn <= (a * n) is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: sn >= 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn - a*i <= 0;\nloop invariant sn - a*i >= -n*a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn - a*i <= 0 is partially proven to be inductive.\nloop invariant sn - a*i >= -n*a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn - a*i <= 0;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant n >= -1000 && n < 1000;\nloop invariant i >= 1 && i <= n;\nloop invariant sn == (n * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= n * a is neither established nor preserved.\nloop invariant n >= -1000 && n < 1000 is partially proven to be inductive.\nloop invariant i >= 1 && i <= n is neither established nor preserved.\nloop invariant sn == (n * a) || sn == 0 is established but not preserved.\nloop invariant sn == (i * a) || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: n >= -1000 && n < 1000;\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i*a is preserved but not established.\nloop invariant n*a == sn is partially proven to be inductive.\nloop invariant sn == n*a || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n * a || sn == 0;\nloop invariant 1 <= i <= n + 1;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= n * a || sn == 0 is established but not preserved.\nloop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n * a is partially proven to be inductive.\nloop invariant sn == n * a || sn == 0 is established but not preserved.\nloop invariant i <= n is neither established nor preserved.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\nloop invariant i4: i >= 1;\nloop invariant i5: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n*a is partially proven to be inductive.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant -1000 <= sn <= 100000;\nloop invariant sn == (i * a) ==> n == i;\nloop invariant sn == (i * a) ==> n == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0;\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant -1000 <= sn <= 100000 is established but not preserved.\nloop invariant sn == (i * a) ==> n == i is established but not preserved.\nloop invariant sn == (i * a) ==> n == 0 ==> i == 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> i == 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\nloop invariant i4: sn == (i * a) ==> n == 0 ==> i == 0;\nloop invariant i5: sn == (i * a) ==> n == i ==> a >= 0;\nloop invariant i6: sn == (i * a) ==> n == i ==> a == 0 ==> i == 0;\nloop invariant i7: sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0;\n\nloop invariant i9: sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0;\nloop invariant i10: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1;\nloop invariant i11: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant -1000 <= i <= n;\nloop invariant sn >= (n - i) * a;\nloop invariant sn <= i * a;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == (i + 1) * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant -1000 <= i <= n is preserved but not established.\nloop invariant sn >= (n - i) * a is preserved but not established.\nloop invariant sn <= i * a is partially proven to be inductive.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant sn == (i + 1) * a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\nloop invariant i4: sn <= i * a;\nloop invariant i5: sn == (i - 1) * a;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 2 * i <= sn <= 2 * n;\nloop invariant sn == 2 * i;\nloop invariant sn == 2 * (i - 1) + a;\nloop invariant sn == 2 * (i - 1) + 2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 2 * i <= sn <= 2 * n is preserved but not established.\nloop invariant sn == 2 * i is partially proven to be inductive.\nloop invariant sn == 2 * (i - 1) + a is partially proven to be inductive.\nloop invariant sn == 2 * (i - 1) + 2 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n*a is partially proven to be inductive.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant a = 2; sn = sn + a; i = i + 1; i <= n ==> sn == i * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 73: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\nloop invariant i1: 0 <= n <= 1000;\nloop invariant i2: i >= 1;\nloop invariant i3: i <= n + 1;\nloop invariant i4: sn >= a;\nloop invariant i5: sn <= n * a + a;\nloop invariant i6: sn == i * a - a;\nloop invariant i7: sn == (i * (i - 1) / 2) * a;\nloop invariant i8: 0 <= sn <= n*a || sn == 0;\nloop invariant i9: sn <= sn + a;\nloop invariant i10: n >= 1 || sn == 0;\nloop invariant i11: a == 2 || sn == 0;\nloop invariant i12: i == n + 1 || sn == n*a;\nloop invariant i13: i == 1 || sn == 0;\nloop invariant i14: sn == sn + a || sn == 0;\nloop invariant i15: sn + a == sn + a || sn == 0;\nloop invariant i16: sn + a == sn || sn == 0;\nloop invariant i17: 0 <= i <= n;\nloop invariant i18: sn == (a * i);\nloop invariant i19: i <= n;\nloop invariant i20: sn <= (a * n);\nloop invariant i21: sn >= 0;\nloop invariant i22: sn - a*i <= 0;\nloop invariant i23: sn - a*i >= -n*a;\nloop invariant i24: sn == i*a;\nloop invariant i25: 0 <= sn <= n * a;\nloop invariant i26: n >= -1000 && n < 1000;\nloop invariant i27: i >= 1 && i <= n;\nloop invariant i28: sn == (n * a) || sn == 0;\nloop invariant i29: sn == (i * a) || sn == 0;\nloop invariant i30: n*a == sn;\nloop invariant i31: sn == n*a || sn == 0;\nloop invariant i32: 0 <= sn <= n * a || sn == 0;\nloop invariant i33: 1 <= i <= n + 1;\nloop invariant i34: sn <= n * a;\nloop invariant i35: sn == n * a || sn == 0;\nloop invariant i36: 0 <= sn <= n*a;\nloop invariant i37: -1000 <= sn <= 100000;\nloop invariant i38: sn == (i * a) ==> n == i;\nloop invariant i39: sn == (i * a) ==> n == 0 ==> i == 0;\nloop invariant i40: sn == (i * a) ==> n == i ==> a >= 0;\nloop invariant i41: sn == (i * a) ==> n == i ==> a == 0 ==> i == 0;\nloop invariant i42: sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0;\nloop invariant i43: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0;\nloop invariant i44: sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0;\nloop invariant i45: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1;\nloop invariant i46: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a;\nloop invariant i47: -1000 <= i <= n;\nloop invariant i48: sn >= (n - i) * a;\nloop invariant i49: sn <= i * a;\nloop invariant i50: sn == (i - 1) * a;\nloop invariant i51: sn == (i + 1) * a;\nloop invariant i52: 2 * i <= sn <= 2 * n;\nloop invariant i53: sn == 2 * i;\nloop invariant i54: sn == 2 * (i - 1) + a;\nloop invariant i55: sn == 2 * (i - 1) + 2;\nloop invariant i56: sn <= n*a;\nloop invariant i57: a = 2; sn = sn + a; i = i + 1; i <= n ==> sn == i * a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 19,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: i >= 1;\n\n\n\nloop invariant i6: sn == i * a - a;\n\nloop invariant i8: 0 <= sn <= n*a || sn == 0;\nloop invariant i9: sn <= sn + a;\nloop invariant i10: n >= 1 || sn == 0;\nloop invariant i11: a == 2 || sn == 0;\n\n\n\nloop invariant i15: sn + a == sn + a || sn == 0;\n\n\n\n\n\nloop invariant i21: sn >= 0;\nloop invariant i22: sn - a*i <= 0;\n\n\n\nloop invariant i26: n >= -1000 && n < 1000;\n\n\n\n\n\nloop invariant i32: 0 <= sn <= n * a || sn == 0;\n\n\n\n\nloop invariant i37: -1000 <= sn <= 100000;\nloop invariant i38: sn == (i * a) ==> n == i;\nloop invariant i39: sn == (i * a) ==> n == 0 ==> i == 0;\nloop invariant i40: sn == (i * a) ==> n == i ==> a >= 0;\nloop invariant i41: sn == (i * a) ==> n == i ==> a == 0 ==> i == 0;\nloop invariant i42: sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0;\nloop invariant i43: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0;\nloop invariant i44: sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0;\nloop invariant i45: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1;\nloop invariant i46: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a;\n\n\nloop invariant i49: sn <= i * a;\nloop invariant i50: sn == (i - 1) * a;\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c"
        ],
        "skipped": [],
        "total": 9,
        "success_count": 3,
        "failure_count": 6,
        "success_rate": 0.3333333333333333
    }
}