{
    "params": {
        "cli_args": {
            "config_file": "../config/loop_invariants.yaml",
            "no_preprocess": false,
            "termination_analysis": false,
            "recursive_functions": false,
            "loop_invariants": false,
            "loop_invariants_prompt": null,
            "repair_invariants": false,
            "repair_input": "",
            "repair_retries": 5,
            "repair_from_k": 0,
            "max_benchmarks": 20,
            "start_index": 0,
            "debug": false,
            "check_only": true,
            "input_log": "../../syncode/loopy_expts/logs/2024_10_26_05_45_01_expt_logs_qc_processed_1.json"
        },
        "config_file_args": {
            "checker": "frama-c",
            "model": "gpt-4-32k",
            "benchmarks": "syncode/benchmarks.txt",
            "benchmark_features": "one_loop_one_method",
            "debug": true
        }
    },
    "logs": [
        {
            "file": "../dataset/loop_invariants/code2inv/65.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x + y == 101;\nloop invariant x * y == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100 - x;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y == 100 - x;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant y == 100 - x;\nloop invariant x + y == 100;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 101;\nloop invariant y = 100 - x;\nloop invariant (x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> x + 1 <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\n*/\n```",
                "```\n/*@\nloop invariant x > 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y == 100 - x;\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y == 100 - x;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y = 100 - x;\nloop invariant x <= 100 ==> x >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y <= 100;\nloop invariant x - y <= 100;\nloop invariant x - y + y = x;\nloop invariant x + y >= 0;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant x + y <= 100;\nloop invariant 1 <= x + y <= 100;\nloop invariant 0 <= x + y <= 100;\nloop invariant x - y >= 0;\nloop invariant x - y + y = x;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x >= 1;\nloop invariant x <= 100;\nloop invariant x + y = 100;\nloop invariant y = 100 - x ==> x + y = 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant x + y = 100 ==> x <= 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant y <= 100 ==> x + y = 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant x >= 1 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant y >= 0 ==> x + y = 100;\nloop invariant y <= 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant x >= 1 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant y >= 0 ==> x + y = 100;\nloop invariant y <= 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant x >= 1 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant y >= 0 ==> x + y = 100;\nloop invariant y <= 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant x >= 1 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant y >= 0 ==> x + y = 100;\nloop invariant y <= 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant x >= 1 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant y >= 0 ==> x + y = 100;\nloop invariant y <= 100 ==> x + y = 100;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x + y == 101;\nloop invariant x > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 101;\nloop invariant y == 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x + y == 101;\nloop invariant x * y == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 100 is partially proven to be inductive.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x + y == 101 is preserved but not established.\nloop invariant x * y == 0 is preserved but not established.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is established but not preserved.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100 - x;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant y = 100 - x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y == 100 - x;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x + y == 100;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant y == 100 - x;\nloop invariant x + y == 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 100 is established but not preserved.\nloop invariant y == 100 - x is neither established nor preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant x + y == 100 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y = 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 101;\nloop invariant y = 100 - x;\nloop invariant (x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> x + 1 <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 0 <= x <= 101;\n\n\nloop invariant i4: (x <= 100 ==> x + 1 <= 101);\nloop invariant i5: (x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i6: (x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i7: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i8: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i9: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i10: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i11: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i12: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i13: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i14: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i15: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i16: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i17: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i18: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i19: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i20: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i21: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x > 0;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x > 0;\n\n\nloop invariant i4: x >= 1;\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y == 100 - x;\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y == 100 - x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant y == 100 - x is neither established nor preserved.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y = 100 - x;\nloop invariant x <= 100 ==> x >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\nloop invariant i7: x <= 100 ==> x >= 1;\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant y = 100 - x;\nloop invariant x + y <= 100;\nloop invariant x - y <= 100;\nloop invariant x - y + y = x;\nloop invariant x + y >= 0;\nloop invariant y >= 0;\nloop invariant x >= 1;\nloop invariant x + y <= 100;\nloop invariant 1 <= x + y <= 100;\nloop invariant 0 <= x + y <= 100;\nloop invariant x - y >= 0;\nloop invariant x - y + y = x;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x + y <= 100;\nloop invariant x + y >= 0;\nloop invariant x >= 1;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\nloop invariant i9: x >= 1;\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant x >= 1;\nloop invariant x + 1 <= 100;\nloop invariant x + 1 >= 2;\nloop invariant 100 - (x + 1) = y;\nloop invariant 100 - 1 <= y;\nloop invariant 100 - 100 <= y;\nloop invariant 0 <= y;\nloop invariant y <= 100 - 1;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\nloop invariant i6: x >= 1;\n\nloop invariant i8: x + 1 >= 2;\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 13,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant y = 100 - x;\nloop invariant y >= 0;\nloop invariant y <= 100;\nloop invariant x >= 1;\nloop invariant x <= 100;\nloop invariant x + y = 100;\nloop invariant y = 100 - x ==> x + y = 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant x + y = 100 ==> x <= 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant y <= 100 ==> x + y = 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant x >= 1 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant y >= 0 ==> x + y = 100;\nloop invariant y <= 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant x >= 1 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant y >= 0 ==> x + y = 100;\nloop invariant y <= 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant x >= 1 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant y >= 0 ==> x + y = 100;\nloop invariant y <= 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant x >= 1 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant y >= 0 ==> x + y = 100;\nloop invariant y <= 100 ==> x + y = 100;\nloop invariant x + y = 100 ==> y >= 0;\nloop invariant x + y = 100 ==> y <= 100;\nloop invariant x <= 100 ==> y >= 0;\nloop invariant x <= 100 ==> y <= 100;\nloop invariant x >= 1 ==> y >= 0;\nloop invariant x >= 1 ==> y <= 100;\nloop invariant y >= 0 ==> x <= 100;\nloop invariant y <= 100 ==> x >= 1;\nloop invariant y >= 0 ==> x + y = 100;\nloop invariant y <= 100 ==> x + y = 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\nloop invariant i5: x >= 1;\n\n\n\n\n\n\nloop invariant i12: y <= 100 ==> x >= 1;\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x + y == 101;\nloop invariant x > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is established but not preserved.\nloop invariant 0 <= y <= 100 is preserved but not established.\nloop invariant x + y == 101 is preserved but not established.\nloop invariant x > 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\nloop invariant i4: x > 0;\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 100;\nloop invariant 0 <= y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\nloop invariant x <= 100;\nloop invariant y <= 100;\nloop invariant x + y = 101;\nloop invariant x >= 1;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\nloop invariant i4: x >= 1;\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 101;\nloop invariant y == 100 - x;\nloop invariant x <= 100;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 101 is partially proven to be inductive.\nloop invariant y == 100 - x is neither established nor preserved.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 0 <= x <= 101;\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= 100;\nloop invariant i2: 0 <= y <= 100;\nloop invariant i3: x + y == 101;\nloop invariant i4: x * y == 0;\nloop invariant i5: 0 <= x <= 100;\nloop invariant i6: 0 <= y <= 100 - x;\nloop invariant i7: y = 100 - x;\nloop invariant i8: x <= 100;\nloop invariant i9: y >= 0;\nloop invariant i10: x >= 0;\nloop invariant i11: y == 100 - x;\nloop invariant i12: y <= 100;\nloop invariant i13: x + y == 100;\nloop invariant i14: x + y = 100;\nloop invariant i15: 0 <= x <= 101;\nloop invariant i16: (x <= 100 ==> y >= 0);\nloop invariant i17: (x <= 100 ==> x + 1 <= 101);\nloop invariant i18: (x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i19: (x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i20: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i21: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i22: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i23: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i24: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i25: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i26: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i27: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i28: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i29: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i30: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i31: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i32: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i33: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i34: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i35: x > 0;\nloop invariant i36: x >= 1;\nloop invariant i37: y <= 99;\nloop invariant i38: y > 0;\nloop invariant i39: x <= 100 ==> y >= 0;\nloop invariant i40: x <= 100 ==> y = 100 - x;\nloop invariant i41: x <= 100 ==> x >= 1;\nloop invariant i42: x + y <= 100;\nloop invariant i43: x - y <= 100;\nloop invariant i44: x - y + y = x;\nloop invariant i45: x + y >= 0;\nloop invariant i46: 1 <= x + y <= 100;\nloop invariant i47: 0 <= x + y <= 100;\nloop invariant i48: x - y >= 0;\nloop invariant i49: y <= 100 - 1;\nloop invariant i50: x + 1 <= 100;\nloop invariant i51: x + 1 >= 2;\nloop invariant i52: 100 - (x + 1) = y;\nloop invariant i53: 100 - 1 <= y;\nloop invariant i54: 100 - 100 <= y;\nloop invariant i55: 0 <= y;\nloop invariant i56: y = 100 - x ==> x + y = 100;\nloop invariant i57: x >= 1 ==> y <= 100;\nloop invariant i58: y >= 0 ==> x <= 100;\nloop invariant i59: y <= 100 ==> x >= 1;\nloop invariant i60: x + y = 100 ==> x <= 100;\nloop invariant i61: x + y = 100 ==> y >= 0;\nloop invariant i62: x + y = 100 ==> y <= 100;\nloop invariant i63: y <= 100 ==> x + y = 100;\nloop invariant i64: x <= 100 ==> y <= 100;\nloop invariant i65: x >= 1 ==> y >= 0;\nloop invariant i66: y >= 0 ==> x + y = 100;\nloop invariant i67: x + y = 101;\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 25,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\n\n\n\n\nloop invariant i10: x >= 0;\n\n\n\n\nloop invariant i15: 0 <= x <= 101;\n\nloop invariant i17: (x <= 100 ==> x + 1 <= 101);\nloop invariant i18: (x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i19: (x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i20: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i21: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i22: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i23: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i24: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i25: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i26: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i27: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i28: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i29: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i30: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i31: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i32: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0);\nloop invariant i33: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 101);\nloop invariant i34: (x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100 ==> y >= 0 ==> x <= 100);\nloop invariant i35: x > 0;\nloop invariant i36: x >= 1;\n\n\n\n\nloop invariant i41: x <= 100 ==> x >= 1;\n\n\n\n\n\n\n\n\n\nloop invariant i51: x + 1 >= 2;\n\n\n\n\n\n\n\nloop invariant i59: y <= 100 ==> x >= 1;\n\n\n\n\n\n\n\n\n*/\nwhile (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn <= n;\nloop invariant (sn == n ==> i == n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (i == 1 ==> sn == 0);\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn <= n;\nloop invariant (sn == n ==> i == n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (i == 1 ==> sn == 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant v1 == v2 == v3;\nloop invariant sn <= n;\nloop invariant sn <= i;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn + i <= n;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant sn == i-1 || sn==0;\nloop invariant (v1 && v2 && v3) ==> sn == 0;\nloop invariant (n <= i-1) ==> sn == i-1;\nloop invariant (n <= i-1) ==> sn < i-1;\nloop invariant (n <= i-1) ==> sn <= i-1;\nloop invariant (n <= i-1) ==> sn <= n;\nloop invariant (sn + i <= n) ==> i <= n;\nloop invariant (sn + i <= n) ==> sn <= n;\nloop invariant (sn + i <= n) ==> sn + i <= n;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant sn <= sn;\nloop invariant sn >= sn;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v3;\nloop invariant v2 <= v1;\nloop invariant v3 <= v2;\nloop invariant sn <= v1;\nloop invariant sn <= v2;\nloop invariant sn <= v3;\nloop invariant v1 <= sn;\nloop invariant v2 <= sn;\nloop invariant v3 <= sn;\nloop invariant sn <= v1 + 1;\nloop invariant sn <= v2 + 1;\nloop invariant sn <= v3 + 1;\nloop invariant v1 <= sn + 1;\nloop invariant v2 <= sn + 1;\nloop invariant v3 <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v1 <= v3;\nloop invariant v1 >= v3;\nloop invariant v1 == v2 == v3;\nloop invariant v1 != v2;\nloop invariant v2 != v3;\nloop invariant v1 != v3;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v1 == v3;\nloop invariant v1 != v2 != v3;\nloop invariant v1 == v2 != v3;\nloop invariant v1 != v2 == v3;\nloop invariant v1 == v3 != v2;\nloop invariant v2 == v3 != v1;\nloop invariant v1 != v2 == v3 != v1;\nloop invariant v1 == v2 != v3 != v1;\nloop invariant v1 != v2 == v3 != v2;\nloop invariant v1 == v3 != v2 != v1;\nloop invariant v2 == v3 != v1 != v2;\nloop invariant v1 != v2 == v3 != v1 != v2;\nloop invariant v1 == v2 != v3 != v1 != v2;\nloop invariant v1 != v2 == v3 != v1 != v2 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v1;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v2;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15 != v16;\n*/\n```",
                "```\n/*@\nloop invariant 0 &lt;= i &amp;&amp; i &lt;= n;\nloop invariant sn == i - 1;\nloop invariant 0 &lt;= i &amp;&amp; i &lt;= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (1 + (i - 1) * i / 2);\nloop invariant 1 <= i <= n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant if (i <= n) then sn == i else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant sn == 0 || sn == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant i = 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1 && i <= n+1;\nloop invariant v1 >= -2147483647 && v1 <= 2147483647;\nloop invariant v2 >= -2147483647 && v2 <= 2147483647;\nloop invariant v3 >= -2147483647 && v3 <= 2147483647;\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647);\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647);\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant n==0 ==> sn == 0;\nloop invariant n!=0 ==> sn >= 1;\nloop invariant n==0 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\n\nloop invariant i7: v1 >= INT_MIN;\nloop invariant i8: v1 <= INT_MAX;\nloop invariant i9: v2 >= INT_MIN;\nloop invariant i10: v2 <= INT_MAX;\nloop invariant i11: v3 >= INT_MIN;\nloop invariant i12: v3 <= INT_MAX;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn <= n;\nloop invariant (sn == n ==> i == n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (i == 1 ==> sn == 0);\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn <= n;\nloop invariant (sn == n ==> i == n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (i == 1 ==> sn == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i is preserved but not established.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant (sn == n ==> i == n) is partially proven to be inductive.\nloop invariant (sn == 0 ==> i == 1) is partially proven to be inductive.\nloop invariant (i == 1 ==> sn == 0) is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant v1 == v2 == v3;\nloop invariant sn <= n;\nloop invariant sn <= i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 is neither established nor preserved.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n\nloop invariant i6: sn <= i;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn + i <= n;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant sn == i-1 || sn==0;\nloop invariant (v1 && v2 && v3) ==> sn == 0;\nloop invariant (n <= i-1) ==> sn == i-1;\nloop invariant (n <= i-1) ==> sn < i-1;\nloop invariant (n <= i-1) ==> sn <= i-1;\nloop invariant (n <= i-1) ==> sn <= n;\nloop invariant (sn + i <= n) ==> i <= n;\nloop invariant (sn + i <= n) ==> sn <= n;\nloop invariant (sn + i <= n) ==> sn + i <= n;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant sn + i <= n is established but not preserved.\nloop invariant v1 >= 0 is neither established nor preserved.\nloop invariant v2 >= 0 is neither established nor preserved.\nloop invariant v3 >= 0 is neither established nor preserved.\nloop invariant v1 <= 1 is neither established nor preserved.\nloop invariant v2 <= 1 is neither established nor preserved.\nloop invariant v3 <= 1 is neither established nor preserved.\nloop invariant sn == i-1 || sn==0 is established but not preserved.\nloop invariant (v1 && v2 && v3) ==> sn == 0 is established but not preserved.\nloop invariant (n <= i-1) ==> sn == i-1 is partially proven to be inductive.\nloop invariant (n <= i-1) ==> sn < i-1 is partially proven to be inductive.\nloop invariant (n <= i-1) ==> sn <= i-1 is partially proven to be inductive.\nloop invariant (n <= i-1) ==> sn <= n is partially proven to be inductive.\nloop invariant (sn + i <= n) ==> i <= n is partially proven to be inductive.\nloop invariant (sn + i <= n) ==> sn <= n is partially proven to be inductive.\nloop invariant (sn + i <= n) ==> sn + i <= n is partially proven to be inductive.\nloop invariant (sn + i <= n) ==> sn + i <= sn + i is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: (sn + i <= n) ==> sn + i <= n;\nloop invariant i18: (sn + i <= n) ==> sn + i <= sn + i;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant sn <= sn;\nloop invariant sn >= sn;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v3;\nloop invariant v2 <= v1;\nloop invariant v3 <= v2;\nloop invariant sn <= v1;\nloop invariant sn <= v2;\nloop invariant sn <= v3;\nloop invariant v1 <= sn;\nloop invariant v2 <= sn;\nloop invariant v3 <= sn;\nloop invariant sn <= v1 + 1;\nloop invariant sn <= v2 + 1;\nloop invariant sn <= v3 + 1;\nloop invariant v1 <= sn + 1;\nloop invariant v2 <= sn + 1;\nloop invariant v3 <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i is preserved but not established.\nloop invariant v1 <= v1 is partially proven to be inductive.\nloop invariant v2 <= v2 is partially proven to be inductive.\nloop invariant v3 <= v3 is partially proven to be inductive.\nloop invariant sn <= sn is partially proven to be inductive.\nloop invariant sn >= sn is partially proven to be inductive.\nloop invariant v1 <= v2 is partially proven to be inductive.\nloop invariant v2 <= v3 is partially proven to be inductive.\nloop invariant v3 <= v1 is partially proven to be inductive.\nloop invariant v1 <= v3 is partially proven to be inductive.\nloop invariant v2 <= v1 is partially proven to be inductive.\nloop invariant v3 <= v2 is partially proven to be inductive.\nloop invariant sn <= v1 is partially proven to be inductive.\nloop invariant sn <= v2 is partially proven to be inductive.\nloop invariant sn <= v3 is partially proven to be inductive.\nloop invariant v1 <= sn is partially proven to be inductive.\nloop invariant v2 <= sn is partially proven to be inductive.\nloop invariant v3 <= sn is partially proven to be inductive.\nloop invariant sn <= v1 + 1 is partially proven to be inductive.\nloop invariant sn <= v2 + 1 is partially proven to be inductive.\nloop invariant sn <= v3 + 1 is partially proven to be inductive.\nloop invariant v1 <= sn + 1 is partially proven to be inductive.\nloop invariant v2 <= sn + 1 is partially proven to be inductive.\nloop invariant v3 <= sn + 1 is partially proven to be inductive.\nloop invariant sn <= sn + 1 is partially proven to be inductive.\nloop invariant v1 <= v1 + 1 is partially proven to be inductive.\nloop invariant v2 <= v2 + 1 is partially proven to be inductive.\nloop invariant v3 <= v3 + 1 is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\nloop invariant i3: v1 <= v1;\nloop invariant i4: v2 <= v2;\nloop invariant i5: v3 <= v3;\nloop invariant i6: sn <= sn;\nloop invariant i7: sn >= sn;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: sn <= sn + 1;\nloop invariant i27: v1 <= v1 + 1;\nloop invariant i28: v2 <= v2 + 1;\nloop invariant i29: v3 <= v3 + 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 36,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v1 <= v3;\nloop invariant v1 >= v3;\nloop invariant v1 == v2 == v3;\nloop invariant v1 != v2;\nloop invariant v2 != v3;\nloop invariant v1 != v3;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v1 == v3;\nloop invariant v1 != v2 != v3;\nloop invariant v1 == v2 != v3;\nloop invariant v1 != v2 == v3;\nloop invariant v1 == v3 != v2;\nloop invariant v2 == v3 != v1;\nloop invariant v1 != v2 == v3 != v1;\nloop invariant v1 == v2 != v3 != v1;\nloop invariant v1 != v2 == v3 != v2;\nloop invariant v1 == v3 != v2 != v1;\nloop invariant v2 == v3 != v1 != v2;\nloop invariant v1 != v2 == v3 != v1 != v2;\nloop invariant v1 == v2 != v3 != v1 != v2;\nloop invariant v1 != v2 == v3 != v1 != v2 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v1;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v2;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15 != v16;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 28: Inconsistent relation chain.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 &lt;= i &amp;&amp; i &lt;= n;\nloop invariant sn == i - 1;\nloop invariant 0 &lt;= i &amp;&amp; i &lt;= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token '='",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn == i - 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (1 + (i - 1) * i / 2);\nloop invariant 1 <= i <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (1 + (i - 1) * i / 2) is preserved but not established.\nloop invariant 1 <= i <= n is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant if (i <= n) then sn == i else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant sn == 0 || sn == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant i = 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1 && i <= n+1;\nloop invariant v1 >= -2147483647 && v1 <= 2147483647;\nloop invariant v2 >= -2147483647 && v2 <= 2147483647;\nloop invariant v3 >= -2147483647 && v3 <= 2147483647;\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647);\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647);\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= n is neither established nor preserved.\nloop invariant i >= 1 && i <= n+1 is partially proven to be inductive.\nloop invariant v1 >= -2147483647 && v1 <= 2147483647 is neither established nor preserved.\nloop invariant v2 >= -2147483647 && v2 <= 2147483647 is neither established nor preserved.\nloop invariant v3 >= -2147483647 && v3 <= 2147483647 is neither established nor preserved.\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647)) is partially proven to be inductive.\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647)) is partially proven to be inductive.\nloop invariant (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647) is partially proven to be inductive.\nAssertion sn == n || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 20,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant n==0 ==> sn == 0;\nloop invariant n!=0 ==> sn >= 1;\nloop invariant n==0 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 14: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sn == i;\nloop invariant i3: v1 == unknown_int();\nloop invariant i4: v2 == unknown_int();\nloop invariant i5: v3 == unknown_int();\nloop invariant i6: 1 <= i <= n;\nloop invariant i7: sn >= 0;\nloop invariant i8: sn <= n;\nloop invariant i9: v1 >= INT_MIN;\nloop invariant i10: v1 <= INT_MAX;\nloop invariant i11: v2 >= INT_MIN;\nloop invariant i12: v2 <= INT_MAX;\nloop invariant i13: v3 >= INT_MIN;\nloop invariant i14: v3 <= INT_MAX;\nloop invariant i15: sn >= i;\nloop invariant i16: 0 <= v1 <= 1;\nloop invariant i17: 0 <= v2 <= 1;\nloop invariant i18: 0 <= v3 <= 1;\nloop invariant i19: (sn == n ==> i == n);\nloop invariant i20: (sn == 0 ==> i == 1);\nloop invariant i21: (i == 1 ==> sn == 0);\nloop invariant i22: 0 <= sn <= n;\nloop invariant i23: sn == i - 1;\nloop invariant i24: v1 == v2 == v3;\nloop invariant i25: sn <= i;\nloop invariant i26: sn + i <= n;\nloop invariant i27: v1 >= 0;\nloop invariant i28: v2 >= 0;\nloop invariant i29: v3 >= 0;\nloop invariant i30: v1 <= 1;\nloop invariant i31: v2 <= 1;\nloop invariant i32: v3 <= 1;\nloop invariant i33: sn == i-1 || sn==0;\nloop invariant i34: (v1 && v2 && v3) ==> sn == 0;\nloop invariant i35: (n <= i-1) ==> sn == i-1;\nloop invariant i36: (n <= i-1) ==> sn < i-1;\nloop invariant i37: (n <= i-1) ==> sn <= i-1;\nloop invariant i38: (n <= i-1) ==> sn <= n;\nloop invariant i39: (sn + i <= n) ==> i <= n;\nloop invariant i40: (sn + i <= n) ==> sn <= n;\nloop invariant i41: (sn + i <= n) ==> sn + i <= n;\nloop invariant i42: (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant i43: v1 <= v1;\nloop invariant i44: v2 <= v2;\nloop invariant i45: v3 <= v3;\nloop invariant i46: sn <= sn;\nloop invariant i47: sn >= sn;\nloop invariant i48: v1 <= v2;\nloop invariant i49: v2 <= v3;\nloop invariant i50: v3 <= v1;\nloop invariant i51: v1 <= v3;\nloop invariant i52: v2 <= v1;\nloop invariant i53: v3 <= v2;\nloop invariant i54: sn <= v1;\nloop invariant i55: sn <= v2;\nloop invariant i56: sn <= v3;\nloop invariant i57: v1 <= sn;\nloop invariant i58: v2 <= sn;\nloop invariant i59: v3 <= sn;\nloop invariant i60: sn <= v1 + 1;\nloop invariant i61: sn <= v2 + 1;\nloop invariant i62: sn <= v3 + 1;\nloop invariant i63: v1 <= sn + 1;\nloop invariant i64: v2 <= sn + 1;\nloop invariant i65: v3 <= sn + 1;\nloop invariant i66: sn <= sn + 1;\nloop invariant i67: v1 <= v1 + 1;\nloop invariant i68: v2 <= v2 + 1;\nloop invariant i69: v3 <= v3 + 1;\nloop invariant i70: v1 >= v2;\nloop invariant i71: v2 >= v3;\nloop invariant i72: v1 >= v3;\nloop invariant i73: v1 != v2;\nloop invariant i74: v2 != v3;\nloop invariant i75: v1 != v3;\nloop invariant i76: v1 == v2;\nloop invariant i77: v2 == v3;\nloop invariant i78: v1 == v3;\nloop invariant i79: v1 != v2 != v3;\nloop invariant i80: v1 == v2 != v3;\nloop invariant i81: v1 != v2 == v3;\nloop invariant i82: v1 == v3 != v2;\nloop invariant i83: v2 == v3 != v1;\nloop invariant i84: v1 != v2 == v3 != v1;\nloop invariant i85: v1 == v2 != v3 != v1;\nloop invariant i86: v1 != v2 == v3 != v2;\nloop invariant i87: v1 == v3 != v2 != v1;\nloop invariant i88: v2 == v3 != v1 != v2;\nloop invariant i89: v1 != v2 == v3 != v1 != v2;\nloop invariant i90: v1 == v2 != v3 != v1 != v2;\nloop invariant i91: v1 != v2 == v3 != v1 != v2 != v3;\nloop invariant i92: v1 == v2 != v3 != v1 != v2 != v3;\nloop invariant i93: v1 == v2 != v3 != v1 != v2 != v3 != v1;\nloop invariant i94: v1 == v2 != v3 != v1 != v2 != v3 != v2;\nloop invariant i95: v1 == v2 != v3 != v1 != v2 != v3 != v3;\nloop invariant i96: v1 == v2 != v3 != v1 != v2 != v3 != v4;\nloop invariant i97: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5;\nloop invariant i98: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6;\nloop invariant i99: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7;\nloop invariant i100: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8;\nloop invariant i101: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9;\nloop invariant i102: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10;\nloop invariant i103: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11;\nloop invariant i104: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12;\nloop invariant i105: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13;\nloop invariant i106: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14;\nloop invariant i107: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15;\nloop invariant i108: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15 != v16;\nloop invariant i109: 0 &lt;= i &amp;&amp; i &lt;= n;\nloop invariant i110: 1 <= n;\nloop invariant i111: sn == (1 + (i - 1) * i / 2);\nloop invariant i112: 0 <= v1;\nloop invariant i113: 0 <= v2;\nloop invariant i114: 0 <= v3;\nloop invariant i115: if (i <= n) then sn == i else sn == 0;\nloop invariant i116: if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant i117: if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant i118: if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant i119: if (i <= n) then sn == n else sn == 0;\nloop invariant i120: v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i121: sn == 0 || sn == n;\nloop invariant i122: v1 = unknown_int();\nloop invariant i123: v2 = unknown_int();\nloop invariant i124: v3 = unknown_int();\nloop invariant i125: i = 1;\nloop invariant i126: i >= 1 && i <= n+1;\nloop invariant i127: v1 >= -2147483647 && v1 <= 2147483647;\nloop invariant i128: v2 >= -2147483647 && v2 <= 2147483647;\nloop invariant i129: v3 >= -2147483647 && v3 <= 2147483647;\nloop invariant i130: (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant i131: (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant i132: (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647);\nloop invariant i133: n==0 ==> sn == 0;\nloop invariant i134: n!=0 ==> sn >= 1;\nloop invariant i135: n==0 ==> v1 = v2 = v3;\nloop invariant i136: n!=0 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i137: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i138: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i139: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i140: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i141: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i142: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i143: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i144: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i145: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i146: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i147: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i148: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i149: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i150: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i151: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 73,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\nloop invariant i7: sn >= 0;\n\nloop invariant i9: v1 >= INT_MIN;\nloop invariant i10: v1 <= INT_MAX;\nloop invariant i11: v2 >= INT_MIN;\nloop invariant i12: v2 <= INT_MAX;\nloop invariant i13: v3 >= INT_MIN;\nloop invariant i14: v3 <= INT_MAX;\n\n\n\n\n\nloop invariant i20: (sn == 0 ==> i == 1);\nloop invariant i21: (i == 1 ==> sn == 0);\n\nloop invariant i23: sn == i - 1;\n\nloop invariant i25: sn <= i;\n\n\n\n\n\n\n\nloop invariant i33: sn == i-1 || sn==0;\n\nloop invariant i35: (n <= i-1) ==> sn == i-1;\n\nloop invariant i37: (n <= i-1) ==> sn <= i-1;\n\nloop invariant i39: (sn + i <= n) ==> i <= n;\nloop invariant i40: (sn + i <= n) ==> sn <= n;\nloop invariant i41: (sn + i <= n) ==> sn + i <= n;\nloop invariant i42: (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant i43: v1 <= v1;\nloop invariant i44: v2 <= v2;\nloop invariant i45: v3 <= v3;\nloop invariant i46: sn <= sn;\nloop invariant i47: sn >= sn;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i66: sn <= sn + 1;\nloop invariant i67: v1 <= v1 + 1;\nloop invariant i68: v2 <= v2 + 1;\nloop invariant i69: v3 <= v3 + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i133: n==0 ==> sn == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  while( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x >= (-50 + y);\nloop invariant y >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= x;\nloop invariant x + y < 0 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0;\nloop invariant x + y < 0 ==> y > 0 ==> x < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> x >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x;\nloop invariant x + y < 0 ==> y > 0 ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y >= 0 ==> x >= y);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y >= 0 ==> x >= y);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x+y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant - x >= -50;\nloop invariant - y >= 0;\nloop invariant - y <= 100000;\nloop invariant - x >= -50 + y * (y - 1) / 2;\nloop invariant - x <= -50 + y * (y - 1) / 2 + y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant -50 <= y <= 0;\nloop invariant y <= x <= -50;\nloop invariant y >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 200;\nloop invariant y > 0;\nloop invariant x <= y;\nloop invariant x >= y - 1;\nloop invariant x >= -50;\nloop invariant x <= -50 + y;\nloop invariant x >= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant i1; loop invariant i2;\nloop invariant i1; loop invariant i2;\n*/\n```",
                "```\n/*@\nloop invariant 0 < y <= 50;\nloop invariant -50 + (y - 1) * y / 2 <= x < -50 + y * y / 2;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant 0 <= y <= INT_MAX;\nloop invariant x >= (-50 + y);\nloop invariant y >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= y is preserved but not established.\nloop invariant 0 <= y <= INT_MAX is partially proven to be inductive.\nloop invariant x >= (-50 + y) is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= x;\nloop invariant x + y < 0 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0;\nloop invariant x + y < 0 ==> y > 0 ==> x < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> x >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x;\nloop invariant x + y < 0 ==> y > 0 ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant 0 <= y <= x is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> x < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> x >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> x + y < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 is partially proven to be inductive.\nloop invariant x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 is partially proven to be inductive.\nloop invariant x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n\nloop invariant i6: x + y >= 0 ==> y <= 0 ==> x >= -50;\n\nloop invariant i8: x + y >= 0 ==> y <= 0 ==> y >= x;\n\nloop invariant i10: x + y >= 0 ==> y <= 0 ==> x + y >= -50;\nloop invariant i11: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i12: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i13: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i14: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant i15: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50;\nloop invariant i16: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50;\nloop invariant i17: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x;\nloop invariant i18: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x;\nloop invariant i19: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i20: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i21: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i22: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y >= 0 ==> x >= y);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant (y >= 0 ==> x >= y);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant (y >= 0 ==> x >= y) is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x+y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x+y >= 0 is preserved but not established.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant - x >= -50;\nloop invariant - y >= 0;\nloop invariant - y <= 100000;\nloop invariant - x >= -50 + y * (y - 1) / 2;\nloop invariant - x <= -50 + y * (y - 1) / 2 + y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant - x >= -50 is partially proven to be inductive.\nloop invariant - y >= 0 is preserved but not established.\nloop invariant - y <= 100000 is preserved but not established.\nloop invariant - x >= -50 + y * (y - 1) / 2 is preserved but not established.\nloop invariant - x <= -50 + y * (y - 1) / 2 + y is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant -50 <= y <= 0;\nloop invariant y <= x <= -50;\nloop invariant y >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant -50 <= y <= 0 is partially proven to be inductive.\nloop invariant y <= x <= -50 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant 0 <= y <= 200;\nloop invariant y > 0;\nloop invariant x <= y;\nloop invariant x >= y - 1;\nloop invariant x >= -50;\nloop invariant x <= -50 + y;\nloop invariant x >= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\nloop invariant x <= -50 + y - 1;\nloop invariant x >= -50 + y - 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant 0 <= y <= 200 is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x >= y - 1 is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x <= -50 + y is partially proven to be inductive.\nloop invariant x >= -50 + y - 1 is partially proven to be inductive.\nloop invariant x >= -50 + y - 2 is partially proven to be inductive.\nloop invariant x <= -50 + y - 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant i1; loop invariant i2;\nloop invariant i1; loop invariant i2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 < y <= 50;\nloop invariant -50 + (y - 1) * y / 2 <= x < -50 + y * y / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 < y <= 50 is preserved but not established.\nloop invariant -50 + (y - 1) * y / 2 <= x < -50 + y * y / 2 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 64: unbound logic variable i1. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: 0 <= x <= y;\nloop invariant i4: 0 <= y <= INT_MAX;\nloop invariant i5: x >= (-50 + y);\nloop invariant i6: y >= 1;\nloop invariant i7: 0 <= x <= -50;\nloop invariant i8: 0 <= y <= x;\nloop invariant i9: x + y < 0 ==> y > 0;\nloop invariant i10: x + y >= 0 ==> y <= 0;\nloop invariant i11: x + y < 0 ==> y > 0 ==> x < -50;\nloop invariant i12: x + y >= 0 ==> y <= 0 ==> x >= -50;\nloop invariant i13: x + y < 0 ==> y > 0 ==> y < x;\nloop invariant i14: x + y >= 0 ==> y <= 0 ==> y >= x;\nloop invariant i15: x + y < 0 ==> y > 0 ==> x + y < -50;\nloop invariant i16: x + y >= 0 ==> y <= 0 ==> x + y >= -50;\nloop invariant i17: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i18: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i19: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i20: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant i21: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50;\nloop invariant i22: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50;\nloop invariant i23: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x;\nloop invariant i24: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x;\nloop invariant i25: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i26: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i27: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i28: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant i29: 0 <= y <= 100000; loop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant i30: (y >= 0 ==> x >= y);\nloop invariant i31: 0 <= y;\nloop invariant i32: x >= -50;\nloop invariant i33: x+y >= 0;\nloop invariant i34: - x >= -50;\nloop invariant i35: - y >= 0;\nloop invariant i36: - y <= 100000;\nloop invariant i37: - x >= -50 + y * (y - 1) / 2;\nloop invariant i38: - x <= -50 + y * (y - 1) / 2 + y;\nloop invariant i39: -50 <= y <= 0;\nloop invariant i40: y <= x <= -50;\nloop invariant i41: y >= 0;\nloop invariant i42: 0 <= y <= 200;\nloop invariant i43: y > 0;\nloop invariant i44: x <= y;\nloop invariant i45: x >= y - 1;\nloop invariant i46: x <= -50 + y;\nloop invariant i47: x >= -50 + y - 1;\nloop invariant i48: x >= -50 + y - 2;\nloop invariant i49: x <= -50 + y - 1;\nloop invariant i50: i1; loop invariant i2;\nloop invariant i51: 0 < y <= 50;\nloop invariant i52: -50 + (y - 1) * y / 2 <= x < -50 + y * y / 2;\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 18,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i12: x + y >= 0 ==> y <= 0 ==> x >= -50;\n\nloop invariant i14: x + y >= 0 ==> y <= 0 ==> y >= x;\n\nloop invariant i16: x + y >= 0 ==> y <= 0 ==> x + y >= -50;\nloop invariant i17: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i18: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i19: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i20: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\nloop invariant i21: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> x < -50;\nloop invariant i22: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> x >= -50;\nloop invariant i23: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x;\nloop invariant i24: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x;\nloop invariant i25: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50;\nloop invariant i26: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50;\nloop invariant i27: x + y < 0 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0 ==> y < x ==> x + y < -50 ==> y > 0;\nloop invariant i28: x + y >= 0 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0 ==> y >= x ==> x + y >= -50 ==> y <= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  while (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i < 10 ==> x == 1;\nloop invariant i < 10 ==> y == 3;\nloop invariant i < 9 ==> x == 2;\nloop invariant i < 9 ==> y == 4;\nloop invariant i < 8 ==> x == 3;\nloop invariant i < 8 ==> y == 5;\nloop invariant i < 7 ==> x == 1;\nloop invariant i < 7 ==> y == 6;\nloop invariant i < 6 ==> x == 2;\nloop invariant i < 6 ==> y == 3;\nloop invariant i < 5 ==> x == 3;\nloop invariant i < 5 ==> y == 4;\nloop invariant i < 4 ==> x == 1;\nloop invariant i < 4 ==> y == 5;\nloop invariant i < 3 ==> x == 2;\nloop invariant i < 3 ==> y == 6;\nloop invariant i < 2 ==> x == 3;\nloop invariant i < 2 ==> y == 4;\nloop invariant i < 1 ==> x == 1;\nloop invariant i < 1 ==> y == 5;\nloop invariant i < 0 ==> x == 2;\nloop invariant i < 0 ==> y == 3;\nloop invariant i == 10 ==> x == 2;\nloop invariant i == 10 ==> y == 4;\nloop invariant i == 9 ==> x == 3;\nloop invariant i == 9 ==> y == 5;\nloop invariant i == 8 ==> x == 1;\nloop invariant i == 8 ==> y == 6;\nloop invariant i == 7 ==> x == 2;\nloop invariant i == 7 ==> y == 3;\nloop invariant i == 6 ==> x == 3;\nloop invariant i == 6 ==> y == 4;\nloop invariant i == 5 ==> x == 1;\nloop invariant i == 5 ==> y == 5;\nloop invariant i == 4 ==> x == 2;\nloop invariant i == 4 ==> y == 6;\nloop invariant i == 3 ==> x == 3;\nloop invariant i == 3 ==> y == 4;\nloop invariant i == 2 ==> x == 1;\nloop invariant i == 2 ==> y == 5;\nloop invariant i == 1 ==> x == 2;\nloop invariant i == 1 ==> y == 3;\nloop invariant i == 0 ==> x == 3;\nloop invariant i == 0 ==> y == 4;\nloop invariant i == 10 ==> x >= 3;\nloop invariant i == 10 ==> y >= 4;\nloop invariant i == 9 ==> x >= 3;\nloop invariant i == 9 ==> y >= 5;\nloop invariant i == 8 ==> x >= 3;\nloop invariant i == 8 ==> y >= 6;\nloop invariant i == 7 ==> x >= 3;\nloop invariant i == 7 ==> y >= 3;\nloop invariant i == 6 ==> x >= 3;\nloop invariant i == 6 ==> y >= 4;\nloop invariant i == 5 ==> x >= 3;\nloop invariant i == 5 ==> y >= 5;\nloop invariant i == 4 ==> x >= 3;\nloop invariant i == 4 ==> y >= 6;\nloop invariant i == 3 ==> x >= 3;\nloop invariant i == 3 ==> y >= 4;\nloop invariant i == 2 ==> x >= 3;\nloop invariant i == 2 ==> y >= 5;\nloop invariant i == 1 ==> x >= 3;\nloop invariant i == 1 ==> y >= 3;\nloop invariant i == 0 ==> x >= 3;\nloop invariant i == 0 ==> y >= 4;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == (1 + (i - 1) * (i - 2) / 2);\nloop invariant y == (3 + (i - 1) * (i - 2) / 2);\nloop invariant (i < 10) ==> (x != 4);\nloop invariant (i < 10) ==> (y != 6);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant !( (i == 10) && (x == 1) && (y == 6) );\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y <= 6;\nloop invariant i == 10 ==> !( y == 6 );\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= i <= 10;\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i < 10 ==> y in {3,4,6});\nloop invariant (i < 10 ==> x in {3,4});\nloop invariant (i==1 ==> x == 1);\nloop invariant (i==1 ==> y in {3,4});\nloop invariant (i==2 ==> x == 2);\nloop invariant (i==2 ==> y == 3);\nloop invariant (i==3 ==> x == 3);\nloop invariant (i==3 ==> y == 4);\nloop invariant (i==4 ==> x == 1);\nloop invariant (i==4 ==> y == 5);\nloop invariant (i==5 ==> x == 2);\nloop invariant (i==5 ==> y == 6);\nloop invariant (i==6 ==> x == 3);\nloop invariant (i==6 ==> y in {4,6});\nloop invariant (i==7 ==> x == 1);\nloop invariant (i==7 ==> y in {5,6});\nloop invariant (i==8 ==> x == 2);\nloop invariant (i==8 ==> y in {6});\nloop invariant (i==9 ==> x == 3);\nloop invariant (i==9 ==> y in {6});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 2 ==> y == 3);\nloop invariant (x == 3 ==> y == 4);\nloop invariant (x == 1 ==> y == 5);\nloop invariant (x == 4 ==> y == 6);\nloop invariant (x != 1 ==> x != 3 ==> x != 4 ==> y == 1);\nloop invariant (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4);\nloop invariant (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4);\nloop invariant (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4);\nloop invariant (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant i >= x - 1;\nloop invariant y == 3 * i + 1;\nloop invariant !(x==4 && y==6);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\nloop invariant !(x == 4 && y == 6);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= 4;\nloop invariant y <= 6;\nloop invariant i + x >= 2;\nloop invariant i + x <= 14;\nloop invariant i + x + y >= 3;\nloop invariant i + x + y <= 15;\nloop invariant x == 1 ==> y == 5;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 3 ==> y == 3;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 4 ==> i == 9;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 3 ==> i == 8;\nloop invariant x == 3 ==> y == 5;\nloop invariant x == 2 ==> i == 7;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 1 ==> i == 6;\nloop invariant x == 1 ==> y == 3;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x == 2 ==> y >= 4;\nloop invariant x == 3 ==> y >= 3;\nloop invariant x == 4 ==> y >= 6;\nloop invariant x <= 4 ==> y <= 6;\nloop invariant x <= 4 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\n*/\n```",
                "```\n/*@\nloop invariant (i >= 0 && i <= 9);\nloop invariant (x >= 1 && x <= 4);\nloop invariant (y >= 0 && y <= 6);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 2 ==> y == 3;\nloop invariant x == 3 ==> y == 4;\nloop invariant x == 1 ==> y == 5 || y == 6;\nloop invariant x == 2 ==> y == 3;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant ( i >= 0 );\nloop invariant ( i <= 10 );\nloop invariant ( x == 1 || x == 2 || x == 3 || x == 4 );\nloop invariant ( y == 3 || y == 4 || y == 5 || y == 6 );\n*/\n```",
                "```\n/*@\nloop invariant ( i >= 0 ) && ( i <= 10 );\nloop invariant ( x == ( ( i % 4 ) + 1 ) );\nloop invariant ( y == ( ( ( ( i % 4 ) * 2 ) + 3 ) + ( ( i / 4 ) * 5 ) ) );\nloop invariant !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) );\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 3 <= y <= 6 is preserved but not established.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 23,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant i < 10 ==> x == 1;\nloop invariant i < 10 ==> y == 3;\nloop invariant i < 9 ==> x == 2;\nloop invariant i < 9 ==> y == 4;\nloop invariant i < 8 ==> x == 3;\nloop invariant i < 8 ==> y == 5;\nloop invariant i < 7 ==> x == 1;\nloop invariant i < 7 ==> y == 6;\nloop invariant i < 6 ==> x == 2;\nloop invariant i < 6 ==> y == 3;\nloop invariant i < 5 ==> x == 3;\nloop invariant i < 5 ==> y == 4;\nloop invariant i < 4 ==> x == 1;\nloop invariant i < 4 ==> y == 5;\nloop invariant i < 3 ==> x == 2;\nloop invariant i < 3 ==> y == 6;\nloop invariant i < 2 ==> x == 3;\nloop invariant i < 2 ==> y == 4;\nloop invariant i < 1 ==> x == 1;\nloop invariant i < 1 ==> y == 5;\nloop invariant i < 0 ==> x == 2;\nloop invariant i < 0 ==> y == 3;\nloop invariant i == 10 ==> x == 2;\nloop invariant i == 10 ==> y == 4;\nloop invariant i == 9 ==> x == 3;\nloop invariant i == 9 ==> y == 5;\nloop invariant i == 8 ==> x == 1;\nloop invariant i == 8 ==> y == 6;\nloop invariant i == 7 ==> x == 2;\nloop invariant i == 7 ==> y == 3;\nloop invariant i == 6 ==> x == 3;\nloop invariant i == 6 ==> y == 4;\nloop invariant i == 5 ==> x == 1;\nloop invariant i == 5 ==> y == 5;\nloop invariant i == 4 ==> x == 2;\nloop invariant i == 4 ==> y == 6;\nloop invariant i == 3 ==> x == 3;\nloop invariant i == 3 ==> y == 4;\nloop invariant i == 2 ==> x == 1;\nloop invariant i == 2 ==> y == 5;\nloop invariant i == 1 ==> x == 2;\nloop invariant i == 1 ==> y == 3;\nloop invariant i == 0 ==> x == 3;\nloop invariant i == 0 ==> y == 4;\nloop invariant i == 10 ==> x >= 3;\nloop invariant i == 10 ==> y >= 4;\nloop invariant i == 9 ==> x >= 3;\nloop invariant i == 9 ==> y >= 5;\nloop invariant i == 8 ==> x >= 3;\nloop invariant i == 8 ==> y >= 6;\nloop invariant i == 7 ==> x >= 3;\nloop invariant i == 7 ==> y >= 3;\nloop invariant i == 6 ==> x >= 3;\nloop invariant i == 6 ==> y >= 4;\nloop invariant i == 5 ==> x >= 3;\nloop invariant i == 5 ==> y >= 5;\nloop invariant i == 4 ==> x >= 3;\nloop invariant i == 4 ==> y >= 6;\nloop invariant i == 3 ==> x >= 3;\nloop invariant i == 3 ==> y >= 4;\nloop invariant i == 2 ==> x >= 3;\nloop invariant i == 2 ==> y >= 5;\nloop invariant i == 1 ==> x >= 3;\nloop invariant i == 1 ==> y >= 3;\nloop invariant i == 0 ==> x >= 3;\nloop invariant i == 0 ==> y >= 4;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant i < 10 ==> x == 1 is partially proven to be inductive.\nloop invariant i < 10 ==> y == 3 is preserved but not established.\nloop invariant i < 9 ==> x == 2 is preserved but not established.\nloop invariant i < 9 ==> y == 4 is partially proven to be inductive.\nloop invariant i < 8 ==> x == 3 is partially proven to be inductive.\nloop invariant i < 8 ==> y == 5 is partially proven to be inductive.\nloop invariant i < 7 ==> x == 1 is partially proven to be inductive.\nloop invariant i < 7 ==> y == 6 is partially proven to be inductive.\nloop invariant i < 6 ==> x == 2 is partially proven to be inductive.\nloop invariant i < 6 ==> y == 3 is partially proven to be inductive.\nloop invariant i < 5 ==> x == 3 is partially proven to be inductive.\nloop invariant i < 5 ==> y == 4 is partially proven to be inductive.\nloop invariant i < 4 ==> x == 1 is partially proven to be inductive.\nloop invariant i < 4 ==> y == 5 is partially proven to be inductive.\nloop invariant i < 3 ==> x == 2 is partially proven to be inductive.\nloop invariant i < 3 ==> y == 6 is partially proven to be inductive.\nloop invariant i < 2 ==> x == 3 is partially proven to be inductive.\nloop invariant i < 2 ==> y == 4 is partially proven to be inductive.\nloop invariant i < 1 ==> x == 1 is partially proven to be inductive.\nloop invariant i < 1 ==> y == 5 is partially proven to be inductive.\nloop invariant i < 0 ==> x == 2 is partially proven to be inductive.\nloop invariant i < 0 ==> y == 3 is partially proven to be inductive.\nloop invariant i == 10 ==> x == 2 is partially proven to be inductive.\nloop invariant i == 10 ==> y == 4 is partially proven to be inductive.\nloop invariant i == 9 ==> x == 3 is partially proven to be inductive.\nloop invariant i == 9 ==> y == 5 is partially proven to be inductive.\nloop invariant i == 8 ==> x == 1 is partially proven to be inductive.\nloop invariant i == 8 ==> y == 6 is partially proven to be inductive.\nloop invariant i == 7 ==> x == 2 is partially proven to be inductive.\nloop invariant i == 7 ==> y == 3 is partially proven to be inductive.\nloop invariant i == 6 ==> x == 3 is partially proven to be inductive.\nloop invariant i == 6 ==> y == 4 is partially proven to be inductive.\nloop invariant i == 5 ==> x == 1 is partially proven to be inductive.\nloop invariant i == 5 ==> y == 5 is partially proven to be inductive.\nloop invariant i == 4 ==> x == 2 is partially proven to be inductive.\nloop invariant i == 4 ==> y == 6 is partially proven to be inductive.\nloop invariant i == 3 ==> x == 3 is partially proven to be inductive.\nloop invariant i == 3 ==> y == 4 is partially proven to be inductive.\nloop invariant i == 2 ==> x == 1 is partially proven to be inductive.\nloop invariant i == 2 ==> y == 5 is partially proven to be inductive.\nloop invariant i == 1 ==> x == 2 is partially proven to be inductive.\nloop invariant i == 1 ==> y == 3 is partially proven to be inductive.\nloop invariant i == 0 ==> x == 3 is partially proven to be inductive.\nloop invariant i == 0 ==> y == 4 is partially proven to be inductive.\nloop invariant i == 10 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 10 ==> y >= 4 is partially proven to be inductive.\nloop invariant i == 9 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 9 ==> y >= 5 is partially proven to be inductive.\nloop invariant i == 8 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 8 ==> y >= 6 is partially proven to be inductive.\nloop invariant i == 7 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 7 ==> y >= 3 is partially proven to be inductive.\nloop invariant i == 6 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 6 ==> y >= 4 is partially proven to be inductive.\nloop invariant i == 5 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 5 ==> y >= 5 is partially proven to be inductive.\nloop invariant i == 4 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 4 ==> y >= 6 is partially proven to be inductive.\nloop invariant i == 3 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 3 ==> y >= 4 is partially proven to be inductive.\nloop invariant i == 2 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 2 ==> y >= 5 is partially proven to be inductive.\nloop invariant i == 1 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 1 ==> y >= 3 is partially proven to be inductive.\nloop invariant i == 0 ==> x >= 3 is partially proven to be inductive.\nloop invariant i == 0 ==> y >= 4 is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: i < 1 ==> x == 1;\n\nloop invariant i22: i < 0 ==> x == 2;\nloop invariant i23: i < 0 ==> y == 3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i42: i == 1 ==> x == 2;\nloop invariant i43: i == 1 ==> y == 3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i62: i == 2 ==> x >= 3;\n\n\nloop invariant i65: i == 1 ==> y >= 3;\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == (1 + (i - 1) * (i - 2) / 2);\nloop invariant y == (3 + (i - 1) * (i - 2) / 2);\nloop invariant (i < 10) ==> (x != 4);\nloop invariant (i < 10) ==> (y != 6);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x == (1 + (i - 1) * (i - 2) / 2) is preserved but not established.\nloop invariant y == (3 + (i - 1) * (i - 2) / 2) is partially proven to be inductive.\nloop invariant (i < 10) ==> (x != 4) is partially proven to be inductive.\nloop invariant (i < 10) ==> (y != 6) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n\nloop invariant i4: (i < 10) ==> (x != 4);\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= y <= 6;\nloop invariant !( (i == 10) && (x == 1) && (y == 6) );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 1 <= y <= 6 is preserved but not established.\nloop invariant !( (i == 10) && (x == 1) && (y == 6) ) is established but not preserved.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant y <= 6;\nloop invariant i == 10 ==> !( y == 6 );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x == 1 || x == 2 || x == 3 || x == 4 is partially proven to be inductive.\nloop invariant y <= 6 is preserved but not established.\nloop invariant i == 10 ==> !( y == 6 ) is established but not preserved.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x == 1 || x == 2 || x == 3 || x == 4;\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 21,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 4;\nloop invariant 1 <= i <= 10;\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i < 10 ==> y in {3,4,6});\nloop invariant (i < 10 ==> x in {3,4});\nloop invariant (i==1 ==> x == 1);\nloop invariant (i==1 ==> y in {3,4});\nloop invariant (i==2 ==> x == 2);\nloop invariant (i==2 ==> y == 3);\nloop invariant (i==3 ==> x == 3);\nloop invariant (i==3 ==> y == 4);\nloop invariant (i==4 ==> x == 1);\nloop invariant (i==4 ==> y == 5);\nloop invariant (i==5 ==> x == 2);\nloop invariant (i==5 ==> y == 6);\nloop invariant (i==6 ==> x == 3);\nloop invariant (i==6 ==> y in {4,6});\nloop invariant (i==7 ==> x == 1);\nloop invariant (i==7 ==> y in {5,6});\nloop invariant (i==8 ==> x == 2);\nloop invariant (i==8 ==> y in {6});\nloop invariant (i==9 ==> x == 3);\nloop invariant (i==9 ==> y in {6});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\nloop invariant (i==10 ==> i==10);\nloop invariant (i==10 ==> y in {1,5});\nloop invariant (i==10 ==> x in {1,2});\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token 'in'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 1 <= x <= 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i25: (i==10 ==> i==10);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant (x == 2 ==> y == 3);\nloop invariant (x == 3 ==> y == 4);\nloop invariant (x == 1 ==> y == 5);\nloop invariant (x == 4 ==> y == 6);\nloop invariant (x != 1 ==> x != 3 ==> x != 4 ==> y == 1);\nloop invariant (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4);\nloop invariant (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4);\nloop invariant (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4);\nloop invariant (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant (x == 2 ==> y == 3) is established but not preserved.\nloop invariant (x == 3 ==> y == 4) is partially proven to be inductive.\nloop invariant (x == 1 ==> y == 5) is neither established nor preserved.\nloop invariant (x == 4 ==> y == 6) is partially proven to be inductive.\nloop invariant (x != 1 ==> x != 3 ==> x != 4 ==> y == 1) is established but not preserved.\nloop invariant (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4) is partially proven to be inductive.\nloop invariant (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4) is partially proven to be inductive.\nloop invariant (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4) is partially proven to be inductive.\nloop invariant (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3) is partially proven to be inductive.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: (x == 3 ==> y == 4);\n\nloop invariant i5: (x == 4 ==> y == 6);\n\nloop invariant i7: (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4);\nloop invariant i8: (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4);\nloop invariant i9: (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4);\nloop invariant i10: (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant i >= x - 1;\nloop invariant y == 3 * i + 1;\nloop invariant !(x==4 && y==6);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant i >= x - 1 is partially proven to be inductive.\nloop invariant y == 3 * i + 1 is neither established nor preserved.\nloop invariant !(x==4 && y==6) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\nloop invariant i3: i >= x - 1;\n\nloop invariant i5: !(x==4 && y==6);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant 1 <= x <= 4;\nloop invariant 3 <= y <= 6;\nloop invariant !(x == 4 && y == 6);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant 1 <= x <= 4 is partially proven to be inductive.\nloop invariant 3 <= y <= 6 is preserved but not established.\nloop invariant !(x == 4 && y == 6) is partially proven to be inductive.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\nloop invariant i4: !(x == 4 && y == 6);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x >= 1;\nloop invariant y >= 1;\nloop invariant x <= 4;\nloop invariant y <= 6;\nloop invariant i + x >= 2;\nloop invariant i + x <= 14;\nloop invariant i + x + y >= 3;\nloop invariant i + x + y <= 15;\nloop invariant x == 1 ==> y == 5;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 3 ==> y == 3;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 4 ==> i == 9;\nloop invariant x == 4 ==> y == 6;\nloop invariant x == 3 ==> i == 8;\nloop invariant x == 3 ==> y == 5;\nloop invariant x == 2 ==> i == 7;\nloop invariant x == 2 ==> y == 4;\nloop invariant x == 1 ==> i == 6;\nloop invariant x == 1 ==> y == 3;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x == 2 ==> y >= 4;\nloop invariant x == 3 ==> y >= 3;\nloop invariant x == 4 ==> y >= 6;\nloop invariant x <= 4 ==> y <= 6;\nloop invariant x <= 4 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\nloop invariant x >= 1 ==> y <= 6;\nloop invariant x >= 1 ==> y >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant x <= 4 is partially proven to be inductive.\nloop invariant y <= 6 is preserved but not established.\nloop invariant i + x >= 2 is preserved but not established.\nloop invariant i + x <= 14 is partially proven to be inductive.\nloop invariant i + x + y >= 3 is partially proven to be inductive.\nloop invariant i + x + y <= 15 is partially proven to be inductive.\nloop invariant x == 1 ==> y == 5 is partially proven to be inductive.\nloop invariant x == 2 ==> y == 4 is partially proven to be inductive.\nloop invariant x == 3 ==> y == 3 is partially proven to be inductive.\nloop invariant x == 4 ==> y == 6 is partially proven to be inductive.\nloop invariant x == 4 ==> i == 9 is partially proven to be inductive.\nloop invariant x == 3 ==> i == 8 is partially proven to be inductive.\nloop invariant x == 3 ==> y == 5 is partially proven to be inductive.\nloop invariant x == 2 ==> i == 7 is partially proven to be inductive.\nloop invariant x == 1 ==> i == 6 is partially proven to be inductive.\nloop invariant x == 1 ==> y == 3 is partially proven to be inductive.\nloop invariant x >= 1 ==> y <= 6 is partially proven to be inductive.\nloop invariant x == 2 ==> y >= 4 is partially proven to be inductive.\nloop invariant x == 3 ==> y >= 3 is partially proven to be inductive.\nloop invariant x == 4 ==> y >= 6 is partially proven to be inductive.\nloop invariant x <= 4 ==> y <= 6 is partially proven to be inductive.\nloop invariant x <= 4 ==> y >= 1 is partially proven to be inductive.\nloop invariant x >= 1 ==> y >= 1 is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x >= 1;\n\nloop invariant i4: x <= 4;\n\n\nloop invariant i7: i + x <= 14;\n\n\n\n\n\nloop invariant i13: x == 4 ==> y == 6;\nloop invariant i14: x == 4 ==> i == 9;\n\n\n\n\n\n\n\nloop invariant i22: x == 3 ==> y >= 3;\nloop invariant i23: x == 4 ==> y >= 6;\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant (i >= 0 && i <= 9);\nloop invariant (x >= 1 && x <= 4);\nloop invariant (y >= 0 && y <= 6);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant (i >= 0 && i <= 9) is established but not preserved.\nloop invariant (x >= 1 && x <= 4) is partially proven to be inductive.\nloop invariant (y >= 0 && y <= 6) is preserved but not established.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\n\nloop invariant i2: (x >= 1 && x <= 4);\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= 10;\nloop invariant x == 2 ==> y == 3;\nloop invariant x == 3 ==> y == 4;\nloop invariant x == 1 ==> y == 5 || y == 6;\nloop invariant x == 2 ==> y == 3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x == 2 ==> y == 3 is established but not preserved.\nloop invariant x == 3 ==> y == 4 is partially proven to be inductive.\nloop invariant x == 1 ==> y == 5 || y == 6 is preserved but not established.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: x == 3 ==> y == 4;\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( i >= 0 );\nloop invariant ( i <= 10 );\nloop invariant ( x == 1 || x == 2 || x == 3 || x == 4 );\nloop invariant ( y == 3 || y == 4 || y == 5 || y == 6 );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( i >= 0 ) is partially proven to be inductive.\nloop invariant ( i <= 10 ) is partially proven to be inductive.\nloop invariant ( x == 1 || x == 2 || x == 3 || x == 4 ) is partially proven to be inductive.\nloop invariant ( y == 3 || y == 4 || y == 5 || y == 6 ) is preserved but not established.\nAssertion !(y == 6): Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: ( i >= 0 );\nloop invariant i2: ( i <= 10 );\nloop invariant i3: ( x == 1 || x == 2 || x == 3 || x == 4 );\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( i >= 0 ) && ( i <= 10 );\nloop invariant ( x == ( ( i % 4 ) + 1 ) );\nloop invariant ( y == ( ( ( ( i % 4 ) * 2 ) + 3 ) + ( ( i / 4 ) * 5 ) ) );\nloop invariant !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( i >= 0 ) && ( i <= 10 ) is partially proven to be inductive.\nloop invariant ( x == ( ( i % 4 ) + 1 ) ) is established but not preserved.\nloop invariant ( y == ( ( ( ( i % 4 ) * 2 ) + 3 ) + ( ( i / 4 ) * 5 ) ) ) is neither established nor preserved.\nloop invariant !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) ) is partially proven to be inductive.\nAssertion !(y == 6): Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: ( i >= 0 ) && ( i <= 10 );\n\n\nloop invariant i4: !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) );\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 96: unexpected token 'in'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\nloop invariant i3: 3 <= y <= 6;\nloop invariant i4: i < 10 ==> x == 1;\nloop invariant i5: i < 10 ==> y == 3;\nloop invariant i6: i < 9 ==> x == 2;\nloop invariant i7: i < 9 ==> y == 4;\nloop invariant i8: i < 8 ==> x == 3;\nloop invariant i9: i < 8 ==> y == 5;\nloop invariant i10: i < 7 ==> x == 1;\nloop invariant i11: i < 7 ==> y == 6;\nloop invariant i12: i < 6 ==> x == 2;\nloop invariant i13: i < 6 ==> y == 3;\nloop invariant i14: i < 5 ==> x == 3;\nloop invariant i15: i < 5 ==> y == 4;\nloop invariant i16: i < 4 ==> x == 1;\nloop invariant i17: i < 4 ==> y == 5;\nloop invariant i18: i < 3 ==> x == 2;\nloop invariant i19: i < 3 ==> y == 6;\nloop invariant i20: i < 2 ==> x == 3;\nloop invariant i21: i < 2 ==> y == 4;\nloop invariant i22: i < 1 ==> x == 1;\nloop invariant i23: i < 1 ==> y == 5;\nloop invariant i24: i < 0 ==> x == 2;\nloop invariant i25: i < 0 ==> y == 3;\nloop invariant i26: i == 10 ==> x == 2;\nloop invariant i27: i == 10 ==> y == 4;\nloop invariant i28: i == 9 ==> x == 3;\nloop invariant i29: i == 9 ==> y == 5;\nloop invariant i30: i == 8 ==> x == 1;\nloop invariant i31: i == 8 ==> y == 6;\nloop invariant i32: i == 7 ==> x == 2;\nloop invariant i33: i == 7 ==> y == 3;\nloop invariant i34: i == 6 ==> x == 3;\nloop invariant i35: i == 6 ==> y == 4;\nloop invariant i36: i == 5 ==> x == 1;\nloop invariant i37: i == 5 ==> y == 5;\nloop invariant i38: i == 4 ==> x == 2;\nloop invariant i39: i == 4 ==> y == 6;\nloop invariant i40: i == 3 ==> x == 3;\nloop invariant i41: i == 3 ==> y == 4;\nloop invariant i42: i == 2 ==> x == 1;\nloop invariant i43: i == 2 ==> y == 5;\nloop invariant i44: i == 1 ==> x == 2;\nloop invariant i45: i == 1 ==> y == 3;\nloop invariant i46: i == 0 ==> x == 3;\nloop invariant i47: i == 0 ==> y == 4;\nloop invariant i48: i == 10 ==> x >= 3;\nloop invariant i49: i == 10 ==> y >= 4;\nloop invariant i50: i == 9 ==> x >= 3;\nloop invariant i51: i == 9 ==> y >= 5;\nloop invariant i52: i == 8 ==> x >= 3;\nloop invariant i53: i == 8 ==> y >= 6;\nloop invariant i54: i == 7 ==> x >= 3;\nloop invariant i55: i == 7 ==> y >= 3;\nloop invariant i56: i == 6 ==> x >= 3;\nloop invariant i57: i == 6 ==> y >= 4;\nloop invariant i58: i == 5 ==> x >= 3;\nloop invariant i59: i == 5 ==> y >= 5;\nloop invariant i60: i == 4 ==> x >= 3;\nloop invariant i61: i == 4 ==> y >= 6;\nloop invariant i62: i == 3 ==> x >= 3;\nloop invariant i63: i == 3 ==> y >= 4;\nloop invariant i64: i == 2 ==> x >= 3;\nloop invariant i65: i == 2 ==> y >= 5;\nloop invariant i66: i == 1 ==> x >= 3;\nloop invariant i67: i == 1 ==> y >= 3;\nloop invariant i68: i == 0 ==> x >= 3;\nloop invariant i69: i == 0 ==> y >= 4;\nloop invariant i70: x == (1 + (i - 1) * (i - 2) / 2);\nloop invariant i71: y == (3 + (i - 1) * (i - 2) / 2);\nloop invariant i72: (i < 10) ==> (x != 4);\nloop invariant i73: (i < 10) ==> (y != 6);\nloop invariant i74: 1 <= y <= 6;\nloop invariant i75: !( (i == 10) && (x == 1) && (y == 6) );\nloop invariant i76: x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant i77: y <= 6;\nloop invariant i78: i == 10 ==> !( y == 6 );\nloop invariant i79: 1 <= i <= 10;\nloop invariant i80: (i==10 ==> y in {1,5});\nloop invariant i81: (i==10 ==> x in {1,2});\nloop invariant i82: (i < 10 ==> y in {3,4,6});\nloop invariant i83: (i < 10 ==> x in {3,4});\nloop invariant i84: (i==1 ==> x == 1);\nloop invariant i85: (i==1 ==> y in {3,4});\nloop invariant i86: (i==2 ==> x == 2);\nloop invariant i87: (i==2 ==> y == 3);\nloop invariant i88: (i==3 ==> x == 3);\nloop invariant i89: (i==3 ==> y == 4);\nloop invariant i90: (i==4 ==> x == 1);\nloop invariant i91: (i==4 ==> y == 5);\nloop invariant i92: (i==5 ==> x == 2);\nloop invariant i93: (i==5 ==> y == 6);\nloop invariant i94: (i==6 ==> x == 3);\nloop invariant i95: (i==6 ==> y in {4,6});\nloop invariant i96: (i==7 ==> x == 1);\nloop invariant i97: (i==7 ==> y in {5,6});\nloop invariant i98: (i==8 ==> x == 2);\nloop invariant i99: (i==8 ==> y in {6});\nloop invariant i100: (i==9 ==> x == 3);\nloop invariant i101: (i==9 ==> y in {6});\nloop invariant i102: (i==10 ==> i==10);\nloop invariant i103: (x == 2 ==> y == 3);\nloop invariant i104: (x == 3 ==> y == 4);\nloop invariant i105: (x == 1 ==> y == 5);\nloop invariant i106: (x == 4 ==> y == 6);\nloop invariant i107: (x != 1 ==> x != 3 ==> x != 4 ==> y == 1);\nloop invariant i108: (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4);\nloop invariant i109: (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4);\nloop invariant i110: (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4);\nloop invariant i111: (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3);\nloop invariant i112: i >= x - 1;\nloop invariant i113: y == 3 * i + 1;\nloop invariant i114: !(x==4 && y==6);\nloop invariant i115: !(x == 4 && y == 6);\nloop invariant i116: x >= 1;\nloop invariant i117: y >= 1;\nloop invariant i118: x <= 4;\nloop invariant i119: i + x >= 2;\nloop invariant i120: i + x <= 14;\nloop invariant i121: i + x + y >= 3;\nloop invariant i122: i + x + y <= 15;\nloop invariant i123: x == 1 ==> y == 5;\nloop invariant i124: x == 2 ==> y == 4;\nloop invariant i125: x == 3 ==> y == 3;\nloop invariant i126: x == 4 ==> y == 6;\nloop invariant i127: x == 4 ==> i == 9;\nloop invariant i128: x == 3 ==> i == 8;\nloop invariant i129: x == 3 ==> y == 5;\nloop invariant i130: x == 2 ==> i == 7;\nloop invariant i131: x == 1 ==> i == 6;\nloop invariant i132: x == 1 ==> y == 3;\nloop invariant i133: x >= 1 ==> y <= 6;\nloop invariant i134: x == 2 ==> y >= 4;\nloop invariant i135: x == 3 ==> y >= 3;\nloop invariant i136: x == 4 ==> y >= 6;\nloop invariant i137: x <= 4 ==> y <= 6;\nloop invariant i138: x <= 4 ==> y >= 1;\nloop invariant i139: x >= 1 ==> y >= 1;\nloop invariant i140: (i >= 0 && i <= 9);\nloop invariant i141: (x >= 1 && x <= 4);\nloop invariant i142: (y >= 0 && y <= 6);\nloop invariant i143: x == 2 ==> y == 3;\nloop invariant i144: x == 3 ==> y == 4;\nloop invariant i145: x == 1 ==> y == 5 || y == 6;\nloop invariant i146: ( i >= 0 );\nloop invariant i147: ( i <= 10 );\nloop invariant i148: ( x == 1 || x == 2 || x == 3 || x == 4 );\nloop invariant i149: ( y == 3 || y == 4 || y == 5 || y == 6 );\nloop invariant i150: ( i >= 0 ) && ( i <= 10 );\nloop invariant i151: ( x == ( ( i % 4 ) + 1 ) );\nloop invariant i152: ( y == ( ( ( ( i % 4 ) * 2 ) + 3 ) + ( ( i / 4 ) * 5 ) ) );\nloop invariant i153: !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) );\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
            "combined_annotation_num_solver_calls": 65,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: 1 <= x <= 4;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i22: i < 1 ==> x == 1;\n\nloop invariant i24: i < 0 ==> x == 2;\nloop invariant i25: i < 0 ==> y == 3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i44: i == 1 ==> x == 2;\nloop invariant i45: i == 1 ==> y == 3;\n\n\n\n\n\n\n\n\n\nloop invariant i55: i == 7 ==> y >= 3;\n\n\n\n\n\n\n\nloop invariant i63: i == 3 ==> y >= 4;\nloop invariant i64: i == 2 ==> x >= 3;\n\n\nloop invariant i67: i == 1 ==> y >= 3;\n\n\n\n\nloop invariant i72: (i < 10) ==> (x != 4);\n\n\nloop invariant i75: !( (i == 10) && (x == 1) && (y == 6) );\nloop invariant i76: x == 1 || x == 2 || x == 3 || x == 4;\n\nloop invariant i78: i == 10 ==> !( y == 6 );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i102: (i==10 ==> i==10);\nloop invariant i103: (x == 2 ==> y == 3);\nloop invariant i104: (x == 3 ==> y == 4);\n\nloop invariant i106: (x == 4 ==> y == 6);\n\nloop invariant i108: (x == 1 ==> y == 5 ==> x != 2 ==> x != 3 ==> x != 4);\nloop invariant i109: (x == 2 ==> y == 3 ==> x != 1 ==> x != 3 ==> x != 4);\nloop invariant i110: (x == 3 ==> y == 4 ==> x != 1 ==> x != 2 ==> x != 4);\nloop invariant i111: (x == 4 ==> y == 6 ==> x != 1 ==> x != 2 ==> x != 3);\nloop invariant i112: i >= x - 1;\n\nloop invariant i114: !(x==4 && y==6);\nloop invariant i115: !(x == 4 && y == 6);\nloop invariant i116: x >= 1;\n\nloop invariant i118: x <= 4;\n\nloop invariant i120: i + x <= 14;\n\n\n\n\n\nloop invariant i126: x == 4 ==> y == 6;\nloop invariant i127: x == 4 ==> i == 9;\n\n\n\n\n\n\n\nloop invariant i135: x == 3 ==> y >= 3;\nloop invariant i136: x == 4 ==> y >= 6;\n\n\n\n\nloop invariant i141: (x >= 1 && x <= 4);\n\nloop invariant i143: x == 2 ==> y == 3;\nloop invariant i144: x == 3 ==> y == 4;\n\nloop invariant i146: ( i >= 0 );\nloop invariant i147: ( i <= 10 );\nloop invariant i148: ( x == 1 || x == 2 || x == 3 || x == 4 );\n\nloop invariant i150: ( i >= 0 ) && ( i <= 10 );\n\n\nloop invariant i153: !( ( ( ( i % 4 ) == 3 ) && ( x == 4 ) ) && ( y == 6 ) );\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/code2inv/17.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant n >= 1;\nloop invariant unknown ==> x < n;\nloop invariant !unknown ==> x == n;\nloop invariant !unknown ==> m == n;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant 0 <= m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n > 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m == 1 ==> (m < x);\nloop invariant m == x ==> (m < n);\nloop invariant m == n ==> (m < n);\nloop invariant m == n ==> (x < n);\nloop invariant m == n ==> (x >= n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (x == n) ==> (m < n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n > 1;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n > 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x <= n;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant x >= m;\nloop invariant (if (n > 1) then m < n else true ==> true);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant (if n > 1 then m < n else true);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant x >= m;\nloop invariant m < n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant n >= 2;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m == x || x == n;\nloop invariant unknown() ==> m == x;\nloop invariant !unknown() ==> m < x;\nloop invariant n <= 1 ==> m <= n; loop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m == x || x == n;\nloop invariant unknown() ==> m == x;\nloop invariant !unknown() ==> m < x;\nloop invariant n <= 1 ==> m <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 < x;\nloop invariant x <= n;\nloop invariant m >= x;\nloop invariant m <= n;\nloop invariant x <= m;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant x < n;\nloop invariant (x >= n) ==> (m < n);\nloop invariant (x < n) ==> (m <= x);\nloop invariant (x < n) ==> (m <= n);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant n >= 1;\nloop invariant unknown ==> x < n;\nloop invariant !unknown ==> x == n;\nloop invariant !unknown ==> m == n;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\nloop invariant !unknown ==> m >= 1;\nloop invariant !unknown ==> m <= n;\nloop invariant !unknown ==> m == m;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m >= 1 is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant unknown ==> x < n is neither established nor preserved.\nloop invariant !unknown ==> x == n is partially proven to be inductive.\nloop invariant !unknown ==> m == n is partially proven to be inductive.\nloop invariant !unknown ==> m <= n is partially proven to be inductive.\nloop invariant !unknown ==> m == m is partially proven to be inductive.\nloop invariant !unknown ==> m >= 1 is partially proven to be inductive.\nAssertion m < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 1;\n\n\nloop invariant i6: !unknown ==> x == n;\nloop invariant i7: !unknown ==> m == n;\nloop invariant i8: !unknown ==> m <= n;\nloop invariant i9: !unknown ==> m == m;\nloop invariant i10: !unknown ==> m >= 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\nloop invariant 0 <= m <= x;\nloop invariant x <= n;\nloop invariant m <= x;\nloop invariant x <= n;\nloop invariant m <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= m <= x is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: 0 <= m <= x;\n\nloop invariant i3: m <= x;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n > 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant n > 1 is preserved but not established.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= n;\nloop invariant m == 1 ==> (m < x);\nloop invariant m == x ==> (m < n);\nloop invariant m == n ==> (m < n);\nloop invariant m == n ==> (x < n);\nloop invariant m == n ==> (x >= n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\nloop invariant m == n ==> (x == n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= n is preserved but not established.\nloop invariant m == 1 ==> (m < x) is preserved but not established.\nloop invariant m == x ==> (m < n) is partially proven to be inductive.\nloop invariant m == n ==> (m < n) is partially proven to be inductive.\nloop invariant m == n ==> (x < n) is partially proven to be inductive.\nloop invariant m == n ==> (x >= n) is partially proven to be inductive.\nloop invariant m == n ==> (x == n) is partially proven to be inductive.\nAssertion m < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\n\n\n\nloop invariant i6: m == n ==> (x >= n);\nloop invariant i7: m == n ==> (x == n);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 0 <= m <= n;\nloop invariant m <= x;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 0 <= m <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant x >= 1;\nloop invariant x <= n;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant (x == n) ==> (m < n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant m >= 1 is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant (x == n) ==> (m < n) is preserved but not established.\nAssertion m < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: x >= 1;\n\nloop invariant i4: m >= 1;\nloop invariant i5: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n > 1;\nloop invariant 0 <= x <= n;\nloop invariant x >= m;\nloop invariant m >= 1;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant n > 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= m is partially proven to be inductive.\nloop invariant m >= 1 is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant n > 1 is preserved but not established.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: x >= m;\nloop invariant i3: m >= 1;\nloop invariant i4: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant m <= n;\nloop invariant m <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 1 <= m <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant m <= x <= n is partially proven to be inductive.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant x >= m;\nloop invariant (if (n > 1) then m < n else true ==> true);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token '('",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: x >= m;\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant m <= x;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant (if n > 1 then m < n else true);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 21: unexpected token 'n'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 1;\nloop invariant i4: x >= 1;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant x >= m;\nloop invariant m < n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant n >= 2;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\nloop invariant m >= 1;\nloop invariant m <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 1 <= m <= n is partially proven to be inductive.\nloop invariant x >= m is partially proven to be inductive.\nloop invariant m < n is preserved but not established.\nloop invariant m >= 1 is partially proven to be inductive.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant n >= 2 is partially proven to be inductive.\nAssertion m < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: x >= m;\n\nloop invariant i5: m >= 1;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m == x || x == n;\nloop invariant unknown() ==> m == x;\nloop invariant !unknown() ==> m < x;\nloop invariant n <= 1 ==> m <= n; loop invariant 0 <= x <= n;\nloop invariant 1 <= m <= x;\nloop invariant m == x || x == n;\nloop invariant unknown() ==> m == x;\nloop invariant !unknown() ==> m < x;\nloop invariant n <= 1 ==> m <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: 1 <= m <= x;\n\n\n\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 < x;\nloop invariant x <= n;\nloop invariant m >= x;\nloop invariant m <= n;\nloop invariant x <= m;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\nloop invariant m <= 100000;\nloop invariant x <= 100000;\nloop invariant m >= 1;\nloop invariant x >= 1;\nloop invariant n >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 < x is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nloop invariant m >= x is established but not preserved.\nloop invariant m <= n is partially proven to be inductive.\nloop invariant x <= m is partially proven to be inductive.\nloop invariant x >= 1 is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant m >= 1 is partially proven to be inductive.\nloop invariant m <= 100000 is partially proven to be inductive.\nloop invariant x <= 100000 is partially proven to be inductive.\nAssertion m < n: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: 0 < x;\n\n\n\n\nloop invariant i6: x >= 1;\n\nloop invariant i8: m >= 1;\n\n\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant 1 <= m <= n;\nloop invariant m <= x;\nloop invariant x < n;\nloop invariant (x >= n) ==> (m < n);\nloop invariant (x < n) ==> (m <= x);\nloop invariant (x < n) ==> (m <= n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant 1 <= m <= n is partially proven to be inductive.\nloop invariant m <= x is partially proven to be inductive.\nloop invariant x < n is neither established nor preserved.\nloop invariant (x >= n) ==> (m < n) is partially proven to be inductive.\nloop invariant (x < n) ==> (m <= x) is partially proven to be inductive.\nloop invariant (x < n) ==> (m <= n) is partially proven to be inductive.\nAssertion m < n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\n\nloop invariant i3: m <= x;\n\n\nloop invariant i6: (x < n) ==> (m <= x);\nloop invariant i7: (x < n) ==> (m <= n);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 44: unexpected token '('",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m <= x;\nloop invariant i3: m >= 1;\nloop invariant i4: n >= 1;\nloop invariant i5: unknown ==> x < n;\nloop invariant i6: !unknown ==> x == n;\nloop invariant i7: !unknown ==> m == n;\nloop invariant i8: !unknown ==> m <= n;\nloop invariant i9: !unknown ==> m == m;\nloop invariant i10: !unknown ==> m >= 1;\nloop invariant i11: 0 <= m <= x;\nloop invariant i12: x <= n;\nloop invariant i13: m <= n;\nloop invariant i14: n > 1;\nloop invariant i15: 1 <= x <= n;\nloop invariant i16: m == 1 ==> (m < x);\nloop invariant i17: m == x ==> (m < n);\nloop invariant i18: m == n ==> (m < n);\nloop invariant i19: m == n ==> (x < n);\nloop invariant i20: m == n ==> (x >= n);\nloop invariant i21: m == n ==> (x == n);\nloop invariant i22: 0 <= m <= n;\nloop invariant i23: 1 <= n;\nloop invariant i24: x >= 1;\nloop invariant i25: (x == n) ==> (m < n);\nloop invariant i26: x >= m;\nloop invariant i27: 1 <= m <= n;\nloop invariant i28: m <= x <= n;\nloop invariant i29: (if (n > 1) then m < n else true ==> true);\nloop invariant i30: (if n > 1 then m < n else true);\nloop invariant i31: m < n;\nloop invariant i32: n >= 2;\nloop invariant i33: 1 <= m <= x;\nloop invariant i34: m == x || x == n;\nloop invariant i35: unknown() ==> m == x;\nloop invariant i36: !unknown() ==> m < x;\nloop invariant i37: n <= 1 ==> m <= n; loop invariant 0 <= x <= n;\nloop invariant i38: n <= 1 ==> m <= n;\nloop invariant i39: 0 < x;\nloop invariant i40: m >= x;\nloop invariant i41: x <= m;\nloop invariant i42: m <= 100000;\nloop invariant i43: x <= 100000;\nloop invariant i44: x < n;\nloop invariant i45: (x >= n) ==> (m < n);\nloop invariant i46: (x < n) ==> (m <= x);\nloop invariant i47: (x < n) ==> (m <= n);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
            "combined_annotation_num_solver_calls": 17,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\n\nloop invariant i2: m <= x;\nloop invariant i3: m >= 1;\n\n\nloop invariant i6: !unknown ==> x == n;\nloop invariant i7: !unknown ==> m == n;\nloop invariant i8: !unknown ==> m <= n;\nloop invariant i9: !unknown ==> m == m;\nloop invariant i10: !unknown ==> m >= 1;\nloop invariant i11: 0 <= m <= x;\n\n\n\n\n\n\n\n\nloop invariant i20: m == n ==> (x >= n);\nloop invariant i21: m == n ==> (x == n);\n\n\nloop invariant i24: x >= 1;\n\nloop invariant i26: x >= m;\n\n\n\n\n\n\nloop invariant i33: 1 <= m <= x;\n\n\n\n\n\nloop invariant i39: 0 < x;\n\n\n\n\n\n\nloop invariant i46: (x < n) ==> (m <= x);\nloop invariant i47: (x < n) ==> (m <= n);\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n\n    }\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    while (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant x + y >= y;\nloop invariant y >= 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 < x <= -50 + y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y < LARGE_INT;\nloop invariant x + y > 0;\nloop invariant y > 0 ==> x + y <= LARGE_INT;\nloop invariant y > 0 ==> x + y > -50;\n*/\n```",
                "```\n/*@\nloop invariant 0 < x;\nloop invariant -50 < x < 0;\nloop invariant y > 0;\nloop invariant x + y < LARGE_INT;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y >= 0;\nloop invariant x < y;\nloop invariant y < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x + y < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x <= LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant -50 <= y <= 1000000;\nloop invariant -50 <= x <= 1000000;\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= y <= LARGE_INT;\nloop invariant x + y > 0;\nloop invariant x < LARGE_INT;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant -50 <= x <= -1;\nloop invariant -1000 < y < LARGE_INT;\nloop invariant x >= -50 * y;\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y; loop invariant 0 <= y <= LARGE_INT; loop invariant 0 <= x + y <= LARGE_INT;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 + (y - 1) * y / 2 <= x <= -50 + y * y / 2;\nloop invariant x >= y;\nloop invariant x >= -50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant -50 <= x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x <= -50 + y;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y > x;\nloop invariant y >= -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant x >= -50;\nloop invariant x + y >= y;\nloop invariant y >= 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x + y >= y is preserved but not established.\nloop invariant y >= 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 < x <= -50 + y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant -50 < x <= -50 + y is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y < LARGE_INT;\nloop invariant x + y > 0;\nloop invariant y > 0 ==> x + y <= LARGE_INT;\nloop invariant y > 0 ==> x + y > -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y < LARGE_INT is neither established nor preserved.\nloop invariant x + y > 0 is preserved but not established.\nloop invariant y > 0 ==> x + y <= LARGE_INT is established but not preserved.\nloop invariant y > 0 ==> x + y > -50 is partially proven to be inductive.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 < x;\nloop invariant -50 < x < 0;\nloop invariant y > 0;\nloop invariant x + y < LARGE_INT;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y >= 0;\nloop invariant x < y;\nloop invariant y < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x + y < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x <= LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\nloop invariant x < LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 < x is preserved but not established.\nloop invariant -50 < x < 0 is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant x + y < LARGE_INT is partially proven to be inductive.\nloop invariant y < LARGE_INT is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x < y is partially proven to be inductive.\nloop invariant x < LARGE_INT is partially proven to be inductive.\nloop invariant x <= LARGE_INT is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant -50 <= y <= 1000000;\nloop invariant -50 <= x <= 1000000;\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant -50 <= y <= 1000000 is established but not preserved.\nloop invariant -50 <= x <= 1000000 is partially proven to be inductive.\nloop invariant y > 0 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= y <= LARGE_INT;\nloop invariant x + y > 0;\nloop invariant x < LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= y <= LARGE_INT is neither established nor preserved.\nloop invariant x + y > 0 is preserved but not established.\nloop invariant x < LARGE_INT is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant -50 <= x <= -1;\nloop invariant -1000 < y < LARGE_INT;\nloop invariant x >= -50 * y;\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant -50 <= x <= -1 is established but not preserved.\nloop invariant -1000 < y < LARGE_INT is partially proven to be inductive.\nloop invariant x >= -50 * y is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y; loop invariant 0 <= y <= LARGE_INT; loop invariant 0 <= x + y <= LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= y; loop invariant 0 <= y <= LARGE_INT; loop invariant 0 <= x + y <= LARGE_INT is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 + (y - 1) * y / 2 <= x <= -50 + y * y / 2;\nloop invariant x >= y;\nloop invariant x >= -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is preserved but not established.\nloop invariant -50 + (y - 1) * y / 2 <= x <= -50 + y * y / 2 is preserved but not established.\nloop invariant x >= y is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant -50 <= x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x + y >= 0;\nloop invariant x + y < LARGE_INT;\nloop invariant x >= -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= y is preserved but not established.\nloop invariant -50 <= x < 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y < LARGE_INT is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x + y < LARGE_INT is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x <= -50 + y;\nloop invariant y <= LARGE_INT;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y > x;\nloop invariant y >= -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant y > 0;\nloop invariant y > -50 + x;\nloop invariant y >= x;\nloop invariant y >= 1;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x <= -50 + y is established but not preserved.\nloop invariant y <= LARGE_INT is partially proven to be inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y < LARGE_INT is established but not preserved.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant y > -50 + x is partially proven to be inductive.\nloop invariant y >= x is partially proven to be inductive.\nloop invariant y > x is partially proven to be inductive.\nloop invariant y >= -50 + x is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant 0 <= y <= LARGE_INT is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x + y >= y is partially proven to be inductive.\nloop invariant y >= 1 is partially proven to be inductive.\nloop invariant -50 < x <= -50 + y is partially proven to be inductive.\nloop invariant 0 <= y < LARGE_INT is partially proven to be inductive.\nloop invariant x + y > 0 is partially proven to be inductive.\nloop invariant y > 0 ==> x + y <= LARGE_INT is partially proven to be inductive.\nloop invariant y > 0 ==> x + y > -50 is partially proven to be inductive.\nloop invariant 0 < x is partially proven to be inductive.\nloop invariant -50 < x < 0 is partially proven to be inductive.\nloop invariant y > 0 is partially proven to be inductive.\nloop invariant x + y < LARGE_INT is partially proven to be inductive.\nloop invariant y < LARGE_INT is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x < y is partially proven to be inductive.\nloop invariant x < LARGE_INT is partially proven to be inductive.\nloop invariant x <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant -50 <= y <= 1000000 is partially proven to be inductive.\nloop invariant -50 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 1 <= y <= LARGE_INT is partially proven to be inductive.\nloop invariant -50 <= x <= -1 is partially proven to be inductive.\nloop invariant -1000 < y < LARGE_INT is partially proven to be inductive.\nloop invariant x >= -50 * y is partially proven to be inductive.\nloop invariant 0 <= x <= y; loop invariant 0 <= y <= LARGE_INT; loop invariant 0 <= x + y <= LARGE_INT is partially proven to be inductive.\nloop invariant -50 + (y - 1) * y / 2 <= x <= -50 + y * y / 2 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant 0 <= x <= -50 is partially proven to be inductive.\nloop invariant 0 <= x <= y is partially proven to be inductive.\nloop invariant -50 <= x < 0 is partially proven to be inductive.\nloop invariant x + y >= 0 is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant x <= -50 + y is partially proven to be inductive.\nloop invariant y <= LARGE_INT is partially proven to be inductive.\nloop invariant y > -50 + x is partially proven to be inductive.\nloop invariant y >= x is partially proven to be inductive.\nloop invariant y > x is partially proven to be inductive.\nloop invariant y >= -50 + x is partially proven to be inductive.\nAssertion y > 0: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 <= y <= 100000;\nloop invariant i2: x >= (1 + (y - 1) * y / 2);\nloop invariant i3: 0 <= y <= LARGE_INT;\nloop invariant i4: x >= -50;\nloop invariant i5: x + y >= y;\nloop invariant i6: y >= 1;\nloop invariant i7: -50 < x <= -50 + y;\nloop invariant i8: 0 <= y < LARGE_INT;\nloop invariant i9: x + y > 0;\nloop invariant i10: y > 0 ==> x + y <= LARGE_INT;\nloop invariant i11: y > 0 ==> x + y > -50;\nloop invariant i12: 0 < x;\nloop invariant i13: -50 < x < 0;\nloop invariant i14: y > 0;\nloop invariant i15: x + y < LARGE_INT;\nloop invariant i16: y < LARGE_INT;\nloop invariant i17: y >= 0;\nloop invariant i18: x < y;\nloop invariant i19: x < LARGE_INT;\nloop invariant i20: x <= LARGE_INT;\nloop invariant i21: 0 <= y;\nloop invariant i22: -50 <= y <= 1000000;\nloop invariant i23: -50 <= x <= 1000000;\nloop invariant i24: 1 <= y <= LARGE_INT;\nloop invariant i25: -50 <= x <= -1;\nloop invariant i26: -1000 < y < LARGE_INT;\nloop invariant i27: x >= -50 * y;\nloop invariant i28: 0 <= x <= y; loop invariant 0 <= y <= LARGE_INT; loop invariant 0 <= x + y <= LARGE_INT;\nloop invariant i29: -50 + (y - 1) * y / 2 <= x <= -50 + y * y / 2;\nloop invariant i30: x >= y;\nloop invariant i31: 0 <= x <= -50;\nloop invariant i32: 0 <= x <= y;\nloop invariant i33: -50 <= x < 0;\nloop invariant i34: x + y >= 0;\nloop invariant i35: x < 0;\nloop invariant i36: x <= -50 + y;\nloop invariant i37: y <= LARGE_INT;\nloop invariant i38: y > -50 + x;\nloop invariant i39: y >= x;\nloop invariant i40: y > x;\nloop invariant i41: y >= -50 + x;\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 16,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/111.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant (sn == (i - 1));\nloop invariant (i - 1) <= n;\nloop invariant (i - 1) >= 1;\nloop invariant (sn + 1) == i;\nloop invariant (sn + 1) <= n;\nloop invariant (sn + 1) >= 1;\nloop invariant i <= n ==> (sn == (i - 1));\nloop invariant i <= n ==> (sn + 1) == i;\nloop invariant i <= n ==> (sn + 1) <= n;\nloop invariant i <= n ==> (sn + 1) >= 1;\nloop invariant (sn == (i - 1)) ==> (sn <= n);\nloop invariant (sn == (i - 1)) ==> (sn >= 0);\nloop invariant (sn + 1) == i ==> (sn <= n);\nloop invariant (sn + 1) == i ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (i <= n);\nloop invariant (i - 1) <= n ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (i <= n);\nloop invariant (sn + 1) >= 1 ==> (i >= 1);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (i <= n);\nloop invariant (sn + 1) <= n ==> (i >= 1);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (i <= n);\nloop invariant (sn + 1) >= 1 ==> (i >= 1);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (sn == (i - 1)) ==> (sn <= n);\nloop invariant (sn == (i - 1)) ==> (sn >= 0);\nloop invariant (sn + 1) == i ==> (sn <= n);\nloop invariant (sn + 1) == i ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) <= n ==> (i <= n);\nloop invariant (i - 1) <= n ==> (i >= 1);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 1;\nloop invariant sn <= i;\nloop invariant sn == (i - 1);\nloop invariant i == (n + 1);\nloop invariant sn == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn < n ==> i <= n;\nloop invariant sn < n ==> i >= 1;\nloop invariant sn == n ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1;\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n;\nloop invariant sn < n ==> i <= n ==> sn <= n;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn == n - i + 1;\nloop invariant sn == 0 ==> i > n;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == n ==> i >= n;\nloop invariant sn == n ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i <= n;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant 0 <= sn;\nloop invariant sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - i + 1);\nloop invariant sn == (n - i);\nloop invariant sn == (i + sn);\nloop invariant sn == (i + n - i);\nloop invariant sn == n;\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 1;\nloop invariant sn >= 0;\nloop invariant sn == i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant i > 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
                "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant sn != 0 ==> sn == n;\nloop invariant sn != 0 ==> sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn == sn;\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\n*/\n```",
                "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant sn + i - 1 == n;\nloop invariant sn + i - 1 == n;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn + i - 1 == n ==> sn <= n;\nloop invariant sn + i - 1 == n ==> i <= n;\nloop invariant sn + i - 1 == n ==> sn + i - 1 <= n;\nloop invariant sn + i - 1 == n ==> sn + i - 1 >= 0;\nloop invariant sn + i - 1 == n ==> sn <= i;\nloop invariant sn + i - 1 == n ==> sn <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant sn == n - (n - i + 1);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant (sn == (i - 1));\nloop invariant (i - 1) <= n;\nloop invariant (i - 1) >= 1;\nloop invariant (sn + 1) == i;\nloop invariant (sn + 1) <= n;\nloop invariant (sn + 1) >= 1;\nloop invariant i <= n ==> (sn == (i - 1));\nloop invariant i <= n ==> (sn + 1) == i;\nloop invariant i <= n ==> (sn + 1) <= n;\nloop invariant i <= n ==> (sn + 1) >= 1;\nloop invariant (sn == (i - 1)) ==> (sn <= n);\nloop invariant (sn == (i - 1)) ==> (sn >= 0);\nloop invariant (sn + 1) == i ==> (sn <= n);\nloop invariant (sn + 1) == i ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (i <= n);\nloop invariant (i - 1) <= n ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (i <= n);\nloop invariant (sn + 1) >= 1 ==> (i >= 1);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (i <= n);\nloop invariant (sn + 1) <= n ==> (i >= 1);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (i <= n);\nloop invariant (sn + 1) >= 1 ==> (i >= 1);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (sn == (i - 1)) ==> (sn <= n);\nloop invariant (sn == (i - 1)) ==> (sn >= 0);\nloop invariant (sn + 1) == i ==> (sn <= n);\nloop invariant (sn + 1) == i ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) <= n ==> (i <= n);\nloop invariant (i - 1) <= n ==> (i >= 1);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant (sn == (i - 1)) is partially proven to be inductive.\nloop invariant (i - 1) <= n is partially proven to be inductive.\nloop invariant (i - 1) >= 1 is preserved but not established.\nloop invariant (sn + 1) == i is partially proven to be inductive.\nloop invariant (sn + 1) <= n is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 is partially proven to be inductive.\nloop invariant i <= n ==> (sn == (i - 1)) is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) == i is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) <= n is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) >= 1 is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) == i ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) == i ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (i <= n) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (i >= 1) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (i <= n) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (i >= 1) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (sn <= n) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (sn <= n) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (i <= n) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (i >= 1) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (i <= n) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (i >= 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: (sn == (i - 1));\n\n\nloop invariant i6: (sn + 1) == i;\n\nloop invariant i8: (sn + 1) >= 1;\nloop invariant i9: i <= n ==> (sn == (i - 1));\nloop invariant i10: i <= n ==> (sn + 1) == i;\nloop invariant i11: i <= n ==> (sn + 1) <= n;\nloop invariant i12: i <= n ==> (sn + 1) >= 1;\n\nloop invariant i14: (sn == (i - 1)) ==> (sn >= 0);\n\nloop invariant i16: (sn + 1) == i ==> (sn >= 0);\nloop invariant i17: (sn + 1) <= n ==> (sn <= n);\nloop invariant i18: (sn + 1) <= n ==> (sn >= 0);\n\nloop invariant i20: (sn + 1) >= 1 ==> (sn >= 0);\n\nloop invariant i22: (i - 1) >= 1 ==> (i >= 1);\n\nloop invariant i24: (i - 1) <= n ==> (i >= 1);\nloop invariant i25: (i - 1) <= n ==> (sn <= n);\nloop invariant i26: (i - 1) <= n ==> (sn >= 0);\nloop invariant i27: (i - 1) >= 1 ==> (sn <= n);\nloop invariant i28: (i - 1) >= 1 ==> (sn >= 0);\n\nloop invariant i30: (sn + 1) >= 1 ==> (i >= 1);\nloop invariant i31: (sn + 1) <= n ==> (i <= n);\nloop invariant i32: (sn + 1) <= n ==> (i >= 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 1;\nloop invariant sn <= i;\nloop invariant sn == (i - 1);\nloop invariant i == (n + 1);\nloop invariant sn == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 1 is preserved but not established.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == (n + 1) is partially proven to be inductive.\nloop invariant sn == n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\nloop invariant i4: sn == (i - 1);\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i >= 1;\n\nloop invariant i6: sn == i - 1;\nloop invariant i7: sn <= i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn < n ==> i <= n;\nloop invariant sn < n ==> i >= 1;\nloop invariant sn == n ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1;\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n;\nloop invariant sn < n ==> i <= n ==> sn <= n;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n is partially proven to be inductive.\nloop invariant sn < n ==> i >= 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 is established but not preserved.\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == 0 ==> i == 1;\n\nloop invariant i6: sn < n ==> i >= 1;\n\nloop invariant i8: sn == n ==> i == n + 1 ==> sn == i - 1;\nloop invariant i9: sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n;\nloop invariant i10: sn < n ==> i <= n ==> sn <= n;\nloop invariant i11: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1;\nloop invariant i12: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0;\nloop invariant i13: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n;\nloop invariant i14: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0;\nloop invariant i15: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0;\nloop invariant i16: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i17: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i18: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i19: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i20: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i21: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i22: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i23: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i24: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i25: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is established but not preserved.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn == n - i + 1;\nloop invariant sn == 0 ==> i > n;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == n ==> i >= n;\nloop invariant sn == n ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i <= n;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == n - i + 1 is preserved but not established.\nloop invariant sn == 0 ==> i > n is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn == n ==> i >= n is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i <= n is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == i - 1;\n\n\nloop invariant i7: sn == 0 ==> i == 1;\nloop invariant i8: sn == n ==> i >= n;\nloop invariant i9: sn == n ==> i == n + 1;\n\nloop invariant i11: sn == n ==> i == n + 1 ==> i == n + 1;\nloop invariant i12: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i13: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i14: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i15: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i16: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i17: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i18: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i19: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i20: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i21: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i22: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i23: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant 0 <= sn;\nloop invariant sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - i + 1);\nloop invariant sn == (n - i);\nloop invariant sn == (i + sn);\nloop invariant sn == (i + n - i);\nloop invariant sn == n;\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= n is preserved but not established.\nloop invariant 0 <= sn is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) is preserved but not established.\nloop invariant sn == (n - i) is partially proven to be inductive.\nloop invariant sn == (i + sn) is partially proven to be inductive.\nloop invariant sn == (i + n - i) is partially proven to be inductive.\nloop invariant sn == n is partially proven to be inductive.\nloop invariant sn == (n - (n - i)) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: 0 <= sn;\n\nloop invariant i5: sn == (i - 1);\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 1;\nloop invariant sn >= 0;\nloop invariant sn == i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\nloop invariant i4: sn == i - 1;\n\n\nloop invariant i7: sn <= i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant i > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i > 0 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: i > 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is established but not preserved.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant sn != 0 ==> sn == n;\nloop invariant sn != 0 ==> sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn != 0 ==> sn == n is established but not preserved.\nloop invariant sn != 0 ==> sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= i - 1;\n\nloop invariant i6: sn == i - 1;\n\nloop invariant i8: sn != 0 ==> sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn == sn;\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == sn is partially proven to be inductive.\nloop invariant sn == n - (n - i) is preserved but not established.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: sn == sn;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant sn + i - 1 == n;\nloop invariant sn + i - 1 == n;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn + i - 1 == n ==> sn <= n;\nloop invariant sn + i - 1 == n ==> i <= n;\nloop invariant sn + i - 1 == n ==> sn + i - 1 <= n;\nloop invariant sn + i - 1 == n ==> sn + i - 1 >= 0;\nloop invariant sn + i - 1 == n ==> sn <= i;\nloop invariant sn + i - 1 == n ==> sn <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 < i <= n is preserved but not established.\nloop invariant sn + i - 1 == n is preserved but not established.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> i <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn + i - 1 <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn + i - 1 >= 0 is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn <= i is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: sn + i - 1 == n ==> sn + i - 1 <= n;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant sn == n - (n - i + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == n - (n - i + 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\n\nloop invariant i5: sn == i - 1;\nloop invariant i6: sn == n - (n - i + 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant (sn == (i - 1)) is partially proven to be inductive.\nloop invariant (i - 1) <= n is partially proven to be inductive.\nloop invariant (i - 1) >= 1 is preserved but not established.\nloop invariant (sn + 1) == i is partially proven to be inductive.\nloop invariant (sn + 1) <= n is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 is partially proven to be inductive.\nloop invariant i <= n ==> (sn == (i - 1)) is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) == i is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) <= n is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) >= 1 is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) == i ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) == i ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (i <= n) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (i >= 1) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (i <= n) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (i >= 1) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (sn <= n) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (sn <= n) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (i <= n) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (i >= 1) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (i <= n) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (i >= 1) is partially proven to be inductive.\nloop invariant 0 <= i <= n + 1 is partially proven to be inductive.\nloop invariant sn >= 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == (n + 1) is partially proven to be inductive.\nloop invariant sn == n is partially proven to be inductive.\nloop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n is partially proven to be inductive.\nloop invariant sn < n ==> i >= 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn == n - i + 1 is partially proven to be inductive.\nloop invariant sn == 0 ==> i > n is partially proven to be inductive.\nloop invariant sn == n ==> i >= n is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i <= n is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant 0 <= sn is partially proven to be inductive.\nloop invariant sn == (n - i + 1) is partially proven to be inductive.\nloop invariant sn == (n - i) is partially proven to be inductive.\nloop invariant sn == (i + sn) is partially proven to be inductive.\nloop invariant sn == (i + n - i) is partially proven to be inductive.\nloop invariant sn == (n - (n - i)) is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant 1 <= i <= n+1 is partially proven to be inductive.\nloop invariant i > 0 is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant sn != 0 ==> sn == n is partially proven to be inductive.\nloop invariant sn != 0 ==> sn == i - 1 is partially proven to be inductive.\nloop invariant sn == sn is partially proven to be inductive.\nloop invariant sn == n - (n - i) is partially proven to be inductive.\nloop invariant 0 < i <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> i <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn + i - 1 <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn + i - 1 >= 0 is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn <= i is partially proven to be inductive.\nloop invariant sn == n - (n - i + 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: 0 <= sn <= n;\nloop invariant i3: (sn == (i - 1));\nloop invariant i4: (i - 1) <= n;\nloop invariant i5: (i - 1) >= 1;\nloop invariant i6: (sn + 1) == i;\nloop invariant i7: (sn + 1) <= n;\nloop invariant i8: (sn + 1) >= 1;\nloop invariant i9: i <= n ==> (sn == (i - 1));\nloop invariant i10: i <= n ==> (sn + 1) == i;\nloop invariant i11: i <= n ==> (sn + 1) <= n;\nloop invariant i12: i <= n ==> (sn + 1) >= 1;\nloop invariant i13: (sn == (i - 1)) ==> (sn <= n);\nloop invariant i14: (sn == (i - 1)) ==> (sn >= 0);\nloop invariant i15: (sn + 1) == i ==> (sn <= n);\nloop invariant i16: (sn + 1) == i ==> (sn >= 0);\nloop invariant i17: (sn + 1) <= n ==> (sn <= n);\nloop invariant i18: (sn + 1) <= n ==> (sn >= 0);\nloop invariant i19: (sn + 1) >= 1 ==> (sn <= n);\nloop invariant i20: (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant i21: (i - 1) >= 1 ==> (i <= n);\nloop invariant i22: (i - 1) >= 1 ==> (i >= 1);\nloop invariant i23: (i - 1) <= n ==> (i <= n);\nloop invariant i24: (i - 1) <= n ==> (i >= 1);\nloop invariant i25: (i - 1) <= n ==> (sn <= n);\nloop invariant i26: (i - 1) <= n ==> (sn >= 0);\nloop invariant i27: (i - 1) >= 1 ==> (sn <= n);\nloop invariant i28: (i - 1) >= 1 ==> (sn >= 0);\nloop invariant i29: (sn + 1) >= 1 ==> (i <= n);\nloop invariant i30: (sn + 1) >= 1 ==> (i >= 1);\nloop invariant i31: (sn + 1) <= n ==> (i <= n);\nloop invariant i32: (sn + 1) <= n ==> (i >= 1);\nloop invariant i33: 0 <= i <= n + 1;\nloop invariant i34: sn >= 1;\nloop invariant i35: sn <= i;\nloop invariant i36: sn == (i - 1);\nloop invariant i37: i == (n + 1);\nloop invariant i38: sn == n;\nloop invariant i39: 0 <= i <= n;\nloop invariant i40: sn >= 0;\nloop invariant i41: sn <= n;\nloop invariant i42: i >= 1;\nloop invariant i43: i <= n;\nloop invariant i44: sn == i - 1;\nloop invariant i45: sn <= i - 1;\nloop invariant i46: sn == 0 ==> i == 1;\nloop invariant i47: sn < n ==> i <= n;\nloop invariant i48: sn < n ==> i >= 1;\nloop invariant i49: sn == n ==> i == n + 1;\nloop invariant i50: sn == n ==> i == n + 1 ==> sn == i - 1;\nloop invariant i51: sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n;\nloop invariant i52: sn < n ==> i <= n ==> sn <= n;\nloop invariant i53: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1;\nloop invariant i54: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0;\nloop invariant i55: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n;\nloop invariant i56: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0;\nloop invariant i57: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0;\nloop invariant i58: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i59: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i60: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i61: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i62: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i63: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i64: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i65: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i66: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i67: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i68: sn == n - i + 1;\nloop invariant i69: sn == 0 ==> i > n;\nloop invariant i70: sn == n ==> i >= n;\nloop invariant i71: sn == n ==> i == n + 1 ==> i <= n;\nloop invariant i72: sn == n ==> i == n + 1 ==> i == n + 1;\nloop invariant i73: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i74: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i75: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i76: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i77: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i78: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i79: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i80: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i81: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i82: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i83: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i84: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i85: 0 <= i;\nloop invariant i86: 0 <= sn;\nloop invariant i87: sn == (n - i + 1);\nloop invariant i88: sn == (n - i);\nloop invariant i89: sn == (i + sn);\nloop invariant i90: sn == (i + n - i);\nloop invariant i91: sn == (n - (n - i));\nloop invariant i92: n >= 1;\nloop invariant i93: i <= n + 1;\nloop invariant i94: 1 <= i <= n+1;\nloop invariant i95: i > 0;\nloop invariant i96: i == sn + 1;\nloop invariant i97: sn != 0 ==> sn == n;\nloop invariant i98: sn != 0 ==> sn == i - 1;\nloop invariant i99: sn == sn;\nloop invariant i100: sn == n - (n - i);\nloop invariant i101: 0 < i <= n;\nloop invariant i102: sn + i - 1 == n;\nloop invariant i103: sn + i - 1 == n ==> sn <= n;\nloop invariant i104: sn + i - 1 == n ==> i <= n;\nloop invariant i105: sn + i - 1 == n ==> sn + i - 1 <= n;\nloop invariant i106: sn + i - 1 == n ==> sn + i - 1 >= 0;\nloop invariant i107: sn + i - 1 == n ==> sn <= i;\nloop invariant i108: sn == n - (n - i + 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 13,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: (sn == (i - 1));\n\n\nloop invariant i6: (sn + 1) == i;\n\nloop invariant i8: (sn + 1) >= 1;\nloop invariant i9: i <= n ==> (sn == (i - 1));\nloop invariant i10: i <= n ==> (sn + 1) == i;\nloop invariant i11: i <= n ==> (sn + 1) <= n;\nloop invariant i12: i <= n ==> (sn + 1) >= 1;\n\nloop invariant i14: (sn == (i - 1)) ==> (sn >= 0);\n\nloop invariant i16: (sn + 1) == i ==> (sn >= 0);\nloop invariant i17: (sn + 1) <= n ==> (sn <= n);\nloop invariant i18: (sn + 1) <= n ==> (sn >= 0);\n\nloop invariant i20: (sn + 1) >= 1 ==> (sn >= 0);\n\nloop invariant i22: (i - 1) >= 1 ==> (i >= 1);\n\nloop invariant i24: (i - 1) <= n ==> (i >= 1);\nloop invariant i25: (i - 1) <= n ==> (sn <= n);\nloop invariant i26: (i - 1) <= n ==> (sn >= 0);\nloop invariant i27: (i - 1) >= 1 ==> (sn <= n);\nloop invariant i28: (i - 1) >= 1 ==> (sn >= 0);\n\nloop invariant i30: (sn + 1) >= 1 ==> (i >= 1);\nloop invariant i31: (sn + 1) <= n ==> (i <= n);\nloop invariant i32: (sn + 1) <= n ==> (i >= 1);\n\n\nloop invariant i35: sn <= i;\nloop invariant i36: sn == (i - 1);\n\n\n\nloop invariant i40: sn >= 0;\n\nloop invariant i42: i >= 1;\n\nloop invariant i44: sn == i - 1;\nloop invariant i45: sn <= i - 1;\nloop invariant i46: sn == 0 ==> i == 1;\nloop invariant i47: sn < n ==> i <= n;\nloop invariant i48: sn < n ==> i >= 1;\nloop invariant i49: sn == n ==> i == n + 1;\nloop invariant i50: sn == n ==> i == n + 1 ==> sn == i - 1;\nloop invariant i51: sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n;\nloop invariant i52: sn < n ==> i <= n ==> sn <= n;\nloop invariant i53: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1;\nloop invariant i54: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0;\nloop invariant i55: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n;\nloop invariant i56: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0;\nloop invariant i57: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0;\nloop invariant i58: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i59: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i60: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i61: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i62: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i63: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i64: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i65: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i66: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i67: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n\n\nloop invariant i70: sn == n ==> i >= n;\n\nloop invariant i72: sn == n ==> i == n + 1 ==> i == n + 1;\nloop invariant i73: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i74: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i75: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i76: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i77: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i78: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i79: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i80: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i81: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i82: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i83: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i84: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i85: 0 <= i;\nloop invariant i86: 0 <= sn;\n\n\n\n\n\n\n\n\nloop invariant i95: i > 0;\nloop invariant i96: i == sn + 1;\n\nloop invariant i98: sn != 0 ==> sn == i - 1;\nloop invariant i99: sn == sn;\n\n\n\nloop invariant i103: sn + i - 1 == n ==> sn <= n;\n\nloop invariant i105: sn + i - 1 == n ==> sn + i - 1 <= n;\nloop invariant i106: sn + i - 1 == n ==> sn + i - 1 >= 0;\nloop invariant i107: sn + i - 1 == n ==> sn <= i;\nloop invariant i108: sn == n - (n - i + 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 4 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 0;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2;\nloop invariant (x % 2) == (y % 2);\nloop invariant x % 4 == (y % 4) ==> y % 4 == 0 || y % 4 == 2;\nloop invariant x % 8 == (y % 8) ==> y % 8 == 0 || y % 8 == 2 || y % 8 == 4 || y % 8 == 6;\nloop invariant x % 16 == (y % 16) ==> y % 16 == 0 || y % 16 == 2 || y % 16 == 4 || y % 16 == 6 || y % 16 == 8 || y % 16 == 10 || y % 16 == 12 || y % 16 == 14;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 255;\nloop invariant (x % 2) == (y % 2) ==> x % 4 == y % 4;\nloop invariant (x % 2) == (y % 2) ==> x % 8 == y % 8;\nloop invariant (x % 2) == (y % 2) ==> x % 16 == y % 16;\nloop invariant (x % 2) == (y % 2) ==> x % 32 == y % 32;\nloop invariant (x % 2) == (y % 2) ==> x % 64 == y % 64;\nloop invariant (x % 2) == (y % 2) ==> x % 128 == y % 128;\nloop invariant (x % 2) == (y % 2) ==> x % 256 == y % 256;\nloop invariant (x % 2) == (y % 2) ==> x % 512 == y % 512;\nloop invariant (x % 2) == (y % 2) ==> x % 1024 == y % 1024;\nloop invariant (x % 2) == (y % 2) ==> x % 2048 == y % 2048;\nloop invariant (x % 2) == (y % 2) ==> x % 4096 == y % 4096;\nloop invariant (x % 2) == (y % 2) ==> x % 8192 == y % 8192;\nloop invariant (x % 2) == (y % 2) ==> x % 16384 == y % 16384;\nloop invariant (x % 2) == (y % 2) ==> x % 32768 == y % 32768;\nloop invariant (x % 2) == (y % 2) ==> x % 65536 == y % 65536;\nloop invariant (x % 2) == (y % 2) ==> x % 131072 == y % 131072;\nloop invariant (x % 2) == (y % 2) ==> x % 262144 == y % 262144;\nloop invariant (x % 2) == (y % 2) ==> x % 524288 == y % 524288;\nloop invariant (x % 2) == (y % 2) ==> x % 1048576 == y % 1048576;\nloop invariant (x % 2) == (y % 2) ==> x % 2097152 == y % 2097152;\nloop invariant (x % 2) == (y % 2) ==> x % 4194304 == y % 4194304;\nloop invariant (x % 2) == (y % 2) ==> x % 8388608 == y % 8388608;\nloop invariant (x % 2) == (y % 2) ==> x % 16777216 == y % 16777216;\nloop invariant (x % 2) == (y % 2) ==> x % 33554432 == y % 33554432;\nloop invariant (x % 2) == (y % 2) ==> x % 67108864 == y % 67108864;\nloop invariant (x % 2) == (y % 2) ==> x % 134217728 == y % 134217728;\nloop invariant (x % 2) == (y % 2) ==> x % 268435456 == y % 268435456;\nloop invariant (x % 2) == (y % 2) ==> x % 536870912 == y % 536870912;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant (x % 2) == (y % 2);\nloop invariant x <= y + 99;\nloop invariant x >= y;\nloop invariant x % 6 == y % 6;\nloop invariant x % 12 == y % 12;\nloop invariant x % 24 == y % 24;\nloop invariant x % 48 == y % 48;\nloop invariant x % 96 == y % 96;\nloop invariant x % 192 == y % 192;\nloop invariant x % 384 == y % 384;\nloop invariant x % 768 == y % 768;\nloop invariant x % 1536 == y % 1536;\nloop invariant x % 3072 == y % 3072;\nloop invariant x % 6144 == y % 6144;\nloop invariant x % 12288 == y % 12288;\nloop invariant x % 24576 == y % 24576;\nloop invariant x % 49152 == y % 49152;\nloop invariant x % 98304 == y % 98304;\nloop invariant x % 196608 == y % 196608;\nloop invariant x % 393216 == y % 393216;\nloop invariant x % 786432 == y % 786432;\nloop invariant x % 1572864 == y % 1572864;\nloop invariant x % 3145728 == y % 3145728;\nloop invariant x % 6291456 == y % 6291456;\nloop invariant x % 12582912 == y % 12582912;\nloop invariant x % 25165824 == y % 25165824;\nloop invariant x % 50331648 == y % 50331648;\nloop invariant x % 100663296 == y % 100663296;\nloop invariant x % 201326592 == y % 201326592;\nloop invariant x % 402653184 == y % 402653184;\nloop invariant x % 805306368 == y % 805306368;\nloop invariant x % 1610612736 == y % 1610612736;\nloop invariant x % 3221225472 == y % 3221225472;\nloop invariant x % 6442450944 == y % 6442450944;\nloop invariant x % 12884901888 == y % 12884901888;\nloop invariant x % 25769803776 == y % 25769803776;\nloop invariant x % 51539607552 == y % 51539607552;\nloop invariant x % 103079215104 == y % 103079215104;\nloop invariant x % 206158430208 == y % 206158430208;\nloop invariant x % 412316860416 == y % 412316860416;\nloop invariant x % 824633720832 == y % 824633720832;\nloop invariant x % 1649267441664 == y % 1649267441664;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= UINT_MAX;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= unknown_uint;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2) ==> (x % 4) == (y % 4);\nloop invariant (x % 2) == (y % 2) ==> (x % 8) == (y % 8);\nloop invariant (x % 2) == (y % 2) ==> (x % 16) == (y % 16);\nloop invariant (x % 2) == (y % 2) ==> (x % 32) == (y % 32);\nloop invariant (x % 2) == (y % 2) ==> (x % 64) == (y % 64);\nloop invariant (x % 2) == (y % 2) ==> (x % 128) == (y % 128);\nloop invariant (x % 2) == (y % 2) ==> (x % 256) == (y % 256);\nloop invariant (x % 2) == (y % 2) ==> (x % 512) == (y % 512);\nloop invariant (x % 2) == (y % 2) ==> (x % 1024) == (y % 1024);\nloop invariant (x % 2) == (y % 2) ==> (x % 2048) == (y % 2048);\nloop invariant (x % 2) == (y % 2) ==> (x % 4096) == (y % 4096);\nloop invariant (x % 2) == (y % 2) ==> (x % 8192) == (y % 8192);\nloop invariant (x % 2) == (y % 2) ==> (x % 16384) == (y % 16384);\nloop invariant (x % 2) == (y % 2) ==> (x % 32768) == (y % 32768);\nloop invariant (x % 2) == (y % 2) ==> (x % 65536) == (y % 65536);\nloop invariant (x % 2) == (y % 2) ==> (x % 131072) == (y % 131072);\nloop invariant (x % 2) == (y % 2) ==> (x % 262144) == (y % 262144);\nloop invariant (x % 2) == (y % 2) ==> (x % 524288) == (y % 524288);\nloop invariant (x % 2) == (y % 2) ==> (x % 1048576) == (y % 1048576);\nloop invariant (x % 2) == (y % 2) ==> (x % 2097152) == (y % 2097152);\nloop invariant (x % 2) == (y % 2) ==> (x % 4194304) == (y % 4194304);\nloop invariant (x % 2) == (y % 2) ==> (x % 8388608) == (y % 8388608);\nloop invariant (x % 2) == (y % 2) ==> (x % 16777216) == (y % 16777216);\nloop invariant (x % 2) == (y % 2) ==> (x % 33554432) == (y % 33554432);\nloop invariant (x % 2) == (y % 2) ==> (x % 67108864) == (y % 67108864);\nloop invariant (x % 2) == (y % 2) ==> (x % 134217728) == (y % 134217728);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) == (y % 2) ==> (x % 4) == (y % 4);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0;\nloop invariant y % 2 == 0;\nloop invariant x % 2 == 1;\nloop invariant y % 2 == 1;\nloop invariant x <= y + 1;\nloop invariant x >= y - 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2147483647;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0 ==> x % 4 == 0;\nloop invariant (x % 2 != 0) ==> (x % 4 == 2 || x % 4 == 0);\nloop invariant x % 4 == 0 ==> x % 8 == 0;\nloop invariant (x % 4 != 0) ==> (x % 8 == 2 || x % 8 == 4 || x % 8 == 0);\nloop invariant (x % 8 != 0) ==> (x % 16 == 4 || x % 16 == 8 || x % 16 == 0);\nloop invariant (x % 16 != 0) ==> (x % 32 == 8 || x % 32 == 16 || x % 32 == 0);\nloop invariant (x % 32 != 0) ==> (x % 64 == 16 || x % 64 == 32 || x % 64 == 0);\nloop invariant (x % 64 != 0) ==> (x % 128 == 32 || x % 128 == 64 || x % 128 == 0);\nloop invariant (x % 128 != 0) ==> (x % 256 == 64 || x % 256 == 128 || x % 256 == 0);\nloop invariant (x % 256 != 0) ==> (x % 512 == 128 || x % 512 == 256 || x % 512 == 0);\nloop invariant (x % 512 != 0) ==> (x % 1024 == 256 || x % 1024 == 512 || x % 1024 == 0);\nloop invariant (x % 1024 != 0) ==> (x % 2048 == 512 || x % 2048 == 1024 || x % 2048 == 0);\nloop invariant (x % 2048 != 0) ==> (x % 4096 == 1024 || x % 4096 == 2048 || x % 4096 == 0);\nloop invariant (x % 4096 != 0) ==> (x % 8192 == 2048 || x % 8192 == 4096 || x % 8192 == 0);\nloop invariant (x % 8192 != 0) ==> (x % 16384 == 4096 || x % 16384 == 8192 || x % 16384 == 0);\nloop invariant (x % 16384 != 0) ==> (x % 32768 == 8192 || x % 32768 == 16384 || x % 32768 == 0);\nloop invariant (x % 32768 != 0) ==> (x % 65536 == 16384 || x % 65536 == 32768 || x % 65536 == 0);\nloop invariant (x % 65536 != 0) ==> (x % 131072 == 32768 || x % 131072 == 65536 || x % 131072 == 0);\nloop invariant (x % 131072 != 0) ==> (x % 262144 == 65536 || x % 262144 == 131072 || x % 262144 == 0);\nloop invariant (x % 262144 != 0) ==> (x % 524288 == 131072 || x % 524288 == 262144 || x % 524288 == 0);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 4 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant x % 4 == 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 0;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 0 is preserved but not established.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\nloop invariant i3: y % 2 == 0 ==> x % 2 == 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2;\nloop invariant (x % 2) == (y % 2);\nloop invariant x % 4 == (y % 4) ==> y % 4 == 0 || y % 4 == 2;\nloop invariant x % 8 == (y % 8) ==> y % 8 == 0 || y % 8 == 2 || y % 8 == 4 || y % 8 == 6;\nloop invariant x % 16 == (y % 16) ==> y % 16 == 0 || y % 16 == 2 || y % 16 == 4 || y % 16 == 6 || y % 16 == 8 || y % 16 == 10 || y % 16 == 12 || y % 16 == 14;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 2 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nloop invariant x % 4 == (y % 4) ==> y % 4 == 0 || y % 4 == 2 is established but not preserved.\nloop invariant x % 8 == (y % 8) ==> y % 8 == 0 || y % 8 == 2 || y % 8 == 4 || y % 8 == 6 is partially proven to be inductive.\nloop invariant x % 16 == (y % 16) ==> y % 16 == 0 || y % 16 == 2 || y % 16 == 4 || y % 16 == 6 || y % 16 == 8 || y % 16 == 10 || y % 16 == 12 || y % 16 == 14 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 255;\nloop invariant (x % 2) == (y % 2) ==> x % 4 == y % 4;\nloop invariant (x % 2) == (y % 2) ==> x % 8 == y % 8;\nloop invariant (x % 2) == (y % 2) ==> x % 16 == y % 16;\nloop invariant (x % 2) == (y % 2) ==> x % 32 == y % 32;\nloop invariant (x % 2) == (y % 2) ==> x % 64 == y % 64;\nloop invariant (x % 2) == (y % 2) ==> x % 128 == y % 128;\nloop invariant (x % 2) == (y % 2) ==> x % 256 == y % 256;\nloop invariant (x % 2) == (y % 2) ==> x % 512 == y % 512;\nloop invariant (x % 2) == (y % 2) ==> x % 1024 == y % 1024;\nloop invariant (x % 2) == (y % 2) ==> x % 2048 == y % 2048;\nloop invariant (x % 2) == (y % 2) ==> x % 4096 == y % 4096;\nloop invariant (x % 2) == (y % 2) ==> x % 8192 == y % 8192;\nloop invariant (x % 2) == (y % 2) ==> x % 16384 == y % 16384;\nloop invariant (x % 2) == (y % 2) ==> x % 32768 == y % 32768;\nloop invariant (x % 2) == (y % 2) ==> x % 65536 == y % 65536;\nloop invariant (x % 2) == (y % 2) ==> x % 131072 == y % 131072;\nloop invariant (x % 2) == (y % 2) ==> x % 262144 == y % 262144;\nloop invariant (x % 2) == (y % 2) ==> x % 524288 == y % 524288;\nloop invariant (x % 2) == (y % 2) ==> x % 1048576 == y % 1048576;\nloop invariant (x % 2) == (y % 2) ==> x % 2097152 == y % 2097152;\nloop invariant (x % 2) == (y % 2) ==> x % 4194304 == y % 4194304;\nloop invariant (x % 2) == (y % 2) ==> x % 8388608 == y % 8388608;\nloop invariant (x % 2) == (y % 2) ==> x % 16777216 == y % 16777216;\nloop invariant (x % 2) == (y % 2) ==> x % 33554432 == y % 33554432;\nloop invariant (x % 2) == (y % 2) ==> x % 67108864 == y % 67108864;\nloop invariant (x % 2) == (y % 2) ==> x % 134217728 == y % 134217728;\nloop invariant (x % 2) == (y % 2) ==> x % 268435456 == y % 268435456;\nloop invariant (x % 2) == (y % 2) ==> x % 536870912 == y % 536870912;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 255 is preserved but not established.\nloop invariant (x % 2) == (y % 2) ==> x % 4 == y % 4 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 8 == y % 8 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 16 == y % 16 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 32 == y % 32 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 64 == y % 64 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 128 == y % 128 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 256 == y % 256 is neither established nor preserved.\nloop invariant (x % 2) == (y % 2) ==> x % 512 == y % 512 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 1024 == y % 1024 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 2048 == y % 2048 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 4096 == y % 4096 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 8192 == y % 8192 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 16384 == y % 16384 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 32768 == y % 32768 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 65536 == y % 65536 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 131072 == y % 131072 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 262144 == y % 262144 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 524288 == y % 524288 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 1048576 == y % 1048576 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 2097152 == y % 2097152 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 4194304 == y % 4194304 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 8388608 == y % 8388608 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 16777216 == y % 16777216 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 33554432 == y % 33554432 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 67108864 == y % 67108864 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 134217728 == y % 134217728 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 268435456 == y % 268435456 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> x % 536870912 == y % 536870912 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 12,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant (x % 2) == (y % 2);\nloop invariant x <= y + 99;\nloop invariant x >= y;\nloop invariant x % 6 == y % 6;\nloop invariant x % 12 == y % 12;\nloop invariant x % 24 == y % 24;\nloop invariant x % 48 == y % 48;\nloop invariant x % 96 == y % 96;\nloop invariant x % 192 == y % 192;\nloop invariant x % 384 == y % 384;\nloop invariant x % 768 == y % 768;\nloop invariant x % 1536 == y % 1536;\nloop invariant x % 3072 == y % 3072;\nloop invariant x % 6144 == y % 6144;\nloop invariant x % 12288 == y % 12288;\nloop invariant x % 24576 == y % 24576;\nloop invariant x % 49152 == y % 49152;\nloop invariant x % 98304 == y % 98304;\nloop invariant x % 196608 == y % 196608;\nloop invariant x % 393216 == y % 393216;\nloop invariant x % 786432 == y % 786432;\nloop invariant x % 1572864 == y % 1572864;\nloop invariant x % 3145728 == y % 3145728;\nloop invariant x % 6291456 == y % 6291456;\nloop invariant x % 12582912 == y % 12582912;\nloop invariant x % 25165824 == y % 25165824;\nloop invariant x % 50331648 == y % 50331648;\nloop invariant x % 100663296 == y % 100663296;\nloop invariant x % 201326592 == y % 201326592;\nloop invariant x % 402653184 == y % 402653184;\nloop invariant x % 805306368 == y % 805306368;\nloop invariant x % 1610612736 == y % 1610612736;\nloop invariant x % 3221225472 == y % 3221225472;\nloop invariant x % 6442450944 == y % 6442450944;\nloop invariant x % 12884901888 == y % 12884901888;\nloop invariant x % 25769803776 == y % 25769803776;\nloop invariant x % 51539607552 == y % 51539607552;\nloop invariant x % 103079215104 == y % 103079215104;\nloop invariant x % 206158430208 == y % 206158430208;\nloop invariant x % 412316860416 == y % 412316860416;\nloop invariant x % 824633720832 == y % 824633720832;\nloop invariant x % 1649267441664 == y % 1649267441664;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nloop invariant x <= y + 99 is partially proven to be inductive.\nloop invariant x >= y is neither established nor preserved.\nloop invariant x % 6 == y % 6 is established but not preserved.\nloop invariant x % 12 == y % 12 is established but not preserved.\nloop invariant x % 24 == y % 24 is established but not preserved.\nloop invariant x % 48 == y % 48 is established but not preserved.\nloop invariant x % 96 == y % 96 is established but not preserved.\nloop invariant x % 192 == y % 192 is established but not preserved.\nloop invariant x % 384 == y % 384 is partially proven to be inductive.\nloop invariant x % 768 == y % 768 is partially proven to be inductive.\nloop invariant x % 1536 == y % 1536 is partially proven to be inductive.\nloop invariant x % 3072 == y % 3072 is partially proven to be inductive.\nloop invariant x % 6144 == y % 6144 is partially proven to be inductive.\nloop invariant x % 12288 == y % 12288 is partially proven to be inductive.\nloop invariant x % 24576 == y % 24576 is partially proven to be inductive.\nloop invariant x % 49152 == y % 49152 is partially proven to be inductive.\nloop invariant x % 98304 == y % 98304 is partially proven to be inductive.\nloop invariant x % 196608 == y % 196608 is partially proven to be inductive.\nloop invariant x % 393216 == y % 393216 is partially proven to be inductive.\nloop invariant x % 786432 == y % 786432 is partially proven to be inductive.\nloop invariant x % 1572864 == y % 1572864 is partially proven to be inductive.\nloop invariant x % 3145728 == y % 3145728 is partially proven to be inductive.\nloop invariant x % 6291456 == y % 6291456 is partially proven to be inductive.\nloop invariant x % 12582912 == y % 12582912 is partially proven to be inductive.\nloop invariant x % 25165824 == y % 25165824 is partially proven to be inductive.\nloop invariant x % 50331648 == y % 50331648 is partially proven to be inductive.\nloop invariant x % 100663296 == y % 100663296 is partially proven to be inductive.\nloop invariant x % 201326592 == y % 201326592 is partially proven to be inductive.\nloop invariant x % 402653184 == y % 402653184 is partially proven to be inductive.\nloop invariant x % 805306368 == y % 805306368 is partially proven to be inductive.\nloop invariant x % 1610612736 == y % 1610612736 is partially proven to be inductive.\nloop invariant x % 3221225472 == y % 3221225472 is partially proven to be inductive.\nloop invariant x % 6442450944 == y % 6442450944 is partially proven to be inductive.\nloop invariant x % 12884901888 == y % 12884901888 is partially proven to be inductive.\nloop invariant x % 25769803776 == y % 25769803776 is partially proven to be inductive.\nloop invariant x % 51539607552 == y % 51539607552 is partially proven to be inductive.\nloop invariant x % 103079215104 == y % 103079215104 is partially proven to be inductive.\nloop invariant x % 206158430208 == y % 206158430208 is partially proven to be inductive.\nloop invariant x % 412316860416 == y % 412316860416 is partially proven to be inductive.\nloop invariant x % 824633720832 == y % 824633720832 is partially proven to be inductive.\nloop invariant x % 1649267441664 == y % 1649267441664 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == x % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y % 2 == x % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= UINT_MAX;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0;\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1;\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= UINT_MAX is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 is established but not preserved.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 is preserved but not established.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y <= UINT_MAX;\n\n\nloop invariant i5: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i6: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\n\n\nloop invariant i9: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0;\nloop invariant i10: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1;\nloop invariant i11: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0;\nloop invariant i12: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1;\nloop invariant i13: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0;\nloop invariant i14: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1;\nloop invariant i15: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0;\nloop invariant i16: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1;\nloop invariant i17: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0;\nloop invariant i18: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1;\nloop invariant i19: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0;\nloop invariant i20: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1;\nloop invariant i21: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0;\nloop invariant i22: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1;\nloop invariant i23: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0;\nloop invariant i24: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1;\nloop invariant i25: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0;\nloop invariant i26: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1;\nloop invariant i27: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= unknown_uint;\nloop invariant (x % 2) == (y % 2);\nloop invariant (x % 2) == (y % 2) ==> (x % 4) == (y % 4);\nloop invariant (x % 2) == (y % 2) ==> (x % 8) == (y % 8);\nloop invariant (x % 2) == (y % 2) ==> (x % 16) == (y % 16);\nloop invariant (x % 2) == (y % 2) ==> (x % 32) == (y % 32);\nloop invariant (x % 2) == (y % 2) ==> (x % 64) == (y % 64);\nloop invariant (x % 2) == (y % 2) ==> (x % 128) == (y % 128);\nloop invariant (x % 2) == (y % 2) ==> (x % 256) == (y % 256);\nloop invariant (x % 2) == (y % 2) ==> (x % 512) == (y % 512);\nloop invariant (x % 2) == (y % 2) ==> (x % 1024) == (y % 1024);\nloop invariant (x % 2) == (y % 2) ==> (x % 2048) == (y % 2048);\nloop invariant (x % 2) == (y % 2) ==> (x % 4096) == (y % 4096);\nloop invariant (x % 2) == (y % 2) ==> (x % 8192) == (y % 8192);\nloop invariant (x % 2) == (y % 2) ==> (x % 16384) == (y % 16384);\nloop invariant (x % 2) == (y % 2) ==> (x % 32768) == (y % 32768);\nloop invariant (x % 2) == (y % 2) ==> (x % 65536) == (y % 65536);\nloop invariant (x % 2) == (y % 2) ==> (x % 131072) == (y % 131072);\nloop invariant (x % 2) == (y % 2) ==> (x % 262144) == (y % 262144);\nloop invariant (x % 2) == (y % 2) ==> (x % 524288) == (y % 524288);\nloop invariant (x % 2) == (y % 2) ==> (x % 1048576) == (y % 1048576);\nloop invariant (x % 2) == (y % 2) ==> (x % 2097152) == (y % 2097152);\nloop invariant (x % 2) == (y % 2) ==> (x % 4194304) == (y % 4194304);\nloop invariant (x % 2) == (y % 2) ==> (x % 8388608) == (y % 8388608);\nloop invariant (x % 2) == (y % 2) ==> (x % 16777216) == (y % 16777216);\nloop invariant (x % 2) == (y % 2) ==> (x % 33554432) == (y % 33554432);\nloop invariant (x % 2) == (y % 2) ==> (x % 67108864) == (y % 67108864);\nloop invariant (x % 2) == (y % 2) ==> (x % 134217728) == (y % 134217728);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: comparison of incompatible types: unsigned int and unsigned int (*)(void). Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: y >= 0;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y;\nloop invariant (x % 2) == (y % 2) ==> (x % 4) == (y % 4);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant (x % 2) == (y % 2) ==> (x % 4) == (y % 4) is neither established nor preserved.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: 0 <= y;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= y;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0;\nloop invariant y % 2 == 0;\nloop invariant x % 2 == 1;\nloop invariant y % 2 == 1;\nloop invariant x <= y + 1;\nloop invariant x >= y - 1;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\nloop invariant x != y;\nloop invariant x < y;\nloop invariant x > y;\nloop invariant x <= y;\nloop invariant x >= y;\nloop invariant x == y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= y is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 1 is preserved but not established.\nloop invariant y % 2 == 1 is partially proven to be inductive.\nloop invariant x <= y + 1 is partially proven to be inductive.\nloop invariant x >= y - 1 is partially proven to be inductive.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x == y is partially proven to be inductive.\nloop invariant x != y is partially proven to be inductive.\nloop invariant x < y is partially proven to be inductive.\nloop invariant x > y is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 2147483647;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant 0 <= y <= 2147483647 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == 0 ==> x % 4 == 0;\nloop invariant (x % 2 != 0) ==> (x % 4 == 2 || x % 4 == 0);\nloop invariant x % 4 == 0 ==> x % 8 == 0;\nloop invariant (x % 4 != 0) ==> (x % 8 == 2 || x % 8 == 4 || x % 8 == 0);\nloop invariant (x % 8 != 0) ==> (x % 16 == 4 || x % 16 == 8 || x % 16 == 0);\nloop invariant (x % 16 != 0) ==> (x % 32 == 8 || x % 32 == 16 || x % 32 == 0);\nloop invariant (x % 32 != 0) ==> (x % 64 == 16 || x % 64 == 32 || x % 64 == 0);\nloop invariant (x % 64 != 0) ==> (x % 128 == 32 || x % 128 == 64 || x % 128 == 0);\nloop invariant (x % 128 != 0) ==> (x % 256 == 64 || x % 256 == 128 || x % 256 == 0);\nloop invariant (x % 256 != 0) ==> (x % 512 == 128 || x % 512 == 256 || x % 512 == 0);\nloop invariant (x % 512 != 0) ==> (x % 1024 == 256 || x % 1024 == 512 || x % 1024 == 0);\nloop invariant (x % 1024 != 0) ==> (x % 2048 == 512 || x % 2048 == 1024 || x % 2048 == 0);\nloop invariant (x % 2048 != 0) ==> (x % 4096 == 1024 || x % 4096 == 2048 || x % 4096 == 0);\nloop invariant (x % 4096 != 0) ==> (x % 8192 == 2048 || x % 8192 == 4096 || x % 8192 == 0);\nloop invariant (x % 8192 != 0) ==> (x % 16384 == 4096 || x % 16384 == 8192 || x % 16384 == 0);\nloop invariant (x % 16384 != 0) ==> (x % 32768 == 8192 || x % 32768 == 16384 || x % 32768 == 0);\nloop invariant (x % 32768 != 0) ==> (x % 65536 == 16384 || x % 65536 == 32768 || x % 65536 == 0);\nloop invariant (x % 65536 != 0) ==> (x % 131072 == 32768 || x % 131072 == 65536 || x % 131072 == 0);\nloop invariant (x % 131072 != 0) ==> (x % 262144 == 65536 || x % 262144 == 131072 || x % 262144 == 0);\nloop invariant (x % 262144 != 0) ==> (x % 524288 == 131072 || x % 524288 == 262144 || x % 524288 == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant x % 2 == 0 ==> x % 4 == 0 is partially proven to be inductive.\nloop invariant (x % 2 != 0) ==> (x % 4 == 2 || x % 4 == 0) is partially proven to be inductive.\nloop invariant x % 4 == 0 ==> x % 8 == 0 is established but not preserved.\nloop invariant (x % 4 != 0) ==> (x % 8 == 2 || x % 8 == 4 || x % 8 == 0) is partially proven to be inductive.\nloop invariant (x % 8 != 0) ==> (x % 16 == 4 || x % 16 == 8 || x % 16 == 0) is partially proven to be inductive.\nloop invariant (x % 16 != 0) ==> (x % 32 == 8 || x % 32 == 16 || x % 32 == 0) is partially proven to be inductive.\nloop invariant (x % 32 != 0) ==> (x % 64 == 16 || x % 64 == 32 || x % 64 == 0) is partially proven to be inductive.\nloop invariant (x % 64 != 0) ==> (x % 128 == 32 || x % 128 == 64 || x % 128 == 0) is partially proven to be inductive.\nloop invariant (x % 128 != 0) ==> (x % 256 == 64 || x % 256 == 128 || x % 256 == 0) is partially proven to be inductive.\nloop invariant (x % 256 != 0) ==> (x % 512 == 128 || x % 512 == 256 || x % 512 == 0) is partially proven to be inductive.\nloop invariant (x % 512 != 0) ==> (x % 1024 == 256 || x % 1024 == 512 || x % 1024 == 0) is partially proven to be inductive.\nloop invariant (x % 1024 != 0) ==> (x % 2048 == 512 || x % 2048 == 1024 || x % 2048 == 0) is partially proven to be inductive.\nloop invariant (x % 2048 != 0) ==> (x % 4096 == 1024 || x % 4096 == 2048 || x % 4096 == 0) is partially proven to be inductive.\nloop invariant (x % 4096 != 0) ==> (x % 8192 == 2048 || x % 8192 == 4096 || x % 8192 == 0) is partially proven to be inductive.\nloop invariant (x % 8192 != 0) ==> (x % 16384 == 4096 || x % 16384 == 8192 || x % 16384 == 0) is partially proven to be inductive.\nloop invariant (x % 16384 != 0) ==> (x % 32768 == 8192 || x % 32768 == 16384 || x % 32768 == 0) is partially proven to be inductive.\nloop invariant (x % 32768 != 0) ==> (x % 65536 == 16384 || x % 65536 == 32768 || x % 65536 == 0) is partially proven to be inductive.\nloop invariant (x % 65536 != 0) ==> (x % 131072 == 32768 || x % 131072 == 65536 || x % 131072 == 0) is partially proven to be inductive.\nloop invariant (x % 131072 != 0) ==> (x % 262144 == 65536 || x % 262144 == 131072 || x % 262144 == 0) is partially proven to be inductive.\nloop invariant (x % 262144 != 0) ==> (x % 524288 == 131072 || x % 524288 == 262144 || x % 524288 == 0) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: i1;\nloop invariant i2: i2;\nloop invariant i3: i3;\nloop invariant i4: i4;\nloop invariant i5: i5;\nloop invariant i6: i6;\nloop invariant i7: i7;\nloop invariant i8: i8;\nloop invariant i9: i9;\nloop invariant i10: i10;\nloop invariant i11: i11;\nloop invariant i12: i12;\nloop invariant i13: i13;\nloop invariant i14: i14;\nloop invariant i15: i15;\nloop invariant i16: i16;\nloop invariant i17: i17;\nloop invariant i18: i18;\nloop invariant i19: i19;\nloop invariant i20: i20;\nloop invariant i21: i21;\nloop invariant i22: i22;\nloop invariant i23: i23;\nloop invariant i24: i24;\nloop invariant i25: i25;\nloop invariant i26: i26;\nloop invariant i27: i27;\nloop invariant i28: i28;\nloop invariant i29: i29;\nloop invariant i30: i30;\nloop invariant i31: i31;\nloop invariant i32: i32;\nloop invariant i33: i33;\nloop invariant i34: i34;\nloop invariant i35: i35;\nloop invariant i36: i36;\nloop invariant i37: i37;\nloop invariant i38: i38;\nloop invariant i39: i39;\nloop invariant i40: i40;\nloop invariant i41: i41;\nloop invariant i42: i42;\nloop invariant i43: i43;\nloop invariant i44: i44;\nloop invariant i45: i45;\nloop invariant i46: i46;\nloop invariant i47: i47;\nloop invariant i48: i48;\nloop invariant i49: i49;\nloop invariant i50: i50;\nloop invariant i51: i51;\nloop invariant i52: i52;\nloop invariant i53: i53;\nloop invariant i54: i54;\nloop invariant i55: i55;\nloop invariant i56: i56;\nloop invariant i57: i57;\nloop invariant i58: i58;\nloop invariant i59: i59;\nloop invariant i60: i60;\nloop invariant i61: i61;\nloop invariant i62: i62;\nloop invariant i63: i63;\nloop invariant i64: i64;\nloop invariant i65: i65;\nloop invariant i66: i66;\nloop invariant i67: i67;\nloop invariant i68: i68;\nloop invariant i69: i69;\nloop invariant i70: i70;\nloop invariant i71: i71;\nloop invariant i72: i72;\nloop invariant i73: i73;\nloop invariant i74: i74;\nloop invariant i75: i75;\nloop invariant i76: i76;\nloop invariant i77: i77;\nloop invariant i78: i78;\nloop invariant i79: i79;\nloop invariant i80: i80;\nloop invariant i81: i81;\nloop invariant i82: i82;\nloop invariant i83: i83;\nloop invariant i84: i84;\nloop invariant i85: i85;\nloop invariant i86: i86;\nloop invariant i87: i87;\nloop invariant i88: i88;\nloop invariant i89: i89;\nloop invariant i90: i90;\nloop invariant i91: i91;\nloop invariant i92: i92;\nloop invariant i93: i93;\nloop invariant i94: i94;\nloop invariant i95: i95;\nloop invariant i96: i96;\nloop invariant i97: i97;\nloop invariant i98: i98;\nloop invariant i99: i99;\nloop invariant i100: i100;\nloop invariant i101: i101;\nloop invariant i102: i102;\nloop invariant i103: i103;\nloop invariant i104: i104;\nloop invariant i105: i105;\nloop invariant i106: i106;\nloop invariant i107: i107;\nloop invariant i108: i108;\nloop invariant i109: i109;\nloop invariant i110: i110;\nloop invariant i111: i111;\nloop invariant i112: i112;\nloop invariant i113: i113;\nloop invariant i114: i114;\nloop invariant i115: i115;\nloop invariant i116: i116;\nloop invariant i117: i117;\nloop invariant i118: i118;\nloop invariant i119: i119;\nloop invariant i120: i120;\nloop invariant i121: i121;\nloop invariant i122: i122;\nloop invariant i123: i123;\nloop invariant i124: i124;\nloop invariant i125: i125;\nloop invariant i126: i126;\nloop invariant i127: i127;\nloop invariant i128: i128;\nloop invariant i129: i129;\nloop invariant i130: i130;\nloop invariant i131: i131;\nloop invariant i132: i132;\nloop invariant i133: i133;\nloop invariant i134: i134;\nloop invariant i135: i135;\nloop invariant i136: i136;\nloop invariant i137: i137;\nloop invariant i138: i138;\nloop invariant i139: i139;\nloop invariant i140: i140;\nloop invariant i141: i141;\nloop invariant i142: i142;\nloop invariant i143: i143;\nloop invariant i144: i144;\nloop invariant i145: i145;\nloop invariant i146: i146;\nloop invariant i147: i147;\nloop invariant i148: i148;\nloop invariant i149: i149;\nloop invariant i150: i150;\nloop invariant i151: i151;\nloop invariant i152: i152;\nloop invariant i153: i153;\nloop invariant i154: i154;\nloop invariant i155: i155;\nloop invariant i156: i156;\nloop invariant i157: i157;\nloop invariant i158: i158;\nloop invariant i159: 0 <= x <= 99;\nloop invariant i160: 0 <= y <= 99;\nloop invariant i161: x % 2 == y % 2;\nloop invariant i162: x % 4 == 0;\nloop invariant i163: 0 <= y <= 0;\nloop invariant i164: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i165: y % 2 == 1 ==> x % 2 == 1;\nloop invariant i166: 0 <= y <= 2;\nloop invariant i167: (x % 2) == (y % 2);\nloop invariant i168: x % 4 == (y % 4) ==> y % 4 == 0 || y % 4 == 2;\nloop invariant i169: x % 8 == (y % 8) ==> y % 8 == 0 || y % 8 == 2 || y % 8 == 4 || y % 8 == 6;\nloop invariant i170: x % 16 == (y % 16) ==> y % 16 == 0 || y % 16 == 2 || y % 16 == 4 || y % 16 == 6 || y % 16 == 8 || y % 16 == 10 || y % 16 == 12 || y % 16 == 14;\nloop invariant i171: 0 <= y;\nloop invariant i172: 0 <= y <= 255;\nloop invariant i173: (x % 2) == (y % 2) ==> x % 4 == y % 4;\nloop invariant i174: (x % 2) == (y % 2) ==> x % 8 == y % 8;\nloop invariant i175: (x % 2) == (y % 2) ==> x % 16 == y % 16;\nloop invariant i176: (x % 2) == (y % 2) ==> x % 32 == y % 32;\nloop invariant i177: (x % 2) == (y % 2) ==> x % 64 == y % 64;\nloop invariant i178: (x % 2) == (y % 2) ==> x % 128 == y % 128;\nloop invariant i179: (x % 2) == (y % 2) ==> x % 256 == y % 256;\nloop invariant i180: (x % 2) == (y % 2) ==> x % 512 == y % 512;\nloop invariant i181: (x % 2) == (y % 2) ==> x % 1024 == y % 1024;\nloop invariant i182: (x % 2) == (y % 2) ==> x % 2048 == y % 2048;\nloop invariant i183: (x % 2) == (y % 2) ==> x % 4096 == y % 4096;\nloop invariant i184: (x % 2) == (y % 2) ==> x % 8192 == y % 8192;\nloop invariant i185: (x % 2) == (y % 2) ==> x % 16384 == y % 16384;\nloop invariant i186: (x % 2) == (y % 2) ==> x % 32768 == y % 32768;\nloop invariant i187: (x % 2) == (y % 2) ==> x % 65536 == y % 65536;\nloop invariant i188: (x % 2) == (y % 2) ==> x % 131072 == y % 131072;\nloop invariant i189: (x % 2) == (y % 2) ==> x % 262144 == y % 262144;\nloop invariant i190: (x % 2) == (y % 2) ==> x % 524288 == y % 524288;\nloop invariant i191: (x % 2) == (y % 2) ==> x % 1048576 == y % 1048576;\nloop invariant i192: (x % 2) == (y % 2) ==> x % 2097152 == y % 2097152;\nloop invariant i193: (x % 2) == (y % 2) ==> x % 4194304 == y % 4194304;\nloop invariant i194: (x % 2) == (y % 2) ==> x % 8388608 == y % 8388608;\nloop invariant i195: (x % 2) == (y % 2) ==> x % 16777216 == y % 16777216;\nloop invariant i196: (x % 2) == (y % 2) ==> x % 33554432 == y % 33554432;\nloop invariant i197: (x % 2) == (y % 2) ==> x % 67108864 == y % 67108864;\nloop invariant i198: (x % 2) == (y % 2) ==> x % 134217728 == y % 134217728;\nloop invariant i199: (x % 2) == (y % 2) ==> x % 268435456 == y % 268435456;\nloop invariant i200: (x % 2) == (y % 2) ==> x % 536870912 == y % 536870912;\nloop invariant i201: y >= 0;\nloop invariant i202: x <= y + 99;\nloop invariant i203: x >= y;\nloop invariant i204: x % 6 == y % 6;\nloop invariant i205: x % 12 == y % 12;\nloop invariant i206: x % 24 == y % 24;\nloop invariant i207: x % 48 == y % 48;\nloop invariant i208: x % 96 == y % 96;\nloop invariant i209: x % 192 == y % 192;\nloop invariant i210: x % 384 == y % 384;\nloop invariant i211: x % 768 == y % 768;\nloop invariant i212: x % 1536 == y % 1536;\nloop invariant i213: x % 3072 == y % 3072;\nloop invariant i214: x % 6144 == y % 6144;\nloop invariant i215: x % 12288 == y % 12288;\nloop invariant i216: x % 24576 == y % 24576;\nloop invariant i217: x % 49152 == y % 49152;\nloop invariant i218: x % 98304 == y % 98304;\nloop invariant i219: x % 196608 == y % 196608;\nloop invariant i220: x % 393216 == y % 393216;\nloop invariant i221: x % 786432 == y % 786432;\nloop invariant i222: x % 1572864 == y % 1572864;\nloop invariant i223: x % 3145728 == y % 3145728;\nloop invariant i224: x % 6291456 == y % 6291456;\nloop invariant i225: x % 12582912 == y % 12582912;\nloop invariant i226: x % 25165824 == y % 25165824;\nloop invariant i227: x % 50331648 == y % 50331648;\nloop invariant i228: x % 100663296 == y % 100663296;\nloop invariant i229: x % 201326592 == y % 201326592;\nloop invariant i230: x % 402653184 == y % 402653184;\nloop invariant i231: x % 805306368 == y % 805306368;\nloop invariant i232: x % 1610612736 == y % 1610612736;\nloop invariant i233: x % 3221225472 == y % 3221225472;\nloop invariant i234: x % 6442450944 == y % 6442450944;\nloop invariant i235: x % 12884901888 == y % 12884901888;\nloop invariant i236: x % 25769803776 == y % 25769803776;\nloop invariant i237: x % 51539607552 == y % 51539607552;\nloop invariant i238: x % 103079215104 == y % 103079215104;\nloop invariant i239: x % 206158430208 == y % 206158430208;\nloop invariant i240: x % 412316860416 == y % 412316860416;\nloop invariant i241: x % 824633720832 == y % 824633720832;\nloop invariant i242: x % 1649267441664 == y % 1649267441664;\nloop invariant i243: y % 2 == x % 2;\nloop invariant i244: 0 <= y <= UINT_MAX;\nloop invariant i245: x % 2 == y % 2 ==> y % 2 == 0;\nloop invariant i246: x % 2 == y % 2 ==> y % 2 == 1;\nloop invariant i247: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i248: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\nloop invariant i249: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 0;\nloop invariant i250: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 1;\nloop invariant i251: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0;\nloop invariant i252: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1;\nloop invariant i253: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0;\nloop invariant i254: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1;\nloop invariant i255: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0;\nloop invariant i256: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1;\nloop invariant i257: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0;\nloop invariant i258: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1;\nloop invariant i259: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0;\nloop invariant i260: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1;\nloop invariant i261: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0;\nloop invariant i262: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1;\nloop invariant i263: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0;\nloop invariant i264: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1;\nloop invariant i265: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0;\nloop invariant i266: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1;\nloop invariant i267: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0;\nloop invariant i268: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1;\nloop invariant i269: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0;\nloop invariant i270: 0 <= y <= unknown_uint;\nloop invariant i271: (x % 2) == (y % 2) ==> (x % 4) == (y % 4);\nloop invariant i272: (x % 2) == (y % 2) ==> (x % 8) == (y % 8);\nloop invariant i273: (x % 2) == (y % 2) ==> (x % 16) == (y % 16);\nloop invariant i274: (x % 2) == (y % 2) ==> (x % 32) == (y % 32);\nloop invariant i275: (x % 2) == (y % 2) ==> (x % 64) == (y % 64);\nloop invariant i276: (x % 2) == (y % 2) ==> (x % 128) == (y % 128);\nloop invariant i277: (x % 2) == (y % 2) ==> (x % 256) == (y % 256);\nloop invariant i278: (x % 2) == (y % 2) ==> (x % 512) == (y % 512);\nloop invariant i279: (x % 2) == (y % 2) ==> (x % 1024) == (y % 1024);\nloop invariant i280: (x % 2) == (y % 2) ==> (x % 2048) == (y % 2048);\nloop invariant i281: (x % 2) == (y % 2) ==> (x % 4096) == (y % 4096);\nloop invariant i282: (x % 2) == (y % 2) ==> (x % 8192) == (y % 8192);\nloop invariant i283: (x % 2) == (y % 2) ==> (x % 16384) == (y % 16384);\nloop invariant i284: (x % 2) == (y % 2) ==> (x % 32768) == (y % 32768);\nloop invariant i285: (x % 2) == (y % 2) ==> (x % 65536) == (y % 65536);\nloop invariant i286: (x % 2) == (y % 2) ==> (x % 131072) == (y % 131072);\nloop invariant i287: (x % 2) == (y % 2) ==> (x % 262144) == (y % 262144);\nloop invariant i288: (x % 2) == (y % 2) ==> (x % 524288) == (y % 524288);\nloop invariant i289: (x % 2) == (y % 2) ==> (x % 1048576) == (y % 1048576);\nloop invariant i290: (x % 2) == (y % 2) ==> (x % 2097152) == (y % 2097152);\nloop invariant i291: (x % 2) == (y % 2) ==> (x % 4194304) == (y % 4194304);\nloop invariant i292: (x % 2) == (y % 2) ==> (x % 8388608) == (y % 8388608);\nloop invariant i293: (x % 2) == (y % 2) ==> (x % 16777216) == (y % 16777216);\nloop invariant i294: (x % 2) == (y % 2) ==> (x % 33554432) == (y % 33554432);\nloop invariant i295: (x % 2) == (y % 2) ==> (x % 67108864) == (y % 67108864);\nloop invariant i296: (x % 2) == (y % 2) ==> (x % 134217728) == (y % 134217728);\nloop invariant i297: 0 <= x <= y;\nloop invariant i298: x % 2 == 0;\nloop invariant i299: y % 2 == 0;\nloop invariant i300: x % 2 == 1;\nloop invariant i301: y % 2 == 1;\nloop invariant i302: x <= y + 1;\nloop invariant i303: x >= y - 1;\nloop invariant i304: x <= y;\nloop invariant i305: x == y;\nloop invariant i306: x != y;\nloop invariant i307: x < y;\nloop invariant i308: x > y;\nloop invariant i309: 0 <= y <= 2147483647;\nloop invariant i310: x % 2 == 0 ==> x % 4 == 0;\nloop invariant i311: (x % 2 != 0) ==> (x % 4 == 2 || x % 4 == 0);\nloop invariant i312: x % 4 == 0 ==> x % 8 == 0;\nloop invariant i313: (x % 4 != 0) ==> (x % 8 == 2 || x % 8 == 4 || x % 8 == 0);\nloop invariant i314: (x % 8 != 0) ==> (x % 16 == 4 || x % 16 == 8 || x % 16 == 0);\nloop invariant i315: (x % 16 != 0) ==> (x % 32 == 8 || x % 32 == 16 || x % 32 == 0);\nloop invariant i316: (x % 32 != 0) ==> (x % 64 == 16 || x % 64 == 32 || x % 64 == 0);\nloop invariant i317: (x % 64 != 0) ==> (x % 128 == 32 || x % 128 == 64 || x % 128 == 0);\nloop invariant i318: (x % 128 != 0) ==> (x % 256 == 64 || x % 256 == 128 || x % 256 == 0);\nloop invariant i319: (x % 256 != 0) ==> (x % 512 == 128 || x % 512 == 256 || x % 512 == 0);\nloop invariant i320: (x % 512 != 0) ==> (x % 1024 == 256 || x % 1024 == 512 || x % 1024 == 0);\nloop invariant i321: (x % 1024 != 0) ==> (x % 2048 == 512 || x % 2048 == 1024 || x % 2048 == 0);\nloop invariant i322: (x % 2048 != 0) ==> (x % 4096 == 1024 || x % 4096 == 2048 || x % 4096 == 0);\nloop invariant i323: (x % 4096 != 0) ==> (x % 8192 == 2048 || x % 8192 == 4096 || x % 8192 == 0);\nloop invariant i324: (x % 8192 != 0) ==> (x % 16384 == 4096 || x % 16384 == 8192 || x % 16384 == 0);\nloop invariant i325: (x % 16384 != 0) ==> (x % 32768 == 8192 || x % 32768 == 16384 || x % 32768 == 0);\nloop invariant i326: (x % 32768 != 0) ==> (x % 65536 == 16384 || x % 65536 == 32768 || x % 65536 == 0);\nloop invariant i327: (x % 65536 != 0) ==> (x % 131072 == 32768 || x % 131072 == 65536 || x % 131072 == 0);\nloop invariant i328: (x % 131072 != 0) ==> (x % 262144 == 65536 || x % 262144 == 131072 || x % 262144 == 0);\nloop invariant i329: (x % 262144 != 0) ==> (x % 524288 == 131072 || x % 524288 == 262144 || x % 524288 == 0);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "combined_annotation_num_solver_calls": 180,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i164: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\nloop invariant i171: 0 <= y;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i201: y >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i244: 0 <= y <= UINT_MAX;\n\n\nloop invariant i247: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0;\nloop invariant i248: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1;\n\n\nloop invariant i251: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 2 ==> y % 2 == 0;\nloop invariant i252: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 3 ==> y % 2 == 1;\nloop invariant i253: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 4 ==> y % 2 == 0;\nloop invariant i254: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 5 ==> y % 2 == 1;\nloop invariant i255: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 6 ==> y % 2 == 0;\nloop invariant i256: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 7 ==> y % 2 == 1;\nloop invariant i257: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 8 ==> y % 2 == 0;\nloop invariant i258: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 9 ==> y % 2 == 1;\nloop invariant i259: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 10 ==> y % 2 == 0;\nloop invariant i260: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 11 ==> y % 2 == 1;\nloop invariant i261: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 12 ==> y % 2 == 0;\nloop invariant i262: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 13 ==> y % 2 == 1;\nloop invariant i263: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 14 ==> y % 2 == 0;\nloop invariant i264: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 15 ==> y % 2 == 1;\nloop invariant i265: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 16 ==> y % 2 == 0;\nloop invariant i266: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 17 ==> y % 2 == 1;\nloop invariant i267: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 18 ==> y % 2 == 0;\nloop invariant i268: x % 2 == y % 2 ==> y % 2 == 1 ==> x % 2 == 1 ==> x == 19 ==> y % 2 == 1;\nloop invariant i269: x % 2 == y % 2 ==> y % 2 == 0 ==> x % 2 == 0 ==> x == 20 ==> y % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= a;\nloop invariant sn <= n * a + a;\nloop invariant sn == i * a - a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n*a || sn == 0;\nloop invariant sn <= sn + a;\nloop invariant n >= 1 || sn == 0;\nloop invariant a == 2 || sn == 0;\nloop invariant i == n + 1 || sn == n*a;\nloop invariant i == 1 || sn == 0;\nloop invariant sn == sn + a || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == (a * i);\nloop invariant i <= n;\nloop invariant sn <= (a * n);\nloop invariant sn >= 0;\nloop invariant i <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn - a*i <= 0;\nloop invariant sn - a*i >= -n*a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant n >= -1000 && n < 1000;\nloop invariant i >= 1 && i <= n;\nloop invariant sn == (n * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n * a || sn == 0;\nloop invariant 1 <= i <= n + 1;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant -1000 <= sn <= 100000;\nloop invariant sn == (i * a) ==> n == i;\nloop invariant sn == (i * a) ==> n == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0;\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant -1000 <= i <= n;\nloop invariant sn >= (n - i) * a;\nloop invariant sn <= i * a;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == (i + 1) * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 2 * i <= sn <= 2 * n;\nloop invariant sn == 2 * i;\nloop invariant sn == 2 * (i - 1) + a;\nloop invariant sn == 2 * (i - 1) + 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
                "```\n/*@\nloop invariant a = 2; sn = sn + a; i = i + 1; i <= n ==> sn == i * a;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= a;\nloop invariant sn <= n * a + a;\nloop invariant sn == i * a - a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\nloop invariant sn == (i * (i - 1) / 2) * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn >= a is preserved but not established.\nloop invariant sn <= n * a + a is partially proven to be inductive.\nloop invariant sn == i * a - a is partially proven to be inductive.\nloop invariant sn == (i * (i - 1) / 2) * a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: i >= 1;\n\n\n\nloop invariant i6: sn == i * a - a;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n*a || sn == 0;\nloop invariant sn <= sn + a;\nloop invariant n >= 1 || sn == 0;\nloop invariant a == 2 || sn == 0;\nloop invariant i == n + 1 || sn == n*a;\nloop invariant i == 1 || sn == 0;\nloop invariant sn == sn + a || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\nloop invariant sn + a == sn || sn == 0;\nloop invariant sn + a == sn + a || sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= n*a || sn == 0 is established but not preserved.\nloop invariant sn <= sn + a is partially proven to be inductive.\nloop invariant n >= 1 || sn == 0 is partially proven to be inductive.\nloop invariant a == 2 || sn == 0 is partially proven to be inductive.\nloop invariant i == n + 1 || sn == n*a is preserved but not established.\nloop invariant i == 1 || sn == 0 is partially proven to be inductive.\nloop invariant sn == sn + a || sn == 0 is partially proven to be inductive.\nloop invariant sn + a == sn + a || sn == 0 is partially proven to be inductive.\nloop invariant sn + a == sn || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn <= sn + a;\n\nloop invariant i4: a == 2 || sn == 0;\n\n\n\nloop invariant i8: sn + a == sn + a || sn == 0;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == (a * i);\nloop invariant i <= n;\nloop invariant sn <= (a * n);\nloop invariant sn >= 0;\nloop invariant i <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == (a * i) is preserved but not established.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn <= (a * n) is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\nloop invariant i5: sn >= 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn - a*i <= 0;\nloop invariant sn - a*i >= -n*a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn - a*i <= 0 is partially proven to be inductive.\nloop invariant sn - a*i >= -n*a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn - a*i <= 0;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant n >= -1000 && n < 1000;\nloop invariant i >= 1 && i <= n;\nloop invariant sn == (n * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\nloop invariant sn == (i * a) || sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= n * a is neither established nor preserved.\nloop invariant n >= -1000 && n < 1000 is partially proven to be inductive.\nloop invariant i >= 1 && i <= n is neither established nor preserved.\nloop invariant sn == (n * a) || sn == 0 is established but not preserved.\nloop invariant sn == (i * a) || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: n >= -1000 && n < 1000;\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\nloop invariant 0 <= i <= n;\nloop invariant sn == i*a;\nloop invariant n*a == sn;\nloop invariant sn == n*a || sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i*a is preserved but not established.\nloop invariant n*a == sn is partially proven to be inductive.\nloop invariant sn == n*a || sn == 0 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n * a || sn == 0;\nloop invariant 1 <= i <= n + 1;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant sn == n * a || sn == 0;\nloop invariant i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\nloop invariant i <= n + 1;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= n * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= n * a || sn == 0 is established but not preserved.\nloop invariant 1 <= i <= n + 1 is preserved but not established.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n * a is partially proven to be inductive.\nloop invariant sn == n * a || sn == 0 is established but not preserved.\nloop invariant i <= n is neither established nor preserved.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\nloop invariant i4: i >= 1;\nloop invariant i5: sn >= 0;\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n*a is partially proven to be inductive.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant -1000 <= sn <= 100000;\nloop invariant sn == (i * a) ==> n == i;\nloop invariant sn == (i * a) ==> n == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0;\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1;\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant -1000 <= sn <= 100000 is established but not preserved.\nloop invariant sn == (i * a) ==> n == i is established but not preserved.\nloop invariant sn == (i * a) ==> n == 0 ==> i == 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> i == 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 is partially proven to be inductive.\nloop invariant sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\nloop invariant i4: sn == (i * a) ==> n == 0 ==> i == 0;\nloop invariant i5: sn == (i * a) ==> n == i ==> a >= 0;\nloop invariant i6: sn == (i * a) ==> n == i ==> a == 0 ==> i == 0;\nloop invariant i7: sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0;\n\nloop invariant i9: sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0;\nloop invariant i10: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1;\nloop invariant i11: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 1000;\nloop invariant -1000 <= i <= n;\nloop invariant sn >= (n - i) * a;\nloop invariant sn <= i * a;\nloop invariant sn == (i - 1) * a;\nloop invariant sn == (i + 1) * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 1000 is preserved but not established.\nloop invariant -1000 <= i <= n is preserved but not established.\nloop invariant sn >= (n - i) * a is preserved but not established.\nloop invariant sn <= i * a is partially proven to be inductive.\nloop invariant sn == (i - 1) * a is partially proven to be inductive.\nloop invariant sn == (i + 1) * a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\nloop invariant i4: sn <= i * a;\nloop invariant i5: sn == (i - 1) * a;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 2 * i <= sn <= 2 * n;\nloop invariant sn == 2 * i;\nloop invariant sn == 2 * (i - 1) + a;\nloop invariant sn == 2 * (i - 1) + 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 2 * i <= sn <= 2 * n is preserved but not established.\nloop invariant sn == 2 * i is partially proven to be inductive.\nloop invariant sn == 2 * (i - 1) + a is partially proven to be inductive.\nloop invariant sn == 2 * (i - 1) + 2 is partially proven to be inductive.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant sn == i*a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n*a is partially proven to be inductive.\nloop invariant sn == i*a is preserved but not established.\nAssertion sn == n * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant a = 2; sn = sn + a; i = i + 1; i <= n ==> sn == i * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 73: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\nloop invariant i1: 0 <= n <= 1000;\nloop invariant i2: i >= 1;\nloop invariant i3: i <= n + 1;\nloop invariant i4: sn >= a;\nloop invariant i5: sn <= n * a + a;\nloop invariant i6: sn == i * a - a;\nloop invariant i7: sn == (i * (i - 1) / 2) * a;\nloop invariant i8: 0 <= sn <= n*a || sn == 0;\nloop invariant i9: sn <= sn + a;\nloop invariant i10: n >= 1 || sn == 0;\nloop invariant i11: a == 2 || sn == 0;\nloop invariant i12: i == n + 1 || sn == n*a;\nloop invariant i13: i == 1 || sn == 0;\nloop invariant i14: sn == sn + a || sn == 0;\nloop invariant i15: sn + a == sn + a || sn == 0;\nloop invariant i16: sn + a == sn || sn == 0;\nloop invariant i17: 0 <= i <= n;\nloop invariant i18: sn == (a * i);\nloop invariant i19: i <= n;\nloop invariant i20: sn <= (a * n);\nloop invariant i21: sn >= 0;\nloop invariant i22: sn - a*i <= 0;\nloop invariant i23: sn - a*i >= -n*a;\nloop invariant i24: sn == i*a;\nloop invariant i25: 0 <= sn <= n * a;\nloop invariant i26: n >= -1000 && n < 1000;\nloop invariant i27: i >= 1 && i <= n;\nloop invariant i28: sn == (n * a) || sn == 0;\nloop invariant i29: sn == (i * a) || sn == 0;\nloop invariant i30: n*a == sn;\nloop invariant i31: sn == n*a || sn == 0;\nloop invariant i32: 0 <= sn <= n * a || sn == 0;\nloop invariant i33: 1 <= i <= n + 1;\nloop invariant i34: sn <= n * a;\nloop invariant i35: sn == n * a || sn == 0;\nloop invariant i36: 0 <= sn <= n*a;\nloop invariant i37: -1000 <= sn <= 100000;\nloop invariant i38: sn == (i * a) ==> n == i;\nloop invariant i39: sn == (i * a) ==> n == 0 ==> i == 0;\nloop invariant i40: sn == (i * a) ==> n == i ==> a >= 0;\nloop invariant i41: sn == (i * a) ==> n == i ==> a == 0 ==> i == 0;\nloop invariant i42: sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0;\nloop invariant i43: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0;\nloop invariant i44: sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0;\nloop invariant i45: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1;\nloop invariant i46: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a;\nloop invariant i47: -1000 <= i <= n;\nloop invariant i48: sn >= (n - i) * a;\nloop invariant i49: sn <= i * a;\nloop invariant i50: sn == (i - 1) * a;\nloop invariant i51: sn == (i + 1) * a;\nloop invariant i52: 2 * i <= sn <= 2 * n;\nloop invariant i53: sn == 2 * i;\nloop invariant i54: sn == 2 * (i - 1) + a;\nloop invariant i55: sn == 2 * (i - 1) + 2;\nloop invariant i56: sn <= n*a;\nloop invariant i57: a = 2; sn = sn + a; i = i + 1; i <= n ==> sn == i * a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 19,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  /*@\n\nloop invariant i2: i >= 1;\n\n\n\nloop invariant i6: sn == i * a - a;\n\nloop invariant i8: 0 <= sn <= n*a || sn == 0;\nloop invariant i9: sn <= sn + a;\nloop invariant i10: n >= 1 || sn == 0;\nloop invariant i11: a == 2 || sn == 0;\n\n\n\nloop invariant i15: sn + a == sn + a || sn == 0;\n\n\n\n\n\nloop invariant i21: sn >= 0;\nloop invariant i22: sn - a*i <= 0;\n\n\n\nloop invariant i26: n >= -1000 && n < 1000;\n\n\n\n\n\nloop invariant i32: 0 <= sn <= n * a || sn == 0;\n\n\n\n\nloop invariant i37: -1000 <= sn <= 100000;\nloop invariant i38: sn == (i * a) ==> n == i;\nloop invariant i39: sn == (i * a) ==> n == 0 ==> i == 0;\nloop invariant i40: sn == (i * a) ==> n == i ==> a >= 0;\nloop invariant i41: sn == (i * a) ==> n == i ==> a == 0 ==> i == 0;\nloop invariant i42: sn == (i * a) ==> n == i ==> a == 0 ==> sn == 0;\nloop invariant i43: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0;\nloop invariant i44: sn == (i * a) ==> n == i ==> a >= 0 ==> sn == 0 ==> i == 0;\nloop invariant i45: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1;\nloop invariant i46: sn == (i * a) ==> n == i ==> a >= 0 ==> sn >= 0 ==> i >= 1 ==> sn >= a;\n\n\nloop invariant i49: sn <= i * a;\nloop invariant i50: sn == (i - 1) * a;\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant x % 2 == y % 2;\nloop invariant x >= y;\nloop invariant x <= 99;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x - y % 2 == 0;\nloop invariant y % 2 == 0 ==> x == 0;\nloop invariant y % 2 == 1 ==> x == 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 2;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 4;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 6;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 8;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 10;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 12;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 4 == y % 4;\nloop invariant x % 8 == y % 8;\nloop invariant x % 16 == y % 16;\nloop invariant x % 32 == y % 32;\nloop invariant x % 64 == y % 64;\nloop invariant x % 128 == y % 128;\nloop invariant x % 256 == y % 256;\nloop invariant x % 512 == y % 512;\nloop invariant x % 1024 == y % 1024;\nloop invariant x % 2048 == y % 2048;\nloop invariant x % 4096 == y % 4096;\nloop invariant x % 8192 == y % 8192;\nloop invariant x % 16384 == y % 16384;\nloop invariant x % 32768 == y % 32768;\nloop invariant x % 65536 == y % 65536;\nloop invariant x % 131072 == y % 131072;\nloop invariant x % 262144 == y % 262144;\nloop invariant x % 524288 == y % 524288;\nloop invariant x % 1048576 == y % 1048576;\nloop invariant x % 2097152 == y % 2097152;\nloop invariant x % 4194304 == y % 4194304;\nloop invariant x % 8388608 == y % 8388608;\nloop invariant x % 16777216 == y % 16777216;\nloop invariant x % 33554432 == y % 33554432;\nloop invariant x % 67108864 == y % 67108864;\nloop invariant x % 134217728 == y % 134217728;\nloop invariant x % 268435456 == y % 268435456;\nloop invariant x % 536870912 == y % 536870912;\nloop invariant x % 1073741824 == y % 1073741824;\nloop invariant x % 2147483648 == y % 2147483648;\nloop invariant x % 4294967296 == y % 4294967296;\nloop invariant x % 8589934592 == y % 8589934592;\nloop invariant x % 17179869184 == y % 17179869184;\nloop invariant x % 34359738368 == y % 34359738368;\nloop invariant x % 68719476736 == y % 68719476736;\nloop invariant x % 137438953472 == y % 137438953472;\nloop invariant x % 274877906944 == y % 274877906944;\nloop invariant x % 549755813888 == y % 549755813888;\nloop invariant x % 1099511627776 == y % 1099511627776;\nloop invariant x % 2199023255552 == y % 2199023255552;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (2 + (y - 1) * y / 2);\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant x + 2 <= 99;\nloop invariant x - 2 >= 0;\nloop invariant x + 2 <= x + 1;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x + 4 <= x + 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x - 4 <= x - 2;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 2 <= x - 2;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant x % 2 == y % 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 98;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                "```\n/*@\nloop invariant ( x + 2 * (y % 2) >= 0 );\nloop invariant ( x - 2 * ((y % 2) + 1) <= 98 );\nloop invariant ( y % 2 == (x % 2) );\nloop invariant ( x % 4 == y % 4 );\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant x % 2 == y % 2;\nloop invariant x >= y;\nloop invariant x <= 99;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y == 0 is preserved but not established.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 99 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant x % 2 == y % 2;\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 99;\nloop invariant x - y % 2 == 0;\nloop invariant y % 2 == 0 ==> x == 0;\nloop invariant y % 2 == 1 ==> x == 1;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 2;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 4;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 6;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 8;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 10;\nloop invariant y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant y % 2 == 1 ==> x - y % 2 == 12;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x % 2 == y % 2 is preserved but not established.\nloop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x - y % 2 == 0 is established but not preserved.\nloop invariant y % 2 == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x - y % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 2 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 4 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 6 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 8 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 10 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x - y % 2 == 12 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 99;\nloop invariant x % 2 == y % 2;\nloop invariant x % 4 == y % 4;\nloop invariant x % 8 == y % 8;\nloop invariant x % 16 == y % 16;\nloop invariant x % 32 == y % 32;\nloop invariant x % 64 == y % 64;\nloop invariant x % 128 == y % 128;\nloop invariant x % 256 == y % 256;\nloop invariant x % 512 == y % 512;\nloop invariant x % 1024 == y % 1024;\nloop invariant x % 2048 == y % 2048;\nloop invariant x % 4096 == y % 4096;\nloop invariant x % 8192 == y % 8192;\nloop invariant x % 16384 == y % 16384;\nloop invariant x % 32768 == y % 32768;\nloop invariant x % 65536 == y % 65536;\nloop invariant x % 131072 == y % 131072;\nloop invariant x % 262144 == y % 262144;\nloop invariant x % 524288 == y % 524288;\nloop invariant x % 1048576 == y % 1048576;\nloop invariant x % 2097152 == y % 2097152;\nloop invariant x % 4194304 == y % 4194304;\nloop invariant x % 8388608 == y % 8388608;\nloop invariant x % 16777216 == y % 16777216;\nloop invariant x % 33554432 == y % 33554432;\nloop invariant x % 67108864 == y % 67108864;\nloop invariant x % 134217728 == y % 134217728;\nloop invariant x % 268435456 == y % 268435456;\nloop invariant x % 536870912 == y % 536870912;\nloop invariant x % 1073741824 == y % 1073741824;\nloop invariant x % 2147483648 == y % 2147483648;\nloop invariant x % 4294967296 == y % 4294967296;\nloop invariant x % 8589934592 == y % 8589934592;\nloop invariant x % 17179869184 == y % 17179869184;\nloop invariant x % 34359738368 == y % 34359738368;\nloop invariant x % 68719476736 == y % 68719476736;\nloop invariant x % 137438953472 == y % 137438953472;\nloop invariant x % 274877906944 == y % 274877906944;\nloop invariant x % 549755813888 == y % 549755813888;\nloop invariant x % 1099511627776 == y % 1099511627776;\nloop invariant x % 2199023255552 == y % 2199023255552;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nloop invariant x % 4 == y % 4 is neither established nor preserved.\nloop invariant x % 8 == y % 8 is neither established nor preserved.\nloop invariant x % 16 == y % 16 is neither established nor preserved.\nloop invariant x % 32 == y % 32 is neither established nor preserved.\nloop invariant x % 64 == y % 64 is neither established nor preserved.\nloop invariant x % 128 == y % 128 is neither established nor preserved.\nloop invariant x % 256 == y % 256 is established but not preserved.\nloop invariant x % 512 == y % 512 is established but not preserved.\nloop invariant x % 1024 == y % 1024 is established but not preserved.\nloop invariant x % 2048 == y % 2048 is established but not preserved.\nloop invariant x % 4096 == y % 4096 is established but not preserved.\nloop invariant x % 8192 == y % 8192 is established but not preserved.\nloop invariant x % 16384 == y % 16384 is established but not preserved.\nloop invariant x % 32768 == y % 32768 is established but not preserved.\nloop invariant x % 65536 == y % 65536 is established but not preserved.\nloop invariant x % 131072 == y % 131072 is established but not preserved.\nloop invariant x % 262144 == y % 262144 is established but not preserved.\nloop invariant x % 524288 == y % 524288 is established but not preserved.\nloop invariant x % 1048576 == y % 1048576 is established but not preserved.\nloop invariant x % 2097152 == y % 2097152 is established but not preserved.\nloop invariant x % 4194304 == y % 4194304 is established but not preserved.\nloop invariant x % 8388608 == y % 8388608 is established but not preserved.\nloop invariant x % 16777216 == y % 16777216 is established but not preserved.\nloop invariant x % 33554432 == y % 33554432 is established but not preserved.\nloop invariant x % 67108864 == y % 67108864 is established but not preserved.\nloop invariant x % 134217728 == y % 134217728 is established but not preserved.\nloop invariant x % 268435456 == y % 268435456 is established but not preserved.\nloop invariant x % 536870912 == y % 536870912 is established but not preserved.\nloop invariant x % 1073741824 == y % 1073741824 is established but not preserved.\nloop invariant x % 2147483648 == y % 2147483648 is established but not preserved.\nloop invariant x % 4294967296 == y % 4294967296 is established but not preserved.\nloop invariant x % 8589934592 == y % 8589934592 is partially proven to be inductive.\nloop invariant x % 17179869184 == y % 17179869184 is partially proven to be inductive.\nloop invariant x % 34359738368 == y % 34359738368 is partially proven to be inductive.\nloop invariant x % 68719476736 == y % 68719476736 is partially proven to be inductive.\nloop invariant x % 137438953472 == y % 137438953472 is partially proven to be inductive.\nloop invariant x % 274877906944 == y % 274877906944 is partially proven to be inductive.\nloop invariant x % 549755813888 == y % 549755813888 is partially proven to be inductive.\nloop invariant x % 1099511627776 == y % 1099511627776 is partially proven to be inductive.\nloop invariant x % 2199023255552 == y % 2199023255552 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= (2 + (y - 1) * y / 2);\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is partially proven to be inductive.\nloop invariant x >= (2 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x % 2 == y % 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= y;\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant x >= 0;\nloop invariant 0 <= y <= 99;\nloop invariant y >= 0;\nloop invariant x % 2 == y % 2;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\nloop invariant x == y;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nloop invariant x == y is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: x >= 0;\n\nloop invariant i4: y >= 0;\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nAssertion x % 2 == y % 2: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y % 2 == 0 ==> x % 2 == 0;\nloop invariant y % 2 == 1 ==> x % 2 == 1;\nloop invariant x + 2 <= 99;\nloop invariant x - 2 >= 0;\nloop invariant x + 2 <= x + 1;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x + 4 <= x + 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x - 4 <= x - 2;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 2 <= x - 2;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 2;\nloop invariant x + 2 <= x + 2;\nloop invariant x + 2 <= x - 4;\nloop invariant x - 4 <= x - 4;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant y % 2 == 0 ==> x % 2 == 0 is partially proven to be inductive.\nloop invariant y % 2 == 1 ==> x % 2 == 1 is preserved but not established.\nloop invariant x + 2 <= 99 is partially proven to be inductive.\nloop invariant x - 2 >= 0 is preserved but not established.\nloop invariant x + 2 <= x + 1 is partially proven to be inductive.\nloop invariant x + 2 <= x - 2 is partially proven to be inductive.\nloop invariant x + 2 <= x + 2 is partially proven to be inductive.\nloop invariant x + 2 <= x - 4 is partially proven to be inductive.\nloop invariant x + 4 <= x + 2 is partially proven to be inductive.\nloop invariant x - 4 <= x - 2 is partially proven to be inductive.\nloop invariant x - 4 <= x - 4 is partially proven to be inductive.\nloop invariant x - 2 <= x - 2 is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\nloop invariant i2: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\nloop invariant i8: x + 2 <= x + 2;\n\n\nloop invariant i11: x - 4 <= x - 2;\nloop invariant i12: x - 4 <= x - 4;\nloop invariant i13: x - 2 <= x - 2;\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 98;\nloop invariant x % 2 == y % 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 98 is established but not preserved.\nloop invariant x % 2 == y % 2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant y == 0;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 99 is established but not preserved.\nloop invariant y == 0 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is partially proven to be inductive.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 98;\nloop invariant 0 <= y <= 99;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 98 is established but not preserved.\nloop invariant 0 <= y <= 99 is preserved but not established.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 198;\nloop invariant (x % 2) == (y % 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 198 is established but not preserved.\nloop invariant (x % 2) == (y % 2) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant ( x + 2 * (y % 2) >= 0 );\nloop invariant ( x - 2 * ((y % 2) + 1) <= 98 );\nloop invariant ( y % 2 == (x % 2) );\nloop invariant ( x % 4 == y % 4 );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( x + 2 * (y % 2) >= 0 ) is partially proven to be inductive.\nloop invariant ( x - 2 * ((y % 2) + 1) <= 98 ) is established but not preserved.\nloop invariant ( y % 2 == (x % 2) ) is neither established nor preserved.\nloop invariant ( x % 4 == y % 4 ) is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: ( x + 2 * (y % 2) >= 0 );\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 73: unbound logic variable i1. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\nloop invariant i1: 0 <= x <= 99;\nloop invariant i2: y == 0;\nloop invariant i3: x % 2 == y % 2;\nloop invariant i4: x >= y;\nloop invariant i5: x <= 99;\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: y <= 99;\nloop invariant i9: 0 <= y <= 99;\nloop invariant i10: x - y % 2 == 0;\nloop invariant i11: y % 2 == 0 ==> x == 0;\nloop invariant i12: y % 2 == 1 ==> x == 1;\nloop invariant i13: y % 2 == 0 ==> x % 2 == 0;\nloop invariant i14: y % 2 == 1 ==> x % 2 == 1;\nloop invariant i15: y % 2 == 0 ==> x - y % 2 == 0;\nloop invariant i16: y % 2 == 1 ==> x - y % 2 == 2;\nloop invariant i17: y % 2 == 1 ==> x - y % 2 == 4;\nloop invariant i18: y % 2 == 1 ==> x - y % 2 == 6;\nloop invariant i19: y % 2 == 1 ==> x - y % 2 == 8;\nloop invariant i20: y % 2 == 1 ==> x - y % 2 == 10;\nloop invariant i21: y % 2 == 1 ==> x - y % 2 == 12;\nloop invariant i22: x % 4 == y % 4;\nloop invariant i23: x % 8 == y % 8;\nloop invariant i24: x % 16 == y % 16;\nloop invariant i25: x % 32 == y % 32;\nloop invariant i26: x % 64 == y % 64;\nloop invariant i27: x % 128 == y % 128;\nloop invariant i28: x % 256 == y % 256;\nloop invariant i29: x % 512 == y % 512;\nloop invariant i30: x % 1024 == y % 1024;\nloop invariant i31: x % 2048 == y % 2048;\nloop invariant i32: x % 4096 == y % 4096;\nloop invariant i33: x % 8192 == y % 8192;\nloop invariant i34: x % 16384 == y % 16384;\nloop invariant i35: x % 32768 == y % 32768;\nloop invariant i36: x % 65536 == y % 65536;\nloop invariant i37: x % 131072 == y % 131072;\nloop invariant i38: x % 262144 == y % 262144;\nloop invariant i39: x % 524288 == y % 524288;\nloop invariant i40: x % 1048576 == y % 1048576;\nloop invariant i41: x % 2097152 == y % 2097152;\nloop invariant i42: x % 4194304 == y % 4194304;\nloop invariant i43: x % 8388608 == y % 8388608;\nloop invariant i44: x % 16777216 == y % 16777216;\nloop invariant i45: x % 33554432 == y % 33554432;\nloop invariant i46: x % 67108864 == y % 67108864;\nloop invariant i47: x % 134217728 == y % 134217728;\nloop invariant i48: x % 268435456 == y % 268435456;\nloop invariant i49: x % 536870912 == y % 536870912;\nloop invariant i50: x % 1073741824 == y % 1073741824;\nloop invariant i51: x % 2147483648 == y % 2147483648;\nloop invariant i52: x % 4294967296 == y % 4294967296;\nloop invariant i53: x % 8589934592 == y % 8589934592;\nloop invariant i54: x % 17179869184 == y % 17179869184;\nloop invariant i55: x % 34359738368 == y % 34359738368;\nloop invariant i56: x % 68719476736 == y % 68719476736;\nloop invariant i57: x % 137438953472 == y % 137438953472;\nloop invariant i58: x % 274877906944 == y % 274877906944;\nloop invariant i59: x % 549755813888 == y % 549755813888;\nloop invariant i60: x % 1099511627776 == y % 1099511627776;\nloop invariant i61: x % 2199023255552 == y % 2199023255552;\nloop invariant i62: i1;\nloop invariant i63: i2;\nloop invariant i64: i3;\nloop invariant i65: i4;\nloop invariant i66: i5;\nloop invariant i67: i6;\nloop invariant i68: i7;\nloop invariant i69: i8;\nloop invariant i70: i9;\nloop invariant i71: i10;\nloop invariant i72: i11;\nloop invariant i73: i12;\nloop invariant i74: i13;\nloop invariant i75: i14;\nloop invariant i76: i15;\nloop invariant i77: i16;\nloop invariant i78: i17;\nloop invariant i79: i18;\nloop invariant i80: i19;\nloop invariant i81: i20;\nloop invariant i82: i21;\nloop invariant i83: i22;\nloop invariant i84: i23;\nloop invariant i85: i24;\nloop invariant i86: i25;\nloop invariant i87: i26;\nloop invariant i88: i27;\nloop invariant i89: i28;\nloop invariant i90: i29;\nloop invariant i91: i30;\nloop invariant i92: i31;\nloop invariant i93: i32;\nloop invariant i94: i33;\nloop invariant i95: i34;\nloop invariant i96: i35;\nloop invariant i97: i36;\nloop invariant i98: i37;\nloop invariant i99: i38;\nloop invariant i100: i39;\nloop invariant i101: i40;\nloop invariant i102: i41;\nloop invariant i103: i42;\nloop invariant i104: i43;\nloop invariant i105: i44;\nloop invariant i106: i45;\nloop invariant i107: i46;\nloop invariant i108: i47;\nloop invariant i109: i48;\nloop invariant i110: i49;\nloop invariant i111: i50;\nloop invariant i112: i51;\nloop invariant i113: i52;\nloop invariant i114: i53;\nloop invariant i115: i54;\nloop invariant i116: i55;\nloop invariant i117: i56;\nloop invariant i118: i57;\nloop invariant i119: i58;\nloop invariant i120: i59;\nloop invariant i121: i60;\nloop invariant i122: i61;\nloop invariant i123: i62;\nloop invariant i124: i63;\nloop invariant i125: i64;\nloop invariant i126: i65;\nloop invariant i127: i66;\nloop invariant i128: i67;\nloop invariant i129: i68;\nloop invariant i130: i69;\nloop invariant i131: i70;\nloop invariant i132: i71;\nloop invariant i133: i72;\nloop invariant i134: i73;\nloop invariant i135: i74;\nloop invariant i136: i75;\nloop invariant i137: i76;\nloop invariant i138: i77;\nloop invariant i139: i78;\nloop invariant i140: i79;\nloop invariant i141: i80;\nloop invariant i142: i81;\nloop invariant i143: i82;\nloop invariant i144: i83;\nloop invariant i145: i84;\nloop invariant i146: i85;\nloop invariant i147: i86;\nloop invariant i148: i87;\nloop invariant i149: i88;\nloop invariant i150: i89;\nloop invariant i151: i90;\nloop invariant i152: i91;\nloop invariant i153: i92;\nloop invariant i154: i93;\nloop invariant i155: i94;\nloop invariant i156: i95;\nloop invariant i157: i96;\nloop invariant i158: i97;\nloop invariant i159: i98;\nloop invariant i160: i99;\nloop invariant i161: i100;\nloop invariant i162: i101;\nloop invariant i163: i102;\nloop invariant i164: i103;\nloop invariant i165: i104;\nloop invariant i166: i105;\nloop invariant i167: i106;\nloop invariant i168: i107;\nloop invariant i169: i108;\nloop invariant i170: i109;\nloop invariant i171: i110;\nloop invariant i172: i111;\nloop invariant i173: i112;\nloop invariant i174: i113;\nloop invariant i175: i114;\nloop invariant i176: i115;\nloop invariant i177: i116;\nloop invariant i178: i117;\nloop invariant i179: i118;\nloop invariant i180: i119;\nloop invariant i181: i120;\nloop invariant i182: i121;\nloop invariant i183: i122;\nloop invariant i184: i123;\nloop invariant i185: i124;\nloop invariant i186: i125;\nloop invariant i187: i126;\nloop invariant i188: i127;\nloop invariant i189: i128;\nloop invariant i190: i129;\nloop invariant i191: i130;\nloop invariant i192: i131;\nloop invariant i193: i132;\nloop invariant i194: i133;\nloop invariant i195: i134;\nloop invariant i196: i135;\nloop invariant i197: i136;\nloop invariant i198: i137;\nloop invariant i199: i138;\nloop invariant i200: i139;\nloop invariant i201: i140;\nloop invariant i202: i141;\nloop invariant i203: i142;\nloop invariant i204: i143;\nloop invariant i205: i144;\nloop invariant i206: i145;\nloop invariant i207: i146;\nloop invariant i208: i147;\nloop invariant i209: i148;\nloop invariant i210: i149;\nloop invariant i211: i150;\nloop invariant i212: i151;\nloop invariant i213: i152;\nloop invariant i214: i153;\nloop invariant i215: i154;\nloop invariant i216: i155;\nloop invariant i217: i156;\nloop invariant i218: i157;\nloop invariant i219: i158;\nloop invariant i220: 0 <= y;\nloop invariant i221: x >= (2 + (y - 1) * y / 2);\nloop invariant i222: x == y;\nloop invariant i223: 0 <= y <= 100000;\nloop invariant i224: x >= (1 + (y - 1) * y / 2);\nloop invariant i225: x + 2 <= 99;\nloop invariant i226: x - 2 >= 0;\nloop invariant i227: x + 2 <= x + 1;\nloop invariant i228: x + 2 <= x - 2;\nloop invariant i229: x + 2 <= x + 2;\nloop invariant i230: x + 2 <= x - 4;\nloop invariant i231: x + 4 <= x + 2;\nloop invariant i232: x - 4 <= x - 2;\nloop invariant i233: x - 4 <= x - 4;\nloop invariant i234: x - 2 <= x - 2;\nloop invariant i235: x <= 98;\nloop invariant i236: (x % 2) == (y % 2);\nloop invariant i237: 0 <= x <= 98;\nloop invariant i238: 0 <= x <= 198;\nloop invariant i239: ( x + 2 * (y % 2) >= 0 );\nloop invariant i240: ( x - 2 * ((y % 2) + 1) <= 98 );\nloop invariant i241: ( y % 2 == (x % 2) );\nloop invariant i242: ( x % 4 == y % 4 );\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "combined_annotation_num_solver_calls": 179,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  /*@\n\n\n\n\n\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\n\n\n\n\n\nloop invariant i13: y % 2 == 0 ==> x % 2 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i220: 0 <= y;\n\n\n\n\n\n\n\n\nloop invariant i229: x + 2 <= x + 2;\n\n\nloop invariant i232: x - 4 <= x - 2;\nloop invariant i233: x - 4 <= x - 4;\nloop invariant i234: x - 2 <= x - 2;\n\n\n\n\nloop invariant i239: ( x + 2 * (y % 2) >= 0 );\n\n\n\n*/\nwhile (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 <= -50;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant v1 - v2 + v3 >= -v2;\nloop invariant v1 + v3 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant t <= 5;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant 5 * t + 75 >= x2;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant 0 <= y <= 100000 ==> 0 <= y + 1 <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * (y + 1) / 2) ==> x >= (1 + (y - 1) * y / 2 + (y - 1));\nloop invariant v1 - v3 >= 0 ==> v2 - v1 - v3 >= 0 ==> v2 - (v1 + v3) >= 0 ==> v2 + 2*t >= (v1 + v3) + 2*t ==> v2 + 2*t >= v1 + v3;\nloop invariant v2 + 2*t >= v1 + v3 ==> v2 + 2*t - 5 >= (v1 + v3) - 5 ==> v2 + 2*t - 5 >= v1 - v3;\nloop invariant 5*t + 75 >= x2 ==> 5*(t + 1) + 75 >= x2 + 5 ==> 5*(t + 1) + 75 >= x2 + 5;\nloop invariant v2 <= 6 ==> v2 + 1 <= 7;\nloop invariant v3 >= 0 ==> v3 >= 0;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 - 6 >= 0 - 6 ==> v2 >= -6;\nloop invariant x2 + 5*t >= 75 ==> x2 + 5*(t + 1) >= 75 + 5 ==> x2 + 5*(t + 1) >= 80;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t - 2 >= 0 - 2 ==> v1 - 2*v2 + v3 + 2*t - 2 >= -2;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 - 1 >= 0 - 1 ==> v1 - v3 - 1 >= -1;\nloop invariant x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v2;\nloop invariant x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v3;\nloop invariant 0 <= y <= 100000 ==> 0 <= 100000 <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (100000 - 1) * 100000 / 2) ==> x >= 25000000000;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant v2 + 2*t >= v1 + v3 ==> v2 + 2*0 >= v1 + v3 ==> v2 >= v1 + v3;\nloop invariant 5*t + 75 >= x2 ==> 5*0 + 75 >= x2 ==> 75 >= x2;\nloop invariant v2 <= 6 ==> v2 <= 6;\nloop invariant v3 >= 0 ==> v3 >= 0;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 6 <= v2 <= 11;\nloop invariant 0 <= v3 <= 50;\nloop invariant 100 <= x1 <= 105;\nloop invariant 75 <= x2 <= 80;\nloop invariant -50 <= x3 <= 0;\nloop invariant 0 <= t <= 12;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v3 >= 0;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant 2*x2 - x1 - x3 <= 0;\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 <= -50;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 + v1 >= x2 + v2;\nloop invariant x1 + v1 >= x3 + v3;\nloop invariant x2 + v2 >= x3 + v3;\nloop invariant x1 + v1 <= x2 + v2;\nloop invariant x1 + v1 <= x3 + v3;\nloop invariant x2 + v2 <= x3 + v3;\nloop invariant x1 + v1 >= x2 + v2 + v3;\nloop invariant x1 + v1 >= x3 + v2 + v3;\nloop invariant x2 + v2 >= x3 + v2 + v3;\nloop invariant x1 + v1 <= x2 + v2 + v3;\nloop invariant x1 + v1 <= x3 + v2 + v3;\nloop invariant x2 + v2 <= x3 + v2 + v3;\nloop invariant x1 + v1 >= x2 + v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + v2 + 2*v3;\nloop invariant x1 + v1 >= x2 + 2*v2 + v3;\nloop invariant x1 + v1 >= x3 + 2*v2 + v3;\nloop invariant x2 + v2 >= x3 + 2*v2 + v3;\nloop invariant x1 + v1 <= x2 + 2*v2 + v3;\nloop invariant x1 + v1 <= x3 + 2*v2 + v3;\nloop invariant x2 + v2 <= x3 + 2*v2 + v3;\nloop invariant x1 + v1 >= x2 + 2*v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + 2*v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + 2*v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + 2*v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + 2*v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + 2*v2 + 2*v3;\nloop invariant x1 + v1 >= x2 + 3*v2 + v3;\nloop invariant x1 + v1 >= x3 + 3*v2 + v3;\nloop invariant x2 + v2 >= x3 + 3*v2 + v3;\nloop invariant x1 + v1 <= x2 + 3*v2 + v3;\nloop invariant x1 + v1 <= x3 + 3*v2 + v3;\nloop invariant x2 + v2 <= x3 + 3*v2 + v3;\nloop invariant x1 + v1 >= x2 + 3*v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + 3*v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + 3*v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + 3*v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + 3*v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + 3*v2 + 2*v3;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant x2 >= 75;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x2 <= 75;\nloop invariant -50 <= x3 <= 50;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant 0 <= t;\nloop invariant unknown_int() ==> (v2 +5 >=0);\nloop invariant unknown_int() ==> (v2 <= 5);\nloop invariant (!unknown_int()) ==> (2* x2 - x1 - x3>=0);\nloop invariant (!unknown_int()) ==> (2* x2 - x1 - x3 <=0);\nloop invariant (unknown_int() ==> (2* x2 - x1 - x3>=0)) => (!unknown_int() ==> (2* x2 - x1 - x3 <=0));\nloop invariant unknown_int() ==> (x1 = x1+v1);\nloop invariant unknown_int() ==> (x3 = x3+v3);\nloop invariant unknown_int() ==> (x2 = x2+v2);\nloop invariant unknown_int() ==> (v2 = v2-1);\nloop invariant (!unknown_int()) ==> (x1 = x1+v1);\nloop invariant (!unknown_int()) ==> (x3 = x3+v3);\nloop invariant (!unknown_int()) ==> (x2 = x2+v2);\nloop invariant (!unknown_int()) ==> (v2 = v2+1);\nloop invariant unknown_int() ==> (t = t+1);\nloop invariant (!unknown_int()) ==> (t = t+1);\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant unknown_int() ==> v2 <= 5;\nloop invariant unknown_int() ==> v3 >= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant unknown_int() ==> 5*t  + 75 >= x2;\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> v2 <= 6;\nloop invariant (!unknown_int()) ==> v2 <= 6;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> x2 + 5*t >= 75;\nloop invariant unknown_int() ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant (!unknown_int()) ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant unknown_int() ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant unknown_int() ==> v1 - v3 >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant (!unknown_int()) ==> v3  >= 0;\nloop invariant unknown_int() ==> 5*t  + 75 >= x2;\nloop invariant (!unknown_int()) ==> 5*t  + 75 >= x2;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> x2 + 5*t >= 75;\nloop invariant unknown_int() ==> v2 <= 6;\nloop invariant (!unknown_int()) ==> v2 <= 6;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant (!unknown_int()) ==> v1 <= 5;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant (!unknown_int()) ==> v3  >= 0;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 + 6 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 + 6 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v3 >= 0;\nloop invariant t == 0 ==> v2 + 5 >= 0;\nloop invariant t == 0 ==> v2 <= 5;\nloop invariant t == 0 ==> v2 + 6 >= 0;\nloop invariant t == 0 ==> v3 >= 0;\nloop invariant t > 0 ==> v2 + 5 >= 0;\nloop invariant t > 0 ==> v2 <= 5;\nloop invariant t > 0 ==> v2 + 6 >= 0;\nloop invariant t > 0 ==> v3 >= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0;\nloop invariant unknown_int() ==> v2 <= 5;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> v3 >= 0;\nloop invariant !unknown_int() ==> v2 + 5 >= 0;\nloop invariant !unknown_int() ==> v2 <= 5;\nloop invariant !unknown_int() ==> v2 + 6 >= 0;\nloop invariant !unknown_int() ==> v3 >= 0;\nloop invariant unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant !unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant !unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant !unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant !unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x3 <= -50;\nloop invariant 0 <= v3 <= 100000;\nloop invariant x1 >= -50;\nloop invariant x2 >= 75;\nloop invariant x1 + x2 >= -25;\nloop invariant v1 + v2 + v3 >= -100000;\nloop invariant 2*v2 + 2*t >= -100000;\nloop invariant v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 <= 100000;\nloop invariant 0 <= x3 <= -50;\nloop invariant 0 <= v3 <= 100000;\nloop invariant x1 >= -50;\nloop invariant x2 >= 75;\nloop invariant x1 + x2 >= -25;\nloop invariant v1 + v2 + v3 >= -100000;\nloop invariant 2*v2 + 2*t >= -100000;\nloop invariant v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 <= 100000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= v2 + 6 - v1 + v3;\nloop invariant 0 <= x3 <= v3;\nloop invariant 0 <= x1 <= 100 + v1;\nloop invariant 0 <= x2 <= 75 + v2;\nloop invariant v1 <= 5;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 == t;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 >= 0;\nloop invariant 2*x2 - x1 - x3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 >= 0 ==> 2*x2 - x1 - x3 >= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> 2*x2 - x1 - x3 <= 0;\nloop invariant 5*t + 75 >= x2 ==> x2 >= 5*t + 75;\nloop invariant v2 + 6 >= 0 ==> v2 >= -6;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 >= v3;\nloop invariant v1 <= 5 ==> v1 + v3 >= 0;\nloop invariant v2 <= 5 ==> v2 + v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 <= -50;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x1 >= 100 is partially proven to be inductive.\nloop invariant x2 >= 75 is partially proven to be inductive.\nloop invariant x3 <= -50 is established but not preserved.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant v2 >= 0 is established but not preserved.\nloop invariant v2 <= 5 is established but not preserved.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2*(x2 + v2*t) >= x1 + x3 is established but not preserved.\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: x1 >= 100;\n\n\nloop invariant i4: v3 >= 0;\nloop invariant i5: v1 <= 5;\n\n\n\nloop invariant i9: 2*v2 + 2*t >= v1 + v3;\nloop invariant i10: 5*t + 75 >= x2;\nloop invariant i11: v2 + 6 >= 0;\nloop invariant i12: v2 <= 6;\nloop invariant i13: x2 + 5*t >= 75;\nloop invariant i14: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i15: v1 - v3 >= 0;\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant v1 - v2 + v3 >= -v2;\nloop invariant v1 + v3 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant t <= 5;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant 5 * t + 75 >= x2;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is established but not preserved.\nloop invariant 0 <= t <= 5 is established but not preserved.\nloop invariant v1 - v2 + v3 >= -v2 is partially proven to be inductive.\nloop invariant v1 + v3 >= 0 is partially proven to be inductive.\nloop invariant 2 * v2 + 2 * t >= v1 + v3 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 >= 0 is established but not preserved.\nloop invariant t <= 5 is partially proven to be inductive.\nloop invariant x2 + 5 * t >= 75 is partially proven to be inductive.\nloop invariant x2 + 5 * t <= 125 is partially proven to be inductive.\nloop invariant 5 * t + 75 >= x2 is partially proven to be inductive.\nAssertion v1 <= 5: Unproven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Unproven\nAssertion v1 - v3 >= 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: v1 - v2 + v3 >= -v2;\nloop invariant i4: v1 + v3 >= 0;\nloop invariant i5: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i6: v2 + 6 >= 0;\nloop invariant i7: v2 <= 6;\nloop invariant i8: v3 >= 0;\n\n\nloop invariant i11: x2 + 5 * t >= 75;\n\nloop invariant i13: 5 * t + 75 >= x2;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 11,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant 0 <= y <= 100000 ==> 0 <= y + 1 <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * (y + 1) / 2) ==> x >= (1 + (y - 1) * y / 2 + (y - 1));\nloop invariant v1 - v3 >= 0 ==> v2 - v1 - v3 >= 0 ==> v2 - (v1 + v3) >= 0 ==> v2 + 2*t >= (v1 + v3) + 2*t ==> v2 + 2*t >= v1 + v3;\nloop invariant v2 + 2*t >= v1 + v3 ==> v2 + 2*t - 5 >= (v1 + v3) - 5 ==> v2 + 2*t - 5 >= v1 - v3;\nloop invariant 5*t + 75 >= x2 ==> 5*(t + 1) + 75 >= x2 + 5 ==> 5*(t + 1) + 75 >= x2 + 5;\nloop invariant v2 <= 6 ==> v2 + 1 <= 7;\nloop invariant v3 >= 0 ==> v3 >= 0;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 - 6 >= 0 - 6 ==> v2 >= -6;\nloop invariant x2 + 5*t >= 75 ==> x2 + 5*(t + 1) >= 75 + 5 ==> x2 + 5*(t + 1) >= 80;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t - 2 >= 0 - 2 ==> v1 - 2*v2 + v3 + 2*t - 2 >= -2;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 - 1 >= 0 - 1 ==> v1 - v3 - 1 >= -1;\nloop invariant x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v2;\nloop invariant x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v3;\nloop invariant 0 <= y <= 100000 ==> 0 <= 100000 <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (100000 - 1) * 100000 / 2) ==> x >= 25000000000;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant v2 + 2*t >= v1 + v3 ==> v2 + 2*0 >= v1 + v3 ==> v2 >= v1 + v3;\nloop invariant 5*t + 75 >= x2 ==> 5*0 + 75 >= x2 ==> 75 >= x2;\nloop invariant v2 <= 6 ==> v2 <= 6;\nloop invariant v3 >= 0 ==> v3 >= 0;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 45: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: v1 - v3 >= 0;\n\nloop invariant i5: 5*t + 75 >= x2;\nloop invariant i6: v2 <= 6;\nloop invariant i7: v3 >= 0;\nloop invariant i8: v2 + 6 >= 0;\nloop invariant i9: x2 + 5*t >= 75;\nloop invariant i10: v1 - 2*v2 + v3 + 2*t >= 0;\n\nloop invariant i12: x1 >= x3;\n\n\n\nloop invariant i16: v1 - v3 >= 0 ==> v2 - v1 - v3 >= 0 ==> v2 - (v1 + v3) >= 0 ==> v2 + 2*t >= (v1 + v3) + 2*t ==> v2 + 2*t >= v1 + v3;\n\nloop invariant i18: 5*t + 75 >= x2 ==> 5*(t + 1) + 75 >= x2 + 5 ==> 5*(t + 1) + 75 >= x2 + 5;\nloop invariant i19: v2 <= 6 ==> v2 + 1 <= 7;\nloop invariant i20: v3 >= 0 ==> v3 >= 0;\nloop invariant i21: v2 + 6 >= 0 ==> v2 + 6 - 6 >= 0 - 6 ==> v2 >= -6;\nloop invariant i22: x2 + 5*t >= 75 ==> x2 + 5*(t + 1) >= 75 + 5 ==> x2 + 5*(t + 1) >= 80;\nloop invariant i23: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t - 2 >= 0 - 2 ==> v1 - 2*v2 + v3 + 2*t - 2 >= -2;\nloop invariant i24: v1 - v3 >= 0 ==> v1 - v3 - 1 >= 0 - 1 ==> v1 - v3 - 1 >= -1;\n\n\n\n\nloop invariant i29: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i30: v2 + 2*t >= v1 + v3 ==> v2 + 2*0 >= v1 + v3 ==> v2 >= v1 + v3;\nloop invariant i31: 5*t + 75 >= x2 ==> 5*0 + 75 >= x2 ==> 75 >= x2;\nloop invariant i32: v2 <= 6 ==> v2 <= 6;\nloop invariant i33: v2 + 6 >= 0 ==> v2 + 6 >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 6 <= v2 <= 11;\nloop invariant 0 <= v3 <= 50;\nloop invariant 100 <= x1 <= 105;\nloop invariant 75 <= x2 <= 80;\nloop invariant -50 <= x3 <= 0;\nloop invariant 0 <= t <= 12;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant 6 <= v2 <= 11 is preserved but not established.\nloop invariant 0 <= v3 <= 50 is partially proven to be inductive.\nloop invariant 100 <= x1 <= 105 is partially proven to be inductive.\nloop invariant 75 <= x2 <= 80 is partially proven to be inductive.\nloop invariant -50 <= x3 <= 0 is partially proven to be inductive.\nloop invariant 0 <= t <= 12 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2 * v2 - v1 - v3 == 0 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 <= 0 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5 * t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= v1 <= 5;\n\nloop invariant i3: 0 <= v3 <= 50;\n\n\n\n\nloop invariant i8: v1 - v3 >= 0;\n\n\n\n\n\nloop invariant i14: v2 + 6 >= 0;\nloop invariant i15: v3 >= 0;\nloop invariant i16: x2 + 5 * t >= 75;\nloop invariant i17: v1 - 2 * v2 + v3 + 2 * t >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2 * v2 - v1 - v3 == 0 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 5 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 <= 0 is preserved but not established.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant x2 + 5 * t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant 2 * v2 + 2 * t >= v1 + v3 is partially proven to be inductive.\nloop invariant 5 * t + 75 >= x2 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= v1 <= 5;\nloop invariant i2: v1 - v3 >= 0;\n\n\n\n\n\nloop invariant i8: v2 + 6 >= 0;\nloop invariant i9: v3 >= 0;\nloop invariant i10: v2 <= 6;\nloop invariant i11: x2 + 5 * t >= 75;\nloop invariant i12: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i13: v1 <= 5;\nloop invariant i14: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i15: 5 * t + 75 >= x2;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 28,
                    "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v3 >= 0;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant 2*x2 - x1 - x3 <= 0;\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 <= -50;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 + v1 >= x2 + v2;\nloop invariant x1 + v1 >= x3 + v3;\nloop invariant x2 + v2 >= x3 + v3;\nloop invariant x1 + v1 <= x2 + v2;\nloop invariant x1 + v1 <= x3 + v3;\nloop invariant x2 + v2 <= x3 + v3;\nloop invariant x1 + v1 >= x2 + v2 + v3;\nloop invariant x1 + v1 >= x3 + v2 + v3;\nloop invariant x2 + v2 >= x3 + v2 + v3;\nloop invariant x1 + v1 <= x2 + v2 + v3;\nloop invariant x1 + v1 <= x3 + v2 + v3;\nloop invariant x2 + v2 <= x3 + v2 + v3;\nloop invariant x1 + v1 >= x2 + v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + v2 + 2*v3;\nloop invariant x1 + v1 >= x2 + 2*v2 + v3;\nloop invariant x1 + v1 >= x3 + 2*v2 + v3;\nloop invariant x2 + v2 >= x3 + 2*v2 + v3;\nloop invariant x1 + v1 <= x2 + 2*v2 + v3;\nloop invariant x1 + v1 <= x3 + 2*v2 + v3;\nloop invariant x2 + v2 <= x3 + 2*v2 + v3;\nloop invariant x1 + v1 >= x2 + 2*v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + 2*v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + 2*v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + 2*v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + 2*v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + 2*v2 + 2*v3;\nloop invariant x1 + v1 >= x2 + 3*v2 + v3;\nloop invariant x1 + v1 >= x3 + 3*v2 + v3;\nloop invariant x2 + v2 >= x3 + 3*v2 + v3;\nloop invariant x1 + v1 <= x2 + 3*v2 + v3;\nloop invariant x1 + v1 <= x3 + 3*v2 + v3;\nloop invariant x2 + v2 <= x3 + 3*v2 + v3;\nloop invariant x1 + v1 >= x2 + 3*v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + 3*v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + 3*v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + 3*v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + 3*v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + 3*v2 + 2*v3;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is partially proven to be inductive.\nloop invariant 0 <= t <= 5 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 <= 0 is preserved but not established.\nloop invariant x1 >= 100 is partially proven to be inductive.\nloop invariant x2 >= 75 is partially proven to be inductive.\nloop invariant x3 <= -50 is partially proven to be inductive.\nloop invariant x1 >= x2 is partially proven to be inductive.\nloop invariant x1 >= x3 is partially proven to be inductive.\nloop invariant x2 >= x3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + v2 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + v2 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + 3*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + 3*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + 3*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + 3*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + 3*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + 3*v2 + 2*v3 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: v2 + 6 >= 0;\nloop invariant i4: 5*t + 75 >= x2;\nloop invariant i5: x2 + 5*t >= 75;\nloop invariant i6: v1 <= 5;\nloop invariant i7: 2*v2 + 2*t >= v1 + v3;\nloop invariant i8: v1 - v3 >= 0;\nloop invariant i9: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i10: v3 >= 0;\n\n\nloop invariant i13: x1 >= 100;\n\n\n\nloop invariant i17: x1 >= x3;\n\n\nloop invariant i20: x1 + v1 >= x3 + v3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is established but not preserved.\nloop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 - v1 - v3 == 0 is established but not preserved.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Unproven\nAssertion 5 * t + 75 >= x2: Unproven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Unproven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= v1 <= 5;\nloop invariant i3: v1 - v3 >= 0;\n\n\n\nloop invariant i7: v2 + 6 >= 0;\nloop invariant i8: v1 <= 5;\nloop invariant i9: v3 >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant x2 >= 75;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 45: unbound logic variable y. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: v1 <= 5;\nloop invariant i4: v1 - v3 >= 0;\n\n\n\n\n\nloop invariant i10: t >= 0;\nloop invariant i11: v2 + 6 >= 0;\nloop invariant i12: v3 >= 0;\nloop invariant i13: x2 + 5 * t >= 75;\nloop invariant i14: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i15: 2 * v2 + 2 * t >= v1 + v3;\n\nloop invariant i17: x3 >= -50;\n\n\nloop invariant i20: v2 <= 6;\nloop invariant i21: v3 <= 100;\nloop invariant i22: x1 >= 1;\n\n\n\nloop invariant i26: v1 >= -5;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is established but not preserved.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant t >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: v1 <= 5;\nloop invariant i3: v1 - v3 >= 0;\nloop invariant i4: 2*v2 + 2*t >= v1 + v3;\nloop invariant i5: 5*t + 75 >= x2;\nloop invariant i6: v2 <= 6;\nloop invariant i7: v3 >= 0;\nloop invariant i8: v2 + 6 >= 0;\nloop invariant i9: x2 + 5*t >= 75;\nloop invariant i10: v1 - 2*v2 + v3 + 2*t >= 0;\n\n\nloop invariant i13: t >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 38,
                    "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x2 <= 75;\nloop invariant -50 <= x3 <= 50;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant 0 <= t;\nloop invariant unknown_int() ==> (v2 +5 >=0);\nloop invariant unknown_int() ==> (v2 <= 5);\nloop invariant (!unknown_int()) ==> (2* x2 - x1 - x3>=0);\nloop invariant (!unknown_int()) ==> (2* x2 - x1 - x3 <=0);\nloop invariant (unknown_int() ==> (2* x2 - x1 - x3>=0)) => (!unknown_int() ==> (2* x2 - x1 - x3 <=0));\nloop invariant unknown_int() ==> (x1 = x1+v1);\nloop invariant unknown_int() ==> (x3 = x3+v3);\nloop invariant unknown_int() ==> (x2 = x2+v2);\nloop invariant unknown_int() ==> (v2 = v2-1);\nloop invariant (!unknown_int()) ==> (x1 = x1+v1);\nloop invariant (!unknown_int()) ==> (x3 = x3+v3);\nloop invariant (!unknown_int()) ==> (x2 = x2+v2);\nloop invariant (!unknown_int()) ==> (v2 = v2+1);\nloop invariant unknown_int() ==> (t = t+1);\nloop invariant (!unknown_int()) ==> (t = t+1);\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant unknown_int() ==> v2 <= 5;\nloop invariant unknown_int() ==> v3 >= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant unknown_int() ==> 5*t  + 75 >= x2;\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> v2 <= 6;\nloop invariant (!unknown_int()) ==> v2 <= 6;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> x2 + 5*t >= 75;\nloop invariant unknown_int() ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant (!unknown_int()) ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant unknown_int() ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant unknown_int() ==> v1 - v3 >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant (!unknown_int()) ==> v3  >= 0;\nloop invariant unknown_int() ==> 5*t  + 75 >= x2;\nloop invariant (!unknown_int()) ==> 5*t  + 75 >= x2;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> x2 + 5*t >= 75;\nloop invariant unknown_int() ==> v2 <= 6;\nloop invariant (!unknown_int()) ==> v2 <= 6;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant (!unknown_int()) ==> v1 <= 5;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant (!unknown_int()) ==> v3  >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 52: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\nloop invariant i4: 0 <= v1 <= 5;\n\nloop invariant i6: 0 <= v3;\nloop invariant i7: 0 <= t;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 28,
                    "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 + 6 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 + 6 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v3 >= 0;\nloop invariant t == 0 ==> v2 + 5 >= 0;\nloop invariant t == 0 ==> v2 <= 5;\nloop invariant t == 0 ==> v2 + 6 >= 0;\nloop invariant t == 0 ==> v3 >= 0;\nloop invariant t > 0 ==> v2 + 5 >= 0;\nloop invariant t > 0 ==> v2 <= 5;\nloop invariant t > 0 ==> v2 + 6 >= 0;\nloop invariant t > 0 ==> v3 >= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0;\nloop invariant unknown_int() ==> v2 <= 5;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> v3 >= 0;\nloop invariant !unknown_int() ==> v2 + 5 >= 0;\nloop invariant !unknown_int() ==> v2 <= 5;\nloop invariant !unknown_int() ==> v2 + 6 >= 0;\nloop invariant !unknown_int() ==> v3 >= 0;\nloop invariant unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant !unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant !unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant !unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant !unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 70: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= v3;\nloop invariant i3: v1 <= 5;\nloop invariant i4: v1 - v3 >= 0;\n\n\n\nloop invariant i8: v2 + 6 >= 0;\nloop invariant i9: v3 >= 0;\n\n\nloop invariant i12: 2 * x2 - x1 - x3 >= 0 ==> v2 + 6 >= 0;\nloop invariant i13: 2 * x2 - x1 - x3 >= 0 ==> v3 >= 0;\n\n\nloop invariant i16: 2 * x2 - x1 - x3 <= 0 ==> v2 + 6 >= 0;\nloop invariant i17: 2 * x2 - x1 - x3 <= 0 ==> v3 >= 0;\n\n\nloop invariant i20: t == 0 ==> v2 + 6 >= 0;\nloop invariant i21: t == 0 ==> v3 >= 0;\n\n\nloop invariant i24: t > 0 ==> v2 + 6 >= 0;\nloop invariant i25: t > 0 ==> v3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x3 <= -50;\nloop invariant 0 <= v3 <= 100000;\nloop invariant x1 >= -50;\nloop invariant x2 >= 75;\nloop invariant x1 + x2 >= -25;\nloop invariant v1 + v2 + v3 >= -100000;\nloop invariant 2*v2 + 2*t >= -100000;\nloop invariant v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 <= 100000;\nloop invariant 0 <= x3 <= -50;\nloop invariant 0 <= v3 <= 100000;\nloop invariant x1 >= -50;\nloop invariant x2 >= 75;\nloop invariant x1 + x2 >= -25;\nloop invariant v1 + v2 + v3 >= -100000;\nloop invariant 2*v2 + 2*t >= -100000;\nloop invariant v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x3 <= -50 is preserved but not established.\nloop invariant 0 <= v3 <= 100000 is partially proven to be inductive.\nloop invariant x1 >= -50 is partially proven to be inductive.\nloop invariant x2 >= 75 is partially proven to be inductive.\nloop invariant x1 + x2 >= -25 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 >= -100000 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= -100000 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= -100000 is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant x1 - x3 >= -100000 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 >= -100000 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 <= 100000 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= v3 <= 100000;\nloop invariant i3: x1 >= -50;\n\n\nloop invariant i6: v1 + v2 + v3 >= -100000;\nloop invariant i7: 2*v2 + 2*t >= -100000;\nloop invariant i8: v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant i9: v1 >= 0;\n\n\nloop invariant i12: v3 >= 0;\nloop invariant i13: v2 + 6 >= 0;\nloop invariant i14: v1 - v3 >= 0;\nloop invariant i15: x2 + 5*t >= 75;\nloop invariant i16: x1 - x3 >= -100000;\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= v2 + 6 - v1 + v3;\nloop invariant 0 <= x3 <= v3;\nloop invariant 0 <= x1 <= 100 + v1;\nloop invariant 0 <= x2 <= 75 + v2;\nloop invariant v1 <= 5;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 == t;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 >= 0;\nloop invariant 2*x2 - x1 - x3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 >= 0 ==> 2*x2 - x1 - x3 >= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> 2*x2 - x1 - x3 <= 0;\nloop invariant 5*t + 75 >= x2 ==> x2 >= 5*t + 75;\nloop invariant v2 + 6 >= 0 ==> v2 >= -6;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 >= v3;\nloop invariant v1 <= 5 ==> v1 + v3 >= 0;\nloop invariant v2 <= 5 ==> v2 + v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is partially proven to be inductive.\nloop invariant 0 <= t <= v2 + 6 - v1 + v3 is partially proven to be inductive.\nloop invariant 0 <= x3 <= v3 is preserved but not established.\nloop invariant 0 <= x1 <= 100 + v1 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 75 + v2 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 == t is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 >= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0 is partially proven to be inductive.\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 >= 0 ==> 2*x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> 2*x2 - x1 - x3 <= 0 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 ==> x2 >= 5*t + 75 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 ==> v2 >= -6 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 ==> v1 >= v3 is partially proven to be inductive.\nloop invariant v1 <= 5 ==> v1 + v3 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 ==> v2 + v3 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\nloop invariant i6: v1 <= 5;\n\n\n\n\n\n\nloop invariant i13: v2 + 6 >= 0 ==> v2 >= -6;\nloop invariant i14: v3 >= 0;\nloop invariant i15: v1 - v3 >= 0 ==> v1 >= v3;\nloop invariant i16: v1 <= 5 ==> v1 + v3 >= 0;\n\nloop invariant i18: 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0;\nloop invariant i19: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i20: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i21: x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 168: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: x1 >= 100;\nloop invariant i2: x2 >= 75;\nloop invariant i3: x3 <= -50;\nloop invariant i4: v3 >= 0;\nloop invariant i5: v1 <= 5;\nloop invariant i6: v2 >= 0;\nloop invariant i7: v2 <= 5;\nloop invariant i8: v2 + 5 >= 0;\nloop invariant i9: 2*v2 + 2*t >= v1 + v3;\nloop invariant i10: 5*t + 75 >= x2;\nloop invariant i11: v2 + 6 >= 0;\nloop invariant i12: v2 <= 6;\nloop invariant i13: x2 + 5*t >= 75;\nloop invariant i14: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i15: v1 - v3 >= 0;\nloop invariant i16: 2*(x2 + v2*t) >= x1 + x3;\nloop invariant i17: 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant i18: 0 <= v2 <= 5;\nloop invariant i19: 0 <= t <= 5;\nloop invariant i20: v1 - v2 + v3 >= -v2;\nloop invariant i21: v1 + v3 >= 0;\nloop invariant i22: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i23: 2 * x2 - x1 - x3 >= 0;\nloop invariant i24: t <= 5;\nloop invariant i25: x2 + 5 * t >= 75;\nloop invariant i26: x2 + 5 * t <= 125;\nloop invariant i27: 5 * t + 75 >= x2;\nloop invariant i28: 0 <= y <= 100000;\nloop invariant i29: x >= (1 + (y - 1) * y / 2);\nloop invariant i30: v2 + 2*t >= v1 + v3;\nloop invariant i31: x1 >= x2;\nloop invariant i32: x1 >= x3;\nloop invariant i33: x2 >= x3;\nloop invariant i34: 0 <= y <= 100000 ==> 0 <= y + 1 <= 100000;\nloop invariant i35: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * (y + 1) / 2) ==> x >= (1 + (y - 1) * y / 2 + (y - 1));\nloop invariant i36: v1 - v3 >= 0 ==> v2 - v1 - v3 >= 0 ==> v2 - (v1 + v3) >= 0 ==> v2 + 2*t >= (v1 + v3) + 2*t ==> v2 + 2*t >= v1 + v3;\nloop invariant i37: v2 + 2*t >= v1 + v3 ==> v2 + 2*t - 5 >= (v1 + v3) - 5 ==> v2 + 2*t - 5 >= v1 - v3;\nloop invariant i38: 5*t + 75 >= x2 ==> 5*(t + 1) + 75 >= x2 + 5 ==> 5*(t + 1) + 75 >= x2 + 5;\nloop invariant i39: v2 <= 6 ==> v2 + 1 <= 7;\nloop invariant i40: v3 >= 0 ==> v3 >= 0;\nloop invariant i41: v2 + 6 >= 0 ==> v2 + 6 - 6 >= 0 - 6 ==> v2 >= -6;\nloop invariant i42: x2 + 5*t >= 75 ==> x2 + 5*(t + 1) >= 75 + 5 ==> x2 + 5*(t + 1) >= 80;\nloop invariant i43: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t - 2 >= 0 - 2 ==> v1 - 2*v2 + v3 + 2*t - 2 >= -2;\nloop invariant i44: v1 - v3 >= 0 ==> v1 - v3 - 1 >= 0 - 1 ==> v1 - v3 - 1 >= -1;\nloop invariant i45: x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v2;\nloop invariant i46: x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v3;\nloop invariant i47: 0 <= y <= 100000 ==> 0 <= 100000 <= 100000;\nloop invariant i48: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (100000 - 1) * 100000 / 2) ==> x >= 25000000000;\nloop invariant i49: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i50: v2 + 2*t >= v1 + v3 ==> v2 + 2*0 >= v1 + v3 ==> v2 >= v1 + v3;\nloop invariant i51: 5*t + 75 >= x2 ==> 5*0 + 75 >= x2 ==> 75 >= x2;\nloop invariant i52: v2 <= 6 ==> v2 <= 6;\nloop invariant i53: v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant i54: 0 <= v1 <= 5;\nloop invariant i55: 6 <= v2 <= 11;\nloop invariant i56: 0 <= v3 <= 50;\nloop invariant i57: 100 <= x1 <= 105;\nloop invariant i58: 75 <= x2 <= 80;\nloop invariant i59: -50 <= x3 <= 0;\nloop invariant i60: 0 <= t <= 12;\nloop invariant i61: 2 * v2 - v1 - v3 == 0;\nloop invariant i62: 2 * x2 - x1 - x3 <= 0;\nloop invariant i63: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i64: 2*x2 - x1 - x3 >= 0;\nloop invariant i65: 2*x2 - x1 - x3 <= 0;\nloop invariant i66: x1 + v1 >= x2 + v2;\nloop invariant i67: x1 + v1 >= x3 + v3;\nloop invariant i68: x2 + v2 >= x3 + v3;\nloop invariant i69: x1 + v1 <= x2 + v2;\nloop invariant i70: x1 + v1 <= x3 + v3;\nloop invariant i71: x2 + v2 <= x3 + v3;\nloop invariant i72: x1 + v1 >= x2 + v2 + v3;\nloop invariant i73: x1 + v1 >= x3 + v2 + v3;\nloop invariant i74: x2 + v2 >= x3 + v2 + v3;\nloop invariant i75: x1 + v1 <= x2 + v2 + v3;\nloop invariant i76: x1 + v1 <= x3 + v2 + v3;\nloop invariant i77: x2 + v2 <= x3 + v2 + v3;\nloop invariant i78: x1 + v1 >= x2 + v2 + 2*v3;\nloop invariant i79: x1 + v1 >= x3 + v2 + 2*v3;\nloop invariant i80: x2 + v2 >= x3 + v2 + 2*v3;\nloop invariant i81: x1 + v1 <= x2 + v2 + 2*v3;\nloop invariant i82: x1 + v1 <= x3 + v2 + 2*v3;\nloop invariant i83: x2 + v2 <= x3 + v2 + 2*v3;\nloop invariant i84: x1 + v1 >= x2 + 2*v2 + v3;\nloop invariant i85: x1 + v1 >= x3 + 2*v2 + v3;\nloop invariant i86: x2 + v2 >= x3 + 2*v2 + v3;\nloop invariant i87: x1 + v1 <= x2 + 2*v2 + v3;\nloop invariant i88: x1 + v1 <= x3 + 2*v2 + v3;\nloop invariant i89: x2 + v2 <= x3 + 2*v2 + v3;\nloop invariant i90: x1 + v1 >= x2 + 2*v2 + 2*v3;\nloop invariant i91: x1 + v1 >= x3 + 2*v2 + 2*v3;\nloop invariant i92: x2 + v2 >= x3 + 2*v2 + 2*v3;\nloop invariant i93: x1 + v1 <= x2 + 2*v2 + 2*v3;\nloop invariant i94: x1 + v1 <= x3 + 2*v2 + 2*v3;\nloop invariant i95: x2 + v2 <= x3 + 2*v2 + 2*v3;\nloop invariant i96: x1 + v1 >= x2 + 3*v2 + v3;\nloop invariant i97: x1 + v1 >= x3 + 3*v2 + v3;\nloop invariant i98: x2 + v2 >= x3 + 3*v2 + v3;\nloop invariant i99: x1 + v1 <= x2 + 3*v2 + v3;\nloop invariant i100: x1 + v1 <= x3 + 3*v2 + v3;\nloop invariant i101: x2 + v2 <= x3 + 3*v2 + v3;\nloop invariant i102: x1 + v1 >= x2 + 3*v2 + 2*v3;\nloop invariant i103: x1 + v1 >= x3 + 3*v2 + 2*v3;\nloop invariant i104: x2 + v2 >= x3 + 3*v2 + 2*v3;\nloop invariant i105: x1 + v1 <= x2 + 3*v2 + 2*v3;\nloop invariant i106: x1 + v1 <= x3 + 3*v2 + 2*v3;\nloop invariant i107: x2 + v2 <= x3 + 3*v2 + 2*v3;\nloop invariant i108: 2*v2 - v1 - v3 == 0;\nloop invariant i109: t >= 0;\nloop invariant i110: x3 >= -50;\nloop invariant i111: x3 <= 100;\nloop invariant i112: v2 >= -4;\nloop invariant i113: v3 <= 100;\nloop invariant i114: x1 >= 1;\nloop invariant i115: x1 <= 100;\nloop invariant i116: x2 >= 1;\nloop invariant i117: x2 <= 100;\nloop invariant i118: v1 >= -5;\nloop invariant i119: 0 <= x1 <= 100;\nloop invariant i120: 0 <= x2 <= 75;\nloop invariant i121: -50 <= x3 <= 50;\nloop invariant i122: 0 <= v3;\nloop invariant i123: 0 <= t;\nloop invariant i124: unknown_int() ==> (v2 +5 >=0);\nloop invariant i125: unknown_int() ==> (v2 <= 5);\nloop invariant i126: (!unknown_int()) ==> (2* x2 - x1 - x3>=0);\nloop invariant i127: (!unknown_int()) ==> (2* x2 - x1 - x3 <=0);\nloop invariant i128: (unknown_int() ==> (2* x2 - x1 - x3>=0)) => (!unknown_int() ==> (2* x2 - x1 - x3 <=0));\nloop invariant i129: unknown_int() ==> (x1 = x1+v1);\nloop invariant i130: unknown_int() ==> (x3 = x3+v3);\nloop invariant i131: unknown_int() ==> (x2 = x2+v2);\nloop invariant i132: unknown_int() ==> (v2 = v2-1);\nloop invariant i133: (!unknown_int()) ==> (x1 = x1+v1);\nloop invariant i134: (!unknown_int()) ==> (x3 = x3+v3);\nloop invariant i135: (!unknown_int()) ==> (x2 = x2+v2);\nloop invariant i136: (!unknown_int()) ==> (v2 = v2+1);\nloop invariant i137: unknown_int() ==> (t = t+1);\nloop invariant i138: (!unknown_int()) ==> (t = t+1);\nloop invariant i139: unknown_int() ==> v1 <= 5;\nloop invariant i140: unknown_int() ==> v2 <= 5;\nloop invariant i141: unknown_int() ==> v3 >= 0;\nloop invariant i142: unknown_int() ==> v2 + 6 >= 0;\nloop invariant i143: (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i144: (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant i145: unknown_int() ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant i146: unknown_int() ==> 5*t  + 75 >= x2;\nloop invariant i147: unknown_int() ==> v3  >= 0;\nloop invariant i148: unknown_int() ==> x2 + 5*t >= 75;\nloop invariant i149: unknown_int() ==> v2 <= 6;\nloop invariant i150: (!unknown_int()) ==> v2 <= 6;\nloop invariant i151: (!unknown_int()) ==> v2 + 6 >= 0;\nloop invariant i152: (!unknown_int()) ==> x2 + 5*t >= 75;\nloop invariant i153: (!unknown_int()) ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant i154: unknown_int() ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i155: unknown_int() ==> v1 - v3 >= 0;\nloop invariant i156: (!unknown_int()) ==> v3  >= 0;\nloop invariant i157: (!unknown_int()) ==> 5*t  + 75 >= x2;\nloop invariant i158: (!unknown_int()) ==> v1 <= 5;\nloop invariant i159: 2 * x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0;\nloop invariant i160: 2 * x2 - x1 - x3 >= 0 ==> v2 <= 5;\nloop invariant i161: 2 * x2 - x1 - x3 >= 0 ==> v2 + 6 >= 0;\nloop invariant i162: 2 * x2 - x1 - x3 >= 0 ==> v3 >= 0;\nloop invariant i163: 2 * x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0;\nloop invariant i164: 2 * x2 - x1 - x3 <= 0 ==> v2 <= 5;\nloop invariant i165: 2 * x2 - x1 - x3 <= 0 ==> v2 + 6 >= 0;\nloop invariant i166: 2 * x2 - x1 - x3 <= 0 ==> v3 >= 0;\nloop invariant i167: t == 0 ==> v2 + 5 >= 0;\nloop invariant i168: t == 0 ==> v2 <= 5;\nloop invariant i169: t == 0 ==> v2 + 6 >= 0;\nloop invariant i170: t == 0 ==> v3 >= 0;\nloop invariant i171: t > 0 ==> v2 + 5 >= 0;\nloop invariant i172: t > 0 ==> v2 <= 5;\nloop invariant i173: t > 0 ==> v2 + 6 >= 0;\nloop invariant i174: t > 0 ==> v3 >= 0;\nloop invariant i175: unknown_int() ==> v2 + 5 >= 0;\nloop invariant i176: !unknown_int() ==> v2 + 5 >= 0;\nloop invariant i177: !unknown_int() ==> v2 <= 5;\nloop invariant i178: !unknown_int() ==> v2 + 6 >= 0;\nloop invariant i179: !unknown_int() ==> v3 >= 0;\nloop invariant i180: unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i181: unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i182: !unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i183: !unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i184: unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i185: unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i186: unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i187: unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i188: unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i189: unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i190: unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i191: unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i192: !unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i193: !unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i194: 0 <= x3 <= -50;\nloop invariant i195: 0 <= v3 <= 100000;\nloop invariant i196: x1 >= -50;\nloop invariant i197: x1 + x2 >= -25;\nloop invariant i198: v1 + v2 + v3 >= -100000;\nloop invariant i199: 2*v2 + 2*t >= -100000;\nloop invariant i200: v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant i201: v1 >= 0;\nloop invariant i202: x1 - x3 >= -100000;\nloop invariant i203: 2*x2 - x1 - x3 >= -100000;\nloop invariant i204: 2*x2 - x1 - x3 <= 100000;\nloop invariant i205: 0 <= t <= v2 + 6 - v1 + v3;\nloop invariant i206: 0 <= x3 <= v3;\nloop invariant i207: 0 <= x1 <= 100 + v1;\nloop invariant i208: 0 <= x2 <= 75 + v2;\nloop invariant i209: x1 + x2 + x3 - v1 - v2 - v3 == t;\nloop invariant i210: 2*x2 - x1 - x3 >= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 >= 0;\nloop invariant i211: 2*x2 - x1 - x3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant i212: x1 + x2 + x3 - v1 - v2 - v3 >= 0 ==> 2*x2 - x1 - x3 >= 0;\nloop invariant i213: x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> 2*x2 - x1 - x3 <= 0;\nloop invariant i214: 5*t + 75 >= x2 ==> x2 >= 5*t + 75;\nloop invariant i215: v2 + 6 >= 0 ==> v2 >= -6;\nloop invariant i216: v1 - v3 >= 0 ==> v1 >= v3;\nloop invariant i217: v1 <= 5 ==> v1 + v3 >= 0;\nloop invariant i218: v2 <= 5 ==> v2 + v3 >= 0;\nloop invariant i219: 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0;\nloop invariant i220: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i221: x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 99,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: x1 >= 100;\n\n\nloop invariant i4: v3 >= 0;\nloop invariant i5: v1 <= 5;\n\n\n\nloop invariant i9: 2*v2 + 2*t >= v1 + v3;\nloop invariant i10: 5*t + 75 >= x2;\nloop invariant i11: v2 + 6 >= 0;\nloop invariant i12: v2 <= 6;\nloop invariant i13: x2 + 5*t >= 75;\nloop invariant i14: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i15: v1 - v3 >= 0;\n\n\n\n\nloop invariant i20: v1 - v2 + v3 >= -v2;\nloop invariant i21: v1 + v3 >= 0;\nloop invariant i22: 2 * v2 + 2 * t >= v1 + v3;\n\n\nloop invariant i25: x2 + 5 * t >= 75;\n\nloop invariant i27: 5 * t + 75 >= x2;\n\n\n\n\nloop invariant i32: x1 >= x3;\n\n\n\nloop invariant i36: v1 - v3 >= 0 ==> v2 - v1 - v3 >= 0 ==> v2 - (v1 + v3) >= 0 ==> v2 + 2*t >= (v1 + v3) + 2*t ==> v2 + 2*t >= v1 + v3;\n\nloop invariant i38: 5*t + 75 >= x2 ==> 5*(t + 1) + 75 >= x2 + 5 ==> 5*(t + 1) + 75 >= x2 + 5;\nloop invariant i39: v2 <= 6 ==> v2 + 1 <= 7;\nloop invariant i40: v3 >= 0 ==> v3 >= 0;\nloop invariant i41: v2 + 6 >= 0 ==> v2 + 6 - 6 >= 0 - 6 ==> v2 >= -6;\nloop invariant i42: x2 + 5*t >= 75 ==> x2 + 5*(t + 1) >= 75 + 5 ==> x2 + 5*(t + 1) >= 80;\nloop invariant i43: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t - 2 >= 0 - 2 ==> v1 - 2*v2 + v3 + 2*t - 2 >= -2;\nloop invariant i44: v1 - v3 >= 0 ==> v1 - v3 - 1 >= 0 - 1 ==> v1 - v3 - 1 >= -1;\n\n\n\n\nloop invariant i49: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i50: v2 + 2*t >= v1 + v3 ==> v2 + 2*0 >= v1 + v3 ==> v2 >= v1 + v3;\nloop invariant i51: 5*t + 75 >= x2 ==> 5*0 + 75 >= x2 ==> 75 >= x2;\nloop invariant i52: v2 <= 6 ==> v2 <= 6;\nloop invariant i53: v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant i54: 0 <= v1 <= 5;\n\nloop invariant i56: 0 <= v3 <= 50;\n\n\n\n\n\n\nloop invariant i63: v1 - 2 * v2 + v3 + 2 * t >= 0;\n\n\n\nloop invariant i67: x1 + v1 >= x3 + v3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i109: t >= 0;\nloop invariant i110: x3 >= -50;\n\n\nloop invariant i113: v3 <= 100;\nloop invariant i114: x1 >= 1;\n\n\n\nloop invariant i118: v1 >= -5;\n\n\n\nloop invariant i122: 0 <= v3;\nloop invariant i123: 0 <= t;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i161: 2 * x2 - x1 - x3 >= 0 ==> v2 + 6 >= 0;\nloop invariant i162: 2 * x2 - x1 - x3 >= 0 ==> v3 >= 0;\n\n\nloop invariant i165: 2 * x2 - x1 - x3 <= 0 ==> v2 + 6 >= 0;\nloop invariant i166: 2 * x2 - x1 - x3 <= 0 ==> v3 >= 0;\nloop invariant i167: t == 0 ==> v2 + 5 >= 0;\nloop invariant i168: t == 0 ==> v2 <= 5;\nloop invariant i169: t == 0 ==> v2 + 6 >= 0;\nloop invariant i170: t == 0 ==> v3 >= 0;\n\n\nloop invariant i173: t > 0 ==> v2 + 6 >= 0;\nloop invariant i174: t > 0 ==> v3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i195: 0 <= v3 <= 100000;\nloop invariant i196: x1 >= -50;\n\nloop invariant i198: v1 + v2 + v3 >= -100000;\nloop invariant i199: 2*v2 + 2*t >= -100000;\nloop invariant i200: v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant i201: v1 >= 0;\nloop invariant i202: x1 - x3 >= -100000;\n\n\n\n\n\n\n\nloop invariant i210: 2*x2 - x1 - x3 >= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 >= 0;\n\n\nloop invariant i213: x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> 2*x2 - x1 - x3 <= 0;\n\nloop invariant i215: v2 + 6 >= 0 ==> v2 >= -6;\nloop invariant i216: v1 - v3 >= 0 ==> v1 >= v3;\nloop invariant i217: v1 <= 5 ==> v1 + v3 >= 0;\n\nloop invariant i219: 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0;\nloop invariant i220: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i221: x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= sn;\nloop invariant 0 <= x;\nloop invariant sn <= x * a;\nloop invariant x <= sn / a;\nloop invariant sn <= x * a || sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant sn == sn + (a * x);\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= (a * x);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant sn == x * a || sn == 0 ==> x == loop1 + n1;\nloop invariant 0 <= sn <= x * a;\nloop invariant sn == x * a || sn == 0 ==> x == loop1 + n1;\n*/\n```",
                "```\n/*@\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant sn == 0 => x == 0;\nloop invariant sn > 0 => x > 0;\nloop invariant sn == x * a => x == sn / a;\n*/\n```",
                "```\n/*@\nloop invariant sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant sn <= x*a;\nloop invariant sn >= 0;\nloop invariant sn <= x*a;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == x*a || sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= (n1 + 1) * a;\nloop invariant 0 <= x <= n1;\nloop invariant x == sn / a;\nloop invariant sn <= (n1 + 1) * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= (n1 + loop1) * a;\nloop invariant 0 <= x <= (n1 + loop1);\nloop invariant n1 + loop1 >= 0;\nloop invariant loop1 >= 0;\nloop invariant x == sn / a;\nloop invariant sn <= n1 * a || sn == 0;\nloop invariant sn <= loop1 * a;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant 0 <= x <= sn/a;\nloop invariant sn == x*a || sn == 0 ==> x == 0 || x == 1;\n*/\n```",
                "```\n/*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant sn == x*a || sn == 0;\nloop invariant x <= loop1 || x <= n1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= 2*x;\nloop invariant sn == x*a || sn == 0;\nloop invariant x >= 0;\nloop invariant sn <= 2*unsigned_int_max;\nloop invariant sn >= 0;\nloop invariant sn == x*2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n1;\nloop invariant sn == x*a;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn != 0 ==> x != 0;\nloop invariant sn == 0 ==> a == 2;\nloop invariant sn != 0 ==> a != 2;\nloop invariant sn == 0 ==> n1 == 0;\nloop invariant sn != 0 ==> n1 != 0;\nloop invariant sn == 0 ==> loop1 == 0;\nloop invariant sn != 0 ==> loop1 != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn != 0 ==> x != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\n*/\n```",
                "```\n/*@\nloop invariant ( ( n1 > loop1) ==> (x <= loop1) && (x >= 0));\nloop invariant ( ( n1 <= loop1) ==> (x <= n1) && (x >= 0));\n*/\n```",
                "```\n/*@\nloop invariant 0 < sn; loop invariant sn <= (sn + a); loop invariant 1 <= x; loop invariant x < 2147483648; loop invariant x <= sn / a; loop invariant sn == x * a;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn;\nloop invariant 0 <= x;\nloop invariant sn <= x * a;\nloop invariant x <= sn / a;\nloop invariant sn <= x * a || sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn is partially proven to be inductive.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant sn <= x * a is partially proven to be inductive.\nloop invariant x <= sn / a is established but not preserved.\nloop invariant sn <= x * a || sn == 0 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn;\nloop invariant i2: 0 <= x;\nloop invariant i3: sn <= x * a;\n\nloop invariant i5: sn <= x * a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant sn == sn + (a * x);\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= (a * x);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant sn == sn + (a * x) is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= (a * x) is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= (a * x);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant sn == x * a || sn == 0 ==> x == loop1 + n1;\nloop invariant 0 <= sn <= x * a;\nloop invariant sn == x * a || sn == 0 ==> x == loop1 + n1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant sn == x * a || sn == 0 ==> x == loop1 + n1 is neither established nor preserved.\nloop invariant 0 <= sn <= x * a is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: 0 <= sn <= x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant sn == 0 => x == 0;\nloop invariant sn > 0 => x > 0;\nloop invariant sn == x * a => x == sn / a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 21: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: sn <= x * a;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a) is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant sn <= x*a;\nloop invariant sn >= 0;\nloop invariant sn <= x*a;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == x*a || sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= x*a is partially proven to be inductive.\nloop invariant sn <= x*a is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == x*a || sn == 0 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\nloop invariant i2: sn <= x*a;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn == x*a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= (n1 + 1) * a;\nloop invariant 0 <= x <= n1;\nloop invariant x == sn / a;\nloop invariant sn <= (n1 + 1) * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= (n1 + 1) * a is partially proven to be inductive.\nloop invariant 0 <= x <= n1 is established but not preserved.\nloop invariant x == sn / a is established but not preserved.\nloop invariant sn <= (n1 + 1) * a is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= (n1 + loop1) * a;\nloop invariant 0 <= x <= (n1 + loop1);\nloop invariant n1 + loop1 >= 0;\nloop invariant loop1 >= 0;\nloop invariant x == sn / a;\nloop invariant sn <= n1 * a || sn == 0;\nloop invariant sn <= loop1 * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= (n1 + loop1) * a is established but not preserved.\nloop invariant 0 <= x <= (n1 + loop1) is partially proven to be inductive.\nloop invariant n1 + loop1 >= 0 is partially proven to be inductive.\nloop invariant loop1 >= 0 is partially proven to be inductive.\nloop invariant x == sn / a is established but not preserved.\nloop invariant sn <= n1 * a || sn == 0 is established but not preserved.\nloop invariant sn <= loop1 * a is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\nloop invariant i3: n1 + loop1 >= 0;\nloop invariant i4: loop1 >= 0;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant 0 <= x <= sn/a;\nloop invariant sn == x*a || sn == 0 ==> x == 0 || x == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= x*a is partially proven to be inductive.\nloop invariant 0 <= x <= sn/a is partially proven to be inductive.\nloop invariant sn == x*a || sn == 0 ==> x == 0 || x == 1 is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant sn == x*a || sn == 0;\nloop invariant x <= loop1 || x <= n1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant sn >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant sn == x*a || sn == 0 is partially proven to be inductive.\nloop invariant x <= loop1 || x <= n1 is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: sn == x*a || sn == 0;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2*x;\nloop invariant sn == x*a || sn == 0;\nloop invariant x >= 0;\nloop invariant sn <= 2*unsigned_int_max;\nloop invariant sn >= 0;\nloop invariant sn == x*2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 22: unbound logic variable unsigned_int_max. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= 2*x;\nloop invariant i2: sn == x*a || sn == 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: sn >= 0;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n1;\nloop invariant sn == x*a;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn != 0 ==> x != 0;\nloop invariant sn == 0 ==> a == 2;\nloop invariant sn != 0 ==> a != 2;\nloop invariant sn == 0 ==> n1 == 0;\nloop invariant sn != 0 ==> n1 != 0;\nloop invariant sn == 0 ==> loop1 == 0;\nloop invariant sn != 0 ==> loop1 != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn != 0 ==> x != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n1 is established but not preserved.\nloop invariant sn == x*a is partially proven to be inductive.\nloop invariant sn == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant sn != 0 ==> x != 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> a == 2 is partially proven to be inductive.\nloop invariant sn != 0 ==> a != 2 is partially proven to be inductive.\nloop invariant sn == 0 ==> n1 == 0 is preserved but not established.\nloop invariant sn != 0 ==> n1 != 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> loop1 == 0 is preserved but not established.\nloop invariant sn != 0 ==> loop1 != 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn != 0 ==> sn != 0 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\nloop invariant i4: sn != 0 ==> x != 0;\nloop invariant i5: sn == 0 ==> a == 2;\n\n\n\n\n\nloop invariant i11: sn == 0 ==> sn == 0;\nloop invariant i12: sn != 0 ==> sn != 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant ( ( n1 > loop1) ==> (x <= loop1) && (x >= 0));\nloop invariant ( ( n1 <= loop1) ==> (x <= n1) && (x >= 0));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( ( n1 > loop1) ==> (x <= loop1) && (x >= 0)) is established but not preserved.\nloop invariant ( ( n1 <= loop1) ==> (x <= n1) && (x >= 0)) is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 < sn; loop invariant sn <= (sn + a); loop invariant 1 <= x; loop invariant x < 2147483648; loop invariant x <= sn / a; loop invariant sn == x * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 < sn; loop invariant sn <= (sn + a); loop invariant 1 <= x; loop invariant x < 2147483648; loop invariant x <= sn / a; loop invariant sn == x * a is preserved but not established.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 31: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn;\nloop invariant i2: 0 <= x;\nloop invariant i3: sn <= x * a;\nloop invariant i4: x <= sn / a;\nloop invariant i5: sn <= x * a || sn == 0;\nloop invariant i6: sn == sn + (a * x);\nloop invariant i7: x >= 0;\nloop invariant i8: sn >= 0;\nloop invariant i9: sn <= (a * x);\nloop invariant i10: 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0;\nloop invariant i11: sn == x * a || sn == 0 ==> x == loop1 + n1;\nloop invariant i12: 0 <= sn <= x * a;\nloop invariant i13: sn == 0 => x == 0;\nloop invariant i14: sn > 0 => x > 0;\nloop invariant i15: sn == x * a => x == sn / a;\nloop invariant i16: sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a);\nloop invariant i17: 0 <= sn <= x*a;\nloop invariant i18: sn <= x*a;\nloop invariant i19: sn == x*a || sn == 0;\nloop invariant i20: 0 <= sn <= (n1 + 1) * a;\nloop invariant i21: 0 <= x <= n1;\nloop invariant i22: x == sn / a;\nloop invariant i23: sn <= (n1 + 1) * a;\nloop invariant i24: 0 <= sn <= (n1 + loop1) * a;\nloop invariant i25: 0 <= x <= (n1 + loop1);\nloop invariant i26: n1 + loop1 >= 0;\nloop invariant i27: loop1 >= 0;\nloop invariant i28: sn <= n1 * a || sn == 0;\nloop invariant i29: sn <= loop1 * a;\nloop invariant i30: 0 <= x <= sn/a;\nloop invariant i31: sn == x*a || sn == 0 ==> x == 0 || x == 1;\nloop invariant i32: x <= loop1 || x <= n1;\nloop invariant i33: 0 <= sn <= 2*x;\nloop invariant i34: sn <= 2*unsigned_int_max;\nloop invariant i35: sn == x*2;\nloop invariant i36: sn == x*a;\nloop invariant i37: sn == 0 ==> x == 0;\nloop invariant i38: sn != 0 ==> x != 0;\nloop invariant i39: sn == 0 ==> a == 2;\nloop invariant i40: sn != 0 ==> a != 2;\nloop invariant i41: sn == 0 ==> n1 == 0;\nloop invariant i42: sn != 0 ==> n1 != 0;\nloop invariant i43: sn == 0 ==> loop1 == 0;\nloop invariant i44: sn != 0 ==> loop1 != 0;\nloop invariant i45: sn == 0 ==> sn == 0;\nloop invariant i46: sn != 0 ==> sn != 0;\nloop invariant i47: ( ( n1 > loop1) ==> (x <= loop1) && (x >= 0));\nloop invariant i48: ( ( n1 <= loop1) ==> (x <= n1) && (x >= 0));\nloop invariant i49: 0 < sn; loop invariant sn <= (sn + a); loop invariant 1 <= x; loop invariant x < 2147483648; loop invariant x <= sn / a; loop invariant sn == x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
            "combined_annotation_num_solver_calls": 13,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn;\nloop invariant i2: 0 <= x;\nloop invariant i3: sn <= x * a;\n\nloop invariant i5: sn <= x * a || sn == 0;\n\nloop invariant i7: x >= 0;\nloop invariant i8: sn >= 0;\nloop invariant i9: sn <= (a * x);\nloop invariant i10: 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0;\n\nloop invariant i12: 0 <= sn <= x * a;\n\n\n\nloop invariant i16: sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a);\nloop invariant i17: 0 <= sn <= x*a;\nloop invariant i18: sn <= x*a;\nloop invariant i19: sn == x*a || sn == 0;\n\n\nloop invariant i22: x == sn / a;\n\n\n\nloop invariant i26: n1 + loop1 >= 0;\nloop invariant i27: loop1 >= 0;\n\n\nloop invariant i30: 0 <= x <= sn/a;\n\n\nloop invariant i33: 0 <= sn <= 2*x;\n\nloop invariant i35: sn == x*2;\nloop invariant i36: sn == x*a;\nloop invariant i37: sn == 0 ==> x == 0;\nloop invariant i38: sn != 0 ==> x != 0;\nloop invariant i39: sn == 0 ==> a == 2;\n\n\n\n\n\nloop invariant i45: sn == 0 ==> sn == 0;\nloop invariant i46: sn != 0 ==> sn != 0;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  while((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= n <= 100000; loop invariant 0 <= f1 <= 100000; loop invariant 0 <= f2 <= 100000; loop invariant 0 <= g1 <= 100000; loop invariant 0 <= g2 <= 100000; loop invariant 0 <= h1 <= 100000; loop invariant 0 <= h2 <= 100000; loop invariant h1 == f1 + g1; loop invariant h2 == f2 + g2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant f2 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1;\nloop invariant f2 == g2 - h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1;\nloop invariant f2 == g2 - h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= unknown();\nloop invariant f1 == g2;\nloop invariant f2 == g1;\nloop invariant f1 == h1 - g1;\nloop invariant f2 == h2 - g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= unknown();\nloop invariant f1 <= f2 <= g2;\nloop invariant h1 <= h2 <= g1+f1;\nloop invariant h2 = h1+f1 ==> h1 <= h2 <= g1+f1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= f1 <= f2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 == f1 + g1;\nloop invariant g2 == f2 + g2;\nloop invariant (n > 0) ==> (h2 == h1 + f1);\nloop invariant (n > 0) ==> (h2 >= h1 + f1);\nloop invariant (n > 0) ==> (h2 <= h1 + f1);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant h1 = f1 + g1;\nloop invariant h2 = f2 + g2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 + g1 <= f2 + g2;\nloop invariant f1 + g1 <= h2;\nloop invariant f2 + g2 <= h2;\nloop invariant f1 + g1 <= f1 + g1;\nloop invariant f2 + g2 <= f2 + g2;\nloop invariant f1 + g1 <= 100000;\nloop invariant f2 + g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= h1;\nloop invariant f2 <= h2;\nloop invariant g1 <= h1;\nloop invariant g2 <= h2;\nloop invariant f1 <= 100000;\nloop invariant f2 <= 100000;\nloop invariant g1 <= 100000;\nloop invariant g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= f1;\nloop invariant f2 <= f2;\nloop invariant g1 <= g1;\nloop invariant g2 <= g2;\nloop invariant h1 <= h1;\nloop invariant h2 <= h2;\nloop invariant f1 <= 100000;\nloop invariant f2 <= 100000;\nloop invariant g1 <= 100000;\nloop invariant g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 + g1 <= f2 + g2;\nloop invariant f1 + g1 <= h2;\nloop invariant f2 + g2 <= h2;\nloop invariant f1 + g1 <= 100000;\nloop invariant f2 + g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= h1;\nloop invariant f2 <= h2;\nloop invariant g1 <= h1;\nloop invariant g2 <= h2;\nloop invariant f1 <= 100000;\nloop invariant f2 <= 100000;\nloop invariant g1 <= 100000;\nloop invariant g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= f1;\nloop invariant f2 <= f2;\nloop invariant g1 <= g1;\nloop invariant g2 <= g2;\nloop invariant h1 <= h1;\nloop invariant h2 <= h2;\nloop invariant f1 <= 100000;\nloop invariant f2 <= 100000;\nloop invariant g1 <= 100000;\nloop invariant g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 + g1 <= f2 + g2;\nloop invariant f1 + g1 <= h2;\nloop invariant f2 + g2 <= h2;\nloop invariant f1 + g1 <= 100000;\nloop invariant f2 + g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= h1;\nloop invariant f2 <= h2;\nloop invariant g1 <= h1;\nloop invariant g2 <= h2;\nloop invariant f1 <= 100000;\nloop invariant f2 <= 100000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 32767;\nloop invariant f2 >= f1 >= 0;\nloop invariant g2 >= g1 >= 0;\nloop invariant h2 >= h1 >= 0;\nloop invariant h1 == h2 + f1;\nloop invariant h2 == h1 + f1;\nloop invariant f2 == g2 + f1;\nloop invariant g2 == h2 + g1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 >= 0;\nloop invariant g1 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= unknown();\nloop invariant (f1 + g1 == h1);\nloop invariant (f2 + g2 == h2);\nloop invariant (f1 <= f2);\nloop invariant (g1 <= g2);\nloop invariant (h1 <= h2);\nloop invariant (n >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= g1 <= g2 <= f2 <= f1 <= n <= 100000;\nloop invariant h2 == h1 + f1;\nloop invariant g1 + f1 == f2 + g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n <= 2147483647;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= f1;\nloop invariant h2 >= f2;\nloop invariant h1 >= g1;\nloop invariant h2 >= g2;\nloop invariant h1 >= f1 + g1;\nloop invariant h2 >= f2 + g2;\nloop invariant h1 <= f1 + g1;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 <= f1 + g1 + 1;\nloop invariant h2 <= f2 + g2 + 1;\nloop invariant h1 >= f1 + g1 - 1;\nloop invariant h2 >= f2 + g2 - 1;\nloop invariant h1 <= f1 + g1 + 2;\nloop invariant h2 <= f2 + g2 + 2;\nloop invariant h1 >= f1 + g1 - 2;\nloop invariant h2 >= f2 + g2 - 2;\nloop invariant h1 <= f1 + g1 + 3;\nloop invariant h2 <= f2 + g2 + 3;\nloop invariant h1 >= f1 + g1 - 3;\nloop invariant h2 >= f2 + g2 - 3;\nloop invariant h1 <= f1 + g1 + 4;\nloop invariant h2 <= f2 + g2 + 4;\nloop invariant h1 >= f1 + g1 - 4;\nloop invariant h2 >= f2 + g2 - 4;\nloop invariant h1 <= f1 + g1 + 5;\nloop invariant h2 <= f2 + g2 + 5;\nloop invariant h1 >= f1 + g1 - 5;\nloop invariant h2 >= f2 + g2 - 5;\nloop invariant h1 <= f1 + g1 + 6;\nloop invariant h2 <= f2 + g2 + 6;\nloop invariant h1 >= f1 + g1 - 6;\nloop invariant h2 >= f2 + g2 - 6;\nloop invariant h1 <= f1 + g1 + 7;\nloop invariant h2 <= f2 + g2 + 7;\nloop invariant h1 >= f1 + g1 - 7;\nloop invariant h2 >= f2 + g2 - 7;\nloop invariant h1 <= f1 + g1 + 8;\nloop invariant h2 <= f2 + g2 + 8;\nloop invariant h1 >= f1 + g1 - 8;\nloop invariant h2 >= f2 + g2 - 8;\nloop invariant h1 <= f1 + g1 + 9;\nloop invariant h2 <= f2 + g2 + 9;\nloop invariant h1 >= f1 + g1 - 9;\nloop invariant h2 >= f2 + g2 - 9;\nloop invariant h1 <= f1 + g1 + 10;\nloop invariant h2 <= f2 + g2 + 10;\nloop invariant h1 >= f1 + g1 - 10;\nloop invariant h2 >= f2 + g2 - 10;\nloop invariant h1 <= f1 + g1 + 11;\nloop invariant h2 <= f2 + g2 + 11;\nloop invariant h1 >= f1 + g1 - 11;\nloop invariant h2 >= f2 + g2 - 11;\nloop invariant h1 <= f1 + g1 + 12;\nloop invariant h2 <= f2 + g2 + 12;\nloop invariant h1 >= f1 + g1 - 12;\nloop invariant h2 >= f2 + g2 - 12;\nloop invariant h1 <= f1 + g1 + 13;\nloop invariant h2 <= f2 + g2 + 13;\nloop invariant h1 >= f1 + g1 - 13;\nloop invariant h2 >= f2 + g2 - 13;\nloop invariant h1 <= f1 + g1 + 14;\nloop invariant h2 <= f2 + g2 + 14;\nloop invariant h1 >= f1 + g1 - 14;\nloop invariant h2 >= f2 + g2 - 14;\nloop invariant h1 <= f1 + g1 + 15;\nloop invariant h2 <= f2 + g2 + 15;\nloop invariant h1 >= f1 + g1 - 15;\nloop invariant h2 >= f2 + g2 - 15;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= f1 <= 1;\nloop invariant 0 <= f2 <= 1;\nloop invariant 0 <= g1 <= 2;\nloop invariant 0 <= g2 <= 2;\nloop invariant 0 <= h1 <= 3;\nloop invariant 0 <= h2 <= 3;\nloop invariant f1 + g1 <= h1;\nloop invariant f2 + g2 <= h2;\nloop invariant f1 + g1 >= h1 - 1;\nloop invariant f2 + g2 >= h2 - 1;\nloop invariant f1 + g1 <= h1 + 1;\nloop invariant f2 + g2 <= h2 + 1;\nloop invariant f1 + g1 >= h1 - 2;\nloop invariant f2 + g2 >= h2 - 2;\nloop invariant f1 + g1 <= h1 + 2;\nloop invariant f2 + g2 <= h2 + 2;\nloop invariant f1 + g1 >= h1 - 3;\nloop invariant f2 + g2 >= h2 - 3;\nloop invariant f1 + g1 <= h1 + 3;\nloop invariant f2 + g2 <= h2 + 3;\nloop invariant f1 + g1 >= h1 - 4;\nloop invariant f2 + g2 >= h2 - 4;\nloop invariant f1 + g1 <= h1 + 4;\nloop invariant f2 + g2 <= h2 + 4;\nloop invariant f1 + g1 >= h1 - 5;\nloop invariant f2 + g2 >= h2 - 5;\nloop invariant f1 + g1 <= h1 + 5;\nloop invariant f2 + g2 <= h2 + 5;\nloop invariant f1 + g1 >= h1 - 6;\nloop invariant f2 + g2 >= h2 - 6;\nloop invariant f1 + g1 <= h1 + 6;\nloop invariant f2 + g2 <= h2 + 6;\nloop invariant f1 + g1 >= h1 - 7;\nloop invariant f2 + g2 >= h2 - 7;\nloop invariant f1 + g1 <= h1 + 7;\nloop invariant f2 + g2 <= h2 + 7;\nloop invariant f1 + g1 >= h1 - 8;\nloop invariant f2 + g2 >= h2 - 8;\nloop invariant f1 + g1 <= h1 + 8;\nloop invariant f2 + g2 <= h2 + 8;\nloop invariant f1 + g1 >= h1 - 9;\nloop invariant f2 + g2 >= h2 - 9;\nloop invariant f1 + g1 <= h1 + 9;\nloop invariant f2 + g2 <= h2 + 9;\nloop invariant f1 + g1 >= h1 - 10;\nloop invariant f2 + g2 >= h2 - 10;\nloop invariant f1 + g1 <= h1 + 10;\nloop invariant f2 + g2 <= h2 + 10;\nloop invariant f1 + g1 >= h1 - 11;\nloop invariant f2 + g2 >= h2 - 11;\nloop invariant f1 + g1 <= h1 + 11;\nloop invariant f2 + g2 <= h2 + 11;\nloop invariant f1 + g1 >= h1 - 12;\nloop invariant f2 + g2 >= h2 - 12;\nloop invariant f1 + g1 <= h1 + 12;\nloop invariant f2 + g2 <= h2 + 12;\nloop invariant f1 + g1 >= h1 - 13;\nloop invariant f2 + g2 >= h2 - 13;\nloop invariant f1 + g1 <= h1 + 13;\nloop invariant f2 + g2 <= h2 + 13;\nloop invariant f1 + g1 >= h1 - 14;\nloop invariant f2 + g2 >= h2 - 14;\nloop invariant f1 + g1 <= h1 + 14;\nloop invariant f2 + g2 <= h2 + 14;\nloop invariant f1 + g1 >= h1 - 15;\nloop invariant f2 + g2 >= h2 - 15;\nloop invariant f1 + g1 <= h1 + 15;\nloop invariant f2 + g2 <= h2 + 15;\nloop invariant f1 + g1 >= h1 - 16;\nloop invariant f2 + g2 >= h2 - 16;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= f1 <= f2;\nloop invariant f1 + f2 == g1 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= f2;\nloop invariant g1 >= g2;\nloop invariant h1 >= h2;\nloop invariant (f1 == g1 - 1) ==> (h1 == f1 + g1);\nloop invariant (f1 == g1 - 1) ==> (h2 == f2 + g2);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 100;\nloop invariant 0 <= f1 <= 10;\nloop invariant 0 <= f2 <= 10;\nloop invariant 0 <= g1 <= 10;\nloop invariant 0 <= g2 <= 10;\nloop invariant 0 <= h1 <= 10;\nloop invariant 0 <= h2 <= 10;\nloop invariant h1 == h2 + f1;\nloop invariant h2 == h2 + f2;\nloop invariant h1 + h2 == f1 + g1;\nloop invariant h2 + h2 == f2 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= f1;\nloop invariant 0 <= f2;\nloop invariant 0 <= g1;\nloop invariant 0 <= g2;\nloop invariant 0 <= h1;\nloop invariant 0 <= h2;\nloop invariant f1 <= g1;\nloop invariant f2 <= g2;\nloop invariant h1 <= h2;\nloop invariant 0 <= h1 + f1;\nloop invariant 0 <= h2 + f2;\nloop invariant 0 <= h1 + f1 + h2 + f2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000; loop invariant 0 <= f1 <= 100000; loop invariant 0 <= f2 <= 100000; loop invariant 0 <= g1 <= 100000; loop invariant 0 <= g2 <= 100000; loop invariant 0 <= h1 <= 100000; loop invariant 0 <= h2 <= 100000; loop invariant h1 == f1 + g1; loop invariant h2 == f2 + g2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 100000; loop invariant 0 <= f1 <= 100000; loop invariant 0 <= f2 <= 100000; loop invariant 0 <= g1 <= 100000; loop invariant 0 <= g2 <= 100000; loop invariant 0 <= h1 <= 100000; loop invariant 0 <= h2 <= 100000; loop invariant h1 == f1 + g1; loop invariant h2 == f2 + g2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2 is preserved but not established.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant f2 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1;\nloop invariant f2 == g2 - h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 == g1 - h1;\nloop invariant f2 == g2 - h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant f2 == 1 is partially proven to be inductive.\nloop invariant g2 == 1 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is preserved but not established.\nloop invariant h2 == f2 + g2 is partially proven to be inductive.\nloop invariant f1 == g1 - h1 is partially proven to be inductive.\nloop invariant f2 == g2 - h2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= unknown();\nloop invariant f1 == g2;\nloop invariant f2 == g1;\nloop invariant f1 == h1 - g1;\nloop invariant f2 == h2 - g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant g1 == 1;\nloop invariant g2 == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\nloop invariant i3: f2 == g1;\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= unknown();\nloop invariant f1 <= f2 <= g2;\nloop invariant h1 <= h2 <= g1+f1;\nloop invariant h2 = h1+f1 ==> h1 <= h2 <= g1+f1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= f1 <= f2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 == f1 + g1;\nloop invariant g2 == f2 + g2;\nloop invariant (n > 0) ==> (h2 == h1 + f1);\nloop invariant (n > 0) ==> (h2 >= h1 + f1);\nloop invariant (n > 0) ==> (h2 <= h1 + f1);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 <= h2);\nloop invariant (n > 0) ==> (f1 <= f2);\nloop invariant (n > 0) ==> (g1 == f1 + g1);\nloop invariant (n > 0) ==> (g2 == f2 + g2);\nloop invariant (n > 0) ==> (h1 == f1 + g1);\nloop invariant (n > 0) ==> (h2 == f2 + g2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= f1 <= f2 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is preserved but not established.\nloop invariant h2 == f2 + g2 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant g1 == f1 + g1 is partially proven to be inductive.\nloop invariant g2 == f2 + g2 is partially proven to be inductive.\nloop invariant (n > 0) ==> (h2 == h1 + f1) is partially proven to be inductive.\nloop invariant (n > 0) ==> (h2 >= h1 + f1) is partially proven to be inductive.\nloop invariant (n > 0) ==> (h2 <= h1 + f1) is partially proven to be inductive.\nloop invariant (n > 0) ==> (h1 <= h2) is partially proven to be inductive.\nloop invariant (n > 0) ==> (f1 <= f2) is partially proven to be inductive.\nloop invariant (n > 0) ==> (g1 == f1 + g1) is partially proven to be inductive.\nloop invariant (n > 0) ==> (g2 == f2 + g2) is partially proven to be inductive.\nloop invariant (n > 0) ==> (h1 == f1 + g1) is partially proven to be inductive.\nloop invariant (n > 0) ==> (h2 == f2 + g2) is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\nloop invariant i9: (n > 0) ==> (h2 == h1 + f1);\nloop invariant i10: (n > 0) ==> (h2 >= h1 + f1);\nloop invariant i11: (n > 0) ==> (h2 <= h1 + f1);\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 14,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant h1 = f1 + g1;\nloop invariant h2 = f2 + g2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 + g1 <= f2 + g2;\nloop invariant f1 + g1 <= h2;\nloop invariant f2 + g2 <= h2;\nloop invariant f1 + g1 <= f1 + g1;\nloop invariant f2 + g2 <= f2 + g2;\nloop invariant f1 + g1 <= 100000;\nloop invariant f2 + g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= h1;\nloop invariant f2 <= h2;\nloop invariant g1 <= h1;\nloop invariant g2 <= h2;\nloop invariant f1 <= 100000;\nloop invariant f2 <= 100000;\nloop invariant g1 <= 100000;\nloop invariant g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= f1;\nloop invariant f2 <= f2;\nloop invariant g1 <= g1;\nloop invariant g2 <= g2;\nloop invariant h1 <= h1;\nloop invariant h2 <= h2;\nloop invariant f1 <= 100000;\nloop invariant f2 <= 100000;\nloop invariant g1 <= 100000;\nloop invariant g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 + g1 <= f2 + g2;\nloop invariant f1 + g1 <= h2;\nloop invariant f2 + g2 <= h2;\nloop invariant f1 + g1 <= 100000;\nloop invariant f2 + g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= h1;\nloop invariant f2 <= h2;\nloop invariant g1 <= h1;\nloop invariant g2 <= h2;\nloop invariant f1 <= 100000;\nloop invariant f2 <= 100000;\nloop invariant g1 <= 100000;\nloop invariant g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= f1;\nloop invariant f2 <= f2;\nloop invariant g1 <= g1;\nloop invariant g2 <= g2;\nloop invariant h1 <= h1;\nloop invariant h2 <= h2;\nloop invariant f1 <= 100000;\nloop invariant f2 <= 100000;\nloop invariant g1 <= 100000;\nloop invariant g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 + g1 <= f2 + g2;\nloop invariant f1 + g1 <= h2;\nloop invariant f2 + g2 <= h2;\nloop invariant f1 + g1 <= 100000;\nloop invariant f2 + g2 <= 100000;\nloop invariant h1 <= 100000;\nloop invariant h2 <= 100000;\nloop invariant f1 <= h1;\nloop invariant f2 <= h2;\nloop invariant g1 <= h1;\nloop invariant g2 <= h2;\nloop invariant f1 <= 100000;\nloop invariant f2 <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 24: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= 0;\nloop invariant i7: h2 >= 0;\n\n\nloop invariant i10: f1 <= f2;\nloop invariant i11: g1 <= g2;\nloop invariant i12: h1 <= h2;\nloop invariant i13: f1 + g1 <= f2 + g2;\n\n\nloop invariant i16: f1 + g1 <= f1 + g1;\nloop invariant i17: f2 + g2 <= f2 + g2;\n\n\n\n\nloop invariant i22: f1 <= h1;\n\n\n\n\n\n\n\nloop invariant i30: f1 <= f1;\nloop invariant i31: f2 <= f2;\nloop invariant i32: g1 <= g1;\nloop invariant i33: g2 <= g2;\nloop invariant i34: h1 <= h1;\nloop invariant i35: h2 <= h2;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 32767;\nloop invariant f2 >= f1 >= 0;\nloop invariant g2 >= g1 >= 0;\nloop invariant h2 >= h1 >= 0;\nloop invariant h1 == h2 + f1;\nloop invariant h2 == h1 + f1;\nloop invariant f2 == g2 + f1;\nloop invariant g2 == h2 + g1;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant f1 >= 0;\nloop invariant g1 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\nloop invariant g1 <= g2;\nloop invariant h1 <= h2;\nloop invariant f1 <= g1;\nloop invariant g1 <= h1;\nloop invariant f1 <= h2;\nloop invariant g1 <= h2;\nloop invariant f1 <= f2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 32767 is preserved but not established.\nloop invariant f2 >= f1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= g1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= h1 >= 0 is partially proven to be inductive.\nloop invariant h1 == h2 + f1 is partially proven to be inductive.\nloop invariant h2 == h1 + f1 is partially proven to be inductive.\nloop invariant f2 == g2 + f1 is partially proven to be inductive.\nloop invariant g2 == h2 + g1 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is preserved but not established.\nloop invariant h2 == f2 + g2 is partially proven to be inductive.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant h1 >= 0 is partially proven to be inductive.\nloop invariant h2 >= 0 is partially proven to be inductive.\nloop invariant f1 <= f2 is partially proven to be inductive.\nloop invariant g1 <= g2 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant f1 <= g1 is partially proven to be inductive.\nloop invariant g1 <= h1 is partially proven to be inductive.\nloop invariant f1 <= h2 is partially proven to be inductive.\nloop invariant g1 <= h2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f2 >= f1 >= 0;\nloop invariant i3: g2 >= g1 >= 0;\nloop invariant i4: h2 >= h1 >= 0;\n\nloop invariant i6: h2 == h1 + f1;\n\n\n\n\nloop invariant i11: f1 >= 0;\nloop invariant i12: g1 >= 0;\nloop invariant i13: h1 >= 0;\nloop invariant i14: h2 >= 0;\nloop invariant i15: f1 <= f2;\nloop invariant i16: g1 <= g2;\nloop invariant i17: h1 <= h2;\nloop invariant i18: f1 <= g1;\n\nloop invariant i20: f1 <= h2;\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= unknown();\nloop invariant (f1 + g1 == h1);\nloop invariant (f2 + g2 == h2);\nloop invariant (f1 <= f2);\nloop invariant (g1 <= g2);\nloop invariant (h1 <= h2);\nloop invariant (n >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\nloop invariant i4: (f1 <= f2);\nloop invariant i5: (g1 <= g2);\nloop invariant i6: (h1 <= h2);\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= g1 <= g2 <= f2 <= f1 <= n <= 100000;\nloop invariant h2 == h1 + f1;\nloop invariant g1 + f1 == f2 + g2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= g1 <= g2 <= f2 <= f1 <= n <= 100000 is preserved but not established.\nloop invariant h2 == h1 + f1 is partially proven to be inductive.\nloop invariant g1 + f1 == f2 + g2 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is partially proven to be inductive.\nloop invariant h2 == f2 + g2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: h2 == h1 + f1;\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 23,
                    "annotations": "```\n/*@\nloop invariant 1 <= n <= 2147483647;\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= f1;\nloop invariant h2 >= f2;\nloop invariant h1 >= g1;\nloop invariant h2 >= g2;\nloop invariant h1 >= f1 + g1;\nloop invariant h2 >= f2 + g2;\nloop invariant h1 <= f1 + g1;\nloop invariant h2 <= f2 + g2;\nloop invariant h1 <= f1 + g1 + 1;\nloop invariant h2 <= f2 + g2 + 1;\nloop invariant h1 >= f1 + g1 - 1;\nloop invariant h2 >= f2 + g2 - 1;\nloop invariant h1 <= f1 + g1 + 2;\nloop invariant h2 <= f2 + g2 + 2;\nloop invariant h1 >= f1 + g1 - 2;\nloop invariant h2 >= f2 + g2 - 2;\nloop invariant h1 <= f1 + g1 + 3;\nloop invariant h2 <= f2 + g2 + 3;\nloop invariant h1 >= f1 + g1 - 3;\nloop invariant h2 >= f2 + g2 - 3;\nloop invariant h1 <= f1 + g1 + 4;\nloop invariant h2 <= f2 + g2 + 4;\nloop invariant h1 >= f1 + g1 - 4;\nloop invariant h2 >= f2 + g2 - 4;\nloop invariant h1 <= f1 + g1 + 5;\nloop invariant h2 <= f2 + g2 + 5;\nloop invariant h1 >= f1 + g1 - 5;\nloop invariant h2 >= f2 + g2 - 5;\nloop invariant h1 <= f1 + g1 + 6;\nloop invariant h2 <= f2 + g2 + 6;\nloop invariant h1 >= f1 + g1 - 6;\nloop invariant h2 >= f2 + g2 - 6;\nloop invariant h1 <= f1 + g1 + 7;\nloop invariant h2 <= f2 + g2 + 7;\nloop invariant h1 >= f1 + g1 - 7;\nloop invariant h2 >= f2 + g2 - 7;\nloop invariant h1 <= f1 + g1 + 8;\nloop invariant h2 <= f2 + g2 + 8;\nloop invariant h1 >= f1 + g1 - 8;\nloop invariant h2 >= f2 + g2 - 8;\nloop invariant h1 <= f1 + g1 + 9;\nloop invariant h2 <= f2 + g2 + 9;\nloop invariant h1 >= f1 + g1 - 9;\nloop invariant h2 >= f2 + g2 - 9;\nloop invariant h1 <= f1 + g1 + 10;\nloop invariant h2 <= f2 + g2 + 10;\nloop invariant h1 >= f1 + g1 - 10;\nloop invariant h2 >= f2 + g2 - 10;\nloop invariant h1 <= f1 + g1 + 11;\nloop invariant h2 <= f2 + g2 + 11;\nloop invariant h1 >= f1 + g1 - 11;\nloop invariant h2 >= f2 + g2 - 11;\nloop invariant h1 <= f1 + g1 + 12;\nloop invariant h2 <= f2 + g2 + 12;\nloop invariant h1 >= f1 + g1 - 12;\nloop invariant h2 >= f2 + g2 - 12;\nloop invariant h1 <= f1 + g1 + 13;\nloop invariant h2 <= f2 + g2 + 13;\nloop invariant h1 >= f1 + g1 - 13;\nloop invariant h2 >= f2 + g2 - 13;\nloop invariant h1 <= f1 + g1 + 14;\nloop invariant h2 <= f2 + g2 + 14;\nloop invariant h1 >= f1 + g1 - 14;\nloop invariant h2 >= f2 + g2 - 14;\nloop invariant h1 <= f1 + g1 + 15;\nloop invariant h2 <= f2 + g2 + 15;\nloop invariant h1 >= f1 + g1 - 15;\nloop invariant h2 >= f2 + g2 - 15;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n <= 2147483647 is preserved but not established.\nloop invariant f1 >= 0 is partially proven to be inductive.\nloop invariant f2 >= 0 is partially proven to be inductive.\nloop invariant g1 >= 0 is partially proven to be inductive.\nloop invariant g2 >= 0 is partially proven to be inductive.\nloop invariant h1 >= f1 is partially proven to be inductive.\nloop invariant h2 >= f2 is preserved but not established.\nloop invariant h1 >= g1 is partially proven to be inductive.\nloop invariant h2 >= g2 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 1 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 1 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 1 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 1 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 2 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 2 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 2 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 2 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 3 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 3 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 3 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 3 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 4 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 4 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 4 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 4 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 5 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 5 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 5 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 5 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 6 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 6 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 6 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 6 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 7 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 7 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 7 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 7 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 8 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 8 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 8 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 8 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 9 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 9 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 9 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 9 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 10 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 10 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 10 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 10 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 11 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 11 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 11 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 11 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 12 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 12 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 12 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 12 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 13 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 13 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 13 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 13 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 14 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 14 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 14 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 14 is partially proven to be inductive.\nloop invariant h1 <= f1 + g1 + 15 is partially proven to be inductive.\nloop invariant h2 <= f2 + g2 + 15 is partially proven to be inductive.\nloop invariant h1 >= f1 + g1 - 15 is partially proven to be inductive.\nloop invariant h2 >= f2 + g2 - 15 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: f1 >= 0;\nloop invariant i3: f2 >= 0;\nloop invariant i4: g1 >= 0;\nloop invariant i5: g2 >= 0;\nloop invariant i6: h1 >= f1;\n\n\n\n\n\nloop invariant i12: h1 <= f1 + g1;\nloop invariant i13: h2 <= f2 + g2;\nloop invariant i14: h1 <= f1 + g1 + 1;\nloop invariant i15: h2 <= f2 + g2 + 1;\n\n\nloop invariant i18: h1 <= f1 + g1 + 2;\nloop invariant i19: h2 <= f2 + g2 + 2;\n\n\nloop invariant i22: h1 <= f1 + g1 + 3;\nloop invariant i23: h2 <= f2 + g2 + 3;\n\n\nloop invariant i26: h1 <= f1 + g1 + 4;\nloop invariant i27: h2 <= f2 + g2 + 4;\n\n\nloop invariant i30: h1 <= f1 + g1 + 5;\nloop invariant i31: h2 <= f2 + g2 + 5;\n\n\nloop invariant i34: h1 <= f1 + g1 + 6;\nloop invariant i35: h2 <= f2 + g2 + 6;\n\n\nloop invariant i38: h1 <= f1 + g1 + 7;\nloop invariant i39: h2 <= f2 + g2 + 7;\n\n\nloop invariant i42: h1 <= f1 + g1 + 8;\nloop invariant i43: h2 <= f2 + g2 + 8;\n\n\nloop invariant i46: h1 <= f1 + g1 + 9;\nloop invariant i47: h2 <= f2 + g2 + 9;\n\n\nloop invariant i50: h1 <= f1 + g1 + 10;\nloop invariant i51: h2 <= f2 + g2 + 10;\n\n\nloop invariant i54: h1 <= f1 + g1 + 11;\nloop invariant i55: h2 <= f2 + g2 + 11;\n\n\nloop invariant i58: h1 <= f1 + g1 + 12;\nloop invariant i59: h2 <= f2 + g2 + 12;\n\n\nloop invariant i62: h1 <= f1 + g1 + 13;\nloop invariant i63: h2 <= f2 + g2 + 13;\n\n\nloop invariant i66: h1 <= f1 + g1 + 14;\nloop invariant i67: h2 <= f2 + g2 + 14;\n\n\nloop invariant i70: h1 <= f1 + g1 + 15;\nloop invariant i71: h2 <= f2 + g2 + 15;\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 23,
                    "annotations": "```\n/*@\nloop invariant 0 <= f1 <= 1;\nloop invariant 0 <= f2 <= 1;\nloop invariant 0 <= g1 <= 2;\nloop invariant 0 <= g2 <= 2;\nloop invariant 0 <= h1 <= 3;\nloop invariant 0 <= h2 <= 3;\nloop invariant f1 + g1 <= h1;\nloop invariant f2 + g2 <= h2;\nloop invariant f1 + g1 >= h1 - 1;\nloop invariant f2 + g2 >= h2 - 1;\nloop invariant f1 + g1 <= h1 + 1;\nloop invariant f2 + g2 <= h2 + 1;\nloop invariant f1 + g1 >= h1 - 2;\nloop invariant f2 + g2 >= h2 - 2;\nloop invariant f1 + g1 <= h1 + 2;\nloop invariant f2 + g2 <= h2 + 2;\nloop invariant f1 + g1 >= h1 - 3;\nloop invariant f2 + g2 >= h2 - 3;\nloop invariant f1 + g1 <= h1 + 3;\nloop invariant f2 + g2 <= h2 + 3;\nloop invariant f1 + g1 >= h1 - 4;\nloop invariant f2 + g2 >= h2 - 4;\nloop invariant f1 + g1 <= h1 + 4;\nloop invariant f2 + g2 <= h2 + 4;\nloop invariant f1 + g1 >= h1 - 5;\nloop invariant f2 + g2 >= h2 - 5;\nloop invariant f1 + g1 <= h1 + 5;\nloop invariant f2 + g2 <= h2 + 5;\nloop invariant f1 + g1 >= h1 - 6;\nloop invariant f2 + g2 >= h2 - 6;\nloop invariant f1 + g1 <= h1 + 6;\nloop invariant f2 + g2 <= h2 + 6;\nloop invariant f1 + g1 >= h1 - 7;\nloop invariant f2 + g2 >= h2 - 7;\nloop invariant f1 + g1 <= h1 + 7;\nloop invariant f2 + g2 <= h2 + 7;\nloop invariant f1 + g1 >= h1 - 8;\nloop invariant f2 + g2 >= h2 - 8;\nloop invariant f1 + g1 <= h1 + 8;\nloop invariant f2 + g2 <= h2 + 8;\nloop invariant f1 + g1 >= h1 - 9;\nloop invariant f2 + g2 >= h2 - 9;\nloop invariant f1 + g1 <= h1 + 9;\nloop invariant f2 + g2 <= h2 + 9;\nloop invariant f1 + g1 >= h1 - 10;\nloop invariant f2 + g2 >= h2 - 10;\nloop invariant f1 + g1 <= h1 + 10;\nloop invariant f2 + g2 <= h2 + 10;\nloop invariant f1 + g1 >= h1 - 11;\nloop invariant f2 + g2 >= h2 - 11;\nloop invariant f1 + g1 <= h1 + 11;\nloop invariant f2 + g2 <= h2 + 11;\nloop invariant f1 + g1 >= h1 - 12;\nloop invariant f2 + g2 >= h2 - 12;\nloop invariant f1 + g1 <= h1 + 12;\nloop invariant f2 + g2 <= h2 + 12;\nloop invariant f1 + g1 >= h1 - 13;\nloop invariant f2 + g2 >= h2 - 13;\nloop invariant f1 + g1 <= h1 + 13;\nloop invariant f2 + g2 <= h2 + 13;\nloop invariant f1 + g1 >= h1 - 14;\nloop invariant f2 + g2 >= h2 - 14;\nloop invariant f1 + g1 <= h1 + 14;\nloop invariant f2 + g2 <= h2 + 14;\nloop invariant f1 + g1 >= h1 - 15;\nloop invariant f2 + g2 >= h2 - 15;\nloop invariant f1 + g1 <= h1 + 15;\nloop invariant f2 + g2 <= h2 + 15;\nloop invariant f1 + g1 >= h1 - 16;\nloop invariant f2 + g2 >= h2 - 16;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= f1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= f2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= g1 <= 2 is partially proven to be inductive.\nloop invariant 0 <= g2 <= 2 is partially proven to be inductive.\nloop invariant 0 <= h1 <= 3 is partially proven to be inductive.\nloop invariant 0 <= h2 <= 3 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 is preserved but not established.\nloop invariant f2 + g2 <= h2 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 1 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 1 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 1 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 1 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 2 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 2 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 2 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 2 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 3 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 3 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 3 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 3 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 4 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 4 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 4 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 4 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 5 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 5 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 5 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 5 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 6 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 6 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 6 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 6 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 7 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 7 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 7 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 7 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 8 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 8 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 8 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 8 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 9 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 9 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 9 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 9 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 10 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 10 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 10 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 10 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 11 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 11 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 11 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 11 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 12 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 12 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 12 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 12 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 13 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 13 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 13 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 13 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 14 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 14 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 14 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 14 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 15 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 15 is partially proven to be inductive.\nloop invariant f1 + g1 <= h1 + 15 is partially proven to be inductive.\nloop invariant f2 + g2 <= h2 + 15 is partially proven to be inductive.\nloop invariant f1 + g1 >= h1 - 16 is partially proven to be inductive.\nloop invariant f2 + g2 >= h2 - 16 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= f1 <= f2;\nloop invariant f1 + f2 == g1 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\nloop invariant h1 == f1 + g1;\nloop invariant h2 == f2 + g2;\nloop invariant h1 <= h2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= f1 <= f2 is partially proven to be inductive.\nloop invariant f1 + f2 == g1 + g2 is preserved but not established.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant h1 == f1 + g1 is partially proven to be inductive.\nloop invariant h2 == f2 + g2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 100000;\nloop invariant f1 >= f2;\nloop invariant g1 >= g2;\nloop invariant h1 >= h2;\nloop invariant (f1 == g1 - 1) ==> (h1 == f1 + g1);\nloop invariant (f1 == g1 - 1) ==> (h2 == f2 + g2);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 100000 is preserved but not established.\nloop invariant f1 >= f2 is preserved but not established.\nloop invariant g1 >= g2 is partially proven to be inductive.\nloop invariant h1 >= h2 is partially proven to be inductive.\nloop invariant (f1 == g1 - 1) ==> (h1 == f1 + g1) is partially proven to be inductive.\nloop invariant (f1 == g1 - 1) ==> (h2 == f2 + g2) is partially proven to be inductive.\nloop invariant (f1 == g1 - 1) ==> (f1 == g1 - 1) is partially proven to be inductive.\nloop invariant (f1 == g1 - 1) ==> (f2 == g2 - 1) is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\nloop invariant i7: (f1 == g1 - 1) ==> (f1 == g1 - 1);\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 100;\nloop invariant 0 <= f1 <= 10;\nloop invariant 0 <= f2 <= 10;\nloop invariant 0 <= g1 <= 10;\nloop invariant 0 <= g2 <= 10;\nloop invariant 0 <= h1 <= 10;\nloop invariant 0 <= h2 <= 10;\nloop invariant h1 == h2 + f1;\nloop invariant h2 == h2 + f2;\nloop invariant h1 + h2 == f1 + g1;\nloop invariant h2 + h2 == f2 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\nloop invariant h1 + h2 == f1 + f2;\nloop invariant h1 + h2 == g1 + f2;\nloop invariant h1 + h2 == f1 + g2;\nloop invariant h1 + h2 == g1 + g2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 100 is preserved but not established.\nloop invariant 0 <= f1 <= 10 is partially proven to be inductive.\nloop invariant 0 <= f2 <= 10 is partially proven to be inductive.\nloop invariant 0 <= g1 <= 10 is partially proven to be inductive.\nloop invariant 0 <= g2 <= 10 is partially proven to be inductive.\nloop invariant 0 <= h1 <= 10 is partially proven to be inductive.\nloop invariant 0 <= h2 <= 10 is partially proven to be inductive.\nloop invariant h1 == h2 + f1 is partially proven to be inductive.\nloop invariant h2 == h2 + f2 is preserved but not established.\nloop invariant h1 + h2 == f1 + g1 is partially proven to be inductive.\nloop invariant h2 + h2 == f2 + g2 is partially proven to be inductive.\nloop invariant h1 + h2 == g1 + g2 is partially proven to be inductive.\nloop invariant h1 + h2 == f1 + f2 is partially proven to be inductive.\nloop invariant h1 + h2 == g1 + f2 is partially proven to be inductive.\nloop invariant h1 + h2 == f1 + g2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= n;\nloop invariant 0 <= f1;\nloop invariant 0 <= f2;\nloop invariant 0 <= g1;\nloop invariant 0 <= g2;\nloop invariant 0 <= h1;\nloop invariant 0 <= h2;\nloop invariant f1 <= g1;\nloop invariant f2 <= g2;\nloop invariant h1 <= h2;\nloop invariant 0 <= h1 + f1;\nloop invariant 0 <= h2 + f2;\nloop invariant 0 <= h1 + f1 + h2 + f2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= f1 is partially proven to be inductive.\nloop invariant 0 <= f2 is partially proven to be inductive.\nloop invariant 0 <= g1 is partially proven to be inductive.\nloop invariant 0 <= g2 is partially proven to be inductive.\nloop invariant 0 <= h1 is partially proven to be inductive.\nloop invariant 0 <= h2 is partially proven to be inductive.\nloop invariant f1 <= g1 is partially proven to be inductive.\nloop invariant f2 <= g2 is partially proven to be inductive.\nloop invariant h1 <= h2 is partially proven to be inductive.\nloop invariant 0 <= h1 + f1 is partially proven to be inductive.\nloop invariant 0 <= h2 + f2 is partially proven to be inductive.\nloop invariant 0 <= h1 + f1 + h2 + f2 is partially proven to be inductive.\nloop invariant h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2 is partially proven to be inductive.\nAssertion h2 == h1 + f1: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\nloop invariant i2: 0 <= f1;\nloop invariant i3: 0 <= f2;\nloop invariant i4: 0 <= g1;\nloop invariant i5: 0 <= g2;\nloop invariant i6: 0 <= h1;\nloop invariant i7: 0 <= h2;\nloop invariant i8: f1 <= g1;\nloop invariant i9: f2 <= g2;\nloop invariant i10: h1 <= h2;\nloop invariant i11: 0 <= h1 + f1;\nloop invariant i12: 0 <= h2 + f2;\nloop invariant i13: 0 <= h1 + f1 + h2 + f2;\nloop invariant i14: h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 25: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: 0 <= n <= 100000; loop invariant 0 <= f1 <= 100000; loop invariant 0 <= f2 <= 100000; loop invariant 0 <= g1 <= 100000; loop invariant 0 <= g2 <= 100000; loop invariant 0 <= h1 <= 100000; loop invariant 0 <= h2 <= 100000; loop invariant h1 == f1 + g1; loop invariant h2 == f2 + g2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2; loop invariant f1 == g1 - h1; loop invariant f2 == g2 - h2;\nloop invariant i2: 0 <= n;\nloop invariant i3: f2 == 1;\nloop invariant i4: g2 == 1;\nloop invariant i5: h1 == f1 + g1;\nloop invariant i6: h2 == f2 + g2;\nloop invariant i7: f1 == g1 - h1;\nloop invariant i8: f2 == g2 - h2;\nloop invariant i9: 0 <= n <= unknown();\nloop invariant i10: f1 == g2;\nloop invariant i11: f2 == g1;\nloop invariant i12: f1 == h1 - g1;\nloop invariant i13: f2 == h2 - g2;\nloop invariant i14: g1 == 1;\nloop invariant i15: f1 <= f2 <= g2;\nloop invariant i16: h1 <= h2 <= g1+f1;\nloop invariant i17: h2 = h1+f1 ==> h1 <= h2 <= g1+f1;\nloop invariant i18: 0 <= f1 <= f2;\nloop invariant i19: h1 <= h2;\nloop invariant i20: f1 <= f2;\nloop invariant i21: g1 == f1 + g1;\nloop invariant i22: g2 == f2 + g2;\nloop invariant i23: (n > 0) ==> (h2 == h1 + f1);\nloop invariant i24: (n > 0) ==> (h2 >= h1 + f1);\nloop invariant i25: (n > 0) ==> (h2 <= h1 + f1);\nloop invariant i26: (n > 0) ==> (h1 <= h2);\nloop invariant i27: (n > 0) ==> (f1 <= f2);\nloop invariant i28: (n > 0) ==> (g1 == f1 + g1);\nloop invariant i29: (n > 0) ==> (g2 == f2 + g2);\nloop invariant i30: (n > 0) ==> (h1 == f1 + g1);\nloop invariant i31: (n > 0) ==> (h2 == f2 + g2);\nloop invariant i32: 0 <= n <= 100000;\nloop invariant i33: f1 >= 0;\nloop invariant i34: f2 >= 0;\nloop invariant i35: g1 >= 0;\nloop invariant i36: g2 >= 0;\nloop invariant i37: h1 >= 0;\nloop invariant i38: h2 >= 0;\nloop invariant i39: h1 = f1 + g1;\nloop invariant i40: h2 = f2 + g2;\nloop invariant i41: g1 <= g2;\nloop invariant i42: f1 + g1 <= f2 + g2;\nloop invariant i43: f1 + g1 <= h2;\nloop invariant i44: f2 + g2 <= h2;\nloop invariant i45: f1 + g1 <= f1 + g1;\nloop invariant i46: f2 + g2 <= f2 + g2;\nloop invariant i47: f1 + g1 <= 100000;\nloop invariant i48: f2 + g2 <= 100000;\nloop invariant i49: h1 <= 100000;\nloop invariant i50: h2 <= 100000;\nloop invariant i51: f1 <= h1;\nloop invariant i52: f2 <= h2;\nloop invariant i53: g1 <= h1;\nloop invariant i54: g2 <= h2;\nloop invariant i55: f1 <= 100000;\nloop invariant i56: f2 <= 100000;\nloop invariant i57: g1 <= 100000;\nloop invariant i58: g2 <= 100000;\nloop invariant i59: f1 <= f1;\nloop invariant i60: f2 <= f2;\nloop invariant i61: g1 <= g1;\nloop invariant i62: g2 <= g2;\nloop invariant i63: h1 <= h1;\nloop invariant i64: h2 <= h2;\nloop invariant i65: 0 <= n <= 32767;\nloop invariant i66: f2 >= f1 >= 0;\nloop invariant i67: g2 >= g1 >= 0;\nloop invariant i68: h2 >= h1 >= 0;\nloop invariant i69: h1 == h2 + f1;\nloop invariant i70: h2 == h1 + f1;\nloop invariant i71: f2 == g2 + f1;\nloop invariant i72: g2 == h2 + g1;\nloop invariant i73: f1 <= g1;\nloop invariant i74: f1 <= h2;\nloop invariant i75: g1 <= h2;\nloop invariant i76: (f1 + g1 == h1);\nloop invariant i77: (f2 + g2 == h2);\nloop invariant i78: (f1 <= f2);\nloop invariant i79: (g1 <= g2);\nloop invariant i80: (h1 <= h2);\nloop invariant i81: (n >= 0);\nloop invariant i82: 0 <= g1 <= g2 <= f2 <= f1 <= n <= 100000;\nloop invariant i83: g1 + f1 == f2 + g2;\nloop invariant i84: 1 <= n <= 2147483647;\nloop invariant i85: h1 >= f1;\nloop invariant i86: h2 >= f2;\nloop invariant i87: h1 >= g1;\nloop invariant i88: h2 >= g2;\nloop invariant i89: h1 >= f1 + g1;\nloop invariant i90: h2 >= f2 + g2;\nloop invariant i91: h1 <= f1 + g1;\nloop invariant i92: h2 <= f2 + g2;\nloop invariant i93: h1 <= f1 + g1 + 1;\nloop invariant i94: h2 <= f2 + g2 + 1;\nloop invariant i95: h1 >= f1 + g1 - 1;\nloop invariant i96: h2 >= f2 + g2 - 1;\nloop invariant i97: h1 <= f1 + g1 + 2;\nloop invariant i98: h2 <= f2 + g2 + 2;\nloop invariant i99: h1 >= f1 + g1 - 2;\nloop invariant i100: h2 >= f2 + g2 - 2;\nloop invariant i101: h1 <= f1 + g1 + 3;\nloop invariant i102: h2 <= f2 + g2 + 3;\nloop invariant i103: h1 >= f1 + g1 - 3;\nloop invariant i104: h2 >= f2 + g2 - 3;\nloop invariant i105: h1 <= f1 + g1 + 4;\nloop invariant i106: h2 <= f2 + g2 + 4;\nloop invariant i107: h1 >= f1 + g1 - 4;\nloop invariant i108: h2 >= f2 + g2 - 4;\nloop invariant i109: h1 <= f1 + g1 + 5;\nloop invariant i110: h2 <= f2 + g2 + 5;\nloop invariant i111: h1 >= f1 + g1 - 5;\nloop invariant i112: h2 >= f2 + g2 - 5;\nloop invariant i113: h1 <= f1 + g1 + 6;\nloop invariant i114: h2 <= f2 + g2 + 6;\nloop invariant i115: h1 >= f1 + g1 - 6;\nloop invariant i116: h2 >= f2 + g2 - 6;\nloop invariant i117: h1 <= f1 + g1 + 7;\nloop invariant i118: h2 <= f2 + g2 + 7;\nloop invariant i119: h1 >= f1 + g1 - 7;\nloop invariant i120: h2 >= f2 + g2 - 7;\nloop invariant i121: h1 <= f1 + g1 + 8;\nloop invariant i122: h2 <= f2 + g2 + 8;\nloop invariant i123: h1 >= f1 + g1 - 8;\nloop invariant i124: h2 >= f2 + g2 - 8;\nloop invariant i125: h1 <= f1 + g1 + 9;\nloop invariant i126: h2 <= f2 + g2 + 9;\nloop invariant i127: h1 >= f1 + g1 - 9;\nloop invariant i128: h2 >= f2 + g2 - 9;\nloop invariant i129: h1 <= f1 + g1 + 10;\nloop invariant i130: h2 <= f2 + g2 + 10;\nloop invariant i131: h1 >= f1 + g1 - 10;\nloop invariant i132: h2 >= f2 + g2 - 10;\nloop invariant i133: h1 <= f1 + g1 + 11;\nloop invariant i134: h2 <= f2 + g2 + 11;\nloop invariant i135: h1 >= f1 + g1 - 11;\nloop invariant i136: h2 >= f2 + g2 - 11;\nloop invariant i137: h1 <= f1 + g1 + 12;\nloop invariant i138: h2 <= f2 + g2 + 12;\nloop invariant i139: h1 >= f1 + g1 - 12;\nloop invariant i140: h2 >= f2 + g2 - 12;\nloop invariant i141: h1 <= f1 + g1 + 13;\nloop invariant i142: h2 <= f2 + g2 + 13;\nloop invariant i143: h1 >= f1 + g1 - 13;\nloop invariant i144: h2 >= f2 + g2 - 13;\nloop invariant i145: h1 <= f1 + g1 + 14;\nloop invariant i146: h2 <= f2 + g2 + 14;\nloop invariant i147: h1 >= f1 + g1 - 14;\nloop invariant i148: h2 >= f2 + g2 - 14;\nloop invariant i149: h1 <= f1 + g1 + 15;\nloop invariant i150: h2 <= f2 + g2 + 15;\nloop invariant i151: h1 >= f1 + g1 - 15;\nloop invariant i152: h2 >= f2 + g2 - 15;\nloop invariant i153: 0 <= f1 <= 1;\nloop invariant i154: 0 <= f2 <= 1;\nloop invariant i155: 0 <= g1 <= 2;\nloop invariant i156: 0 <= g2 <= 2;\nloop invariant i157: 0 <= h1 <= 3;\nloop invariant i158: 0 <= h2 <= 3;\nloop invariant i159: f1 + g1 <= h1;\nloop invariant i160: f1 + g1 >= h1 - 1;\nloop invariant i161: f2 + g2 >= h2 - 1;\nloop invariant i162: f1 + g1 <= h1 + 1;\nloop invariant i163: f2 + g2 <= h2 + 1;\nloop invariant i164: f1 + g1 >= h1 - 2;\nloop invariant i165: f2 + g2 >= h2 - 2;\nloop invariant i166: f1 + g1 <= h1 + 2;\nloop invariant i167: f2 + g2 <= h2 + 2;\nloop invariant i168: f1 + g1 >= h1 - 3;\nloop invariant i169: f2 + g2 >= h2 - 3;\nloop invariant i170: f1 + g1 <= h1 + 3;\nloop invariant i171: f2 + g2 <= h2 + 3;\nloop invariant i172: f1 + g1 >= h1 - 4;\nloop invariant i173: f2 + g2 >= h2 - 4;\nloop invariant i174: f1 + g1 <= h1 + 4;\nloop invariant i175: f2 + g2 <= h2 + 4;\nloop invariant i176: f1 + g1 >= h1 - 5;\nloop invariant i177: f2 + g2 >= h2 - 5;\nloop invariant i178: f1 + g1 <= h1 + 5;\nloop invariant i179: f2 + g2 <= h2 + 5;\nloop invariant i180: f1 + g1 >= h1 - 6;\nloop invariant i181: f2 + g2 >= h2 - 6;\nloop invariant i182: f1 + g1 <= h1 + 6;\nloop invariant i183: f2 + g2 <= h2 + 6;\nloop invariant i184: f1 + g1 >= h1 - 7;\nloop invariant i185: f2 + g2 >= h2 - 7;\nloop invariant i186: f1 + g1 <= h1 + 7;\nloop invariant i187: f2 + g2 <= h2 + 7;\nloop invariant i188: f1 + g1 >= h1 - 8;\nloop invariant i189: f2 + g2 >= h2 - 8;\nloop invariant i190: f1 + g1 <= h1 + 8;\nloop invariant i191: f2 + g2 <= h2 + 8;\nloop invariant i192: f1 + g1 >= h1 - 9;\nloop invariant i193: f2 + g2 >= h2 - 9;\nloop invariant i194: f1 + g1 <= h1 + 9;\nloop invariant i195: f2 + g2 <= h2 + 9;\nloop invariant i196: f1 + g1 >= h1 - 10;\nloop invariant i197: f2 + g2 >= h2 - 10;\nloop invariant i198: f1 + g1 <= h1 + 10;\nloop invariant i199: f2 + g2 <= h2 + 10;\nloop invariant i200: f1 + g1 >= h1 - 11;\nloop invariant i201: f2 + g2 >= h2 - 11;\nloop invariant i202: f1 + g1 <= h1 + 11;\nloop invariant i203: f2 + g2 <= h2 + 11;\nloop invariant i204: f1 + g1 >= h1 - 12;\nloop invariant i205: f2 + g2 >= h2 - 12;\nloop invariant i206: f1 + g1 <= h1 + 12;\nloop invariant i207: f2 + g2 <= h2 + 12;\nloop invariant i208: f1 + g1 >= h1 - 13;\nloop invariant i209: f2 + g2 >= h2 - 13;\nloop invariant i210: f1 + g1 <= h1 + 13;\nloop invariant i211: f2 + g2 <= h2 + 13;\nloop invariant i212: f1 + g1 >= h1 - 14;\nloop invariant i213: f2 + g2 >= h2 - 14;\nloop invariant i214: f1 + g1 <= h1 + 14;\nloop invariant i215: f2 + g2 <= h2 + 14;\nloop invariant i216: f1 + g1 >= h1 - 15;\nloop invariant i217: f2 + g2 >= h2 - 15;\nloop invariant i218: f1 + g1 <= h1 + 15;\nloop invariant i219: f2 + g2 <= h2 + 15;\nloop invariant i220: f1 + g1 >= h1 - 16;\nloop invariant i221: f2 + g2 >= h2 - 16;\nloop invariant i222: f1 + f2 == g1 + g2;\nloop invariant i223: f1 >= f2;\nloop invariant i224: g1 >= g2;\nloop invariant i225: h1 >= h2;\nloop invariant i226: (f1 == g1 - 1) ==> (h1 == f1 + g1);\nloop invariant i227: (f1 == g1 - 1) ==> (h2 == f2 + g2);\nloop invariant i228: (f1 == g1 - 1) ==> (f1 == g1 - 1);\nloop invariant i229: (f1 == g1 - 1) ==> (f2 == g2 - 1);\nloop invariant i230: 0 <= n <= 100;\nloop invariant i231: 0 <= f1 <= 10;\nloop invariant i232: 0 <= f2 <= 10;\nloop invariant i233: 0 <= g1 <= 10;\nloop invariant i234: 0 <= g2 <= 10;\nloop invariant i235: 0 <= h1 <= 10;\nloop invariant i236: 0 <= h2 <= 10;\nloop invariant i237: h2 == h2 + f2;\nloop invariant i238: h1 + h2 == f1 + g1;\nloop invariant i239: h2 + h2 == f2 + g2;\nloop invariant i240: h1 + h2 == g1 + g2;\nloop invariant i241: h1 + h2 == f1 + f2;\nloop invariant i242: h1 + h2 == g1 + f2;\nloop invariant i243: h1 + h2 == f1 + g2;\nloop invariant i244: 0 <= f1;\nloop invariant i245: 0 <= f2;\nloop invariant i246: 0 <= g1;\nloop invariant i247: 0 <= g2;\nloop invariant i248: 0 <= h1;\nloop invariant i249: 0 <= h2;\nloop invariant i250: f2 <= g2;\nloop invariant i251: 0 <= h1 + f1;\nloop invariant i252: 0 <= h2 + f2;\nloop invariant i253: 0 <= h1 + f1 + h2 + f2;\nloop invariant i254: h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
            "combined_annotation_num_solver_calls": 82,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown(void);\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: f2 == g1;\n\n\n\nloop invariant i15: f1 <= f2 <= g2;\nloop invariant i16: h1 <= h2 <= g1+f1;\n\nloop invariant i18: 0 <= f1 <= f2;\nloop invariant i19: h1 <= h2;\nloop invariant i20: f1 <= f2;\n\n\nloop invariant i23: (n > 0) ==> (h2 == h1 + f1);\nloop invariant i24: (n > 0) ==> (h2 >= h1 + f1);\nloop invariant i25: (n > 0) ==> (h2 <= h1 + f1);\nloop invariant i26: (n > 0) ==> (h1 <= h2);\nloop invariant i27: (n > 0) ==> (f1 <= f2);\n\n\n\n\n\nloop invariant i33: f1 >= 0;\nloop invariant i34: f2 >= 0;\nloop invariant i35: g1 >= 0;\nloop invariant i36: g2 >= 0;\nloop invariant i37: h1 >= 0;\nloop invariant i38: h2 >= 0;\n\n\nloop invariant i41: g1 <= g2;\nloop invariant i42: f1 + g1 <= f2 + g2;\n\n\nloop invariant i45: f1 + g1 <= f1 + g1;\nloop invariant i46: f2 + g2 <= f2 + g2;\n\n\n\n\nloop invariant i51: f1 <= h1;\n\n\n\n\n\n\n\nloop invariant i59: f1 <= f1;\nloop invariant i60: f2 <= f2;\nloop invariant i61: g1 <= g1;\nloop invariant i62: g2 <= g2;\nloop invariant i63: h1 <= h1;\nloop invariant i64: h2 <= h2;\n\nloop invariant i66: f2 >= f1 >= 0;\nloop invariant i67: g2 >= g1 >= 0;\nloop invariant i68: h2 >= h1 >= 0;\n\nloop invariant i70: h2 == h1 + f1;\n\n\nloop invariant i73: f1 <= g1;\nloop invariant i74: f1 <= h2;\n\n\n\nloop invariant i78: (f1 <= f2);\nloop invariant i79: (g1 <= g2);\nloop invariant i80: (h1 <= h2);\n\n\n\n\nloop invariant i85: h1 >= f1;\n\n\n\n\n\nloop invariant i91: h1 <= f1 + g1;\nloop invariant i92: h2 <= f2 + g2;\nloop invariant i93: h1 <= f1 + g1 + 1;\nloop invariant i94: h2 <= f2 + g2 + 1;\n\n\nloop invariant i97: h1 <= f1 + g1 + 2;\nloop invariant i98: h2 <= f2 + g2 + 2;\n\n\nloop invariant i101: h1 <= f1 + g1 + 3;\nloop invariant i102: h2 <= f2 + g2 + 3;\n\n\nloop invariant i105: h1 <= f1 + g1 + 4;\nloop invariant i106: h2 <= f2 + g2 + 4;\n\n\nloop invariant i109: h1 <= f1 + g1 + 5;\nloop invariant i110: h2 <= f2 + g2 + 5;\n\n\nloop invariant i113: h1 <= f1 + g1 + 6;\nloop invariant i114: h2 <= f2 + g2 + 6;\n\n\nloop invariant i117: h1 <= f1 + g1 + 7;\nloop invariant i118: h2 <= f2 + g2 + 7;\n\n\nloop invariant i121: h1 <= f1 + g1 + 8;\nloop invariant i122: h2 <= f2 + g2 + 8;\n\n\nloop invariant i125: h1 <= f1 + g1 + 9;\nloop invariant i126: h2 <= f2 + g2 + 9;\n\n\nloop invariant i129: h1 <= f1 + g1 + 10;\nloop invariant i130: h2 <= f2 + g2 + 10;\n\n\nloop invariant i133: h1 <= f1 + g1 + 11;\nloop invariant i134: h2 <= f2 + g2 + 11;\n\n\nloop invariant i137: h1 <= f1 + g1 + 12;\nloop invariant i138: h2 <= f2 + g2 + 12;\n\n\nloop invariant i141: h1 <= f1 + g1 + 13;\nloop invariant i142: h2 <= f2 + g2 + 13;\n\n\nloop invariant i145: h1 <= f1 + g1 + 14;\nloop invariant i146: h2 <= f2 + g2 + 14;\n\n\nloop invariant i149: h1 <= f1 + g1 + 15;\nloop invariant i150: h2 <= f2 + g2 + 15;\n\n\n\n\n\n\n\n\n\nloop invariant i160: f1 + g1 >= h1 - 1;\nloop invariant i161: f2 + g2 >= h2 - 1;\n\n\nloop invariant i164: f1 + g1 >= h1 - 2;\nloop invariant i165: f2 + g2 >= h2 - 2;\n\n\nloop invariant i168: f1 + g1 >= h1 - 3;\nloop invariant i169: f2 + g2 >= h2 - 3;\n\n\nloop invariant i172: f1 + g1 >= h1 - 4;\nloop invariant i173: f2 + g2 >= h2 - 4;\n\n\nloop invariant i176: f1 + g1 >= h1 - 5;\nloop invariant i177: f2 + g2 >= h2 - 5;\n\n\nloop invariant i180: f1 + g1 >= h1 - 6;\nloop invariant i181: f2 + g2 >= h2 - 6;\n\n\nloop invariant i184: f1 + g1 >= h1 - 7;\nloop invariant i185: f2 + g2 >= h2 - 7;\n\n\nloop invariant i188: f1 + g1 >= h1 - 8;\nloop invariant i189: f2 + g2 >= h2 - 8;\n\n\nloop invariant i192: f1 + g1 >= h1 - 9;\nloop invariant i193: f2 + g2 >= h2 - 9;\n\n\nloop invariant i196: f1 + g1 >= h1 - 10;\nloop invariant i197: f2 + g2 >= h2 - 10;\n\n\nloop invariant i200: f1 + g1 >= h1 - 11;\nloop invariant i201: f2 + g2 >= h2 - 11;\n\n\nloop invariant i204: f1 + g1 >= h1 - 12;\nloop invariant i205: f2 + g2 >= h2 - 12;\n\n\nloop invariant i208: f1 + g1 >= h1 - 13;\nloop invariant i209: f2 + g2 >= h2 - 13;\n\n\nloop invariant i212: f1 + g1 >= h1 - 14;\nloop invariant i213: f2 + g2 >= h2 - 14;\n\n\nloop invariant i216: f1 + g1 >= h1 - 15;\nloop invariant i217: f2 + g2 >= h2 - 15;\n\n\nloop invariant i220: f1 + g1 >= h1 - 16;\nloop invariant i221: f2 + g2 >= h2 - 16;\n\n\n\n\n\n\nloop invariant i228: (f1 == g1 - 1) ==> (f1 == g1 - 1);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i244: 0 <= f1;\nloop invariant i245: 0 <= f2;\nloop invariant i246: 0 <= g1;\nloop invariant i247: 0 <= g2;\nloop invariant i248: 0 <= h1;\nloop invariant i249: 0 <= h2;\nloop invariant i250: f2 <= g2;\nloop invariant i251: 0 <= h1 + f1;\nloop invariant i252: 0 <= h2 + f2;\nloop invariant i253: 0 <= h1 + f1 + h2 + f2;\nloop invariant i254: h1 + f1 + h2 + f2 <= h2 + f2 + g1 + g2;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n\n  }\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  while(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant x >= 0;\nloop invariant x <= n-1;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n - 1;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= n <= 100;\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant x <= n - 1;\nloop invariant n == 0 ==> x == 0;\nloop invariant n > 0 ==> x == n;\nloop invariant x >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n-1 ==> x <= n-1;\nloop invariant x >= n ==> x >= n;\n*/\n```",
                "```\n/*@\nloop invariant n >= 0;\nloop invariant x = 0;\nloop invariant x <= n-1;\nloop invariant x' = x + 1;\nloop invariant x' <= n;\nloop invariant x = n;\nloop invariant x' = n+1;\nloop invariant x' > n;\nloop invariant x' <= n+1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n-1;\nloop invariant n >= 1;\nloop invariant n > 0;\n*/\n```",
                "```\n/*@\nloop invariant n > 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= x;\nloop invariant n <= x + 1;\nloop invariant n >= x + 1;\nloop invariant n <= x + 2;\nloop invariant n >= x + 2;\nloop invariant n <= x + 3;\nloop invariant n >= x + 3;\nloop invariant n <= x + 4;\nloop invariant n >= x + 4;\nloop invariant n <= x + 5;\nloop invariant n >= x + 5;\nloop invariant n <= x + 6;\nloop invariant n >= x + 6;\nloop invariant n <= x + 7;\nloop invariant n >= x + 7;\nloop invariant n <= x + 8;\nloop invariant n >= x + 8;\nloop invariant n <= x + 9;\nloop invariant n >= x + 9;\nloop invariant n <= x + 10;\nloop invariant n >= x + 10;\nloop invariant n <= x + 11;\nloop invariant n >= x + 11;\nloop invariant n <= x + 12;\nloop invariant n >= x + 12;\nloop invariant n <= x + 13;\nloop invariant n >= x + 13;\nloop invariant n <= x + 14;\nloop invariant n >= x + 14;\nloop invariant n <= x + 15;\nloop invariant n >= x + 15;\nloop invariant n <= x + 16;\nloop invariant n >= x + 16;\nloop invariant n <= x + 17;\nloop invariant n >= x + 17;\nloop invariant n <= x + 18;\nloop invariant n >= x + 18;\nloop invariant n <= x + 19;\nloop invariant n >= x + 19;\nloop invariant n <= x + 20;\nloop invariant n >= x + 20;\nloop invariant n <= x + 21;\nloop invariant n >= x + 21;\nloop invariant n <= x + 22;\nloop invariant n >= x + 22;\nloop invariant n <= x + 23;\nloop invariant n >= x + 23;\nloop invariant n <= x + 24;\nloop invariant n >= x + 24;\nloop invariant n <= x + 25;\nloop invariant n >= x + 25;\nloop invariant n <= x + 26;\nloop invariant n >= x + 26;\nloop invariant n <= x + 27;\nloop invariant n >= x + 27;\nloop invariant n <= x + 28;\nloop invariant n >= x + 28;\nloop invariant n <= x + 29;\nloop invariant n >= x + 29;\nloop invariant n <= x + 30;\nloop invariant n >= x + 30;\nloop invariant n <= x + 31;\nloop invariant n >= x + 31;\nloop invariant n <= x + 32;\nloop invariant n >= x + 32;\nloop invariant n <= x + 33;\nloop invariant n >= x + 33;\nloop invariant n <= x + 34;\nloop invariant n >= x + 34;\nloop invariant n <= x + 35;\nloop invariant n >= x + 35;\nloop invariant n <= x + 36;\nloop invariant n >= x + 36;\nloop invariant n <= x + 37;\nloop invariant n >= x + 37;\nloop invariant n <= x + 38;\nloop invariant n >= x + 38;\nloop invariant n <= x + 39;\nloop invariant n >= x + 39;\nloop invariant n <= x + 40;\nloop invariant n >= x + 40;\nloop invariant n <= x + 41;\nloop invariant n >= x + 41;\nloop invariant n <= x + 42;\nloop invariant n >= x + 42;\nloop invariant n <= x + 43;\nloop invariant n >= x + 43;\nloop invariant n <= x + 44;\nloop invariant n >= x + 44;\nloop invariant n <= x + 45;\nloop invariant n >= x + 45;\nloop invariant n <= x + 46;\nloop invariant n >= x + 46;\nloop invariant n <= x + 47;\nloop invariant n >= x + 47;\nloop invariant n <= x + 48;\nloop invariant n >= x + 48;\nloop invariant n <= x + 49;\nloop invariant n >= x + 49;\nloop invariant n <= x + 50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant n <= 100000;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n-1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n - 1;\nloop invariant n >= 1;\nloop invariant x <= n - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant x >= 0;\nloop invariant x <= n-1;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n-1 is neither established nor preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n-1 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n - 1;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n - 1 is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n - 1 is partially proven to be inductive.\nloop invariant x <= n - 2 is neither established nor preserved.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= n <= 100;\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant x <= n - 1;\nloop invariant n == 0 ==> x == 0;\nloop invariant n > 0 ==> x == n;\nloop invariant x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= n <= 100 is preserved but not established.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant n >= 1 is preserved but not established.\nloop invariant x <= n - 1 is partially proven to be inductive.\nloop invariant n == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant n > 0 ==> x == n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\n\nloop invariant i5: n == 0 ==> x == 0;\n\nloop invariant i7: x >= 0;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n-1 ==> x <= n-1;\nloop invariant x >= n ==> x >= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n-1 ==> x <= n-1 is partially proven to be inductive.\nloop invariant x >= n ==> x >= n is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: x <= n-1 ==> x <= n-1;\nloop invariant i3: x >= n ==> x >= n;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant n >= 0;\nloop invariant x = 0;\nloop invariant x <= n-1;\nloop invariant x' = x + 1;\nloop invariant x' <= n;\nloop invariant x = n;\nloop invariant x' = n+1;\nloop invariant x' > n;\nloop invariant x' <= n+1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "No CSV output dump found from Frama-C",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\nloop invariant i1: n >= 0;\nloop invariant i2: x = 0;\nloop invariant i3: x <= n-1;\nloop invariant i4: x' = x + 1;\nloop invariant i5: x' <= n;\nloop invariant i6: x = n;\nloop invariant i7: x' = n+1;\nloop invariant i8: x' > n;\nloop invariant i9: x' <= n+1;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n-1;\nloop invariant n >= 1;\nloop invariant n > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n-1 is neither established nor preserved.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant n > 0 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 52,
                    "annotations": "```\n/*@\nloop invariant n > 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= x;\nloop invariant n <= x + 1;\nloop invariant n >= x + 1;\nloop invariant n <= x + 2;\nloop invariant n >= x + 2;\nloop invariant n <= x + 3;\nloop invariant n >= x + 3;\nloop invariant n <= x + 4;\nloop invariant n >= x + 4;\nloop invariant n <= x + 5;\nloop invariant n >= x + 5;\nloop invariant n <= x + 6;\nloop invariant n >= x + 6;\nloop invariant n <= x + 7;\nloop invariant n >= x + 7;\nloop invariant n <= x + 8;\nloop invariant n >= x + 8;\nloop invariant n <= x + 9;\nloop invariant n >= x + 9;\nloop invariant n <= x + 10;\nloop invariant n >= x + 10;\nloop invariant n <= x + 11;\nloop invariant n >= x + 11;\nloop invariant n <= x + 12;\nloop invariant n >= x + 12;\nloop invariant n <= x + 13;\nloop invariant n >= x + 13;\nloop invariant n <= x + 14;\nloop invariant n >= x + 14;\nloop invariant n <= x + 15;\nloop invariant n >= x + 15;\nloop invariant n <= x + 16;\nloop invariant n >= x + 16;\nloop invariant n <= x + 17;\nloop invariant n >= x + 17;\nloop invariant n <= x + 18;\nloop invariant n >= x + 18;\nloop invariant n <= x + 19;\nloop invariant n >= x + 19;\nloop invariant n <= x + 20;\nloop invariant n >= x + 20;\nloop invariant n <= x + 21;\nloop invariant n >= x + 21;\nloop invariant n <= x + 22;\nloop invariant n >= x + 22;\nloop invariant n <= x + 23;\nloop invariant n >= x + 23;\nloop invariant n <= x + 24;\nloop invariant n >= x + 24;\nloop invariant n <= x + 25;\nloop invariant n >= x + 25;\nloop invariant n <= x + 26;\nloop invariant n >= x + 26;\nloop invariant n <= x + 27;\nloop invariant n >= x + 27;\nloop invariant n <= x + 28;\nloop invariant n >= x + 28;\nloop invariant n <= x + 29;\nloop invariant n >= x + 29;\nloop invariant n <= x + 30;\nloop invariant n >= x + 30;\nloop invariant n <= x + 31;\nloop invariant n >= x + 31;\nloop invariant n <= x + 32;\nloop invariant n >= x + 32;\nloop invariant n <= x + 33;\nloop invariant n >= x + 33;\nloop invariant n <= x + 34;\nloop invariant n >= x + 34;\nloop invariant n <= x + 35;\nloop invariant n >= x + 35;\nloop invariant n <= x + 36;\nloop invariant n >= x + 36;\nloop invariant n <= x + 37;\nloop invariant n >= x + 37;\nloop invariant n <= x + 38;\nloop invariant n >= x + 38;\nloop invariant n <= x + 39;\nloop invariant n >= x + 39;\nloop invariant n <= x + 40;\nloop invariant n >= x + 40;\nloop invariant n <= x + 41;\nloop invariant n >= x + 41;\nloop invariant n <= x + 42;\nloop invariant n >= x + 42;\nloop invariant n <= x + 43;\nloop invariant n >= x + 43;\nloop invariant n <= x + 44;\nloop invariant n >= x + 44;\nloop invariant n <= x + 45;\nloop invariant n >= x + 45;\nloop invariant n <= x + 46;\nloop invariant n >= x + 46;\nloop invariant n <= x + 47;\nloop invariant n >= x + 47;\nloop invariant n <= x + 48;\nloop invariant n >= x + 48;\nloop invariant n <= x + 49;\nloop invariant n >= x + 49;\nloop invariant n <= x + 50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant n > 0 is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= x is partially proven to be inductive.\nloop invariant n <= x + 1 is preserved but not established.\nloop invariant n >= x + 1 is partially proven to be inductive.\nloop invariant n <= x + 2 is partially proven to be inductive.\nloop invariant n >= x + 2 is preserved but not established.\nloop invariant n <= x + 3 is partially proven to be inductive.\nloop invariant n >= x + 3 is partially proven to be inductive.\nloop invariant n <= x + 4 is partially proven to be inductive.\nloop invariant n >= x + 4 is partially proven to be inductive.\nloop invariant n <= x + 5 is partially proven to be inductive.\nloop invariant n >= x + 5 is partially proven to be inductive.\nloop invariant n <= x + 6 is partially proven to be inductive.\nloop invariant n >= x + 6 is partially proven to be inductive.\nloop invariant n <= x + 7 is partially proven to be inductive.\nloop invariant n >= x + 7 is partially proven to be inductive.\nloop invariant n <= x + 8 is partially proven to be inductive.\nloop invariant n >= x + 8 is partially proven to be inductive.\nloop invariant n <= x + 9 is partially proven to be inductive.\nloop invariant n >= x + 9 is partially proven to be inductive.\nloop invariant n <= x + 10 is partially proven to be inductive.\nloop invariant n >= x + 10 is partially proven to be inductive.\nloop invariant n <= x + 11 is partially proven to be inductive.\nloop invariant n >= x + 11 is partially proven to be inductive.\nloop invariant n <= x + 12 is partially proven to be inductive.\nloop invariant n >= x + 12 is partially proven to be inductive.\nloop invariant n <= x + 13 is partially proven to be inductive.\nloop invariant n >= x + 13 is partially proven to be inductive.\nloop invariant n <= x + 14 is partially proven to be inductive.\nloop invariant n >= x + 14 is partially proven to be inductive.\nloop invariant n <= x + 15 is partially proven to be inductive.\nloop invariant n >= x + 15 is partially proven to be inductive.\nloop invariant n <= x + 16 is partially proven to be inductive.\nloop invariant n >= x + 16 is partially proven to be inductive.\nloop invariant n <= x + 17 is partially proven to be inductive.\nloop invariant n >= x + 17 is partially proven to be inductive.\nloop invariant n <= x + 18 is partially proven to be inductive.\nloop invariant n >= x + 18 is partially proven to be inductive.\nloop invariant n <= x + 19 is partially proven to be inductive.\nloop invariant n >= x + 19 is partially proven to be inductive.\nloop invariant n <= x + 20 is partially proven to be inductive.\nloop invariant n >= x + 20 is partially proven to be inductive.\nloop invariant n <= x + 21 is partially proven to be inductive.\nloop invariant n >= x + 21 is partially proven to be inductive.\nloop invariant n <= x + 22 is partially proven to be inductive.\nloop invariant n >= x + 22 is partially proven to be inductive.\nloop invariant n <= x + 23 is partially proven to be inductive.\nloop invariant n >= x + 23 is partially proven to be inductive.\nloop invariant n <= x + 24 is partially proven to be inductive.\nloop invariant n >= x + 24 is partially proven to be inductive.\nloop invariant n <= x + 25 is partially proven to be inductive.\nloop invariant n >= x + 25 is partially proven to be inductive.\nloop invariant n <= x + 26 is partially proven to be inductive.\nloop invariant n >= x + 26 is partially proven to be inductive.\nloop invariant n <= x + 27 is partially proven to be inductive.\nloop invariant n >= x + 27 is partially proven to be inductive.\nloop invariant n <= x + 28 is partially proven to be inductive.\nloop invariant n >= x + 28 is partially proven to be inductive.\nloop invariant n <= x + 29 is partially proven to be inductive.\nloop invariant n >= x + 29 is partially proven to be inductive.\nloop invariant n <= x + 30 is partially proven to be inductive.\nloop invariant n >= x + 30 is partially proven to be inductive.\nloop invariant n <= x + 31 is partially proven to be inductive.\nloop invariant n >= x + 31 is partially proven to be inductive.\nloop invariant n <= x + 32 is partially proven to be inductive.\nloop invariant n >= x + 32 is partially proven to be inductive.\nloop invariant n <= x + 33 is partially proven to be inductive.\nloop invariant n >= x + 33 is partially proven to be inductive.\nloop invariant n <= x + 34 is partially proven to be inductive.\nloop invariant n >= x + 34 is partially proven to be inductive.\nloop invariant n <= x + 35 is partially proven to be inductive.\nloop invariant n >= x + 35 is partially proven to be inductive.\nloop invariant n <= x + 36 is partially proven to be inductive.\nloop invariant n >= x + 36 is partially proven to be inductive.\nloop invariant n <= x + 37 is partially proven to be inductive.\nloop invariant n >= x + 37 is partially proven to be inductive.\nloop invariant n <= x + 38 is partially proven to be inductive.\nloop invariant n >= x + 38 is partially proven to be inductive.\nloop invariant n <= x + 39 is partially proven to be inductive.\nloop invariant n >= x + 39 is partially proven to be inductive.\nloop invariant n <= x + 40 is partially proven to be inductive.\nloop invariant n >= x + 40 is partially proven to be inductive.\nloop invariant n <= x + 41 is partially proven to be inductive.\nloop invariant n >= x + 41 is partially proven to be inductive.\nloop invariant n <= x + 42 is partially proven to be inductive.\nloop invariant n >= x + 42 is partially proven to be inductive.\nloop invariant n <= x + 43 is partially proven to be inductive.\nloop invariant n >= x + 43 is partially proven to be inductive.\nloop invariant n <= x + 44 is partially proven to be inductive.\nloop invariant n >= x + 44 is partially proven to be inductive.\nloop invariant n <= x + 45 is partially proven to be inductive.\nloop invariant n >= x + 45 is partially proven to be inductive.\nloop invariant n <= x + 46 is partially proven to be inductive.\nloop invariant n >= x + 46 is partially proven to be inductive.\nloop invariant n <= x + 47 is partially proven to be inductive.\nloop invariant n >= x + 47 is partially proven to be inductive.\nloop invariant n <= x + 48 is partially proven to be inductive.\nloop invariant n >= x + 48 is partially proven to be inductive.\nloop invariant n <= x + 49 is partially proven to be inductive.\nloop invariant n >= x + 49 is partially proven to be inductive.\nloop invariant n <= x + 50 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant n <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 1 is preserved but not established.\nloop invariant n <= 100000 is preserved but not established.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x == n - 1) ==> (x < n) is partially proven to be inductive.\nloop invariant (x == n) ==> (x >= n) is partially proven to be inductive.\nloop invariant (x == n - 1) ==> (x <= n - 1) is partially proven to be inductive.\nloop invariant (x == n) ==> (x >= n + 1) is neither established nor preserved.\nloop invariant (x == n - 1) ==> (x < n + 1) is partially proven to be inductive.\nloop invariant (x == n - 1) ==> (x <= n) is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: (x == n - 1) ==> (x < n);\nloop invariant i3: (x == n) ==> (x >= n);\nloop invariant i4: (x == n - 1) ==> (x <= n - 1);\n\nloop invariant i6: (x == n - 1) ==> (x < n + 1);\nloop invariant i7: (x == n - 1) ==> (x <= n);\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n-1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nloop invariant x <= n-1 is neither established nor preserved.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\nloop invariant i1: x >= 0;\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n - 1;\nloop invariant n >= 1;\nloop invariant x <= n - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n - 1 is neither established nor preserved.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant x <= n - 1 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion \\false: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "No CSV output dump found from Frama-C",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\nloop invariant i1: 0 <= x <= n-1;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= n-1;\nloop invariant i4: x <= n;\nloop invariant i5: 0 <= x <= n - 1;\nloop invariant i6: x <= n - 1;\nloop invariant i7: x <= n - 2;\nloop invariant i8: 0 <= n <= 100;\nloop invariant i9: 0 <= x <= n;\nloop invariant i10: n >= 1;\nloop invariant i11: n == 0 ==> x == 0;\nloop invariant i12: n > 0 ==> x == n;\nloop invariant i13: x <= n-1 ==> x <= n-1;\nloop invariant i14: x >= n ==> x >= n;\nloop invariant i15: n >= 0;\nloop invariant i16: x = 0;\nloop invariant i17: x' = x + 1;\nloop invariant i18: x' <= n;\nloop invariant i19: x = n;\nloop invariant i20: x' = n+1;\nloop invariant i21: x' > n;\nloop invariant i22: x' <= n+1;\nloop invariant i23: n > 0;\nloop invariant i24: n >= x;\nloop invariant i25: n <= x + 1;\nloop invariant i26: n >= x + 1;\nloop invariant i27: n <= x + 2;\nloop invariant i28: n >= x + 2;\nloop invariant i29: n <= x + 3;\nloop invariant i30: n >= x + 3;\nloop invariant i31: n <= x + 4;\nloop invariant i32: n >= x + 4;\nloop invariant i33: n <= x + 5;\nloop invariant i34: n >= x + 5;\nloop invariant i35: n <= x + 6;\nloop invariant i36: n >= x + 6;\nloop invariant i37: n <= x + 7;\nloop invariant i38: n >= x + 7;\nloop invariant i39: n <= x + 8;\nloop invariant i40: n >= x + 8;\nloop invariant i41: n <= x + 9;\nloop invariant i42: n >= x + 9;\nloop invariant i43: n <= x + 10;\nloop invariant i44: n >= x + 10;\nloop invariant i45: n <= x + 11;\nloop invariant i46: n >= x + 11;\nloop invariant i47: n <= x + 12;\nloop invariant i48: n >= x + 12;\nloop invariant i49: n <= x + 13;\nloop invariant i50: n >= x + 13;\nloop invariant i51: n <= x + 14;\nloop invariant i52: n >= x + 14;\nloop invariant i53: n <= x + 15;\nloop invariant i54: n >= x + 15;\nloop invariant i55: n <= x + 16;\nloop invariant i56: n >= x + 16;\nloop invariant i57: n <= x + 17;\nloop invariant i58: n >= x + 17;\nloop invariant i59: n <= x + 18;\nloop invariant i60: n >= x + 18;\nloop invariant i61: n <= x + 19;\nloop invariant i62: n >= x + 19;\nloop invariant i63: n <= x + 20;\nloop invariant i64: n >= x + 20;\nloop invariant i65: n <= x + 21;\nloop invariant i66: n >= x + 21;\nloop invariant i67: n <= x + 22;\nloop invariant i68: n >= x + 22;\nloop invariant i69: n <= x + 23;\nloop invariant i70: n >= x + 23;\nloop invariant i71: n <= x + 24;\nloop invariant i72: n >= x + 24;\nloop invariant i73: n <= x + 25;\nloop invariant i74: n >= x + 25;\nloop invariant i75: n <= x + 26;\nloop invariant i76: n >= x + 26;\nloop invariant i77: n <= x + 27;\nloop invariant i78: n >= x + 27;\nloop invariant i79: n <= x + 28;\nloop invariant i80: n >= x + 28;\nloop invariant i81: n <= x + 29;\nloop invariant i82: n >= x + 29;\nloop invariant i83: n <= x + 30;\nloop invariant i84: n >= x + 30;\nloop invariant i85: n <= x + 31;\nloop invariant i86: n >= x + 31;\nloop invariant i87: n <= x + 32;\nloop invariant i88: n >= x + 32;\nloop invariant i89: n <= x + 33;\nloop invariant i90: n >= x + 33;\nloop invariant i91: n <= x + 34;\nloop invariant i92: n >= x + 34;\nloop invariant i93: n <= x + 35;\nloop invariant i94: n >= x + 35;\nloop invariant i95: n <= x + 36;\nloop invariant i96: n >= x + 36;\nloop invariant i97: n <= x + 37;\nloop invariant i98: n >= x + 37;\nloop invariant i99: n <= x + 38;\nloop invariant i100: n >= x + 38;\nloop invariant i101: n <= x + 39;\nloop invariant i102: n >= x + 39;\nloop invariant i103: n <= x + 40;\nloop invariant i104: n >= x + 40;\nloop invariant i105: n <= x + 41;\nloop invariant i106: n >= x + 41;\nloop invariant i107: n <= x + 42;\nloop invariant i108: n >= x + 42;\nloop invariant i109: n <= x + 43;\nloop invariant i110: n >= x + 43;\nloop invariant i111: n <= x + 44;\nloop invariant i112: n >= x + 44;\nloop invariant i113: n <= x + 45;\nloop invariant i114: n >= x + 45;\nloop invariant i115: n <= x + 46;\nloop invariant i116: n >= x + 46;\nloop invariant i117: n <= x + 47;\nloop invariant i118: n >= x + 47;\nloop invariant i119: n <= x + 48;\nloop invariant i120: n >= x + 48;\nloop invariant i121: n <= x + 49;\nloop invariant i122: n >= x + 49;\nloop invariant i123: n <= x + 50;\nloop invariant i124: n <= 100000;\nloop invariant i125: (x == n - 1) ==> (x < n);\nloop invariant i126: (x == n) ==> (x >= n);\nloop invariant i127: (x == n - 1) ==> (x <= n - 1);\nloop invariant i128: (x == n) ==> (x >= n + 1);\nloop invariant i129: (x == n - 1) ==> (x < n + 1);\nloop invariant i130: (x == n - 1) ==> (x <= n);\nloop invariant i131: i1;\nloop invariant i132: i2;\nloop invariant i133: i3;\nloop invariant i134: i4;\nloop invariant i135: i5;\nloop invariant i136: i6;\nloop invariant i137: i7;\nloop invariant i138: i8;\nloop invariant i139: i9;\nloop invariant i140: i10;\nloop invariant i141: i11;\nloop invariant i142: i12;\nloop invariant i143: i13;\nloop invariant i144: i14;\nloop invariant i145: i15;\nloop invariant i146: i16;\nloop invariant i147: i17;\nloop invariant i148: i18;\nloop invariant i149: i19;\nloop invariant i150: i20;\nloop invariant i151: i21;\nloop invariant i152: i22;\nloop invariant i153: i23;\nloop invariant i154: i24;\nloop invariant i155: i25;\nloop invariant i156: i26;\nloop invariant i157: i27;\nloop invariant i158: i28;\nloop invariant i159: i29;\nloop invariant i160: i30;\nloop invariant i161: i31;\nloop invariant i162: i32;\nloop invariant i163: i33;\nloop invariant i164: i34;\nloop invariant i165: i35;\nloop invariant i166: i36;\nloop invariant i167: i37;\nloop invariant i168: i38;\nloop invariant i169: i39;\nloop invariant i170: i40;\nloop invariant i171: i41;\nloop invariant i172: i42;\nloop invariant i173: i43;\nloop invariant i174: i44;\nloop invariant i175: i45;\nloop invariant i176: i46;\nloop invariant i177: i47;\nloop invariant i178: i48;\nloop invariant i179: i49;\nloop invariant i180: i50;\nloop invariant i181: i51;\nloop invariant i182: i52;\nloop invariant i183: i53;\nloop invariant i184: i54;\nloop invariant i185: i55;\nloop invariant i186: i56;\nloop invariant i187: i57;\nloop invariant i188: i58;\nloop invariant i189: i59;\nloop invariant i190: i60;\nloop invariant i191: i61;\nloop invariant i192: i62;\nloop invariant i193: i63;\nloop invariant i194: i64;\nloop invariant i195: i65;\nloop invariant i196: i66;\nloop invariant i197: i67;\nloop invariant i198: i68;\nloop invariant i199: i69;\nloop invariant i200: i70;\nloop invariant i201: i71;\nloop invariant i202: i72;\nloop invariant i203: i73;\nloop invariant i204: i74;\nloop invariant i205: i75;\nloop invariant i206: i76;\nloop invariant i207: i77;\nloop invariant i208: i78;\nloop invariant i209: i79;\nloop invariant i210: i80;\nloop invariant i211: i81;\nloop invariant i212: i82;\nloop invariant i213: i83;\nloop invariant i214: i84;\nloop invariant i215: i85;\nloop invariant i216: i86;\nloop invariant i217: i87;\nloop invariant i218: i88;\nloop invariant i219: i89;\nloop invariant i220: i90;\nloop invariant i221: i91;\nloop invariant i222: i92;\nloop invariant i223: i93;\nloop invariant i224: i94;\nloop invariant i225: i95;\nloop invariant i226: i96;\nloop invariant i227: i97;\nloop invariant i228: i98;\nloop invariant i229: i99;\nloop invariant i230: i100;\nloop invariant i231: i101;\nloop invariant i232: i102;\nloop invariant i233: i103;\nloop invariant i234: i104;\nloop invariant i235: i105;\nloop invariant i236: i106;\nloop invariant i237: i107;\nloop invariant i238: i108;\nloop invariant i239: i109;\nloop invariant i240: i110;\nloop invariant i241: i111;\nloop invariant i242: i112;\nloop invariant i243: i113;\nloop invariant i244: i114;\nloop invariant i245: i115;\nloop invariant i246: i116;\nloop invariant i247: i117;\nloop invariant i248: i118;\nloop invariant i249: i119;\nloop invariant i250: i120;\nloop invariant i251: i121;\nloop invariant i252: i122;\nloop invariant i253: i123;\nloop invariant i254: i124;\nloop invariant i255: i125;\nloop invariant i256: i126;\nloop invariant i257: i127;\nloop invariant i258: i128;\nloop invariant i259: i129;\nloop invariant i260: i130;\nloop invariant i261: i131;\nloop invariant i262: i132;\nloop invariant i263: i133;\nloop invariant i264: i134;\nloop invariant i265: i135;\nloop invariant i266: i136;\nloop invariant i267: i137;\nloop invariant i268: i138;\nloop invariant i269: i139;\nloop invariant i270: i140;\nloop invariant i271: i141;\nloop invariant i272: i142;\nloop invariant i273: i143;\nloop invariant i274: i144;\nloop invariant i275: i145;\nloop invariant i276: i146;\nloop invariant i277: i147;\nloop invariant i278: i148;\nloop invariant i279: i149;\nloop invariant i280: i150;\nloop invariant i281: i151;\nloop invariant i282: i152;\nloop invariant i283: i153;\nloop invariant i284: i154;\nloop invariant i285: i155;\nloop invariant i286: i156;\nloop invariant i287: i157;\nloop invariant i288: i158;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
            "combined_annotation_num_solver_calls": 2,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\nloop invariant i1: 0 <= x <= n-1;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= n-1;\nloop invariant i4: x <= n;\nloop invariant i5: 0 <= x <= n - 1;\nloop invariant i6: x <= n - 1;\nloop invariant i7: x <= n - 2;\nloop invariant i8: 0 <= n <= 100;\nloop invariant i9: 0 <= x <= n;\nloop invariant i10: n >= 1;\nloop invariant i11: n == 0 ==> x == 0;\nloop invariant i12: n > 0 ==> x == n;\nloop invariant i13: x <= n-1 ==> x <= n-1;\nloop invariant i14: x >= n ==> x >= n;\nloop invariant i15: n >= 0;\nloop invariant i16: x = 0;\nloop invariant i17: x' = x + 1;\nloop invariant i18: x' <= n;\nloop invariant i19: x = n;\nloop invariant i20: x' = n+1;\nloop invariant i21: x' > n;\nloop invariant i22: x' <= n+1;\nloop invariant i23: n > 0;\nloop invariant i24: n >= x;\nloop invariant i25: n <= x + 1;\nloop invariant i26: n >= x + 1;\nloop invariant i27: n <= x + 2;\nloop invariant i28: n >= x + 2;\nloop invariant i29: n <= x + 3;\nloop invariant i30: n >= x + 3;\nloop invariant i31: n <= x + 4;\nloop invariant i32: n >= x + 4;\nloop invariant i33: n <= x + 5;\nloop invariant i34: n >= x + 5;\nloop invariant i35: n <= x + 6;\nloop invariant i36: n >= x + 6;\nloop invariant i37: n <= x + 7;\nloop invariant i38: n >= x + 7;\nloop invariant i39: n <= x + 8;\nloop invariant i40: n >= x + 8;\nloop invariant i41: n <= x + 9;\nloop invariant i42: n >= x + 9;\nloop invariant i43: n <= x + 10;\nloop invariant i44: n >= x + 10;\nloop invariant i45: n <= x + 11;\nloop invariant i46: n >= x + 11;\nloop invariant i47: n <= x + 12;\nloop invariant i48: n >= x + 12;\nloop invariant i49: n <= x + 13;\nloop invariant i50: n >= x + 13;\nloop invariant i51: n <= x + 14;\nloop invariant i52: n >= x + 14;\nloop invariant i53: n <= x + 15;\nloop invariant i54: n >= x + 15;\nloop invariant i55: n <= x + 16;\nloop invariant i56: n >= x + 16;\nloop invariant i57: n <= x + 17;\nloop invariant i58: n >= x + 17;\nloop invariant i59: n <= x + 18;\nloop invariant i60: n >= x + 18;\nloop invariant i61: n <= x + 19;\nloop invariant i62: n >= x + 19;\nloop invariant i63: n <= x + 20;\nloop invariant i64: n >= x + 20;\nloop invariant i65: n <= x + 21;\nloop invariant i66: n >= x + 21;\nloop invariant i67: n <= x + 22;\nloop invariant i68: n >= x + 22;\nloop invariant i69: n <= x + 23;\nloop invariant i70: n >= x + 23;\nloop invariant i71: n <= x + 24;\nloop invariant i72: n >= x + 24;\nloop invariant i73: n <= x + 25;\nloop invariant i74: n >= x + 25;\nloop invariant i75: n <= x + 26;\nloop invariant i76: n >= x + 26;\nloop invariant i77: n <= x + 27;\nloop invariant i78: n >= x + 27;\nloop invariant i79: n <= x + 28;\nloop invariant i80: n >= x + 28;\nloop invariant i81: n <= x + 29;\nloop invariant i82: n >= x + 29;\nloop invariant i83: n <= x + 30;\nloop invariant i84: n >= x + 30;\nloop invariant i85: n <= x + 31;\nloop invariant i86: n >= x + 31;\nloop invariant i87: n <= x + 32;\nloop invariant i88: n >= x + 32;\nloop invariant i89: n <= x + 33;\nloop invariant i90: n >= x + 33;\nloop invariant i91: n <= x + 34;\nloop invariant i92: n >= x + 34;\nloop invariant i93: n <= x + 35;\nloop invariant i94: n >= x + 35;\nloop invariant i95: n <= x + 36;\nloop invariant i96: n >= x + 36;\nloop invariant i97: n <= x + 37;\nloop invariant i98: n >= x + 37;\nloop invariant i99: n <= x + 38;\nloop invariant i100: n >= x + 38;\nloop invariant i101: n <= x + 39;\nloop invariant i102: n >= x + 39;\nloop invariant i103: n <= x + 40;\nloop invariant i104: n >= x + 40;\nloop invariant i105: n <= x + 41;\nloop invariant i106: n >= x + 41;\nloop invariant i107: n <= x + 42;\nloop invariant i108: n >= x + 42;\nloop invariant i109: n <= x + 43;\nloop invariant i110: n >= x + 43;\nloop invariant i111: n <= x + 44;\nloop invariant i112: n >= x + 44;\nloop invariant i113: n <= x + 45;\nloop invariant i114: n >= x + 45;\nloop invariant i115: n <= x + 46;\nloop invariant i116: n >= x + 46;\nloop invariant i117: n <= x + 47;\nloop invariant i118: n >= x + 47;\nloop invariant i119: n <= x + 48;\nloop invariant i120: n >= x + 48;\nloop invariant i121: n <= x + 49;\nloop invariant i122: n >= x + 49;\nloop invariant i123: n <= x + 50;\nloop invariant i124: n <= 100000;\nloop invariant i125: (x == n - 1) ==> (x < n);\nloop invariant i126: (x == n) ==> (x >= n);\nloop invariant i127: (x == n - 1) ==> (x <= n - 1);\nloop invariant i128: (x == n) ==> (x >= n + 1);\nloop invariant i129: (x == n - 1) ==> (x < n + 1);\nloop invariant i130: (x == n - 1) ==> (x <= n);\nloop invariant i131: i1;\nloop invariant i132: i2;\nloop invariant i133: i3;\nloop invariant i134: i4;\nloop invariant i135: i5;\nloop invariant i136: i6;\nloop invariant i137: i7;\nloop invariant i138: i8;\nloop invariant i139: i9;\nloop invariant i140: i10;\nloop invariant i141: i11;\nloop invariant i142: i12;\nloop invariant i143: i13;\nloop invariant i144: i14;\nloop invariant i145: i15;\nloop invariant i146: i16;\nloop invariant i147: i17;\nloop invariant i148: i18;\nloop invariant i149: i19;\nloop invariant i150: i20;\nloop invariant i151: i21;\nloop invariant i152: i22;\nloop invariant i153: i23;\nloop invariant i154: i24;\nloop invariant i155: i25;\nloop invariant i156: i26;\nloop invariant i157: i27;\nloop invariant i158: i28;\nloop invariant i159: i29;\nloop invariant i160: i30;\nloop invariant i161: i31;\nloop invariant i162: i32;\nloop invariant i163: i33;\nloop invariant i164: i34;\nloop invariant i165: i35;\nloop invariant i166: i36;\nloop invariant i167: i37;\nloop invariant i168: i38;\nloop invariant i169: i39;\nloop invariant i170: i40;\nloop invariant i171: i41;\nloop invariant i172: i42;\nloop invariant i173: i43;\nloop invariant i174: i44;\nloop invariant i175: i45;\nloop invariant i176: i46;\nloop invariant i177: i47;\nloop invariant i178: i48;\nloop invariant i179: i49;\nloop invariant i180: i50;\nloop invariant i181: i51;\nloop invariant i182: i52;\nloop invariant i183: i53;\nloop invariant i184: i54;\nloop invariant i185: i55;\nloop invariant i186: i56;\nloop invariant i187: i57;\nloop invariant i188: i58;\nloop invariant i189: i59;\nloop invariant i190: i60;\nloop invariant i191: i61;\nloop invariant i192: i62;\nloop invariant i193: i63;\nloop invariant i194: i64;\nloop invariant i195: i65;\nloop invariant i196: i66;\nloop invariant i197: i67;\nloop invariant i198: i68;\nloop invariant i199: i69;\nloop invariant i200: i70;\nloop invariant i201: i71;\nloop invariant i202: i72;\nloop invariant i203: i73;\nloop invariant i204: i74;\nloop invariant i205: i75;\nloop invariant i206: i76;\nloop invariant i207: i77;\nloop invariant i208: i78;\nloop invariant i209: i79;\nloop invariant i210: i80;\nloop invariant i211: i81;\nloop invariant i212: i82;\nloop invariant i213: i83;\nloop invariant i214: i84;\nloop invariant i215: i85;\nloop invariant i216: i86;\nloop invariant i217: i87;\nloop invariant i218: i88;\nloop invariant i219: i89;\nloop invariant i220: i90;\nloop invariant i221: i91;\nloop invariant i222: i92;\nloop invariant i223: i93;\nloop invariant i224: i94;\nloop invariant i225: i95;\nloop invariant i226: i96;\nloop invariant i227: i97;\nloop invariant i228: i98;\nloop invariant i229: i99;\nloop invariant i230: i100;\nloop invariant i231: i101;\nloop invariant i232: i102;\nloop invariant i233: i103;\nloop invariant i234: i104;\nloop invariant i235: i105;\nloop invariant i236: i106;\nloop invariant i237: i107;\nloop invariant i238: i108;\nloop invariant i239: i109;\nloop invariant i240: i110;\nloop invariant i241: i111;\nloop invariant i242: i112;\nloop invariant i243: i113;\nloop invariant i244: i114;\nloop invariant i245: i115;\nloop invariant i246: i116;\nloop invariant i247: i117;\nloop invariant i248: i118;\nloop invariant i249: i119;\nloop invariant i250: i120;\nloop invariant i251: i121;\nloop invariant i252: i122;\nloop invariant i253: i123;\nloop invariant i254: i124;\nloop invariant i255: i125;\nloop invariant i256: i126;\nloop invariant i257: i127;\nloop invariant i258: i128;\nloop invariant i259: i129;\nloop invariant i260: i130;\nloop invariant i261: i131;\nloop invariant i262: i132;\nloop invariant i263: i133;\nloop invariant i264: i134;\nloop invariant i265: i135;\nloop invariant i266: i136;\nloop invariant i267: i137;\nloop invariant i268: i138;\nloop invariant i269: i139;\nloop invariant i270: i140;\nloop invariant i271: i141;\nloop invariant i272: i142;\nloop invariant i273: i143;\nloop invariant i274: i144;\nloop invariant i275: i145;\nloop invariant i276: i146;\nloop invariant i277: i147;\nloop invariant i278: i148;\nloop invariant i279: i149;\nloop invariant i280: i150;\nloop invariant i281: i151;\nloop invariant i282: i152;\nloop invariant i283: i153;\nloop invariant i284: i154;\nloop invariant i285: i155;\nloop invariant i286: i156;\nloop invariant i287: i157;\nloop invariant i288: i158;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\twhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 500000;\nloop invariant x <= 1000000;\nloop invariant y <= 1000000;\nloop invariant x <= y;\nloop invariant x >= y - 1000000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant z == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 1 <= y <= 500000;\nloop invariant x <= y + 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x == 1000000 ==> (x < 500000 ==> y == 500000) && (500000 <= x < 750000 ==> y == 750000) && (x >= 750000 ==> y == 1000000);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant (0 <= x <= 1000000);\nloop invariant (500000 <= y <= 1000000);\nloop invariant (z == 0);\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 1000000;\nloop invariant y >= 0;\nloop invariant y <= 500000;\nloop invariant x - y >= 0;\nloop invariant x - y <= 1000000;\nloop invariant (x == (x + 1) ==> (y == y + 1 && x < 500000));\nloop invariant (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000));\nloop invariant (x == (x + 2) ==> (y == y + 1 && x >= 750000));\nloop invariant (x == 1000000 ==> (y == 500000));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 100000000000;\nloop invariant x >= y;\nloop invariant x >= z;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x + 2 * y + 2 * z >= 1000000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant x >= 500000 ==> x <= 750000;\nloop invariant x < 500000 ==> x < 1000000;\nloop invariant y >= 500001 ==> y <= 1000000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000;\nloop invariant 0 <= z <= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) ==> y >= 500000;\nloop invariant x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2) ==> y >= 750000;\nloop invariant x >= (z + 1 + (y - 1) * (y - 2) / 2) ==> y >= 1;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 750000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> 500000 <= y < 750000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z < 1000000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2);\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2);\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 500000;\n*/\n```",
                "```\n/*@\nloop invariant x >= 0;\nloop invariant 500000 <= y <= 750000;\nloop invariant x <= 1000000;\nloop invariant x <= 2*y;\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant 0 <= z <= 1;\nloop invariant (if x < 500000 then x = 0 else (if x < 750000 then x = y - 1 else x = y - 2));\nloop invariant (if x < 500000 then y = 500000 else (if x < 750000 then y = 500000 else y = 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\nloop invariant (if x < 500000 then 0 <= y <= 500000 else (if x < 750000 then 500000 <= y <= 750000 else 750000 <= y <= 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\nloop invariant (if x < 500000 then y = 500000 else (if x < 750000 then y = 750000 else y = 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant z == 0;\nloop invariant (x == 1000000 ==> y == 500000);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant x%2==0 ==> x%2==0;\nloop invariant x%2==1 ==> x%2==1;\nloop invariant x%2==0 ==> y%2==0;\nloop invariant x%2==1 ==> y%2==1;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant x%2==0 ==> x%2==0;\nloop invariant x%2==1 ==> x%2==1;\nloop invariant x%2==0 ==> y%2==0;\nloop invariant x%2==1 ==> y%2==1;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant y >= 500000;\nloop invariant x <= 1000000;\nloop invariant y <= 1000000;\nloop invariant x <= y;\nloop invariant x >= y - 1000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 500000 is partially proven to be inductive.\nloop invariant x <= 1000000 is established but not preserved.\nloop invariant y <= 1000000 is established but not preserved.\nloop invariant x <= y is established but not preserved.\nloop invariant x >= y - 1000000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 500000;\n\n\n\nloop invariant i6: x >= y - 1000000;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is preserved but not established.\nloop invariant x >= (1 + (y - 1) * y / 2) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant z == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 0 <= y <= 500000 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 1 <= y <= 500000;\nloop invariant x <= y + 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x == 1000000 ==> (x < 500000 ==> y == 500000) && (500000 <= x < 750000 ==> y == 750000) && (x >= 750000 ==> y == 1000000);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 1 <= y <= 500000 is established but not preserved.\nloop invariant x <= y + 1000000 is partially proven to be inductive.\nloop invariant 0 <= z <= 1000000 is partially proven to be inductive.\nloop invariant x == 1000000 ==> (x < 500000 ==> y == 500000) && (500000 <= x < 750000 ==> y == 750000) && (x >= 750000 ==> y == 1000000) is established but not preserved.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n\nloop invariant i4: 0 <= z <= 1000000;\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant z == 0;\nloop invariant (0 <= x <= 1000000);\nloop invariant (500000 <= y <= 1000000);\nloop invariant (z == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 1000000 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant (0 <= x <= 1000000) is partially proven to be inductive.\nloop invariant (500000 <= y <= 1000000) is partially proven to be inductive.\nloop invariant (z == 0) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n\n\nloop invariant i6: (z == 0);\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= 1000000;\nloop invariant y >= 0;\nloop invariant y <= 500000;\nloop invariant x - y >= 0;\nloop invariant x - y <= 1000000;\nloop invariant (x == (x + 1) ==> (y == y + 1 && x < 500000));\nloop invariant (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000));\nloop invariant (x == (x + 2) ==> (y == y + 1 && x >= 750000));\nloop invariant (x == 1000000 ==> (y == 500000));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= 1000000 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant y <= 500000 is partially proven to be inductive.\nloop invariant x - y >= 0 is preserved but not established.\nloop invariant x - y <= 1000000 is partially proven to be inductive.\nloop invariant (x == (x + 1) ==> (y == y + 1 && x < 500000)) is partially proven to be inductive.\nloop invariant (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000)) is partially proven to be inductive.\nloop invariant (x == (x + 2) ==> (y == y + 1 && x >= 750000)) is partially proven to be inductive.\nloop invariant (x == 1000000 ==> (y == 500000)) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: y >= 0;\n\n\nloop invariant i6: x - y <= 1000000;\nloop invariant i7: (x == (x + 1) ==> (y == y + 1 && x < 500000));\nloop invariant i8: (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000));\nloop invariant i9: (x == (x + 2) ==> (y == y + 1 && x >= 750000));\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 100000000000;\nloop invariant x >= y;\nloop invariant x >= z;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 500000 <= y <= 100000000000 is partially proven to be inductive.\nloop invariant x >= y is preserved but not established.\nloop invariant x >= z is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\nloop invariant i2: 500000 <= y <= 100000000000;\n\nloop invariant i4: x >= z;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x + 2 * y + 2 * z >= 1000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 1000000 is established but not preserved.\nloop invariant 0 <= z <= 1000000 is partially proven to be inductive.\nloop invariant x + 2 * y + 2 * z >= 1000000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: 0 <= z <= 1000000;\nloop invariant i4: x + 2 * y + 2 * z >= 1000000;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant x >= 500000 ==> x <= 750000;\nloop invariant x < 500000 ==> x < 1000000;\nloop invariant y >= 500001 ==> y <= 1000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 500000 <= y <= 1000000 is established but not preserved.\nloop invariant x >= 500000 ==> x <= 750000 is established but not preserved.\nloop invariant x < 500000 ==> x < 1000000 is partially proven to be inductive.\nloop invariant y >= 500001 ==> y <= 1000000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n\nloop invariant i4: x < 500000 ==> x < 1000000;\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000;\nloop invariant 0 <= z <= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 500000 is established but not preserved.\nloop invariant 0 <= z <= 0 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: 0 <= z <= 0;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 1000000;\nloop invariant 0 <= z <= 1000000;\nloop invariant x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) ==> y >= 500000;\nloop invariant x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2) ==> y >= 750000;\nloop invariant x >= (z + 1 + (y - 1) * (y - 2) / 2) ==> y >= 1;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 750000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> 500000 <= y < 750000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z < 1000000;\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2);\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2);\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 500000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 1000000 is established but not preserved.\nloop invariant 0 <= z <= 1000000 is partially proven to be inductive.\nloop invariant x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) ==> y >= 500000 is partially proven to be inductive.\nloop invariant x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2) ==> y >= 750000 is established but not preserved.\nloop invariant x >= (z + 1 + (y - 1) * (y - 2) / 2) ==> y >= 1 is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 750000 is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> 500000 <= y < 750000 is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0 is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z < 1000000 is established but not preserved.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2) is partially proven to be inductive.\nloop invariant (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 500000 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: 0 <= z <= 1000000;\n\n\n\n\n\nloop invariant i9: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0;\n\nloop invariant i11: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2);\nloop invariant i12: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2);\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant 500000 <= y <= 750000;\nloop invariant x <= 1000000;\nloop invariant x <= 2*y;\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant 500000 <= y <= 750000 is established but not preserved.\nloop invariant x <= 1000000 is established but not preserved.\nloop invariant x <= 2*y is partially proven to be inductive.\nloop invariant x == 1000000 ==> (x == 1000000 && y == 750000) is established but not preserved.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 8,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant 0 <= z <= 1;\nloop invariant (if x < 500000 then x = 0 else (if x < 750000 then x = y - 1 else x = y - 2));\nloop invariant (if x < 500000 then y = 500000 else (if x < 750000 then y = 500000 else y = 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\nloop invariant (if x < 500000 then 0 <= y <= 500000 else (if x < 750000 then 500000 <= y <= 750000 else 750000 <= y <= 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\nloop invariant (if x < 500000 then y = 500000 else (if x < 750000 then y = 750000 else y = 750000));\nloop invariant (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: unexpected token 'x'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: 0 <= z <= 1;\n\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant z == 0;\nloop invariant (x == 1000000 ==> y == 500000);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 0 <= y <= 500000 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nloop invariant (x == 1000000 ==> y == 500000) is established but not preserved.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant x%2==0 ==> x%2==0;\nloop invariant x%2==1 ==> x%2==1;\nloop invariant x%2==0 ==> y%2==0;\nloop invariant x%2==1 ==> y%2==1;\nloop invariant 0 <= x <= 1000000;\nloop invariant 0 <= y <= 500000;\nloop invariant x%2==0 ==> x%2==0;\nloop invariant x%2==1 ==> x%2==1;\nloop invariant x%2==0 ==> y%2==0;\nloop invariant x%2==1 ==> y%2==1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 0 <= y <= 500000 is established but not preserved.\nloop invariant x%2==0 ==> x%2==0 is partially proven to be inductive.\nloop invariant x%2==1 ==> x%2==1 is partially proven to be inductive.\nloop invariant x%2==0 ==> y%2==0 is established but not preserved.\nloop invariant x%2==1 ==> y%2==1 is established but not preserved.\nAssertion x == 1000000: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: x%2==0 ==> x%2==0;\nloop invariant i4: x%2==1 ==> x%2==1;\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 62: unexpected token 'x'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 500000;\nloop invariant i3: x <= 1000000;\nloop invariant i4: y <= 1000000;\nloop invariant i5: x <= y;\nloop invariant i6: x >= y - 1000000;\nloop invariant i7: 0 <= y <= 100000;\nloop invariant i8: x >= (1 + (y - 1) * y / 2);\nloop invariant i9: 0 <= x <= 1000000;\nloop invariant i10: 0 <= y <= 500000;\nloop invariant i11: z == 0;\nloop invariant i12: 1 <= y <= 500000;\nloop invariant i13: x <= y + 1000000;\nloop invariant i14: 0 <= z <= 1000000;\nloop invariant i15: x == 1000000 ==> (x < 500000 ==> y == 500000) && (500000 <= x < 750000 ==> y == 750000) && (x >= 750000 ==> y == 1000000);\nloop invariant i16: 500000 <= y <= 1000000;\nloop invariant i17: (0 <= x <= 1000000);\nloop invariant i18: (500000 <= y <= 1000000);\nloop invariant i19: (z == 0);\nloop invariant i20: y >= 0;\nloop invariant i21: y <= 500000;\nloop invariant i22: x - y >= 0;\nloop invariant i23: x - y <= 1000000;\nloop invariant i24: (x == (x + 1) ==> (y == y + 1 && x < 500000));\nloop invariant i25: (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000));\nloop invariant i26: (x == (x + 2) ==> (y == y + 1 && x >= 750000));\nloop invariant i27: (x == 1000000 ==> (y == 500000));\nloop invariant i28: 500000 <= y <= 100000000000;\nloop invariant i29: x >= y;\nloop invariant i30: x >= z;\nloop invariant i31: x + 2 * y + 2 * z >= 1000000;\nloop invariant i32: x >= 500000 ==> x <= 750000;\nloop invariant i33: x < 500000 ==> x < 1000000;\nloop invariant i34: y >= 500001 ==> y <= 1000000;\nloop invariant i35: 500000 <= y <= 500000;\nloop invariant i36: 0 <= z <= 0;\nloop invariant i37: x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) ==> y >= 500000;\nloop invariant i38: x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2) ==> y >= 750000;\nloop invariant i39: x >= (z + 1 + (y - 1) * (y - 2) / 2) ==> y >= 1;\nloop invariant i40: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x >= (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 750000;\nloop invariant i41: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> 500000 <= y < 750000;\nloop invariant i42: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0;\nloop invariant i43: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z < 1000000;\nloop invariant i44: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2);\nloop invariant i45: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2);\nloop invariant i46: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 500000;\nloop invariant i47: 500000 <= y <= 750000;\nloop invariant i48: x <= 2*y;\nloop invariant i49: x == 1000000 ==> (x == 1000000 && y == 750000);\nloop invariant i50: 0 <= z <= 1;\nloop invariant i51: (if x < 500000 then x = 0 else (if x < 750000 then x = y - 1 else x = y - 2));\nloop invariant i52: (if x < 500000 then y = 500000 else (if x < 750000 then y = 500000 else y = 750000));\nloop invariant i53: (if x < 500000 then z = 0 else (if x < 750000 then z = y - 500000 else z = y - 750000));\nloop invariant i54: (if x < 500000 then 0 <= y <= 500000 else (if x < 750000 then 500000 <= y <= 750000 else 750000 <= y <= 750000));\nloop invariant i55: (if x < 500000 then y = 500000 else (if x < 750000 then y = 750000 else y = 750000));\nloop invariant i56: (x == 1000000 ==> y == 500000);\nloop invariant i57: x%2==0 ==> x%2==0;\nloop invariant i58: x%2==1 ==> x%2==1;\nloop invariant i59: x%2==0 ==> y%2==0;\nloop invariant i60: x%2==1 ==> y%2==1;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
            "combined_annotation_num_solver_calls": 20,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 500000;\n\n\n\nloop invariant i6: x >= y - 1000000;\n\n\n\n\nloop invariant i11: z == 0;\n\nloop invariant i13: x <= y + 1000000;\nloop invariant i14: 0 <= z <= 1000000;\n\n\n\n\nloop invariant i19: (z == 0);\nloop invariant i20: y >= 0;\n\n\nloop invariant i23: x - y <= 1000000;\nloop invariant i24: (x == (x + 1) ==> (y == y + 1 && x < 500000));\nloop invariant i25: (x == (x + 1) ==> (y == y + 1 && x >= 500000 && x < 750000));\nloop invariant i26: (x == (x + 2) ==> (y == y + 1 && x >= 750000));\n\nloop invariant i28: 500000 <= y <= 100000000000;\n\nloop invariant i30: x >= z;\nloop invariant i31: x + 2 * y + 2 * z >= 1000000;\n\nloop invariant i33: x < 500000 ==> x < 1000000;\n\n\nloop invariant i36: 0 <= z <= 0;\nloop invariant i37: x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) ==> y >= 500000;\n\nloop invariant i39: x >= (z + 1 + (y - 1) * (y - 2) / 2) ==> y >= 1;\n\nloop invariant i41: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> 500000 <= y < 750000;\nloop invariant i42: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z >= 0;\nloop invariant i43: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> z < 1000000;\nloop invariant i44: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2);\nloop invariant i45: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> x < (750000 - 1 + (y - 750000) * (y - 750001) / 2);\nloop invariant i46: (x >= (500000 - 1 + (y - 500000) * (y - 500001) / 2) && x < (750000 - 1 + (y - 750000) * (y - 750001) / 2)) ==> y >= 500000;\n\nloop invariant i48: x <= 2*y;\n\nloop invariant i50: 0 <= z <= 1;\n\n\n\n\n\n\nloop invariant i57: x%2==0 ==> x%2==0;\nloop invariant i58: x%2==1 ==> x%2==1;\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant flag < 1;\nloop invariant 0 <= y <= 50;\nloop invariant 0 <= x <= 50;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 99 ==> y == -2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant flag < 1 ==> y < 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> flag < 1;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant -50 <= y <= 49;\nloop invariant flag >= 0 & flag <= 1;\nloop invariant x >= 0 ==> y >= -50 & y <= 49;\nloop invariant flag >= 1 ==> y < 0;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y <= 2 * x - 1;\nloop invariant y >= 2 * x - 100;\nloop invariant y <= 2 * x + 1;\nloop invariant y >= 2 * x - 101;\nloop invariant y <= 2 * x + 100;\nloop invariant y >= 2 * x - 102;\nloop invariant y <= 2 * x + 101;\nloop invariant y >= 2 * x - 103;\nloop invariant y <= 2 * x + 102;\nloop invariant y >= 2 * x - 104;\nloop invariant y <= 2 * x + 103;\nloop invariant y >= 2 * x - 105;\nloop invariant y <= 2 * x + 104;\nloop invariant y >= 2 * x - 106;\nloop invariant y <= 2 * x + 105;\nloop invariant y >= 2 * x - 107;\nloop invariant y <= 2 * x + 106;\nloop invariant y >= 2 * x - 108;\nloop invariant y <= 2 * x + 107;\nloop invariant y >= 2 * x - 109;\nloop invariant y <= 2 * x + 108;\nloop invariant y >= 2 * x - 110;\nloop invariant y <= 2 * x + 109;\nloop invariant y >= 2 * x - 111;\nloop invariant y <= 2 * x + 110;\nloop invariant y >= 2 * x - 112;\nloop invariant y <= 2 * x + 111;\nloop invariant y >= 2 * x - 113;\nloop invariant y <= 2 * x + 112;\nloop invariant y >= 2 * x - 114;\nloop invariant y <= 2 * x + 113;\nloop invariant y >= 2 * x - 115;\nloop invariant y <= 2 * x + 114;\nloop invariant y >= 2 * x - 116;\nloop invariant y <= 2 * x + 115;\nloop invariant y >= 2 * x - 117;\nloop invariant y <= 2 * x + 116;\nloop invariant y >= 2 * x - 118;\nloop invariant y <= 2 * x + 117;\nloop invariant y >= 2 * x - 119;\nloop invariant y <= 2 * x + 118;\nloop invariant y >= 2 * x - 120;\nloop invariant y <= 2 * x + 119;\nloop invariant y >= 2 * x - 121;\nloop invariant y <= 2 * x + 120;\nloop invariant y >= 2 * x - 122;\nloop invariant y <= 2 * x + 121;\nloop invariant y >= 2 * x - 123;\nloop invariant y <= 2 * x + 122;\nloop invariant y >= 2 * x - 124;\nloop invariant y <= 2 * x + 123;\nloop invariant y >= 2 * x - 125;\nloop invariant y <= 2 * x + 124;\nloop invariant y >= 2 * x - 126;\nloop invariant y <= 2 * x + 125;\nloop invariant y >= 2 * x - 127;\nloop invariant y <= 2 * x + 126;\nloop invariant y >= 2 * x - 128;\nloop invariant y <= 2 * x + 127;\nloop invariant y >= 2 * x - 129;\nloop invariant y <= 2 * x + 128;\nloop invariant y >= 2 * x - 130;\nloop invariant y <= 2 * x + 129;\nloop invariant y >= 2 * x - 131;\nloop invariant y <= 2 * x + 130;\nloop invariant y >= 2 * x - 132;\nloop invariant y <= 2 * x + 131;\nloop invariant y >= 2 * x - 133;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x <= 99;\nloop invariant y == -2 ==> flag == 1;\nloop invariant y != -2 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x != 99 ==> flag == 0;\nloop invariant x > 49 ==> y == 50;\nloop invariant x <= 49 ==> y == 0;\nloop invariant y == 50 ==> x > 49;\nloop invariant y == 0 ==> x <= 49;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 99 ==> y == -2;\nloop invariant y == 0 ==> x < 50;\nloop invariant x == 49 ==> y == 0;\nloop invariant y == 50 ==> x > 49;\nloop invariant x == 0 ==> y <= 50;\nloop invariant y == -2 ==> x == 99;\nloop invariant x == 50 ==> y == 50;\nloop invariant y == 0 ==> x >= 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> y == -2;\nloop invariant x == 50 ==> y == 50;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant flag == 0 ==> x == y;\nloop invariant flag == 1 ==> y == -2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant -1 <= y <= 1;\nloop invariant flag == (1 + (y == 0));\nloop invariant x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x < 50;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + 1 < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + 1 >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + 1 <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (y == 0) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (y == 0) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (y == 0) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 100;\nloop invariant flag == 0 ==> y == 0;\nloop invariant flag == 1 ==> y == -2;\nloop invariant flag == 0 ==> x == 0;\nloop invariant flag == 1 ==> x == 99;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 2;\nloop invariant flag == 0 ==> x == 0 && y == 0;\nloop invariant flag == 1 ==> x == 99 && y == -2;\nloop invariant x <= 50 ==> y <= 2;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y < 0 ==> flag == 1;\nloop invariant x < 50 ==> y < 2;\nloop invariant x >= 50 ==> y >= 1;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant flag < 1;\nloop invariant 0 <= y <= 50;\nloop invariant 0 <= x <= 50;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 99 ==> y == -2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant flag < 1 is partially proven to be inductive.\nloop invariant 0 <= y <= 50 is established but not preserved.\nloop invariant 0 <= x <= 50 is established but not preserved.\nloop invariant x == 99 ==> flag == 1 is partially proven to be inductive.\nloop invariant x == 99 ==> y == -2 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant flag < 1 ==> y < 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> flag < 1;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant flag < 1 ==> y < 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x < 50 is partially proven to be inductive.\nloop invariant flag < 1 ==> flag < 1 is partially proven to be inductive.\nloop invariant flag < 1 ==> y >= 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x >= 0 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\nloop invariant i5: flag < 1 ==> flag < 1;\n\nloop invariant i7: flag < 1 ==> x >= 0;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 99;\nloop invariant -50 <= y <= 49;\nloop invariant flag >= 0 & flag <= 1;\nloop invariant x >= 0 ==> y >= -50 & y <= 49;\nloop invariant flag >= 1 ==> y < 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: invalid operands to binary &; unexpected 𝔹 and 𝔹. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 13: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 37,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant x >= (y - 1) * y / 2;\nloop invariant y <= 2 * x - 1;\nloop invariant y >= 2 * x - 100;\nloop invariant y <= 2 * x + 1;\nloop invariant y >= 2 * x - 101;\nloop invariant y <= 2 * x + 100;\nloop invariant y >= 2 * x - 102;\nloop invariant y <= 2 * x + 101;\nloop invariant y >= 2 * x - 103;\nloop invariant y <= 2 * x + 102;\nloop invariant y >= 2 * x - 104;\nloop invariant y <= 2 * x + 103;\nloop invariant y >= 2 * x - 105;\nloop invariant y <= 2 * x + 104;\nloop invariant y >= 2 * x - 106;\nloop invariant y <= 2 * x + 105;\nloop invariant y >= 2 * x - 107;\nloop invariant y <= 2 * x + 106;\nloop invariant y >= 2 * x - 108;\nloop invariant y <= 2 * x + 107;\nloop invariant y >= 2 * x - 109;\nloop invariant y <= 2 * x + 108;\nloop invariant y >= 2 * x - 110;\nloop invariant y <= 2 * x + 109;\nloop invariant y >= 2 * x - 111;\nloop invariant y <= 2 * x + 110;\nloop invariant y >= 2 * x - 112;\nloop invariant y <= 2 * x + 111;\nloop invariant y >= 2 * x - 113;\nloop invariant y <= 2 * x + 112;\nloop invariant y >= 2 * x - 114;\nloop invariant y <= 2 * x + 113;\nloop invariant y >= 2 * x - 115;\nloop invariant y <= 2 * x + 114;\nloop invariant y >= 2 * x - 116;\nloop invariant y <= 2 * x + 115;\nloop invariant y >= 2 * x - 117;\nloop invariant y <= 2 * x + 116;\nloop invariant y >= 2 * x - 118;\nloop invariant y <= 2 * x + 117;\nloop invariant y >= 2 * x - 119;\nloop invariant y <= 2 * x + 118;\nloop invariant y >= 2 * x - 120;\nloop invariant y <= 2 * x + 119;\nloop invariant y >= 2 * x - 121;\nloop invariant y <= 2 * x + 120;\nloop invariant y >= 2 * x - 122;\nloop invariant y <= 2 * x + 121;\nloop invariant y >= 2 * x - 123;\nloop invariant y <= 2 * x + 122;\nloop invariant y >= 2 * x - 124;\nloop invariant y <= 2 * x + 123;\nloop invariant y >= 2 * x - 125;\nloop invariant y <= 2 * x + 124;\nloop invariant y >= 2 * x - 126;\nloop invariant y <= 2 * x + 125;\nloop invariant y >= 2 * x - 127;\nloop invariant y <= 2 * x + 126;\nloop invariant y >= 2 * x - 128;\nloop invariant y <= 2 * x + 127;\nloop invariant y >= 2 * x - 129;\nloop invariant y <= 2 * x + 128;\nloop invariant y >= 2 * x - 130;\nloop invariant y <= 2 * x + 129;\nloop invariant y >= 2 * x - 131;\nloop invariant y <= 2 * x + 130;\nloop invariant y >= 2 * x - 132;\nloop invariant y <= 2 * x + 131;\nloop invariant y >= 2 * x - 133;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 50 is preserved but not established.\nloop invariant 0 <= y <= 100 is partially proven to be inductive.\nloop invariant x >= (y - 1) * y / 2 is partially proven to be inductive.\nloop invariant y <= 2 * x - 1 is partially proven to be inductive.\nloop invariant y >= 2 * x - 100 is partially proven to be inductive.\nloop invariant y <= 2 * x + 1 is partially proven to be inductive.\nloop invariant y >= 2 * x - 101 is partially proven to be inductive.\nloop invariant y <= 2 * x + 100 is partially proven to be inductive.\nloop invariant y >= 2 * x - 102 is partially proven to be inductive.\nloop invariant y <= 2 * x + 101 is partially proven to be inductive.\nloop invariant y >= 2 * x - 103 is partially proven to be inductive.\nloop invariant y <= 2 * x + 102 is partially proven to be inductive.\nloop invariant y >= 2 * x - 104 is partially proven to be inductive.\nloop invariant y <= 2 * x + 103 is partially proven to be inductive.\nloop invariant y >= 2 * x - 105 is partially proven to be inductive.\nloop invariant y <= 2 * x + 104 is partially proven to be inductive.\nloop invariant y >= 2 * x - 106 is partially proven to be inductive.\nloop invariant y <= 2 * x + 105 is partially proven to be inductive.\nloop invariant y >= 2 * x - 107 is partially proven to be inductive.\nloop invariant y <= 2 * x + 106 is partially proven to be inductive.\nloop invariant y >= 2 * x - 108 is partially proven to be inductive.\nloop invariant y <= 2 * x + 107 is partially proven to be inductive.\nloop invariant y >= 2 * x - 109 is partially proven to be inductive.\nloop invariant y <= 2 * x + 108 is partially proven to be inductive.\nloop invariant y >= 2 * x - 110 is partially proven to be inductive.\nloop invariant y <= 2 * x + 109 is partially proven to be inductive.\nloop invariant y >= 2 * x - 111 is partially proven to be inductive.\nloop invariant y <= 2 * x + 110 is partially proven to be inductive.\nloop invariant y >= 2 * x - 112 is partially proven to be inductive.\nloop invariant y <= 2 * x + 111 is partially proven to be inductive.\nloop invariant y >= 2 * x - 113 is partially proven to be inductive.\nloop invariant y <= 2 * x + 112 is partially proven to be inductive.\nloop invariant y >= 2 * x - 114 is partially proven to be inductive.\nloop invariant y <= 2 * x + 113 is partially proven to be inductive.\nloop invariant y >= 2 * x - 115 is partially proven to be inductive.\nloop invariant y <= 2 * x + 114 is partially proven to be inductive.\nloop invariant y >= 2 * x - 116 is partially proven to be inductive.\nloop invariant y <= 2 * x + 115 is partially proven to be inductive.\nloop invariant y >= 2 * x - 117 is partially proven to be inductive.\nloop invariant y <= 2 * x + 116 is partially proven to be inductive.\nloop invariant y >= 2 * x - 118 is partially proven to be inductive.\nloop invariant y <= 2 * x + 117 is partially proven to be inductive.\nloop invariant y >= 2 * x - 119 is partially proven to be inductive.\nloop invariant y <= 2 * x + 118 is partially proven to be inductive.\nloop invariant y >= 2 * x - 120 is partially proven to be inductive.\nloop invariant y <= 2 * x + 119 is partially proven to be inductive.\nloop invariant y >= 2 * x - 121 is partially proven to be inductive.\nloop invariant y <= 2 * x + 120 is partially proven to be inductive.\nloop invariant y >= 2 * x - 122 is partially proven to be inductive.\nloop invariant y <= 2 * x + 121 is partially proven to be inductive.\nloop invariant y >= 2 * x - 123 is partially proven to be inductive.\nloop invariant y <= 2 * x + 122 is partially proven to be inductive.\nloop invariant y >= 2 * x - 124 is partially proven to be inductive.\nloop invariant y <= 2 * x + 123 is partially proven to be inductive.\nloop invariant y >= 2 * x - 125 is partially proven to be inductive.\nloop invariant y <= 2 * x + 124 is partially proven to be inductive.\nloop invariant y >= 2 * x - 126 is partially proven to be inductive.\nloop invariant y <= 2 * x + 125 is partially proven to be inductive.\nloop invariant y >= 2 * x - 127 is partially proven to be inductive.\nloop invariant y <= 2 * x + 126 is partially proven to be inductive.\nloop invariant y >= 2 * x - 128 is partially proven to be inductive.\nloop invariant y <= 2 * x + 127 is partially proven to be inductive.\nloop invariant y >= 2 * x - 129 is partially proven to be inductive.\nloop invariant y <= 2 * x + 128 is partially proven to be inductive.\nloop invariant y >= 2 * x - 130 is partially proven to be inductive.\nloop invariant y <= 2 * x + 129 is partially proven to be inductive.\nloop invariant y >= 2 * x - 131 is partially proven to be inductive.\nloop invariant y <= 2 * x + 130 is partially proven to be inductive.\nloop invariant y >= 2 * x - 132 is partially proven to be inductive.\nloop invariant y <= 2 * x + 131 is partially proven to be inductive.\nloop invariant y >= 2 * x - 133 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is established but not preserved.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 50;\nloop invariant x <= 99;\nloop invariant y == -2 ==> flag == 1;\nloop invariant y != -2 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x != 99 ==> flag == 0;\nloop invariant x > 49 ==> y == 50;\nloop invariant x <= 49 ==> y == 0;\nloop invariant y == 50 ==> x > 49;\nloop invariant y == 0 ==> x <= 49;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 99 ==> y == -2;\nloop invariant y == 0 ==> x < 50;\nloop invariant x == 49 ==> y == 0;\nloop invariant y == 50 ==> x > 49;\nloop invariant x == 0 ==> y <= 50;\nloop invariant y == -2 ==> x == 99;\nloop invariant x == 50 ==> y == 50;\nloop invariant y == 0 ==> x >= 0;\nloop invariant x == 0 ==> y == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> y == -2;\nloop invariant x == 50 ==> y == 50;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\nloop invariant x == 50 ==> flag == 0;\nloop invariant x == 0 ==> flag == 0;\nloop invariant x == 99 ==> flag == 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 50 is established but not preserved.\nloop invariant x <= 99 is partially proven to be inductive.\nloop invariant y == -2 ==> flag == 1 is partially proven to be inductive.\nloop invariant y != -2 ==> flag == 0 is partially proven to be inductive.\nloop invariant x == 99 ==> flag == 1 is established but not preserved.\nloop invariant x != 99 ==> flag == 0 is partially proven to be inductive.\nloop invariant x > 49 ==> y == 50 is established but not preserved.\nloop invariant x <= 49 ==> y == 0 is established but not preserved.\nloop invariant y == 50 ==> x > 49 is partially proven to be inductive.\nloop invariant y == 0 ==> x <= 49 is partially proven to be inductive.\nloop invariant x == 0 ==> y == 0 is partially proven to be inductive.\nloop invariant x == 99 ==> y == -2 is partially proven to be inductive.\nloop invariant y == 0 ==> x < 50 is partially proven to be inductive.\nloop invariant x == 49 ==> y == 0 is partially proven to be inductive.\nloop invariant x == 0 ==> y <= 50 is partially proven to be inductive.\nloop invariant y == -2 ==> x == 99 is partially proven to be inductive.\nloop invariant x == 50 ==> y == 50 is partially proven to be inductive.\nloop invariant y == 0 ==> x >= 0 is partially proven to be inductive.\nloop invariant x == 0 ==> flag == 0 is partially proven to be inductive.\nloop invariant x == 50 ==> flag == 0 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\nloop invariant i3: y == -2 ==> flag == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\nloop invariant flag == 0 ==> x == y;\nloop invariant flag == 1 ==> y == -2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is established but not preserved.\nloop invariant 0 <= y <= 100 is established but not preserved.\nloop invariant flag == 0 ==> x == y is established but not preserved.\nloop invariant flag == 1 ==> y == -2 is partially proven to be inductive.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is established but not preserved.\nloop invariant 0 <= y <= 100 is established but not preserved.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\nloop invariant x >= y;\nloop invariant x <= 50;\nloop invariant y >= -2;\nloop invariant y <= 100000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nloop invariant 0 <= x <= 50 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant x <= 50 is partially proven to be inductive.\nloop invariant y >= -2 is partially proven to be inductive.\nloop invariant y <= 100000 is partially proven to be inductive.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 18,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant -1 <= y <= 1;\nloop invariant flag == (1 + (y == 0));\nloop invariant x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x < 50;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + 1 < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + 1 >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + 1 <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (y == 0) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (y == 0) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (y == 0) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: invalid operands to binary +; unexpected ℤ and 𝔹. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 100000 is partially proven to be inductive.\nloop invariant x >= (1 + (y - 1) * y / 2) is preserved but not established.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 2;\nloop invariant 0 <= x <= 100;\nloop invariant flag == 0 ==> y == 0;\nloop invariant flag == 1 ==> y == -2;\nloop invariant flag == 0 ==> x == 0;\nloop invariant flag == 1 ==> x == 99;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant 0 <= x <= 100 is established but not preserved.\nloop invariant flag == 0 ==> y == 0 is established but not preserved.\nloop invariant flag == 1 ==> y == -2 is partially proven to be inductive.\nloop invariant flag == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant flag == 1 ==> x == 99 is partially proven to be inductive.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= 50;\nloop invariant 0 <= y <= 2;\nloop invariant flag == 0 ==> x == 0 && y == 0;\nloop invariant flag == 1 ==> x == 99 && y == -2;\nloop invariant x <= 50 ==> y <= 2;\nloop invariant x >= 0 ==> y >= 0;\nloop invariant y < 0 ==> flag == 1;\nloop invariant x < 50 ==> y < 2;\nloop invariant x >= 50 ==> y >= 1;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x <= 49;\nloop invariant flag < 1 ==> y <= 1;\nloop invariant flag < 1 ==> x >= 0;\nloop invariant flag < 1 ==> y >= 0;\nloop invariant flag < 1 ==> x < 50;\nloop invariant flag < 1 ==> y < 2;\nloop invariant flag < 1 ==> x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= 50 is partially proven to be inductive.\nloop invariant 0 <= y <= 2 is established but not preserved.\nloop invariant flag == 0 ==> x == 0 && y == 0 is established but not preserved.\nloop invariant flag == 1 ==> x == 99 && y == -2 is partially proven to be inductive.\nloop invariant x <= 50 ==> y <= 2 is partially proven to be inductive.\nloop invariant x >= 0 ==> y >= 0 is partially proven to be inductive.\nloop invariant y < 0 ==> flag == 1 is partially proven to be inductive.\nloop invariant x < 50 ==> y < 2 is established but not preserved.\nloop invariant x >= 50 ==> y >= 1 is established but not preserved.\nloop invariant flag < 1 ==> x <= 49 is partially proven to be inductive.\nloop invariant flag < 1 ==> x >= 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> y <= 1 is partially proven to be inductive.\nloop invariant flag < 1 ==> y >= 0 is partially proven to be inductive.\nloop invariant flag < 1 ==> x < 50 is partially proven to be inductive.\nloop invariant flag < 1 ==> y < 2 is partially proven to be inductive.\nAssertion y == -2: Unproven\nAssertion x == 99: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: flag < 1 ==> x >= 0;\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 28: invalid operands to binary &; unexpected 𝔹 and 𝔹. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: flag < 1;\nloop invariant i2: 0 <= y <= 50;\nloop invariant i3: 0 <= x <= 50;\nloop invariant i4: x == 99 ==> flag == 1;\nloop invariant i5: x == 99 ==> y == -2;\nloop invariant i6: 0 <= y <= 100000;\nloop invariant i7: x >= (1 + (y - 1) * y / 2);\nloop invariant i8: flag < 1 ==> y < 0;\nloop invariant i9: flag < 1 ==> x < 50;\nloop invariant i10: flag < 1 ==> flag < 1;\nloop invariant i11: flag < 1 ==> y >= 0;\nloop invariant i12: flag < 1 ==> x >= 0;\nloop invariant i13: 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154;\nloop invariant i14: 0 <= x <= 99;\nloop invariant i15: -50 <= y <= 49;\nloop invariant i16: flag >= 0 & flag <= 1;\nloop invariant i17: x >= 0 ==> y >= -50 & y <= 49;\nloop invariant i18: flag >= 1 ==> y < 0;\nloop invariant i19: 1 <= x <= 50;\nloop invariant i20: 0 <= y <= 100;\nloop invariant i21: x >= (y - 1) * y / 2;\nloop invariant i22: y <= 2 * x - 1;\nloop invariant i23: y >= 2 * x - 100;\nloop invariant i24: y <= 2 * x + 1;\nloop invariant i25: y >= 2 * x - 101;\nloop invariant i26: y <= 2 * x + 100;\nloop invariant i27: y >= 2 * x - 102;\nloop invariant i28: y <= 2 * x + 101;\nloop invariant i29: y >= 2 * x - 103;\nloop invariant i30: y <= 2 * x + 102;\nloop invariant i31: y >= 2 * x - 104;\nloop invariant i32: y <= 2 * x + 103;\nloop invariant i33: y >= 2 * x - 105;\nloop invariant i34: y <= 2 * x + 104;\nloop invariant i35: y >= 2 * x - 106;\nloop invariant i36: y <= 2 * x + 105;\nloop invariant i37: y >= 2 * x - 107;\nloop invariant i38: y <= 2 * x + 106;\nloop invariant i39: y >= 2 * x - 108;\nloop invariant i40: y <= 2 * x + 107;\nloop invariant i41: y >= 2 * x - 109;\nloop invariant i42: y <= 2 * x + 108;\nloop invariant i43: y >= 2 * x - 110;\nloop invariant i44: y <= 2 * x + 109;\nloop invariant i45: y >= 2 * x - 111;\nloop invariant i46: y <= 2 * x + 110;\nloop invariant i47: y >= 2 * x - 112;\nloop invariant i48: y <= 2 * x + 111;\nloop invariant i49: y >= 2 * x - 113;\nloop invariant i50: y <= 2 * x + 112;\nloop invariant i51: y >= 2 * x - 114;\nloop invariant i52: y <= 2 * x + 113;\nloop invariant i53: y >= 2 * x - 115;\nloop invariant i54: y <= 2 * x + 114;\nloop invariant i55: y >= 2 * x - 116;\nloop invariant i56: y <= 2 * x + 115;\nloop invariant i57: y >= 2 * x - 117;\nloop invariant i58: y <= 2 * x + 116;\nloop invariant i59: y >= 2 * x - 118;\nloop invariant i60: y <= 2 * x + 117;\nloop invariant i61: y >= 2 * x - 119;\nloop invariant i62: y <= 2 * x + 118;\nloop invariant i63: y >= 2 * x - 120;\nloop invariant i64: y <= 2 * x + 119;\nloop invariant i65: y >= 2 * x - 121;\nloop invariant i66: y <= 2 * x + 120;\nloop invariant i67: y >= 2 * x - 122;\nloop invariant i68: y <= 2 * x + 121;\nloop invariant i69: y >= 2 * x - 123;\nloop invariant i70: y <= 2 * x + 122;\nloop invariant i71: y >= 2 * x - 124;\nloop invariant i72: y <= 2 * x + 123;\nloop invariant i73: y >= 2 * x - 125;\nloop invariant i74: y <= 2 * x + 124;\nloop invariant i75: y >= 2 * x - 126;\nloop invariant i76: y <= 2 * x + 125;\nloop invariant i77: y >= 2 * x - 127;\nloop invariant i78: y <= 2 * x + 126;\nloop invariant i79: y >= 2 * x - 128;\nloop invariant i80: y <= 2 * x + 127;\nloop invariant i81: y >= 2 * x - 129;\nloop invariant i82: y <= 2 * x + 128;\nloop invariant i83: y >= 2 * x - 130;\nloop invariant i84: y <= 2 * x + 129;\nloop invariant i85: y >= 2 * x - 131;\nloop invariant i86: y <= 2 * x + 130;\nloop invariant i87: y >= 2 * x - 132;\nloop invariant i88: y <= 2 * x + 131;\nloop invariant i89: y >= 2 * x - 133;\nloop invariant i90: x <= 99;\nloop invariant i91: y == -2 ==> flag == 1;\nloop invariant i92: y != -2 ==> flag == 0;\nloop invariant i93: x != 99 ==> flag == 0;\nloop invariant i94: x > 49 ==> y == 50;\nloop invariant i95: x <= 49 ==> y == 0;\nloop invariant i96: y == 50 ==> x > 49;\nloop invariant i97: y == 0 ==> x <= 49;\nloop invariant i98: x == 0 ==> y == 0;\nloop invariant i99: y == 0 ==> x < 50;\nloop invariant i100: x == 49 ==> y == 0;\nloop invariant i101: x == 0 ==> y <= 50;\nloop invariant i102: y == -2 ==> x == 99;\nloop invariant i103: x == 50 ==> y == 50;\nloop invariant i104: y == 0 ==> x >= 0;\nloop invariant i105: x == 0 ==> flag == 0;\nloop invariant i106: x == 50 ==> flag == 0;\nloop invariant i107: flag == 0 ==> x == y;\nloop invariant i108: flag == 1 ==> y == -2;\nloop invariant i109: x >= y;\nloop invariant i110: x <= 50;\nloop invariant i111: y >= -2;\nloop invariant i112: y <= 100000;\nloop invariant i113: -1 <= y <= 1;\nloop invariant i114: flag == (1 + (y == 0));\nloop invariant i115: x + (1 + (y == 0)) < 51;\nloop invariant i116: x + (1 + (y == 0)) >= 0;\nloop invariant i117: x + (1 + (y == 0)) <= 50;\nloop invariant i118: x + (1 + (y == 0)) < 51 ==> x < 50;\nloop invariant i119: x + (1 + (y == 0)) >= 0 ==> x >= 0;\nloop invariant i120: x + (1 + (y == 0)) <= 50 ==> x <= 50;\nloop invariant i121: x + (1 + (y == 0)) < 51 ==> x + 1 < 51;\nloop invariant i122: x + (1 + (y == 0)) >= 0 ==> x + 1 >= 0;\nloop invariant i123: x + (1 + (y == 0)) <= 50 ==> x + 1 <= 50;\nloop invariant i124: x + (1 + (y == 0)) < 51 ==> x + (y == 0) < 51;\nloop invariant i125: x + (1 + (y == 0)) >= 0 ==> x + (y == 0) >= 0;\nloop invariant i126: x + (1 + (y == 0)) <= 50 ==> x + (y == 0) <= 50;\nloop invariant i127: x + (1 + (y == 0)) < 51 ==> x + (1 + (y == 0)) < 51;\nloop invariant i128: x + (1 + (y == 0)) >= 0 ==> x + (1 + (y == 0)) >= 0;\nloop invariant i129: x + (1 + (y == 0)) <= 50 ==> x + (1 + (y == 0)) <= 50;\nloop invariant i130: 0 <= y <= 2;\nloop invariant i131: 0 <= x <= 100;\nloop invariant i132: flag == 0 ==> y == 0;\nloop invariant i133: flag == 0 ==> x == 0;\nloop invariant i134: flag == 1 ==> x == 99;\nloop invariant i135: flag == 0 ==> x == 0 && y == 0;\nloop invariant i136: flag == 1 ==> x == 99 && y == -2;\nloop invariant i137: x <= 50 ==> y <= 2;\nloop invariant i138: x >= 0 ==> y >= 0;\nloop invariant i139: y < 0 ==> flag == 1;\nloop invariant i140: x < 50 ==> y < 2;\nloop invariant i141: x >= 50 ==> y >= 1;\nloop invariant i142: flag < 1 ==> x <= 49;\nloop invariant i143: flag < 1 ==> y <= 1;\nloop invariant i144: flag < 1 ==> y < 2;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
            "combined_annotation_num_solver_calls": 22,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: flag < 1;\nloop invariant i2: 0 <= y <= 50;\nloop invariant i3: 0 <= x <= 50;\nloop invariant i4: x == 99 ==> flag == 1;\nloop invariant i5: x == 99 ==> y == -2;\nloop invariant i6: 0 <= y <= 100000;\n\n\nloop invariant i9: flag < 1 ==> x < 50;\nloop invariant i10: flag < 1 ==> flag < 1;\nloop invariant i11: flag < 1 ==> y >= 0;\nloop invariant i12: flag < 1 ==> x >= 0;\nloop invariant i13: 0 <= y; loop invariant y <= -1; loop invariant y >= -100; loop invariant y <= -100; loop invariant y >= -101; loop invariant y <= -101; loop invariant y >= -102; loop invariant y <= -102; loop invariant y >= -103; loop invariant y <= -103; loop invariant y >= -104; loop invariant y <= -104; loop invariant y >= -105; loop invariant y <= -105; loop invariant y >= -106; loop invariant y <= -106; loop invariant y >= -107; loop invariant y <= -107; loop invariant y >= -108; loop invariant y <= -108; loop invariant y >= -109; loop invariant y <= -109; loop invariant y >= -110; loop invariant y <= -110; loop invariant y >= -111; loop invariant y <= -111; loop invariant y >= -112; loop invariant y <= -112; loop invariant y >= -113; loop invariant y <= -113; loop invariant y >= -114; loop invariant y <= -114; loop invariant y >= -115; loop invariant y <= -115; loop invariant y >= -116; loop invariant y <= -116; loop invariant y >= -117; loop invariant y <= -117; loop invariant y >= -118; loop invariant y <= -118; loop invariant y >= -119; loop invariant y <= -119; loop invariant y >= -120; loop invariant y <= -120; loop invariant y >= -121; loop invariant y <= -121; loop invariant y >= -122; loop invariant y <= -122; loop invariant y >= -123; loop invariant y <= -123; loop invariant y >= -124; loop invariant y <= -124; loop invariant y >= -125; loop invariant y <= -125; loop invariant y >= -126; loop invariant y <= -126; loop invariant y >= -127; loop invariant y <= -127; loop invariant y >= -128; loop invariant y <= -128; loop invariant y >= -129; loop invariant y <= -129; loop invariant y >= -130; loop invariant y <= -130; loop invariant y >= -131; loop invariant y <= -131; loop invariant y >= -132; loop invariant y <= -132; loop invariant y >= -133; loop invariant y <= -133; loop invariant y >= -134; loop invariant y <= -134; loop invariant y >= -135; loop invariant y <= -135; loop invariant y >= -136; loop invariant y <= -136; loop invariant y >= -137; loop invariant y <= -137; loop invariant y >= -138; loop invariant y <= -138; loop invariant y >= -139; loop invariant y <= -139; loop invariant y >= -140; loop invariant y <= -140; loop invariant y >= -141; loop invariant y <= -141; loop invariant y >= -142; loop invariant y <= -142; loop invariant y >= -143; loop invariant y <= -143; loop invariant y >= -144; loop invariant y <= -144; loop invariant y >= -145; loop invariant y <= -145; loop invariant y >= -146; loop invariant y <= -146; loop invariant y >= -147; loop invariant y <= -147; loop invariant y >= -148; loop invariant y <= -148; loop invariant y >= -149; loop invariant y <= -149; loop invariant y >= -150; loop invariant y <= -150; loop invariant y >= -151; loop invariant y <= -151; loop invariant y >= -152; loop invariant y <= -152; loop invariant y >= -153; loop invariant y <= -153; loop invariant y >= -154;\nloop invariant i14: 0 <= x <= 99;\nloop invariant i15: -50 <= y <= 49;\n\n\nloop invariant i18: flag >= 1 ==> y < 0;\nloop invariant i19: 1 <= x <= 50;\nloop invariant i20: 0 <= y <= 100;\nloop invariant i21: x >= (y - 1) * y / 2;\nloop invariant i22: y <= 2 * x - 1;\nloop invariant i23: y >= 2 * x - 100;\nloop invariant i24: y <= 2 * x + 1;\nloop invariant i25: y >= 2 * x - 101;\nloop invariant i26: y <= 2 * x + 100;\nloop invariant i27: y >= 2 * x - 102;\nloop invariant i28: y <= 2 * x + 101;\nloop invariant i29: y >= 2 * x - 103;\nloop invariant i30: y <= 2 * x + 102;\nloop invariant i31: y >= 2 * x - 104;\nloop invariant i32: y <= 2 * x + 103;\nloop invariant i33: y >= 2 * x - 105;\nloop invariant i34: y <= 2 * x + 104;\nloop invariant i35: y >= 2 * x - 106;\nloop invariant i36: y <= 2 * x + 105;\nloop invariant i37: y >= 2 * x - 107;\nloop invariant i38: y <= 2 * x + 106;\nloop invariant i39: y >= 2 * x - 108;\nloop invariant i40: y <= 2 * x + 107;\nloop invariant i41: y >= 2 * x - 109;\nloop invariant i42: y <= 2 * x + 108;\nloop invariant i43: y >= 2 * x - 110;\nloop invariant i44: y <= 2 * x + 109;\nloop invariant i45: y >= 2 * x - 111;\nloop invariant i46: y <= 2 * x + 110;\nloop invariant i47: y >= 2 * x - 112;\nloop invariant i48: y <= 2 * x + 111;\nloop invariant i49: y >= 2 * x - 113;\nloop invariant i50: y <= 2 * x + 112;\nloop invariant i51: y >= 2 * x - 114;\nloop invariant i52: y <= 2 * x + 113;\nloop invariant i53: y >= 2 * x - 115;\nloop invariant i54: y <= 2 * x + 114;\nloop invariant i55: y >= 2 * x - 116;\nloop invariant i56: y <= 2 * x + 115;\nloop invariant i57: y >= 2 * x - 117;\nloop invariant i58: y <= 2 * x + 116;\nloop invariant i59: y >= 2 * x - 118;\nloop invariant i60: y <= 2 * x + 117;\nloop invariant i61: y >= 2 * x - 119;\nloop invariant i62: y <= 2 * x + 118;\nloop invariant i63: y >= 2 * x - 120;\nloop invariant i64: y <= 2 * x + 119;\nloop invariant i65: y >= 2 * x - 121;\nloop invariant i66: y <= 2 * x + 120;\nloop invariant i67: y >= 2 * x - 122;\nloop invariant i68: y <= 2 * x + 121;\nloop invariant i69: y >= 2 * x - 123;\nloop invariant i70: y <= 2 * x + 122;\nloop invariant i71: y >= 2 * x - 124;\nloop invariant i72: y <= 2 * x + 123;\nloop invariant i73: y >= 2 * x - 125;\nloop invariant i74: y <= 2 * x + 124;\nloop invariant i75: y >= 2 * x - 126;\nloop invariant i76: y <= 2 * x + 125;\nloop invariant i77: y >= 2 * x - 127;\nloop invariant i78: y <= 2 * x + 126;\nloop invariant i79: y >= 2 * x - 128;\nloop invariant i80: y <= 2 * x + 127;\nloop invariant i81: y >= 2 * x - 129;\nloop invariant i82: y <= 2 * x + 128;\nloop invariant i83: y >= 2 * x - 130;\nloop invariant i84: y <= 2 * x + 129;\nloop invariant i85: y >= 2 * x - 131;\nloop invariant i86: y <= 2 * x + 130;\nloop invariant i87: y >= 2 * x - 132;\nloop invariant i88: y <= 2 * x + 131;\nloop invariant i89: y >= 2 * x - 133;\nloop invariant i90: x <= 99;\nloop invariant i91: y == -2 ==> flag == 1;\nloop invariant i92: y != -2 ==> flag == 0;\nloop invariant i93: x != 99 ==> flag == 0;\nloop invariant i94: x > 49 ==> y == 50;\nloop invariant i95: x <= 49 ==> y == 0;\nloop invariant i96: y == 50 ==> x > 49;\nloop invariant i97: y == 0 ==> x <= 49;\nloop invariant i98: x == 0 ==> y == 0;\nloop invariant i99: y == 0 ==> x < 50;\nloop invariant i100: x == 49 ==> y == 0;\nloop invariant i101: x == 0 ==> y <= 50;\nloop invariant i102: y == -2 ==> x == 99;\nloop invariant i103: x == 50 ==> y == 50;\nloop invariant i104: y == 0 ==> x >= 0;\nloop invariant i105: x == 0 ==> flag == 0;\nloop invariant i106: x == 50 ==> flag == 0;\nloop invariant i107: flag == 0 ==> x == y;\nloop invariant i108: flag == 1 ==> y == -2;\nloop invariant i109: x >= y;\nloop invariant i110: x <= 50;\nloop invariant i111: y >= -2;\nloop invariant i112: y <= 100000;\nloop invariant i113: -1 <= y <= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i130: 0 <= y <= 2;\nloop invariant i131: 0 <= x <= 100;\nloop invariant i132: flag == 0 ==> y == 0;\nloop invariant i133: flag == 0 ==> x == 0;\nloop invariant i134: flag == 1 ==> x == 99;\nloop invariant i135: flag == 0 ==> x == 0 && y == 0;\nloop invariant i136: flag == 1 ==> x == 99 && y == -2;\nloop invariant i137: x <= 50 ==> y <= 2;\nloop invariant i138: x >= 0 ==> y >= 0;\nloop invariant i139: y < 0 ==> flag == 1;\nloop invariant i140: x < 50 ==> y < 2;\nloop invariant i141: x >= 50 ==> y >= 1;\nloop invariant i142: flag < 1 ==> x <= 49;\nloop invariant i143: flag < 1 ==> y <= 1;\nloop invariant i144: flag < 1 ==> y < 2;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    while (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 < y <= 1000000;\nloop invariant x >= -50 + (y - 1) * y / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= LARGE_INT;\nloop invariant (x + y) >= 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y < LARGE_INT;\nloop invariant -1000 < x < LARGE_INT;\nloop invariant x >= (y * (y - 1)) / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y;\nloop invariant x <= -50 + y;\nloop invariant x < 0;\nloop invariant x < 0 ==> (x + y < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant -1000 <= y <= LARGE_INT;\n*/\n```",
                "```\n/*@\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= y * (-LARGE_INT) / 2;\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant y > -1000;\nloop invariant y < LARGE_INT;\nloop invariant x >= -50;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y <= 1000000;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= y && y < LARGE_INT;\nloop invariant x >= (-50 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant x >= y;\nloop invariant x >= -50 + y - 1;\n*/\n```",
                "```\n/*@\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= x <= 1000000;\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
                "```\n/*@\nloop invariant - x <= 0;\nloop invariant 0 <= y < LARGE_INT;\nloop invariant 1000 < y < LARGE_INT ==> x >= 0;\nloop invariant x == -50 ==> y == unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant - x >= -50;\nloop invariant - x < 0;\nloop invariant - -1000 < y && y < LARGE_INT;\nloop invariant - y > 0;\n*/\n```",
                "```\n/*@\nloop invariant ( y > -1000 ) ==> ( x >= -50 );\nloop invariant ( y > 0 ) ==> ( x >= y );\n*/\n```",
                "```\n/*@\nloop invariant -1000 <= y <= LARGE_INT;\nloop invariant 0 <= x;\nloop invariant y > 0 ==> (x >= 0);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 < y <= 1000000;\nloop invariant x >= -50 + (y - 1) * y / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 < y <= 1000000 is preserved but not established.\nloop invariant x >= -50 + (y - 1) * y / 2 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= LARGE_INT;\nloop invariant -50 <= x <= LARGE_INT;\nloop invariant (x + y) >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= LARGE_INT is neither established nor preserved.\nloop invariant -50 <= x <= LARGE_INT is partially proven to be inductive.\nloop invariant (x + y) >= 0 is preserved but not established.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y < LARGE_INT;\nloop invariant -1000 < x < LARGE_INT;\nloop invariant x >= (y * (y - 1)) / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y < LARGE_INT is preserved but not established.\nloop invariant -1000 < x < LARGE_INT is partially proven to be inductive.\nloop invariant x >= (y * (y - 1)) / 2 is preserved but not established.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= y;\nloop invariant x >= -50;\nloop invariant x >= -50 + y;\nloop invariant x <= -50 + y;\nloop invariant x <= -50 + y;\nloop invariant x < 0;\nloop invariant x < 0 ==> (x + y < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= -50 + y is preserved but not established.\nloop invariant x <= -50 + y is partially proven to be inductive.\nloop invariant x < 0 is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0) is preserved but not established.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT) is partially proven to be inductive.\nloop invariant x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\nloop invariant i9: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT);\nloop invariant i10: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0);\nloop invariant i11: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i12: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i13: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i14: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i15: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i16: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i17: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i18: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i19: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i20: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i21: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i22: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= -50;\nloop invariant -1000 <= y <= LARGE_INT;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= -50 is preserved but not established.\nloop invariant -1000 <= y <= LARGE_INT is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant x < 0;\nloop invariant y >= 0;\nloop invariant y < LARGE_INT;\nloop invariant x >= -50;\nloop invariant x >= y * (-LARGE_INT) / 2;\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant x < 0 is established but not preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y < LARGE_INT is partially proven to be inductive.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= y * (-LARGE_INT) / 2 is preserved but not established.\nloop invariant y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant y > -1000;\nloop invariant y < LARGE_INT;\nloop invariant x >= -50;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant y > -1000 is partially proven to be inductive.\nloop invariant y < LARGE_INT is established but not preserved.\nloop invariant x >= -50 is established but not preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: y > -1000;\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= y <= 1000000;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y <= 1000000 is neither established nor preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= y && y < LARGE_INT;\nloop invariant x >= (-50 + (y - 1) * y / 2);\nloop invariant x >= -50;\nloop invariant x >= y;\nloop invariant x >= -50 + y - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= y && y < LARGE_INT is preserved but not established.\nloop invariant x >= (-50 + (y - 1) * y / 2) is preserved but not established.\nloop invariant x >= -50 is partially proven to be inductive.\nloop invariant x >= y is preserved but not established.\nloop invariant x >= -50 + y - 1 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\nloop invariant x < 0;\nloop invariant -1000 < y < 1000000;\nloop invariant x + y == old(x) + old(y);\nloop invariant x >= old(x);\nloop invariant y >= old(y);\nloop invariant y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unbound logic function old. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 1 <= x <= 1000000;\nloop invariant y >= 0;\nloop invariant x >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= x <= 1000000 is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant - x <= 0;\nloop invariant 0 <= y < LARGE_INT;\nloop invariant 1000 < y < LARGE_INT ==> x >= 0;\nloop invariant x == -50 ==> y == unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant - x >= -50;\nloop invariant - x < 0;\nloop invariant - -1000 < y && y < LARGE_INT;\nloop invariant - y > 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant - x >= -50 is partially proven to be inductive.\nloop invariant - x < 0 is preserved but not established.\nloop invariant - -1000 < y && y < LARGE_INT is partially proven to be inductive.\nloop invariant - y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant ( y > -1000 ) ==> ( x >= -50 );\nloop invariant ( y > 0 ) ==> ( x >= y );\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant ( y > -1000 ) ==> ( x >= -50 ) is established but not preserved.\nloop invariant ( y > 0 ) ==> ( x >= y ) is neither established nor preserved.\nAssertion y > 0: Unproven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant -1000 <= y <= LARGE_INT;\nloop invariant 0 <= x;\nloop invariant y > 0 ==> (x >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant -1000 <= y <= LARGE_INT is partially proven to be inductive.\nloop invariant 0 <= x is preserved but not established.\nloop invariant y > 0 ==> (x >= 0) is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 67: unexpected token ')'",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\nloop invariant i1: 0 < y <= 1000000;\nloop invariant i2: x >= -50 + (y - 1) * y / 2;\nloop invariant i3: 0 <= y <= LARGE_INT;\nloop invariant i4: -50 <= x <= LARGE_INT;\nloop invariant i5: (x + y) >= 0;\nloop invariant i6: 0 <= y < LARGE_INT;\nloop invariant i7: -1000 < x < LARGE_INT;\nloop invariant i8: x >= (y * (y - 1)) / 2;\nloop invariant i9: 0 <= y;\nloop invariant i10: x >= -50;\nloop invariant i11: x >= -50 + y;\nloop invariant i12: x <= -50 + y;\nloop invariant i13: x < 0;\nloop invariant i14: x < 0 ==> (x + y < 0);\nloop invariant i15: x < 0 ==> (x + y < 0 ==> y > 0);\nloop invariant i16: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i17: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT);\nloop invariant i18: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0);\nloop invariant i19: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i20: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i21: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i22: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i23: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i24: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i25: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i26: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i27: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i28: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i29: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i30: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i31: 0 <= x <= -50;\nloop invariant i32: -1000 <= y <= LARGE_INT;\nloop invariant i33: y >= 0;\nloop invariant i34: y < LARGE_INT;\nloop invariant i35: x >= y * (-LARGE_INT) / 2;\nloop invariant i36: y > 0;\nloop invariant i37: y > -1000;\nloop invariant i38: 0 <= y <= 1000000;\nloop invariant i39: 0 <= y && y < LARGE_INT;\nloop invariant i40: x >= (-50 + (y - 1) * y / 2);\nloop invariant i41: x >= y;\nloop invariant i42: x >= -50 + y - 1;\nloop invariant i43: -1000 < y < 1000000;\nloop invariant i44: x + y == old(x) + old(y);\nloop invariant i45: x >= old(x);\nloop invariant i46: y >= old(y);\nloop invariant i47: 1 <= x <= 1000000;\nloop invariant i48: x >= 0;\nloop invariant i49: - x <= 0;\nloop invariant i50: 1000 < y < LARGE_INT ==> x >= 0;\nloop invariant i51: x == -50 ==> y == unknown_int();\nloop invariant i52: - x >= -50;\nloop invariant i53: - x < 0;\nloop invariant i54: - -1000 < y && y < LARGE_INT;\nloop invariant i55: - y > 0;\nloop invariant i56: ( y > -1000 ) ==> ( x >= -50 );\nloop invariant i57: ( y > 0 ) ==> ( x >= y );\nloop invariant i58: 0 <= x;\nloop invariant i59: y > 0 ==> (x >= 0);\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "combined_annotation_num_solver_calls": 22,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n#define LARGE_INT 1000000\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT);\nloop invariant i18: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0);\nloop invariant i19: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i20: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i21: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i22: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i23: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i24: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i25: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i26: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i27: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\nloop invariant i28: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0);\nloop invariant i29: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT);\nloop invariant i30: x < 0 ==> (x + y < 0 ==> y > 0 ==> y <= LARGE_INT ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0 ==> y > 0 ==> y <= LARGE_INT ==> x < 0);\n\n\n\n\n\n\nloop invariant i37: y > -1000;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n\n    return 0;\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/code2inv/104.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "success": true,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant (x != n) ==> (n < 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n < 0 ==> (x == n);\nloop invariant n >= 0 ==> (x <= n);\nloop invariant n >= 0 ==> (x >= 0);\nloop invariant x < n ==> (x + 1 <= n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x <= n;\nloop invariant n < 0 ==> (n < 0) ==> (x != n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x < n) ==> (n >= 0);\nloop invariant (x < n) ==> (n < 0);\n*/\n```",
                "```\n/*@\nloop invariant 1 <= n <= x;\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\nloop invariant x >= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x != n) ==> (n < 0);\nloop invariant 0 <= x <= n;\nloop invariant (x != n) ==> (n < 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x + 1) <= n;\nloop invariant (x < n) ==> (x == (x + 1));\nloop invariant (x == n) ==> ((x == n) ==> (n < 0));\nloop invariant (x < n) ==> (x >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x + 1 == n;\nloop invariant x == n - 1;\nloop invariant x == n - 1 ==> (n >= 1);\nloop invariant x == n - 1 ==> (n != 0);\nloop invariant x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant x == n - 1 ==> (n != 0) && (n >= 1);\nloop invariant x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant x == n - 1 ==> (n != 0) && (n >= 1);\nloop invariant x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant x == n - 1 ==> (n != 0) && (n >= 1);\nloop invariant x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant x == n - 1 ==> (n != 0) && (n >= 1);\nloop invariant x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant x == n - 1 ==> (n != 0) && (n >= 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> (n >= 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n || (x < n && x >= 0);\nloop invariant n >= 0;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant (x != n) ==> (n < 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nloop invariant (x != n) ==> (n < 0) is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n < 0 ==> (x == n);\nloop invariant n >= 0 ==> (x <= n);\nloop invariant n >= 0 ==> (x >= 0);\nloop invariant x < n ==> (x + 1 <= n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n < 0 ==> (x == n) is partially proven to be inductive.\nloop invariant n >= 0 ==> (x <= n) is partially proven to be inductive.\nloop invariant n >= 0 ==> (x >= 0) is partially proven to be inductive.\nloop invariant x < n ==> (x + 1 <= n) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: n >= 0 ==> (x <= n);\nloop invariant i4: n >= 0 ==> (x >= 0);\nloop invariant i5: x < n ==> (x + 1 <= n);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 0 ==> x <= n;\nloop invariant n < 0 ==> (n < 0) ==> (x != n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 0 ==> x <= n is partially proven to be inductive.\nloop invariant n < 0 ==> (n < 0) ==> (x != n) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: n >= 0 ==> x <= n;\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": true
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x < n) ==> (n >= 0);\nloop invariant (x < n) ==> (n < 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x < n) ==> (n >= 0) is partially proven to be inductive.\nloop invariant (x < n) ==> (n < 0) is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\nloop invariant i2: (x < n) ==> (n >= 0);\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= n <= x;\nloop invariant 0 <= x <= n;\nloop invariant n >= 0;\nloop invariant x >= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= n <= x is preserved but not established.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant x >= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x != n) ==> (n < 0);\nloop invariant 0 <= x <= n;\nloop invariant (x != n) ==> (n < 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x != n) ==> (n < 0) is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 18: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x + 1) <= n;\nloop invariant (x < n) ==> (x == (x + 1));\nloop invariant (x == n) ==> ((x == n) ==> (n < 0));\nloop invariant (x < n) ==> (x >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x + 1) <= n is preserved but not established.\nloop invariant (x < n) ==> (x == (x + 1)) is preserved but not established.\nloop invariant (x == n) ==> ((x == n) ==> (n < 0)) is partially proven to be inductive.\nloop invariant (x < n) ==> (x >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n\nloop invariant i5: (x < n) ==> (x >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x + 1 == n;\nloop invariant x == n - 1;\nloop invariant x == n - 1 ==> (n >= 1);\nloop invariant x == n - 1 ==> (n != 0);\nloop invariant x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant x == n - 1 ==> (n != 0) && (n >= 1);\nloop invariant x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant x == n - 1 ==> (n != 0) && (n >= 1);\nloop invariant x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant x == n - 1 ==> (n != 0) && (n >= 1);\nloop invariant x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant x == n - 1 ==> (n != 0) && (n >= 1);\nloop invariant x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant x == n - 1 ==> (n != 0) && (n >= 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x + 1 == n is neither established nor preserved.\nloop invariant x == n - 1 is partially proven to be inductive.\nloop invariant x == n - 1 ==> (n >= 1) is partially proven to be inductive.\nloop invariant x == n - 1 ==> (n != 0) is partially proven to be inductive.\nloop invariant x == n - 1 ==> (n >= 1) && (n != 0) is partially proven to be inductive.\nloop invariant x == n - 1 ==> (n != 0) && (n >= 1) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n ==> (n >= 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n ==> (n >= 0) is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x == n || (x < n && x >= 0);\nloop invariant n >= 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x == n || (x < n && x >= 0) is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nAssertion n < 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 34: unbound logic variable i1. Ignoring loop annotation",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: x == n;\nloop invariant i3: 0 <= x;\nloop invariant i4: x <= n;\nloop invariant i5: (x != n) ==> (n < 0);\nloop invariant i6: n < 0 ==> (x == n);\nloop invariant i7: n >= 0 ==> (x <= n);\nloop invariant i8: n >= 0 ==> (x >= 0);\nloop invariant i9: x < n ==> (x + 1 <= n);\nloop invariant i10: n >= 0 ==> x <= n;\nloop invariant i11: n < 0 ==> (n < 0) ==> (x != n);\nloop invariant i12: (x < n) ==> (n >= 0);\nloop invariant i13: (x < n) ==> (n < 0);\nloop invariant i14: 1 <= n <= x;\nloop invariant i15: n >= 0;\nloop invariant i16: x >= n;\nloop invariant i17: i1;\nloop invariant i18: i2;\nloop invariant i19: (x + 1) <= n;\nloop invariant i20: (x < n) ==> (x == (x + 1));\nloop invariant i21: (x == n) ==> ((x == n) ==> (n < 0));\nloop invariant i22: (x < n) ==> (x >= 0);\nloop invariant i23: x + 1 == n;\nloop invariant i24: x == n - 1;\nloop invariant i25: x == n - 1 ==> (n >= 1);\nloop invariant i26: x == n - 1 ==> (n != 0);\nloop invariant i27: x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant i28: x == n - 1 ==> (n != 0) && (n >= 1);\nloop invariant i29: x == n ==> (n >= 0);\nloop invariant i30: x == n || (x < n && x >= 0);\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 9,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: 0 <= x;\n\n\n\nloop invariant i7: n >= 0 ==> (x <= n);\nloop invariant i8: n >= 0 ==> (x >= 0);\nloop invariant i9: x < n ==> (x + 1 <= n);\nloop invariant i10: n >= 0 ==> x <= n;\nloop invariant i11: n < 0 ==> (n < 0) ==> (x != n);\nloop invariant i12: (x < n) ==> (n >= 0);\n\n\n\n\n\n\n\n\n\nloop invariant i22: (x < n) ==> (x >= 0);\n\n\nloop invariant i25: x == n - 1 ==> (n >= 1);\nloop invariant i26: x == n - 1 ==> (n != 0);\nloop invariant i27: x == n - 1 ==> (n >= 1) && (n != 0);\nloop invariant i28: x == n - 1 ==> (n != 0) && (n >= 1);\nloop invariant i29: x == n ==> (n >= 0);\n\n*/\nwhile ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "checker_output_after_prune": true
        },
        {
            "file": "../dataset/loop_invariants/code2inv/110.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn == i - 1 ==> sn == n;\nloop invariant sn != n ==> sn <= i - 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n <= sn <= n * (n + 1) / 2;\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn != n) ==> (i <= n);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 1;\nloop invariant sn <= n;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant i == (n - sn + 1);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
                "```\n/*@\nloop invariant i >= 1 && i <= n+1;\nloop invariant sn >= 0 && sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                "```\n/*@\n\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 0;\nloop invariant 0 <= sn <= n;\nloop invariant i == (1 + sn);\nloop invariant i == n + 1;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\n*/\n```",
                "```\n/*@\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i <= n ==> sn <= n;\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - (n - i + 1));\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n+1;\nloop invariant sn == (i - 1);\nloop invariant i - 1 == sn;\nloop invariant i - 1 <= n;\nloop invariant sn <= n;\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is established but not preserved.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\nloop invariant 0 <= i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn == i - 1 ==> sn == n;\nloop invariant sn != n ==> sn <= i - 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn == i - 1 ==> sn == n is preserved but not established.\nloop invariant sn != n ==> sn <= i - 2 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i >= 1;\nloop invariant i4: sn >= 0;\nloop invariant i5: sn <= i - 1;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n <= sn <= n * (n + 1) / 2;\nloop invariant (sn == n) ==> (i == n + 1);\nloop invariant (sn != n) ==> (i <= n);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant n <= sn <= n * (n + 1) / 2 is preserved but not established.\nloop invariant (sn == n) ==> (i == n + 1) is partially proven to be inductive.\nloop invariant (sn != n) ==> (i <= n) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 1;\nloop invariant sn <= n;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= 1 is preserved but not established.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant i == (n - sn + 1);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == (n - sn + 1) is preserved but not established.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant i >= 1 && i <= n+1;\nloop invariant sn >= 0 && sn <= n;\nloop invariant sn == i - 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant i >= 1 && i <= n+1 is preserved but not established.\nloop invariant sn >= 0 && sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 1,
                    "annotations": "```\n/*@\n\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 17: unexpected token ''",
                    "houdini_error": "No annotations found"
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 0;\nloop invariant 0 <= sn <= n;\nloop invariant i == (1 + sn);\nloop invariant i == n + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i == (1 + sn) is partially proven to be inductive.\nloop invariant i == n + 1 is preserved but not established.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: i == (1 + sn);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 2,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is established but not preserved.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant sn == i - 1;\nloop invariant i >= 1;\nloop invariant i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i == n + 1 ==> sn == n;\nloop invariant i <= n ==> sn <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i == n + 1 ==> sn == n is partially proven to be inductive.\nloop invariant i <= n ==> sn <= n is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: sn == i - 1;\nloop invariant i2: i >= 1;\n\nloop invariant i4: sn >= 0;\n\nloop invariant i6: i == n + 1 ==> sn == n;\nloop invariant i7: i <= n ==> sn <= n;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - (n - i + 1));\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn == (n - (n - i + 1)) is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: sn == (n - (n - i + 1));\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant 1 <= i <= n+1;\nloop invariant sn == (i - 1);\nloop invariant i - 1 == sn;\nloop invariant i - 1 <= n;\nloop invariant sn <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= n is preserved but not established.\nloop invariant 1 <= i <= n+1 is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i - 1 == sn is partially proven to be inductive.\nloop invariant i - 1 <= n is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == (i - 1);\nloop invariant i4: i - 1 == sn;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn == i - 1 ==> sn == n is preserved but not established.\nloop invariant sn != n ==> sn <= i - 2 is partially proven to be inductive.\nloop invariant n <= sn <= n * (n + 1) / 2 is partially proven to be inductive.\nloop invariant (sn == n) ==> (i == n + 1) is partially proven to be inductive.\nloop invariant (sn != n) ==> (i <= n) is partially proven to be inductive.\nloop invariant sn >= 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant (i - 1) * i / 2 <= sn <= (i - 1) * i / 2 is partially proven to be inductive.\nloop invariant 1 <= i <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == (n - sn + 1) is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant i >= 1 && i <= n+1 is partially proven to be inductive.\nloop invariant sn >= 0 && sn <= n is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant i == (1 + sn) is partially proven to be inductive.\nloop invariant i == n + 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant i == n + 1 ==> sn == n is partially proven to be inductive.\nloop invariant i <= n ==> sn <= n is partially proven to be inductive.\nloop invariant sn == (n - (n - i + 1)) is partially proven to be inductive.\nloop invariant 1 <= i <= n+1 is partially proven to be inductive.\nloop invariant i - 1 == sn is partially proven to be inductive.\nloop invariant i - 1 <= n is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= sn <= n;\nloop invariant i3: sn == i - 1;\nloop invariant i4: i <= n;\nloop invariant i5: i >= 1;\nloop invariant i6: sn >= 0;\nloop invariant i7: sn <= i - 1;\nloop invariant i8: sn == i - 1 ==> sn == n;\nloop invariant i9: sn != n ==> sn <= i - 2;\nloop invariant i10: n <= sn <= n * (n + 1) / 2;\nloop invariant i11: (sn == n) ==> (i == n + 1);\nloop invariant i12: (sn != n) ==> (i <= n);\nloop invariant i13: sn >= 1;\nloop invariant i14: sn <= n;\nloop invariant i15: (i - 1) * i / 2 <= sn <= (i - 1) * i / 2;\nloop invariant i16: 1 <= i <= n;\nloop invariant i17: sn == (i - 1);\nloop invariant i18: i == (n - sn + 1);\nloop invariant i19: i == sn + 1;\nloop invariant i20: i >= 1 && i <= n+1;\nloop invariant i21: sn >= 0 && sn <= n;\nloop invariant i22: n >= 0;\nloop invariant i23: i == (1 + sn);\nloop invariant i24: i == n + 1;\nloop invariant i25: i <= n + 1;\nloop invariant i26: i == n + 1 ==> sn == n;\nloop invariant i27: i <= n ==> sn <= n;\nloop invariant i28: sn == (n - (n - i + 1));\nloop invariant i29: 1 <= i <= n+1;\nloop invariant i30: i - 1 == sn;\nloop invariant i31: i - 1 <= n;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "combined_annotation_num_solver_calls": 12,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\nloop invariant i5: i >= 1;\nloop invariant i6: sn >= 0;\nloop invariant i7: sn <= i - 1;\n\n\n\nloop invariant i11: (sn == n) ==> (i == n + 1);\n\n\n\n\n\nloop invariant i17: sn == (i - 1);\n\nloop invariant i19: i == sn + 1;\n\n\n\nloop invariant i23: i == (1 + sn);\n\n\nloop invariant i26: i == n + 1 ==> sn == n;\nloop invariant i27: i <= n ==> sn <= n;\nloop invariant i28: sn == (n - (n - i + 1));\n\nloop invariant i30: i - 1 == sn;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "checker_output_after_prune": false
        },
        {
            "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "success": false,
            "annotation_blocks": [
                "```\n/*@\nloop invariant 1 <= a;\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= a * n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == (a * i);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = i * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n * a ==> i == n;\nloop invariant i == 0 ==> sn == 0;\nloop invariant i == n ==> sn == n * a;\nloop invariant sn == i * a ==> v1 == unknown_int();\nloop invariant sn == i * a ==> v2 == unknown_int();\nloop invariant sn == i * a ==> v3 == unknown_int();\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> 0 <= sn <= n * a;\nloop invariant sn == i * a ==> 0 <= v1 <= INT_MAX;\nloop invariant sn == i * a ==> 0 <= v2 <= INT_MAX;\nloop invariant sn == i * a ==> 0 <= v3 <= INT_MAX;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= a*n;\nloop invariant i >= 1;\nloop invariant i <= n;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= sn <= n*a;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == (n*a) ==> v1+v2+v3 <= n*a;\nloop invariant sn == 0 ==> v1+v2+v3 >= 0;\nloop invariant sn == (n*a) ==> v1+v2+v3 >= t;\nloop invariant sn == 0 ==> v1+v2+v3 <= t;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n*a;\nloop invariant 1 <= i <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == i*a - a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant i == unknown_int() || i == 1;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == 0;\nloop invariant sn == unknown_int() || sn == n*a;\nloop invariant v1 == unknown_int() || v1 == 1;\nloop invariant v2 == unknown_int() || v2 == 1;\nloop invariant v3 == unknown_int() || v3 == 1;\nloop invariant i == unknown_int() || i == n;\nloop invariant sn == unknown_int() || sn == n*a - a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+1;\nloop invariant sn == unknown_int() || sn == n*a;\nloop invariant v1 == unknown_int() || v1 == 1;\nloop invariant v2 == unknown_int() || v2 == 1;\nloop invariant v3 == unknown_int() || v3 == 1;\nloop invariant i == unknown_int() || i == -1;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+2;\nloop invariant sn == unknown_int() || sn == n*a - a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -2;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+3;\nloop invariant sn == unknown_int() || sn == n*a - 2*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -3;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+4;\nloop invariant sn == unknown_int() || sn == n*a - 3*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -4;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+5;\nloop invariant sn == unknown_int() || sn == n*a - 4*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -5;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= a <= 1;\nloop invariant sn + a = sn + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn == i*a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant sn >= 0;\nloop invariant sn == n * a;\nloop invariant sn == 0;\nloop invariant sn == (n * a) || sn == 0;\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant v1 == 0 && v2 == 0 && v3 == 0;\nloop invariant i%2 == 0 && sn%2 == 0;\n*/\n```",
                "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\n*/\n```",
                "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n * a ==> i == n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == i * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == n * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == i;\nloop invariant a == 1 ==> sn == 0 ==> i == 0;\nloop invariant a == 1 ==> sn == n ==> i == n;\nloop invariant a == 1 ==> sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n ==> i == n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\n*/\n```",
                "```\n/*@\nloop invariant i = n;\nloop invariant sn = n*a;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant i == n;\nloop invariant sn == n*a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant a == 1;\nloop invariant sn == i * a ==> (sn == n * a || sn == 0);\nloop invariant i * a == n * a ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a ==> (sn == n * a || sn == 0);\nloop invariant sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\n*/\n```"
            ],
            "completions": [
                {
                    "num_solver_calls": 4,
                    "annotations": "```\n/*@\nloop invariant 1 <= a;\nloop invariant 0 <= n;\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= a * n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == (a * i);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 1 <= a is partially proven to be inductive.\nloop invariant 0 <= n is preserved but not established.\nloop invariant 0 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= a * n is partially proven to be inductive.\nloop invariant 0 <= v1 is preserved but not established.\nloop invariant 0 <= v2 is preserved but not established.\nloop invariant 0 <= v3 is preserved but not established.\nloop invariant sn == (a * i) is preserved but not established.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 1 <= a;\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn = i * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant 0 <= sn <= n * a;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n * a ==> i == n;\nloop invariant i == 0 ==> sn == 0;\nloop invariant i == n ==> sn == n * a;\nloop invariant sn == i * a ==> v1 == unknown_int();\nloop invariant sn == i * a ==> v2 == unknown_int();\nloop invariant sn == i * a ==> v3 == unknown_int();\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> 0 <= sn <= n * a;\nloop invariant sn == i * a ==> 0 <= v1 <= INT_MAX;\nloop invariant sn == i * a ==> 0 <= v2 <= INT_MAX;\nloop invariant sn == i * a ==> 0 <= v3 <= INT_MAX;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\nloop invariant sn == i * a ==> sn == i * a;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i14: sn == i * a ==> sn == i * a;\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 159,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= a*n;\nloop invariant i >= 1;\nloop invariant i <= n;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= a*n is neither established nor preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is neither established nor preserved.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: i >= 1;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 6,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 1 <= sn <= n*a;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == (n*a) ==> v1+v2+v3 <= n*a;\nloop invariant sn == 0 ==> v1+v2+v3 >= 0;\nloop invariant sn == (n*a) ==> v1+v2+v3 >= t;\nloop invariant sn == 0 ==> v1+v2+v3 <= t;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 21: unbound logic variable t. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 31,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n*a;\nloop invariant 1 <= i <= n;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn == i*a - a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant i == unknown_int() || i == 1;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == 0;\nloop invariant sn == unknown_int() || sn == n*a;\nloop invariant v1 == unknown_int() || v1 == 1;\nloop invariant v2 == unknown_int() || v2 == 1;\nloop invariant v3 == unknown_int() || v3 == 1;\nloop invariant i == unknown_int() || i == n;\nloop invariant sn == unknown_int() || sn == n*a - a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+1;\nloop invariant sn == unknown_int() || sn == n*a;\nloop invariant v1 == unknown_int() || v1 == 1;\nloop invariant v2 == unknown_int() || v2 == 1;\nloop invariant v3 == unknown_int() || v3 == 1;\nloop invariant i == unknown_int() || i == -1;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+2;\nloop invariant sn == unknown_int() || sn == n*a - a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -2;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+3;\nloop invariant sn == unknown_int() || sn == n*a - 2*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -3;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+4;\nloop invariant sn == unknown_int() || sn == n*a - 3*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -4;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == n+5;\nloop invariant sn == unknown_int() || sn == n*a - 4*a;\nloop invariant v1 == unknown_int() || v1 == 0;\nloop invariant v2 == unknown_int() || v2 == 0;\nloop invariant v3 == unknown_int() || v3 == 0;\nloop invariant i == unknown_int() || i == -5;\nloop invariant sn == unknown_int() || sn == 0;\nloop invariant v1 == unknown_int() || v1 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 20: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\nloop invariant i6: sn == i*a - a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n*a;\nloop invariant 0 <= a <= 1;\nloop invariant sn + a = sn + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\nloop invariant sn + a = n*a + 1;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: 0 <= a <= 1;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 7,
                    "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n*a;\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn == i*a;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 31: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: v1 >= INT_MIN;\nloop invariant i6: v1 <= INT_MAX;\nloop invariant i7: v2 >= INT_MIN;\nloop invariant i8: v2 <= INT_MAX;\nloop invariant i9: v3 >= INT_MIN;\nloop invariant i10: v3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 0 <= sn <= n * a;\nloop invariant sn >= 0;\nloop invariant sn == n * a;\nloop invariant sn == 0;\nloop invariant sn == (n * a) || sn == 0;\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= sn <= n * a is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == n * a is preserved but not established.\nloop invariant sn == 0 is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nloop invariant sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\nloop invariant i6: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i7: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i8: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i9: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i10: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i11: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i12: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i13: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i14: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i15: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 3,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant v1 == 0 && v2 == 0 && v3 == 0;\nloop invariant i%2 == 0 && sn%2 == 0;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nloop invariant v1 == 0 && v2 == 0 && v3 == 0 is partially proven to be inductive.\nloop invariant i%2 == 0 && sn%2 == 0 is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 111,
                    "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 9,
                    "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i * a;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n * a ==> i == n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == i * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == n * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == i;\nloop invariant a == 1 ==> sn == 0 ==> i == 0;\nloop invariant a == 1 ==> sn == n ==> i == n;\nloop invariant a == 1 ==> sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant a == 1 ==> sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant sn == 0 ==> i == 0;\nloop invariant sn == n ==> i == n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i * a is preserved but not established.\nloop invariant sn == 0 ==> i == 0 is partially proven to be inductive.\nloop invariant sn == n * a ==> i == n is partially proven to be inductive.\nloop invariant 0 <= v1 is partially proven to be inductive.\nloop invariant 0 <= v2 is partially proven to be inductive.\nloop invariant 0 <= v3 is partially proven to be inductive.\nloop invariant sn == i * a ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant sn == n * a ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant a == 1 ==> sn == i is partially proven to be inductive.\nloop invariant a == 1 ==> sn == 0 ==> i == 0 is partially proven to be inductive.\nloop invariant a == 1 ==> sn == n ==> i == n is partially proven to be inductive.\nloop invariant a == 1 ==> sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant a == 1 ==> sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant a == 1 ==> sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant sn == i is partially proven to be inductive.\nloop invariant sn == n ==> i == n is partially proven to be inductive.\nloop invariant sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nloop invariant sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0) is partially proven to be inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 10,
                    "annotations": "```\n/*@\nloop invariant i = n;\nloop invariant sn = n*a;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant i == n;\nloop invariant sn == n*a;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                },
                {
                    "num_solver_calls": 5,
                    "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn == i * a;\nloop invariant 0 <= v1 <= INT_MAX;\nloop invariant 0 <= v2 <= INT_MAX;\nloop invariant 0 <= v3 <= INT_MAX;\nloop invariant v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant a == 1;\nloop invariant sn == i * a ==> (sn == n * a || sn == 0);\nloop invariant i * a == n * a ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a ==> (sn == n * a || sn == 0);\nloop invariant sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\n*/\n```",
                    "checker_output_for_annotations": false,
                    "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                    "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\n\n\n\n\n\n\nloop invariant i7: a == 1;\n\n\nloop invariant i10: sn == n * a ==> (sn == n * a || sn == 0);\nloop invariant i11: sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i12: sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
                    "checker_output_after_prune": false
                }
            ],
            "checker_output_for_combined_annotations": false,
            "checker_message_for_combined_annotations": "Annotation error on line 22: Assignment operators not allowed in annotations.",
            "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 1 <= a;\nloop invariant i2: 0 <= n;\nloop invariant i3: 0 <= i <= n;\nloop invariant i4: 0 <= sn <= a * n;\nloop invariant i5: 0 <= v1;\nloop invariant i6: 0 <= v2;\nloop invariant i7: 0 <= v3;\nloop invariant i8: sn == (a * i);\nloop invariant i9: sn = i * a;\nloop invariant i10: 0 <= v1 <= INT_MAX;\nloop invariant i11: 0 <= v2 <= INT_MAX;\nloop invariant i12: 0 <= v3 <= INT_MAX;\nloop invariant i13: 0 <= sn <= n * a;\nloop invariant i14: sn == 0 ==> i == 0;\nloop invariant i15: sn == n * a ==> i == n;\nloop invariant i16: i == 0 ==> sn == 0;\nloop invariant i17: i == n ==> sn == n * a;\nloop invariant i18: sn == i * a ==> v1 == unknown_int();\nloop invariant i19: sn == i * a ==> v2 == unknown_int();\nloop invariant i20: sn == i * a ==> v3 == unknown_int();\nloop invariant i21: sn == i * a ==> sn == i * a;\nloop invariant i22: sn == i * a ==> 0 <= sn <= n * a;\nloop invariant i23: sn == i * a ==> 0 <= v1 <= INT_MAX;\nloop invariant i24: sn == i * a ==> 0 <= v2 <= INT_MAX;\nloop invariant i25: sn == i * a ==> 0 <= v3 <= INT_MAX;\nloop invariant i26: i1;\nloop invariant i27: i2;\nloop invariant i28: i3;\nloop invariant i29: i4;\nloop invariant i30: i5;\nloop invariant i31: i6;\nloop invariant i32: i7;\nloop invariant i33: i8;\nloop invariant i34: i9;\nloop invariant i35: i10;\nloop invariant i36: i11;\nloop invariant i37: i12;\nloop invariant i38: i13;\nloop invariant i39: i14;\nloop invariant i40: i15;\nloop invariant i41: i16;\nloop invariant i42: i17;\nloop invariant i43: i18;\nloop invariant i44: i19;\nloop invariant i45: i20;\nloop invariant i46: i21;\nloop invariant i47: i22;\nloop invariant i48: i23;\nloop invariant i49: i24;\nloop invariant i50: i25;\nloop invariant i51: i26;\nloop invariant i52: i27;\nloop invariant i53: i28;\nloop invariant i54: i29;\nloop invariant i55: i30;\nloop invariant i56: i31;\nloop invariant i57: i32;\nloop invariant i58: i33;\nloop invariant i59: i34;\nloop invariant i60: i35;\nloop invariant i61: i36;\nloop invariant i62: i37;\nloop invariant i63: i38;\nloop invariant i64: i39;\nloop invariant i65: i40;\nloop invariant i66: i41;\nloop invariant i67: i42;\nloop invariant i68: i43;\nloop invariant i69: i44;\nloop invariant i70: i45;\nloop invariant i71: i46;\nloop invariant i72: i47;\nloop invariant i73: i48;\nloop invariant i74: i49;\nloop invariant i75: i50;\nloop invariant i76: i51;\nloop invariant i77: i52;\nloop invariant i78: i53;\nloop invariant i79: i54;\nloop invariant i80: i55;\nloop invariant i81: i56;\nloop invariant i82: i57;\nloop invariant i83: i58;\nloop invariant i84: i59;\nloop invariant i85: i60;\nloop invariant i86: i61;\nloop invariant i87: i62;\nloop invariant i88: i63;\nloop invariant i89: i64;\nloop invariant i90: i65;\nloop invariant i91: i66;\nloop invariant i92: i67;\nloop invariant i93: i68;\nloop invariant i94: i69;\nloop invariant i95: i70;\nloop invariant i96: i71;\nloop invariant i97: i72;\nloop invariant i98: i73;\nloop invariant i99: i74;\nloop invariant i100: i75;\nloop invariant i101: i76;\nloop invariant i102: i77;\nloop invariant i103: i78;\nloop invariant i104: i79;\nloop invariant i105: i80;\nloop invariant i106: i81;\nloop invariant i107: i82;\nloop invariant i108: i83;\nloop invariant i109: i84;\nloop invariant i110: i85;\nloop invariant i111: i86;\nloop invariant i112: i87;\nloop invariant i113: i88;\nloop invariant i114: i89;\nloop invariant i115: i90;\nloop invariant i116: i91;\nloop invariant i117: i92;\nloop invariant i118: i93;\nloop invariant i119: i94;\nloop invariant i120: i95;\nloop invariant i121: i96;\nloop invariant i122: i97;\nloop invariant i123: i98;\nloop invariant i124: i99;\nloop invariant i125: i100;\nloop invariant i126: i101;\nloop invariant i127: i102;\nloop invariant i128: i103;\nloop invariant i129: i104;\nloop invariant i130: i105;\nloop invariant i131: i106;\nloop invariant i132: i107;\nloop invariant i133: i108;\nloop invariant i134: i109;\nloop invariant i135: i110;\nloop invariant i136: i111;\nloop invariant i137: i112;\nloop invariant i138: i113;\nloop invariant i139: i114;\nloop invariant i140: i115;\nloop invariant i141: i116;\nloop invariant i142: i117;\nloop invariant i143: i118;\nloop invariant i144: i119;\nloop invariant i145: i120;\nloop invariant i146: i121;\nloop invariant i147: i122;\nloop invariant i148: i123;\nloop invariant i149: i124;\nloop invariant i150: i125;\nloop invariant i151: i126;\nloop invariant i152: i127;\nloop invariant i153: i128;\nloop invariant i154: i129;\nloop invariant i155: i130;\nloop invariant i156: i131;\nloop invariant i157: i132;\nloop invariant i158: i133;\nloop invariant i159: i134;\nloop invariant i160: i135;\nloop invariant i161: i136;\nloop invariant i162: i137;\nloop invariant i163: i138;\nloop invariant i164: i139;\nloop invariant i165: i140;\nloop invariant i166: i141;\nloop invariant i167: i142;\nloop invariant i168: i143;\nloop invariant i169: i144;\nloop invariant i170: i145;\nloop invariant i171: i146;\nloop invariant i172: i147;\nloop invariant i173: i148;\nloop invariant i174: i149;\nloop invariant i175: i150;\nloop invariant i176: i151;\nloop invariant i177: i152;\nloop invariant i178: i153;\nloop invariant i179: i154;\nloop invariant i180: i155;\nloop invariant i181: i156;\nloop invariant i182: i157;\nloop invariant i183: i158;\nloop invariant i184: 0 <= sn <= a*n;\nloop invariant i185: i >= 1;\nloop invariant i186: i <= n;\nloop invariant i187: 1 <= sn <= n*a;\nloop invariant i188: 0 <= v1 <= 1;\nloop invariant i189: 0 <= v2 <= 1;\nloop invariant i190: 0 <= v3 <= 1;\nloop invariant i191: sn == (n*a) ==> v1+v2+v3 <= n*a;\nloop invariant i192: sn == 0 ==> v1+v2+v3 >= 0;\nloop invariant i193: sn == (n*a) ==> v1+v2+v3 >= t;\nloop invariant i194: sn == 0 ==> v1+v2+v3 <= t;\nloop invariant i195: 0 <= sn <= n*a;\nloop invariant i196: 1 <= i <= n;\nloop invariant i197: sn == i*a - a;\nloop invariant i198: v1 == unknown_int();\nloop invariant i199: v2 == unknown_int();\nloop invariant i200: v3 == unknown_int();\nloop invariant i201: i == unknown_int() || i == 1;\nloop invariant i202: sn == unknown_int() || sn == 0;\nloop invariant i203: v1 == unknown_int() || v1 == 0;\nloop invariant i204: v2 == unknown_int() || v2 == 0;\nloop invariant i205: v3 == unknown_int() || v3 == 0;\nloop invariant i206: i == unknown_int() || i == 0;\nloop invariant i207: sn == unknown_int() || sn == n*a;\nloop invariant i208: v1 == unknown_int() || v1 == 1;\nloop invariant i209: v2 == unknown_int() || v2 == 1;\nloop invariant i210: v3 == unknown_int() || v3 == 1;\nloop invariant i211: i == unknown_int() || i == n;\nloop invariant i212: sn == unknown_int() || sn == n*a - a;\nloop invariant i213: i == unknown_int() || i == n+1;\nloop invariant i214: i == unknown_int() || i == -1;\nloop invariant i215: i == unknown_int() || i == n+2;\nloop invariant i216: i == unknown_int() || i == -2;\nloop invariant i217: i == unknown_int() || i == n+3;\nloop invariant i218: sn == unknown_int() || sn == n*a - 2*a;\nloop invariant i219: i == unknown_int() || i == -3;\nloop invariant i220: i == unknown_int() || i == n+4;\nloop invariant i221: sn == unknown_int() || sn == n*a - 3*a;\nloop invariant i222: i == unknown_int() || i == -4;\nloop invariant i223: i == unknown_int() || i == n+5;\nloop invariant i224: sn == unknown_int() || sn == n*a - 4*a;\nloop invariant i225: i == unknown_int() || i == -5;\nloop invariant i226: 0 <= a <= 1;\nloop invariant i227: sn + a = sn + 1;\nloop invariant i228: sn + a = n*a + 1;\nloop invariant i229: 0 <= y <= 100000;\nloop invariant i230: x >= (1 + (y - 1) * y / 2);\nloop invariant i231: sn >= 0;\nloop invariant i232: sn <= n*a;\nloop invariant i233: v1 >= INT_MIN;\nloop invariant i234: v1 <= INT_MAX;\nloop invariant i235: v2 >= INT_MIN;\nloop invariant i236: v2 <= INT_MAX;\nloop invariant i237: v3 >= INT_MIN;\nloop invariant i238: v3 <= INT_MAX;\nloop invariant i239: sn == i*a;\nloop invariant i240: v1 >= 0;\nloop invariant i241: v2 >= 0;\nloop invariant i242: v3 >= 0;\nloop invariant i243: v1 <= 1;\nloop invariant i244: v2 <= 1;\nloop invariant i245: v3 <= 1;\nloop invariant i246: sn == n * a;\nloop invariant i247: sn == 0;\nloop invariant i248: sn == (n * a) || sn == 0;\nloop invariant i249: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i250: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i251: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i252: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i253: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i254: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i255: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i256: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i257: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i258: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i259: sn == i * a;\nloop invariant i260: v1 == 0 && v2 == 0 && v3 == 0;\nloop invariant i261: i%2 == 0 && sn%2 == 0;\nloop invariant i262: sn == i * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i263: sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i264: sn == n * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i265: a == 1 ==> sn == i;\nloop invariant i266: a == 1 ==> sn == 0 ==> i == 0;\nloop invariant i267: a == 1 ==> sn == n ==> i == n;\nloop invariant i268: a == 1 ==> sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i269: a == 1 ==> sn == 0 ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i270: a == 1 ==> sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i271: sn == i;\nloop invariant i272: sn == n ==> i == n;\nloop invariant i273: sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i274: sn == n ==> (v1 == 0 && v2 == 0 && v3 == 0);\nloop invariant i275: i = n;\nloop invariant i276: sn = n*a;\nloop invariant i277: v1 = unknown_int();\nloop invariant i278: v2 = unknown_int();\nloop invariant i279: v3 = unknown_int();\nloop invariant i280: i == n;\nloop invariant i281: sn == n*a;\nloop invariant i282: v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i283: a == 1;\nloop invariant i284: sn == i * a ==> (sn == n * a || sn == 0);\nloop invariant i285: i * a == n * a ==> (sn == n * a || sn == 0);\nloop invariant i286: sn == n * a ==> (sn == n * a || sn == 0);\nloop invariant i287: sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i288: sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "combined_annotation_num_solver_calls": 218,
            "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  /*@\nloop invariant i1: 1 <= a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i16: i == 0 ==> sn == 0;\n\n\n\n\nloop invariant i21: sn == i * a ==> sn == i * a;\nloop invariant i22: sn == i * a ==> 0 <= sn <= n * a;\nloop invariant i23: sn == i * a ==> 0 <= v1 <= INT_MAX;\nloop invariant i24: sn == i * a ==> 0 <= v2 <= INT_MAX;\nloop invariant i25: sn == i * a ==> 0 <= v3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i185: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i197: sn == i*a - a;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i226: 0 <= a <= 1;\n\n\n\n\nloop invariant i231: sn >= 0;\n\nloop invariant i233: v1 >= INT_MIN;\nloop invariant i234: v1 <= INT_MAX;\nloop invariant i235: v2 >= INT_MIN;\nloop invariant i236: v2 <= INT_MAX;\nloop invariant i237: v3 >= INT_MIN;\nloop invariant i238: v3 <= INT_MAX;\n\n\n\n\n\n\n\n\n\n\nloop invariant i249: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i250: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i251: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i252: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i253: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i254: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i255: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i256: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i257: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\nloop invariant i258: sn == (n * a) || sn == 0 ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0) ==> (sn == n * a || sn == 0);\n\n\n\nloop invariant i262: sn == i * a ==> (v1 == 0 && v2 == 0 && v3 == 0);\n\n\n\n\n\nloop invariant i268: a == 1 ==> sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\n\n\n\n\nloop invariant i273: sn == i ==> (v1 == 0 && v2 == 0 && v3 == 0);\n\n\n\n\n\n\n\n\n\nloop invariant i283: a == 1;\nloop invariant i284: sn == i * a ==> (sn == n * a || sn == 0);\n\nloop invariant i286: sn == n * a ==> (sn == n * a || sn == 0);\nloop invariant i287: sn == 0 ==> (sn == n * a || sn == 0);\nloop invariant i288: sn == n * a || sn == 0 ==> (sn == n * a || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n\n}",
            "checker_output_after_prune": false
        }
    ],
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
            "../dataset/loop_invariants/code2inv/104.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
            "../dataset/loop_invariants/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../dataset/loop_invariants/code2inv/110.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c"
        ],
        "skipped": [],
        "total": 20,
        "success_count": 5,
        "failure_count": 15,
        "success_rate": 0.25
    }
}