{
    "logs": {
        "file": "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= sn;\nloop invariant 0 <= x;\nloop invariant sn <= x * a;\nloop invariant x <= sn / a;\nloop invariant sn <= x * a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant sn == sn + (a * x);\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= (a * x);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant sn == x * a || sn == 0 ==> x == loop1 + n1;\nloop invariant 0 <= sn <= x * a;\nloop invariant sn == x * a || sn == 0 ==> x == loop1 + n1;\n*/\n```",
            "```\n/*@\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant sn == 0 => x == 0;\nloop invariant sn > 0 => x > 0;\nloop invariant sn == x * a => x == sn / a;\n*/\n```",
            "```\n/*@\nloop invariant sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant sn <= x*a;\nloop invariant sn >= 0;\nloop invariant sn <= x*a;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == x*a || sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= (n1 + 1) * a;\nloop invariant 0 <= x <= n1;\nloop invariant x == sn / a;\nloop invariant sn <= (n1 + 1) * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= (n1 + loop1) * a;\nloop invariant 0 <= x <= (n1 + loop1);\nloop invariant n1 + loop1 >= 0;\nloop invariant loop1 >= 0;\nloop invariant x == sn / a;\nloop invariant sn <= n1 * a || sn == 0;\nloop invariant sn <= loop1 * a;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant 0 <= x <= sn/a;\nloop invariant sn == x*a || sn == 0 ==> x == 0 || x == 1;\n*/\n```",
            "```\n/*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant sn == x*a || sn == 0;\nloop invariant x <= loop1 || x <= n1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= 2*x;\nloop invariant sn == x*a || sn == 0;\nloop invariant x >= 0;\nloop invariant sn <= 2*unsigned_int_max;\nloop invariant sn >= 0;\nloop invariant sn == x*2;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n1;\nloop invariant sn == x*a;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn != 0 ==> x != 0;\nloop invariant sn == 0 ==> a == 2;\nloop invariant sn != 0 ==> a != 2;\nloop invariant sn == 0 ==> n1 == 0;\nloop invariant sn != 0 ==> n1 != 0;\nloop invariant sn == 0 ==> loop1 == 0;\nloop invariant sn != 0 ==> loop1 != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn != 0 ==> x != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant ( ( n1 > loop1) ==> (x <= loop1) && (x >= 0));\nloop invariant ( ( n1 <= loop1) ==> (x <= n1) && (x >= 0));\n*/\n```",
            "```\n/*@\nloop invariant 0 < sn; loop invariant sn <= (sn + a); loop invariant 1 <= x; loop invariant x < 2147483648; loop invariant x <= sn / a; loop invariant sn == x * a;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sn;\nloop invariant 0 <= x;\nloop invariant sn <= x * a;\nloop invariant x <= sn / a;\nloop invariant sn <= x * a || sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn is partially proven to be inductive.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant sn <= x * a is partially proven to be inductive.\nloop invariant x <= sn / a is established but not preserved.\nloop invariant sn <= x * a || sn == 0 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn;\nloop invariant i2: 0 <= x;\nloop invariant i3: sn <= x * a;\n\nloop invariant i5: sn <= x * a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant sn == sn + (a * x);\nloop invariant x >= 0;\nloop invariant sn >= 0;\nloop invariant sn <= (a * x);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == sn + (a * x) is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= (a * x) is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= (a * x);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant sn == x * a || sn == 0 ==> x == loop1 + n1;\nloop invariant 0 <= sn <= x * a;\nloop invariant sn == x * a || sn == 0 ==> x == loop1 + n1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == x * a || sn == 0 ==> x == loop1 + n1 is neither established nor preserved.\nloop invariant 0 <= sn <= x * a is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\nloop invariant i2: 0 <= sn <= x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant sn >= 0;\nloop invariant sn <= x * a;\nloop invariant sn == 0 => x == 0;\nloop invariant sn > 0 => x > 0;\nloop invariant sn == x * a => x == sn / a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 21: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: sn <= x * a;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a) is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a);\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant sn <= x*a;\nloop invariant sn >= 0;\nloop invariant sn <= x*a;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == x*a || sn == 0;\nloop invariant sn == x*a || sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= x*a is partially proven to be inductive.\nloop invariant sn <= x*a is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == x*a || sn == 0 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\nloop invariant i2: sn <= x*a;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn == x*a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= (n1 + 1) * a;\nloop invariant 0 <= x <= n1;\nloop invariant x == sn / a;\nloop invariant sn <= (n1 + 1) * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= (n1 + 1) * a is partially proven to be inductive.\nloop invariant 0 <= x <= n1 is established but not preserved.\nloop invariant x == sn / a is established but not preserved.\nloop invariant sn <= (n1 + 1) * a is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= (n1 + loop1) * a;\nloop invariant 0 <= x <= (n1 + loop1);\nloop invariant n1 + loop1 >= 0;\nloop invariant loop1 >= 0;\nloop invariant x == sn / a;\nloop invariant sn <= n1 * a || sn == 0;\nloop invariant sn <= loop1 * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= (n1 + loop1) * a is established but not preserved.\nloop invariant 0 <= x <= (n1 + loop1) is partially proven to be inductive.\nloop invariant n1 + loop1 >= 0 is partially proven to be inductive.\nloop invariant loop1 >= 0 is partially proven to be inductive.\nloop invariant x == sn / a is established but not preserved.\nloop invariant sn <= n1 * a || sn == 0 is established but not preserved.\nloop invariant sn <= loop1 * a is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\nloop invariant i3: n1 + loop1 >= 0;\nloop invariant i4: loop1 >= 0;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= x*a;\nloop invariant 0 <= x <= sn/a;\nloop invariant sn == x*a || sn == 0 ==> x == 0 || x == 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= x*a is partially proven to be inductive.\nloop invariant 0 <= x <= sn/a is partially proven to be inductive.\nloop invariant sn == x*a || sn == 0 ==> x == 0 || x == 1 is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= x*a;\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant sn == x*a || sn == 0;\nloop invariant x <= loop1 || x <= n1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant sn == x*a || sn == 0 is partially proven to be inductive.\nloop invariant x <= loop1 || x <= n1 is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: sn == x*a || sn == 0;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= 2*x;\nloop invariant sn == x*a || sn == 0;\nloop invariant x >= 0;\nloop invariant sn <= 2*unsigned_int_max;\nloop invariant sn >= 0;\nloop invariant sn == x*2;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 22: unbound logic variable unsigned_int_max. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn <= 2*x;\nloop invariant i2: sn == x*a || sn == 0;\nloop invariant i3: x >= 0;\n\nloop invariant i5: sn >= 0;\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n1;\nloop invariant sn == x*a;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn != 0 ==> x != 0;\nloop invariant sn == 0 ==> a == 2;\nloop invariant sn != 0 ==> a != 2;\nloop invariant sn == 0 ==> n1 == 0;\nloop invariant sn != 0 ==> n1 != 0;\nloop invariant sn == 0 ==> loop1 == 0;\nloop invariant sn != 0 ==> loop1 != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> x == 0;\nloop invariant sn != 0 ==> x != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\nloop invariant sn != 0 ==> sn != 0;\nloop invariant sn == 0 ==> sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n1 is established but not preserved.\nloop invariant sn == x*a is partially proven to be inductive.\nloop invariant sn == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant sn != 0 ==> x != 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> a == 2 is partially proven to be inductive.\nloop invariant sn != 0 ==> a != 2 is partially proven to be inductive.\nloop invariant sn == 0 ==> n1 == 0 is preserved but not established.\nloop invariant sn != 0 ==> n1 != 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> loop1 == 0 is preserved but not established.\nloop invariant sn != 0 ==> loop1 != 0 is partially proven to be inductive.\nloop invariant sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn != 0 ==> sn != 0 is partially proven to be inductive.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n\nloop invariant i4: sn != 0 ==> x != 0;\nloop invariant i5: sn == 0 ==> a == 2;\n\n\n\n\n\nloop invariant i11: sn == 0 ==> sn == 0;\nloop invariant i12: sn != 0 ==> sn != 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant ( ( n1 > loop1) ==> (x <= loop1) && (x >= 0));\nloop invariant ( ( n1 <= loop1) ==> (x <= n1) && (x >= 0));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant ( ( n1 > loop1) ==> (x <= loop1) && (x >= 0)) is established but not preserved.\nloop invariant ( ( n1 <= loop1) ==> (x <= n1) && (x >= 0)) is established but not preserved.\nAssertion sn == x * 2 || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 < sn; loop invariant sn <= (sn + a); loop invariant 1 <= x; loop invariant x < 2147483648; loop invariant x <= sn / a; loop invariant sn == x * a;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 < sn; loop invariant sn <= (sn + a); loop invariant 1 <= x; loop invariant x < 2147483648; loop invariant x <= sn / a; loop invariant sn == x * a is preserved but not established.\nAssertion sn == x * 2 || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 31: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn;\nloop invariant i2: 0 <= x;\nloop invariant i3: sn <= x * a;\nloop invariant i4: x <= sn / a;\nloop invariant i5: sn <= x * a || sn == 0;\nloop invariant i6: sn == sn + (a * x);\nloop invariant i7: x >= 0;\nloop invariant i8: sn >= 0;\nloop invariant i9: sn <= (a * x);\nloop invariant i10: 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0;\nloop invariant i11: sn == x * a || sn == 0 ==> x == loop1 + n1;\nloop invariant i12: 0 <= sn <= x * a;\nloop invariant i13: sn == 0 => x == 0;\nloop invariant i14: sn > 0 => x > 0;\nloop invariant i15: sn == x * a => x == sn / a;\nloop invariant i16: sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a);\nloop invariant i17: 0 <= sn <= x*a;\nloop invariant i18: sn <= x*a;\nloop invariant i19: sn == x*a || sn == 0;\nloop invariant i20: 0 <= sn <= (n1 + 1) * a;\nloop invariant i21: 0 <= x <= n1;\nloop invariant i22: x == sn / a;\nloop invariant i23: sn <= (n1 + 1) * a;\nloop invariant i24: 0 <= sn <= (n1 + loop1) * a;\nloop invariant i25: 0 <= x <= (n1 + loop1);\nloop invariant i26: n1 + loop1 >= 0;\nloop invariant i27: loop1 >= 0;\nloop invariant i28: sn <= n1 * a || sn == 0;\nloop invariant i29: sn <= loop1 * a;\nloop invariant i30: 0 <= x <= sn/a;\nloop invariant i31: sn == x*a || sn == 0 ==> x == 0 || x == 1;\nloop invariant i32: x <= loop1 || x <= n1;\nloop invariant i33: 0 <= sn <= 2*x;\nloop invariant i34: sn <= 2*unsigned_int_max;\nloop invariant i35: sn == x*2;\nloop invariant i36: sn == x*a;\nloop invariant i37: sn == 0 ==> x == 0;\nloop invariant i38: sn != 0 ==> x != 0;\nloop invariant i39: sn == 0 ==> a == 2;\nloop invariant i40: sn != 0 ==> a != 2;\nloop invariant i41: sn == 0 ==> n1 == 0;\nloop invariant i42: sn != 0 ==> n1 != 0;\nloop invariant i43: sn == 0 ==> loop1 == 0;\nloop invariant i44: sn != 0 ==> loop1 != 0;\nloop invariant i45: sn == 0 ==> sn == 0;\nloop invariant i46: sn != 0 ==> sn != 0;\nloop invariant i47: ( ( n1 > loop1) ==> (x <= loop1) && (x >= 0));\nloop invariant i48: ( ( n1 <= loop1) ==> (x <= n1) && (x >= 0));\nloop invariant i49: 0 < sn; loop invariant sn <= (sn + a); loop invariant 1 <= x; loop invariant x < 2147483648; loop invariant x <= sn / a; loop invariant sn == x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern unsigned int unknown_uint(void);\n\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 0 <= sn;\nloop invariant i2: 0 <= x;\nloop invariant i3: sn <= x * a;\n\nloop invariant i5: sn <= x * a || sn == 0;\n\nloop invariant i7: x >= 0;\nloop invariant i8: sn >= 0;\nloop invariant i9: sn <= (a * x);\nloop invariant i10: 0 <= sn <= 2 * x; loop invariant x == sn / a; loop invariant a == 2; loop invariant sn + 2 * x < 0 ==> sn == 0;\n\nloop invariant i12: 0 <= sn <= x * a;\n\n\n\nloop invariant i16: sn == 0 || (a >= 0 && a <= UINT_MAX && x >= 0 && x <= UINT_MAX && sn >= 0 && sn <= UINT_MAX && sn == x * a);\nloop invariant i17: 0 <= sn <= x*a;\nloop invariant i18: sn <= x*a;\nloop invariant i19: sn == x*a || sn == 0;\n\n\nloop invariant i22: x == sn / a;\n\n\n\nloop invariant i26: n1 + loop1 >= 0;\nloop invariant i27: loop1 >= 0;\n\n\nloop invariant i30: 0 <= x <= sn/a;\n\n\nloop invariant i33: 0 <= sn <= 2*x;\n\nloop invariant i35: sn == x*2;\nloop invariant i36: sn == x*a;\nloop invariant i37: sn == 0 ==> x == 0;\nloop invariant i38: sn != 0 ==> x != 0;\nloop invariant i39: sn == 0 ==> a == 2;\n\n\n\n\n\nloop invariant i45: sn == 0 ==> sn == 0;\nloop invariant i46: sn != 0 ==> sn != 0;\n\n\n\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n\n  }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c"
        ],
        "skipped": [],
        "total": 12,
        "success_count": 4,
        "failure_count": 8,
        "success_rate": 0.3333333333333333
    }
}