{
    "logs": {
        "file": "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn <= n;\nloop invariant (sn == n ==> i == n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (i == 1 ==> sn == 0);\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn <= n;\nloop invariant (sn == n ==> i == n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (i == 1 ==> sn == 0);\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant v1 == v2 == v3;\nloop invariant sn <= n;\nloop invariant sn <= i;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn + i <= n;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant sn == i-1 || sn==0;\nloop invariant (v1 && v2 && v3) ==> sn == 0;\nloop invariant (n <= i-1) ==> sn == i-1;\nloop invariant (n <= i-1) ==> sn < i-1;\nloop invariant (n <= i-1) ==> sn <= i-1;\nloop invariant (n <= i-1) ==> sn <= n;\nloop invariant (sn + i <= n) ==> i <= n;\nloop invariant (sn + i <= n) ==> sn <= n;\nloop invariant (sn + i <= n) ==> sn + i <= n;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant sn <= sn;\nloop invariant sn >= sn;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v3;\nloop invariant v2 <= v1;\nloop invariant v3 <= v2;\nloop invariant sn <= v1;\nloop invariant sn <= v2;\nloop invariant sn <= v3;\nloop invariant v1 <= sn;\nloop invariant v2 <= sn;\nloop invariant v3 <= sn;\nloop invariant sn <= v1 + 1;\nloop invariant sn <= v2 + 1;\nloop invariant sn <= v3 + 1;\nloop invariant v1 <= sn + 1;\nloop invariant v2 <= sn + 1;\nloop invariant v3 <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v1 <= v3;\nloop invariant v1 >= v3;\nloop invariant v1 == v2 == v3;\nloop invariant v1 != v2;\nloop invariant v2 != v3;\nloop invariant v1 != v3;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v1 == v3;\nloop invariant v1 != v2 != v3;\nloop invariant v1 == v2 != v3;\nloop invariant v1 != v2 == v3;\nloop invariant v1 == v3 != v2;\nloop invariant v2 == v3 != v1;\nloop invariant v1 != v2 == v3 != v1;\nloop invariant v1 == v2 != v3 != v1;\nloop invariant v1 != v2 == v3 != v2;\nloop invariant v1 == v3 != v2 != v1;\nloop invariant v2 == v3 != v1 != v2;\nloop invariant v1 != v2 == v3 != v1 != v2;\nloop invariant v1 == v2 != v3 != v1 != v2;\nloop invariant v1 != v2 == v3 != v1 != v2 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v1;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v2;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15 != v16;\n*/\n```",
            "```\n/*@\nloop invariant 0 &lt;= i &amp;&amp; i &lt;= n;\nloop invariant sn == i - 1;\nloop invariant 0 &lt;= i &amp;&amp; i &lt;= n;\nloop invariant sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (1 + (i - 1) * i / 2);\nloop invariant 1 <= i <= n;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant if (i <= n) then sn == i else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant sn == 0 || sn == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant i = 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1 && i <= n+1;\nloop invariant v1 >= -2147483647 && v1 <= 2147483647;\nloop invariant v2 >= -2147483647 && v2 <= 2147483647;\nloop invariant v3 >= -2147483647 && v3 <= 2147483647;\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647);\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647);\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant n==0 ==> sn == 0;\nloop invariant n!=0 ==> sn >= 1;\nloop invariant n==0 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\nloop invariant v2 == unknown_int();\nloop invariant v3 == unknown_int();\nloop invariant v1 >= INT_MIN;\nloop invariant v1 <= INT_MAX;\nloop invariant v2 >= INT_MIN;\nloop invariant v2 <= INT_MAX;\nloop invariant v3 >= INT_MIN;\nloop invariant v3 <= INT_MAX;\nloop invariant sn >= i;\nloop invariant sn <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 == unknown_int();\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\n\nloop invariant i7: v1 >= INT_MIN;\nloop invariant i8: v1 <= INT_MAX;\nloop invariant i9: v2 >= INT_MIN;\nloop invariant i10: v2 <= INT_MAX;\nloop invariant i11: v3 >= INT_MIN;\nloop invariant i12: v3 <= INT_MAX;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn <= n;\nloop invariant (sn == n ==> i == n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (i == 1 ==> sn == 0);\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant 0 <= v1 <= 1;\nloop invariant 0 <= v2 <= 1;\nloop invariant 0 <= v3 <= 1;\nloop invariant sn <= n;\nloop invariant (sn == n ==> i == n);\nloop invariant (sn == 0 ==> i == 1);\nloop invariant (i == 1 ==> sn == 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i is preserved but not established.\nloop invariant 0 <= v1 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 1 is partially proven to be inductive.\nloop invariant 0 <= v3 <= 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant (sn == n ==> i == n) is partially proven to be inductive.\nloop invariant (sn == 0 ==> i == 1) is partially proven to be inductive.\nloop invariant (i == 1 ==> sn == 0) is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant v1 == v2 == v3;\nloop invariant sn <= n;\nloop invariant sn <= i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant v1 == v2 == v3 is neither established nor preserved.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\nloop invariant i3: sn == i - 1;\n\n\nloop invariant i6: sn <= i;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant sn + i <= n;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v3 >= 0;\nloop invariant v1 <= 1;\nloop invariant v2 <= 1;\nloop invariant v3 <= 1;\nloop invariant sn == i-1 || sn==0;\nloop invariant (v1 && v2 && v3) ==> sn == 0;\nloop invariant (n <= i-1) ==> sn == i-1;\nloop invariant (n <= i-1) ==> sn < i-1;\nloop invariant (n <= i-1) ==> sn <= i-1;\nloop invariant (n <= i-1) ==> sn <= n;\nloop invariant (sn + i <= n) ==> i <= n;\nloop invariant (sn + i <= n) ==> sn <= n;\nloop invariant (sn + i <= n) ==> sn + i <= n;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant (sn + i <= n) ==> sn + i <= sn + i;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is neither established nor preserved.\nloop invariant sn + i <= n is established but not preserved.\nloop invariant v1 >= 0 is neither established nor preserved.\nloop invariant v2 >= 0 is neither established nor preserved.\nloop invariant v3 >= 0 is neither established nor preserved.\nloop invariant v1 <= 1 is neither established nor preserved.\nloop invariant v2 <= 1 is neither established nor preserved.\nloop invariant v3 <= 1 is neither established nor preserved.\nloop invariant sn == i-1 || sn==0 is established but not preserved.\nloop invariant (v1 && v2 && v3) ==> sn == 0 is established but not preserved.\nloop invariant (n <= i-1) ==> sn == i-1 is partially proven to be inductive.\nloop invariant (n <= i-1) ==> sn < i-1 is partially proven to be inductive.\nloop invariant (n <= i-1) ==> sn <= i-1 is partially proven to be inductive.\nloop invariant (n <= i-1) ==> sn <= n is partially proven to be inductive.\nloop invariant (sn + i <= n) ==> i <= n is partially proven to be inductive.\nloop invariant (sn + i <= n) ==> sn <= n is partially proven to be inductive.\nloop invariant (sn + i <= n) ==> sn + i <= n is partially proven to be inductive.\nloop invariant (sn + i <= n) ==> sn + i <= sn + i is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i17: (sn + i <= n) ==> sn + i <= n;\nloop invariant i18: (sn + i <= n) ==> sn + i <= sn + i;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn == i;\nloop invariant v1 <= v1;\nloop invariant v2 <= v2;\nloop invariant v3 <= v3;\nloop invariant sn <= sn;\nloop invariant sn >= sn;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v3 <= v1;\nloop invariant v1 <= v3;\nloop invariant v2 <= v1;\nloop invariant v3 <= v2;\nloop invariant sn <= v1;\nloop invariant sn <= v2;\nloop invariant sn <= v3;\nloop invariant v1 <= sn;\nloop invariant v2 <= sn;\nloop invariant v3 <= sn;\nloop invariant sn <= v1 + 1;\nloop invariant sn <= v2 + 1;\nloop invariant sn <= v3 + 1;\nloop invariant v1 <= sn + 1;\nloop invariant v2 <= sn + 1;\nloop invariant v3 <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\nloop invariant v1 <= v1 + 1;\nloop invariant v2 <= v2 + 1;\nloop invariant v3 <= v3 + 1;\nloop invariant sn <= sn + 1;\nloop invariant sn <= sn + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn == i is preserved but not established.\nloop invariant v1 <= v1 is partially proven to be inductive.\nloop invariant v2 <= v2 is partially proven to be inductive.\nloop invariant v3 <= v3 is partially proven to be inductive.\nloop invariant sn <= sn is partially proven to be inductive.\nloop invariant sn >= sn is partially proven to be inductive.\nloop invariant v1 <= v2 is partially proven to be inductive.\nloop invariant v2 <= v3 is partially proven to be inductive.\nloop invariant v3 <= v1 is partially proven to be inductive.\nloop invariant v1 <= v3 is partially proven to be inductive.\nloop invariant v2 <= v1 is partially proven to be inductive.\nloop invariant v3 <= v2 is partially proven to be inductive.\nloop invariant sn <= v1 is partially proven to be inductive.\nloop invariant sn <= v2 is partially proven to be inductive.\nloop invariant sn <= v3 is partially proven to be inductive.\nloop invariant v1 <= sn is partially proven to be inductive.\nloop invariant v2 <= sn is partially proven to be inductive.\nloop invariant v3 <= sn is partially proven to be inductive.\nloop invariant sn <= v1 + 1 is partially proven to be inductive.\nloop invariant sn <= v2 + 1 is partially proven to be inductive.\nloop invariant sn <= v3 + 1 is partially proven to be inductive.\nloop invariant v1 <= sn + 1 is partially proven to be inductive.\nloop invariant v2 <= sn + 1 is partially proven to be inductive.\nloop invariant v3 <= sn + 1 is partially proven to be inductive.\nloop invariant sn <= sn + 1 is partially proven to be inductive.\nloop invariant v1 <= v1 + 1 is partially proven to be inductive.\nloop invariant v2 <= v2 + 1 is partially proven to be inductive.\nloop invariant v3 <= v3 + 1 is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\nloop invariant i3: v1 <= v1;\nloop invariant i4: v2 <= v2;\nloop invariant i5: v3 <= v3;\nloop invariant i6: sn <= sn;\nloop invariant i7: sn >= sn;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i26: sn <= sn + 1;\nloop invariant i27: v1 <= v1 + 1;\nloop invariant i28: v2 <= v2 + 1;\nloop invariant i29: v3 <= v3 + 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 36,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant v1 >= v2;\nloop invariant v2 >= v3;\nloop invariant v1 <= v2;\nloop invariant v2 <= v3;\nloop invariant v1 <= v3;\nloop invariant v1 >= v3;\nloop invariant v1 == v2 == v3;\nloop invariant v1 != v2;\nloop invariant v2 != v3;\nloop invariant v1 != v3;\nloop invariant v1 == v2;\nloop invariant v2 == v3;\nloop invariant v1 == v3;\nloop invariant v1 != v2 != v3;\nloop invariant v1 == v2 != v3;\nloop invariant v1 != v2 == v3;\nloop invariant v1 == v3 != v2;\nloop invariant v2 == v3 != v1;\nloop invariant v1 != v2 == v3 != v1;\nloop invariant v1 == v2 != v3 != v1;\nloop invariant v1 != v2 == v3 != v2;\nloop invariant v1 == v3 != v2 != v1;\nloop invariant v2 == v3 != v1 != v2;\nloop invariant v1 != v2 == v3 != v1 != v2;\nloop invariant v1 == v2 != v3 != v1 != v2;\nloop invariant v1 != v2 == v3 != v1 != v2 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v1;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v2;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v3;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15;\nloop invariant v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15 != v16;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 28: Inconsistent relation chain.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 &lt;= i &amp;&amp; i &lt;= n;\nloop invariant sn == i - 1;\nloop invariant 0 &lt;= i &amp;&amp; i &lt;= n;\nloop invariant sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token '='",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\nloop invariant i2: sn == i - 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == (1 + (i - 1) * i / 2);\nloop invariant 1 <= i <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == (1 + (i - 1) * i / 2) is preserved but not established.\nloop invariant 1 <= i <= n is partially proven to be inductive.\nAssertion sn == n || sn == 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant 0 <= v1;\nloop invariant 0 <= v2;\nloop invariant 0 <= v3;\nloop invariant if (i <= n) then sn == i else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant if (i <= n) then sn == n else sn == 0;\nloop invariant if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant if (i <= n) then v2 == 0 else v2 == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token '('",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant sn == 0 || sn == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant v1 = unknown_int();\nloop invariant v2 = unknown_int();\nloop invariant v3 = unknown_int();\nloop invariant i = 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant i >= 1 && i <= n+1;\nloop invariant v1 >= -2147483647 && v1 <= 2147483647;\nloop invariant v2 >= -2147483647 && v2 <= 2147483647;\nloop invariant v3 >= -2147483647 && v3 <= 2147483647;\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647);\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647);\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= n is neither established nor preserved.\nloop invariant i >= 1 && i <= n+1 is partially proven to be inductive.\nloop invariant v1 >= -2147483647 && v1 <= 2147483647 is neither established nor preserved.\nloop invariant v2 >= -2147483647 && v2 <= 2147483647 is neither established nor preserved.\nloop invariant v3 >= -2147483647 && v3 <= 2147483647 is neither established nor preserved.\nloop invariant (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647)) is partially proven to be inductive.\nloop invariant (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647)) is partially proven to be inductive.\nloop invariant (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647) is partially proven to be inductive.\nAssertion sn == n || sn == 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 20,
                "annotations": "```\n/*@\nloop invariant 0 <= sn <= n;\nloop invariant n==0 ==> sn == 0;\nloop invariant n!=0 ==> sn >= 1;\nloop invariant n==0 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: Assignment operators not allowed in annotations.",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 14: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: sn == i;\nloop invariant i3: v1 == unknown_int();\nloop invariant i4: v2 == unknown_int();\nloop invariant i5: v3 == unknown_int();\nloop invariant i6: 1 <= i <= n;\nloop invariant i7: sn >= 0;\nloop invariant i8: sn <= n;\nloop invariant i9: v1 >= INT_MIN;\nloop invariant i10: v1 <= INT_MAX;\nloop invariant i11: v2 >= INT_MIN;\nloop invariant i12: v2 <= INT_MAX;\nloop invariant i13: v3 >= INT_MIN;\nloop invariant i14: v3 <= INT_MAX;\nloop invariant i15: sn >= i;\nloop invariant i16: 0 <= v1 <= 1;\nloop invariant i17: 0 <= v2 <= 1;\nloop invariant i18: 0 <= v3 <= 1;\nloop invariant i19: (sn == n ==> i == n);\nloop invariant i20: (sn == 0 ==> i == 1);\nloop invariant i21: (i == 1 ==> sn == 0);\nloop invariant i22: 0 <= sn <= n;\nloop invariant i23: sn == i - 1;\nloop invariant i24: v1 == v2 == v3;\nloop invariant i25: sn <= i;\nloop invariant i26: sn + i <= n;\nloop invariant i27: v1 >= 0;\nloop invariant i28: v2 >= 0;\nloop invariant i29: v3 >= 0;\nloop invariant i30: v1 <= 1;\nloop invariant i31: v2 <= 1;\nloop invariant i32: v3 <= 1;\nloop invariant i33: sn == i-1 || sn==0;\nloop invariant i34: (v1 && v2 && v3) ==> sn == 0;\nloop invariant i35: (n <= i-1) ==> sn == i-1;\nloop invariant i36: (n <= i-1) ==> sn < i-1;\nloop invariant i37: (n <= i-1) ==> sn <= i-1;\nloop invariant i38: (n <= i-1) ==> sn <= n;\nloop invariant i39: (sn + i <= n) ==> i <= n;\nloop invariant i40: (sn + i <= n) ==> sn <= n;\nloop invariant i41: (sn + i <= n) ==> sn + i <= n;\nloop invariant i42: (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant i43: v1 <= v1;\nloop invariant i44: v2 <= v2;\nloop invariant i45: v3 <= v3;\nloop invariant i46: sn <= sn;\nloop invariant i47: sn >= sn;\nloop invariant i48: v1 <= v2;\nloop invariant i49: v2 <= v3;\nloop invariant i50: v3 <= v1;\nloop invariant i51: v1 <= v3;\nloop invariant i52: v2 <= v1;\nloop invariant i53: v3 <= v2;\nloop invariant i54: sn <= v1;\nloop invariant i55: sn <= v2;\nloop invariant i56: sn <= v3;\nloop invariant i57: v1 <= sn;\nloop invariant i58: v2 <= sn;\nloop invariant i59: v3 <= sn;\nloop invariant i60: sn <= v1 + 1;\nloop invariant i61: sn <= v2 + 1;\nloop invariant i62: sn <= v3 + 1;\nloop invariant i63: v1 <= sn + 1;\nloop invariant i64: v2 <= sn + 1;\nloop invariant i65: v3 <= sn + 1;\nloop invariant i66: sn <= sn + 1;\nloop invariant i67: v1 <= v1 + 1;\nloop invariant i68: v2 <= v2 + 1;\nloop invariant i69: v3 <= v3 + 1;\nloop invariant i70: v1 >= v2;\nloop invariant i71: v2 >= v3;\nloop invariant i72: v1 >= v3;\nloop invariant i73: v1 != v2;\nloop invariant i74: v2 != v3;\nloop invariant i75: v1 != v3;\nloop invariant i76: v1 == v2;\nloop invariant i77: v2 == v3;\nloop invariant i78: v1 == v3;\nloop invariant i79: v1 != v2 != v3;\nloop invariant i80: v1 == v2 != v3;\nloop invariant i81: v1 != v2 == v3;\nloop invariant i82: v1 == v3 != v2;\nloop invariant i83: v2 == v3 != v1;\nloop invariant i84: v1 != v2 == v3 != v1;\nloop invariant i85: v1 == v2 != v3 != v1;\nloop invariant i86: v1 != v2 == v3 != v2;\nloop invariant i87: v1 == v3 != v2 != v1;\nloop invariant i88: v2 == v3 != v1 != v2;\nloop invariant i89: v1 != v2 == v3 != v1 != v2;\nloop invariant i90: v1 == v2 != v3 != v1 != v2;\nloop invariant i91: v1 != v2 == v3 != v1 != v2 != v3;\nloop invariant i92: v1 == v2 != v3 != v1 != v2 != v3;\nloop invariant i93: v1 == v2 != v3 != v1 != v2 != v3 != v1;\nloop invariant i94: v1 == v2 != v3 != v1 != v2 != v3 != v2;\nloop invariant i95: v1 == v2 != v3 != v1 != v2 != v3 != v3;\nloop invariant i96: v1 == v2 != v3 != v1 != v2 != v3 != v4;\nloop invariant i97: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5;\nloop invariant i98: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6;\nloop invariant i99: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7;\nloop invariant i100: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8;\nloop invariant i101: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9;\nloop invariant i102: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10;\nloop invariant i103: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11;\nloop invariant i104: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12;\nloop invariant i105: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13;\nloop invariant i106: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14;\nloop invariant i107: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15;\nloop invariant i108: v1 == v2 != v3 != v1 != v2 != v3 != v4 != v5 != v6 != v7 != v8 != v9 != v10 != v11 != v12 != v13 != v14 != v15 != v16;\nloop invariant i109: 0 &lt;= i &amp;&amp; i &lt;= n;\nloop invariant i110: 1 <= n;\nloop invariant i111: sn == (1 + (i - 1) * i / 2);\nloop invariant i112: 0 <= v1;\nloop invariant i113: 0 <= v2;\nloop invariant i114: 0 <= v3;\nloop invariant i115: if (i <= n) then sn == i else sn == 0;\nloop invariant i116: if (i <= n) then v1 == 0 else v1 == 0;\nloop invariant i117: if (i <= n) then v2 == 0 else v2 == 0;\nloop invariant i118: if (i <= n) then v3 == 0 else v3 == 0;\nloop invariant i119: if (i <= n) then sn == n else sn == 0;\nloop invariant i120: v1 == unknown_int() && v2 == unknown_int() && v3 == unknown_int();\nloop invariant i121: sn == 0 || sn == n;\nloop invariant i122: v1 = unknown_int();\nloop invariant i123: v2 = unknown_int();\nloop invariant i124: v3 = unknown_int();\nloop invariant i125: i = 1;\nloop invariant i126: i >= 1 && i <= n+1;\nloop invariant i127: v1 >= -2147483647 && v1 <= 2147483647;\nloop invariant i128: v2 >= -2147483647 && v2 <= 2147483647;\nloop invariant i129: v3 >= -2147483647 && v3 <= 2147483647;\nloop invariant i130: (sn == n ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant i131: (sn == 0 ==> (v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647));\nloop invariant i132: (i == n+1 ==> v1 >= -2147483647 && v1 <= 2147483647 && v2 >= -2147483647 && v2 <= 2147483647 && v3 >= -2147483647 && v3 <= 2147483647);\nloop invariant i133: n==0 ==> sn == 0;\nloop invariant i134: n!=0 ==> sn >= 1;\nloop invariant i135: n==0 ==> v1 = v2 = v3;\nloop invariant i136: n!=0 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i137: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i138: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i139: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i140: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i141: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i142: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i143: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i144: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i145: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i146: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i147: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i148: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i149: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\nloop invariant i150: n==0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3;\nloop invariant i151: n!=0 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> v1 = v2 = v3 ==> sn == n - 1;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 73,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  /*@\n\n\n\n\n\n\nloop invariant i7: sn >= 0;\n\nloop invariant i9: v1 >= INT_MIN;\nloop invariant i10: v1 <= INT_MAX;\nloop invariant i11: v2 >= INT_MIN;\nloop invariant i12: v2 <= INT_MAX;\nloop invariant i13: v3 >= INT_MIN;\nloop invariant i14: v3 <= INT_MAX;\n\n\n\n\n\nloop invariant i20: (sn == 0 ==> i == 1);\nloop invariant i21: (i == 1 ==> sn == 0);\n\nloop invariant i23: sn == i - 1;\n\nloop invariant i25: sn <= i;\n\n\n\n\n\n\n\nloop invariant i33: sn == i-1 || sn==0;\n\nloop invariant i35: (n <= i-1) ==> sn == i-1;\n\nloop invariant i37: (n <= i-1) ==> sn <= i-1;\n\nloop invariant i39: (sn + i <= n) ==> i <= n;\nloop invariant i40: (sn + i <= n) ==> sn <= n;\nloop invariant i41: (sn + i <= n) ==> sn + i <= n;\nloop invariant i42: (sn + i <= n) ==> sn + i <= sn + i;\nloop invariant i43: v1 <= v1;\nloop invariant i44: v2 <= v2;\nloop invariant i45: v3 <= v3;\nloop invariant i46: sn <= sn;\nloop invariant i47: sn >= sn;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i66: sn <= sn + 1;\nloop invariant i67: v1 <= v1 + 1;\nloop invariant i68: v2 <= v2 + 1;\nloop invariant i69: v3 <= v3 + 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i133: n==0 ==> sn == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c"
        ],
        "skipped": [],
        "total": 2,
        "success_count": 0,
        "failure_count": 2,
        "success_rate": 0.0
    }
}