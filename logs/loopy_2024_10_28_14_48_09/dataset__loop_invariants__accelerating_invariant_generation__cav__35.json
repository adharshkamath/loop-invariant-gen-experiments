{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  while(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
        "success": false,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant x >= 0;\nloop invariant x <= n-1;\nloop invariant x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n - 1;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= n <= 100;\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant x <= n - 1;\nloop invariant n == 0 ==> x == 0;\nloop invariant n > 0 ==> x == n;\nloop invariant x >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n-1 ==> x <= n-1;\nloop invariant x >= n ==> x >= n;\n*/\n```",
            "```\n/*@\nloop invariant n >= 0;\nloop invariant x = 0;\nloop invariant x <= n-1;\nloop invariant x' = x + 1;\nloop invariant x' <= n;\nloop invariant x = n;\nloop invariant x' = n+1;\nloop invariant x' > n;\nloop invariant x' <= n+1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n-1;\nloop invariant n >= 1;\nloop invariant n > 0;\n*/\n```",
            "```\n/*@\nloop invariant n > 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= x;\nloop invariant n <= x + 1;\nloop invariant n >= x + 1;\nloop invariant n <= x + 2;\nloop invariant n >= x + 2;\nloop invariant n <= x + 3;\nloop invariant n >= x + 3;\nloop invariant n <= x + 4;\nloop invariant n >= x + 4;\nloop invariant n <= x + 5;\nloop invariant n >= x + 5;\nloop invariant n <= x + 6;\nloop invariant n >= x + 6;\nloop invariant n <= x + 7;\nloop invariant n >= x + 7;\nloop invariant n <= x + 8;\nloop invariant n >= x + 8;\nloop invariant n <= x + 9;\nloop invariant n >= x + 9;\nloop invariant n <= x + 10;\nloop invariant n >= x + 10;\nloop invariant n <= x + 11;\nloop invariant n >= x + 11;\nloop invariant n <= x + 12;\nloop invariant n >= x + 12;\nloop invariant n <= x + 13;\nloop invariant n >= x + 13;\nloop invariant n <= x + 14;\nloop invariant n >= x + 14;\nloop invariant n <= x + 15;\nloop invariant n >= x + 15;\nloop invariant n <= x + 16;\nloop invariant n >= x + 16;\nloop invariant n <= x + 17;\nloop invariant n >= x + 17;\nloop invariant n <= x + 18;\nloop invariant n >= x + 18;\nloop invariant n <= x + 19;\nloop invariant n >= x + 19;\nloop invariant n <= x + 20;\nloop invariant n >= x + 20;\nloop invariant n <= x + 21;\nloop invariant n >= x + 21;\nloop invariant n <= x + 22;\nloop invariant n >= x + 22;\nloop invariant n <= x + 23;\nloop invariant n >= x + 23;\nloop invariant n <= x + 24;\nloop invariant n >= x + 24;\nloop invariant n <= x + 25;\nloop invariant n >= x + 25;\nloop invariant n <= x + 26;\nloop invariant n >= x + 26;\nloop invariant n <= x + 27;\nloop invariant n >= x + 27;\nloop invariant n <= x + 28;\nloop invariant n >= x + 28;\nloop invariant n <= x + 29;\nloop invariant n >= x + 29;\nloop invariant n <= x + 30;\nloop invariant n >= x + 30;\nloop invariant n <= x + 31;\nloop invariant n >= x + 31;\nloop invariant n <= x + 32;\nloop invariant n >= x + 32;\nloop invariant n <= x + 33;\nloop invariant n >= x + 33;\nloop invariant n <= x + 34;\nloop invariant n >= x + 34;\nloop invariant n <= x + 35;\nloop invariant n >= x + 35;\nloop invariant n <= x + 36;\nloop invariant n >= x + 36;\nloop invariant n <= x + 37;\nloop invariant n >= x + 37;\nloop invariant n <= x + 38;\nloop invariant n >= x + 38;\nloop invariant n <= x + 39;\nloop invariant n >= x + 39;\nloop invariant n <= x + 40;\nloop invariant n >= x + 40;\nloop invariant n <= x + 41;\nloop invariant n >= x + 41;\nloop invariant n <= x + 42;\nloop invariant n >= x + 42;\nloop invariant n <= x + 43;\nloop invariant n >= x + 43;\nloop invariant n <= x + 44;\nloop invariant n >= x + 44;\nloop invariant n <= x + 45;\nloop invariant n >= x + 45;\nloop invariant n <= x + 46;\nloop invariant n >= x + 46;\nloop invariant n <= x + 47;\nloop invariant n >= x + 47;\nloop invariant n <= x + 48;\nloop invariant n >= x + 48;\nloop invariant n <= x + 49;\nloop invariant n >= x + 49;\nloop invariant n <= x + 50;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant n <= 100000;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\n*/\n```",
            "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
            "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n-1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n - 1;\nloop invariant n >= 1;\nloop invariant x <= n - 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n-1;\nloop invariant x >= 0;\nloop invariant x <= n-1;\nloop invariant x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n-1 is neither established nor preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n-1 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n - 1;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\nloop invariant x <= n - 1;\nloop invariant x <= n - 2;\nloop invariant x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n - 1 is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n - 1 is partially proven to be inductive.\nloop invariant x <= n - 2 is neither established nor preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= n <= 100;\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant x <= n - 1;\nloop invariant n == 0 ==> x == 0;\nloop invariant n > 0 ==> x == n;\nloop invariant x >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= n <= 100 is preserved but not established.\nloop invariant 0 <= x <= n is partially proven to be inductive.\nloop invariant n >= 1 is preserved but not established.\nloop invariant x <= n - 1 is partially proven to be inductive.\nloop invariant n == 0 ==> x == 0 is partially proven to be inductive.\nloop invariant n > 0 ==> x == n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\n\nloop invariant i5: n == 0 ==> x == 0;\n\nloop invariant i7: x >= 0;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x <= n-1 ==> x <= n-1;\nloop invariant x >= n ==> x >= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x <= n-1 ==> x <= n-1 is partially proven to be inductive.\nloop invariant x >= n ==> x >= n is partially proven to be inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: x <= n-1 ==> x <= n-1;\nloop invariant i3: x >= n ==> x >= n;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant n >= 0;\nloop invariant x = 0;\nloop invariant x <= n-1;\nloop invariant x' = x + 1;\nloop invariant x' <= n;\nloop invariant x = n;\nloop invariant x' = n+1;\nloop invariant x' > n;\nloop invariant x' <= n+1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "No CSV output dump found from Frama-C",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\nloop invariant i1: n >= 0;\nloop invariant i2: x = 0;\nloop invariant i3: x <= n-1;\nloop invariant i4: x' = x + 1;\nloop invariant i5: x' <= n;\nloop invariant i6: x = n;\nloop invariant i7: x' = n+1;\nloop invariant i8: x' > n;\nloop invariant i9: x' <= n+1;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant x >= 0;\nloop invariant x <= n-1;\nloop invariant n >= 1;\nloop invariant n > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n-1 is neither established nor preserved.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant n > 0 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 52,
                "annotations": "```\n/*@\nloop invariant n > 0;\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant n >= x;\nloop invariant n <= x + 1;\nloop invariant n >= x + 1;\nloop invariant n <= x + 2;\nloop invariant n >= x + 2;\nloop invariant n <= x + 3;\nloop invariant n >= x + 3;\nloop invariant n <= x + 4;\nloop invariant n >= x + 4;\nloop invariant n <= x + 5;\nloop invariant n >= x + 5;\nloop invariant n <= x + 6;\nloop invariant n >= x + 6;\nloop invariant n <= x + 7;\nloop invariant n >= x + 7;\nloop invariant n <= x + 8;\nloop invariant n >= x + 8;\nloop invariant n <= x + 9;\nloop invariant n >= x + 9;\nloop invariant n <= x + 10;\nloop invariant n >= x + 10;\nloop invariant n <= x + 11;\nloop invariant n >= x + 11;\nloop invariant n <= x + 12;\nloop invariant n >= x + 12;\nloop invariant n <= x + 13;\nloop invariant n >= x + 13;\nloop invariant n <= x + 14;\nloop invariant n >= x + 14;\nloop invariant n <= x + 15;\nloop invariant n >= x + 15;\nloop invariant n <= x + 16;\nloop invariant n >= x + 16;\nloop invariant n <= x + 17;\nloop invariant n >= x + 17;\nloop invariant n <= x + 18;\nloop invariant n >= x + 18;\nloop invariant n <= x + 19;\nloop invariant n >= x + 19;\nloop invariant n <= x + 20;\nloop invariant n >= x + 20;\nloop invariant n <= x + 21;\nloop invariant n >= x + 21;\nloop invariant n <= x + 22;\nloop invariant n >= x + 22;\nloop invariant n <= x + 23;\nloop invariant n >= x + 23;\nloop invariant n <= x + 24;\nloop invariant n >= x + 24;\nloop invariant n <= x + 25;\nloop invariant n >= x + 25;\nloop invariant n <= x + 26;\nloop invariant n >= x + 26;\nloop invariant n <= x + 27;\nloop invariant n >= x + 27;\nloop invariant n <= x + 28;\nloop invariant n >= x + 28;\nloop invariant n <= x + 29;\nloop invariant n >= x + 29;\nloop invariant n <= x + 30;\nloop invariant n >= x + 30;\nloop invariant n <= x + 31;\nloop invariant n >= x + 31;\nloop invariant n <= x + 32;\nloop invariant n >= x + 32;\nloop invariant n <= x + 33;\nloop invariant n >= x + 33;\nloop invariant n <= x + 34;\nloop invariant n >= x + 34;\nloop invariant n <= x + 35;\nloop invariant n >= x + 35;\nloop invariant n <= x + 36;\nloop invariant n >= x + 36;\nloop invariant n <= x + 37;\nloop invariant n >= x + 37;\nloop invariant n <= x + 38;\nloop invariant n >= x + 38;\nloop invariant n <= x + 39;\nloop invariant n >= x + 39;\nloop invariant n <= x + 40;\nloop invariant n >= x + 40;\nloop invariant n <= x + 41;\nloop invariant n >= x + 41;\nloop invariant n <= x + 42;\nloop invariant n >= x + 42;\nloop invariant n <= x + 43;\nloop invariant n >= x + 43;\nloop invariant n <= x + 44;\nloop invariant n >= x + 44;\nloop invariant n <= x + 45;\nloop invariant n >= x + 45;\nloop invariant n <= x + 46;\nloop invariant n >= x + 46;\nloop invariant n <= x + 47;\nloop invariant n >= x + 47;\nloop invariant n <= x + 48;\nloop invariant n >= x + 48;\nloop invariant n <= x + 49;\nloop invariant n >= x + 49;\nloop invariant n <= x + 50;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n > 0 is preserved but not established.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is partially proven to be inductive.\nloop invariant n >= x is partially proven to be inductive.\nloop invariant n <= x + 1 is preserved but not established.\nloop invariant n >= x + 1 is partially proven to be inductive.\nloop invariant n <= x + 2 is partially proven to be inductive.\nloop invariant n >= x + 2 is preserved but not established.\nloop invariant n <= x + 3 is partially proven to be inductive.\nloop invariant n >= x + 3 is partially proven to be inductive.\nloop invariant n <= x + 4 is partially proven to be inductive.\nloop invariant n >= x + 4 is partially proven to be inductive.\nloop invariant n <= x + 5 is partially proven to be inductive.\nloop invariant n >= x + 5 is partially proven to be inductive.\nloop invariant n <= x + 6 is partially proven to be inductive.\nloop invariant n >= x + 6 is partially proven to be inductive.\nloop invariant n <= x + 7 is partially proven to be inductive.\nloop invariant n >= x + 7 is partially proven to be inductive.\nloop invariant n <= x + 8 is partially proven to be inductive.\nloop invariant n >= x + 8 is partially proven to be inductive.\nloop invariant n <= x + 9 is partially proven to be inductive.\nloop invariant n >= x + 9 is partially proven to be inductive.\nloop invariant n <= x + 10 is partially proven to be inductive.\nloop invariant n >= x + 10 is partially proven to be inductive.\nloop invariant n <= x + 11 is partially proven to be inductive.\nloop invariant n >= x + 11 is partially proven to be inductive.\nloop invariant n <= x + 12 is partially proven to be inductive.\nloop invariant n >= x + 12 is partially proven to be inductive.\nloop invariant n <= x + 13 is partially proven to be inductive.\nloop invariant n >= x + 13 is partially proven to be inductive.\nloop invariant n <= x + 14 is partially proven to be inductive.\nloop invariant n >= x + 14 is partially proven to be inductive.\nloop invariant n <= x + 15 is partially proven to be inductive.\nloop invariant n >= x + 15 is partially proven to be inductive.\nloop invariant n <= x + 16 is partially proven to be inductive.\nloop invariant n >= x + 16 is partially proven to be inductive.\nloop invariant n <= x + 17 is partially proven to be inductive.\nloop invariant n >= x + 17 is partially proven to be inductive.\nloop invariant n <= x + 18 is partially proven to be inductive.\nloop invariant n >= x + 18 is partially proven to be inductive.\nloop invariant n <= x + 19 is partially proven to be inductive.\nloop invariant n >= x + 19 is partially proven to be inductive.\nloop invariant n <= x + 20 is partially proven to be inductive.\nloop invariant n >= x + 20 is partially proven to be inductive.\nloop invariant n <= x + 21 is partially proven to be inductive.\nloop invariant n >= x + 21 is partially proven to be inductive.\nloop invariant n <= x + 22 is partially proven to be inductive.\nloop invariant n >= x + 22 is partially proven to be inductive.\nloop invariant n <= x + 23 is partially proven to be inductive.\nloop invariant n >= x + 23 is partially proven to be inductive.\nloop invariant n <= x + 24 is partially proven to be inductive.\nloop invariant n >= x + 24 is partially proven to be inductive.\nloop invariant n <= x + 25 is partially proven to be inductive.\nloop invariant n >= x + 25 is partially proven to be inductive.\nloop invariant n <= x + 26 is partially proven to be inductive.\nloop invariant n >= x + 26 is partially proven to be inductive.\nloop invariant n <= x + 27 is partially proven to be inductive.\nloop invariant n >= x + 27 is partially proven to be inductive.\nloop invariant n <= x + 28 is partially proven to be inductive.\nloop invariant n >= x + 28 is partially proven to be inductive.\nloop invariant n <= x + 29 is partially proven to be inductive.\nloop invariant n >= x + 29 is partially proven to be inductive.\nloop invariant n <= x + 30 is partially proven to be inductive.\nloop invariant n >= x + 30 is partially proven to be inductive.\nloop invariant n <= x + 31 is partially proven to be inductive.\nloop invariant n >= x + 31 is partially proven to be inductive.\nloop invariant n <= x + 32 is partially proven to be inductive.\nloop invariant n >= x + 32 is partially proven to be inductive.\nloop invariant n <= x + 33 is partially proven to be inductive.\nloop invariant n >= x + 33 is partially proven to be inductive.\nloop invariant n <= x + 34 is partially proven to be inductive.\nloop invariant n >= x + 34 is partially proven to be inductive.\nloop invariant n <= x + 35 is partially proven to be inductive.\nloop invariant n >= x + 35 is partially proven to be inductive.\nloop invariant n <= x + 36 is partially proven to be inductive.\nloop invariant n >= x + 36 is partially proven to be inductive.\nloop invariant n <= x + 37 is partially proven to be inductive.\nloop invariant n >= x + 37 is partially proven to be inductive.\nloop invariant n <= x + 38 is partially proven to be inductive.\nloop invariant n >= x + 38 is partially proven to be inductive.\nloop invariant n <= x + 39 is partially proven to be inductive.\nloop invariant n >= x + 39 is partially proven to be inductive.\nloop invariant n <= x + 40 is partially proven to be inductive.\nloop invariant n >= x + 40 is partially proven to be inductive.\nloop invariant n <= x + 41 is partially proven to be inductive.\nloop invariant n >= x + 41 is partially proven to be inductive.\nloop invariant n <= x + 42 is partially proven to be inductive.\nloop invariant n >= x + 42 is partially proven to be inductive.\nloop invariant n <= x + 43 is partially proven to be inductive.\nloop invariant n >= x + 43 is partially proven to be inductive.\nloop invariant n <= x + 44 is partially proven to be inductive.\nloop invariant n >= x + 44 is partially proven to be inductive.\nloop invariant n <= x + 45 is partially proven to be inductive.\nloop invariant n >= x + 45 is partially proven to be inductive.\nloop invariant n <= x + 46 is partially proven to be inductive.\nloop invariant n >= x + 46 is partially proven to be inductive.\nloop invariant n <= x + 47 is partially proven to be inductive.\nloop invariant n >= x + 47 is partially proven to be inductive.\nloop invariant n <= x + 48 is partially proven to be inductive.\nloop invariant n >= x + 48 is partially proven to be inductive.\nloop invariant n <= x + 49 is partially proven to be inductive.\nloop invariant n >= x + 49 is partially proven to be inductive.\nloop invariant n <= x + 50 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: x >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant n >= 1;\nloop invariant n <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant n >= 1 is preserved but not established.\nloop invariant n <= 100000 is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x < n);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n - 1);\nloop invariant (x == n) ==> (x >= n + 1);\nloop invariant (x == n - 1) ==> (x < n + 1);\nloop invariant (x == n) ==> (x >= n);\nloop invariant (x == n - 1) ==> (x <= n);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nloop invariant (x == n - 1) ==> (x < n) is partially proven to be inductive.\nloop invariant (x == n) ==> (x >= n) is partially proven to be inductive.\nloop invariant (x == n - 1) ==> (x <= n - 1) is partially proven to be inductive.\nloop invariant (x == n) ==> (x >= n + 1) is neither established nor preserved.\nloop invariant (x == n - 1) ==> (x < n + 1) is partially proven to be inductive.\nloop invariant (x == n - 1) ==> (x <= n) is partially proven to be inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\nloop invariant i2: (x == n - 1) ==> (x < n);\nloop invariant i3: (x == n) ==> (x >= n);\nloop invariant i4: (x == n - 1) ==> (x <= n - 1);\n\nloop invariant i6: (x == n - 1) ==> (x < n + 1);\nloop invariant i7: (x == n - 1) ==> (x <= n);\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 159,
                "annotations": "```\n/*@\nloop invariant i1;\nloop invariant i2;\nloop invariant i3;\nloop invariant i4;\nloop invariant i5;\nloop invariant i6;\nloop invariant i7;\nloop invariant i8;\nloop invariant i9;\nloop invariant i10;\nloop invariant i11;\nloop invariant i12;\nloop invariant i13;\nloop invariant i14;\nloop invariant i15;\nloop invariant i16;\nloop invariant i17;\nloop invariant i18;\nloop invariant i19;\nloop invariant i20;\nloop invariant i21;\nloop invariant i22;\nloop invariant i23;\nloop invariant i24;\nloop invariant i25;\nloop invariant i26;\nloop invariant i27;\nloop invariant i28;\nloop invariant i29;\nloop invariant i30;\nloop invariant i31;\nloop invariant i32;\nloop invariant i33;\nloop invariant i34;\nloop invariant i35;\nloop invariant i36;\nloop invariant i37;\nloop invariant i38;\nloop invariant i39;\nloop invariant i40;\nloop invariant i41;\nloop invariant i42;\nloop invariant i43;\nloop invariant i44;\nloop invariant i45;\nloop invariant i46;\nloop invariant i47;\nloop invariant i48;\nloop invariant i49;\nloop invariant i50;\nloop invariant i51;\nloop invariant i52;\nloop invariant i53;\nloop invariant i54;\nloop invariant i55;\nloop invariant i56;\nloop invariant i57;\nloop invariant i58;\nloop invariant i59;\nloop invariant i60;\nloop invariant i61;\nloop invariant i62;\nloop invariant i63;\nloop invariant i64;\nloop invariant i65;\nloop invariant i66;\nloop invariant i67;\nloop invariant i68;\nloop invariant i69;\nloop invariant i70;\nloop invariant i71;\nloop invariant i72;\nloop invariant i73;\nloop invariant i74;\nloop invariant i75;\nloop invariant i76;\nloop invariant i77;\nloop invariant i78;\nloop invariant i79;\nloop invariant i80;\nloop invariant i81;\nloop invariant i82;\nloop invariant i83;\nloop invariant i84;\nloop invariant i85;\nloop invariant i86;\nloop invariant i87;\nloop invariant i88;\nloop invariant i89;\nloop invariant i90;\nloop invariant i91;\nloop invariant i92;\nloop invariant i93;\nloop invariant i94;\nloop invariant i95;\nloop invariant i96;\nloop invariant i97;\nloop invariant i98;\nloop invariant i99;\nloop invariant i100;\nloop invariant i101;\nloop invariant i102;\nloop invariant i103;\nloop invariant i104;\nloop invariant i105;\nloop invariant i106;\nloop invariant i107;\nloop invariant i108;\nloop invariant i109;\nloop invariant i110;\nloop invariant i111;\nloop invariant i112;\nloop invariant i113;\nloop invariant i114;\nloop invariant i115;\nloop invariant i116;\nloop invariant i117;\nloop invariant i118;\nloop invariant i119;\nloop invariant i120;\nloop invariant i121;\nloop invariant i122;\nloop invariant i123;\nloop invariant i124;\nloop invariant i125;\nloop invariant i126;\nloop invariant i127;\nloop invariant i128;\nloop invariant i129;\nloop invariant i130;\nloop invariant i131;\nloop invariant i132;\nloop invariant i133;\nloop invariant i134;\nloop invariant i135;\nloop invariant i136;\nloop invariant i137;\nloop invariant i138;\nloop invariant i139;\nloop invariant i140;\nloop invariant i141;\nloop invariant i142;\nloop invariant i143;\nloop invariant i144;\nloop invariant i145;\nloop invariant i146;\nloop invariant i147;\nloop invariant i148;\nloop invariant i149;\nloop invariant i150;\nloop invariant i151;\nloop invariant i152;\nloop invariant i153;\nloop invariant i154;\nloop invariant i155;\nloop invariant i156;\nloop invariant i157;\nloop invariant i158;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable i1. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x >= 0;\nloop invariant x <= n;\nloop invariant x <= n-1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant x <= n is preserved but not established.\nloop invariant x <= n-1 is neither established nor preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\nloop invariant i1: x >= 0;\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n - 1;\nloop invariant n >= 1;\nloop invariant x <= n - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n - 1 is neither established nor preserved.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant x <= n - 1 is partially proven to be inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "```\n/*@\nloop invariant 0 <= x <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= n is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\n\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "No CSV output dump found from Frama-C",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\nloop invariant i1: 0 <= x <= n-1;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= n-1;\nloop invariant i4: x <= n;\nloop invariant i5: 0 <= x <= n - 1;\nloop invariant i6: x <= n - 1;\nloop invariant i7: x <= n - 2;\nloop invariant i8: 0 <= n <= 100;\nloop invariant i9: 0 <= x <= n;\nloop invariant i10: n >= 1;\nloop invariant i11: n == 0 ==> x == 0;\nloop invariant i12: n > 0 ==> x == n;\nloop invariant i13: x <= n-1 ==> x <= n-1;\nloop invariant i14: x >= n ==> x >= n;\nloop invariant i15: n >= 0;\nloop invariant i16: x = 0;\nloop invariant i17: x' = x + 1;\nloop invariant i18: x' <= n;\nloop invariant i19: x = n;\nloop invariant i20: x' = n+1;\nloop invariant i21: x' > n;\nloop invariant i22: x' <= n+1;\nloop invariant i23: n > 0;\nloop invariant i24: n >= x;\nloop invariant i25: n <= x + 1;\nloop invariant i26: n >= x + 1;\nloop invariant i27: n <= x + 2;\nloop invariant i28: n >= x + 2;\nloop invariant i29: n <= x + 3;\nloop invariant i30: n >= x + 3;\nloop invariant i31: n <= x + 4;\nloop invariant i32: n >= x + 4;\nloop invariant i33: n <= x + 5;\nloop invariant i34: n >= x + 5;\nloop invariant i35: n <= x + 6;\nloop invariant i36: n >= x + 6;\nloop invariant i37: n <= x + 7;\nloop invariant i38: n >= x + 7;\nloop invariant i39: n <= x + 8;\nloop invariant i40: n >= x + 8;\nloop invariant i41: n <= x + 9;\nloop invariant i42: n >= x + 9;\nloop invariant i43: n <= x + 10;\nloop invariant i44: n >= x + 10;\nloop invariant i45: n <= x + 11;\nloop invariant i46: n >= x + 11;\nloop invariant i47: n <= x + 12;\nloop invariant i48: n >= x + 12;\nloop invariant i49: n <= x + 13;\nloop invariant i50: n >= x + 13;\nloop invariant i51: n <= x + 14;\nloop invariant i52: n >= x + 14;\nloop invariant i53: n <= x + 15;\nloop invariant i54: n >= x + 15;\nloop invariant i55: n <= x + 16;\nloop invariant i56: n >= x + 16;\nloop invariant i57: n <= x + 17;\nloop invariant i58: n >= x + 17;\nloop invariant i59: n <= x + 18;\nloop invariant i60: n >= x + 18;\nloop invariant i61: n <= x + 19;\nloop invariant i62: n >= x + 19;\nloop invariant i63: n <= x + 20;\nloop invariant i64: n >= x + 20;\nloop invariant i65: n <= x + 21;\nloop invariant i66: n >= x + 21;\nloop invariant i67: n <= x + 22;\nloop invariant i68: n >= x + 22;\nloop invariant i69: n <= x + 23;\nloop invariant i70: n >= x + 23;\nloop invariant i71: n <= x + 24;\nloop invariant i72: n >= x + 24;\nloop invariant i73: n <= x + 25;\nloop invariant i74: n >= x + 25;\nloop invariant i75: n <= x + 26;\nloop invariant i76: n >= x + 26;\nloop invariant i77: n <= x + 27;\nloop invariant i78: n >= x + 27;\nloop invariant i79: n <= x + 28;\nloop invariant i80: n >= x + 28;\nloop invariant i81: n <= x + 29;\nloop invariant i82: n >= x + 29;\nloop invariant i83: n <= x + 30;\nloop invariant i84: n >= x + 30;\nloop invariant i85: n <= x + 31;\nloop invariant i86: n >= x + 31;\nloop invariant i87: n <= x + 32;\nloop invariant i88: n >= x + 32;\nloop invariant i89: n <= x + 33;\nloop invariant i90: n >= x + 33;\nloop invariant i91: n <= x + 34;\nloop invariant i92: n >= x + 34;\nloop invariant i93: n <= x + 35;\nloop invariant i94: n >= x + 35;\nloop invariant i95: n <= x + 36;\nloop invariant i96: n >= x + 36;\nloop invariant i97: n <= x + 37;\nloop invariant i98: n >= x + 37;\nloop invariant i99: n <= x + 38;\nloop invariant i100: n >= x + 38;\nloop invariant i101: n <= x + 39;\nloop invariant i102: n >= x + 39;\nloop invariant i103: n <= x + 40;\nloop invariant i104: n >= x + 40;\nloop invariant i105: n <= x + 41;\nloop invariant i106: n >= x + 41;\nloop invariant i107: n <= x + 42;\nloop invariant i108: n >= x + 42;\nloop invariant i109: n <= x + 43;\nloop invariant i110: n >= x + 43;\nloop invariant i111: n <= x + 44;\nloop invariant i112: n >= x + 44;\nloop invariant i113: n <= x + 45;\nloop invariant i114: n >= x + 45;\nloop invariant i115: n <= x + 46;\nloop invariant i116: n >= x + 46;\nloop invariant i117: n <= x + 47;\nloop invariant i118: n >= x + 47;\nloop invariant i119: n <= x + 48;\nloop invariant i120: n >= x + 48;\nloop invariant i121: n <= x + 49;\nloop invariant i122: n >= x + 49;\nloop invariant i123: n <= x + 50;\nloop invariant i124: n <= 100000;\nloop invariant i125: (x == n - 1) ==> (x < n);\nloop invariant i126: (x == n) ==> (x >= n);\nloop invariant i127: (x == n - 1) ==> (x <= n - 1);\nloop invariant i128: (x == n) ==> (x >= n + 1);\nloop invariant i129: (x == n - 1) ==> (x < n + 1);\nloop invariant i130: (x == n - 1) ==> (x <= n);\nloop invariant i131: i1;\nloop invariant i132: i2;\nloop invariant i133: i3;\nloop invariant i134: i4;\nloop invariant i135: i5;\nloop invariant i136: i6;\nloop invariant i137: i7;\nloop invariant i138: i8;\nloop invariant i139: i9;\nloop invariant i140: i10;\nloop invariant i141: i11;\nloop invariant i142: i12;\nloop invariant i143: i13;\nloop invariant i144: i14;\nloop invariant i145: i15;\nloop invariant i146: i16;\nloop invariant i147: i17;\nloop invariant i148: i18;\nloop invariant i149: i19;\nloop invariant i150: i20;\nloop invariant i151: i21;\nloop invariant i152: i22;\nloop invariant i153: i23;\nloop invariant i154: i24;\nloop invariant i155: i25;\nloop invariant i156: i26;\nloop invariant i157: i27;\nloop invariant i158: i28;\nloop invariant i159: i29;\nloop invariant i160: i30;\nloop invariant i161: i31;\nloop invariant i162: i32;\nloop invariant i163: i33;\nloop invariant i164: i34;\nloop invariant i165: i35;\nloop invariant i166: i36;\nloop invariant i167: i37;\nloop invariant i168: i38;\nloop invariant i169: i39;\nloop invariant i170: i40;\nloop invariant i171: i41;\nloop invariant i172: i42;\nloop invariant i173: i43;\nloop invariant i174: i44;\nloop invariant i175: i45;\nloop invariant i176: i46;\nloop invariant i177: i47;\nloop invariant i178: i48;\nloop invariant i179: i49;\nloop invariant i180: i50;\nloop invariant i181: i51;\nloop invariant i182: i52;\nloop invariant i183: i53;\nloop invariant i184: i54;\nloop invariant i185: i55;\nloop invariant i186: i56;\nloop invariant i187: i57;\nloop invariant i188: i58;\nloop invariant i189: i59;\nloop invariant i190: i60;\nloop invariant i191: i61;\nloop invariant i192: i62;\nloop invariant i193: i63;\nloop invariant i194: i64;\nloop invariant i195: i65;\nloop invariant i196: i66;\nloop invariant i197: i67;\nloop invariant i198: i68;\nloop invariant i199: i69;\nloop invariant i200: i70;\nloop invariant i201: i71;\nloop invariant i202: i72;\nloop invariant i203: i73;\nloop invariant i204: i74;\nloop invariant i205: i75;\nloop invariant i206: i76;\nloop invariant i207: i77;\nloop invariant i208: i78;\nloop invariant i209: i79;\nloop invariant i210: i80;\nloop invariant i211: i81;\nloop invariant i212: i82;\nloop invariant i213: i83;\nloop invariant i214: i84;\nloop invariant i215: i85;\nloop invariant i216: i86;\nloop invariant i217: i87;\nloop invariant i218: i88;\nloop invariant i219: i89;\nloop invariant i220: i90;\nloop invariant i221: i91;\nloop invariant i222: i92;\nloop invariant i223: i93;\nloop invariant i224: i94;\nloop invariant i225: i95;\nloop invariant i226: i96;\nloop invariant i227: i97;\nloop invariant i228: i98;\nloop invariant i229: i99;\nloop invariant i230: i100;\nloop invariant i231: i101;\nloop invariant i232: i102;\nloop invariant i233: i103;\nloop invariant i234: i104;\nloop invariant i235: i105;\nloop invariant i236: i106;\nloop invariant i237: i107;\nloop invariant i238: i108;\nloop invariant i239: i109;\nloop invariant i240: i110;\nloop invariant i241: i111;\nloop invariant i242: i112;\nloop invariant i243: i113;\nloop invariant i244: i114;\nloop invariant i245: i115;\nloop invariant i246: i116;\nloop invariant i247: i117;\nloop invariant i248: i118;\nloop invariant i249: i119;\nloop invariant i250: i120;\nloop invariant i251: i121;\nloop invariant i252: i122;\nloop invariant i253: i123;\nloop invariant i254: i124;\nloop invariant i255: i125;\nloop invariant i256: i126;\nloop invariant i257: i127;\nloop invariant i258: i128;\nloop invariant i259: i129;\nloop invariant i260: i130;\nloop invariant i261: i131;\nloop invariant i262: i132;\nloop invariant i263: i133;\nloop invariant i264: i134;\nloop invariant i265: i135;\nloop invariant i266: i136;\nloop invariant i267: i137;\nloop invariant i268: i138;\nloop invariant i269: i139;\nloop invariant i270: i140;\nloop invariant i271: i141;\nloop invariant i272: i142;\nloop invariant i273: i143;\nloop invariant i274: i144;\nloop invariant i275: i145;\nloop invariant i276: i146;\nloop invariant i277: i147;\nloop invariant i278: i148;\nloop invariant i279: i149;\nloop invariant i280: i150;\nloop invariant i281: i151;\nloop invariant i282: i152;\nloop invariant i283: i153;\nloop invariant i284: i154;\nloop invariant i285: i155;\nloop invariant i286: i156;\nloop invariant i287: i157;\nloop invariant i288: i158;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  /*@\nloop invariant i1: 0 <= x <= n-1;\nloop invariant i2: x >= 0;\nloop invariant i3: x <= n-1;\nloop invariant i4: x <= n;\nloop invariant i5: 0 <= x <= n - 1;\nloop invariant i6: x <= n - 1;\nloop invariant i7: x <= n - 2;\nloop invariant i8: 0 <= n <= 100;\nloop invariant i9: 0 <= x <= n;\nloop invariant i10: n >= 1;\nloop invariant i11: n == 0 ==> x == 0;\nloop invariant i12: n > 0 ==> x == n;\nloop invariant i13: x <= n-1 ==> x <= n-1;\nloop invariant i14: x >= n ==> x >= n;\nloop invariant i15: n >= 0;\nloop invariant i16: x = 0;\nloop invariant i17: x' = x + 1;\nloop invariant i18: x' <= n;\nloop invariant i19: x = n;\nloop invariant i20: x' = n+1;\nloop invariant i21: x' > n;\nloop invariant i22: x' <= n+1;\nloop invariant i23: n > 0;\nloop invariant i24: n >= x;\nloop invariant i25: n <= x + 1;\nloop invariant i26: n >= x + 1;\nloop invariant i27: n <= x + 2;\nloop invariant i28: n >= x + 2;\nloop invariant i29: n <= x + 3;\nloop invariant i30: n >= x + 3;\nloop invariant i31: n <= x + 4;\nloop invariant i32: n >= x + 4;\nloop invariant i33: n <= x + 5;\nloop invariant i34: n >= x + 5;\nloop invariant i35: n <= x + 6;\nloop invariant i36: n >= x + 6;\nloop invariant i37: n <= x + 7;\nloop invariant i38: n >= x + 7;\nloop invariant i39: n <= x + 8;\nloop invariant i40: n >= x + 8;\nloop invariant i41: n <= x + 9;\nloop invariant i42: n >= x + 9;\nloop invariant i43: n <= x + 10;\nloop invariant i44: n >= x + 10;\nloop invariant i45: n <= x + 11;\nloop invariant i46: n >= x + 11;\nloop invariant i47: n <= x + 12;\nloop invariant i48: n >= x + 12;\nloop invariant i49: n <= x + 13;\nloop invariant i50: n >= x + 13;\nloop invariant i51: n <= x + 14;\nloop invariant i52: n >= x + 14;\nloop invariant i53: n <= x + 15;\nloop invariant i54: n >= x + 15;\nloop invariant i55: n <= x + 16;\nloop invariant i56: n >= x + 16;\nloop invariant i57: n <= x + 17;\nloop invariant i58: n >= x + 17;\nloop invariant i59: n <= x + 18;\nloop invariant i60: n >= x + 18;\nloop invariant i61: n <= x + 19;\nloop invariant i62: n >= x + 19;\nloop invariant i63: n <= x + 20;\nloop invariant i64: n >= x + 20;\nloop invariant i65: n <= x + 21;\nloop invariant i66: n >= x + 21;\nloop invariant i67: n <= x + 22;\nloop invariant i68: n >= x + 22;\nloop invariant i69: n <= x + 23;\nloop invariant i70: n >= x + 23;\nloop invariant i71: n <= x + 24;\nloop invariant i72: n >= x + 24;\nloop invariant i73: n <= x + 25;\nloop invariant i74: n >= x + 25;\nloop invariant i75: n <= x + 26;\nloop invariant i76: n >= x + 26;\nloop invariant i77: n <= x + 27;\nloop invariant i78: n >= x + 27;\nloop invariant i79: n <= x + 28;\nloop invariant i80: n >= x + 28;\nloop invariant i81: n <= x + 29;\nloop invariant i82: n >= x + 29;\nloop invariant i83: n <= x + 30;\nloop invariant i84: n >= x + 30;\nloop invariant i85: n <= x + 31;\nloop invariant i86: n >= x + 31;\nloop invariant i87: n <= x + 32;\nloop invariant i88: n >= x + 32;\nloop invariant i89: n <= x + 33;\nloop invariant i90: n >= x + 33;\nloop invariant i91: n <= x + 34;\nloop invariant i92: n >= x + 34;\nloop invariant i93: n <= x + 35;\nloop invariant i94: n >= x + 35;\nloop invariant i95: n <= x + 36;\nloop invariant i96: n >= x + 36;\nloop invariant i97: n <= x + 37;\nloop invariant i98: n >= x + 37;\nloop invariant i99: n <= x + 38;\nloop invariant i100: n >= x + 38;\nloop invariant i101: n <= x + 39;\nloop invariant i102: n >= x + 39;\nloop invariant i103: n <= x + 40;\nloop invariant i104: n >= x + 40;\nloop invariant i105: n <= x + 41;\nloop invariant i106: n >= x + 41;\nloop invariant i107: n <= x + 42;\nloop invariant i108: n >= x + 42;\nloop invariant i109: n <= x + 43;\nloop invariant i110: n >= x + 43;\nloop invariant i111: n <= x + 44;\nloop invariant i112: n >= x + 44;\nloop invariant i113: n <= x + 45;\nloop invariant i114: n >= x + 45;\nloop invariant i115: n <= x + 46;\nloop invariant i116: n >= x + 46;\nloop invariant i117: n <= x + 47;\nloop invariant i118: n >= x + 47;\nloop invariant i119: n <= x + 48;\nloop invariant i120: n >= x + 48;\nloop invariant i121: n <= x + 49;\nloop invariant i122: n >= x + 49;\nloop invariant i123: n <= x + 50;\nloop invariant i124: n <= 100000;\nloop invariant i125: (x == n - 1) ==> (x < n);\nloop invariant i126: (x == n) ==> (x >= n);\nloop invariant i127: (x == n - 1) ==> (x <= n - 1);\nloop invariant i128: (x == n) ==> (x >= n + 1);\nloop invariant i129: (x == n - 1) ==> (x < n + 1);\nloop invariant i130: (x == n - 1) ==> (x <= n);\nloop invariant i131: i1;\nloop invariant i132: i2;\nloop invariant i133: i3;\nloop invariant i134: i4;\nloop invariant i135: i5;\nloop invariant i136: i6;\nloop invariant i137: i7;\nloop invariant i138: i8;\nloop invariant i139: i9;\nloop invariant i140: i10;\nloop invariant i141: i11;\nloop invariant i142: i12;\nloop invariant i143: i13;\nloop invariant i144: i14;\nloop invariant i145: i15;\nloop invariant i146: i16;\nloop invariant i147: i17;\nloop invariant i148: i18;\nloop invariant i149: i19;\nloop invariant i150: i20;\nloop invariant i151: i21;\nloop invariant i152: i22;\nloop invariant i153: i23;\nloop invariant i154: i24;\nloop invariant i155: i25;\nloop invariant i156: i26;\nloop invariant i157: i27;\nloop invariant i158: i28;\nloop invariant i159: i29;\nloop invariant i160: i30;\nloop invariant i161: i31;\nloop invariant i162: i32;\nloop invariant i163: i33;\nloop invariant i164: i34;\nloop invariant i165: i35;\nloop invariant i166: i36;\nloop invariant i167: i37;\nloop invariant i168: i38;\nloop invariant i169: i39;\nloop invariant i170: i40;\nloop invariant i171: i41;\nloop invariant i172: i42;\nloop invariant i173: i43;\nloop invariant i174: i44;\nloop invariant i175: i45;\nloop invariant i176: i46;\nloop invariant i177: i47;\nloop invariant i178: i48;\nloop invariant i179: i49;\nloop invariant i180: i50;\nloop invariant i181: i51;\nloop invariant i182: i52;\nloop invariant i183: i53;\nloop invariant i184: i54;\nloop invariant i185: i55;\nloop invariant i186: i56;\nloop invariant i187: i57;\nloop invariant i188: i58;\nloop invariant i189: i59;\nloop invariant i190: i60;\nloop invariant i191: i61;\nloop invariant i192: i62;\nloop invariant i193: i63;\nloop invariant i194: i64;\nloop invariant i195: i65;\nloop invariant i196: i66;\nloop invariant i197: i67;\nloop invariant i198: i68;\nloop invariant i199: i69;\nloop invariant i200: i70;\nloop invariant i201: i71;\nloop invariant i202: i72;\nloop invariant i203: i73;\nloop invariant i204: i74;\nloop invariant i205: i75;\nloop invariant i206: i76;\nloop invariant i207: i77;\nloop invariant i208: i78;\nloop invariant i209: i79;\nloop invariant i210: i80;\nloop invariant i211: i81;\nloop invariant i212: i82;\nloop invariant i213: i83;\nloop invariant i214: i84;\nloop invariant i215: i85;\nloop invariant i216: i86;\nloop invariant i217: i87;\nloop invariant i218: i88;\nloop invariant i219: i89;\nloop invariant i220: i90;\nloop invariant i221: i91;\nloop invariant i222: i92;\nloop invariant i223: i93;\nloop invariant i224: i94;\nloop invariant i225: i95;\nloop invariant i226: i96;\nloop invariant i227: i97;\nloop invariant i228: i98;\nloop invariant i229: i99;\nloop invariant i230: i100;\nloop invariant i231: i101;\nloop invariant i232: i102;\nloop invariant i233: i103;\nloop invariant i234: i104;\nloop invariant i235: i105;\nloop invariant i236: i106;\nloop invariant i237: i107;\nloop invariant i238: i108;\nloop invariant i239: i109;\nloop invariant i240: i110;\nloop invariant i241: i111;\nloop invariant i242: i112;\nloop invariant i243: i113;\nloop invariant i244: i114;\nloop invariant i245: i115;\nloop invariant i246: i116;\nloop invariant i247: i117;\nloop invariant i248: i118;\nloop invariant i249: i119;\nloop invariant i250: i120;\nloop invariant i251: i121;\nloop invariant i252: i122;\nloop invariant i253: i123;\nloop invariant i254: i124;\nloop invariant i255: i125;\nloop invariant i256: i126;\nloop invariant i257: i127;\nloop invariant i258: i128;\nloop invariant i259: i129;\nloop invariant i260: i130;\nloop invariant i261: i131;\nloop invariant i262: i132;\nloop invariant i263: i133;\nloop invariant i264: i134;\nloop invariant i265: i135;\nloop invariant i266: i136;\nloop invariant i267: i137;\nloop invariant i268: i138;\nloop invariant i269: i139;\nloop invariant i270: i140;\nloop invariant i271: i141;\nloop invariant i272: i142;\nloop invariant i273: i143;\nloop invariant i274: i144;\nloop invariant i275: i145;\nloop invariant i276: i146;\nloop invariant i277: i147;\nloop invariant i278: i148;\nloop invariant i279: i149;\nloop invariant i280: i150;\nloop invariant i281: i151;\nloop invariant i282: i152;\nloop invariant i283: i153;\nloop invariant i284: i154;\nloop invariant i285: i155;\nloop invariant i286: i156;\nloop invariant i287: i157;\nloop invariant i288: i158;\n*/\nwhile(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    \nreturn;\n\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; { { ERROR: {; \n//@ assert(\\false);\n}\n}\n}}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum03-2.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/cav/35.c"
        ],
        "skipped": [],
        "total": 14,
        "success_count": 4,
        "failure_count": 10,
        "success_rate": 0.2857142857142857
    }
}