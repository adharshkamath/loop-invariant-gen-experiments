{
    "logs": {
        "file": "../dataset/loop_invariants/code2inv/111.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant (sn == (i - 1));\nloop invariant (i - 1) <= n;\nloop invariant (i - 1) >= 1;\nloop invariant (sn + 1) == i;\nloop invariant (sn + 1) <= n;\nloop invariant (sn + 1) >= 1;\nloop invariant i <= n ==> (sn == (i - 1));\nloop invariant i <= n ==> (sn + 1) == i;\nloop invariant i <= n ==> (sn + 1) <= n;\nloop invariant i <= n ==> (sn + 1) >= 1;\nloop invariant (sn == (i - 1)) ==> (sn <= n);\nloop invariant (sn == (i - 1)) ==> (sn >= 0);\nloop invariant (sn + 1) == i ==> (sn <= n);\nloop invariant (sn + 1) == i ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (i <= n);\nloop invariant (i - 1) <= n ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (i <= n);\nloop invariant (sn + 1) >= 1 ==> (i >= 1);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (i <= n);\nloop invariant (sn + 1) <= n ==> (i >= 1);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (i <= n);\nloop invariant (sn + 1) >= 1 ==> (i >= 1);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (sn == (i - 1)) ==> (sn <= n);\nloop invariant (sn == (i - 1)) ==> (sn >= 0);\nloop invariant (sn + 1) == i ==> (sn <= n);\nloop invariant (sn + 1) == i ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) <= n ==> (i <= n);\nloop invariant (i - 1) <= n ==> (i >= 1);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 1;\nloop invariant sn <= i;\nloop invariant sn == (i - 1);\nloop invariant i == (n + 1);\nloop invariant sn == n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn < n ==> i <= n;\nloop invariant sn < n ==> i >= 1;\nloop invariant sn == n ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1;\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n;\nloop invariant sn < n ==> i <= n ==> sn <= n;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn == n - i + 1;\nloop invariant sn == 0 ==> i > n;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == n ==> i >= n;\nloop invariant sn == n ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i <= n;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant 0 <= sn;\nloop invariant sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - i + 1);\nloop invariant sn == (n - i);\nloop invariant sn == (i + sn);\nloop invariant sn == (i + n - i);\nloop invariant sn == n;\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 1;\nloop invariant sn >= 0;\nloop invariant sn == i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant i > 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
            "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant sn != 0 ==> sn == n;\nloop invariant sn != 0 ==> sn == i - 1;\n*/\n```",
            "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn == sn;\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\n*/\n```",
            "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant sn + i - 1 == n;\nloop invariant sn + i - 1 == n;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn + i - 1 == n ==> sn <= n;\nloop invariant sn + i - 1 == n ==> i <= n;\nloop invariant sn + i - 1 == n ==> sn + i - 1 <= n;\nloop invariant sn + i - 1 == n ==> sn + i - 1 >= 0;\nloop invariant sn + i - 1 == n ==> sn <= i;\nloop invariant sn + i - 1 == n ==> sn <= n;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant sn == n - (n - i + 1);\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 7,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant (sn == (i - 1));\nloop invariant (i - 1) <= n;\nloop invariant (i - 1) >= 1;\nloop invariant (sn + 1) == i;\nloop invariant (sn + 1) <= n;\nloop invariant (sn + 1) >= 1;\nloop invariant i <= n ==> (sn == (i - 1));\nloop invariant i <= n ==> (sn + 1) == i;\nloop invariant i <= n ==> (sn + 1) <= n;\nloop invariant i <= n ==> (sn + 1) >= 1;\nloop invariant (sn == (i - 1)) ==> (sn <= n);\nloop invariant (sn == (i - 1)) ==> (sn >= 0);\nloop invariant (sn + 1) == i ==> (sn <= n);\nloop invariant (sn + 1) == i ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (i <= n);\nloop invariant (i - 1) <= n ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (i <= n);\nloop invariant (sn + 1) >= 1 ==> (i >= 1);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (i <= n);\nloop invariant (sn + 1) <= n ==> (i >= 1);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (i <= n);\nloop invariant (sn + 1) >= 1 ==> (i >= 1);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (sn == (i - 1)) ==> (sn <= n);\nloop invariant (sn == (i - 1)) ==> (sn >= 0);\nloop invariant (sn + 1) == i ==> (sn <= n);\nloop invariant (sn + 1) == i ==> (sn >= 0);\nloop invariant (sn + 1) <= n ==> (sn <= n);\nloop invariant (sn + 1) <= n ==> (sn >= 0);\nloop invariant (sn + 1) >= 1 ==> (sn <= n);\nloop invariant (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant (i - 1) <= n ==> (i <= n);\nloop invariant (i - 1) <= n ==> (i >= 1);\nloop invariant (i - 1) >= 1 ==> (i <= n);\nloop invariant (i - 1) >= 1 ==> (i >= 1);\nloop invariant (i - 1) <= n ==> (sn <= n);\nloop invariant (i - 1) <= n ==> (sn >= 0);\nloop invariant (i - 1) >= 1 ==> (sn <= n);\nloop invariant (i - 1) >= 1 ==> (sn >= 0);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant (sn == (i - 1)) is partially proven to be inductive.\nloop invariant (i - 1) <= n is partially proven to be inductive.\nloop invariant (i - 1) >= 1 is preserved but not established.\nloop invariant (sn + 1) == i is partially proven to be inductive.\nloop invariant (sn + 1) <= n is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 is partially proven to be inductive.\nloop invariant i <= n ==> (sn == (i - 1)) is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) == i is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) <= n is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) >= 1 is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) == i ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) == i ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (i <= n) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (i >= 1) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (i <= n) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (i >= 1) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (sn <= n) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (sn <= n) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (i <= n) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (i >= 1) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (i <= n) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (i >= 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: (sn == (i - 1));\n\n\nloop invariant i6: (sn + 1) == i;\n\nloop invariant i8: (sn + 1) >= 1;\nloop invariant i9: i <= n ==> (sn == (i - 1));\nloop invariant i10: i <= n ==> (sn + 1) == i;\nloop invariant i11: i <= n ==> (sn + 1) <= n;\nloop invariant i12: i <= n ==> (sn + 1) >= 1;\n\nloop invariant i14: (sn == (i - 1)) ==> (sn >= 0);\n\nloop invariant i16: (sn + 1) == i ==> (sn >= 0);\nloop invariant i17: (sn + 1) <= n ==> (sn <= n);\nloop invariant i18: (sn + 1) <= n ==> (sn >= 0);\n\nloop invariant i20: (sn + 1) >= 1 ==> (sn >= 0);\n\nloop invariant i22: (i - 1) >= 1 ==> (i >= 1);\n\nloop invariant i24: (i - 1) <= n ==> (i >= 1);\nloop invariant i25: (i - 1) <= n ==> (sn <= n);\nloop invariant i26: (i - 1) <= n ==> (sn >= 0);\nloop invariant i27: (i - 1) >= 1 ==> (sn <= n);\nloop invariant i28: (i - 1) >= 1 ==> (sn >= 0);\n\nloop invariant i30: (sn + 1) >= 1 ==> (i >= 1);\nloop invariant i31: (sn + 1) <= n ==> (i <= n);\nloop invariant i32: (sn + 1) <= n ==> (i >= 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 1;\nloop invariant sn <= i;\nloop invariant sn == (i - 1);\nloop invariant i == (n + 1);\nloop invariant sn == n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 1 is preserved but not established.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == (n + 1) is partially proven to be inductive.\nloop invariant sn == n is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn <= i;\nloop invariant i4: sn == (i - 1);\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn == i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: i >= 1;\n\nloop invariant i6: sn == i - 1;\nloop invariant i7: sn <= i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn < n ==> i <= n;\nloop invariant sn < n ==> i >= 1;\nloop invariant sn == n ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1;\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n;\nloop invariant sn < n ==> i <= n ==> sn <= n;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n is partially proven to be inductive.\nloop invariant sn < n ==> i >= 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 is established but not preserved.\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == 0 ==> i == 1;\n\nloop invariant i6: sn < n ==> i >= 1;\n\nloop invariant i8: sn == n ==> i == n + 1 ==> sn == i - 1;\nloop invariant i9: sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n;\nloop invariant i10: sn < n ==> i <= n ==> sn <= n;\nloop invariant i11: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1;\nloop invariant i12: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0;\nloop invariant i13: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n;\nloop invariant i14: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0;\nloop invariant i15: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0;\nloop invariant i16: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i17: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i18: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i19: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i20: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i21: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i22: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i23: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i24: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i25: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is established but not preserved.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn == n - i + 1;\nloop invariant sn == 0 ==> i > n;\nloop invariant sn == 0 ==> i == 1;\nloop invariant sn == n ==> i >= n;\nloop invariant sn == n ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i <= n;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == n - i + 1 is preserved but not established.\nloop invariant sn == 0 ==> i > n is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn == n ==> i >= n is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i <= n is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == i - 1;\n\n\nloop invariant i7: sn == 0 ==> i == 1;\nloop invariant i8: sn == n ==> i >= n;\nloop invariant i9: sn == n ==> i == n + 1;\n\nloop invariant i11: sn == n ==> i == n + 1 ==> i == n + 1;\nloop invariant i12: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i13: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i14: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i15: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i16: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i17: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i18: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i19: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i20: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i21: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i22: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i23: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i;\nloop invariant i <= n;\nloop invariant 0 <= sn;\nloop invariant sn <= n;\nloop invariant sn == (i - 1);\nloop invariant sn == (n - i + 1);\nloop invariant sn == (n - i);\nloop invariant sn == (i + sn);\nloop invariant sn == (i + n - i);\nloop invariant sn == n;\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\nloop invariant sn == (n - (n - i));\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= n is preserved but not established.\nloop invariant 0 <= sn is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant sn == (n - i + 1) is preserved but not established.\nloop invariant sn == (n - i) is partially proven to be inductive.\nloop invariant sn == (i + sn) is partially proven to be inductive.\nloop invariant sn == (i + n - i) is partially proven to be inductive.\nloop invariant sn == n is partially proven to be inductive.\nloop invariant sn == (n - (n - i)) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: 0 <= sn;\n\nloop invariant i5: sn == (i - 1);\n\n\n\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant n >= 1;\nloop invariant sn >= 0;\nloop invariant sn == i - 1;\nloop invariant i <= n + 1;\nloop invariant sn <= n;\nloop invariant sn <= i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\nloop invariant i4: sn == i - 1;\n\n\nloop invariant i7: sn <= i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n+1;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant i > 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant i > 0 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: i > 0;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant i == sn + 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: i == sn + 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant i >= 1;\nloop invariant i <= n;\nloop invariant sn >= 0;\nloop invariant sn <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is neither established nor preserved.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is established but not preserved.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: sn >= 0;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n;\nloop invariant i >= 1;\nloop invariant sn >= 0;\nloop invariant sn <= i - 1;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant sn != 0 ==> sn == n;\nloop invariant sn != 0 ==> sn == i - 1;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is neither established nor preserved.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn != 0 ==> sn == n is established but not preserved.\nloop invariant sn != 0 ==> sn == i - 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: i >= 1;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= i - 1;\n\nloop invariant i6: sn == i - 1;\n\nloop invariant i8: sn != 0 ==> sn == i - 1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 1 <= i <= n;\nloop invariant 0 <= sn <= n;\nloop invariant sn == i - 1;\nloop invariant sn == sn;\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\nloop invariant sn == n - (n - i);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == sn is partially proven to be inductive.\nloop invariant sn == n - (n - i) is preserved but not established.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i - 1;\nloop invariant i4: sn == sn;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 < i <= n;\nloop invariant sn + i - 1 == n;\nloop invariant sn + i - 1 == n;\nloop invariant i <= n;\nloop invariant sn <= n;\nloop invariant sn + i - 1 == n ==> sn <= n;\nloop invariant sn + i - 1 == n ==> i <= n;\nloop invariant sn + i - 1 == n ==> sn + i - 1 <= n;\nloop invariant sn + i - 1 == n ==> sn + i - 1 >= 0;\nloop invariant sn + i - 1 == n ==> sn <= i;\nloop invariant sn + i - 1 == n ==> sn <= n;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 < i <= n is preserved but not established.\nloop invariant sn + i - 1 == n is preserved but not established.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> i <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn + i - 1 <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn + i - 1 >= 0 is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn <= i is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: sn + i - 1 == n ==> sn + i - 1 <= n;\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= i <= n + 1;\nloop invariant sn >= 0;\nloop invariant sn <= n;\nloop invariant i <= n + 1;\nloop invariant sn == i - 1;\nloop invariant sn == n - (n - i + 1);\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn == n - (n - i + 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn >= 0;\n\n\nloop invariant i5: sn == i - 1;\nloop invariant i6: sn == n - (n - i + 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 1 <= i <= n is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant (sn == (i - 1)) is partially proven to be inductive.\nloop invariant (i - 1) <= n is partially proven to be inductive.\nloop invariant (i - 1) >= 1 is preserved but not established.\nloop invariant (sn + 1) == i is partially proven to be inductive.\nloop invariant (sn + 1) <= n is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 is partially proven to be inductive.\nloop invariant i <= n ==> (sn == (i - 1)) is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) == i is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) <= n is partially proven to be inductive.\nloop invariant i <= n ==> (sn + 1) >= 1 is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) == i ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) == i ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (sn <= n) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (i <= n) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (i >= 1) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (i <= n) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (i >= 1) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (sn <= n) is partially proven to be inductive.\nloop invariant (i - 1) <= n ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (sn <= n) is partially proven to be inductive.\nloop invariant (i - 1) >= 1 ==> (sn >= 0) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (i <= n) is partially proven to be inductive.\nloop invariant (sn + 1) >= 1 ==> (i >= 1) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (i <= n) is partially proven to be inductive.\nloop invariant (sn + 1) <= n ==> (i >= 1) is partially proven to be inductive.\nloop invariant 0 <= i <= n + 1 is partially proven to be inductive.\nloop invariant sn >= 1 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant i == (n + 1) is partially proven to be inductive.\nloop invariant sn == n is partially proven to be inductive.\nloop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= n is partially proven to be inductive.\nloop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n is partially proven to be inductive.\nloop invariant sn < n ==> i >= 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn == n - i + 1 is partially proven to be inductive.\nloop invariant sn == 0 ==> i > n is partially proven to be inductive.\nloop invariant sn == n ==> i >= n is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i <= n is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant 0 <= sn is partially proven to be inductive.\nloop invariant sn == (n - i + 1) is partially proven to be inductive.\nloop invariant sn == (n - i) is partially proven to be inductive.\nloop invariant sn == (i + sn) is partially proven to be inductive.\nloop invariant sn == (i + n - i) is partially proven to be inductive.\nloop invariant sn == (n - (n - i)) is partially proven to be inductive.\nloop invariant n >= 1 is partially proven to be inductive.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant 1 <= i <= n+1 is partially proven to be inductive.\nloop invariant i > 0 is partially proven to be inductive.\nloop invariant i == sn + 1 is partially proven to be inductive.\nloop invariant sn != 0 ==> sn == n is partially proven to be inductive.\nloop invariant sn != 0 ==> sn == i - 1 is partially proven to be inductive.\nloop invariant sn == sn is partially proven to be inductive.\nloop invariant sn == n - (n - i) is partially proven to be inductive.\nloop invariant 0 < i <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> i <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn + i - 1 <= n is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn + i - 1 >= 0 is partially proven to be inductive.\nloop invariant sn + i - 1 == n ==> sn <= i is partially proven to be inductive.\nloop invariant sn == n - (n - i + 1) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= n;\nloop invariant i2: 0 <= sn <= n;\nloop invariant i3: (sn == (i - 1));\nloop invariant i4: (i - 1) <= n;\nloop invariant i5: (i - 1) >= 1;\nloop invariant i6: (sn + 1) == i;\nloop invariant i7: (sn + 1) <= n;\nloop invariant i8: (sn + 1) >= 1;\nloop invariant i9: i <= n ==> (sn == (i - 1));\nloop invariant i10: i <= n ==> (sn + 1) == i;\nloop invariant i11: i <= n ==> (sn + 1) <= n;\nloop invariant i12: i <= n ==> (sn + 1) >= 1;\nloop invariant i13: (sn == (i - 1)) ==> (sn <= n);\nloop invariant i14: (sn == (i - 1)) ==> (sn >= 0);\nloop invariant i15: (sn + 1) == i ==> (sn <= n);\nloop invariant i16: (sn + 1) == i ==> (sn >= 0);\nloop invariant i17: (sn + 1) <= n ==> (sn <= n);\nloop invariant i18: (sn + 1) <= n ==> (sn >= 0);\nloop invariant i19: (sn + 1) >= 1 ==> (sn <= n);\nloop invariant i20: (sn + 1) >= 1 ==> (sn >= 0);\nloop invariant i21: (i - 1) >= 1 ==> (i <= n);\nloop invariant i22: (i - 1) >= 1 ==> (i >= 1);\nloop invariant i23: (i - 1) <= n ==> (i <= n);\nloop invariant i24: (i - 1) <= n ==> (i >= 1);\nloop invariant i25: (i - 1) <= n ==> (sn <= n);\nloop invariant i26: (i - 1) <= n ==> (sn >= 0);\nloop invariant i27: (i - 1) >= 1 ==> (sn <= n);\nloop invariant i28: (i - 1) >= 1 ==> (sn >= 0);\nloop invariant i29: (sn + 1) >= 1 ==> (i <= n);\nloop invariant i30: (sn + 1) >= 1 ==> (i >= 1);\nloop invariant i31: (sn + 1) <= n ==> (i <= n);\nloop invariant i32: (sn + 1) <= n ==> (i >= 1);\nloop invariant i33: 0 <= i <= n + 1;\nloop invariant i34: sn >= 1;\nloop invariant i35: sn <= i;\nloop invariant i36: sn == (i - 1);\nloop invariant i37: i == (n + 1);\nloop invariant i38: sn == n;\nloop invariant i39: 0 <= i <= n;\nloop invariant i40: sn >= 0;\nloop invariant i41: sn <= n;\nloop invariant i42: i >= 1;\nloop invariant i43: i <= n;\nloop invariant i44: sn == i - 1;\nloop invariant i45: sn <= i - 1;\nloop invariant i46: sn == 0 ==> i == 1;\nloop invariant i47: sn < n ==> i <= n;\nloop invariant i48: sn < n ==> i >= 1;\nloop invariant i49: sn == n ==> i == n + 1;\nloop invariant i50: sn == n ==> i == n + 1 ==> sn == i - 1;\nloop invariant i51: sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n;\nloop invariant i52: sn < n ==> i <= n ==> sn <= n;\nloop invariant i53: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1;\nloop invariant i54: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0;\nloop invariant i55: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n;\nloop invariant i56: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0;\nloop invariant i57: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0;\nloop invariant i58: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i59: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i60: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i61: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i62: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i63: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i64: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i65: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i66: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i67: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i68: sn == n - i + 1;\nloop invariant i69: sn == 0 ==> i > n;\nloop invariant i70: sn == n ==> i >= n;\nloop invariant i71: sn == n ==> i == n + 1 ==> i <= n;\nloop invariant i72: sn == n ==> i == n + 1 ==> i == n + 1;\nloop invariant i73: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i74: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i75: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i76: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i77: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i78: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i79: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i80: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i81: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i82: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i83: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i84: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i85: 0 <= i;\nloop invariant i86: 0 <= sn;\nloop invariant i87: sn == (n - i + 1);\nloop invariant i88: sn == (n - i);\nloop invariant i89: sn == (i + sn);\nloop invariant i90: sn == (i + n - i);\nloop invariant i91: sn == (n - (n - i));\nloop invariant i92: n >= 1;\nloop invariant i93: i <= n + 1;\nloop invariant i94: 1 <= i <= n+1;\nloop invariant i95: i > 0;\nloop invariant i96: i == sn + 1;\nloop invariant i97: sn != 0 ==> sn == n;\nloop invariant i98: sn != 0 ==> sn == i - 1;\nloop invariant i99: sn == sn;\nloop invariant i100: sn == n - (n - i);\nloop invariant i101: 0 < i <= n;\nloop invariant i102: sn + i - 1 == n;\nloop invariant i103: sn + i - 1 == n ==> sn <= n;\nloop invariant i104: sn + i - 1 == n ==> i <= n;\nloop invariant i105: sn + i - 1 == n ==> sn + i - 1 <= n;\nloop invariant i106: sn + i - 1 == n ==> sn + i - 1 >= 0;\nloop invariant i107: sn + i - 1 == n ==> sn <= i;\nloop invariant i108: sn == n - (n - i + 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: (sn == (i - 1));\n\n\nloop invariant i6: (sn + 1) == i;\n\nloop invariant i8: (sn + 1) >= 1;\nloop invariant i9: i <= n ==> (sn == (i - 1));\nloop invariant i10: i <= n ==> (sn + 1) == i;\nloop invariant i11: i <= n ==> (sn + 1) <= n;\nloop invariant i12: i <= n ==> (sn + 1) >= 1;\n\nloop invariant i14: (sn == (i - 1)) ==> (sn >= 0);\n\nloop invariant i16: (sn + 1) == i ==> (sn >= 0);\nloop invariant i17: (sn + 1) <= n ==> (sn <= n);\nloop invariant i18: (sn + 1) <= n ==> (sn >= 0);\n\nloop invariant i20: (sn + 1) >= 1 ==> (sn >= 0);\n\nloop invariant i22: (i - 1) >= 1 ==> (i >= 1);\n\nloop invariant i24: (i - 1) <= n ==> (i >= 1);\nloop invariant i25: (i - 1) <= n ==> (sn <= n);\nloop invariant i26: (i - 1) <= n ==> (sn >= 0);\nloop invariant i27: (i - 1) >= 1 ==> (sn <= n);\nloop invariant i28: (i - 1) >= 1 ==> (sn >= 0);\n\nloop invariant i30: (sn + 1) >= 1 ==> (i >= 1);\nloop invariant i31: (sn + 1) <= n ==> (i <= n);\nloop invariant i32: (sn + 1) <= n ==> (i >= 1);\n\n\nloop invariant i35: sn <= i;\nloop invariant i36: sn == (i - 1);\n\n\n\nloop invariant i40: sn >= 0;\n\nloop invariant i42: i >= 1;\n\nloop invariant i44: sn == i - 1;\nloop invariant i45: sn <= i - 1;\nloop invariant i46: sn == 0 ==> i == 1;\nloop invariant i47: sn < n ==> i <= n;\nloop invariant i48: sn < n ==> i >= 1;\nloop invariant i49: sn == n ==> i == n + 1;\nloop invariant i50: sn == n ==> i == n + 1 ==> sn == i - 1;\nloop invariant i51: sn == n ==> i == n + 1 ==> sn == i - 1 ==> sn == n;\nloop invariant i52: sn < n ==> i <= n ==> sn <= n;\nloop invariant i53: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1;\nloop invariant i54: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0;\nloop invariant i55: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n;\nloop invariant i56: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0;\nloop invariant i57: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0;\nloop invariant i58: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i59: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i60: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i61: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i62: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i63: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i64: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i65: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i66: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\nloop invariant i67: sn < n ==> i <= n ==> sn <= n ==> sn == 0 ==> i == 1 ==> sn == 0 ==> sn <= n ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0 ==> sn == 0;\n\n\nloop invariant i70: sn == n ==> i >= n;\n\nloop invariant i72: sn == n ==> i == n + 1 ==> i == n + 1;\nloop invariant i73: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i74: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i75: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i76: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i77: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i78: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i79: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i80: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i81: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i82: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i83: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i84: sn == n ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1 ==> i == n + 1;\nloop invariant i85: 0 <= i;\nloop invariant i86: 0 <= sn;\n\n\n\n\n\n\n\n\nloop invariant i95: i > 0;\nloop invariant i96: i == sn + 1;\n\nloop invariant i98: sn != 0 ==> sn == i - 1;\nloop invariant i99: sn == sn;\n\n\n\nloop invariant i103: sn + i - 1 == n ==> sn <= n;\n\nloop invariant i105: sn + i - 1 == n ==> sn + i - 1 <= n;\nloop invariant i106: sn + i - 1 == n ==> sn + i - 1 >= 0;\nloop invariant i107: sn + i - 1 == n ==> sn <= i;\nloop invariant i108: sn == n - (n - i + 1);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c"
        ],
        "skipped": [],
        "total": 7,
        "success_count": 2,
        "failure_count": 5,
        "success_rate": 0.2857142857142857
    }
}