{
    "logs": {
        "file": "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c",
        "benchmark_code": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
        "success": true,
        "annotation_blocks": [
            "```\n/*@\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 <= -50;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant v1 - v2 + v3 >= -v2;\nloop invariant v1 + v3 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant t <= 5;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant 5 * t + 75 >= x2;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant 0 <= y <= 100000 ==> 0 <= y + 1 <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * (y + 1) / 2) ==> x >= (1 + (y - 1) * y / 2 + (y - 1));\nloop invariant v1 - v3 >= 0 ==> v2 - v1 - v3 >= 0 ==> v2 - (v1 + v3) >= 0 ==> v2 + 2*t >= (v1 + v3) + 2*t ==> v2 + 2*t >= v1 + v3;\nloop invariant v2 + 2*t >= v1 + v3 ==> v2 + 2*t - 5 >= (v1 + v3) - 5 ==> v2 + 2*t - 5 >= v1 - v3;\nloop invariant 5*t + 75 >= x2 ==> 5*(t + 1) + 75 >= x2 + 5 ==> 5*(t + 1) + 75 >= x2 + 5;\nloop invariant v2 <= 6 ==> v2 + 1 <= 7;\nloop invariant v3 >= 0 ==> v3 >= 0;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 - 6 >= 0 - 6 ==> v2 >= -6;\nloop invariant x2 + 5*t >= 75 ==> x2 + 5*(t + 1) >= 75 + 5 ==> x2 + 5*(t + 1) >= 80;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t - 2 >= 0 - 2 ==> v1 - 2*v2 + v3 + 2*t - 2 >= -2;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 - 1 >= 0 - 1 ==> v1 - v3 - 1 >= -1;\nloop invariant x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v2;\nloop invariant x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v3;\nloop invariant 0 <= y <= 100000 ==> 0 <= 100000 <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (100000 - 1) * 100000 / 2) ==> x >= 25000000000;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant v2 + 2*t >= v1 + v3 ==> v2 + 2*0 >= v1 + v3 ==> v2 >= v1 + v3;\nloop invariant 5*t + 75 >= x2 ==> 5*0 + 75 >= x2 ==> 75 >= x2;\nloop invariant v2 <= 6 ==> v2 <= 6;\nloop invariant v3 >= 0 ==> v3 >= 0;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 6 <= v2 <= 11;\nloop invariant 0 <= v3 <= 50;\nloop invariant 100 <= x1 <= 105;\nloop invariant 75 <= x2 <= 80;\nloop invariant -50 <= x3 <= 0;\nloop invariant 0 <= t <= 12;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v3 >= 0;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant 2*x2 - x1 - x3 <= 0;\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 <= -50;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 + v1 >= x2 + v2;\nloop invariant x1 + v1 >= x3 + v3;\nloop invariant x2 + v2 >= x3 + v3;\nloop invariant x1 + v1 <= x2 + v2;\nloop invariant x1 + v1 <= x3 + v3;\nloop invariant x2 + v2 <= x3 + v3;\nloop invariant x1 + v1 >= x2 + v2 + v3;\nloop invariant x1 + v1 >= x3 + v2 + v3;\nloop invariant x2 + v2 >= x3 + v2 + v3;\nloop invariant x1 + v1 <= x2 + v2 + v3;\nloop invariant x1 + v1 <= x3 + v2 + v3;\nloop invariant x2 + v2 <= x3 + v2 + v3;\nloop invariant x1 + v1 >= x2 + v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + v2 + 2*v3;\nloop invariant x1 + v1 >= x2 + 2*v2 + v3;\nloop invariant x1 + v1 >= x3 + 2*v2 + v3;\nloop invariant x2 + v2 >= x3 + 2*v2 + v3;\nloop invariant x1 + v1 <= x2 + 2*v2 + v3;\nloop invariant x1 + v1 <= x3 + 2*v2 + v3;\nloop invariant x2 + v2 <= x3 + 2*v2 + v3;\nloop invariant x1 + v1 >= x2 + 2*v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + 2*v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + 2*v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + 2*v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + 2*v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + 2*v2 + 2*v3;\nloop invariant x1 + v1 >= x2 + 3*v2 + v3;\nloop invariant x1 + v1 >= x3 + 3*v2 + v3;\nloop invariant x2 + v2 >= x3 + 3*v2 + v3;\nloop invariant x1 + v1 <= x2 + 3*v2 + v3;\nloop invariant x1 + v1 <= x3 + 3*v2 + v3;\nloop invariant x2 + v2 <= x3 + 3*v2 + v3;\nloop invariant x1 + v1 >= x2 + 3*v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + 3*v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + 3*v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + 3*v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + 3*v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + 3*v2 + 2*v3;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant x2 >= 75;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x2 <= 75;\nloop invariant -50 <= x3 <= 50;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant 0 <= t;\nloop invariant unknown_int() ==> (v2 +5 >=0);\nloop invariant unknown_int() ==> (v2 <= 5);\nloop invariant (!unknown_int()) ==> (2* x2 - x1 - x3>=0);\nloop invariant (!unknown_int()) ==> (2* x2 - x1 - x3 <=0);\nloop invariant (unknown_int() ==> (2* x2 - x1 - x3>=0)) => (!unknown_int() ==> (2* x2 - x1 - x3 <=0));\nloop invariant unknown_int() ==> (x1 = x1+v1);\nloop invariant unknown_int() ==> (x3 = x3+v3);\nloop invariant unknown_int() ==> (x2 = x2+v2);\nloop invariant unknown_int() ==> (v2 = v2-1);\nloop invariant (!unknown_int()) ==> (x1 = x1+v1);\nloop invariant (!unknown_int()) ==> (x3 = x3+v3);\nloop invariant (!unknown_int()) ==> (x2 = x2+v2);\nloop invariant (!unknown_int()) ==> (v2 = v2+1);\nloop invariant unknown_int() ==> (t = t+1);\nloop invariant (!unknown_int()) ==> (t = t+1);\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant unknown_int() ==> v2 <= 5;\nloop invariant unknown_int() ==> v3 >= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant unknown_int() ==> 5*t  + 75 >= x2;\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> v2 <= 6;\nloop invariant (!unknown_int()) ==> v2 <= 6;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> x2 + 5*t >= 75;\nloop invariant unknown_int() ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant (!unknown_int()) ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant unknown_int() ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant unknown_int() ==> v1 - v3 >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant (!unknown_int()) ==> v3  >= 0;\nloop invariant unknown_int() ==> 5*t  + 75 >= x2;\nloop invariant (!unknown_int()) ==> 5*t  + 75 >= x2;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> x2 + 5*t >= 75;\nloop invariant unknown_int() ==> v2 <= 6;\nloop invariant (!unknown_int()) ==> v2 <= 6;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant (!unknown_int()) ==> v1 <= 5;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant (!unknown_int()) ==> v3  >= 0;\n*/\n```",
            "```\n/*@\n\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 + 6 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 + 6 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v3 >= 0;\nloop invariant t == 0 ==> v2 + 5 >= 0;\nloop invariant t == 0 ==> v2 <= 5;\nloop invariant t == 0 ==> v2 + 6 >= 0;\nloop invariant t == 0 ==> v3 >= 0;\nloop invariant t > 0 ==> v2 + 5 >= 0;\nloop invariant t > 0 ==> v2 <= 5;\nloop invariant t > 0 ==> v2 + 6 >= 0;\nloop invariant t > 0 ==> v3 >= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0;\nloop invariant unknown_int() ==> v2 <= 5;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> v3 >= 0;\nloop invariant !unknown_int() ==> v2 + 5 >= 0;\nloop invariant !unknown_int() ==> v2 <= 5;\nloop invariant !unknown_int() ==> v2 + 6 >= 0;\nloop invariant !unknown_int() ==> v3 >= 0;\nloop invariant unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant !unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant !unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant !unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant !unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= x3 <= -50;\nloop invariant 0 <= v3 <= 100000;\nloop invariant x1 >= -50;\nloop invariant x2 >= 75;\nloop invariant x1 + x2 >= -25;\nloop invariant v1 + v2 + v3 >= -100000;\nloop invariant 2*v2 + 2*t >= -100000;\nloop invariant v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 <= 100000;\nloop invariant 0 <= x3 <= -50;\nloop invariant 0 <= v3 <= 100000;\nloop invariant x1 >= -50;\nloop invariant x2 >= 75;\nloop invariant x1 + x2 >= -25;\nloop invariant v1 + v2 + v3 >= -100000;\nloop invariant 2*v2 + 2*t >= -100000;\nloop invariant v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 <= 100000;\n*/\n```",
            "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= v2 + 6 - v1 + v3;\nloop invariant 0 <= x3 <= v3;\nloop invariant 0 <= x1 <= 100 + v1;\nloop invariant 0 <= x2 <= 75 + v2;\nloop invariant v1 <= 5;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 == t;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 >= 0;\nloop invariant 2*x2 - x1 - x3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 >= 0 ==> 2*x2 - x1 - x3 >= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> 2*x2 - x1 - x3 <= 0;\nloop invariant 5*t + 75 >= x2 ==> x2 >= 5*t + 75;\nloop invariant v2 + 6 >= 0 ==> v2 >= -6;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 >= v3;\nloop invariant v1 <= 5 ==> v1 + v3 >= 0;\nloop invariant v2 <= 5 ==> v2 + v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\n*/\n```"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 <= -50;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2*(x2 + v2*t) >= x1 + x3;\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 100 is partially proven to be inductive.\nloop invariant x2 >= 75 is partially proven to be inductive.\nloop invariant x3 <= -50 is established but not preserved.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant v2 >= 0 is established but not preserved.\nloop invariant v2 <= 5 is established but not preserved.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2*(x2 + v2*t) >= x1 + x3 is established but not preserved.\nloop invariant 2*(x2 + v2*t) - x1 - x3 >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: x1 >= 100;\n\n\nloop invariant i4: v3 >= 0;\nloop invariant i5: v1 <= 5;\n\n\n\nloop invariant i9: 2*v2 + 2*t >= v1 + v3;\nloop invariant i10: 5*t + 75 >= x2;\nloop invariant i11: v2 + 6 >= 0;\nloop invariant i12: v2 <= 6;\nloop invariant i13: x2 + 5*t >= 75;\nloop invariant i14: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i15: v1 - v3 >= 0;\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant v1 - v2 + v3 >= -v2;\nloop invariant v1 + v3 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant v2 + 6 >= 0;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant t <= 5;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant 5 * t + 75 >= x2;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant x2 + 5 * t >= 75;\nloop invariant x2 + 5 * t <= 125;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is established but not preserved.\nloop invariant 0 <= t <= 5 is established but not preserved.\nloop invariant v1 - v2 + v3 >= -v2 is partially proven to be inductive.\nloop invariant v1 + v3 >= 0 is partially proven to be inductive.\nloop invariant 2 * v2 + 2 * t >= v1 + v3 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 >= 0 is established but not preserved.\nloop invariant t <= 5 is partially proven to be inductive.\nloop invariant x2 + 5 * t >= 75 is partially proven to be inductive.\nloop invariant x2 + 5 * t <= 125 is partially proven to be inductive.\nloop invariant 5 * t + 75 >= x2 is partially proven to be inductive.\nAssertion v1 <= 5: Unproven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Unproven\nAssertion v1 - v3 >= 0: Unproven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: v1 - v2 + v3 >= -v2;\nloop invariant i4: v1 + v3 >= 0;\nloop invariant i5: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i6: v2 + 6 >= 0;\nloop invariant i7: v2 <= 6;\nloop invariant i8: v3 >= 0;\n\n\nloop invariant i11: x2 + 5 * t >= 75;\n\nloop invariant i13: 5 * t + 75 >= x2;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 11,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant 0 <= y <= 100000 ==> 0 <= y + 1 <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * (y + 1) / 2) ==> x >= (1 + (y - 1) * y / 2 + (y - 1));\nloop invariant v1 - v3 >= 0 ==> v2 - v1 - v3 >= 0 ==> v2 - (v1 + v3) >= 0 ==> v2 + 2*t >= (v1 + v3) + 2*t ==> v2 + 2*t >= v1 + v3;\nloop invariant v2 + 2*t >= v1 + v3 ==> v2 + 2*t - 5 >= (v1 + v3) - 5 ==> v2 + 2*t - 5 >= v1 - v3;\nloop invariant 5*t + 75 >= x2 ==> 5*(t + 1) + 75 >= x2 + 5 ==> 5*(t + 1) + 75 >= x2 + 5;\nloop invariant v2 <= 6 ==> v2 + 1 <= 7;\nloop invariant v3 >= 0 ==> v3 >= 0;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 - 6 >= 0 - 6 ==> v2 >= -6;\nloop invariant x2 + 5*t >= 75 ==> x2 + 5*(t + 1) >= 75 + 5 ==> x2 + 5*(t + 1) >= 80;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t - 2 >= 0 - 2 ==> v1 - 2*v2 + v3 + 2*t - 2 >= -2;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 - 1 >= 0 - 1 ==> v1 - v3 - 1 >= -1;\nloop invariant x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v2;\nloop invariant x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v3;\nloop invariant 0 <= y <= 100000 ==> 0 <= 100000 <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (100000 - 1) * 100000 / 2) ==> x >= 25000000000;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant v2 + 2*t >= v1 + v3 ==> v2 + 2*0 >= v1 + v3 ==> v2 >= v1 + v3;\nloop invariant 5*t + 75 >= x2 ==> 5*0 + 75 >= x2 ==> 75 >= x2;\nloop invariant v2 <= 6 ==> v2 <= 6;\nloop invariant v3 >= 0 ==> v3 >= 0;\nloop invariant v2 + 6 >= 0 ==> v2 + 6 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: v1 - v3 >= 0;\n\nloop invariant i5: 5*t + 75 >= x2;\nloop invariant i6: v2 <= 6;\nloop invariant i7: v3 >= 0;\nloop invariant i8: v2 + 6 >= 0;\nloop invariant i9: x2 + 5*t >= 75;\nloop invariant i10: v1 - 2*v2 + v3 + 2*t >= 0;\n\nloop invariant i12: x1 >= x3;\n\n\n\nloop invariant i16: v1 - v3 >= 0 ==> v2 - v1 - v3 >= 0 ==> v2 - (v1 + v3) >= 0 ==> v2 + 2*t >= (v1 + v3) + 2*t ==> v2 + 2*t >= v1 + v3;\n\nloop invariant i18: 5*t + 75 >= x2 ==> 5*(t + 1) + 75 >= x2 + 5 ==> 5*(t + 1) + 75 >= x2 + 5;\nloop invariant i19: v2 <= 6 ==> v2 + 1 <= 7;\nloop invariant i20: v3 >= 0 ==> v3 >= 0;\nloop invariant i21: v2 + 6 >= 0 ==> v2 + 6 - 6 >= 0 - 6 ==> v2 >= -6;\nloop invariant i22: x2 + 5*t >= 75 ==> x2 + 5*(t + 1) >= 75 + 5 ==> x2 + 5*(t + 1) >= 80;\nloop invariant i23: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t - 2 >= 0 - 2 ==> v1 - 2*v2 + v3 + 2*t - 2 >= -2;\nloop invariant i24: v1 - v3 >= 0 ==> v1 - v3 - 1 >= 0 - 1 ==> v1 - v3 - 1 >= -1;\n\n\n\n\nloop invariant i29: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i30: v2 + 2*t >= v1 + v3 ==> v2 + 2*0 >= v1 + v3 ==> v2 >= v1 + v3;\nloop invariant i31: 5*t + 75 >= x2 ==> 5*0 + 75 >= x2 ==> 75 >= x2;\nloop invariant i32: v2 <= 6 ==> v2 <= 6;\nloop invariant i33: v2 + 6 >= 0 ==> v2 + 6 >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant 6 <= v2 <= 11;\nloop invariant 0 <= v3 <= 50;\nloop invariant 100 <= x1 <= 105;\nloop invariant 75 <= x2 <= 80;\nloop invariant -50 <= x3 <= 0;\nloop invariant 0 <= t <= 12;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant 6 <= v2 <= 11 is preserved but not established.\nloop invariant 0 <= v3 <= 50 is partially proven to be inductive.\nloop invariant 100 <= x1 <= 105 is partially proven to be inductive.\nloop invariant 75 <= x2 <= 80 is partially proven to be inductive.\nloop invariant -50 <= x3 <= 0 is partially proven to be inductive.\nloop invariant 0 <= t <= 12 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2 * v2 - v1 - v3 == 0 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 <= 0 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5 * t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= v1 <= 5;\n\nloop invariant i3: 0 <= v3 <= 50;\n\n\n\n\nloop invariant i8: v1 - v3 >= 0;\n\n\n\n\n\nloop invariant i14: v2 + 6 >= 0;\nloop invariant i15: v3 >= 0;\nloop invariant i16: x2 + 5 * t >= 75;\nloop invariant i17: v1 - 2 * v2 + v3 + 2 * t >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "```\n/*@\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant 5 * t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant v2 <= 6;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2 * v2 - v1 - v3 == 0 is partially proven to be inductive.\nloop invariant 0 <= v2 <= 5 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant 2 * x2 - x1 - x3 <= 0 is preserved but not established.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant x2 + 5 * t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant 2 * v2 + 2 * t >= v1 + v3 is partially proven to be inductive.\nloop invariant 5 * t + 75 >= x2 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: 0 <= v1 <= 5;\nloop invariant i2: v1 - v3 >= 0;\n\n\n\n\n\nloop invariant i8: v2 + 6 >= 0;\nloop invariant i9: v3 >= 0;\nloop invariant i10: v2 <= 6;\nloop invariant i11: x2 + 5 * t >= 75;\nloop invariant i12: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i13: v1 <= 5;\nloop invariant i14: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i15: 5 * t + 75 >= x2;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 28,
                "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant 5*t + 75 >= x2;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 <= 5;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v3 >= 0;\nloop invariant 2*x2 - x1 - x3 >= 0;\nloop invariant 2*x2 - x1 - x3 <= 0;\nloop invariant x1 >= 100;\nloop invariant x2 >= 75;\nloop invariant x3 <= -50;\nloop invariant x1 >= x2;\nloop invariant x1 >= x3;\nloop invariant x2 >= x3;\nloop invariant x1 + v1 >= x2 + v2;\nloop invariant x1 + v1 >= x3 + v3;\nloop invariant x2 + v2 >= x3 + v3;\nloop invariant x1 + v1 <= x2 + v2;\nloop invariant x1 + v1 <= x3 + v3;\nloop invariant x2 + v2 <= x3 + v3;\nloop invariant x1 + v1 >= x2 + v2 + v3;\nloop invariant x1 + v1 >= x3 + v2 + v3;\nloop invariant x2 + v2 >= x3 + v2 + v3;\nloop invariant x1 + v1 <= x2 + v2 + v3;\nloop invariant x1 + v1 <= x3 + v2 + v3;\nloop invariant x2 + v2 <= x3 + v2 + v3;\nloop invariant x1 + v1 >= x2 + v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + v2 + 2*v3;\nloop invariant x1 + v1 >= x2 + 2*v2 + v3;\nloop invariant x1 + v1 >= x3 + 2*v2 + v3;\nloop invariant x2 + v2 >= x3 + 2*v2 + v3;\nloop invariant x1 + v1 <= x2 + 2*v2 + v3;\nloop invariant x1 + v1 <= x3 + 2*v2 + v3;\nloop invariant x2 + v2 <= x3 + 2*v2 + v3;\nloop invariant x1 + v1 >= x2 + 2*v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + 2*v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + 2*v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + 2*v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + 2*v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + 2*v2 + 2*v3;\nloop invariant x1 + v1 >= x2 + 3*v2 + v3;\nloop invariant x1 + v1 >= x3 + 3*v2 + v3;\nloop invariant x2 + v2 >= x3 + 3*v2 + v3;\nloop invariant x1 + v1 <= x2 + 3*v2 + v3;\nloop invariant x1 + v1 <= x3 + 3*v2 + v3;\nloop invariant x2 + v2 <= x3 + 3*v2 + v3;\nloop invariant x1 + v1 >= x2 + 3*v2 + 2*v3;\nloop invariant x1 + v1 >= x3 + 3*v2 + 2*v3;\nloop invariant x2 + v2 >= x3 + 3*v2 + 2*v3;\nloop invariant x1 + v1 <= x2 + 3*v2 + 2*v3;\nloop invariant x1 + v1 <= x3 + 3*v2 + 2*v3;\nloop invariant x2 + v2 <= x3 + 3*v2 + 2*v3;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is partially proven to be inductive.\nloop invariant 0 <= t <= 5 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 <= 0 is preserved but not established.\nloop invariant x1 >= 100 is partially proven to be inductive.\nloop invariant x2 >= 75 is partially proven to be inductive.\nloop invariant x3 <= -50 is partially proven to be inductive.\nloop invariant x1 >= x2 is partially proven to be inductive.\nloop invariant x1 >= x3 is partially proven to be inductive.\nloop invariant x2 >= x3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + v2 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + v2 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + 2*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + 2*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + 3*v2 + v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x2 + 3*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 >= x3 + 3*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 >= x3 + 3*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x2 + 3*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x1 + v1 <= x3 + 3*v2 + 2*v3 is partially proven to be inductive.\nloop invariant x2 + v2 <= x3 + 3*v2 + 2*v3 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: v2 + 6 >= 0;\nloop invariant i4: 5*t + 75 >= x2;\nloop invariant i5: x2 + 5*t >= 75;\nloop invariant i6: v1 <= 5;\nloop invariant i7: 2*v2 + 2*t >= v1 + v3;\nloop invariant i8: v1 - v3 >= 0;\nloop invariant i9: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i10: v3 >= 0;\n\n\nloop invariant i13: x1 >= 100;\n\n\n\nloop invariant i17: x1 >= x3;\n\n\nloop invariant i20: x1 + v1 >= x3 + v3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is established but not preserved.\nloop invariant 0 <= v1 <= 5 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 - v1 - v3 == 0 is established but not preserved.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Unproven\nAssertion 5 * t + 75 >= x2: Unproven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Unproven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= v1 <= 5;\nloop invariant i3: v1 - v3 >= 0;\n\n\n\nloop invariant i7: v2 + 6 >= 0;\nloop invariant i8: v1 <= 5;\nloop invariant i9: v3 >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 8,
                "annotations": "```\n/*@\nloop invariant 0 <= y <= 100000;\nloop invariant x >= (1 + (y - 1) * y / 2);\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant 2 * x2 - x1 - x3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant x2 + 5 * t >= 75;\nloop invariant v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 + 2 * t >= v1 + v3;\nloop invariant x2 >= 75;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v3 <= 100;\nloop invariant x1 >= 1;\nloop invariant x1 <= 100;\nloop invariant x2 >= 1;\nloop invariant x2 <= 100;\nloop invariant x3 >= -50;\nloop invariant x3 <= 100;\nloop invariant v1 >= -5;\nloop invariant v1 <= 5;\nloop invariant v2 >= -4;\nloop invariant v2 <= 6;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\nloop invariant i3: v1 <= 5;\nloop invariant i4: v1 - v3 >= 0;\n\n\n\n\n\nloop invariant i10: t >= 0;\nloop invariant i11: v2 + 6 >= 0;\nloop invariant i12: v3 >= 0;\nloop invariant i13: x2 + 5 * t >= 75;\nloop invariant i14: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i15: 2 * v2 + 2 * t >= v1 + v3;\n\nloop invariant i17: x3 >= -50;\n\n\nloop invariant i20: v2 <= 6;\nloop invariant i21: v3 <= 100;\nloop invariant i22: x1 >= 1;\n\n\n\nloop invariant i26: v1 >= -5;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3;\nloop invariant 5*t + 75 >= x2;\nloop invariant v2 <= 6;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant t >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is established but not preserved.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 is partially proven to be inductive.\nloop invariant v2 <= 6 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v2 + 5 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant t >= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: v1 <= 5;\nloop invariant i3: v1 - v3 >= 0;\nloop invariant i4: 2*v2 + 2*t >= v1 + v3;\nloop invariant i5: 5*t + 75 >= x2;\nloop invariant i6: v2 <= 6;\nloop invariant i7: v3 >= 0;\nloop invariant i8: v2 + 6 >= 0;\nloop invariant i9: x2 + 5*t >= 75;\nloop invariant i10: v1 - 2*v2 + v3 + 2*t >= 0;\n\n\nloop invariant i13: t >= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 38,
                "annotations": "```\n/*@\nloop invariant 0 <= x1 <= 100;\nloop invariant 0 <= x2 <= 75;\nloop invariant -50 <= x3 <= 50;\nloop invariant 0 <= v1 <= 5;\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant 0 <= t;\nloop invariant unknown_int() ==> (v2 +5 >=0);\nloop invariant unknown_int() ==> (v2 <= 5);\nloop invariant (!unknown_int()) ==> (2* x2 - x1 - x3>=0);\nloop invariant (!unknown_int()) ==> (2* x2 - x1 - x3 <=0);\nloop invariant (unknown_int() ==> (2* x2 - x1 - x3>=0)) => (!unknown_int() ==> (2* x2 - x1 - x3 <=0));\nloop invariant unknown_int() ==> (x1 = x1+v1);\nloop invariant unknown_int() ==> (x3 = x3+v3);\nloop invariant unknown_int() ==> (x2 = x2+v2);\nloop invariant unknown_int() ==> (v2 = v2-1);\nloop invariant (!unknown_int()) ==> (x1 = x1+v1);\nloop invariant (!unknown_int()) ==> (x3 = x3+v3);\nloop invariant (!unknown_int()) ==> (x2 = x2+v2);\nloop invariant (!unknown_int()) ==> (v2 = v2+1);\nloop invariant unknown_int() ==> (t = t+1);\nloop invariant (!unknown_int()) ==> (t = t+1);\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant unknown_int() ==> v2 <= 5;\nloop invariant unknown_int() ==> v3 >= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant unknown_int() ==> 5*t  + 75 >= x2;\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> v2 <= 6;\nloop invariant (!unknown_int()) ==> v2 <= 6;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> x2 + 5*t >= 75;\nloop invariant unknown_int() ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant (!unknown_int()) ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant unknown_int() ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant unknown_int() ==> v1 - v3 >= 0;\nloop invariant (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant (!unknown_int()) ==> v3  >= 0;\nloop invariant unknown_int() ==> 5*t  + 75 >= x2;\nloop invariant (!unknown_int()) ==> 5*t  + 75 >= x2;\nloop invariant unknown_int() ==> x2 + 5*t >= 75;\nloop invariant (!unknown_int()) ==> x2 + 5*t >= 75;\nloop invariant unknown_int() ==> v2 <= 6;\nloop invariant (!unknown_int()) ==> v2 <= 6;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant (!unknown_int()) ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> v1 <= 5;\nloop invariant (!unknown_int()) ==> v1 <= 5;\nloop invariant unknown_int() ==> v3  >= 0;\nloop invariant (!unknown_int()) ==> v3  >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 52: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\nloop invariant i4: 0 <= v1 <= 5;\n\nloop invariant i6: 0 <= v3;\nloop invariant i7: 0 <= t;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "```\n/*@\n\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 45: unexpected token ''",
                "houdini_error": "No annotations found"
            },
            {
                "num_solver_calls": 28,
                "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= v3;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v2 + 6 >= 0;\nloop invariant v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 + 6 >= 0;\nloop invariant 2 * x2 - x1 - x3 >= 0 ==> v3 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 <= 5;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 + 6 >= 0;\nloop invariant 2 * x2 - x1 - x3 <= 0 ==> v3 >= 0;\nloop invariant t == 0 ==> v2 + 5 >= 0;\nloop invariant t == 0 ==> v2 <= 5;\nloop invariant t == 0 ==> v2 + 6 >= 0;\nloop invariant t == 0 ==> v3 >= 0;\nloop invariant t > 0 ==> v2 + 5 >= 0;\nloop invariant t > 0 ==> v2 <= 5;\nloop invariant t > 0 ==> v2 + 6 >= 0;\nloop invariant t > 0 ==> v3 >= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0;\nloop invariant unknown_int() ==> v2 <= 5;\nloop invariant unknown_int() ==> v2 + 6 >= 0;\nloop invariant unknown_int() ==> v3 >= 0;\nloop invariant !unknown_int() ==> v2 + 5 >= 0;\nloop invariant !unknown_int() ==> v2 <= 5;\nloop invariant !unknown_int() ==> v2 + 6 >= 0;\nloop invariant !unknown_int() ==> v3 >= 0;\nloop invariant unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant !unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant !unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant !unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant !unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 70: unexpected token ')'",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= v3;\nloop invariant i3: v1 <= 5;\nloop invariant i4: v1 - v3 >= 0;\n\n\n\nloop invariant i8: v2 + 6 >= 0;\nloop invariant i9: v3 >= 0;\n\n\nloop invariant i12: 2 * x2 - x1 - x3 >= 0 ==> v2 + 6 >= 0;\nloop invariant i13: 2 * x2 - x1 - x3 >= 0 ==> v3 >= 0;\n\n\nloop invariant i16: 2 * x2 - x1 - x3 <= 0 ==> v2 + 6 >= 0;\nloop invariant i17: 2 * x2 - x1 - x3 <= 0 ==> v3 >= 0;\n\n\nloop invariant i20: t == 0 ==> v2 + 6 >= 0;\nloop invariant i21: t == 0 ==> v3 >= 0;\n\n\nloop invariant i24: t > 0 ==> v2 + 6 >= 0;\nloop invariant i25: t > 0 ==> v3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= x3 <= -50;\nloop invariant 0 <= v3 <= 100000;\nloop invariant x1 >= -50;\nloop invariant x2 >= 75;\nloop invariant x1 + x2 >= -25;\nloop invariant v1 + v2 + v3 >= -100000;\nloop invariant 2*v2 + 2*t >= -100000;\nloop invariant v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 <= 100000;\nloop invariant 0 <= x3 <= -50;\nloop invariant 0 <= v3 <= 100000;\nloop invariant x1 >= -50;\nloop invariant x2 >= 75;\nloop invariant x1 + x2 >= -25;\nloop invariant v1 + v2 + v3 >= -100000;\nloop invariant 2*v2 + 2*t >= -100000;\nloop invariant v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant v1 >= 0;\nloop invariant v2 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v2 + 6 >= 0;\nloop invariant v1 - v3 >= 0;\nloop invariant x2 + 5*t >= 75;\nloop invariant x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 >= -100000;\nloop invariant 2*x2 - x1 - x3 <= 100000;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x3 <= -50 is preserved but not established.\nloop invariant 0 <= v3 <= 100000 is partially proven to be inductive.\nloop invariant x1 >= -50 is partially proven to be inductive.\nloop invariant x2 >= 75 is partially proven to be inductive.\nloop invariant x1 + x2 >= -25 is partially proven to be inductive.\nloop invariant v1 + v2 + v3 >= -100000 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= -100000 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= -100000 is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant x2 + 5*t >= 75 is partially proven to be inductive.\nloop invariant x1 - x3 >= -100000 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 >= -100000 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 <= 100000 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\nloop invariant i2: 0 <= v3 <= 100000;\nloop invariant i3: x1 >= -50;\n\n\nloop invariant i6: v1 + v2 + v3 >= -100000;\nloop invariant i7: 2*v2 + 2*t >= -100000;\nloop invariant i8: v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant i9: v1 >= 0;\n\n\nloop invariant i12: v3 >= 0;\nloop invariant i13: v2 + 6 >= 0;\nloop invariant i14: v1 - v3 >= 0;\nloop invariant i15: x2 + 5*t >= 75;\nloop invariant i16: x1 - x3 >= -100000;\n\n\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "```\n/*@\nloop invariant 0 <= v2 <= 5;\nloop invariant 0 <= t <= v2 + 6 - v1 + v3;\nloop invariant 0 <= x3 <= v3;\nloop invariant 0 <= x1 <= 100 + v1;\nloop invariant 0 <= x2 <= 75 + v2;\nloop invariant v1 <= 5;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 == t;\nloop invariant 2*x2 - x1 - x3 >= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 >= 0;\nloop invariant 2*x2 - x1 - x3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 >= 0 ==> 2*x2 - x1 - x3 >= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> 2*x2 - x1 - x3 <= 0;\nloop invariant 5*t + 75 >= x2 ==> x2 >= 5*t + 75;\nloop invariant v2 + 6 >= 0 ==> v2 >= -6;\nloop invariant v3 >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 >= v3;\nloop invariant v1 <= 5 ==> v1 + v3 >= 0;\nloop invariant v2 <= 5 ==> v2 + v3 >= 0;\nloop invariant 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0;\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\n*/\n```",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= v2 <= 5 is partially proven to be inductive.\nloop invariant 0 <= t <= v2 + 6 - v1 + v3 is partially proven to be inductive.\nloop invariant 0 <= x3 <= v3 is preserved but not established.\nloop invariant 0 <= x1 <= 100 + v1 is partially proven to be inductive.\nloop invariant 0 <= x2 <= 75 + v2 is partially proven to be inductive.\nloop invariant v1 <= 5 is partially proven to be inductive.\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 == t is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 >= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 >= 0 is partially proven to be inductive.\nloop invariant 2*x2 - x1 - x3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0 is partially proven to be inductive.\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 >= 0 ==> 2*x2 - x1 - x3 >= 0 is partially proven to be inductive.\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> 2*x2 - x1 - x3 <= 0 is partially proven to be inductive.\nloop invariant 5*t + 75 >= x2 ==> x2 >= 5*t + 75 is partially proven to be inductive.\nloop invariant v2 + 6 >= 0 ==> v2 >= -6 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 ==> v1 >= v3 is partially proven to be inductive.\nloop invariant v1 <= 5 ==> v1 + v3 >= 0 is partially proven to be inductive.\nloop invariant v2 <= 5 ==> v2 + v3 >= 0 is partially proven to be inductive.\nloop invariant 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0 is partially proven to be inductive.\nloop invariant v1 - v3 >= 0 ==> v1 - v3 >= 0 is partially proven to be inductive.\nloop invariant x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0 is partially proven to be inductive.\nAssertion v1 <= 5: Partially proven\nAssertion 2 * v2 + 2 * t >= v1 + v3: Partially proven\nAssertion 5 * t + 75 >= x2: Partially proven\nAssertion v2 <= 6: Partially proven\nAssertion v3 >= 0: Partially proven\nAssertion v2 + 6 >= 0: Partially proven\nAssertion x2 + 5 * t >= 75: Partially proven\nAssertion ((v1 - 2 * v2) + v3) + 2 * t >= 0: Partially proven\nAssertion v1 - v3 >= 0: Partially proven",
                "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\n\n\n\n\n\nloop invariant i6: v1 <= 5;\n\n\n\n\n\n\nloop invariant i13: v2 + 6 >= 0 ==> v2 >= -6;\nloop invariant i14: v3 >= 0;\nloop invariant i15: v1 - v3 >= 0 ==> v1 >= v3;\nloop invariant i16: v1 <= 5 ==> v1 + v3 >= 0;\n\nloop invariant i18: 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0;\nloop invariant i19: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i20: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i21: x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 168: unexpected token ')'",
        "code_with_combined_annotations": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: x1 >= 100;\nloop invariant i2: x2 >= 75;\nloop invariant i3: x3 <= -50;\nloop invariant i4: v3 >= 0;\nloop invariant i5: v1 <= 5;\nloop invariant i6: v2 >= 0;\nloop invariant i7: v2 <= 5;\nloop invariant i8: v2 + 5 >= 0;\nloop invariant i9: 2*v2 + 2*t >= v1 + v3;\nloop invariant i10: 5*t + 75 >= x2;\nloop invariant i11: v2 + 6 >= 0;\nloop invariant i12: v2 <= 6;\nloop invariant i13: x2 + 5*t >= 75;\nloop invariant i14: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i15: v1 - v3 >= 0;\nloop invariant i16: 2*(x2 + v2*t) >= x1 + x3;\nloop invariant i17: 2*(x2 + v2*t) - x1 - x3 >= 0;\nloop invariant i18: 0 <= v2 <= 5;\nloop invariant i19: 0 <= t <= 5;\nloop invariant i20: v1 - v2 + v3 >= -v2;\nloop invariant i21: v1 + v3 >= 0;\nloop invariant i22: 2 * v2 + 2 * t >= v1 + v3;\nloop invariant i23: 2 * x2 - x1 - x3 >= 0;\nloop invariant i24: t <= 5;\nloop invariant i25: x2 + 5 * t >= 75;\nloop invariant i26: x2 + 5 * t <= 125;\nloop invariant i27: 5 * t + 75 >= x2;\nloop invariant i28: 0 <= y <= 100000;\nloop invariant i29: x >= (1 + (y - 1) * y / 2);\nloop invariant i30: v2 + 2*t >= v1 + v3;\nloop invariant i31: x1 >= x2;\nloop invariant i32: x1 >= x3;\nloop invariant i33: x2 >= x3;\nloop invariant i34: 0 <= y <= 100000 ==> 0 <= y + 1 <= 100000;\nloop invariant i35: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (y - 1) * (y + 1) / 2) ==> x >= (1 + (y - 1) * y / 2 + (y - 1));\nloop invariant i36: v1 - v3 >= 0 ==> v2 - v1 - v3 >= 0 ==> v2 - (v1 + v3) >= 0 ==> v2 + 2*t >= (v1 + v3) + 2*t ==> v2 + 2*t >= v1 + v3;\nloop invariant i37: v2 + 2*t >= v1 + v3 ==> v2 + 2*t - 5 >= (v1 + v3) - 5 ==> v2 + 2*t - 5 >= v1 - v3;\nloop invariant i38: 5*t + 75 >= x2 ==> 5*(t + 1) + 75 >= x2 + 5 ==> 5*(t + 1) + 75 >= x2 + 5;\nloop invariant i39: v2 <= 6 ==> v2 + 1 <= 7;\nloop invariant i40: v3 >= 0 ==> v3 >= 0;\nloop invariant i41: v2 + 6 >= 0 ==> v2 + 6 - 6 >= 0 - 6 ==> v2 >= -6;\nloop invariant i42: x2 + 5*t >= 75 ==> x2 + 5*(t + 1) >= 75 + 5 ==> x2 + 5*(t + 1) >= 80;\nloop invariant i43: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t - 2 >= 0 - 2 ==> v1 - 2*v2 + v3 + 2*t - 2 >= -2;\nloop invariant i44: v1 - v3 >= 0 ==> v1 - v3 - 1 >= 0 - 1 ==> v1 - v3 - 1 >= -1;\nloop invariant i45: x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v2;\nloop invariant i46: x1 >= x2 ==> x1 + v1 >= x2 + v1 ==> x1 + v1 >= x2 + v1 + v3;\nloop invariant i47: 0 <= y <= 100000 ==> 0 <= 100000 <= 100000;\nloop invariant i48: x >= (1 + (y - 1) * y / 2) ==> x >= (1 + (100000 - 1) * 100000 / 2) ==> x >= 25000000000;\nloop invariant i49: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i50: v2 + 2*t >= v1 + v3 ==> v2 + 2*0 >= v1 + v3 ==> v2 >= v1 + v3;\nloop invariant i51: 5*t + 75 >= x2 ==> 5*0 + 75 >= x2 ==> 75 >= x2;\nloop invariant i52: v2 <= 6 ==> v2 <= 6;\nloop invariant i53: v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant i54: 0 <= v1 <= 5;\nloop invariant i55: 6 <= v2 <= 11;\nloop invariant i56: 0 <= v3 <= 50;\nloop invariant i57: 100 <= x1 <= 105;\nloop invariant i58: 75 <= x2 <= 80;\nloop invariant i59: -50 <= x3 <= 0;\nloop invariant i60: 0 <= t <= 12;\nloop invariant i61: 2 * v2 - v1 - v3 == 0;\nloop invariant i62: 2 * x2 - x1 - x3 <= 0;\nloop invariant i63: v1 - 2 * v2 + v3 + 2 * t >= 0;\nloop invariant i64: 2*x2 - x1 - x3 >= 0;\nloop invariant i65: 2*x2 - x1 - x3 <= 0;\nloop invariant i66: x1 + v1 >= x2 + v2;\nloop invariant i67: x1 + v1 >= x3 + v3;\nloop invariant i68: x2 + v2 >= x3 + v3;\nloop invariant i69: x1 + v1 <= x2 + v2;\nloop invariant i70: x1 + v1 <= x3 + v3;\nloop invariant i71: x2 + v2 <= x3 + v3;\nloop invariant i72: x1 + v1 >= x2 + v2 + v3;\nloop invariant i73: x1 + v1 >= x3 + v2 + v3;\nloop invariant i74: x2 + v2 >= x3 + v2 + v3;\nloop invariant i75: x1 + v1 <= x2 + v2 + v3;\nloop invariant i76: x1 + v1 <= x3 + v2 + v3;\nloop invariant i77: x2 + v2 <= x3 + v2 + v3;\nloop invariant i78: x1 + v1 >= x2 + v2 + 2*v3;\nloop invariant i79: x1 + v1 >= x3 + v2 + 2*v3;\nloop invariant i80: x2 + v2 >= x3 + v2 + 2*v3;\nloop invariant i81: x1 + v1 <= x2 + v2 + 2*v3;\nloop invariant i82: x1 + v1 <= x3 + v2 + 2*v3;\nloop invariant i83: x2 + v2 <= x3 + v2 + 2*v3;\nloop invariant i84: x1 + v1 >= x2 + 2*v2 + v3;\nloop invariant i85: x1 + v1 >= x3 + 2*v2 + v3;\nloop invariant i86: x2 + v2 >= x3 + 2*v2 + v3;\nloop invariant i87: x1 + v1 <= x2 + 2*v2 + v3;\nloop invariant i88: x1 + v1 <= x3 + 2*v2 + v3;\nloop invariant i89: x2 + v2 <= x3 + 2*v2 + v3;\nloop invariant i90: x1 + v1 >= x2 + 2*v2 + 2*v3;\nloop invariant i91: x1 + v1 >= x3 + 2*v2 + 2*v3;\nloop invariant i92: x2 + v2 >= x3 + 2*v2 + 2*v3;\nloop invariant i93: x1 + v1 <= x2 + 2*v2 + 2*v3;\nloop invariant i94: x1 + v1 <= x3 + 2*v2 + 2*v3;\nloop invariant i95: x2 + v2 <= x3 + 2*v2 + 2*v3;\nloop invariant i96: x1 + v1 >= x2 + 3*v2 + v3;\nloop invariant i97: x1 + v1 >= x3 + 3*v2 + v3;\nloop invariant i98: x2 + v2 >= x3 + 3*v2 + v3;\nloop invariant i99: x1 + v1 <= x2 + 3*v2 + v3;\nloop invariant i100: x1 + v1 <= x3 + 3*v2 + v3;\nloop invariant i101: x2 + v2 <= x3 + 3*v2 + v3;\nloop invariant i102: x1 + v1 >= x2 + 3*v2 + 2*v3;\nloop invariant i103: x1 + v1 >= x3 + 3*v2 + 2*v3;\nloop invariant i104: x2 + v2 >= x3 + 3*v2 + 2*v3;\nloop invariant i105: x1 + v1 <= x2 + 3*v2 + 2*v3;\nloop invariant i106: x1 + v1 <= x3 + 3*v2 + 2*v3;\nloop invariant i107: x2 + v2 <= x3 + 3*v2 + 2*v3;\nloop invariant i108: 2*v2 - v1 - v3 == 0;\nloop invariant i109: t >= 0;\nloop invariant i110: x3 >= -50;\nloop invariant i111: x3 <= 100;\nloop invariant i112: v2 >= -4;\nloop invariant i113: v3 <= 100;\nloop invariant i114: x1 >= 1;\nloop invariant i115: x1 <= 100;\nloop invariant i116: x2 >= 1;\nloop invariant i117: x2 <= 100;\nloop invariant i118: v1 >= -5;\nloop invariant i119: 0 <= x1 <= 100;\nloop invariant i120: 0 <= x2 <= 75;\nloop invariant i121: -50 <= x3 <= 50;\nloop invariant i122: 0 <= v3;\nloop invariant i123: 0 <= t;\nloop invariant i124: unknown_int() ==> (v2 +5 >=0);\nloop invariant i125: unknown_int() ==> (v2 <= 5);\nloop invariant i126: (!unknown_int()) ==> (2* x2 - x1 - x3>=0);\nloop invariant i127: (!unknown_int()) ==> (2* x2 - x1 - x3 <=0);\nloop invariant i128: (unknown_int() ==> (2* x2 - x1 - x3>=0)) => (!unknown_int() ==> (2* x2 - x1 - x3 <=0));\nloop invariant i129: unknown_int() ==> (x1 = x1+v1);\nloop invariant i130: unknown_int() ==> (x3 = x3+v3);\nloop invariant i131: unknown_int() ==> (x2 = x2+v2);\nloop invariant i132: unknown_int() ==> (v2 = v2-1);\nloop invariant i133: (!unknown_int()) ==> (x1 = x1+v1);\nloop invariant i134: (!unknown_int()) ==> (x3 = x3+v3);\nloop invariant i135: (!unknown_int()) ==> (x2 = x2+v2);\nloop invariant i136: (!unknown_int()) ==> (v2 = v2+1);\nloop invariant i137: unknown_int() ==> (t = t+1);\nloop invariant i138: (!unknown_int()) ==> (t = t+1);\nloop invariant i139: unknown_int() ==> v1 <= 5;\nloop invariant i140: unknown_int() ==> v2 <= 5;\nloop invariant i141: unknown_int() ==> v3 >= 0;\nloop invariant i142: unknown_int() ==> v2 + 6 >= 0;\nloop invariant i143: (!unknown_int()) ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i144: (!unknown_int()) ==> v1 - v3 >= 0;\nloop invariant i145: unknown_int() ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant i146: unknown_int() ==> 5*t  + 75 >= x2;\nloop invariant i147: unknown_int() ==> v3  >= 0;\nloop invariant i148: unknown_int() ==> x2 + 5*t >= 75;\nloop invariant i149: unknown_int() ==> v2 <= 6;\nloop invariant i150: (!unknown_int()) ==> v2 <= 6;\nloop invariant i151: (!unknown_int()) ==> v2 + 6 >= 0;\nloop invariant i152: (!unknown_int()) ==> x2 + 5*t >= 75;\nloop invariant i153: (!unknown_int()) ==> 2*v2 + 2*t  >= v1 + v3;\nloop invariant i154: unknown_int() ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i155: unknown_int() ==> v1 - v3 >= 0;\nloop invariant i156: (!unknown_int()) ==> v3  >= 0;\nloop invariant i157: (!unknown_int()) ==> 5*t  + 75 >= x2;\nloop invariant i158: (!unknown_int()) ==> v1 <= 5;\nloop invariant i159: 2 * x2 - x1 - x3 >= 0 ==> v2 + 5 >= 0;\nloop invariant i160: 2 * x2 - x1 - x3 >= 0 ==> v2 <= 5;\nloop invariant i161: 2 * x2 - x1 - x3 >= 0 ==> v2 + 6 >= 0;\nloop invariant i162: 2 * x2 - x1 - x3 >= 0 ==> v3 >= 0;\nloop invariant i163: 2 * x2 - x1 - x3 <= 0 ==> v2 + 5 >= 0;\nloop invariant i164: 2 * x2 - x1 - x3 <= 0 ==> v2 <= 5;\nloop invariant i165: 2 * x2 - x1 - x3 <= 0 ==> v2 + 6 >= 0;\nloop invariant i166: 2 * x2 - x1 - x3 <= 0 ==> v3 >= 0;\nloop invariant i167: t == 0 ==> v2 + 5 >= 0;\nloop invariant i168: t == 0 ==> v2 <= 5;\nloop invariant i169: t == 0 ==> v2 + 6 >= 0;\nloop invariant i170: t == 0 ==> v3 >= 0;\nloop invariant i171: t > 0 ==> v2 + 5 >= 0;\nloop invariant i172: t > 0 ==> v2 <= 5;\nloop invariant i173: t > 0 ==> v2 + 6 >= 0;\nloop invariant i174: t > 0 ==> v3 >= 0;\nloop invariant i175: unknown_int() ==> v2 + 5 >= 0;\nloop invariant i176: !unknown_int() ==> v2 + 5 >= 0;\nloop invariant i177: !unknown_int() ==> v2 <= 5;\nloop invariant i178: !unknown_int() ==> v2 + 6 >= 0;\nloop invariant i179: !unknown_int() ==> v3 >= 0;\nloop invariant i180: unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i181: unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i182: !unknown_int() ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i183: !unknown_int() ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i184: unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i185: unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i186: unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i187: unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i188: unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i189: unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i190: unknown_int() ==> v2 + 6 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i191: unknown_int() ==> v3 >= 0 ==> 2 * x2 - x1 - x3 <= 0;\nloop invariant i192: !unknown_int() ==> v2 + 5 >= 0 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i193: !unknown_int() ==> v2 <= 5 ==> 2 * x2 - x1 - x3 >= 0;\nloop invariant i194: 0 <= x3 <= -50;\nloop invariant i195: 0 <= v3 <= 100000;\nloop invariant i196: x1 >= -50;\nloop invariant i197: x1 + x2 >= -25;\nloop invariant i198: v1 + v2 + v3 >= -100000;\nloop invariant i199: 2*v2 + 2*t >= -100000;\nloop invariant i200: v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant i201: v1 >= 0;\nloop invariant i202: x1 - x3 >= -100000;\nloop invariant i203: 2*x2 - x1 - x3 >= -100000;\nloop invariant i204: 2*x2 - x1 - x3 <= 100000;\nloop invariant i205: 0 <= t <= v2 + 6 - v1 + v3;\nloop invariant i206: 0 <= x3 <= v3;\nloop invariant i207: 0 <= x1 <= 100 + v1;\nloop invariant i208: 0 <= x2 <= 75 + v2;\nloop invariant i209: x1 + x2 + x3 - v1 - v2 - v3 == t;\nloop invariant i210: 2*x2 - x1 - x3 >= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 >= 0;\nloop invariant i211: 2*x2 - x1 - x3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\nloop invariant i212: x1 + x2 + x3 - v1 - v2 - v3 >= 0 ==> 2*x2 - x1 - x3 >= 0;\nloop invariant i213: x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> 2*x2 - x1 - x3 <= 0;\nloop invariant i214: 5*t + 75 >= x2 ==> x2 >= 5*t + 75;\nloop invariant i215: v2 + 6 >= 0 ==> v2 >= -6;\nloop invariant i216: v1 - v3 >= 0 ==> v1 >= v3;\nloop invariant i217: v1 <= 5 ==> v1 + v3 >= 0;\nloop invariant i218: v2 <= 5 ==> v2 + v3 >= 0;\nloop invariant i219: 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0;\nloop invariant i220: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i221: x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 99,
        "code_after_prune": "#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\n#include <stdlib.h>\n#define assume(e) if(!(e)) exit(-1);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) \nreturn 0;\n\n\tif (! (v1 <= 5)) \nreturn 0;\n\n\tif (! (v1 -v3 >= 0)) \nreturn 0;\n\n\tif (! (2* v2 - v1 - v3 == 0)) \nreturn 0;\n\n\tt=0;\n\n\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\tif (! (v2 <= 5)) \nreturn 0;\n\n\t/*@\nloop invariant i1: x1 >= 100;\n\n\nloop invariant i4: v3 >= 0;\nloop invariant i5: v1 <= 5;\n\n\n\nloop invariant i9: 2*v2 + 2*t >= v1 + v3;\nloop invariant i10: 5*t + 75 >= x2;\nloop invariant i11: v2 + 6 >= 0;\nloop invariant i12: v2 <= 6;\nloop invariant i13: x2 + 5*t >= 75;\nloop invariant i14: v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i15: v1 - v3 >= 0;\n\n\n\n\nloop invariant i20: v1 - v2 + v3 >= -v2;\nloop invariant i21: v1 + v3 >= 0;\nloop invariant i22: 2 * v2 + 2 * t >= v1 + v3;\n\n\nloop invariant i25: x2 + 5 * t >= 75;\n\nloop invariant i27: 5 * t + 75 >= x2;\n\n\n\n\nloop invariant i32: x1 >= x3;\n\n\n\nloop invariant i36: v1 - v3 >= 0 ==> v2 - v1 - v3 >= 0 ==> v2 - (v1 + v3) >= 0 ==> v2 + 2*t >= (v1 + v3) + 2*t ==> v2 + 2*t >= v1 + v3;\n\nloop invariant i38: 5*t + 75 >= x2 ==> 5*(t + 1) + 75 >= x2 + 5 ==> 5*(t + 1) + 75 >= x2 + 5;\nloop invariant i39: v2 <= 6 ==> v2 + 1 <= 7;\nloop invariant i40: v3 >= 0 ==> v3 >= 0;\nloop invariant i41: v2 + 6 >= 0 ==> v2 + 6 - 6 >= 0 - 6 ==> v2 >= -6;\nloop invariant i42: x2 + 5*t >= 75 ==> x2 + 5*(t + 1) >= 75 + 5 ==> x2 + 5*(t + 1) >= 80;\nloop invariant i43: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t - 2 >= 0 - 2 ==> v1 - 2*v2 + v3 + 2*t - 2 >= -2;\nloop invariant i44: v1 - v3 >= 0 ==> v1 - v3 - 1 >= 0 - 1 ==> v1 - v3 - 1 >= -1;\n\n\n\n\nloop invariant i49: v1 - v3 >= 0 ==> v1 - v3 >= 0;\nloop invariant i50: v2 + 2*t >= v1 + v3 ==> v2 + 2*0 >= v1 + v3 ==> v2 >= v1 + v3;\nloop invariant i51: 5*t + 75 >= x2 ==> 5*0 + 75 >= x2 ==> 75 >= x2;\nloop invariant i52: v2 <= 6 ==> v2 <= 6;\nloop invariant i53: v2 + 6 >= 0 ==> v2 + 6 >= 0;\nloop invariant i54: 0 <= v1 <= 5;\n\nloop invariant i56: 0 <= v3 <= 50;\n\n\n\n\n\n\nloop invariant i63: v1 - 2 * v2 + v3 + 2 * t >= 0;\n\n\n\nloop invariant i67: x1 + v1 >= x3 + v3;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i109: t >= 0;\nloop invariant i110: x3 >= -50;\n\n\nloop invariant i113: v3 <= 100;\nloop invariant i114: x1 >= 1;\n\n\n\nloop invariant i118: v1 >= -5;\n\n\n\nloop invariant i122: 0 <= v3;\nloop invariant i123: 0 <= t;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i161: 2 * x2 - x1 - x3 >= 0 ==> v2 + 6 >= 0;\nloop invariant i162: 2 * x2 - x1 - x3 >= 0 ==> v3 >= 0;\n\n\nloop invariant i165: 2 * x2 - x1 - x3 <= 0 ==> v2 + 6 >= 0;\nloop invariant i166: 2 * x2 - x1 - x3 <= 0 ==> v3 >= 0;\nloop invariant i167: t == 0 ==> v2 + 5 >= 0;\nloop invariant i168: t == 0 ==> v2 <= 5;\nloop invariant i169: t == 0 ==> v2 + 6 >= 0;\nloop invariant i170: t == 0 ==> v3 >= 0;\n\n\nloop invariant i173: t > 0 ==> v2 + 6 >= 0;\nloop invariant i174: t > 0 ==> v3 >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i195: 0 <= v3 <= 100000;\nloop invariant i196: x1 >= -50;\n\nloop invariant i198: v1 + v2 + v3 >= -100000;\nloop invariant i199: 2*v2 + 2*t >= -100000;\nloop invariant i200: v1 - 2*v2 + v3 + 2*t >= -100000;\nloop invariant i201: v1 >= 0;\nloop invariant i202: x1 - x3 >= -100000;\n\n\n\n\n\n\n\nloop invariant i210: 2*x2 - x1 - x3 >= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 >= 0;\n\n\nloop invariant i213: x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> 2*x2 - x1 - x3 <= 0;\n\nloop invariant i215: v2 + 6 >= 0 ==> v2 >= -6;\nloop invariant i216: v1 - v3 >= 0 ==> v1 >= v3;\nloop invariant i217: v1 <= 5 ==> v1 + v3 >= 0;\n\nloop invariant i219: 2*v2 + 2*t >= v1 + v3 ==> 2*v2 + 2*t >= 0;\nloop invariant i220: v1 - 2*v2 + v3 + 2*t >= 0 ==> v1 - 2*v2 + v3 + 2*t >= 0;\nloop invariant i221: x1 + x2 + x3 - v1 - v2 - v3 <= 0 ==> x1 + x2 + x3 - v1 - v2 - v3 <= 0;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) \nreturn 0;\n\n\t\tif (! (v2 <= 5)) \nreturn 0;\n\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) \nreturn 0;\n\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\n\t{;\n//@ assert(v2 <= 6);\n}\n\n\t{;\n//@ assert(v3  >= 0);\n}\n\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../dataset/loop_invariants/code2inv/111.c",
            "../dataset/loop_invariants/sv-benchmarks/loops/sum01-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/dagger/cars.c"
        ],
        "failure": [
            "../dataset/loop_invariants/code2inv/65.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../dataset/loop_invariants/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../dataset/loop_invariants/code2inv/17.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-lit/gsv2008.c",
            "../dataset/loop_invariants/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../dataset/loop_invariants/accelerating_invariant_generation/crafted/diamond_safe2.c"
        ],
        "skipped": [],
        "total": 11,
        "success_count": 4,
        "failure_count": 7,
        "success_rate": 0.36363636363636365
    }
}